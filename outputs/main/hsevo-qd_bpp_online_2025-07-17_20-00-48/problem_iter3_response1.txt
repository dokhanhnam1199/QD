```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins based on a weighted combination of factors,
    including remaining capacity, a "best fit" preference, and a fragmentation penalty.
    It aims for a balanced approach that avoids overly greedy or overly random behavior.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Remaining Capacity: Prefer bins with less remaining capacity (but still enough to fit)
    #    This encourages filling bins efficiently without leaving excessive gaps.
    capacity_priority = 1.0 / (bins_remain_cap + 1e-9)
    priorities += 0.4 * capacity_priority  # Weight: 0.4

    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.
    #    This aims to minimize fragmentation.  A Gaussian-like function is used, but
    #    with a sharper peak than in v1 to more strongly favor near-perfect fits.
    remaining_space = bins_remain_cap - item
    best_fit_priority = np.exp(-(remaining_space**2) / (2 * (item/5)**2)) #Sharper peak
    priorities += 0.5 * best_fit_priority  # Weight: 0.5

    # 3. Fragmentation Penalty: Penalize bins where adding the item would leave a *very* small
    #    remaining space (e.g., smaller than a threshold). This tries to avoid creating
    #    useless fragments.
    fragment_threshold = item / 4  # Dynamic threshold based on item size
    fragment_penalty = np.where((remaining_space > 0) & (remaining_space < fragment_threshold),
                                -0.3,  # Penalty for creating small fragments
                                0)
    priorities += fragment_penalty #Weight = 1 implicitly

    # 4. Stochasticity (Optional): Introduce a small amount of randomness to break ties and
    #    explore different bin placements.  This can help escape local optima.  The randomness
    #    is scaled down to make sure it doesn't dominate.
    randomness = np.random.rand(len(bins_remain_cap)) * 0.05
    priorities += randomness

    # Invalidate bins where the item doesn't fit. Critical for feasibility.
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
