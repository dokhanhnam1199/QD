```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item snugly,
    while also discouraging near-empty bins and overflow.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Filter out bins that cannot fit the item at all.
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        #No valid bins available. return smallest possible priority.
        return priorities - np.inf

    # 2. Calculate remaining space after placing the item.
    remaining_space = bins_remain_cap - item

    # 3. Give higher priority to bins where the remaining space is small
    # (i.e., a tighter fit), but not too small.

    fit_score = np.exp(-np.abs(remaining_space / item)) #Smaller remaining space => larger fit_score
    fit_score[remaining_space < 0] = -np.inf # Disqualify overflow cases

    priorities = fit_score

    # 4. Penalize bins that are nearly empty relative to item size.
    empty_penalty = np.exp(-bins_remain_cap / item)
    priorities -= empty_penalty

    #Ensure that invalid bins have the smallest possible priority
    priorities[~valid_bins] = -np.inf

    return priorities
```
