```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are "just right" - not too small, not too big.
    It introduces a penalty for bins that are too close in size to the item, and for those
    that have vast unused capacity after packing.  A quantum fluctuation inspired factor
    is also introduced for randomness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf  # Cannot fit
        else:
            # Basic fit score (higher is better if it fits)
            fit_score = cap - item

            # "Just right" heuristic - penalize close fit and too much space
            # The penalty is quadratic to incentivize central values
            close_fit_penalty = np.exp(-((cap - item) / item)**2)
            waste_penalty = np.exp(-((cap - item) / (bins_remain_cap.max() + 1e-9))**2) #normalize the scale

            # Add small random 'quantum' fluctuation. This should nudge the system out of local minima.
            quantum_fluctuation = np.random.normal(0, 0.01)  #mean, standard deviation

            priorities[i] = fit_score - 0.5*close_fit_penalty-0.5*waste_penalty+quantum_fluctuation

    return priorities
```
