```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines FFD, fragmentation avoidance, and spacetime curvature."""

    epsilon = 1e-9

    # First-Fit Decreasing priority
    potential_remain_cap = bins_remain_cap - item
    potential_utilization = (bins_remain_cap - potential_remain_cap) / (bins_remain_cap + epsilon)
    ffd_priority = potential_utilization

    # Fragmentation penalty
    fragmentation_penalty = np.where(potential_remain_cap > 0, np.exp(-10*potential_remain_cap), -np.inf)
    fragmentation_penalty *= 0.5

    # Spacetime curvature (item fit) priority
    bins_remain_cap_safe = np.where(bins_remain_cap <= 0, np.inf, bins_remain_cap)
    potential = np.abs(bins_remain_cap_safe - item)
    priority_base = np.exp(-(potential**2) / (2 * (item / 2)**2))

    # Combine priorities with adjusted weights
    priorities = 0.4 * ffd_priority + 0.3 * fragmentation_penalty + 0.3 * priority_base

    # Add a small random component
    priorities += np.random.normal(0, 0.01, size=bins_remain_cap.shape)

    # Ensure feasibility
    priorities = np.where(bins_remain_cap < item, -np.inf, priorities)

    return priorities
```
