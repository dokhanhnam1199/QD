```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization and fragmentation with adaptive scaling."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    small_number = 1e-9
    frag_threshold_ratio = 4.0  # Adaptive fragmentation threshold

    # 1. Bin Utilization (adaptive)
    utilization = item / (bins_remain_cap + small_number)
    priorities = utilization

    # 2. Fragmentation (adaptive penalty)
    frag_threshold = item / frag_threshold_ratio
    frag_penalty = np.exp(-np.abs(bins_remain_cap - item - frag_threshold) / (frag_threshold + small_number))
    priorities -= 0.1 * frag_penalty

    # 3. Infeasible bins
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
