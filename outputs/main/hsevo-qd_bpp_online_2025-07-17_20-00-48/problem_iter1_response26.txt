```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap)

    # Encourage packing into bins that can fit the item, but penalize leaving tiny gaps.
    # Reward almost-full bins, to mimic First-Fit-Decreasing's advantages.

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Give a baseline priority boost for fitting. Higher cap leads to lower base priority.
            priorities[i] += 1.0 / (cap + 1e-9)  #Avoid division by 0, and penalize full bins.

            # Calculate the remaining space after placing the item
            remaining_space = cap - item

            # High reward for filling up space nearly completely
            if remaining_space < 0.1: # Threshold of 0.1. can be tuned
                priorities[i] += 10 # Higher number = greater chance of putting the item in almost filled bin
            elif remaining_space > 0.9 * cap: #If the item barely fills anything
                priorities[i] -= 2

            #Prioritize utilization, i.e prefer filling half empty containers vs almost empty
            priorities[i] += np.exp(-remaining_space)

        else:
            priorities[i] = -np.inf # Impossible to put item into, so reject

    return priorities
```
