```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function enhances priority_v1 by incorporating a more sophisticated fragmentation penalty,
    a fill-level aware utilization term, and a bin choice randomization element. It aims for a better
    balance between packing efficiency and bin diversity, reducing the chances of premature convergence.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    num_bins = len(bins_remain_cap)

    # 0. Hard constraint: Item must fit. Bins that can't fit get -inf priority.
    priorities[bins_remain_cap < item] = -np.inf

    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities  # No bin can fit the item

    # 1. Utilization Term: Favor better utilization, weighted by bin fill level.
    remaining_capacity_after_fit = bins_remain_cap - item
    bin_fill_level = (max_cap - bins_remain_cap) / max_cap  # How full the bin is
    utilization_weight = 1 - bin_fill_level  # Preferentially utilize emptier bins
    utilization = item / max_cap
    utilization_score = (1 - remaining_capacity_after_fit / max_cap) * utilization * utilization_weight
    priorities[fit_mask] += utilization_score[fit_mask]

    # 2. Advanced Fragmentation Avoidance: Adaptive penalty for small fragments,
    # considering both absolute size and relative proportion of the bin.
    tiny_fragment_threshold = 0.05 * max_cap
    small_fragment_threshold = 0.2 * max_cap
    
    # Penalties are now a function of item size *and* current bin fill level.
    tiny_fragment_penalty = -5.0 - 5.0 * utilization * (1 + bin_fill_level)  # Adjust magnitude adaptively
    small_fragment_penalty = -1.0 - 1.0 * utilization * (1 + 0.5 * bin_fill_level)

    tiny_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit <= tiny_fragment_threshold)
    small_fragment_mask = (remaining_capacity_after_fit > tiny_fragment_threshold) & (remaining_capacity_after_fit <= small_fragment_threshold)

    priorities[tiny_fragment_mask] += tiny_fragment_penalty
    priorities[small_fragment_mask] += small_fragment_penalty

    # 3. "Pressure" Term: Bins with higher remaining capacity exert more "pressure". Adjusted scaling.
    pressure = bins_remain_cap / max_cap * (1 - utilization)
    priorities[fit_mask] += 0.5 * pressure[fit_mask]

    # 4. Best Fit Bonus: Reward the bin that provides the absolute best fit (smallest waste).
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, 1.0 + 0.5 * (1 - utilization), 0)  # Adaptive bonus
    priorities += best_fit_bonus

    # 5. Empty Bin Preference (Adaptive): If the item is a significant fraction of bin size, strongly prefer an empty bin.
    empty_bin_mask = bins_remain_cap == max_cap
    empty_bin_threshold = 0.6 * max_cap
    if item >= empty_bin_threshold and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += 2.0 + 1.0 * utilization  # Stronger adaptive preference

    # 6. Bin Diversity Bonus: Encourage spreading items across different bins.
    if num_bins > 1:
        std_dev = np.std(bins_remain_cap[fit_mask])
        diversity_bonus = std_dev / max_cap
        priorities[fit_mask] += 0.25 * diversity_bonus

    # 7. Introduce Randomization:  Stochastically perturb the priorities.
    # This prevents getting stuck in local optima and promotes exploration of different packings.
    # The magnitude of the noise is scaled down for bins with a larger capacity
    noise_level = 0.05 * (1 - bins_remain_cap/max_cap) # smaller noise for full bins
    priorities[fit_mask] += np.random.normal(0, noise_level[fit_mask], np.sum(fit_mask))

    return priorities
```
