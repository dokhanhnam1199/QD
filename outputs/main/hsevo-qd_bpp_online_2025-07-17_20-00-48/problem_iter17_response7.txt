```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, and best-fit, scaled by capacity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Capacity-scaled utilization
        utilization = item / (bins_remain_cap[valid_bins] + 1e-9)
        priorities[valid_bins] = utilization

        # Fragmentation penalty, inversely proportional to item size.
        waste = bins_remain_cap[valid_bins] - item
        frag_penalty = np.exp(-waste / (item + 1e-9))  # Scaled by item size
        priorities[valid_bins] -= 0.1 * frag_penalty

        # Best-fit bonus. Smaller waste is better.
        min_waste = np.min(waste)
        best_fit_mask = waste == min_waste
        priorities[valid_bins][best_fit_mask] += 0.2  # larger bonus

    else:
        priorities = np.full_like(bins_remain_cap, -np.inf)

    return priorities
```
