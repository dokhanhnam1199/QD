```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the quantum world, where probabilities guide our actions. We'll use a heuristic blending first-fit and best-fit ideas, with a touch of 'quantum tunneling'.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, eliminate bins that can't possibly hold the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Make them infinitely bad

    # Calculate the 'energy gap' (waste) if the item were placed in each feasible bin.
    energy_gaps = bins_remain_cap - item
    energy_gaps[infeasible_bins] = np.inf #prevent from influencing

    # Best Fit Component: Smaller gaps are generally better, think 'ground state'
    #We use reciprocal of squared energy gap as best fit heuristics to favor smaller wastes
    best_fit_priority = 1.0 / (energy_gaps**2 + 1e-9)  # Adding a small constant for numerical stability. Prevents division by zero if we perfectly fill

    # First Fit Component: We also encourage early bins, so avoid filling all the bins.
    first_fit_priority = np.exp(-np.arange(len(bins_remain_cap)) * 0.1) #Exponential decay encourages filling bins at beginning

    #A quantum term: Tunneling: Introduce a small probability of selecting 'almost full' bins to avoid local minima
    tunneling_threshold = 0.95
    almost_full = (item / bins_remain_cap) > tunneling_threshold
    tunneling_priority = np.where(almost_full,1/(1-item/bins_remain_cap+1e-9),0)
    # Combine components with weights.
    #Experimenting with different weighs might imporve result further
    priorities = 0.6 * best_fit_priority + 0.3 * first_fit_priority + 0.1*tunneling_priority


    return priorities
```
