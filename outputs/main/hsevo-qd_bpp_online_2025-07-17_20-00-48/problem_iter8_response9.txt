```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, and best-fit with energy considerations."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bin penalty
    priorities[bins_remain_cap < item] = -np.inf
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        # 1. Bin Utilization & Energy
        utilization = item / (np.max(bins_remain_cap) + 1e-9)
        remaining_percentage = (bins_remain_cap[fit_mask] - item) / (np.max(bins_remain_cap) + 1e-9)
        priorities[fit_mask] += (1 - remaining_percentage) * utilization

        energy = 1.0 / (bins_remain_cap[fit_mask] + 1e-9)
        priorities[fit_mask] += 0.1 * energy # Scale Energy term

        # 2. Fragmentation penalty - adaptive
        frag_threshold = item / 4.0
        frag_penalty = np.exp(-np.abs(bins_remain_cap[fit_mask] - item - frag_threshold) / (frag_threshold + 1e-9))
        priorities[fit_mask] -= 0.2 * frag_penalty

        # 3. Best Fit Bonus
        diffs = bins_remain_cap[fit_mask] - item
        min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
        best_fit_bonus = np.where(diffs == min_diff, 0.1, 0)
        priorities[fit_mask] += best_fit_bonus

        # 4. Potential well to add more variance in bin selection
        diff = bins_remain_cap[fit_mask] - item
        potential_well = np.exp(-(diff**2) / (2 * (item/3)**2))
        priorities[fit_mask] += 0.05 * potential_well # reduce weight

    return priorities
```
