```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins with just enough space, but also considers the remaining wasted space.
    It introduces a penalty for bins that are too large or too small relative to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, filter out bins that cannot fit the item
    valid_bins = bins_remain_cap >= item

    # Calculate "fit score" (how close the item size is to the remaining capacity). High values = good fit
    fit_scores = np.zeros_like(bins_remain_cap, dtype=float)
    fit_scores[valid_bins] = np.exp(-np.abs(bins_remain_cap[valid_bins] - item) / item)

    # Calculate "waste score" (lower waste = better). Higher values = less waste
    waste_scores = np.zeros_like(bins_remain_cap, dtype=float)
    waste_scores[valid_bins] = 1 / (bins_remain_cap[valid_bins] - item + 0.0001) # Avoid division by zero. Can be any small value
    waste_scores[~valid_bins] = -1  # Very bad score if item doesn't fit

    #Combine scores to assign priorities
    priorities = fit_scores * waste_scores

    return priorities
```
