```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins based on a combination of factors, now including a simulated "pressure"
    analogy and adaptive adjustments for large and small items, and explicitly avoids creating extremely small
    fragments by rejecting bins that would lead to near-zero remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # 0. Hard constraint: Item must fit.  Bins that can't fit get -inf priority.
    priorities[bins_remain_cap < item] = -np.inf

    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities  # No bin can fit the item

    # 1. Utilization Term:  Favor better utilization, but scale based on item size.
    utilization = item / max_cap  # Item size relative to maximum capacity
    remaining_capacity_after_fit = bins_remain_cap - item
    utilization_score = (1 - remaining_capacity_after_fit / max_cap) * utilization
    priorities[fit_mask] += utilization_score[fit_mask]

    # 2. Fragmentation Avoidance:  Strongly penalize bins that will result in tiny fragments.
    tiny_fragment_threshold = 0.05 * max_cap  # Significantly smaller than before, more aggressive
    small_fragment_threshold = 0.2 * max_cap   #Adjusted threshold

    tiny_fragment_penalty = -10.0 #Very strong penalty
    small_fragment_penalty = -2.0

    tiny_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit <= tiny_fragment_threshold)
    small_fragment_mask = (remaining_capacity_after_fit > tiny_fragment_threshold) & (remaining_capacity_after_fit <= small_fragment_threshold)

    priorities[tiny_fragment_mask] += tiny_fragment_penalty
    priorities[small_fragment_mask] += small_fragment_penalty

    # 3. "Pressure" Term:  Simulate bins as containers with "pressure."  Bins with higher remaining
    # capacity exert more "pressure" to accept the item, but scale down with item size to prevent overfilling.
    pressure = bins_remain_cap / max_cap * (1 - utilization)
    priorities[fit_mask] += 0.5 * pressure[fit_mask]

    # 4. Best Fit Bonus:  Reward the bin that provides the absolute best fit (smallest waste).
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, 1.5, 0)
    priorities += best_fit_bonus

    # 5. Empty Bin Preference (Adaptive): If the item is a significant fraction of bin size, strongly prefer
    # an empty bin.  The threshold is now adaptive and more stringent.
    empty_bin_mask = bins_remain_cap == max_cap
    empty_bin_threshold = 0.6 * max_cap
    if item >= empty_bin_threshold and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += 3.0 # Strong preference

    # 6. Introduce a "Level Balancing" term. Prefer bins that have remaining capacity closest to the average
    # remaining capacity across all bins. This aims to distribute items more evenly.

    average_remaining_capacity = np.mean(bins_remain_cap)
    capacity_difference = np.abs(bins_remain_cap - average_remaining_capacity)
    # Scale the penalty so that larger deviations are penalized more
    level_balancing_penalty = -0.1 * capacity_difference / max_cap
    priorities[fit_mask] += level_balancing_penalty[fit_mask]

    # 7. Modify Best Fit Bonus: Make it more sensitive to relative difference.
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf

    if np.any(diffs >= 0):
      best_fit_mask = diffs == min_diff
      if np.any(best_fit_mask):
        # Scale the bonus based on how "good" the best fit is relative to the item size
        best_fit_relative_waste = min_diff / item
        best_fit_bonus_scaled = 2.0 * (1 - best_fit_relative_waste) # Bonus closer to 2 if waste is small
        priorities[best_fit_mask] += best_fit_bonus_scaled

    return priorities
```
