```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the tendency of radioactive elements to fill available spaces,
    we prioritize bins based on a combination of how well the item fits
    and how full the bin would become after insertion.  We discourage
    leaving bins mostly empty.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Fit score: Closer fit is better, but not perfect fit (to avoid local optima)
            fit_score = np.exp(-np.abs((cap - item) / (item + 1e-9))) # Exponential decay

            # Fullness score: Reward bins that become fuller, but penalize near-empty bins
            fullness_score = (item / (cap+ 1e-9)) * (1 - (cap-item) / (cap + 1e-9))
            #Consider cases where the bin is almost full
            if cap - item < 1e-9: #Very close to full
                fullness_score = 1.0 #set to max val
                fit_score = 1.0
            
            if cap - item > cap *0.9: # almost empty
                fullness_score = -0.5

            priorities[i] = fit_score + fullness_score
        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority
    return priorities
```
