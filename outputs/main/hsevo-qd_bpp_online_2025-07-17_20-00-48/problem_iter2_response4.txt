```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines proximity to item size with a capacity bias and target occupancy."""
    diff = np.abs(bins_remain_cap - item)
    epsilon = 1e-6
    priorities = np.where(bins_remain_cap >= item, 1 / (diff + epsilon), -np.inf)
    priorities = priorities + 0.1 * bins_remain_cap

    target_occupancy = 0.75
    current_occupancy = (bins_remain_cap - item) / np.max(bins_remain_cap)
    occupancy_diff = np.abs(current_occupancy - target_occupancy)
    occupancy_priority = -occupancy_diff
    sufficient_space = bins_remain_cap >= item

    priorities[sufficient_space] += 0.05 * occupancy_priority[sufficient_space]

    random_noise = np.random.rand(len(bins_remain_cap)) * 0.01
    priorities = priorities + random_noise
    return priorities
```
