```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a combination of wasted space and fragmentation avoidance."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if remaining_capacity >= item:
            wasted_space = remaining_capacity - item
            # Prioritize bins with minimal wasted space.
            space_priority = 1.0 / (wasted_space + 0.0001)

            # Penalize bins that result in small remaining capacity (fragmentation).
            potential_remain_cap = remaining_capacity - item
            fragmentation_penalty = np.exp(-10 * potential_remain_cap)

            # Combine the priorities.  Adjust weights as needed.
            priorities[i] = space_priority - 0.5 * fragmentation_penalty # Weighted combination
        else:
            priorities[i] = -1000

    return priorities
```
