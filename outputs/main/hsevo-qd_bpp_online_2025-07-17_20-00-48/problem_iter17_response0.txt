```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, best fit, and empty bin preferences.
    Adaptive penalties and bonuses are used for better packing.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # 0. Hard constraint: Item must fit.
    priorities[bins_remain_cap < item] = -np.inf

    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities

    # 1. Utilization Term: Favor better utilization.
    utilization = item / max_cap
    remaining_capacity_after_fit = bins_remain_cap - item
    utilization_score = (1 - remaining_capacity_after_fit / max_cap) * utilization
    priorities[fit_mask] += utilization_score[fit_mask]

    # 2. Fragmentation Avoidance: Penalize tiny fragments, adaptive penalty.
    tiny_fragment_threshold = 0.05 * max_cap
    tiny_fragment_penalty = -5.0 - 7.0 * utilization
    tiny_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit <= tiny_fragment_threshold)
    priorities[tiny_fragment_mask] += tiny_fragment_penalty

    # 3. Best Fit Bonus: Reward best fit, adaptive bonus.
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, (1.0 + 0.5 * (1 - utilization)) * (bins_remain_cap / max_cap), 0)
    priorities += best_fit_bonus

    # 4. Empty Bin Preference: If item is large, prefer empty bin.
    empty_bin_mask = bins_remain_cap == max_cap
    empty_bin_threshold = 0.75 * max_cap # Reduced threshold
    if item > empty_bin_threshold and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += 2.5 + 1.5 * utilization

    return priorities
```
