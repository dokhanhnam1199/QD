```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item snugly (minimize wasted space),
    but also includes a component to encourage filling bins rather than leaving them mostly empty.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Fit Score: Higher if item fits well (little wasted space)
    fit_scores = bins_remain_cap - item
    fit_scores[fit_scores < 0] = -np.inf  # Cannot fit, very low priority
    fit_scores = -np.abs(fit_scores) #Smaller difference gets a higher score

    # Capacity Utilization Score: Higher if the bin is already somewhat full
    utilization_scores = (1 - bins_remain_cap) #Originally was just "- bins_remain_cap", but this is less effective. We want the reciprocal so higher the utilization the higher the score.

    # Combine the scores, weighing fit slightly higher.
    priorities = fit_scores + 0.5*utilization_scores  # Weighted sum.
    return priorities
```
