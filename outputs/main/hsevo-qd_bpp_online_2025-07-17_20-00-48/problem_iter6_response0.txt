```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins based on a combination of factors, inspired by
    physical analogies like potential energy and packing density, along with
    fragmentation reduction and adaptive parameter adjustments. It also incorporates
    a stochastic element for exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # 0. Infeasibility Mask: Very high penalty for bins that cannot fit the item.
    priorities[bins_remain_cap < item] = -np.inf

    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities # No possible bins, all have -inf priority

    # 1. Potential Energy Term: Mimic potential energy, lower is better, favouring bins with capacity close to item size.
    #    This encourages filling bins more completely.
    potential_energy = np.abs(bins_remain_cap - item) / (max_cap + 1e-9) # Normalized difference
    priorities[fit_mask] -= 0.5 * potential_energy[fit_mask]  # Negative since lower potential is better. Adjust weight.

    # 2. Packing Density Term: Analogous to packing density, favour bins where adding the item leads to higher fill rate.
    packing_density = item / bins_remain_cap # Item size divided by remaining capacity. Closer to 1 is good.
    priorities[fit_mask] += 0.7 * packing_density[fit_mask] # Encourage higher density. Adjust weight.

    # 3. Fragmentation Penalty: Discourage creating small remaining spaces.  Adaptive threshold.
    frag_threshold = min(item / 3.0, 0.15 * max_cap)  #Dynamically adjust threshold
    frag_penalty = np.exp(-np.abs(bins_remain_cap - item - frag_threshold) / (frag_threshold + 1e-9))
    priorities[fit_mask] -= 0.3 * frag_penalty[fit_mask]

    # 4. Best Fit Bonus: Reward the bin that results in the smallest remaining space, with tie breaking.
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0])
    best_fit_mask = diffs == min_diff
    priorities[best_fit_mask] += 0.2 # Added bonus

    # 5. Empty Bin Preference (Adaptive): If item is large *relative* to the largest bin, use an empty one.
    empty_bin_mask = bins_remain_cap == max_cap
    large_item_threshold = 0.6 * max_cap
    if item > large_item_threshold and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += 0.4 # Encouraging empties

    # 6. Stochastic Perturbation: Add small random noise to encourage exploration and break ties.
    priorities[fit_mask] += 0.01 * np.random.randn(np.sum(fit_mask))

    # 7. Remaining Capacity Normalization Bonus: Bins with lower relative remaining capacity get a slight boost
    remaining_capacity_ratio = bins_remain_cap / max_cap
    priorities[fit_mask] += 0.1 * (1 - remaining_capacity_ratio[fit_mask])

    return priorities
```
