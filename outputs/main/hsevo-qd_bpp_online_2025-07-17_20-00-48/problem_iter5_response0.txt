```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic: Combines capacity, inverse waste, and fragmentation."""

    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        # Capacity-aware utilization with waste reduction
        priorities[valid_bins] = bins_remain_cap[valid_bins] / (1 + waste)

        # Fragmentation penalty.  Scale penalty by item size
        frag_threshold = item / 3.0 #Adaptive fragmentation. Adjust as needed
        frag_penalty = np.exp(-np.abs(waste - frag_threshold) / (frag_threshold + 1e-9))
        priorities[valid_bins] -= 0.1 * item * frag_penalty  #Scaled penalty

    else:
        priorities = np.full_like(bins_remain_cap, -np.inf)

    #Empty bin bonus for large items
    empty_bin_mask = bins_remain_cap == np.max(bins_remain_cap)
    if item > 0.7 * np.max(bins_remain_cap) and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += 0.5
    return priorities
```
