{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function prioritizes bins based on a combination of factors, including utilization,\n    fragmentation avoidance, pressure, best fit, and empty bin preference, with adaptive adjustments\n    based on item size and bin characteristics. It aims to improve upon priority_v1 by dynamically\n    adjusting penalties and bonuses to better handle diverse item sizes and bin configurations,\n    and adding a bin diversity term.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n    num_bins = len(bins_remain_cap)\n\n    # 0. Hard constraint: Item must fit. Bins that can't fit get -inf priority.\n    priorities[bins_remain_cap < item] = -np.inf\n\n    fit_mask = bins_remain_cap >= item\n\n    if not np.any(fit_mask):\n        return priorities  # No bin can fit the item\n\n    # 1. Utilization Term: Favor better utilization, but scale based on item size.\n    utilization = item / max_cap\n    remaining_capacity_after_fit = bins_remain_cap - item\n    utilization_score = (1 - remaining_capacity_after_fit / max_cap) * utilization\n    priorities[fit_mask] += utilization_score[fit_mask]\n\n    # 2. Fragmentation Avoidance: Penalize bins that will result in tiny fragments.\n    tiny_fragment_threshold = 0.05 * max_cap\n    small_fragment_threshold = 0.2 * max_cap\n\n    # Adaptive penalty based on item size: Larger items impose a heavier penalty for tiny fragments\n    tiny_fragment_penalty = -5.0 - 5.0 * utilization  # Higher penalty for larger items\n    small_fragment_penalty = -1.0 - 1.0 * utilization\n    \n    tiny_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit <= tiny_fragment_threshold)\n    small_fragment_mask = (remaining_capacity_after_fit > tiny_fragment_threshold) & (remaining_capacity_after_fit <= small_fragment_threshold)\n\n    priorities[tiny_fragment_mask] += tiny_fragment_penalty\n    priorities[small_fragment_mask] += small_fragment_penalty\n\n    # 3. \"Pressure\" Term: Bins with higher remaining capacity exert more \"pressure\".  Adjust scaling dynamically.\n    pressure = bins_remain_cap / max_cap * (1 - utilization)\n    priorities[fit_mask] += 0.5 * pressure[fit_mask]\n\n    # 4. Best Fit Bonus: Reward the bin that provides the absolute best fit (smallest waste).\n    diffs = bins_remain_cap - item\n    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf\n    best_fit_bonus = np.where(diffs == min_diff, 1.0 + 0.5 * (1 - utilization), 0)  # Adaptive bonus\n    priorities += best_fit_bonus\n\n    # 5. Empty Bin Preference (Adaptive): If the item is a significant fraction of bin size, strongly prefer an empty bin.\n    empty_bin_mask = bins_remain_cap == max_cap\n    empty_bin_threshold = 0.6 * max_cap\n    if item >= empty_bin_threshold and np.any(empty_bin_mask):\n        priorities[empty_bin_mask] += 2.0 + 1.0 * utilization  # Stronger adaptive preference\n    \n    # 6. Bin Diversity Bonus: Encourage spreading items across different bins.\n    # This penalizes using bins with similar remaining capacities if there are other options.\n    if num_bins > 1:\n        std_dev = np.std(bins_remain_cap[fit_mask])  # Standard deviation of remaining capacities\n        diversity_bonus = std_dev / max_cap # Normalize\n        priorities[fit_mask] += 0.25 * diversity_bonus # Moderate diversity bonus\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines utilization, fragmentation, best fit, and empty bin.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    small_number = 1e-9\n    frag_threshold_ratio = 4.0\n    frag_penalty_weight = 0.2\n    best_fit_bonus_value = 0.1\n    large_item_threshold_ratio = 0.75\n    empty_bin_bonus = 0.3\n\n    # 1. Bin Utilization\n    utilization = (item / (np.max(bins_remain_cap) + small_number))\n    remaining_percentage = (bins_remain_cap - item) / (np.max(bins_remain_cap) + small_number)\n\n    priorities[bins_remain_cap < item] = -np.inf\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        priorities[fit_mask] += (1 - remaining_percentage[fit_mask]) * utilization\n\n    # 2. Fragmentation\n    frag_threshold = item / frag_threshold_ratio\n    frag_penalty = np.exp(-np.abs(bins_remain_cap - item - frag_threshold) / (frag_threshold + small_number))\n    if np.any(fit_mask):\n        priorities[fit_mask] -= frag_penalty_weight * frag_penalty[fit_mask]\n\n    # 3. Best Fit\n    diffs = bins_remain_cap - item\n    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf\n    best_fit_bonus = np.where(diffs == min_diff, best_fit_bonus_value, 0)\n    priorities += best_fit_bonus\n\n    # 4. Empty Bin\n    empty_bin_mask = bins_remain_cap == np.max(bins_remain_cap)\n    large_item_threshold = large_item_threshold_ratio * np.max(bins_remain_cap)\n    if item > large_item_threshold and np.any(empty_bin_mask):\n        priorities[empty_bin_mask] += empty_bin_bonus\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the 1st heuristic uses a multi-faceted approach, considering utilization, fragmentation, pressure, best fit, empty bin preference and diversity, with adaptive adjustments based on item size and bin characteristics. The 20th heuristic solely relies on the ratio of item size to remaining bin capacity and its logarithm.\nComparing (2nd best) vs (second worst), the 2nd heuristic also employs multiple factors like utilization, fragmentation avoidance with penalties, pressure term, best fit bonus, and empty bin preference but lacks diversity term. The 19th heuristic, similar to the 20th, uses only the ratio of item and bin capacity, without considering other crucial factors.\nComparing (1st) vs (2nd), we see the 1st includes bin diversity and dynamically adjusts penalties/bonuses while 2nd uses fixed penalties and lacks the diversity element.\nComparing (3rd) vs (4th), there is no difference. They are the same.\nComparing (second worst) vs (worst), there is no difference. They are the same.\nComparing (15th) vs (16th), there is no difference. They are the same.\n\nOverall: The better heuristics incorporate a wider range of factors, adapt parameters based on item size and bin characteristics, and dynamically adjust penalties and bonuses. The worse heuristics are simplistic, focusing on a single factor and lacking adaptability. Including too many parameters, as in the 3rd, 15th and 16th, can be detrimental without proper tuning. The physics-inspired heuristics perform poorly, suggesting that simply applying a different analogy may not lead to superior packing strategies.\n- \nOkay, here's a refined definition of \"Current Self-Reflection\" aimed at designing better heuristics, incorporating your feedback:\n\n*   **Keywords:** Multi-factor, adaptive, validation, balance, edge cases, physics-inspired, interactions.\n\n*   **Advice:** Focus on combining relevant factors and dynamically adjusting parameters. Prioritize rigorous testing and validation of any added complexity.\n\n*   **Avoid:** Overly simplistic approaches, \"black box\" or aggressive strategies, and neglecting edge cases.\n\n*   **Explanation:** Heuristics benefit from considering multiple factors and their relationships, adaptivity, and a balanced approach to complexity/stochasticity. Rigorous validation is key.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}