```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate remaining capacity after adding the item
    remaining_cap_after_add = bins_remain_cap - item
    
    # Give a very low priority to bins that can't fit the item
    priorities[remaining_cap_after_add < 0] = -np.inf
    
    # Calculate waste if the item is placed in the bin
    waste = bins_remain_cap - item

    # Prioritize bins with less waste but not completely full
    priorities[remaining_cap_after_add >= 0] = 1 / (waste[remaining_cap_after_add >= 0] + 1e-6)  # Avoid division by zero

    #Heuristic to use the bin with space nearest to the item.
    #priorities = bins_remain_cap - item
    #priorities[priorities < 0] = -np.inf #If it does not fit, put negative infinity

    return priorities
```
