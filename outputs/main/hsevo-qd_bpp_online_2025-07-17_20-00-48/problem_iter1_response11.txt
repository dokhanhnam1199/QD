```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priorities with a base value (e.g., all bins are equally likely at first)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1.  Encourage filling bins that have sufficient space.
    #     A bin with ample space for the item should get a higher initial boost.
    sufficient_space = bins_remain_cap >= item
    priorities[sufficient_space] += 1.0  # Simple boost for now.  May adjust weight later

    # 2. Penalize bins with very little space left after placing the item, or not enough to fit the item
    near_full = (bins_remain_cap - item) < 0.1  # Check within 10% near fullness (example)

    insufficient_space = bins_remain_cap < item
    priorities[insufficient_space] = -np.inf #Never pick these ones.
    
    priorities[near_full & sufficient_space] -= 0.5 # Discourage from picking nearly full sufficient bins


    #3. Add incentive for bins that after filling the item will have an occupancy closest to a target percentage.
    #   Example: Ideally fill the bin up to 75%.
    target_occupancy = 0.75
    current_occupancy = (bins_remain_cap - item) / np.max(bins_remain_cap)
    occupancy_diff = np.abs(current_occupancy - target_occupancy)
    occupancy_priority = -occupancy_diff # Smaller difference to target gives higher priority

    priorities[sufficient_space] += occupancy_priority[sufficient_space]
   
    # Add some randomness to avoid getting stuck
    randomness = np.random.rand(len(bins_remain_cap)) * 0.01  # small amount of noise
    priorities += randomness

    return priorities
```
