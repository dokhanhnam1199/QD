```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines energy, potential well, and bin utilization for priority."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Bin utilization: Favor bins with smaller remaining capacity.
    utilization = item / bins_remain_cap
    priorities += utilization

    # Potential well: Gaussian centered around item size.
    diff = bins_remain_cap - item
    potential_well = np.exp(-(diff**2) / (2 * (item)**2))
    priorities += potential_well

    # Energy term, inverse of remaining capacity
    energy = 1.0 / (bins_remain_cap + 1e-9)
    priorities += 0.5*energy


    # Infeasible bins
    priorities[bins_remain_cap < item] = -np.inf
    return priorities
```
