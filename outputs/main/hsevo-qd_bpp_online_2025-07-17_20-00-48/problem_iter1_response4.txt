```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # 1. Fill the almost full bins first. High reward for bins that fit the item tightly.
        # 2. Avoid fragmentation by prioritizing bins that use space most efficiently.

        remaining_after_fit = bins_remain_cap[valid_bins] - item
        space_utilization = item / bins_remain_cap[valid_bins]  # item size / bin size
        # prioritize bins which space utilization is close to 1.
        priorities[valid_bins] = space_utilization # * (1+np.exp(-remaining_after_fit*10)) # amplify reward when almost perfectly packed

        # Avoid creating very small gaps by penalizing creating very small gaps
        very_small_gap = remaining_after_fit < 0.1
        priorities[valid_bins][very_small_gap] = -1

    else:
        # No bin can accommodate the item, assign very low priority
        priorities[:] = -np.inf

    return priorities
```
