```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Filter out bins that cannot fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bin can fit the item, prioritize the fullest bin (least remaining capacity)
        # This might open up space for future items
        priorities = -bins_remain_cap
        return priorities
    
    
    # Calculate remaining capacity after placing the item
    remaining_after_placement = bins_remain_cap[valid_bins] - item

    # Prioritize bins that would have a high fill rate after item placement
    fill_rate = (bins_remain_cap[valid_bins] - remaining_after_placement) / bins_remain_cap[valid_bins]
    priorities[valid_bins] = fill_rate

    # Smallest Waste Heuristic :
    # Adjust priorities by penalizing bins with small remaining space after placement. This favors more complete fills
    # and tries to avoid very fragmented bins.
    
    waste_penalty = np.exp(-remaining_after_placement) # Exponential decay based on wasted space
    priorities[valid_bins] *= waste_penalty

    # Adjust the scaling so that the priorities of bins which *cannot* take the item are at the far negative end
    priorities[~valid_bins] = -np.inf

    return priorities
```
