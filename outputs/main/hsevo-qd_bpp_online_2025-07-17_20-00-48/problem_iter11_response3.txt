```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, and best-fit to prioritize bins."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Invalidate bins where item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        # Utilization
        utilization = item / (np.max(bins_remain_cap) + 1e-9)
        remaining_percentage = (bins_remain_cap[fit_mask] - item) / (np.max(bins_remain_cap) + 1e-9)
        priorities[fit_mask] += (1 - remaining_percentage) * utilization

        # Fragmentation
        frag_threshold = item / 4.0
        frag_penalty = np.exp(-np.abs(bins_remain_cap[fit_mask] - item - frag_threshold) / (frag_threshold + 1e-9))
        priorities[fit_mask] -= 0.2 * frag_penalty

        # Best Fit
        diffs = bins_remain_cap - item
        min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
        best_fit_bonus = np.where(diffs == min_diff, 0.1, 0)
        priorities += best_fit_bonus

    return priorities
```
