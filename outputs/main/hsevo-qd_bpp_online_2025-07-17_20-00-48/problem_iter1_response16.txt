```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value. Add a small amount to avoid zero division.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate the waste if the item were placed in each bin.
    waste = bins_remain_cap - item
    
    # Give high priority to bins where the item fits (positive waste).
    # Prioritize bins with smallest waste after placing the item. A smaller
    # waste means a fuller bin, which we want. Avoid putting a small item
    # into an empty bin.

    fit_mask = waste >= 0

    if np.any(fit_mask):
        priorities[fit_mask] = 1 / (waste[fit_mask] + 1e-6) # Adding a small value for stability
    else:
        # If item does not fit in any bin, assign a low priority to bins. The idea here
        # is to discourage creating new bins unless really needed. In such case,
        # negative waste represents the overflow - minimize the absolute overflow is the
        # next goal.
        priorities = 1 / (np.abs(waste) + 1e-6)
        
    return priorities
```
