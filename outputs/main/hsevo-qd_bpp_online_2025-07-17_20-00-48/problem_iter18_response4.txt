```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin, using a refined heuristic.

    This function builds upon priority_v1 by introducing more nuanced adaptive adjustments
    and interaction terms to further improve bin packing efficiency. It includes refined
    fragmentation handling, capacity-aware pressure, adaptive best-fit, and bin diversity
    with considerations for extreme cases.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    num_bins = len(bins_remain_cap)

    # 0. Hard constraint: Item must fit.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        return priorities

    # 1. Utilization Term:  Favor better utilization, scaling based on item size AND bin capacity.
    remaining_capacity_after_fit = bins_remain_cap - item
    utilization_score = (item / max_cap) * (1 - remaining_capacity_after_fit / max_cap) # Item size * bin utilization
    priorities[fit_mask] += utilization_score[fit_mask]

    # 2. Fragmentation Avoidance: Penalize bins that will result in tiny fragments, adaptive penalty.
    tiny_fragment_threshold = 0.05 * max_cap
    small_fragment_threshold = 0.2 * max_cap

    # Penalties scale dynamically based on item size *and* remaining bin capacity.
    # Larger items filling bins to near tiny fragment levels get HIGHER penalties.

    tiny_fragment_penalty = -8.0 * (item / max_cap) * (1 / (bins_remain_cap / max_cap + 0.001)) # +0.001 to avoid division by zero
    small_fragment_penalty = -2.0 * (item / max_cap) * (1 / (bins_remain_cap / max_cap + 0.001))

    tiny_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit <= tiny_fragment_threshold)
    small_fragment_mask = (remaining_capacity_after_fit > tiny_fragment_threshold) & (remaining_capacity_after_fit <= small_fragment_threshold)

    priorities[tiny_fragment_mask] += tiny_fragment_penalty[tiny_fragment_mask]
    priorities[small_fragment_mask] += small_fragment_penalty[small_fragment_mask]

    # 3. "Pressure" Term: Bins with higher remaining capacity exert more "pressure". Adjust scaling dynamically AND consider item size.
    pressure = (bins_remain_cap / max_cap) * (1 - item / max_cap) # Reduce pressure for large items
    priorities[fit_mask] += 0.5 * pressure[fit_mask]

    # 4. Best Fit Bonus: Reward the bin that provides the absolute best fit (smallest waste).  Adaptive, stronger bonus.
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_mask = diffs == min_diff
    best_fit_bonus = np.where(best_fit_mask, 2.0 * (1 - (item / max_cap)) * (1 + bins_remain_cap[best_fit_mask] / max_cap), 0)  # Stronger, adaptive
    priorities += best_fit_bonus

    # 5. Empty Bin Preference (Adaptive): If the item is a significant fraction of bin size, strongly prefer an empty bin.
    empty_bin_mask = bins_remain_cap == max_cap
    empty_bin_threshold = 0.6 * max_cap
    if item >= empty_bin_threshold and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += 3.0 * (item / max_cap)  # Even stronger preference for empty bins when item is large

    # 6. Bin Diversity Bonus: Encourage spreading items across different bins. Weigh by item size.
    if num_bins > 1:
        std_dev = np.std(bins_remain_cap[fit_mask])
        diversity_bonus = (std_dev / max_cap) * (item / max_cap) # Scale by item size
        priorities[fit_mask] += 0.5 * diversity_bonus # More significant bonus.

    # 7.  Extreme Case Handling: If all bins are nearly full, slightly prefer the fullest.
    nearly_full_threshold = 0.95 * max_cap
    nearly_full_bins = bins_remain_cap > nearly_full_threshold
    if np.all(nearly_full_bins[fit_mask]):  # Check *only* bins where the item fits
        priorities[fit_mask] -= (bins_remain_cap[fit_mask] / max_cap) * 0.1 # Give a *slight* preference to fullest bin

    return priorities
```
