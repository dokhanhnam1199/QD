```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins based on a combination of factors inspired by physics.
    It considers the 'energy' required to place the item (smaller remaining capacity = higher energy),
    a 'potential well' effect (bins with capacities slightly larger than the item are favored),
    and a 'repulsion' effect (bins with capacities much larger than the item are discouraged).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 'Energy' term: Higher priority for bins that are almost full
    energy = 1.0 / (bins_remain_cap + 1e-9)  # Avoid division by zero
    priorities += energy

    # 'Potential well' term: Favor bins with capacities slightly larger than the item
    diff = bins_remain_cap - item
    potential_well = np.exp(-(diff**2) / (2 * (item/3)**2)) #Gaussian centered at item. Larger variance when item size is bigger
    priorities += potential_well

    # 'Repulsion' term: Discourage bins with capacities much larger than the item
    repulsion = np.exp(-bins_remain_cap / (item*5))  # Exponential decay with bin capacity. Higher decay if item is small
    priorities -= 0.5 * repulsion # We don't want it to be the dominating factor

    # Consider bins where item doesn't fit as non viable
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
