```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, best-fit, and bin diversity, adaptively."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    num_bins = len(bins_remain_cap)

    # Hard constraint: Item must fit.
    priorities[bins_remain_cap < item] = -np.inf
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities

    # 1. Utilization term (similar to v0, but simplified)
    utilization = item / max_cap
    remaining_capacity_after_fit = bins_remain_cap - item
    utilization_score = (1 - remaining_capacity_after_fit / max_cap) * utilization
    priorities[fit_mask] += utilization_score[fit_mask]

    # 2. Fragmentation penalty (adaptive penalty as in v0, but simplified thresholds)
    tiny_fragment_threshold = 0.1 * max_cap
    small_fragment_threshold = 0.3 * max_cap
    item_size_ratio = item / max_cap
    tiny_fragment_penalty = -3.0 * (1 + item_size_ratio)
    small_fragment_penalty = -0.5 * (1 + item_size_ratio)

    tiny_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit <= tiny_fragment_threshold)
    small_fragment_mask = (remaining_capacity_after_fit > tiny_fragment_threshold) & (remaining_capacity_after_fit <= small_fragment_threshold)

    priorities[tiny_fragment_mask] += tiny_fragment_penalty
    priorities[small_fragment_mask] += small_fragment_penalty

    # 3. Best Fit Bonus (from v1, but adjust weight)
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, 0.5, 0)
    priorities += best_fit_bonus

    # 4. Bin Diversity Bonus (from v0, simplified)
    if num_bins > 1:
        std_dev = np.std(bins_remain_cap[fit_mask])
        diversity_bonus = std_dev / max_cap
        diversity_weight = min(0.2, 0.05 * num_bins)
        priorities[fit_mask] += diversity_weight * diversity_bonus

    return priorities
```
