```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines bin utilization, fragmentation, & a capacity term."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Bin utilization term (similar to priority_v0)
        utilization = item / (np.max(bins_remain_cap) + 1e-9)
        remaining_percentage = (bins_remain_cap[valid_bins] - item) / (np.max(bins_remain_cap) + 1e-9)
        priorities[valid_bins] += (1 - remaining_percentage) * utilization

        # Fragmentation term (similar to priority_v0)
        frag_threshold = item / 4.0
        frag_penalty = np.exp(-np.abs(bins_remain_cap[valid_bins] - item - frag_threshold) / (frag_threshold + 1e-9))
        priorities[valid_bins] -= 0.2 * frag_penalty

        # Capacity term (similar to priority_v1, but scaled)
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += 0.1 * (bins_remain_cap[valid_bins] / (1 + waste)) # Scale this term

    else:
        priorities = np.full_like(bins_remain_cap, -np.inf)
    return priorities
```
