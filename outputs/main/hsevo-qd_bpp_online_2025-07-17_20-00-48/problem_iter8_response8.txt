```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, best fit, and energy terms."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Bin Utilization and Fragmentation (Adaptive)
    utilization = item / (np.max(bins_remain_cap) + 1e-9)
    remaining_percentage = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-9)

    priorities[bins_remain_cap < item] = -np.inf
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        priorities[fit_mask] += (1 - remaining_percentage[fit_mask]) * utilization

    frag_threshold = item / 4.0
    frag_penalty = np.exp(-np.abs(bins_remain_cap - item - frag_threshold) / (frag_threshold + 1e-9))
    if np.any(fit_mask):
        priorities[fit_mask] -= 0.2 * frag_penalty[fit_mask]

    # 2. Best Fit Bonus
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, 0.1, 0)
    priorities += best_fit_bonus

    # 3. Energy Term (inverse remaining capacity)
    energy = 0.1 / (bins_remain_cap + 1e-9) # Lower weight
    priorities += energy
    return priorities
```
