```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, and a potential well."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    small_number = 1e-9

    # Utilization: Higher priority for fuller bins after placement
    utilization = item / (bins_remain_cap + small_number)
    priorities += utilization

    # Fragmentation: Penalize small remaining space
    frag_threshold = item / 3.0
    frag_penalty = np.exp(-np.abs(bins_remain_cap - item) / (frag_threshold + small_number))
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] -= 0.3 * frag_penalty[fit_mask]

    # Potential Well: Favor bins slightly larger than item
    diff = bins_remain_cap - item
    potential_well = np.exp(-(diff**2) / (2 * (item/3)**2))
    priorities += potential_well

    # Infeasible bins get -inf priority
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
