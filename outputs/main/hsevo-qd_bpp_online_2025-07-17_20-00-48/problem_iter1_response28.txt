```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., 0).
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign a high priority to bins that can fit the item.  Prioritize bins where item is close to filling bin
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]

    priorities[fit_mask] = 1 - priorities[fit_mask] # Make small waste have high priority

    # Very bad to exceed capacity
    overflow_mask = bins_remain_cap < item
    priorities[overflow_mask] = -np.inf

    return priorities
```
