```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    A higher priority indicates the bin is a better fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Heuristic 1: Reward bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1

    # Heuristic 2: Prioritize bins with smallest remaining capacity after adding the item,
    # but only consider bins that fit. Minimizes wasted space.
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    if remaining_after_fit.size > 0:  # Check if there are bins to consider
        min_remaining = np.min(remaining_after_fit)
        close_to_min_mask = np.isclose(remaining_after_fit, min_remaining) #handle multiple min_remaining
        indices = np.where(fit_mask)[0][close_to_min_mask] #get correct bin indices for final priority
        priorities[indices] += 2

    # Heuristic 3: Penalize bins where adding the item leaves very little space left (<= 10% of bin size)
    small_space_mask = (bins_remain_cap > item) & ((bins_remain_cap - item) / bins_remain_cap <= 0.1)
    priorities[small_space_mask] += 0.5 #slightly less than finding a minimum but better than nothing.

    # Heuristic 4: if all bins are over capacity for the item, choose the one with the LEAST OVERFLOW.
    if not np.any(fit_mask): #if no bin can fit the item
        overflow = item - bins_remain_cap
        min_overflow = np.min(overflow) #smallest possible overflow
        indices = np.where(np.isclose(overflow,min_overflow))[0] #handles multiple occurrances
        priorities[indices] += 0.1 #very low score

    return priorities
```
