```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, and best-fit considerations."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Utilization: reward higher utilization
    utilization = item / (bins_remain_cap + 1e-9)  # Avoid division by zero
    priorities += utilization

    # 2. Fragmentation: penalize bins that leave small fragments
    frag_threshold = item / 4.0
    fragment_penalty = np.exp(-np.abs(bins_remain_cap - item - frag_threshold) / (frag_threshold + 1e-9))
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] -= 0.2 * fragment_penalty[fit_mask]

    # 3. Best Fit: reward bins that fit best
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, 0.1, 0)
    priorities += best_fit_bonus

    # Ensure item fits
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
