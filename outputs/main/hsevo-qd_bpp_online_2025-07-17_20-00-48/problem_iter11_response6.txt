```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering space utilization, fragmentation, and best-fit."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Utilization: Fill bins that are already somewhat full
    priorities += 1.0 / (bins_remain_cap + 1e-9)

    # Best Fit: Gaussian centered around remaining capacity = item size
    diff = bins_remain_cap - item
    priorities += np.exp(-(diff**2) / (2 * (item/3)**2))

    # Fragmentation avoidance: Penalize bins that leave tiny fragments
    tiny_fragment_threshold = 0.1
    fragment_size = bins_remain_cap - item
    tiny_fragment_penalty = -10
    priorities[fragment_size <= tiny_fragment_threshold] += tiny_fragment_penalty
    
    # Hard constraint: Item must fit
    priorities[bins_remain_cap < item] = -np.inf
    
    return priorities
```
