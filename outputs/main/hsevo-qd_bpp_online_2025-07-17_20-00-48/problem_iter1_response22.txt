```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employing a combination of heuristics, considering both space utilization
    and a probabilistic element to explore different bin assignments.  This is
    inspired by the balance between gravity (deterministic) and random molecular motion
    (stochastic) in the physical world. We favour bins where the item fits relatively
    well (higher utilization) and introduce a small chance of using a less-optimal
    bin to explore the solution space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    # First, give a very low priority to bins that cannot contain the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Ensure these bins are never chosen if possible

    # For feasible bins, calculate a "gravity" score based on space utilization.
    # Higher utilization (smaller remaining capacity after packing) is preferred.
    feasible_mask = ~infeasible_mask
    if np.any(feasible_mask):
        utilization = item / bins_remain_cap[feasible_mask]
        priorities[feasible_mask] = utilization

        # Introduce a probabilistic element ("Brownian motion") to encourage exploration.
        # This helps escape local optima. The 'temperature' parameter controls the
        # magnitude of the random perturbation.

        temperature = 0.1  # Adjust this parameter as needed
        random_noise = np.random.normal(0, temperature, size=np.sum(feasible_mask))
        priorities[feasible_mask] += random_noise


        # A small bonus to using bins already somewhat full to reduce fragmentation.
        fullness_bonus = bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)
        priorities[feasible_mask] += 0.1* (1-fullness_bonus)


    return priorities
```
