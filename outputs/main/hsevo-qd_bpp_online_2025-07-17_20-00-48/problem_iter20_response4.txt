```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, best fit with capacity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    small_number = 1e-9

    # 1. Capacity-aware utilization
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        priorities[valid_bins] = bins_remain_cap[valid_bins] / (item + small_number)

    # 2. Best Fit - scaled by remaining capacity.
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, (bins_remain_cap / (np.max(bins_remain_cap)+small_number)), 0)
    priorities += best_fit_bonus

    priorities[bins_remain_cap < item] = -np.inf
    return priorities
```
