{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines utilization, fragmentation, best fit, and empty bin.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    small_number = 1e-9\n    frag_threshold_ratio = 4.0\n    frag_penalty_weight = 0.2\n    best_fit_bonus_value = 0.1\n    large_item_threshold_ratio = 0.75\n    empty_bin_bonus = 0.3\n\n    # 1. Bin Utilization\n    utilization = (item / (np.max(bins_remain_cap) + small_number))\n    remaining_percentage = (bins_remain_cap - item) / (np.max(bins_remain_cap) + small_number)\n\n    priorities[bins_remain_cap < item] = -np.inf\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        priorities[fit_mask] += (1 - remaining_percentage[fit_mask]) * utilization\n\n    # 2. Fragmentation\n    frag_threshold = item / frag_threshold_ratio\n    frag_penalty = np.exp(-np.abs(bins_remain_cap - item - frag_threshold) / (frag_threshold + small_number))\n    if np.any(fit_mask):\n        priorities[fit_mask] -= frag_penalty_weight * frag_penalty[fit_mask]\n\n    # 3. Best Fit\n    diffs = bins_remain_cap - item\n    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf\n    best_fit_bonus = np.where(diffs == min_diff, best_fit_bonus_value, 0)\n    priorities += best_fit_bonus\n\n    # 4. Empty Bin\n    empty_bin_mask = bins_remain_cap == np.max(bins_remain_cap)\n    large_item_threshold = large_item_threshold_ratio * np.max(bins_remain_cap)\n    if item > large_item_threshold and np.any(empty_bin_mask):\n        priorities[empty_bin_mask] += empty_bin_bonus\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines capacity & wasted space with physics-inspired scaling.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        # Hybrid approach: capacity + inverse waste\n        priorities[valid_bins] = bins_remain_cap[valid_bins] / (1 + waste)\n    else:\n        priorities = np.full_like(bins_remain_cap, -np.inf)\n    return priorities\n\n### Analyze & experience\n- *   Comparing (1st) vs (20th), we see a significant difference in complexity and the number of factors considered. The 1st heuristic combines utilization, fragmentation, pressure, best fit, and diversity, while the 20th uses a simple logarithmic ratio.\n*   Comparing (2nd best) vs (second worst), we observe that heuristic 2 focuses on utilization, fragmentation, pressure, best fit and diversity. Heuristic 19 only checks item fit, then returns.\n*   Comparing (1st) vs (2nd), we see no difference, which means they are the same.\n*   Comparing (3rd) vs (4th), we see no difference, which means they are the same.\n*   Comparing (second worst) vs (worst), we see that heuristic 19 only checks item fit, then returns. Heuristic 20 computes priorities based on the log of ratios, which at least considers relative sizes, even if simply.\n*   Comparing (8th) vs (9th), heuristic 8 considers bin diversity while heuristic 9 doesn't.\n*   Comparing (10th) vs (11th), we see no difference, which means they are the same.\n* Comparing (12th) vs (13th), we see no difference, which means they are the same.\n* Comparing (14th) vs (15th), we see no difference, which means they are the same.\n* Comparing (16th) vs (17th), (18th), (19th), we see they are nearly the same.\n*   Overall: The better heuristics incorporate more factors, including utilization, fragmentation avoidance, pressure, best fit, and diversity. They also use adaptive adjustments based on item size and bin characteristics. Simpler heuristics relying on basic ratios or single factors tend to perform worse. Adding more parameters without a clear strategy doesn't necessarily improve performance.\n- \nOkay, I'm ready to earn that tip! Let's redefine \"Current Self-Reflection\" for better heuristic design:\n\n*   **Keywords:** Multi-faceted, Adaptive, Validation, Balance, Context-aware.\n\n*   **Advice:** Focus on *interactions* between factors (utilization, fragmentation, item characteristics). Build heuristics that adapt to these interactions, not just individual factors. Design with testability and parameter tuning in mind *from the start*.\n\n*   **Avoid:** Adding complexity without demonstrable benefit. Rigid, pre-set weights. Over-reliance on any single strategy (best-fit only, for example). Premature optimization.\n\n*   **Explanation:** Effective heuristics consider the problem's *context* and adapt dynamically. Think about feedback loops: how does one factor affect others as the packing progresses? Rigorous testing and tuning are non-negotiable to prevent unintended consequences.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}