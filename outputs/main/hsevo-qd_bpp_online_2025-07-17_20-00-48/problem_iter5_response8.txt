```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, and best-fit for bin selection."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    small_number = 1e-9

    # 1. Utilization (Similar to v0)
    utilization = item / (np.max(bins_remain_cap) + small_number)
    remaining_percentage = (bins_remain_cap - item) / (np.max(bins_remain_cap) + small_number)

    # 2. Infeasibility Mask
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # 3. Add utilization if feasible
    feasible_mask = ~infeasible_mask
    priorities[feasible_mask] += (1 - remaining_percentage[feasible_mask]) * utilization

    # 4. Fragmentation (Similar to v0)
    frag_threshold_ratio = 5  # Adjusted
    frag_threshold = item / frag_threshold_ratio
    frag_penalty = np.exp(-np.abs(bins_remain_cap - item - frag_threshold) / (frag_threshold + small_number))
    frag_penalty_weight = 0.1 # Adjusted

    priorities[feasible_mask] -= frag_penalty_weight * frag_penalty[feasible_mask]

    # 5. Best Fit (Similar to v0)
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus_value = 0.2 #Adjusted
    best_fit_bonus = np.where(diffs == min_diff, best_fit_bonus_value, 0)
    priorities += best_fit_bonus

    return priorities
```
