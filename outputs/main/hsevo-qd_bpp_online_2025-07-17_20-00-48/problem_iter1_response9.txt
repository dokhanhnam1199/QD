```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins that can accommodate the item with minimal wasted space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Iterate through each bin's remaining capacity
    for i, remaining_capacity in enumerate(bins_remain_cap):
        # If the item fits in the bin
        if remaining_capacity >= item:
            # Calculate the wasted space
            wasted_space = remaining_capacity - item

            # A lower wasted space is more desirable, so we use its inverse
            # Plus a small amount to avoid the divide by zero problems.

            priorities[i] = 1.0 / (wasted_space + 0.0001)

        else:
            # Item does not fit, assign a very low priority.  Setting to a large negative number ensures that
            # only bins that fit the item will be considered.  Zero might allow bins to be chosen at random
            # when there is no good place for them

            priorities[i] = -1000  # or np.NINF

    return priorities
```
