```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, best fit, and potential well."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    small_number = 1e-9
    frag_threshold_ratio = 4.0
    frag_penalty_weight = 0.2
    best_fit_bonus_value = 0.1
    fit_mask = bins_remain_cap >= item
    # 1. Bin Utilization
    utilization = (item / (np.max(bins_remain_cap) + small_number))
    remaining_percentage = (bins_remain_cap - item) / (np.max(bins_remain_cap) + small_number)

    priorities[bins_remain_cap < item] = -np.inf

    if np.any(fit_mask):
        priorities[fit_mask] += (1 - remaining_percentage[fit_mask]) * utilization

    # 2. Fragmentation
    frag_threshold = item / frag_threshold_ratio
    frag_penalty = np.exp(-np.abs(bins_remain_cap - item - frag_threshold) / (frag_threshold + small_number))
    if np.any(fit_mask):
        priorities[fit_mask] -= frag_penalty_weight * frag_penalty[fit_mask]

    # 3. Best Fit
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, best_fit_bonus_value, 0)
    priorities += best_fit_bonus
   # 4. Potential well
    diff = bins_remain_cap - item
    potential_well = np.exp(-(diff**2) / (2 * (item/3)**2))
    priorities += potential_well

    return priorities
```
