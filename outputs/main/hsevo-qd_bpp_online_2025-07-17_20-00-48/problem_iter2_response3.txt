```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization-based priority with target occupancy and stochasticity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    if np.any(feasible_mask):
        # Utilization-based priority (like v0)
        utilization = item / bins_remain_cap[feasible_mask]
        priorities[feasible_mask] = utilization

        # Target occupancy (like v1), normalized
        target_occupancy = 0.75
        current_occupancy = (bins_remain_cap[feasible_mask] - item) / np.max(bins_remain_cap)
        occupancy_diff = np.abs(current_occupancy - target_occupancy)
        occupancy_priority = -occupancy_diff
        priorities[feasible_mask] += 0.5 * occupancy_priority  # Reduced weight

        # Stochasticity (like v0 & v1), but controlled
        temperature = 0.05
        random_noise = np.random.normal(0, temperature, size=np.sum(feasible_mask))
        priorities[feasible_mask] += random_noise

        #Fullness bonus
        fullness_bonus = bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)
        priorities[feasible_mask] += 0.1* (1-fullness_bonus)
    return priorities
```
