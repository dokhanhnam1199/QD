```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First priority: Bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Give these bins a baseline priority

    # Second priority: Fill rate (how much of the bin will be used) - maximize it within feasible bins
    fill_rate = item / bins_remain_cap
    fill_rate[~can_fit] = -1 # set fill_rate to -1 for bins that don't fit, so that they are ignored in next step.

    priorities += fill_rate

    # Third priority: Minimize wasted space. Add small bonus if item perfectly fits.
    perfect_fit = bins_remain_cap == item
    priorities[perfect_fit] += 2

    # Fourth priority: prefer partially filled bins (minimize number of bins used)
    partially_filled = (bins_remain_cap > 0) & (bins_remain_cap < 1) # assuming binsize of 1, could be generalized. But, let's not overcomplicate it.
    priorities[partially_filled] += 0.5

    return priorities
```
