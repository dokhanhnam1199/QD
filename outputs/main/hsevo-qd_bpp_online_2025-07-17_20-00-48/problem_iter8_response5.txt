```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, wasted space, and item size for bin priority."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        capacity_score = bins_remain_cap[valid_bins]  #Directly use the capacity
        inverse_waste = 1 / (1 + waste)
        
        # Combine capacity and inverse waste, favoring bins with small waste
        priorities[valid_bins] = capacity_score * inverse_waste

        # Add a "potential well" effect
        diff = bins_remain_cap[valid_bins] - item
        potential_well = np.exp(-(diff**2) / (2 * (item/3)**2))
        priorities[valid_bins] += 0.5 * potential_well

    else:
        priorities = np.full_like(bins_remain_cap, -np.inf)

    return priorities
```
