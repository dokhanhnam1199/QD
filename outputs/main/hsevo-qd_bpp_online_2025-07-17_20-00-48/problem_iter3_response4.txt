```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function combines several heuristics to prioritize bin selection.
    It considers remaining capacity, wasted space, a fragmentation score, and
    introduces a small degree of stochasticity for exploration. Adaptive weights
    are used to balance the different factors.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap + item  # Infer original bin capacity

    # 1. Remaining Capacity: Favor bins with sufficient space, but not excessive.
    capacity_score = (bins_remain_cap - item) / bin_capacity
    capacity_score = np.clip(capacity_score, 0, 1)  # Ensure values between 0 and 1
    capacity_score = 1 - np.abs(capacity_score - 0.5)*2 # Make values near 0.5 have highest priority

    # 2. Wasted Space: Penalize bins that would result in significant wasted space.
    wasted_space = bins_remain_cap - item
    wasted_space_penalty = np.exp(-wasted_space / (item + 1e-9))  # Penalize large wasted space
    wasted_space_penalty[wasted_space < 0] = 1 # No penalty if item doesn't fit

    # 3. Fragmentation Score: Encourage filling bins to reduce fragmentation.
    fragmentation_score = np.zeros_like(bins_remain_cap, dtype=float)
    fragmentation_score[bins_remain_cap >= item] = 1 - (wasted_space[bins_remain_cap >= item] / bin_capacity[bins_remain_cap >= item]) #higher value indicates that bin is more full

    # 4. Stochasticity: Introduce a small amount of randomness for exploration.
    stochasticity = np.random.rand(len(bins_remain_cap)) * 0.01

    # Adaptive Weights (adjust based on item size)
    capacity_weight = 0.4
    wasted_space_weight = 0.3
    fragmentation_weight = 0.3
    stochasticity_weight = 0.01
    # Apply weights to each component
    priorities = (
        capacity_weight * capacity_score
        - wasted_space_weight * wasted_space_penalty
        + fragmentation_weight * fragmentation_score
        + stochasticity_weight * stochasticity
    )
    priorities[bins_remain_cap < item] = -np.inf  # Exclude bins that can't fit the item

    return priorities
```
