```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using utilization, fragmentation, and best-fit."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Hard constraint: Item must fit
    priorities[bins_remain_cap < item] = -np.inf
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities

    # Utilization term
    utilization = item / max_cap
    priorities[fit_mask] += (1 - (bins_remain_cap[fit_mask] - item) / max_cap) * utilization

    # Fragmentation term
    frag_threshold = item / 4.0
    frag_penalty = np.exp(-np.abs(bins_remain_cap[fit_mask] - item - frag_threshold) / (frag_threshold + 1e-9))
    priorities[fit_mask] -= 0.2 * frag_penalty

    # Best fit term
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, 0.1, 0)
    priorities += best_fit_bonus
    
    # Empty Bin Consideration
    empty_bin_mask = bins_remain_cap == max_cap
    large_item_threshold = 0.75 * max_cap
    if item > large_item_threshold and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += 0.3
    return priorities
```
