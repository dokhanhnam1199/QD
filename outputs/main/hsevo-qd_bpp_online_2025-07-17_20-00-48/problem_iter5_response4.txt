```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, and a potential well."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Utilization
    utilization = item / (np.max(bins_remain_cap) + 1e-9)
    remaining_percentage = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-9)
    priorities[bins_remain_cap >= item] += (1 - remaining_percentage[bins_remain_cap >= item]) * utilization

    # 2. Fragmentation
    frag_threshold = item / 4.0
    frag_penalty = np.exp(-np.abs(bins_remain_cap - item - frag_threshold) / (frag_threshold + 1e-9))
    priorities[bins_remain_cap >= item] -= 0.2 * frag_penalty[bins_remain_cap >= item]

    # 3. Potential Well
    diff = bins_remain_cap - item
    potential_well = np.exp(-(diff**2) / (2 * (item/3)**2))
    priorities += potential_well

    # Infeasible bins
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
