```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very large penalty if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf
    
    # Give a bonus if the item fits perfectly. This reduces fragmentation.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = np.inf
    
    # Prioritize bins that can accommodate the item with minimal remaining space.
    # This encourages filling bins completely.  Avoids creating bins with tiny spaces
    # that will be hard to fill later. Use a capped inverse to limit extreme preference for tiny residual spaces.
    
    residual_space = bins_remain_cap - item
    valid_bins = bins_remain_cap >= item
    
    # Calculate priority only for bins where the item fits
    if np.any(valid_bins):
        # Cap residual_space to a max value to avoid overly prioritizing bins with extremely small remaining capacity.
        capped_residual_space = np.minimum(residual_space[valid_bins], 0.5)  # Example: cap at 0.5
        priorities[valid_bins] += 1.0 / (capped_residual_space + 0.0000001) # Adding small constant to avoid division by zero

    return priorities
```
