```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines energy, potential well, and capacity-waste ratio for priority."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        # capacity-waste ratio
        priorities[valid_bins] = bins_remain_cap[valid_bins] / (1 + waste)
    else:
        priorities = np.full_like(bins_remain_cap, -np.inf)
    # 'Energy' term: Higher priority for bins that are almost full
    energy = 1.0 / (bins_remain_cap + 1e-9)  # Avoid division by zero
    priorities += energy

    # 'Potential well' term: Favor bins with capacities slightly larger than the item
    diff = bins_remain_cap - item
    potential_well = np.exp(-(diff**2) / (2 * (item/3)**2)) #Gaussian centered at item. Larger variance when item size is bigger
    priorities += potential_well

    # Consider bins where item doesn't fit as non viable
    priorities[bins_remain_cap < item] = -np.inf
    return priorities
```
