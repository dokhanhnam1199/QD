```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # First, let's avoid overflowing bins completely
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    if not np.any(valid_bins):
        # No bin can fit. Put it in the fullest bin (least remaining cap), but penalize heavily.
        priorities = -np.abs(bins_remain_cap - item) # make it very negative
        return priorities

    # For valid bins, we want to prioritize bins which can almost completely fill up after putting the item
    fill_levels = (bins_remain_cap[valid_bins] - item)
    # Give higher priority if the bin can be filled up more after adding the item.

    #Calculate the 'wastage' after inserting the item:
    wastage = bins_remain_cap[valid_bins] - item

    # We prioritize the bins with smallest wastage.
    priorities[valid_bins] = -wastage # Use negative to turn "smallest" to "largest" priority

    # Additionally, if a bin can be filled perfectly, give it very high priority:
    perfect_fit = np.abs(bins_remain_cap[valid_bins] - item) < 1e-6  # Tolerance for floating-point errors
    priorities[valid_bins][perfect_fit] = 1e9  # A very large number

    return priorities
```
