```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, best fit, and empty bin preference for bin selection."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    small_number = 1e-6 # Avoid division by zero

    # 1. Hard constraint: Item must fit.
    priorities[bins_remain_cap < item] = -np.inf

    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        return priorities

    # 2. Utilization: Favor well-utilized bins.
    utilization = item / (max_cap + small_number)
    remaining_ratio = (bins_remain_cap[fit_mask] - item) / (max_cap + small_number)
    priorities[fit_mask] += (1 - remaining_ratio) * utilization

    # 3. Fragmentation: Discourage small fragments.
    frag_threshold_ratio = 10 # Adaptively adjust this.
    frag_threshold = item / frag_threshold_ratio
    frag_penalty = np.exp(-np.abs(bins_remain_cap[fit_mask] - item - frag_threshold) / (frag_threshold + small_number))
    frag_penalty_weight = 0.5 # Adaptively adjust this.
    priorities[fit_mask] -= frag_penalty_weight * frag_penalty

    # 4. Best Fit: Give a bonus to the best fit.
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus_value = 1
    best_fit_bonus = np.where(diffs == min_diff, best_fit_bonus_value, 0)
    priorities += best_fit_bonus

    # 5. Empty Bin Preference: For large items, prefer empty bins.
    empty_bin_threshold_ratio = 0.5
    empty_bin_preference = 2
    large_item_threshold = empty_bin_threshold_ratio * max_cap
    empty_bin_mask = bins_remain_cap == max_cap
    if item > large_item_threshold and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += empty_bin_preference

    return priorities
```
