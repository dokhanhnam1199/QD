```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, best fit, and a simplified fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    small_number = 1e-9
    best_fit_bonus_value = 0.1
    frag_penalty_weight = 0.1

    # 1. Bin Utilization
    utilization = item / (bins_remain_cap + small_number)
    priorities += utilization
    priorities[bins_remain_cap < item] = -np.inf

    # 2. Best Fit
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, best_fit_bonus_value, 0)
    priorities += best_fit_bonus

    # 3. Fragmentation (simplified)
    remaining_cap = bins_remain_cap - item
    frag_penalty = np.where(remaining_cap > 0, np.exp(-remaining_cap / (item + small_number)), 0)
    priorities[bins_remain_cap >= item] -= frag_penalty_weight * frag_penalty[bins_remain_cap >= item]

    return priorities
```
