```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation avoidance, best fit, and diversity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    num_bins = len(bins_remain_cap)

    # 0. Hard constraint: Item must fit.
    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        return priorities  # No bin can fit the item
    priorities[~fit_mask] = -np.inf

    # 1. Utilization Term: Favor better utilization
    remaining_capacity_after_fit = bins_remain_cap - item
    utilization_score = item / max_cap * (1 - remaining_capacity_after_fit / max_cap)
    priorities[fit_mask] += utilization_score[fit_mask]

    # 2. Fragmentation Avoidance: Penalize bins that will result in tiny fragments.
    tiny_fragment_threshold = 0.1 * max_cap
    tiny_fragment_penalty = -3.0
    tiny_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit <= tiny_fragment_threshold)
    priorities[tiny_fragment_mask] += tiny_fragment_penalty

    # 3. Best Fit Bonus
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, 1.0, 0)
    priorities += best_fit_bonus

    # 4. Bin Diversity Bonus
    if num_bins > 1:
        std_dev = np.std(bins_remain_cap[fit_mask])
        diversity_bonus = std_dev / max_cap
        priorities[fit_mask] += 0.2 * diversity_bonus

    return priorities
```
