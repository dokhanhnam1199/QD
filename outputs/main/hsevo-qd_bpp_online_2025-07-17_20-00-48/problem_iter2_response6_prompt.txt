{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Filter out bins that cannot fit the item\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        # If no bin can fit the item, prioritize the fullest bin (least remaining capacity)\n        # This might open up space for future items\n        priorities = -bins_remain_cap\n        return priorities\n    \n    \n    # Calculate remaining capacity after placing the item\n    remaining_after_placement = bins_remain_cap[valid_bins] - item\n\n    # Prioritize bins that would have a high fill rate after item placement\n    fill_rate = (bins_remain_cap[valid_bins] - remaining_after_placement) / bins_remain_cap[valid_bins]\n    priorities[valid_bins] = fill_rate\n\n    # Smallest Waste Heuristic :\n    # Adjust priorities by penalizing bins with small remaining space after placement. This favors more complete fills\n    # and tries to avoid very fragmented bins.\n    \n    waste_penalty = np.exp(-remaining_after_placement) # Exponential decay based on wasted space\n    priorities[valid_bins] *= waste_penalty\n\n    # Adjust the scaling so that the priorities of bins which *cannot* take the item are at the far negative end\n    priorities[~valid_bins] = -np.inf\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Very large penalty if the item doesn't fit\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Give a bonus if the item fits perfectly. This reduces fragmentation.\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = np.inf\n    \n    # Prioritize bins that can accommodate the item with minimal remaining space.\n    # This encourages filling bins completely.  Avoids creating bins with tiny spaces\n    # that will be hard to fill later. Use a capped inverse to limit extreme preference for tiny residual spaces.\n    \n    residual_space = bins_remain_cap - item\n    valid_bins = bins_remain_cap >= item\n    \n    # Calculate priority only for bins where the item fits\n    if np.any(valid_bins):\n        # Cap residual_space to a max value to avoid overly prioritizing bins with extremely small remaining capacity.\n        capped_residual_space = np.minimum(residual_space[valid_bins], 0.5)  # Example: cap at 0.5\n        priorities[valid_bins] += 1.0 / (capped_residual_space + 0.0000001) # Adding small constant to avoid division by zero\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic uses a combination of 'energy', 'potential well', and 'repulsion' inspired by physics, while the worst focuses on minimizing wasted space with a logarithmic function. There's a conceptual difference: the best uses a smoother, more nuanced approach, while the worst is more direct but potentially brittle. (2nd best) vs (second worst) - The second-best heuristic uses similar \"physics\" principles to the first, while the second-worst prioritizes filling bins to a target occupancy and includes some randomness, which seems less effective. Comparing (1st) vs (2nd), we see they are identical, suggesting redundancy in the evaluation. (3rd) vs (4th) - The 3rd heuristic employs \"Tesla's Resonance Principle\" combining proximity to item size and utilization, while the 4th simply aims to minimize wasted space. The 3rd is more sophisticated. Comparing (second worst) vs (worst), we see that the second worst added \"target occupancy\", this idea might be not helpful. Overall: Better heuristics blend multiple factors with carefully tuned weights, often inspired by physical analogies. They tend to avoid overly aggressive strategies like solely minimizing waste or targeting specific occupancy levels. Stochasticity, when applied, should be subtle and balanced. The best heuristics often include mechanisms to prevent extreme fragmentation.\n- \nOkay, I'll help you refine \"Current self-reflection\" to avoid pitfalls and design better heuristics. Here's a breakdown focusing on effective self-reflection for heuristic design:\n\n*   **Keywords:** Multifactorial, weighted combination, physical analogies, robustness, balanced stochasticity, fragmentation awareness, adaptive parameters.\n\n*   **Advice:** Actively explore combinations of relevant problem features. Experiment with weighting schemes (e.g., adaptive weights). Model heuristic behavior on real-world systems.\n\n*   **Avoid:** Premature convergence, over-reliance on randomness without control, neglecting solution structure, and \"one-size-fits-all\" approaches.\n\n*   **Explanation:** Effective heuristics often blend diverse insights. Balanced exploration and exploitation are key. Analyzing solution fragmentation helps maintain feasibility. Adaptive parameters help navigate complex landscapes.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}