{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function prioritizes bins based on a combination of factors inspired by physics.\n    It considers the 'energy' required to place the item (smaller remaining capacity = higher energy),\n    a 'potential well' effect (bins with capacities slightly larger than the item are favored),\n    and a 'repulsion' effect (bins with capacities much larger than the item are discouraged).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 'Energy' term: Higher priority for bins that are almost full\n    energy = 1.0 / (bins_remain_cap + 1e-9)  # Avoid division by zero\n    priorities += energy\n\n    # 'Potential well' term: Favor bins with capacities slightly larger than the item\n    diff = bins_remain_cap - item\n    potential_well = np.exp(-(diff**2) / (2 * (item/3)**2)) #Gaussian centered at item. Larger variance when item size is bigger\n    priorities += potential_well\n\n    # 'Repulsion' term: Discourage bins with capacities much larger than the item\n    repulsion = np.exp(-bins_remain_cap / (item*5))  # Exponential decay with bin capacity. Higher decay if item is small\n    priorities -= 0.5 * repulsion # We don't want it to be the dominating factor\n\n    # Consider bins where item doesn't fit as non viable\n    priorities[bins_remain_cap < item] = -np.inf\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                 tiny_fragment_threshold_fraction: float = 0.0965737114130352,\n                 small_fragment_threshold_fraction: float = 0.2976749170583864,\n                 tiny_fragment_penalty: float = -19.035781294528093,\n                 small_fragment_penalty: float = -2.9898952738151054,\n                 pressure_weight: float = 0.5918140088284347,\n                 best_fit_bonus_value: float = 1.3079400824759972,\n                 empty_bin_threshold_fraction: float = 0.46099185424258277,\n                 empty_bin_preference: float = 3.136501304787648) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function prioritizes bins based on a combination of factors, now including a simulated \"pressure\"\n    analogy and adaptive adjustments for large and small items, and explicitly avoids creating extremely small\n    fragments by rejecting bins that would lead to near-zero remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        tiny_fragment_threshold_fraction: Fraction of max_cap to define tiny fragments.\n        small_fragment_threshold_fraction: Fraction of max_cap to define small fragments.\n        tiny_fragment_penalty: Penalty for creating a tiny fragment.\n        small_fragment_penalty: Penalty for creating a small fragment.\n        pressure_weight: Weight of the pressure term.\n        best_fit_bonus_value: Bonus for the best fit bin.\n        empty_bin_threshold_fraction: Fraction of max_cap to consider an item large for empty bin preference.\n        empty_bin_preference: Preference for empty bins when item is large.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # 0. Hard constraint: Item must fit.  Bins that can't fit get -inf priority.\n    priorities[bins_remain_cap < item] = -np.inf\n\n    fit_mask = bins_remain_cap >= item\n\n    if not np.any(fit_mask):\n        return priorities  # No bin can fit the item\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the 1st heuristic uses a multi-faceted approach, considering utilization, fragmentation, pressure, best fit, empty bin preference and diversity, with adaptive adjustments based on item size and bin characteristics. The 20th heuristic solely relies on the ratio of item size to remaining bin capacity and its logarithm.\nComparing (2nd best) vs (second worst), the 2nd heuristic also employs multiple factors like utilization, fragmentation avoidance with penalties, pressure term, best fit bonus, and empty bin preference but lacks diversity term. The 19th heuristic, similar to the 20th, uses only the ratio of item and bin capacity, without considering other crucial factors.\nComparing (1st) vs (2nd), we see the 1st includes bin diversity and dynamically adjusts penalties/bonuses while 2nd uses fixed penalties and lacks the diversity element.\nComparing (3rd) vs (4th), there is no difference. They are the same.\nComparing (second worst) vs (worst), there is no difference. They are the same.\nComparing (15th) vs (16th), there is no difference. They are the same.\n\nOverall: The better heuristics incorporate a wider range of factors, adapt parameters based on item size and bin characteristics, and dynamically adjust penalties and bonuses. The worse heuristics are simplistic, focusing on a single factor and lacking adaptability. Including too many parameters, as in the 3rd, 15th and 16th, can be detrimental without proper tuning. The physics-inspired heuristics perform poorly, suggesting that simply applying a different analogy may not lead to superior packing strategies.\n- \nOkay, here's a refined definition of \"Current Self-Reflection\" aimed at designing better heuristics, incorporating your feedback:\n\n*   **Keywords:** Multi-factor, adaptive, validation, balance, edge cases, physics-inspired, interactions.\n\n*   **Advice:** Focus on combining relevant factors and dynamically adjusting parameters. Prioritize rigorous testing and validation of any added complexity.\n\n*   **Avoid:** Overly simplistic approaches, \"black box\" or aggressive strategies, and neglecting edge cases.\n\n*   **Explanation:** Heuristics benefit from considering multiple factors and their relationships, adaptivity, and a balanced approach to complexity/stochasticity. Rigorous validation is key.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}