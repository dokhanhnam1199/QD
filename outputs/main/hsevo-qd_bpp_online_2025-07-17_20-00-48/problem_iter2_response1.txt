```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization and proximity with slight stochasticity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    if np.any(feasible_mask):
        cap = bins_remain_cap[feasible_mask]
        proximity = 1 - abs(cap - item) / item if item > 0 else 0
        utilization = item / cap
        priorities[feasible_mask] = 5 * proximity + 2 * utilization + np.random.normal(0, 0.05, size=np.sum(feasible_mask)) #Stochasticity and combined metrics

    return priorities
```
