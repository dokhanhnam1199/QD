```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins based on a combination of factors, focusing on
    bin utilization and fragmentation reduction. It adaptively adjusts parameters
    based on item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Bin Utilization Term: Favor bins that will be well-utilized after adding the item.
    #    This encourages filling bins more completely.
    utilization = (item / (np.max(bins_remain_cap) + 1e-9)) # Normalized item size relative to max bin size
    remaining_percentage = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-9) # %age of bin remaining after packing

    # Penalize bins where item doesn't fit:
    priorities[bins_remain_cap < item] = -np.inf

    # If the item fits, then it adds priority
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        priorities[fit_mask] += (1 - remaining_percentage[fit_mask]) * utilization

    # 2. Fragmentation Term: Discourage creating very small remaining spaces.
    #    Bins with remaining capacity close to a small threshold are penalized.
    frag_threshold = item / 4.0  # Adjust as needed; smaller items shouldn't create very small fragments
    frag_penalty = np.exp(-np.abs(bins_remain_cap - item - frag_threshold) / (frag_threshold + 1e-9)) #frag threshold is deviation penalty

    #Only apply penalty for bins that will contain the item:
    priorities[fit_mask] -= 0.2 * frag_penalty[fit_mask] # Lower weight than utilization

    # 3. Best Fit term - gives some extra credit if this is the best fit option:
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, 0.1, 0)
    priorities += best_fit_bonus


    # 4. Empty Bin Consideration: Prefer using empty bins if the item is relatively large.
    empty_bin_mask = bins_remain_cap == np.max(bins_remain_cap) # Check for bins with the original capacity
    large_item_threshold = 0.75 * np.max(bins_remain_cap)
    if item > large_item_threshold and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += 0.3 # Prefer to put large item in empty bin

    return priorities
```
