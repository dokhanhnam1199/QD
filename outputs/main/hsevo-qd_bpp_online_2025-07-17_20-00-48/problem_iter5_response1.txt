```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, and fragmentation for bin selection."""
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        # Capacity + Inverse Waste
        priorities[valid_bins] = bins_remain_cap[valid_bins] / (1 + waste)

        # Fragmentation penalty
        frag_threshold = item / 3  # Adaptively set fragmentation threshold
        frag_penalty = np.exp(-np.abs(waste - frag_threshold) / (frag_threshold + 1e-9))
        priorities[valid_bins] -= 0.1 * frag_penalty  # Reduce frag_penalty weight

        #Best fit bonus
        min_waste = np.min(waste)
        best_fit_bonus = np.where(waste == min_waste, 0.2, 0)
        priorities[valid_bins] += best_fit_bonus
    else:
        priorities = np.full_like(bins_remain_cap, -np.inf)
    
    #Empty bin bonus for larger items
    empty_bin_mask = bins_remain_cap == np.max(bins_remain_cap)
    if item > np.max(bins_remain_cap) * 0.5 and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += 0.3
    return priorities
```
