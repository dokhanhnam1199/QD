```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins based on a combination of factors, focusing on
    bin utilization, fragmentation reduction, and a novel "bin pressure" concept.
    It adaptively adjusts parameters based on item size and bin characteristics.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    epsilon = 1e-9  # Small constant to avoid division by zero

    # 1. Bin Utilization Term: Favor bins that will be well-utilized.
    utilization = item / (max_cap + epsilon)  # Normalized item size
    remaining_percentage = (bins_remain_cap - item) / (max_cap + epsilon)

    # Penalize bins where item doesn't fit:
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -np.inf

    # If item fits, add utilization priority:
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        priorities[fit_mask] += (1 - remaining_percentage[fit_mask]) * utilization

    # 2. Fragmentation Term: Discourage creating very small remaining spaces.  Adaptively scale fragment threshold
    frag_threshold = item / 3.0 # Dynamically adjust threshold
    frag_penalty = np.exp(-np.abs(bins_remain_cap - item - frag_threshold) / (frag_threshold + epsilon))

    if np.any(fit_mask):
        priorities[fit_mask] -= 0.25 * frag_penalty[fit_mask] # Increased frag penalty a bit.

    # 3. Best Fit Term: Bonus for the best fit.
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, 0.15, 0)  # slightly bigger bonus
    priorities += best_fit_bonus

    # 4. Empty Bin Consideration: Prefer using empty bins if the item is relatively large.  Changed threshold and weight
    empty_bin_mask = bins_remain_cap == max_cap  # Check for empty bins
    large_item_threshold = 0.65 * max_cap
    if item > large_item_threshold and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += 0.35  # More encouragement for empty bins

    # 5. "Bin Pressure" Term:  Model the "pressure" on bins based on their remaining capacity relative to *average* remaining capacity.  This encourages filling bins that are significantly *below* average.
    average_remaining = np.mean(bins_remain_cap)
    pressure = (average_remaining - bins_remain_cap) / (max_cap + epsilon)  # Normalized pressure
    priorities[fit_mask] += 0.1 * pressure[fit_mask]

    #6. Small item handling: give higher priority to partially filled bins.
    small_item_threshold = 0.2 * max_cap
    if item < small_item_threshold:
      partially_filled_mask = (bins_remain_cap < max_cap) & (bins_remain_cap >= item)
      priorities[partially_filled_mask] += 0.2 # Encourages filling of bins that are not empty, not full
    return priorities
```
