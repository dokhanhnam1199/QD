```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, best-fit, and empty bin preference with adaptive parameters."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    small_number = 1e-9

    # 1. Bin Utilization
    utilization = item / (np.max(bins_remain_cap) + small_number)
    remaining_percentage = (bins_remain_cap - item) / (np.max(bins_remain_cap) + small_number)

    # Infeasible bin penalty
    priorities[bins_remain_cap < item] = -np.inf
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        priorities[fit_mask] += (1 - remaining_percentage[fit_mask]) * utilization

    # 2. Fragmentation penalty (adaptive threshold)
    frag_threshold = item / 4.0  # Adaptive: threshold based on item size
    frag_penalty = np.exp(-np.abs(bins_remain_cap - item - frag_threshold) / (frag_threshold + small_number))
    priorities[fit_mask] -= 0.2 * frag_penalty[fit_mask] # Lower weight than utilization


    # 3. Best Fit Bonus
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, 0.1, 0)
    priorities += best_fit_bonus

    # 4. Empty Bin Consideration (for larger items)
    large_item_threshold = 0.5 * np.max(bins_remain_cap) # Adaptive: threshold based on bin size
    empty_bin_mask = bins_remain_cap == np.max(bins_remain_cap)
    if item > large_item_threshold and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += 0.3  # Prefer to put large items in empty bins

    return priorities
```
