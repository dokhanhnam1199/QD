```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Give negative priority to bins that can't fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate waste if item is added to each bin
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Mark bins that can't fit as infinite waste

    # Prioritize bins with least waste (First Fit Decreasing heuristic)
    priorities = -waste
    
    # Add a small bonus to bins that are almost full after packing
    almost_full_threshold = 0.1  # e.g., bins should be at least 90% full
    almost_full_mask = (item / (bins_remain_cap - waste)) > (1 - almost_full_threshold)
    priorities[almost_full_mask] += 1

    # Slightly penalize very empty bins (to encourage filling existing ones)
    empty_threshold = 0.5  # e.g., bins should have at most 50% capacity remaining before packing
    empty_mask = bins_remain_cap > empty_threshold
    priorities[empty_mask] -= 0.1

    return priorities
```
