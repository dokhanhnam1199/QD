```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    *,
    epsilon: float = 0.0,
    tau: float = 1.0,
    rng: np.random.Generator = None,
) -> np.ndarray:
    """Return normalized priorities for feasible bins using epsilon‑greedy softmax."""
    # ensure RNG availability
    if rng is None:
        rng = np.random.default_rng()
    # feasible bins mask
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    # epsilon‑greedy: random uniform among feasible bins
    if epsilon > 0.0 and rng.random() < epsilon:
        probs = np.zeros_like(bins_remain_cap, dtype=float)
        probs[feasible] = 1.0 / feasible.sum()
        return probs
    # temperature‑scaled scores (negative waste)
    raw_scores = - (bins_remain_cap.astype(float) - item) / tau
    raw_scores[~feasible] = -np.inf
    # stable softmax via log‑sum‑exp trick
    max_score = np.max(raw_scores)
    exp_scores = np.exp(raw_scores - max_score)
    sum_exp = np.sum(exp_scores)
    if sum_exp == 0.0:
        return np.zeros_like(bins_remain_cap, dtype=float)
    return exp_scores / sum_exp
```
