```python
import numpy as np  # probability scoring for online bin packing

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                tau: float = 0.5,
                alpha: float = 1.0,
                epsilon: float = 0.0,
                rng: np.random.Generator = None) -> np.ndarray:
    """Probabilistic bin selection: softmax on negative slack with epsilonâ€‘greedy exploration, weighted by logistic fillâ€‘ratio to prefer nearly full bins."""
    if rng is None:
        rng = np.random.default_rng()
    scores = np.zeros_like(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return scores
    if epsilon > 0.0 and rng.random() < epsilon:
        scores[feasible] = 1.0 / feasible.sum()
        return scores
    slack = bins_remain_cap - item
    fill_after = 1.0 - slack
    logistic_weight = 1.0 / (1.0 + np.exp(-(fill_after - 0.5) * 10))
    raw = -slack / tau + alpha * logistic_weight
    raw = raw[feasible]
    max_raw = raw.max()
    exp_vals = np.exp(raw - max_raw)
    probs = exp_vals / exp_vals.sum()
    scores[feasible] = probs
    return scores
```
