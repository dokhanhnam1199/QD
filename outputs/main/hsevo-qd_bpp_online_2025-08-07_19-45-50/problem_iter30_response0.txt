```python
import numpy as np
from typing import Optional

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 0.1,
    tau: float = 1.0,
    rng: Optional[np.random.Generator] = None,
) -> np.ndarray:
    """Return a probability vector over bins for placing `item`.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        Remaining capacities of existing bins.
    epsilon : float, optional
        Exploration probability for uniform selection among feasible bins.
    tau : float, optional
        Temperature controlling the softness of the softmax distribution.
    rng : np.random.Generator, optional
        Random number generator for reproducible stochastic behavior.

    Returns
    -------
    np.ndarray
        Normalized priority scores (probabilities) for each bin; zeros for infeasible bins.
    """
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if rng is None:
        rng = np.random.default_rng()
    if rng.random() < epsilon:
        probs = np.zeros_like(bins_remain_cap, dtype=float)
        probs[feasible] = 1.0 / feasible.sum()
        return probs
    residual = bins_remain_cap.astype(float) - item
    scores = np.where(feasible, -residual / tau, -np.inf)
    max_score = np.max(scores)
    exp_scores = np.exp(scores - max_score)
    sum_exp = np.sum(exp_scores)
    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(bins_remain_cap, dtype=float)
```
