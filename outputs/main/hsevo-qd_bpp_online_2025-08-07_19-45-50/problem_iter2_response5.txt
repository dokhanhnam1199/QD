```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 1.0, epsilon: float = 0.0) -> np.ndarray:
    """
    Combines deterministic residual prioritization with optional softmax smoothing and epsilon exploration.
    """
    feasible = bins_remain_cap >= item
    priorities = np.where(feasible, -(bins_remain_cap - item), -np.inf)
    if epsilon > 0.0:
        rand = np.random.rand(bins_remain_cap.size)
        priorities = np.where(feasible, (1 - epsilon) * priorities + epsilon * rand, -np.inf)
    if tau != 1.0:
        exp_vals = np.exp(priorities / tau)
        norm = np.where(feasible, exp_vals, 0.0).sum()
        priorities = np.where(feasible, exp_vals / norm, -np.inf)
    return priorities
```
