```python
import numpy as np
from typing import Optional


def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 0.0,
    tau: float = 1.0,
    rng: Optional[np.random.Generator] = None,
) -> np.ndarray:
    """
    Compute a probability distribution over bins for an incoming item in the online
    bin‑packing problem using a temperature‑scaled softmax with additive smoothing
    and optional Gumbel perturbations for stochastic exploration.

    Parameters
    ----------
    item : float
        Size of the incoming item (non‑negative).
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the bins.
    epsilon : float, optional
        Additive smoothing constant applied to the exponentiated scores.
        Must be non‑negative. Guarantees a non‑zero probability for every
        feasible bin when ``epsilon`` > 0.
    tau : float, optional
        Temperature parameter for the softmax; must be positive.
    rng : np.random.Generator, optional
        Random number generator used for Gumbel noise. Providing a seeded
        generator makes the behaviour reproducible. If ``None`` a new generator
        is instantiated.

    Returns
    -------
    np.ndarray
        Probability vector of the same shape as ``bins_remain_cap``. Infeasible
        bins have probability zero; the probabilities of feasible bins sum to
        one.

    Raises
    ------
    ValueError
        If ``epsilon`` is negative or ``tau`` is non‑positive.
    """
    if epsilon < 0.0:
        raise ValueError("epsilon must be non‑negative.")
    if tau <= 0.0:
        raise ValueError("tau must be positive.")
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    residual = bins_remain_cap[feasible] - item
    scores = -residual / tau
    if rng is None:
        rng = np.random.default_rng()
    # Gumbel perturbation for stochastic tie‑breaking
    u = rng.random(size=scores.shape)
    tiny = np.finfo(float).tiny
    gumbel = -np.log(-np.log(u + tiny) + tiny)
    scores = scores + gumbel
    # Stable softmax via log‑sum‑exp
    max_score = np.max(scores)
    exp_scores = np.exp(scores - max_score)
    if epsilon > 0.0:
        exp_scores = exp_scores + epsilon
    sum_exp = np.sum(exp_scores)
    probs_feasible = exp_scores / sum_exp if sum_exp > 0.0 else np.zeros_like(exp_scores)
    probs = np.zeros_like(bins_remain_cap, dtype=float)
    probs[feasible] = probs_feasible
    total = probs.sum()
    if total > 0.0:
        probs /= total
    return probs
```
