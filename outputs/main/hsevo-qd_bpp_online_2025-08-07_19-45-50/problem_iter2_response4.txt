```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Deterministic softmax priority: assigns higher probability to bins with tighter fit based on remaining capacity. Infeasible bins receive zero probability."""
    residual = bins_remain_cap - item
    feasible = residual >= 0
    if not feasible.any():
        return np.zeros_like(bins_remain_cap, dtype=float)
    scores = -residual
    scores[~feasible] = -np.inf
    max_score = scores[feasible].max()
    exp_scores = np.exp(scores - max_score)
    exp_scores[~feasible] = 0.0
    total = exp_scores.sum()
    if total == 0:
        return np.zeros_like(bins_remain_cap, dtype=float)
    return exp_scores / total
```
