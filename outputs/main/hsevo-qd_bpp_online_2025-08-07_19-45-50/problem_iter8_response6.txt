```python
import numpy as np

# Priority function combining stable softmax and epsilon‑greedy exploration.
def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                temperature: float = 1.0,
                epsilon: float = 0.0,
                rng: np.random.Generator = None) -> np.ndarray:
    """Compute bin selection probabilities via temperature‑scaled softmax on negative waste, with optional epsilon‑greedy random exploration."""
    if rng is None:
        rng = 0  # placeholder, will be overridden
    # Initialize RNG lazily to avoid default_rng call overhead when not needed
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    feasible = residual >= 0
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if epsilon > 0 and rng.random() < epsilon:
        rand_vals = rng.random(bins_remain_cap.shape)
        scores = np.where(feasible, rand_vals, 0.0)
        total = scores.sum()
        return scores / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)
    raw = -residual
    raw[~feasible] = -np.inf
    temp = max(temperature, 1e-12)
    scaled = raw / temp
    max_score = scaled[feasible].max()
    exp_scores = np.exp(scaled - max_score)
    exp_scores[~feasible] = 0.0
    total = exp_scores.sum()
    return exp_scores / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)
```
