```python
import numpy as np

# Priority function combining exact-fit bias with softmax waste scoring and epsilon‑greedy exploration.
def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                epsilon: float = 0.0,
                temperature: float = 1.0,
                rng: np.random.Generator | None = None) -> np.ndarray:
    """Exact‑fit bias, softmax on waste, optional epsilon‑greedy randomization."""
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    feasible = residual >= 0
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if epsilon > 0.0 and rng.random() < epsilon:
        rand_vals = rng.random(bins_remain_cap.shape[0])
        scores = np.where(feasible, rand_vals, 0.0)
        total = scores.sum()
        if total > 0.0:
            return scores / total
        return np.zeros_like(bins_remain_cap, dtype=float)
    exact = (residual == 0) & feasible
    if np.any(exact):
        prob = np.where(exact, 1.0, 0.0)
        return prob / prob.sum()
    waste = residual
    raw = -waste
    raw[~feasible] = -np.inf
    scaled = raw / max(temperature, 1e-12)
    max_raw = np.max(scaled[feasible])
    exp_scores = np.exp(scaled - max_raw)
    exp_scores[~feasible] = 0.0
    total = exp_scores.sum()
    if total > 0.0:
        return exp_scores / total
    return np.zeros_like(bins_remain_cap, dtype=float)
```
