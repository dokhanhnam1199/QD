```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                epsilon: float = 0.0,
                temperature: float = 1.0,
                rng: np.random.Generator = None) -> np.ndarray:
    """
    Priority heuristic: deterministic negative waste with optional epsilon-greedy exploration
    and temperature-scaled softmax. Returns a probability vector over feasible bins.
    """
    if rng is None:
        rng = np.random.default_rng()

    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)

    waste = bins_remain_cap - item
    raw_scores = np.where(feasible, -waste, -np.inf)

    if epsilon > 0 and rng.random() < epsilon:
        random_scores = rng.uniform(size=bins_remain_cap.shape[0])
        raw_scores = np.where(feasible, random_scores, -np.inf)

    raw_scores = raw_scores / temperature

    max_score = np.max(raw_scores)
    exp_scores = np.exp(raw_scores - max_score)
    sum_exp = exp_scores.sum()
    if sum_exp > 0:
        return exp_scores / sum_exp
    return np.zeros_like(exp_scores)
```
