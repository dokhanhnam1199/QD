```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1, rng: np.random.Generator = None) -> np.ndarray:
    """Best‑fit logistic score blended with ε‑greedy random exploration via stable softmax."""
    if rng is None:
        rng = np.random.default_rng()
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    caps = bins_remain_cap.astype(float)
    space_left = caps - item
    ratio = np.empty_like(caps, dtype=float)
    ratio[feasible] = space_left[feasible] / caps[feasible]
    k = 12.0
    deterministic = np.empty_like(caps, dtype=float)
    deterministic[feasible] = 1.0 / (1.0 + np.exp(-k * (1.0 - ratio[feasible])))
    random_scores = np.empty_like(caps, dtype=float)
    random_scores[feasible] = rng.random(feasible.sum())
    combined = (1.0 - epsilon) * deterministic + epsilon * random_scores
    max_combined = combined[feasible].max()
    exps = np.empty_like(caps, dtype=float)
    exps[feasible] = np.exp(combined[feasible] - max_combined)
    sum_exps = exps[feasible].sum()
    probs = np.full_like(caps, -np.inf, dtype=float)
    probs[feasible] = exps[feasible] / sum_exps
    return probs
```
