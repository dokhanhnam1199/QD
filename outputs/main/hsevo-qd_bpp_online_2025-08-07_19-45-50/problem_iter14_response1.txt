```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 0.5, epsilon: float = 0.0, rng: np.random.Generator | None = None) -> np.ndarray:
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item
    scores = np.zeros_like(bins_remain_cap, dtype=float)
    if not feasible.any():
        return scores
    if epsilon > 0.0:
        if rng is None:
            rng = np.random.default_rng()
        if rng.random() < epsilon:
            rand_weights = rng.random(feasible.sum())
            probs = rand_weights / rand_weights.sum()
            scores[feasible] = probs
            return scores
    slack = bins_remain_cap[feasible] - item
    tau_eff = max(tau, 1e-12)
    raw = -slack / tau_eff
    max_raw = raw.max()
    exp_vals = np.exp(raw - max_raw)
    probs = exp_vals / exp_vals.sum()
    scores[feasible] = probs
    return scores
```
