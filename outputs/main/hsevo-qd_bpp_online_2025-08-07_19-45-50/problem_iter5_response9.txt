```python
import numpy as np
from typing import Optional

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 0.0,
    tau: float = 1.0,
    random_state: Optional[int] = None,
) -> np.ndarray:
    """Softmax over -waste with temperature, epsilon‑greedy random exploration."""
    # Feasibility mask
    feasible = bins_remain_cap >= item
    n_bins = bins_remain_cap.shape[0]
    if not feasible.any():
        return np.full(n_bins, -np.inf)

    if tau <= 0:
        raise ValueError("tau must be positive")

    rng = np.random.default_rng(random_state)

    # Epsilon‑greedy: random scores for feasible bins with probability epsilon
    if epsilon > 0.0 and rng.random() < epsilon:
        rand_scores = np.where(feasible, rng.random(n_bins), -np.inf)
        return rand_scores

    # Deterministic part: softmax of negative waste (higher priority for tighter fit)
    waste = bins_remain_cap - item
    scores = -waste
    scores = np.where(feasible, scores, -np.inf)

    # Temperature scaling
    scaled = scores / tau

    # Numerically stable softmax (ignore -inf entries)
    max_scaled = np.max(scaled[feasible])
    exp_scaled = np.exp(scaled - max_scaled)  # -inf → 0
    sum_exp = np.sum(exp_scaled[feasible])
    softmax = np.where(feasible, exp_scaled / sum_exp, -np.inf)

    return softmax
```
