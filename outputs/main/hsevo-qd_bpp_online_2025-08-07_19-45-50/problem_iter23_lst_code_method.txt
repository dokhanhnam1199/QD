{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1, tau: float = 1.0, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Temperature-scaled softmax with optional epsilon-greedy exploration; returns normalized priorities for feasible bins.\"\"\"\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if rng is None:\n        rng = np.random.default_rng()\n    if rng.random() < epsilon:\n        probs = np.zeros_like(bins_remain_cap, dtype=float)\n        probs[feasible] = 1.0 / np.count_nonzero(feasible)\n        return probs\n    residual = bins_remain_cap.astype(float) - item\n    raw_scores = -residual / tau\n    raw_scores[~feasible] = -np.inf\n    max_score = np.max(raw_scores)\n    exp_scores = np.exp(raw_scores - max_score)\n    sum_exp = np.sum(exp_scores)\n    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1, tau: float = 1.0, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Temperature-scaled softmax with optional epsilon-greedy exploration; returns normalized priorities for feasible bins.\"\"\"\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if rng is None:\n        rng = np.random.default_rng()\n    if rng.random() < epsilon:\n        probs = np.zeros_like(bins_remain_cap, dtype=float)\n        probs[feasible] = 1.0 / np.count_nonzero(feasible)\n        return probs\n    residual = bins_remain_cap.astype(float) - item\n    raw_scores = -residual / tau\n    raw_scores[~feasible] = -np.inf\n    max_score = np.max(raw_scores)\n    exp_scores = np.exp(raw_scores - max_score)\n    sum_exp = np.sum(exp_scores)\n    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1, tau: float = 1.0, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Temperature-scaled softmax with optional epsilon-greedy exploration; returns normalized priorities for feasible bins.\"\"\"\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if rng is None:\n        rng = np.random.default_rng()\n    if rng.random() < epsilon:\n        probs = np.zeros_like(bins_remain_cap, dtype=float)\n        probs[feasible] = 1.0 / np.count_nonzero(feasible)\n        return probs\n    residual = bins_remain_cap.astype(float) - item\n    raw_scores = -residual / tau\n    raw_scores[~feasible] = -np.inf\n    max_score = np.max(raw_scores)\n    exp_scores = np.exp(raw_scores - max_score)\n    sum_exp = np.sum(exp_scores)\n    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1, tau: float = 1.0, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Temperature-scaled softmax with optional epsilon-greedy exploration; returns normalized priorities for feasible bins.\"\"\"\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if rng is None:\n        rng = np.random.default_rng()\n    if rng.random() < epsilon:\n        probs = np.zeros_like(bins_remain_cap, dtype=float)\n        probs[feasible] = 1.0 / np.count_nonzero(feasible)\n        return probs\n    residual = bins_remain_cap.astype(float) - item\n    raw_scores = -residual / tau\n    raw_scores[~feasible] = -np.inf\n    max_score = np.max(raw_scores)\n    exp_scores = np.exp(raw_scores - max_score)\n    sum_exp = np.sum(exp_scores)\n    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)\n\n[Heuristics 5th]\nimport numpy as np\nfrom typing import Optional\n\n# Priority function combining deterministic waste and optional epsilon\u2011greedy exploration\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0,\n                random_state: Optional[int] = None) -> np.ndarray:\n    \"\"\"Priority = -waste for feasible bins; optional epsilon\u2011greedy random scores.\"\"\"\n    feasible = bins_remain_cap >= item\n    if epsilon > 0.0:\n        rng = np.random.default_rng(random_state)\n        if rng.random() < epsilon:\n            rand_scores = rng.random(bins_remain_cap.shape[0])\n            return np.where(feasible, rand_scores, -np.inf)\n    waste = bins_remain_cap - item\n    return np.where(feasible, -waste, -np.inf)\n\n[Heuristics 6th]\nimport numpy as np\n\n# Stable softmax priority with optional \u03b5\u2011greedy exploration for online bin packing.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray,\n                tau: float = 0.5, epsilon: float = 0.0,\n                rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Return probability scores for each bin based on remaining capacity, using a temperature\u2011scaled softmax; optionally explore randomly via \u03b5\u2011greedy.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    scores = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return scores\n    if epsilon > 0.0 and rng.random() < epsilon:\n        rand = rng.random(feasible.sum())\n        probs = rand / rand.sum()\n        scores[feasible] = probs\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    raw = -slack / tau\n    max_raw = raw.max()\n    exp_vals = np.exp(raw - max_raw)\n    probs = exp_vals / exp_vals.sum()\n    scores[feasible] = probs\n    return scores\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    exact_mask = bins_remain_cap == item\n    valid_mask = bins_remain_cap >= item\n    priorities[exact_mask] = 1e12\n    valid_not_exact = valid_mask & ~exact_mask\n    slack = bins_remain_cap[valid_not_exact] - item\n    priorities[valid_not_exact] = -slack\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\nfrom typing import Optional\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.0,\n    temperature: float = 1.0,\n    random_state: Optional[int] = None,\n) -> np.ndarray:\n    \"\"\"Combine waste\u2011based score (-remaining) with \u03b5\u2011greedy random component and temperature\u2011scaled softmax for balanced exploration/exploitation.\"\"\"\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    feasible = bins >= item\n    if not np.any(feasible):\n        return np.full_like(bins, -np.inf, dtype=float)\n    rng = np.random.default_rng(random_state)\n    deterministic = -(bins - item)\n    random_scores = rng.random(bins.shape)\n    mixed = (1.0 - epsilon) * deterministic + epsilon * random_scores\n    mixed = np.where(feasible, mixed, -np.inf)\n    temp = max(temperature, 1e-12)\n    max_val = np.max(mixed[feasible])\n    shifted = mixed - max_val\n    exp_vals = np.exp(shifted / temp)\n    exp_vals = np.where(feasible, exp_vals, 0.0)\n    probs = exp_vals / exp_vals.sum()\n    return probs\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                tau: float = 1.0,\n                epsilon: float = 0.0,\n                rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Softmax priority with temperature and optional epsilon\u2011greedy exploration.\"\"\"\n    # feasible bins: enough remaining capacity for the item\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if rng is None:\n        rng = np.random.default_rng()\n    # epsilon\u2011greedy: uniform random scores over feasible bins\n    if rng.random() < epsilon:\n        rand = rng.random(bins_remain_cap.shape[0])\n        rand[~feasible] = 0.0\n        s = rand.sum()\n        return rand / s if s > 0 else np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    # temperature\u2011scaled softmax on negative waste (higher score \u2192 less waste)\n    scores = np.where(feasible, -(bins_remain_cap - item) / tau, -np.inf)\n    max_score = np.max(scores[feasible])\n    exp_scores = np.exp(scores - max_score)          # infeasible become 0\n    total = exp_scores.sum()\n    return exp_scores / total if total > 0 else np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0, temperature: float = 1.0) -> np.ndarray:\n    \"\"\"Epsilon\u2011greedy softmax: random scores with prob \u03b5, else residual\u2011based softmax.\"\"\"\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if np.random.rand() < epsilon:\n        rand_scores = np.random.rand(bins_remain_cap.shape[0])\n        raw = np.where(feasible, rand_scores, -np.inf)\n    else:\n        residual = bins_remain_cap.astype(float) - item\n        raw = np.where(feasible, -residual / max(temperature, 1e-12), -np.inf)\n    max_raw = np.max(raw)\n    exp_raw = np.exp(raw - max_raw)\n    sum_exp = exp_raw.sum()\n    return exp_raw / sum_exp if sum_exp > 0 else np.zeros_like(exp_raw)\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    epsilon: float = 0.0,\n    tau: float = 1.0,\n    rng: np.random.Generator = None,\n) -> np.ndarray:\n    \"\"\"Return normalized priorities for feasible bins using epsilon\u2011greedy softmax.\"\"\"\n    # ensure RNG availability\n    if rng is None:\n        rng = np.random.default_rng()\n    # feasible bins mask\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    # epsilon\u2011greedy: random uniform among feasible bins\n    if epsilon > 0.0 and rng.random() < epsilon:\n        probs = np.zeros_like(bins_remain_cap, dtype=float)\n        probs[feasible] = 1.0 / feasible.sum()\n        return probs\n    # temperature\u2011scaled scores (negative waste)\n    raw_scores = - (bins_remain_cap.astype(float) - item) / tau\n    raw_scores[~feasible] = -np.inf\n    # stable softmax via log\u2011sum\u2011exp trick\n    max_score = np.max(raw_scores)\n    exp_scores = np.exp(raw_scores - max_score)\n    sum_exp = np.sum(exp_scores)\n    if sum_exp == 0.0:\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    return exp_scores / sum_exp\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    epsilon: float = 0.0,\n    tau: float = 1.0,\n    rng: np.random.Generator = None,\n) -> np.ndarray:\n    \"\"\"Return normalized priorities for feasible bins using epsilon\u2011greedy softmax.\"\"\"\n    # ensure RNG availability\n    if rng is None:\n        rng = np.random.default_rng()\n    # feasible bins mask\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    # epsilon\u2011greedy: random uniform among feasible bins\n    if epsilon > 0.0 and rng.random() < epsilon:\n        probs = np.zeros_like(bins_remain_cap, dtype=float)\n        probs[feasible] = 1.0 / feasible.sum()\n        return probs\n    # temperature\u2011scaled scores (negative waste)\n    raw_scores = - (bins_remain_cap.astype(float) - item) / tau\n    raw_scores[~feasible] = -np.inf\n    # stable softmax via log\u2011sum\u2011exp trick\n    max_score = np.max(raw_scores)\n    exp_scores = np.exp(raw_scores - max_score)\n    sum_exp = np.sum(exp_scores)\n    if sum_exp == 0.0:\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    return exp_scores / sum_exp\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                tau: float = 0.5,\n                epsilon: float = 0.0,\n                rng: np.random.Generator | None = None,\n                logistic_k: float = 12.0,\n                logistic_lambda: float = 1.0) -> np.ndarray:\n    \"\"\"\n    Softmax over negative waste plus logistic fill ratio, with optional epsilon exploration.\n    \"\"\"\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n\n    if rng is None:\n        rng = np.random.default_rng()\n    if rng.random() < epsilon:\n        probs = np.zeros_like(bins_remain_cap, dtype=float)\n        probs[feasible] = 1.0 / np.count_nonzero(feasible)\n        return probs\n\n    caps = bins_remain_cap.astype(float)\n    residual = caps - item\n    raw_scores = -residual / tau\n\n    ratio = residual / caps\n    logistic_factor = 1.0 / (1.0 + np.exp(-logistic_k * (1.0 - ratio)))\n    raw_scores += logistic_lambda * logistic_factor\n\n    raw_scores[~feasible] = -np.inf\n\n    max_score = np.max(raw_scores)\n    exp_scores = np.exp(raw_scores - max_score)\n    sum_exp = np.sum(exp_scores)\n    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns softmax-based priority for placing an item into each bin.\"\"\"\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    caps = bins_remain_cap.astype(float)\n    residual = caps - item\n    raw_scores = np.where(feasible, -residual, -np.inf)\n    max_score = raw_scores.max()\n    exp_scores = np.exp(raw_scores - max_score)\n    sum_exp = exp_scores.sum()\n    priorities = exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.01) -> np.ndarray:\n    \"\"\"Exact-fit-first priority with optional epsilon-greedy exploration.\"\"\"\n    # Feasibility mask and deterministic priority (negative waste)\n    feasible = bins_remain_cap >= item\n    deterministic = np.where(feasible, -(bins_remain_cap - item), -np.inf)\n    # With probability epsilon, use random scores for feasible bins\n    if np.random.rand() < epsilon:\n        random_scores = np.random.rand(bins := bins_remain_cap.shape[0])\n        return np.where(feasible, random_scores, -np.inf)\n    return deterministic\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.01) -> np.ndarray:\n    \"\"\"Exact-fit-first priority with optional epsilon-greedy exploration.\"\"\"\n    # Feasibility mask and deterministic priority (negative waste)\n    feasible = bins_remain_cap >= item\n    deterministic = np.where(feasible, -(bins_remain_cap - item), -np.inf)\n    # With probability epsilon, use random scores for feasible bins\n    if np.random.rand() < epsilon:\n        random_scores = np.random.rand(bins := bins_remain_cap.shape[0])\n        return np.where(feasible, random_scores, -np.inf)\n    return deterministic\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.01) -> np.ndarray:\n    \"\"\"Exact-fit-first priority with optional epsilon-greedy exploration.\"\"\"\n    # Feasibility mask and deterministic priority (negative waste)\n    feasible = bins_remain_cap >= item\n    deterministic = np.where(feasible, -(bins_remain_cap - item), -np.inf)\n    # With probability epsilon, use random scores for feasible bins\n    if np.random.rand() < epsilon:\n        random_scores = np.random.rand(bins := bins_remain_cap.shape[0])\n        return np.where(feasible, random_scores, -np.inf)\n    return deterministic\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    temperature: float = 1.0,\n    epsilon: float = 0.0,\n    rng: np.random.Generator | None = None,\n) -> np.ndarray:\n    \"\"\"Probability over bins via temperature\u2011scaled softmax on negative waste with epsilon\u2011greedy exploration.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    feasible = residual >= 0\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if epsilon > 0 and rng.random() < epsilon:\n        rand = rng.random(bins_remain_cap.shape)\n        scores = np.where(feasible, rand, 0.0)\n        total = scores.sum()\n        return scores / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n    scores = -residual\n    scores = np.where(feasible, scores, -np.inf)\n    temp  # placeholder to avoid unused variable warning\n    temp = max(temperature, 1e-12)\n    scaled = scores / temp\n    max_score = np.max(scaled[feasible])\n    exp_scores = np.exp(scaled - max_score)\n    exp_scores = np.where(feasible, exp_scores, 0.0)\n    total = exp_scores.sum()\n    return exp_scores / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    temperature: float = 1.0,\n    epsilon: float = 0.0,\n    rng: np.random.Generator | None = None,\n) -> np.ndarray:\n    \"\"\"Probability over bins via temperature\u2011scaled softmax on negative waste with epsilon\u2011greedy exploration.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    feasible = residual >= 0\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if epsilon > 0 and rng.random() < epsilon:\n        rand = rng.random(bins_remain_cap.shape)\n        scores = np.where(feasible, rand, 0.0)\n        total = scores.sum()\n        return scores / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n    scores = -residual\n    scores = np.where(feasible, scores, -np.inf)\n    temp  # placeholder to avoid unused variable warning\n    temp = max(temperature, 1e-12)\n    scaled = scores / temp\n    max_score = np.max(scaled[feasible])\n    exp_scores = np.exp(scaled - max_score)\n    exp_scores = np.where(feasible, exp_scores, 0.0)\n    total = exp_scores.sum()\n    return exp_scores / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n\n[Heuristics 20th]\nimport numpy as np\nfrom typing import Optional\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.0,\n    temperature: float = 1.0,\n    random_state: Optional[int] = None,\n) -> np.ndarray:\n    \"\"\"Blend waste\u2011based score, rank weighting, \u03b5\u2011greedy perturbation, and temperature.\"\"\"\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    waste = bins_remain_cap[feasible] - item\n    deterministic = -waste\n    rng = np.random.default_rng(random_state)\n    random_scores = rng.random(waste.shape)\n    mixed = (1.0 - epsilon) * deterministic + epsilon * random_scores\n    order = np.argsort(waste)\n    ranks = np.empty_like(order)\n    ranks[order] = np.arange(waste.size)\n    mixed *= 1.0 / (ranks + 1.0)\n    if temperature != 1.0:\n        mixed = mixed / temperature\n    scores[feasible] = mixed\n    return scores\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}