```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    tau: float = 0.5,
    epsilon: float = 0.0,
    temperature: float = 1.0,
    logistic_k: float = 12.0,
    logistic_lambda: float = 1.0,
    gumbel_scale: float = 1.0,
    rng: np.random.Generator | None = None,
) -> np.ndarray:
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if rng is None:
        rng = np.random.default_rng()
    if rng.random() < epsilon:
        probs = np.zeros_like(bins_remain_cap, dtype=float)
        probs[feasible] = 1.0 / np.count_nonzero(feasible)
        return probs
    caps = bins_remain_cap.astype(float)
    residual = caps - item
    waste_score = -residual / tau
    ratio = residual / caps
    logistic_factor = 1.0 / (1.0 + np.exp(-logistic_k * (1.0 - ratio)))
    raw_scores = waste_score + logistic_lambda * logistic_factor
    raw_scores[~feasible] = -np.inf
    raw_scores += rng.gumbel(loc=0.0, scale=gumbel_scale, size=raw_scores.shape)
    max_score = np.max(raw_scores)
    exp_scores = np.exp((raw_scores - max_score) / temperature)
    sum_exp = np.sum(exp_scores)
    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)
```
