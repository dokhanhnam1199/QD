```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, *, epsilon: float = 0.0, tau: float = 1.0, rng: np.random.Generator = None, exact_fit_bonus: float = 1e6) -> np.ndarray:
    """Priority via softmax of negative waste, exact‑fit bonus, and optional ε‑greedy exploration."""
    if rng is None:
        rng = np.random.default_rng()
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if epsilon > 0.0 and rng.random() < epsilon:
        probs = np.zeros_like(bins_remain_cap, dtype=float)
        probs[feasible] = 1.0 / np.count_nonzero(feasible)
        return probs
    exact_fit = bins_remain_cap == item
    waste = bins_remain_cap - item
    raw_scores = -waste / tau
    raw_scores[~feasible] = -np.inf
    raw_scores[exact_fit] += exact_fit_bonus
    max_score = np.max(raw_scores)
    exp_scores = np.exp(raw_scores - max_score)
    sum_exp = np.sum(exp_scores)
    if sum_exp == 0.0:
        return np.zeros_like(bins_remain_cap, dtype=float)
    return exp_scores / sum_exp
```
