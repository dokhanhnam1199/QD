```python
import numpy as np
from typing import Optional

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0, temperature: float = 1.0, random_state: Optional[int] = None) -> np.ndarray:
    """Return bin selection probabilities via softmax of negative waste, with epsilonâ€‘greedy random exploration and temperature scaling; infeasible bins get zero probability."""
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return np.zeros_like(bins_remain_cap, dtype=float)
    rng = np.random.default_rng(random_state)
    if epsilon > 0.0 and rng.random() < epsilon:
        scores = np.where(feasible, rng.random(bins_remain_cap.shape[0]), -np.inf)
    else:
        waste = bins_remain_cap - item
        scores = np.where(feasible, -waste, -np.inf)
    if temperature <= 0.0:
        temperature = 1.0
    max_score = np.max(scores[feasible])
    exp_scores = np.exp((scores - max_score) / temperature)
    exp_scores[~feasible] = 0.0
    total = exp_scores.sum()
    if total > 0.0:
        return exp_scores / total
    return np.zeros_like(bins_remain_cap, dtype=float)
```
