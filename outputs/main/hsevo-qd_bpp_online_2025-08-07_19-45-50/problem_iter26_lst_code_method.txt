{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1, tau: float = 1.0, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Temperature-scaled softmax with optional epsilon-greedy exploration; returns normalized priorities for feasible bins.\"\"\"\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if rng is None:\n        rng = np.random.default_rng()\n    if rng.random() < epsilon:\n        probs = np.zeros_like(bins_remain_cap, dtype=float)\n        probs[feasible] = 1.0 / np.count_nonzero(feasible)\n        return probs\n    residual = bins_remain_cap.astype(float) - item\n    raw_scores = -residual / tau\n    raw_scores[~feasible] = -np.inf\n    max_score = np.max(raw_scores)\n    exp_scores = np.exp(raw_scores - max_score)\n    sum_exp = np.sum(exp_scores)\n    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                epsilon: float = 0.0,\n                temperature: float = 1.0,\n                rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Softmax over negative waste with temperature, mixed with epsilon\u2011weighted random exploration for feasible bins.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    mask = residual >= 0\n    if not np.any(mask):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    # Deterministic waste\u2011based scores (tighter fit \u2192 higher)\n    det = -residual\n    det[~mask] = -np.inf\n    max_det = det[mask].max()\n    exp_det = np.exp((det - max_det) / max(temperature, 1e-12))\n    exp_det[~mask] = 0.0\n    sum_det = exp_det.sum()\n    det_soft = exp_det / sum_det if sum_det > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n    # Random exploration component\n    if epsilon > 0:\n        rand = rng.random(bins_remain_cap.shape)\n        rand[~mask] = -np.inf\n        max_rand = rand[mask].max()\n        exp_rand = np.exp((rand - max_rand) / max(temperature, 1e-12))\n        exp_rand[~mask] = 0.0\n        sum_rand = exp_rand.sum()\n        rand_soft = exp_rand / sum_rand if sum_rand > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n    else:\n        rand_soft = np.zeros_like(bins_remain_cap, dtype=float)\n    # Weighted mix of deterministic and random scores\n    final = (1 - epsilon) * det_soft + epsilon * rand_soft\n    total = final.sum()\n    if total > 0:\n        final /= total\n    return final\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 1.0, epsilon: float = 0.1, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Hybrid waste\u2011based residual scoring with temperature\u2011scaled softmax and \u03b5\u2011weighted random\u2011logit exploration.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    feasible = bins >= item\n    if not np.any(feasible):\n        return np.full_like(bins, -np.inf, dtype=float)\n    residual = bins - item\n    det_logits = np.where(feasible, -residual, -np.inf)\n    max_det = np.max(det_logits[feasible])\n    det_shifted = (det_logits - max_det) / max(tau, 1e-12)\n    det_exp = np.exp(det_shifted) * feasible\n    det_sum = det_exp.sum()\n    det_softmax = np.where(det_sum > 0, det_exp / det_sum, 0.0)\n    rand_logits = rng.random(bins.shape)\n    rand_logits = np.where(feasible, rand_logits, -np.inf)\n    max_rand = np.max(rand_logits[feasible])\n    rand_shifted = rand_logits - max_rand\n    rand_exp = np.exp(rand_shifted) * feasible\n    rand_sum = rand_exp.sum()\n    rand_softmax = np.where(rand_sum > 0, rand_exp / rand_sum, 0.0)\n    probs = (1.0 - epsilon) * det_softmax + epsilon * rand_softmax\n    return np.where(feasible, probs, -np.inf)\n\n[Heuristics 4th]\n# Heuristic: combine waste minimization, temperature\u2011scaled softmax, \u03b5\u2011uniform mixing, and Gumbel perturbation.\nimport numpy as np\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tau: float = 0.1,\n    epsilon: float = 0.05,\n    rng: np.random.Generator = None,\n) -> np.ndarray:\n    \"\"\"Score bins for online BPP: low waste, softmax with temperature, \u03b5\u2011uniform mix, and Gumbel noise.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    residual = bins_remain_cap - item\n    logits = -residual / tau\n    logits[~feasible] = -np.inf\n    gumbel = -np.log(-np.log(rng.random(logits.shape) + 1e-12) + 1e-12)\n    logits = logits + gumbel\n    max_logit = np.max(logits)\n    exp_shifted = np.exp(logits - max_logit)\n    exp_shifted[~feasible] = 0.0\n    total = exp_shifted.sum()\n    softmax = exp_shifted / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n    uniform = np.zeros_like(bins_remain_cap, dtype=float)\n    uniform[feasible] = 1.0 / feasible.sum()\n    return (1.0 - epsilon) * softmax + epsilon * uniform\n\n[Heuristics 5th]\nimport numpy as np\nfrom typing import Optional\n\n# Priority function for online bin packing: waste + rank + \u03b5\u2011weighted random.\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                *,\n                temperature: float = 1.0,\n                epsilon: float = 0.0,\n                rank_power: float = 1.0,\n                rng: Optional[np.random.Generator] = None) -> np.ndarray:\n    \"\"\"Combine waste, rank weight, and \u03b5\u2011weighted random perturbation; temperature scales waste.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    residual = bins - item\n    feasible = residual >= 0\n    scores = np.full_like(bins, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    waste = -residual[feasible] / max(temperature, 1e-12)\n    feas_res = residual[feasible]\n    sorted_idx = np.argsort(feas_res)\n    rank = np.empty_like(feas_res, dtype=int)\n    rank[sorted_idx] = np.arange(len(feas_res))\n    num_feas = len(feas_res)\n    rank_weight = (num_feas - rank) ** rank_power\n    deterministic = waste + np.log(rank_weight + 1e-12)\n    if epsilon > 0.0:\n        rand = rng.random(num_feas)\n        deterministic = (1 - epsilon) * deterministic + epsilon * rand\n    scores[feasible] = deterministic\n    return scores\n\n[Heuristics 6th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                invalid_penalty: float = -399791891471.3008,\n                k: float = 10.75578991421134,\n                valid_threshold: float = -8.081944853392542,\n                target_ratio: float = 1.8029961731356514,\n                max_priority: float = 5.707291766401017,\n                denominator_offset: float = 9.926378914375567) -> np.ndarray:\n    caps = bins_remain_cap.astype(float)\n    space_left = caps - item\n    valid = space_left >= valid_threshold\n    priorities = np.full_like(space_left, invalid_penalty, dtype=float)\n    if np.any(valid):\n        ratio = space_left[valid] / caps[valid]\n        priorities[valid] = max_priority / (\n            denominator_offset + np.exp(-k * (target_ratio - ratio))\n        )\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                tau: float = 0.5,\n                epsilon: float = 0.0,\n                rng: np.random.Generator | None = None,\n                logistic_k: float = 12.0,\n                logistic_lambda: float = 1.0) -> np.ndarray:\n    \"\"\"\n    Softmax over negative waste plus logistic fill ratio, with optional epsilon exploration.\n    \"\"\"\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n\n    if rng is None:\n        rng = np.random.default_rng()\n    if rng.random() < epsilon:\n        probs = np.zeros_like(bins_remain_cap, dtype=float)\n        probs[feasible] = 1.0 / np.count_nonzero(feasible)\n        return probs\n\n    caps = bins_remain_cap.astype(float)\n    residual = caps - item\n    raw_scores = -residual / tau\n\n    ratio = residual / caps\n    logistic_factor = 1.0 / (1.0 + np.exp(-logistic_k * (1.0 - ratio)))\n    raw_scores += logistic_lambda * logistic_factor\n\n    raw_scores[~feasible] = -np.inf\n\n    max_score = np.max(raw_scores)\n    exp_scores = np.exp(raw_scores - max_score)\n    sum_exp = np.sum(exp_scores)\n    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)\n\n[Heuristics 8th]\nimport numpy as np\nfrom typing import Optional\n\n# Priority function combining deterministic waste and optional epsilon\u2011greedy exploration\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0,\n                random_state: Optional[int] = None) -> np.ndarray:\n    \"\"\"Priority = -waste for feasible bins; optional epsilon\u2011greedy random scores.\"\"\"\n    feasible = bins_remain_cap >= item\n    if epsilon > 0.0:\n        rng = np.random.default_rng(random_state)\n        if rng.random() < epsilon:\n            rand_scores = rng.random(bins_remain_cap.shape[0])\n            return np.where(feasible, rand_scores, -np.inf)\n    waste = bins_remain_cap - item\n    return np.where(feasible, -waste, -np.inf)\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    caps = bins_remain_cap.astype(float)\n    space_left = caps - item\n    valid = space_left >= 0\n    priorities = np.full_like(space_left, -1e9, dtype=float)\n    if np.any(valid):\n        ratio = space_left[valid] / caps[valid]\n        k = 12.0\n        priorities[valid] = 1.0 / (1.0 + np.exp(-k * (1.0 - ratio)))\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\n# Stable softmax priority with optional \u03b5\u2011greedy exploration for online bin packing.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray,\n                tau: float = 0.5, epsilon: float = 0.0,\n                rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Return probability scores for each bin based on remaining capacity, using a temperature\u2011scaled softmax; optionally explore randomly via \u03b5\u2011greedy.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    scores = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return scores\n    if epsilon > 0.0 and rng.random() < epsilon:\n        rand = rng.random(feasible.sum())\n        probs = rand / rand.sum()\n        scores[feasible] = probs\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    raw = -slack / tau\n    max_raw = raw.max()\n    exp_vals = np.exp(raw - max_raw)\n    probs = exp_vals / exp_vals.sum()\n    scores[feasible] = probs\n    return scores\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.01) -> np.ndarray:\n    \"\"\"Exact-fit-first priority with optional epsilon-greedy exploration.\"\"\"\n    # Feasibility mask and deterministic priority (negative waste)\n    feasible = bins_remain_cap >= item\n    deterministic = np.where(feasible, -(bins_remain_cap - item), -np.inf)\n    # With probability epsilon, use random scores for feasible bins\n    if np.random.rand() < epsilon:\n        random_scores = np.random.rand(bins := bins_remain_cap.shape[0])\n        return np.where(feasible, random_scores, -np.inf)\n    return deterministic\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 1.0,\n                epsilon: float = 0.0, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Softmax fit (temp\u202ftau) with epsilon\u2011greedy random exploration.\"\"\"\n    # Combine stable softmax scoring of waste with occasional random scoring.\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    mask = residual >= 0\n    if not np.any(mask):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if epsilon > 0 and rng.random() < epsilon:\n        rand_scores = rng.random(bins_remain_cap.shape[0])\n        rand_scores[~mask] = -np.inf\n        max_rand = rand_scores[mask].max()\n        exp_rand = np.exp(rand_scores - max_rand)\n        exp_rand[~mask] = 0.0\n        total_rand = exp_rand.sum()\n        return exp_rand / total_rand if total_rand > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n\n[Heuristics 13th]\nimport numpy as np\nfrom typing import Optional\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.0,\n    temperature: float = 1.0,\n    random_state: Optional[int] = None,\n) -> np.ndarray:\n    \"\"\"Blend waste\u2011based score, rank weighting, \u03b5\u2011greedy perturbation, and temperature.\"\"\"\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    waste = bins_remain_cap[feasible] - item\n    deterministic = -waste\n    rng = np.random.default_rng(random_state)\n    random_scores = rng.random(waste.shape)\n    mixed = (1.0 - epsilon) * deterministic + epsilon * random_scores\n    order = np.argsort(waste)\n    ranks = np.empty_like(order)\n    ranks[order] = np.arange(waste.size)\n    mixed *= 1.0 / (ranks + 1.0)\n    if temperature != 1.0:\n        mixed = mixed / temperature\n    scores[feasible] = mixed\n    return scores\n\n[Heuristics 14th]\nimport numpy as np\nfrom typing import Optional\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.0,\n    temperature: float = 1.0,\n    random_state: Optional[int] = None,\n) -> np.ndarray:\n    \"\"\"Blend waste\u2011based score, rank weighting, \u03b5\u2011greedy perturbation, and temperature.\"\"\"\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    waste = bins_remain_cap[feasible] - item\n    deterministic = -waste\n    rng = np.random.default_rng(random_state)\n    random_scores = rng.random(waste.shape)\n    mixed = (1.0 - epsilon) * deterministic + epsilon * random_scores\n    order = np.argsort(waste)\n    ranks = np.empty_like(order)\n    ranks[order] = np.arange(waste.size)\n    mixed *= 1.0 / (ranks + 1.0)\n    if temperature != 1.0:\n        mixed = mixed / temperature\n    scores[feasible] = mixed\n    return scores\n\n[Heuristics 15th]\nimport numpy as np\nfrom typing import Optional\n\n# Weighted waste + rank + \u03b5\u2011greedy + softmax\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.0,\n    temperature: float = 1.0,\n    random_state: Optional[int] = None,\n) -> np.ndarray:\n    \"\"\"Combines negative waste, rank weighting, \u03b5\u2011greedy exploration, and temperature\u2011scaled softmax for balanced bin selection.\"\"\"\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    feasible = bins >= item\n    if not np.any(feasible):\n        return np.full_like(bins, -np.inf, dtype=float)\n    rng = np.random.default_rng(random_state)\n    waste = bins[feasible] - item\n    deterministic = -waste\n    order = np.argsort(waste)\n    ranks = np.empty_like(order)\n    ranks[order] = np.arange(waste.size)\n    deterministic *= 1.0 / (ranks + 1.0)\n    random_scores = rng.random(waste.size)\n    mixed = (1.0 - epsilon) * deterministic + epsilon * random_scores\n    mixed_full = np.full_like(bins, -np.inf, dtype=float)\n    mixed_full[feasible] = mixed\n    temp = max(temperature, 1e-12)\n    max_val = np.max(mixed_full[feasible])\n    shifted = mixed_full - max_val\n    exp_vals = np.exp(shifted / temp)\n    probs = exp_vals / exp_vals.sum()\n    return probs\n\n[Heuristics 16th]\nimport numpy as np\nfrom typing import Optional\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.0,\n    temperature: float = 1.0,\n    random_state: Optional[int] = None,\n) -> np.ndarray:\n    \"\"\"Blend waste\u2011based score, rank weighting, \u03b5\u2011greedy perturbation, and temperature.\"\"\"\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    waste = bins_remain_cap[feasible] - item\n    deterministic = -waste\n    rng = np.random.default_rng(random_state)\n    random_scores = rng.random(waste.shape)\n    mixed = (1.0 - epsilon) * deterministic + epsilon * random_scores\n    order = np.argsort(waste)\n    ranks = np.empty_like(order)\n    ranks[order] = np.arange(waste.size)\n    mixed *= 1.0 / (ranks + 1.0)\n    if temperature != 1.0:\n        mixed = mixed / temperature\n    scores[feasible] = mixed\n    return scores\n\n[Heuristics 17th]\nimport numpy as np\nfrom typing import Optional\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.0,\n    temperature: float = 1.0,\n    random_state: Optional[int] = None,\n) -> np.ndarray:\n    \"\"\"Blend waste\u2011based score, rank weighting, \u03b5\u2011greedy perturbation, and temperature.\"\"\"\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    waste = bins_remain_cap[feasible] - item\n    deterministic = -waste\n    rng = np.random.default_rng(random_state)\n    random_scores = rng.random(waste.shape)\n    mixed = (1.0 - epsilon) * deterministic + epsilon * random_scores\n    order = np.argsort(waste)\n    ranks = np.empty_like(order)\n    ranks[order] = np.arange(waste.size)\n    mixed *= 1.0 / (ranks + 1.0)\n    if temperature != 1.0:\n        mixed = mixed / temperature\n    scores[feasible] = mixed\n    return scores\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, rng: np.random.Generator = None,\n                tau: float = 1.0, alpha: float = 1.5, penalty_factor: float = 0.5,\n                noise_base: float = 0.1, risk_factor: float = 0.1) -> np.ndarray:\n    \"\"\"Rank\u2011based adaptive priority for online bin packing.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    feasible = residual >= 0\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    penalty = np.where(feasible, 0.0, (item - bins_remain_cap) * penalty_factor)\n    base_score = -residual - penalty\n    max_residual = np.max(residual[feasible])\n    risk = np.where(feasible, 1 - residual / (max_residual + 1e-12), 0.0)\n    base_score -= risk_factor * risk\n    order = np.argsort(-base_score)\n    rank = np.empty_like(order)\n    rank[order] = np.arange(len(base_score))\n    weight = 1.0 / (rank + 1) ** alpha\n    raw_scores = base_score * weight\n    noise_scale = noise_base * (residual / (max_residual + 1e-12))\n    noise_scale = np.maximum(noise_scale, 0.0)\n    noise = rng.normal(0.0, noise_scale, size=bins_remain_cap.shape)\n    raw_scores += noise\n    max_raw = np.max(raw_scores)\n    exp_scores = np.exp((raw_scores - max_raw) / tau)\n    probs = exp_scores / np.sum(exp_scores)\n    return probs\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, rng: np.random.Generator = None,\n                tau: float = 1.0, alpha: float = 1.5, penalty_factor: float = 0.5,\n                noise_base: float = 0.1, risk_factor: float = 0.1) -> np.ndarray:\n    \"\"\"Rank\u2011based adaptive priority for online bin packing.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    feasible = residual >= 0\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    penalty = np.where(feasible, 0.0, (item - bins_remain_cap) * penalty_factor)\n    base_score = -residual - penalty\n    max_residual = np.max(residual[feasible])\n    risk = np.where(feasible, 1 - residual / (max_residual + 1e-12), 0.0)\n    base_score -= risk_factor * risk\n    order = np.argsort(-base_score)\n    rank = np.empty_like(order)\n    rank[order] = np.arange(len(base_score))\n    weight = 1.0 / (rank + 1) ** alpha\n    raw_scores = base_score * weight\n    noise_scale = noise_base * (residual / (max_residual + 1e-12))\n    noise_scale = np.maximum(noise_scale, 0.0)\n    noise = rng.normal(0.0, noise_scale, size=bins_remain_cap.shape)\n    raw_scores += noise\n    max_raw = np.max(raw_scores)\n    exp_scores = np.exp((raw_scores - max_raw) / tau)\n    probs = exp_scores / np.sum(exp_scores)\n    return probs\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, rng: np.random.Generator = None,\n                tau: float = 1.0, alpha: float = 1.5, penalty_factor: float = 0.5,\n                noise_base: float = 0.1, risk_factor: float = 0.1) -> np.ndarray:\n    \"\"\"Rank\u2011based adaptive priority for online bin packing.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    feasible = residual >= 0\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    penalty = np.where(feasible, 0.0, (item - bins_remain_cap) * penalty_factor)\n    base_score = -residual - penalty\n    max_residual = np.max(residual[feasible])\n    risk = np.where(feasible, 1 - residual / (max_residual + 1e-12), 0.0)\n    base_score -= risk_factor * risk\n    order = np.argsort(-base_score)\n    rank = np.empty_like(order)\n    rank[order] = np.arange(len(base_score))\n    weight = 1.0 / (rank + 1) ** alpha\n    raw_scores = base_score * weight\n    noise_scale = noise_base * (residual / (max_residual + 1e-12))\n    noise_scale = np.maximum(noise_scale, 0.0)\n    noise = rng.normal(0.0, noise_scale, size=bins_remain_cap.shape)\n    raw_scores += noise\n    max_raw = np.max(raw_scores)\n    exp_scores = np.exp((raw_scores - max_raw) / tau)\n    probs = exp_scores / np.sum(exp_scores)\n    return probs\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}