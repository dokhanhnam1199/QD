```python
import numpy as np

def priority_v2(item, bins_remain_cap, rng=None, epsilon=0.05, tau=1.0, rank_weight=0.1):
    """
    Combined softmax with waste rank weighting and epsilon-greedy exploration.
    """
    if rng is None:
        rng = np.random.default_rng()
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if rng.random() < epsilon:
        probs = np.zeros_like(bins_remain_cap, dtype=float)
        probs[feasible] = 1.0 / np.count_nonzero(feasible)
        return probs
    residual = bins_remain_cap.astype(float) - item
    waste = residual
    raw_score = -waste / tau
    waste_feasible = waste[feasible]
    rank_index = np.empty_like(waste, dtype=float)
    rank_index[:] = np.nan
    rank_index[feasible] = np.arange(len(waste_feasible))
    rank_score = (len(waste_feasible) - 1 - rank_index[feasible]) / (len(waste_feasible) - 1 + 1e-8)
    rank_score_full = np.zeros_like(waste, dtype=float)
    rank_score_full[feasible] = rank_score
    raw_score += rank_weight * rank_score_full
    raw_score[~feasible] = -np.inf
    max_score = np.max(raw_score)
    exp_scores = np.exp(raw_score - max_score)
    sum_exp = np.sum(exp_scores)
    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)
```
