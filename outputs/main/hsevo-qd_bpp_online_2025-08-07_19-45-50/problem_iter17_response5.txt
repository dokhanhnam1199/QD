```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float, epsilon: float = 0.1, rng: np.random.Generator = None) -> np.ndarray:
    """Softmax on negative waste with temperature scaling and epsilonâ€‘greedy random choice."""
    if rng is None:
        rng = np.random.default_rng()
    caps = np.asarray(bins_remain_cap, dtype=float)
    feasible = caps >= item
    if not np.any(feasible):
        return np.full(caps.shape, -np.inf, dtype=float)
    if epsilon > 0 and rng.random() < epsilon:
        return np.where(feasible, 1.0 / feasible.sum(), -np.inf)
    waste = caps - item
    det_score = np.where(feasible, -waste, -np.inf)
    max_score = np.max(det_score[feasible])
    scaled = (det_score - max_score) / max(tau, 1e-12)
    exp_vals = np.exp(scaled) * feasible
    sum_exp = exp_vals.sum()
    if sum_exp > 0:
        softmax = exp_vals / sum_exp
    else:
        softmax = np.where(feasible, 1.0 / feasible.sum(), 0.0)
    return np.where(feasible, softmax, -np.inf)
```
