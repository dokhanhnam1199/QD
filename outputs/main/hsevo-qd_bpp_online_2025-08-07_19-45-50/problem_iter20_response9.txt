```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                epsilon: float = 0.0,
                temperature: float = 1.0,
                rng: np.random.Generator = None) -> np.ndarray:
    """Softmax over negative waste with temperature, mixed with epsilon‑weighted random exploration for feasible bins."""
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    mask = residual >= 0
    if not np.any(mask):
        return np.zeros_like(bins_remain_cap, dtype=float)
    # Deterministic waste‑based scores (tighter fit → higher)
    det = -residual
    det[~mask] = -np.inf
    max_det = det[mask].max()
    exp_det = np.exp((det - max_det) / max(temperature, 1e-12))
    exp_det[~mask] = 0.0
    sum_det = exp_det.sum()
    det_soft = exp_det / sum_det if sum_det > 0 else np.zeros_like(bins_remain_cap, dtype=float)
    # Random exploration component
    if epsilon > 0:
        rand = rng.random(bins_remain_cap.shape)
        rand[~mask] = -np.inf
        max_rand = rand[mask].max()
        exp_rand = np.exp((rand - max_rand) / max(temperature, 1e-12))
        exp_rand[~mask] = 0.0
        sum_rand = exp_rand.sum()
        rand_soft = exp_rand / sum_rand if sum_rand > 0 else np.zeros_like(bins_remain_cap, dtype=float)
    else:
        rand_soft = np.zeros_like(bins_remain_cap, dtype=float)
    # Weighted mix of deterministic and random scores
    final = (1 - epsilon) * det_soft + epsilon * rand_soft
    total = final.sum()
    if total > 0:
        final /= total
    return final
```
