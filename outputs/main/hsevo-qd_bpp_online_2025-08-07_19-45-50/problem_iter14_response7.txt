```python
import numpy as np
from typing import Optional

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 0.0,
    tau: float = 1.0,
    rng: Optional[np.random.Generator] = None,
) -> np.ndarray:
    """
    Generates a probability distribution over bins based on remaining capacity,
    using a temperature‑scaled softmax prioritizing low waste,
    with optional epsilon‑greedy random exploration.
    """
    if rng is None:
        rng = np.random.default_rng()

    # Feasibility mask: bin can hold the item
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)

    # Optional epsilon‑greedy exploration
    if rng.random() < epsilon:
        rand_vals = rng.random(bins_remain_cap.size)
        probs = np.where(feasible, rand_vals, 0.0)
        total = probs.sum()
        if total > 0:
            probs /= total
        return probs

    # Temperature‑scaled softmax favoring low waste (high remaining capacity)
    residual = bins_remain_cap.astype(float) - item
    raw_scores = np.where(feasible, -residual / tau, -np.inf)
    max_score = raw_scores.max()
    exp_scores = np.exp(raw_scores - max_score)
    sum_exp = exp_scores.sum()
    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)
```
