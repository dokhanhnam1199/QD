```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                tau: float = 1.0,
                epsilon: float = 0.0,
                rng: np.random.Generator = None) -> np.ndarray:
    """Softmax priority with temperature and optional epsilon‑greedy exploration."""
    # feasible bins: enough remaining capacity for the item
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if rng is None:
        rng = np.random.default_rng()
    # epsilon‑greedy: uniform random scores over feasible bins
    if rng.random() < epsilon:
        rand = rng.random(bins_remain_cap.shape[0])
        rand[~feasible] = 0.0
        s = rand.sum()
        return rand / s if s > 0 else np.full_like(bins_remain_cap, -np.inf, dtype=float)
    # temperature‑scaled softmax on negative waste (higher score → less waste)
    scores = np.where(feasible, -(bins_remain_cap - item) / tau, -np.inf)
    max_score = np.max(scores[feasible])
    exp_scores = np.exp(scores - max_score)          # infeasible become 0
    total = exp_scores.sum()
    return exp_scores / total if total > 0 else np.full_like(bins_remain_cap, -np.inf, dtype=float)
```
