```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                tau: float = 0.1,
                epsilon: float = 0.05,
                rng: np.random.Generator = None) -> np.ndarray:
    """Temperature‑scaled softmax of negative waste, with optional rank weighting, Gumbel perturbation, and ε‑greedy uniform exploration for online bin packing."""
    if rng is None:
        rng = np.random.default_rng()
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    ranks = np.empty_like(waste)
    ranks[feasible] = np.argsort(waste[feasible])
    rank_weight = 1.0 / (ranks[feasible] + 1.0)
    logits = -waste / tau
    logits[feasible] *= rank_weight
    gumbel = -np.log(-np.log(rng.random(logits.shape) + 1e-12) + 1e-12)
    logits += gumbel
    logits[~feasible] = -np.inf
    max_logit = np.max(logits)
    exp_shifted = np.exp(logits - max_logit)
    exp_shifted[~feasible] = 0.0
    total = exp_shifted.sum()
    softmax = exp_shifted / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)
    uniform = np.zeros_like(bins_remain_cap, dtype=float)
    uniform[feasible] = 1.0 / feasible.sum()
    return (1.0 - epsilon) * softmax + epsilon * uniform
```
