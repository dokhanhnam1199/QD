```python
import numpy as np
from typing import Optional

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0, tau: float = 1.0, rng: Optional[np.random.Generator] = None) -> np.ndarray:
    """Softmax priority with temperature scaling and optional Îµâ€‘exploration, returning a probability vector over feasible bins."""
    if rng is None:
        rng = np.random.default_rng()
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if epsilon > 0.0 and rng.random() < epsilon:
        probs = np.zeros_like= np.zeros_like(bins_remain_cap, dtype=float)
        probs[feasible] = 1.0 / feasible.sum()
        return probs
    residual = bins_remain_cap - item
    raw_scores = np.where(feasible, -residual / max(tau, 1e-12), -np.inf)
    max_score = raw_scores.max()
    exp_scores = np.exp(raw_scores - max_score)
    sum_exp = exp_scores.sum()
    if sum_exp == 0.0:
        return np.zeros_like(bins_remain_cap, dtype=float)
    return exp_scores / sum_exp
```
