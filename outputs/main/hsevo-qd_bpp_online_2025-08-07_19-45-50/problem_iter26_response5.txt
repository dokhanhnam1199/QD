```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, rng: np.random.Generator = None,
                temperature: float = 0.5, invalid_penalty: float = -1e9,
                k: float = 10.0, target_ratio: float = 1.8,
                max_priority: float = 5.7, denominator_offset: float = 9.9) -> np.ndarray:
    """Compute a logistic‐based priority, add Gumbel noise for exploration, then apply temperature‑scaled softmax; invalid bins receive a large negative penalty."""
    if rng is None:
        rng = np.random.default_rng()
    caps = bins_remain_cap.astype(float)
    space_left = caps - item
    valid = space_left >= 0
    scores = np.full_like(caps, invalid_penalty, dtype=float)
    if np.any(valid):
        ratio = space_left[valid] / caps[valid]
        scores[valid] = max_priority / (denominator_offset + np.exp(-k * (target_ratio - ratio)))
        scores[valid] += rng.gumbel(0.0, temperature, size=valid.sum())
        max_score = np.max(scores)
        exp_scores = np.exp((scores - max_score) / temperature)
        probs = exp_scores / np.sum(exp_scores)
        return probs
    return np.full_like(bins_remain_cap, 0.0, dtype=float)
```
