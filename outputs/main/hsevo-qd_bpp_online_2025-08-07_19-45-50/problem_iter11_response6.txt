```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0, tau: float = 1.0, rng: np.random.Generator = None) -> np.ndarray:
    """Softmax priority with epsilonâ€‘greedy exploration and temperature scaling. Tighter fits receive higher scores; infeasible bins are masked."""
    residual = bins_remain_cap - item
    mask = residual >= 0
    if not np.any(mask):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if rng is None:
        rng = np.random.default_rng()
    if epsilon > 0 and rng.random() < epsilon:
        raw = rng.random(bins_remain_cap.shape[0])
    else:
        raw = -residual
    raw[~mask] = -np.inf
    tau = max(tau, 1e-12)
    max_raw = raw[mask].max()
    exp_scores = np.exp((raw - max_raw) / tau)
    exp_scores[~mask] = 0.0
    total = exp_scores.sum()
    if total == 0:
        return np.zeros_like(bins_remain_cap, dtype=float)
    return exp_scores / total
```
