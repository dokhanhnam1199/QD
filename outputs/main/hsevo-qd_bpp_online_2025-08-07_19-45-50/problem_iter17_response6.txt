```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                temperature: float = 1.0, epsilon: float = 0.0,
                rng: np.random.Generator = None) -> np.ndarray:
    """
    Returns probability distribution over bins using temperatureâ€‘scaled softmax of negative waste,
    with optional epsilonâ€‘greedy exploration.
    """
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    feasible = residual >= 0
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if epsilon > 0 and rng.random() < epsilon:
        rand_vals = rng.random(bins_remain_cap.shape[0])
        scores = np.where(feasible, rand_vals, 0.0)
        return scores / scores.sum()
    raw = -residual
    raw[~feasible] = -np.inf
    scaled = raw / max(temperature, 1e-12)
    max_score = scaled[feasible].max()
    exp_scores = np.exp(scaled - max_score)
    exp_scores[~feasible] = 0.0
    return exp_scores / exp_scores.sum()
```
