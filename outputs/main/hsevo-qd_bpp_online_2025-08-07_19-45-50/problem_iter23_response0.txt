```python
import numpy as np
from typing import Optional

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                rng: Optional[np.random.Generator] = None,
                epsilon: float = 0.0, tau: float = 1.0,
                logistic_factor: float = 0.0) -> np.ndarray:
    """
    Combines waste, logistic fill ratio, softmax, epsilon-greedy.
    Returns probability distribution over feasible bins.
    """
    # Feasibility mask
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)

    # Prepare RNG
    if rng is None:
        rng = np.random.default_rng()

    # Epsilon‑greedy exploration
    if rng.random() < epsilon:
        probs = np.zeros_like(bins_remain_cap, dtype=float)
        probs[feasible] = 1.0 / np.count_nonzero(feasible)
        return probs

    # Base score: negative waste (more filled bins are better)
    waste = bins_remain_cap - item
    base_score = -waste

    # Optional logistic fill ratio term
    if logistic_factor > 0.0:
        # Fill ratio (unused space over total capacity)
        fill_ratio = waste / bins_remain_cap
        # Logistic transformation to accentuate good fits
        log_term = logistic_factor / (1.0 + np.exp(-fill_ratio))
        base_score += log_term

    # Penalise infeasible bins
    base_score[~feasible] = -np.inf

    # Temperature‑scaled softmax with log‑sum‑exp stability
    max_score = np.max(base_score)
    exp_scores = np.exp((base_score - max_score) / tau)
    exp_scores[~feasible] = 0.0
    total = np.sum(exp_scores)
    return exp_scores / total if total > 0 else np.zeros_like(exp_scores)
```
