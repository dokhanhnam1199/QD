import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    tau: float = 9.867498128056903,
    epsilon: float = 0.8124430118013559,
    epsilon_threshold: float = 0.28504511419272227,
    rng: np.random.Generator = None,
) -> np.ndarray:
    """Softmax with temperature and optional epsilonâ€‘greedy exploration for online BPP."""
    if rng is None:
        rng = np.random.default_rng()
    scores = np.zeros_like(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return scores
    if epsilon > epsilon_threshold and rng.random() < epsilon:
        rand_vals = rng.random(feasible.sum())
        probs = rand_vals / rand_vals.sum()
        scores[feasible] = probs
    else:
        slack = bins_remain_cap[feasible] - item
        raw = -slack / tau
        max_raw = np.max(raw)
        exp_vals = np.exp(raw - max_raw)
        probs = exp_vals / exp_vals.sum()
        scores[feasible] = probs
    return scores
