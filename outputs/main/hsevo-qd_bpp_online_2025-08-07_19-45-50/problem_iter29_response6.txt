```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                temperature: float = 1.0,
                epsilon: float = 0.0,
                rng: np.random.Generator | None = None,
                valid_threshold: float = -1e-8,
                target_ratio: float = 0.5,
                k: float = 10.0,
                max_priority: float = 1.0,
                denominator_offset: float = 1.0) -> np.ndarray:
    """Combines logistic ratio‑based priority with temperature‑scaled softmax and optional ε‑greedy exploration."""
    if rng is None:
        rng = np.random.default_rng()
    caps = bins_remain_cap.astype(float)
    space_left = caps - item
    feasible = space_left >= valid_threshold
    priorities = np.full_like(caps, -np.inf, dtype=float)
    if not np.any(feasible):
        return np.zeros_like(caps, dtype=float)
    ratio = space_left[feasible] / caps[feasible]
    logistic = max_priority / (denominator_offset + np.exp(-k * (target_ratio - ratio)))
    priorities[feasible] = logistic
    if epsilon > 0.0 and rng.random() < epsilon:
        rand_scores = rng.random(caps.shape)
        rand_scores = np.where(feasible, rand_scores, -np.inf)
        max_rand = np.max(rand_scores[feasible])
        exp_rand = np.exp(rand_scores - max_rand)
        exp_rand = np.where(feasible, exp_rand, 0.0)
        return exp_rand / exp_rand.sum()
    scaled = priorities / max(temperature, 1e-12)
    max_scaled = np.max(scaled[feasible])
    exp_scores = np.exp(scaled - max_scaled)
    exp_scores = np.where(feasible, exp_scores, 0.0)
    return exp_scores / exp_scores.sum()
```
