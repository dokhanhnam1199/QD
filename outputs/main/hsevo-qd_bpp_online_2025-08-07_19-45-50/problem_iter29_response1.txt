```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, temperature: float = 1.0, epsilon: float = 0.0, rng: np.random.Generator | None = None) -> np.ndarray:
    """Softmax priority with epsilonâ€‘greedy exploration, temperature scaling, feasibility masking."""
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    feasible = residual >= 0
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if epsilon > 0.0 and rng.random() < epsilon:
        rand_vals = rng.random(bins_remain_cap.shape)
        scores = np.where(feasible, rand_vals, 0.0)
        total = scores.sum()
        return scores / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)
    temp = max(temperature, 1e-12)
    raw = np.where(feasible, -residual / temp, -np.inf)
    max_raw = np.max(raw)
    exp_raw = np.exp(raw - max_raw)
    sum_exp = exp_raw.sum()
    return exp_raw / sum_exp if sum_exp > 0 else np.zeros_like(bins_remain_cap, dtype=float)
```
