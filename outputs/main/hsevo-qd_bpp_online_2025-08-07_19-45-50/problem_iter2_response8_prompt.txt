{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    exact_mask = bins_remain_cap == item\n    valid_mask = bins_remain_cap >= item\n    priorities[exact_mask] = 1e12\n    valid_not_exact = valid_mask & ~exact_mask\n    slack = bins_remain_cap[valid_not_exact] - item\n    priorities[valid_not_exact] = -slack\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    feasible = bins_remain_cap >= item\n    if np.random.rand() < epsilon:\n        random_scores = np.random.rand(bins_remain_cap.shape[0])\n        return np.where(feasible, random_scores, -np.inf)\n    waste = bins_remain_cap - item\n    return np.where(feasible, -waste, -np.inf)\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see the best heuristic has a clear docstring, explicit feasibility mask, deterministic `-residual` priorities and safe `-inf` for infeasible bins; the worst adds stochastic `epsilon` exploration, returns random scores, lacks documentation, and introduces nondeterminism.  \n(Second best) vs (second worst), the second\u2011best uses a concise `np.where` to compute the same deterministic priorities, while the second\u2011worst inherits the same random\u2011epsilon logic as the worst.  \nComparing (1st) vs (2nd), both produce identical priority vectors; the 1st is more verbose with explicit mask and `np.full`, includes documentation, while the 2nd is a one\u2011liner but equally clear and efficient.  \n(3rd) vs (4th), the 3rd wraps the simple priority in a softmax with scaling (`tau`), exponentials and normalization\u2014unnecessary overhead for a raw priority function\u2014whereas the 4th is the simple deterministic `np,` approach identical to the 2nd.  \nComparing (second worst) vs (worst), they are functionally identical random\u2011epsilon implementations; the ranking difference is arbitrary, but both share the same drawbacks.  \nOverall: the top heuristics prioritize simplicity, deterministic vectorized computation, and proper documentation; mid\u2011rank duplicates add no value; softmax variants introduce needless complexity; random\u2011epsilon variants sacrifice reproducibility and performance.\n- \n- **Keywords**: deterministic, vectorized, succinct, modular, reproducible.  \n- **Advice**: Redefine the self\u2011reflection to build heuristics that are fully vectorized, modular with clear APIs, succinctly coded, and comprehensively documented and tested.  \n- **Avoid**: Implicit randomness (e.g., softmax without purpose), hidden side\u2011effects, verbose loops, undocumented assumptions.  \n- **Explanation**: Determinism and vectorization give speed and reproducibility; succinct, modular code eases maintenance; thorough documentation prevents misuse and supports the design of robust heuristics.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}