```python
import numpy as np
from typing import Optional

# Weighted waste + rank + ε‑greedy + softmax
def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 0.0,
    temperature: float = 1.0,
    random_state: Optional[int] = None,
) -> np.ndarray:
    """Combines negative waste, rank weighting, ε‑greedy exploration, and temperature‑scaled softmax for balanced bin selection."""
    bins = np.asarray(bins_remain_cap, dtype=float)
    feasible = bins >= item
    if not np.any(feasible):
        return np.full_like(bins, -np.inf, dtype=float)
    rng = np.random.default_rng(random_state)
    waste = bins[feasible] - item
    deterministic = -waste
    order = np.argsort(waste)
    ranks = np.empty_like(order)
    ranks[order] = np.arange(waste.size)
    deterministic *= 1.0 / (ranks + 1.0)
    random_scores = rng.random(waste.size)
    mixed = (1.0 - epsilon) * deterministic + epsilon * random_scores
    mixed_full = np.full_like(bins, -np.inf, dtype=float)
    mixed_full[feasible] = mixed
    temp = max(temperature, 1e-12)
    max_val = np.max(mixed_full[feasible])
    shifted = mixed_full - max_val
    exp_vals = np.exp(shifted / temp)
    probs = exp_vals / exp_vals.sum()
    return probs
```
