```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 1.0, epsilon: float = 0.0, rng: np.random.Generator = None) -> np.ndarray:
    """Temperature‑scaled softmax with ε‑greedy uniform exploration and optional Gumbel noise for calibrated stochasticity."""
    if rng is None:
        rng = np.random.default_rng()
    bins = np.asarray(bins_remain_cap, dtype=float)
    feasible = bins >= item
    if not np.any(feasible):
        return np.zeros_like(bins)
    if rng.random() < epsilon:
        probs = np.zeros_like(bins)
        probs[feasible] = 1.0 / np.count_nonzero(feasible)
        return probs
    residual = bins - item
    raw_scores = -residual / tau
    raw_scores[~feasible] = -np.inf
    gumbel_noise = rng.gumbel(loc=0.0, scale=1.0, size=np.count_nonzero(feasible))
    raw_scores[feasible] += gumbel_noise
    max_score = np.max(raw_scores[feasible])
    raw_scores -= max_score
    exp_scores = np.exp(raw_scores)
    sum_exp = np.sum(exp_scores)
    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)
```
