```python
import numpy as np

# Combined softmax, ε‑greedy, slack penalty, and Gumbel exploration.
def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                tau: float = 0.5,
                epsilon: float = 0.0,
                penalty_factor: float = 0.0,
                gumbel_scale: float = 0.0,
                rng: np.random.Generator = None) -> np.ndarray:
    """Softmax priority using slack, temperature, ε‑greedy, slack penalty, and Gumbel noise."""
    if rng is None:
        rng = np.random.default_rng()
    scores = np.zeros_like(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return scores
    if epsilon > 0.0 and rng.random() < epsilon:
        probs = np.full(feasible.sum(), 1.0 / feasible.sum(), dtype=float)
        scores[feasible] = probs
        return scores
    slack = bins_remain_cap[feasible] - item
    penalty = penalty_factor * slack ** 2
    base = -slack - penalty
    if gumbel_scale > 0.0:
        u = rng.random(base.shape)
        gumbel = -np.log(-np.log(u)) * gumbel_scale
        base = base + gumbel
    raw = base / tau
    max_raw = raw.max()
    exp_vals = np.exp(raw - max_raw)
    probs = exp_vals / exp_vals.sum()
    scores[feasible] = probs
    return scores
```
