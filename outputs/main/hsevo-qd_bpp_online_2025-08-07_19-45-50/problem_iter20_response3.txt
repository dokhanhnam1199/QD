```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                epsilon: float = 0.1,
                temperature: float = 0.5,
                k: float = 10.0,
                beta: float = 0.5,
                rng: np.random.Generator = None) -> np.ndarray:
    """Combine waste and logistic fit scores, blend with random, and softmax."""
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    feasible = residual >= 0
    if not feasible.any():
        return np.zeros_like(bins_remain_cap, dtype=float)
    # Linear slack (1‑ratio) and logistic transformation of slack
    ratio = residual[feasible] / bins_remain_cap[feasible]
    slack = 1.0 - ratio                     # higher = less waste
    logistic = 1.0 / (1.0 + np.exp(-k * slack))
    deterministic = beta * slack + (1.0 - beta) * logistic
    # ε‑mixing with uniform random perturbation
    random = rng.random(deterministic.shape)
    mixed = (1.0 - epsilon) * deterministic + epsilon * random
    # Assemble full score vector (infeasible bins get -inf for safe softmax)
    scores = np.full_like(bins_remain_cap, -np, dtype=float)
    scores[feasible] = mixed
    # Stable softmax with temperature scaling
    max_score = np.max(scores[feasible])
    exp_vals = np.exp((scores - max_score) / max(temperature, 1e-8))
    exp_vals[~feasible] = 0.0
    probs = exp_vals / exp_vals.sum()
    return probs
```
