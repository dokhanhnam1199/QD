```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0, tau: float = 1.0, rng: np.random.Generator = None) -> np.ndarray:
    """
    Exact‑fit priority blended with epsilon‑greedy softmax exploration.
    """
    if rng is None:
        rng = np.random.default_rng()
    feasible = bins_remain_cap >= item
    if not feasible:  # type: ignore[truthy-bool]
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    waste = bins_remain_cap[feasible] - item
    det_logits = -waste / max(tau, 1e-12)
    max_logit = det_logits.max()
    det_exp = np.exp(det_logits - max_logit)
    det_probs = det_exp / det_exp.sum()
    rand_logits = rng.random(det_logits.shape)
    max_rand = rand_logits.max()
    rand_exp = np.exp(rand_logits - max_rand)
    rand_probs = rand_exp / rand_exp.sum()
    final_probs = (1 - epsilon) * det_probs + epsilon * rand_probs
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    scores[feasible] = final_probs
    return scores
```
