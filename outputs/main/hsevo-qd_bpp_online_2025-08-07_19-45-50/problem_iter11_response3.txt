```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, *, tau: float = 0.5, epsilon: float = 0.0, rng: np.random.Generator = None) -> np.ndarray:
    """Softmax over negative slack with temperature tau, with epsilonâ€‘greedy random exploration. Returns probability for each feasible bin, zero otherwise."""
    if rng is None:
        rng = np.random.default_rng()
    mask = bins_remain_cap >= item
    if not np.any(mask):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if epsilon > 0.0 and rng.random() < epsilon:
        rand_scores = rng.random(bins_remain_cap.shape)
        rand_scores[~mask] = -np.inf
        max_score = np.max(rand_scores[mask])
        exp_vals = np.exp(rand_scores - max_score)
        total = exp_vals.sum()
        priorities = np.zeros_like(bins_remain_cap, dtype=float)
        if total > 0:
            priorities[mask] = exp_vals[mask] / total
        return priorities
    slack = bins_remain_cap[mask] - item
    scores = -slack / tau
    max_score = np.max(scores)
    exp_vals = np.exp(scores - max_score)
    total = exp_vals.sum()
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    if total > 0:
        priorities[mask] = exp_vals / total
    return priorities
```
