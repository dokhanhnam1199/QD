{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Temperature-scaled softmax with optional epsilon-greedy exploration; returns normalized priorities for feasible bins.\"\"\"\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if rng is None:\n        rng = np.random.default_rng()\n    if rng.random() < epsilon:\n        probs = np.zeros_like(bins_remain_cap, dtype=float)\n        probs[feasible] = 1.0 / np.count_nonzero(feasible)\n        return probs\n    residual = bins_remain_cap.astype(float) - item\n    raw_scores = -residual / tau\n    raw_scores[~feasible] = -np.inf\n    max_score = np.max(raw_scores)\n    exp_scores = np.exp(raw_scores - max_score)\n    sum_exp = np.sum(exp_scores)\n    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    caps = bins_remain_cap.astype(float)\n    space_left = caps - item\n    valid = space_left >= 0\n    priorities = np.full_like(space_left, -1e9, dtype=float)\n    if np.any(valid):\n        ratio = space_left[valid] / caps[valid]\n        k = 12.0\n        priorities[valid] = 1.0 / (1.0 + np.exp(-k * (1.0 - ratio)))\n    return priorities\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that heuristic\u202f1 provides a complete, numerically\u2011stable softmax with epsilon\u2011greedy exploration and explicit handling of infeasible bins, while heuristic\u202f20 is incomplete \u2013 it only defines a random branch, lacks a deterministic return, misuses `-inf`, and can return `None`.  \nComparing (second best) vs (second worst), we see heuristic\u202f2 implements a robust softmax over feasible bins and correctly returns zeros for infeasibility, whereas heuristic\u202f19 suffers the same omission as 20: no deterministic branch and a missing return, making it non\u2011functional.  \nComparing (1st) vs (2nd), both use softmax of negative waste; heuristic\u202f1 includes a default `\u03b5=0.1` and computes scores for all bins with `-inf` for infeasible ones, while heuristic\u202f2 isolates the feasible subset, defaults `\u03b5=0.\u202f0` and uses a sharper `\u03c4=0.5`, yielding a leaner implementation but fewer features.  \nComparing (3rd) vs (4th), heuristic\u202f3 simply returns linear negative waste (no normalization), whereas heuristic\u202f4 applies a sigmoid to the fill\u2011ratio (`k=12`), providing a non\u2011linear ranking but still no probability distribution; both ignore exploration and temperature.  \nComparing (second worst) vs (worst), heuristics\u202f19 and\u202f20 are identical copies with the same bug: they only handle the \u03b5\u2011branch and omit a return for the normal softmax case, so they are equally broken.  \nOverall, the top heuristics prioritize numerical stability, clear infeasibility handling, optional exploration, and return a proper probability distribution; mid\u2011tier heuristics vary in sophistication but often lack normalization; the bottom heuristics contain critical logical gaps and are unusable.\n- \n- **Keywords**: softmax, numerical stability, infeasibility masking, \u03b5\u2011exploration, defined distribution, concise code, documentation  \n- **Advice**: Use a stable softmax, explicitly mask infeasible options, add optional \u03b5\u2011exploration, always return a full probability vector, keep code concise, avoid duplicate logic, and document default parameters.  \n- **Avoid**: deterministic behavior, excessive brevity, full vectorization, needless softmax or stochasticity unless explicitly required.  \n- **Explanation**: Non\u2011determinism preserves exploration; controlled stochasticity improves robustness, while a stable softmax guarantees numerical safety and a usable probability vector.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}