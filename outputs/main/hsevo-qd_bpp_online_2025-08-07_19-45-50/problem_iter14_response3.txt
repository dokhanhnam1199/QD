```python
import numpy as np
from typing import Optional

def priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 0.5, epsilon: float = 0.0, rng: Optional[np.random.Generator] = None) -> np.ndarray:
    """Return probability scores for each bin using temperature‑scaled softmax and optional ε‑greedy exploration. Infeasible bins get zero probability; distribution sums to one over feasible bins."""
    if rng is None:
        rng = np.random.default_rng()
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if epsilon > 0.0 and rng.random() < epsilon:
        probs = np.zeros_like(bins_remain_cap, dtype=float)
        probs[feasible] = 1.0 / feasible.sum()
        return probs
    residual = bins_remain_cap[feasible] - item
    raw = -residual / max(tau, np.finfo(float).eps)
    max_raw = raw.max()
    exp_vals = np.exp(raw - max_raw)
    probs = np.zeros_like(bins_remain_cap, dtype=float)
    probs[feasible] = exp_vals / exp_vals.sum()
    return probs
```
