```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 1.0, epsilon: float = 0.0, rng: np.random.Generator = None) -> np.ndarray:
    """Temperature‑scaled softmax over negative waste blended with ε‑greedy random scores; infeasible bins get -inf."""
    if rng is None:
        rng = np.random.default_rng()
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    det_score = np.where(feasible, -(bins_remain_cap - item), -np.inf)
    max_score = np.max(det_score[feasible])
    shifted = (det_score - max_score) / max(tau, 1e-12)
    exp_shifted = np.exp(shifted) * feasible
    sum_exp = exp_shifted.sum()
    softmax = exp_shifted / sum_exp
    rand_vals = rng.random(bins_remain_cap.shape) * feasible
    sum_rand = rand_vals.sum()
    rand_dist = rand_vals / sum_rand if sum_rand > 0 else np.zeros_like(bins_remain_cap, dtype=float)
    combined = (1 - epsilon) * softmax + epsilon * rand_dist
    return np.where(feasible, combined, -np.inf)
```
