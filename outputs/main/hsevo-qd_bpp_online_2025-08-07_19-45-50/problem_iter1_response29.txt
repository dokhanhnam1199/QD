```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    scores = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if np.any(feasible):
        slack = bins_remain_cap[feasible] - item
        scores[feasible] = -slack
        tau = 0.5
        scaled = scores / tau
        max_score = np.max(scaled[feasible])
        exp_vals = np.exp(scaled - max_score)
        priorities = exp_vals / exp_vals.sum()
    else:
        priorities = np.zeros_like(bins_remain_cap, dtype=float)
    return priorities
```
