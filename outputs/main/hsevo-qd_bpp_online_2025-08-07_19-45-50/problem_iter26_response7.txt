```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0, temperature: float = 1.0, gumbel_scale: float = 0.0, random_state: int = None) -> np.ndarray:
    """Score bins by negative waste; optional epsilonâ€‘greedy uniform or Gumbel noise for exploration."""
    rng = np.random.default_rng(random_state)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    waste = bins_remain_cap - item
    base_score = -waste
    if gumbel_scale > 0.0:
        U = rng.random(bins_remain_cap.shape)
        gumbel_noise = -np.log(-np.log(U)) * gumbel_scale
        base_score = base_score + epsilon
    if rng.random() < epsilon:
        rand_scores = rng.random(bins_remain_cap.shape)
        return np.where(feasible, rand_scores, -np.inf)
    if temperature != 1.0:
        base_score = base_score / temperature
    return np.where(feasible, base_score, -np.inf)
```
