```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float=1.0, epsilon: float=0.0, risk_factor: float=0.1, noise_base: float=0.1, rng: np.random.Generator=None) -> np.ndarray:
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if rng is None:
        rng = np.random.default_rng()
    if rng.random() < epsilon:
        rand = rng.random(bins_remain_cap.shape[0])
        rand[~feasible] = 0.0
        s = rand.sum()
        return rand / s if s > 0 else np.full_like(bins_remain_cap, -np.inf, dtype=float)
    residual = bins_remain_cap - item
    base_score = -residual / tau
    max_residual = np.max(residual[feasible])
    eps = 1e-12
    risk = 1 - residual / (max_residual + eps)
    base_score -= risk_factor * risk
    noise_scale = np.where(feasible, noise_base * residual / (max_residual + eps), 0.0)
    noise = rng.normal(0.0, noise_scale)
    raw_scores = base_score + noise
    raw_scores[~feasible] = -np.inf
    max_score = np.max(raw_scores[feasible])
    exp_scores = np.exp(raw_scores - max_score)
    total = exp_scores.sum()
    return exp_scores / total if total > 0 else np.full_like(bins_remain_cap, -np.inf, dtype=float)
```
