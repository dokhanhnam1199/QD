```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0, tau: float = 1.0, gumbel_scale: float = 0.0, rng: np.random.Generator = None) -> np.ndarray:
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if rng is None:
        rng = np.random.default_rng()
    if epsilon > 0.0 and rng.random() < epsilon:
        probs = np.zeros_like(bins_remain_cap, dtype=float)
        probs[feasible] = 1.0 / np.count_nonzero(feasible)
        return probs
    residual = bins_remain_cap.astype(float) - item
    raw_scores = -residual / tau
    if gumbel_scale > 0.0:
        noise = rng.gumbel(loc=0.0, scale=gumbel_scale, size=feasible.sum())
        raw_scores[feasible] = raw_scores[feasible] + noise
    raw_scores[~feasible] = -np.inf
    max_score = np.max(raw_scores[feasible])
    exp_scores = np.exp(raw_scores - max_score)
    sum_exp = np.sum(exp_scores)
    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(bins_remain_cap, dtype=float)
```
