{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    left = bins_remain_cap - item\n    priorities = np.where(left >= 0, -left, -np.inf)\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords**: deterministic, vectorized, succinct, modular, reproducible.  \n- **Advice**: Redefine the self\u2011reflection to build heuristics that are fully vectorized, modular with clear APIs, succinctly coded, and comprehensively documented and tested.  \n- **Avoid**: Implicit randomness (e.g., softmax without purpose), hidden side\u2011effects, verbose loops, undocumented assumptions.  \n- **Explanation**: Determinism and vectorization give speed and reproducibility; succinct, modular code eases maintenance; thorough documentation prevents misuse and supports the design of robust heuristics.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}