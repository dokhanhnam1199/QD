```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                tau: float = 1.0,
                epsilon: float = 0.1,
                rng: np.random.Generator = None) -> np.ndarray:
    """
    Temperature-scaled softmax with epsilon-greedy exploration over feasible bins; returns probability vector.
    """
    if rng is None:
        rng = np.random.default_rng()
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    det_score = np.where(feasible, -(bins_remain_cap - item), -np.inf)
    max_score = np.max(det_score[feasible])
    shifted = (det_score - max_score) / max(tau, 1e-12)
    exp_shifted = np.exp(shifted) * feasible
    sum_exp = exp_shifted.sum()
    if sum_exp > 0:
        softmax = exp_shifted / sum_exp
    else:
        max_mask = (det_score == max_score) & feasible
        count_max = max_mask.sum()
        softmax = np.where(max_mask, 1.0 / count_max, 0.0)
    rand_vals = rng.random(bins_remain_cap.shape) * feasible
    sum_rand = rand_vals.sum()
    if sum_rand > 0:
        rand_dist = rand_vals / sum_rand
    else:
        rand_dist = np.zeros_like(bins_remain_cap, dtype=float)
    combined = (1.0 - epsilon) * softmax + epsilon * rand_dist
    return np.where(feasible, combined, -np.inf)
```
