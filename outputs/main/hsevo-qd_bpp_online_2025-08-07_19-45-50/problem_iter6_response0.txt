```python
import numpy as np

_GLOBAL_RNG = np.random.default_rng(123456)  # reproducible RNG

_DEFAULT_TEMPERATURE = 0.1
_DEFAULT_EPSILON = 0.05  # small exploration probability

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute a numerically stable priority distribution over bins for an incoming item.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of each bin.

    Returns
    -------
    np.ndarray
        Array of the same shape as ``bins_remain_cap`` containing non‑negative
        priorities that sum to one over feasible bins. Infeasible bins receive zero.
    """
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if _DEFAULT_EPSILON > 0.0 and _GLOBAL_RNG.random() < _DEFAULT_EPSILON:
        probs = np.zeros_like(bins_remain_cap, dtype=float)
        probs[feasible] = 1.0 / feasible.sum()
        return probs
    residual = bins_remain_cap[feasible] - item
    temperature = max(_DEFAULT_TEMPERATURE, 1e-12)
    logits = -residual / temperature
    max_logit = np.max(logits)
    exp_shifted = np.exp(logits - max_logit)
    softmax = exp_shifted / np.sum(exp_shifted)
    probs = np.zeros_like(bins_remain_cap, dtype=float)
    probs[feasible] = softmax
    return probs
```
