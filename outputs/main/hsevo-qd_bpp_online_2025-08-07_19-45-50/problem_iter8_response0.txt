```python
import numpy as np

# Stable softmax priority with optional ε‑greedy exploration for online bin packing.
def priority_v2(item: float, bins_remain_cap: np.ndarray,
                tau: float = 0.5, epsilon: float = 0.0,
                rng: np.random.Generator = None) -> np.ndarray:
    """Return probability scores for each bin based on remaining capacity, using a temperature‑scaled softmax; optionally explore randomly via ε‑greedy."""
    if rng is None:
        rng = np.random.default_rng()
    scores = np.zeros_like(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return scores
    if epsilon > 0.0 and rng.random() < epsilon:
        rand = rng.random(feasible.sum())
        probs = rand / rand.sum()
        scores[feasible] = probs
        return scores
    slack = bins_remain_cap[feasible] - item
    raw = -slack / tau
    max_raw = raw.max()
    exp_vals = np.exp(raw - max_raw)
    probs = exp_vals / exp_vals.sum()
    scores[feasible] = probs
    return scores
```
