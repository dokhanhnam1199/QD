```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 0.1, epsilon: float = 0.05, rng: np.random.Generator = None) -> np.ndarray:
    """Return a probability distribution over bins for an incoming item.

    The distribution favors bins with minimal residual capacity after placement,
    includes optional epsilonâ€‘exploration, and adds Gumbel noise for stochasticity.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        Remaining capacities of the bins.
    tau : float, optional
        Temperature controlling the softness of the softmax (default 0.1).
    epsilon : float, optional
        Exploration weight for a uniform distribution over feasible bins (default 0.05).
    rng : np.random.Generator, optional
        Random generator for stochastic components; created if None.

    Returns
    -------
    np.ndarray
        Probability vector of the same shape as ``bins_remain_cap``; infeasible bins have zero probability.
    """
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    logits = -residual / tau
    logits[~feasible] = -np.inf
    gumbel = -np.log(-np.log(rng.random(logits.shape) + 1e-12) + 1e-12)
    logits_noisy = logits + gumbel
    logits_noisy[~feasible] = -np.inf
    max_logit = np.max(logits_noisy)
    exp_shifted = np.exp(logits_noisy - max_logit)
    sum_exp = np.sum(exp_shifted)
    softmax = exp_shifted / sum_exp if sum_exp > 0 else np.zeros_like(bins_remain_cap, dtype=float)
    uniform = np.zeros_like(bins_remain_cap, dtype=float)
    uniform[feasible] = 1.0 / feasible.sum()
    return (1 - epsilon) * softmax + epsilon * uniform
```
