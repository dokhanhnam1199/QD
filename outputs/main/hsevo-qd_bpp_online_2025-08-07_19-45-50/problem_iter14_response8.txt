```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 0.5, epsilon: float = 0.0, rng: np.random.Generator = None) -> np.ndarray:
    """Stable softmax with epsilonâ€‘greedy for online bin packing; prioritize bins with smallest leftover."""
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if rng is None:
        rng = np.random.default_rng()
    if epsilon > 0.0 and rng.random() < epsilon:
        probs = np.zeros_like(bins_remain_cap, dtype=float)
        probs[feasible] = 1.0 / np.count_nonzero(feasible)
        return probs
    residual = bins_remain_cap[feasible] - item
    scores = -residual / tau
    max_score = np.max(scores)
    exp_scores = np.exp(scores - max_score)
    sum_exp = np.sum(exp_scores)
    probs = np.zeros_like(bins_remain_cap, dtype=float)
    if sum_exp > 0:
        probs[feasible] = exp_scores / sum_exp
    else:
        probs[feasible] = 1.0 / np.count_nonzero(feasible)
    return probs
```
