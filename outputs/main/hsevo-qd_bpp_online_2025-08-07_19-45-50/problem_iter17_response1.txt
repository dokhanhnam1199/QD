```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0, rng: np.random.Generator = None, tau: float = 1.0) -> np.ndarray:
    """Priority using negative waste softmax with optional Îµâ€‘greedy exploration."""
    if rng is None:
        rng = np.random.default_rng()
    slack = bins_remain_cap - item
    mask = slack >= 0
    probs = np.zeros_like(bins_remain_cap, dtype=float)
    if not np.any(mask):
        return probs
    if epsilon > 0 and rng.random() < epsilon:
        rand_scores = rng.random(np.count_nonzero(mask))
        max_rand = np.max(rand_scores)
        exp_rand = np.exp(rand_scores - max_rand)
        probs[mask] = exp_rand / exp_rand.sum()
        return probs
    ratio = slack[mask] / bins_remain_cap[mask]
    scores = -ratio / tau
    max_score = np.max(scores)
    exp_scores = np.exp(scores - max_score)
    probs[mask] = exp_scores / exp_scores.sum()
    return probs
```
