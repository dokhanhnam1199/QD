```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0, temperature: float = 1.0, use_gumbel: bool = False, rng: np.random.Generator = None) -> np.ndarray:
    """Temp‑scaled softmax of negative waste with ε‑weighted random (or Gumbel) exploration."""
    if rng is None:
        rng = np.random.default_rng()
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    residual = bins_remain_cap - item
    mask = residual >= 0
    if not np.any(mask):
        return np.zeros_like(bins_remain_cap, dtype=float)
    det = -residual
    det[~mask] = -np.inf
    temp = max(temperature, 1e-12)
    max_det = np.max(det[mask])
    exp_det = np.exp((det - max_det) / temp)
    exp_det[~mask] = 0.0
    sum_det = exp_det.sum()
    det_soft = exp_det / sum_det if sum_det > 0 else np.zeros_like(bins_remain_cap, dtype=float)
    if epsilon > 0.0:
        if use_gumbel:
            rand = -np.log(-np.log(rng.random(bins_remain_cap.shape)))
        else:
            rand = rng.random(bins_remain_cap.shape)
        rand[~mask] = -np.inf
        max_rand = np.max(rand[mask])
        exp_rand = np.exp((rand - max_rand) / temp)
        exp_rand[~mask] = 0.0
        sum_rand = exp_rand.sum()
        rand_soft = exp_rand / sum_rand if sum_rand > 0 else np.zeros_like(bins_remain_cap, dtype=float)
    else:
        rand_soft = np.zeros_like(bins_remain_cap, dtype=float)
    final = (1.0 - epsilon) * det_soft + epsilon * rand_soft
    total = final.sum()
    if total > 0.0:
        final /= total
    return final
```
