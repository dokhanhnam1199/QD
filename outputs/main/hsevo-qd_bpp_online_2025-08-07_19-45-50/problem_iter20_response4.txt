```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 1.0, epsilon: float = 0.1, rng: np.random.Generator = None) -> np.ndarray:
    """Hybrid waste‑based residual scoring with temperature‑scaled softmax and ε‑weighted random‑logit exploration."""
    if rng is None:
        rng = np.random.default_rng()
    bins = np.asarray(bins_remain_cap, dtype=float)
    feasible = bins >= item
    if not np.any(feasible):
        return np.full_like(bins, -np.inf, dtype=float)
    residual = bins - item
    det_logits = np.where(feasible, -residual, -np.inf)
    max_det = np.max(det_logits[feasible])
    det_shifted = (det_logits - max_det) / max(tau, 1e-12)
    det_exp = np.exp(det_shifted) * feasible
    det_sum = det_exp.sum()
    det_softmax = np.where(det_sum > 0, det_exp / det_sum, 0.0)
    rand_logits = rng.random(bins.shape)
    rand_logits = np.where(feasible, rand_logits, -np.inf)
    max_rand = np.max(rand_logits[feasible])
    rand_shifted = rand_logits - max_rand
    rand_exp = np.exp(rand_shifted) * feasible
    rand_sum = rand_exp.sum()
    rand_softmax = np.where(rand_sum > 0, rand_exp / rand_sum, 0.0)
    probs = (1.0 - epsilon) * det_softmax + epsilon * rand_softmax
    return np.where(feasible, probs, -np.inf)
```
