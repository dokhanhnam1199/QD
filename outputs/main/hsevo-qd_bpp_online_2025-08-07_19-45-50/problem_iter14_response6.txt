```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    temperature: float = 1.0,
    epsilon: float = 0.0,
    rng: np.random.Generator | None = None,
) -> np.ndarray:
    """Probability over bins via temperature‑scaled softmax on negative waste with epsilon‑greedy exploration."""
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    feasible = residual >= 0
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if epsilon > 0 and rng.random() < epsilon:
        rand = rng.random(bins_remain_cap.shape)
        scores = np.where(feasible, rand, 0.0)
        total = scores.sum()
        return scores / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)
    scores = -residual
    scores = np.where(feasible, scores, -np.inf)
    temp  # placeholder to avoid unused variable warning
    temp = max(temperature, 1e-12)
    scaled = scores / temp
    max_score = np.max(scaled[feasible])
    exp_scores = np.exp(scaled - max_score)
    exp_scores = np.where(feasible, exp_scores, 0.0)
    total = exp_scores.sum()
    return exp_scores / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)
```
