```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 0.0,
    temperature: float = 1.0,
    rng: np.random.Generator = None,
) -> np.ndarray:
    """Probability distribution using logistic slack, ε‑greedy mixing, and temperature‑scaled softmax."""
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    feasible = residual >= 0
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    ratio = residual / bins_remain_cap
    k = 12.0
    deterministic = 1.0 / (1.0 + np.exp(-k * (1.0 - ratio)))
    deterministic[~feasible] = -np.inf
    random_scores = rng.random(bins_remain_cap.shape[0])
    random_scores[~feasible] = -np.inf
    combined = (1.0 - epsilon) * deterministic + epsilon * random_scores
    max_comb = combined[feasible].max()
    exp_comb = np.exp((combined - max_comb) / temperature)
    exp_comb[~feasible] = 0.0
    total = exp_comb.sum()
    if total == 0:
        return np.zeros_like(bins_remain_cap, dtype=float)
    return exp_comb / total
```
