```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for adding item to each bin using inverse slack.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Return:
        Array of priority scores, higher means more desirable.
    """
    eps = 1e-9
    slack = bins_remain_cap - item
    feasible = slack >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    priorities[feasible] = 1.0 / (slack[feasible] + eps)
    return priorities
```
