```python
import numpy as np

def priority_v2(item, bins_remain_cap, tau=1.0, epsilon=0.0, rng=None):
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if rng is None:
        rng = np.random.default_rng()
    if rng.random() < epsilon:
        rand = rng.random(bins_remain_cap.shape[0])
        rand[~feasible] = 0.0
        total = rand.sum()
        if total > 0:
            return rand / total
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    waste = bins_remain_cap - item
    fill_ratio = item / bins_remain_cap
    combined = np.where(feasible, -waste + np.log(fill_ratio + 1e-12), -np.inf)
    scores = combined / tau
    max_score = np.max(scores[feasible])
    exp_scores = np.exp(scores - max_score)
    exp_scores[~feasible] = 0.0
    total = exp_scores.sum()
    if total > 0:
        return exp_scores / total
    return np.full_like(bins_remain_cap, -np.inf, dtype=float)
```
