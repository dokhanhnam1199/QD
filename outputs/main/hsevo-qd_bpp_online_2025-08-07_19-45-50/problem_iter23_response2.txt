```python
import numpy as np

# Priority heuristic mixing exact‑fit boost and softmax with ε‑greedy exploration
def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 0.05,
    tau: float = 1.0,
    exact_bonus: float = 1e6,
    rng: np.random.Generator | None = None,
) -> np.ndarray:
    """Combine exact‑fit boost, waste‑based scoring, and softmax with exploration."""
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if rng is None:
        rng = np.random.default_rng()
    if rng.random() < epsilon:
        probs = np.zeros_like(bins_remain_cap, dtype=float)
        probs[feasible] = 1.0 / feasible.sum()
        return probs
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    exact_mask = bins_remain_cap == item
    scores[exact_mask] = exact_bonus
    other_mask = feasible & ~exact_mask
    waste = bins_remain_cap[other_mask] - item
    scores[other_mask] = -waste / tau
    max_score = np.max(scores)
    exp_scores = np.exp(scores - max_score)
    sum_exp = np.sum(exp_scores)
    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(bins_remain_cap, dtype=float)
```
