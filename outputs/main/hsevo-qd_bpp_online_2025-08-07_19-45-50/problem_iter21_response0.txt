```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, rng: np.random.Generator = None,
                tau: float = 1.0, alpha: float = 1.5, penalty_factor: float = 0.5,
                noise_base: float = 0.1, risk_factor: float = 0.1) -> np.ndarray:
    """Rankâ€‘based adaptive priority for online bin packing."""
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    feasible = residual >= 0
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    penalty = np.where(feasible, 0.0, (item - bins_remain_cap) * penalty_factor)
    base_score = -residual - penalty
    max_residual = np.max(residual[feasible])
    risk = np.where(feasible, 1 - residual / (max_residual + 1e-12), 0.0)
    base_score -= risk_factor * risk
    order = np.argsort(-base_score)
    rank = np.empty_like(order)
    rank[order] = np.arange(len(base_score))
    weight = 1.0 / (rank + 1) ** alpha
    raw_scores = base_score * weight
    noise_scale = noise_base * (residual / (max_residual + 1e-12))
    noise_scale = np.maximum(noise_scale, 0.0)
    noise = rng.normal(0.0, noise_scale, size=bins_remain_cap.shape)
    raw_scores += noise
    max_raw = np.max(raw_scores)
    exp_scores = np.exp((raw_scores - max_raw) / tau)
    probs = exp_scores / np.sum(exp_scores)
    return probs
```
