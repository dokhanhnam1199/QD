```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 1.0,
                epsilon: float = 0.0, rng: np.random.Generator = None) -> np.ndarray:
    """Softmax fit (temp tau) with epsilon‑greedy random exploration."""
    # Combine stable softmax scoring of waste with occasional random scoring.
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    mask = residual >= 0
    if not np.any(mask):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if epsilon > 0 and rng.random() < epsilon:
        rand_scores = rng.random(bins_remain_cap.shape[0])
        rand_scores[~mask] = -np.inf
        max_rand = rand_scores[mask].max()
        exp_rand = np.exp(rand_scores - max_rand)
        exp_rand[~mask] = 0.0
        total_rand = exp_rand.sum()
        return exp_rand / total_rand if total_rand > 0 else np.zeros_like(bins_remain_cap, dtype=float)
```
