{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\nfrom typing import Optional\n\n# Priority function combining deterministic waste and optional epsilon\u2011greedy exploration\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0,\n                random_state: Optional[int] = None) -> np.ndarray:\n    \"\"\"Priority = -waste for feasible bins; optional epsilon\u2011greedy random scores.\"\"\"\n    feasible = bins_remain_cap >= item\n    if epsilon > 0.0:\n        rng = np.random.default_rng(random_state)\n        if rng.random() < epsilon:\n            rand_scores = rng.random(bins_remain_cap.shape[0])\n            return np.where(feasible, rand_scores, -np.inf)\n    waste = bins_remain_cap - item\n    return np.where(feasible, -waste, -np.inf)\n\n[Heuristics 2nd]\nimport numpy as np\nfrom typing import Optional\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    temperature: float = 1.0,\n    epsilon: float = 0.0,\n    rng: Optional[np.random.Generator] = None,\n) -> np.ndarray:\n    \"\"\"Softmax over negative waste with temperature scaling and epsilon\u2011greedy exploration; masks infeasible bins.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    feasible = residual >= 0\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if epsilon > 0.0 and rng.random() < epsilon:\n        scores = np.zeros_like(bins_remain_cap, dtype=float)\n        rand_vals = rng.random(feasible.sum())\n        scores[feasible] = rand_vals\n        total = scores.sum()\n        return scores / total\n    temp = max(temperature, 1e-12)\n    logits = -residual / temp\n    logits[~feasible] = -np.inf\n    max_logit = np.max(logits[feasible])\n    exp_vals = np.exp(logits - max_logit)\n    exp_vals[~feasible] = 0.0\n    total = exp_vals.sum()\n    return exp_vals / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0, seed: int | None = None) -> np.ndarray:\n    \"\"\"Prioritize bins: -waste for feasible bins, -inf otherwise; with \u03b5 chance assign random scores.\"\"\"\n    # Vectorized feasibility mask\n    feasible = bins_remain_cap >= item\n    rng = np.random.default_rng(seed)\n    # \u03b5\u2011greedy: random scores for feasible bins with probability \u03b5\n    if epsilon > 0.0 and rng.random() < epsilon:\n        random_scores = rng.random(bins_remain_cap.shape)\n        return np.where(feasible, random_scores, -np.inf)\n    # Deterministic waste\u2011minimizing priority\n    waste = bins_remain_cap - item\n    return np.where(feasible, -waste, -np.inf)\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Priority based on logistic slack ratio with \u03b5\u2011greedy softmax exploration.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    feasible = residual >= 0\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    ratio = residual / bins_remain_cap\n    k = 12.0\n    deterministic = 1.0 / (1.0 + np.exp(-k * (1.0 - ratio)))\n    deterministic[~feasible] = -np.inf\n    random_scores = rng.random(bins_remain_cap.shape[0])\n    random_scores[~feasible] = -np.inf\n    combined = (1.0 - epsilon) * deterministic + epsilon * random_scores\n    max_comb = combined[feasible].max()\n    exp_comb = np.exp(combined - max_comb)\n    exp_comb[~feasible] = 0.0\n    probs = exp_comb / exp_comb.sum()\n    return probs\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                tau: float = 1.0,\n                epsilon: float = 0.1,\n                rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"\n    Temperature-scaled softmax with epsilon-greedy exploration over feasible bins; returns probability vector.\n    \"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    det_score = np.where(feasible, -(bins_remain_cap - item), -np.inf)\n    max_score = np.max(det_score[feasible])\n    shifted = (det_score - max_score) / max(tau, 1e-12)\n    exp_shifted = np.exp(shifted) * feasible\n    sum_exp = exp_shifted.sum()\n    if sum_exp > 0:\n        softmax = exp_shifted / sum_exp\n    else:\n        max_mask = (det_score == max_score) & feasible\n        count_max = max_mask.sum()\n        softmax = np.where(max_mask, 1.0 / count_max, 0.0)\n    rand_vals = rng.random(bins_remain_cap.shape) * feasible\n    sum_rand = rand_vals.sum()\n    if sum_rand > 0:\n        rand_dist = rand_vals / sum_rand\n    else:\n        rand_dist = np.zeros_like(bins_remain_cap, dtype=float)\n    combined = (1.0 - epsilon) * softmax + epsilon * rand_dist\n    return np.where(feasible, combined, -np.inf)\n\n[Heuristics 6th]\nimport numpy as np\nfrom typing import Optional\n\n# Priority function combining deterministic waste and optional epsilon\u2011greedy exploration\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0,\n                random_state: Optional[int] = None) -> np.ndarray:\n    \"\"\"Priority = -waste for feasible bins; optional epsilon\u2011greedy random scores.\"\"\"\n    feasible = bins_remain_cap >= item\n    if epsilon > 0.0:\n        rng = np.random.default_rng(random_state)\n        if rng.random() < epsilon:\n            rand_scores = rng.random(bins_remain_cap.shape[0])\n            return np.where(feasible, rand_scores, -np.inf)\n    waste = bins_remain_cap - item\n    return np.where(feasible, -waste, -np.inf)\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tau: float = 1.0,\n    epsilon: float = 0.0,\n    rng: np.random.Generator = None,\n) -> np.ndarray:\n    \"\"\"Priority via temperature\u2011scaled softmax of negative waste mixed with epsilon\u2011greedy random scores; infeasible bins get -inf.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    # Deterministic score: negative waste (higher is better)\n    det_score = np.where(feasible, -(bins_remain_cap - item), -np.inf)\n    # Stable softmax with temperature\n    max_score = np.max(det_score[feasible])\n    shifted = (det_score - max_score) / max(tau, 1e-12)\n    exp_shifted = np.exp(shifted) * feasible\n    sum_exp = exp_shifted.sum_exp if hasattr(exp_shifted, \"sum_exp\") else exp_shifted.sum()\n    if sum_exp > 0:\n        softmax = exp_shifted / sum_exp\n    else:\n        # Fallback: uniform among max\u2011score bins\n        max_mask = (det_score == max_score) & feasible\n        count_max = max_mask.sum()\n        softmax = np.where(max_mask, 1.0 / count_max, 0.0)\n    # Random uniform distribution over feasible bins\n    rand_vals = rng.random(bins_remain_cap.shape) * feasible\n    sum_rand = rand_vals.sum()\n    if sum_rand > 0:\n        rand_dist = rand_vals / sum_rand\n    else:\n        rand_dist = np.zeros_like(bins_remain_cap, dtype=float)\n    # Mix deterministic and random scores\n    combined = (1.0 - epsilon) * softmax + epsilon * rand_dist\n    return np.where(feasible, combined, -np.inf)\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 0.1, epsilon: float = 0.05, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Return a probability distribution over bins for an incoming item.\n\n    The distribution favors bins with minimal residual capacity after placement,\n    includes optional epsilon\u2011exploration, and adds Gumbel noise for stochasticity.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the bins.\n    tau : float, optional\n        Temperature controlling the softness of the softmax (default 0.1).\n    epsilon : float, optional\n        Exploration weight for a uniform distribution over feasible bins (default 0.05).\n    rng : np.random.Generator, optional\n        Random generator for stochastic components; created if None.\n\n    Returns\n    -------\n    np.ndarray\n        Probability vector of the same shape as ``bins_remain_cap``; infeasible bins have zero probability.\n    \"\"\"\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    logits = -residual / tau\n    logits[~feasible] = -np.inf\n    gumbel = -np.log(-np.log(rng.random(logits.shape) + 1e-12) + 1e-12)\n    logits_noisy = logits + gumbel\n    logits_noisy[~feasible] = -np.inf\n    max_logit = np.max(logits_noisy)\n    exp_shifted = np.exp(logits_noisy - max_logit)\n    sum_exp = np.sum(exp_shifted)\n    softmax = exp_shifted / sum_exp if sum_exp > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n    uniform = np.zeros_like(bins_remain_cap, dtype=float)\n    uniform[feasible] = 1.0 / feasible.sum()\n    return (1 - epsilon) * softmax + epsilon * uniform\n\n[Heuristics 9th]\nimport numpy as np\nfrom typing import Optional\n\n# Priority function combining deterministic waste and optional epsilon\u2011greedy exploration\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0,\n                random_state: Optional[int] = None) -> np.ndarray:\n    \"\"\"Priority = -waste for feasible bins; optional epsilon\u2011greedy random scores.\"\"\"\n    feasible = bins_remain_cap >= item\n    if epsilon > 0.0:\n        rng = np.random.default_rng(random_state)\n        if rng.random() < epsilon:\n            rand_scores = rng.random(bins_remain_cap.shape[0])\n            return np.where(feasible, rand_scores, -np.inf)\n    waste = bins_remain_cap - item\n    return np.where(feasible, -waste, -np.inf)\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Softmax-Based Fit priority: tighter fits receive higher scores.\"\"\"\n    \\\n    residual = bins_remain_cap - item\n    mask = residual >= 0\n    if not np.any(mask):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    scores = -residual\n    scores[~mask] = -np.inf\n    max_score = scores[mask].max()\n    exp_scores = np.exp(scores - max_score)\n    exp_scores[~mask] = 0.0\n    total = exp_scores.sum()\n    if total == 0:\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    return exp_scores / total\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.01) -> np.ndarray:\n    \"\"\"Exact-fit-first priority with optional epsilon-greedy exploration.\"\"\"\n    # Feasibility mask and deterministic priority (negative waste)\n    feasible = bins_remain_cap >= item\n    deterministic = np.where(feasible, -(bins_remain_cap - item), -np.inf)\n    # With probability epsilon, use random scores for feasible bins\n    if np.random.rand() < epsilon:\n        random_scores = np.random.rand(bins := bins_remain_cap.shape[0])\n        return np.where(feasible, random_scores, -np.inf)\n    return deterministic\n\n[Heuristics 12th]\nimport numpy as np\nfrom typing import Optional\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    epsilon: float = 0.1,\n    temperature: float = 0.1,\n    rng: Optional[np.random.Generator] = None,\n) -> np.ndarray:\n    \"\"\"Epsilon\u2011greedy softmax: random logits with prob \u03b5, else residual\u2011based softmax.\"\"\"\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    feasible = bins >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins, dtype=float)\n    if rng is None:\n        rng = np.random.default_rng()\n    # Exploration: random logits; Exploitation: residual\u2011based logits.\n    if rng.random() < epsilon:\n        logits = np.where(feasible, rng.random(bins.shape), -np.inf)\n    else:\n        residual = bins - item\n        temp = max(temperature, 1e-12)\n        logits = np.where(feasible, -residual / temp, -np.inf)\n    # Stable softmax over feasible bins.\n    max_logit = np.max(logits[feasible])\n    exp_shifted = np.exp(logits - max_logit)\n    probs = exp_shifted / exp_shifted.sum()\n    return probs\n\n[Heuristics 13th]\nimport numpy as np\nfrom typing import Optional\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    epsilon: float = 0.1,\n    temperature: float = 0.1,\n    rng: Optional[np.random.Generator] = None,\n) -> np.ndarray:\n    \"\"\"Epsilon\u2011greedy softmax: random logits with prob \u03b5, else residual\u2011based softmax.\"\"\"\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    feasible = bins >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins, dtype=float)\n    if rng is None:\n        rng = np.random.default_rng()\n    # Exploration: random logits; Exploitation: residual\u2011based logits.\n    if rng.random() < epsilon:\n        logits = np.where(feasible, rng.random(bins.shape), -np.inf)\n    else:\n        residual = bins - item\n        temp = max(temperature, 1e-12)\n        logits = np.where(feasible, -residual / temp, -np.inf)\n    # Stable softmax over feasible bins.\n    max_logit = np.max(logits[feasible])\n    exp_shifted = np.exp(logits - max_logit)\n    probs = exp_shifted / exp_shifted.sum()\n    return probs\n\n[Heuristics 14th]\nimport numpy as np\nfrom typing import Optional\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    epsilon: float = 0.1,\n    temperature: float = 0.1,\n    rng: Optional[np.random.Generator] = None,\n) -> np.ndarray:\n    \"\"\"Epsilon\u2011greedy softmax: random logits with prob \u03b5, else residual\u2011based softmax.\"\"\"\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    feasible = bins >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins, dtype=float)\n    if rng is None:\n        rng = np.random.default_rng()\n    # Exploration: random logits; Exploitation: residual\u2011based logits.\n    if rng.random() < epsilon:\n        logits = np.where(feasible, rng.random(bins.shape), -np.inf)\n    else:\n        residual = bins - item\n        temp = max(temperature, 1e-12)\n        logits = np.where(feasible, -residual / temp, -np.inf)\n    # Stable softmax over feasible bins.\n    max_logit = np.max(logits[feasible])\n    exp_shifted = np.exp(logits - max_logit)\n    probs = exp_shifted / exp_shifted.sum()\n    return probs\n\n[Heuristics 15th]\nimport numpy as np\nfrom typing import Optional\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    epsilon: float = 0.1,\n    temperature: float = 0.1,\n    rng: Optional[np.random.Generator] = None,\n) -> np.ndarray:\n    \"\"\"Epsilon\u2011greedy softmax: random logits with prob \u03b5, else residual\u2011based softmax.\"\"\"\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    feasible = bins >= item\n    if not np.any(feasible):\n        return np.zeros_like(bins, dtype=float)\n    if rng is None:\n        rng = np.random.default_rng()\n    # Exploration: random logits; Exploitation: residual\u2011based logits.\n    if rng.random() < epsilon:\n        logits = np.where(feasible, rng.random(bins.shape), -np.inf)\n    else:\n        residual = bins - item\n        temp = max(temperature, 1e-12)\n        logits = np.where(feasible, -residual / temp, -np.inf)\n    # Stable softmax over feasible bins.\n    max_logit = np.max(logits[feasible])\n    exp_shifted = np.exp(logits - max_logit)\n    probs = exp_shifted / exp_shifted.sum()\n    return probs\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 1.0,\n                epsilon: float = 0.0, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Softmax fit (temp\u202ftau) with epsilon\u2011greedy random exploration.\"\"\"\n    # Combine stable softmax scoring of waste with occasional random scoring.\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    mask = residual >= 0\n    if not np.any(mask):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if epsilon > 0 and rng.random() < epsilon:\n        rand_scores = rng.random(bins_remain_cap.shape[0])\n        rand_scores[~mask] = -np.inf\n        max_rand = rand_scores[mask].max()\n        exp_rand = np.exp(rand_scores - max_rand)\n        exp_rand[~mask] = 0.0\n        total_rand = exp_rand.sum()\n        return exp_rand / total_rand if total_rand > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 1.0,\n                epsilon: float = 0.0, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Softmax fit (temp\u202ftau) with epsilon\u2011greedy random exploration.\"\"\"\n    # Combine stable softmax scoring of waste with occasional random scoring.\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    mask = residual >= 0\n    if not np.any(mask):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if epsilon > 0 and rng.random() < epsilon:\n        rand_scores = rng.random(bins_remain_cap.shape[0])\n        rand_scores[~mask] = -np.inf\n        max_rand = rand_scores[mask].max()\n        exp_rand = np.exp(rand_scores - max_rand)\n        exp_rand[~mask] = 0.0\n        total_rand = exp_rand.sum()\n        return exp_rand / total_rand if total_rand > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 1.0,\n                epsilon: float = 0.0, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Softmax fit (temp\u202ftau) with epsilon\u2011greedy random exploration.\"\"\"\n    # Combine stable softmax scoring of waste with occasional random scoring.\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    mask = residual >= 0\n    if not np.any(mask):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if epsilon > 0 and rng.random() < epsilon:\n        rand_scores = rng.random(bins_remain_cap.shape[0])\n        rand_scores[~mask] = -np.inf\n        max_rand = rand_scores[mask].max()\n        exp_rand = np.exp(rand_scores - max_rand)\n        exp_rand[~mask] = 0.0\n        total_rand = exp_rand.sum()\n        return exp_rand / total_rand if total_rand > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, tau: float = 1.0,\n                epsilon: float = 0.0, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Softmax fit (temp\u202ftau) with epsilon\u2011greedy random exploration.\"\"\"\n    # Combine stable softmax scoring of waste with occasional random scoring.\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    mask = residual >= 0\n    if not np.any(mask):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if epsilon > 0 and rng.random() < epsilon:\n        rand_scores = rng.random(bins_remain_cap.shape[0])\n        rand_scores[~mask] = -np.inf\n        max_rand = rand_scores[mask].max()\n        exp_rand = np.exp(rand_scores - max_rand)\n        exp_rand[~mask] = 0.0\n        total_rand = exp_rand.sum()\n        return exp_rand / total_rand if total_rand > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Best\u2011fit logistic score blended with \u03b5\u2011greedy random exploration via stable softmax.\"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    caps = bins_remain_cap.astype(float)\n    space_left = caps - item\n    ratio = np.empty_like(caps, dtype=float)\n    ratio[feasible] = space_left[feasible] / caps[feasible]\n    k = 12.0\n    deterministic = np.empty_like(caps, dtype=float)\n    deterministic[feasible] = 1.0 / (1.0 + np.exp(-k * (1.0 - ratio[feasible])))\n    random_scores = np.empty_like(caps, dtype=float)\n    random_scores[feasible] = rng.random(feasible.sum())\n    combined = (1.0 - epsilon) * deterministic + epsilon * random_scores\n    max_combined = combined[feasible].max()\n    exps = np.empty_like(caps, dtype=float)\n    exps[feasible] = np.exp(combined[feasible] - max_combined)\n    sum_exps = exps[feasible].sum()\n    probs = np.full_like(caps, -np.inf, dtype=float)\n    probs[feasible] = exps[feasible] / sum_exps\n    return probs\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}