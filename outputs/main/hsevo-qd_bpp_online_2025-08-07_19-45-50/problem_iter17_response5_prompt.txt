{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                bins_remain_cap: np.ndarray,\n                tau: float = 1.0,\n                epsilon: float = 0.1,\n                rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"\n    Temperature-scaled softmax with epsilon-greedy exploration over feasible bins; returns probability vector.\n    \"\"\"\n    if rng is None:\n        rng = np.random.default_rng()\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    det_score = np.where(feasible, -(bins_remain_cap - item), -np.inf)\n    max_score = np.max(det_score[feasible])\n    shifted = (det_score - max_score) / max(tau, 1e-12)\n    exp_shifted = np.exp(shifted) * feasible\n    sum_exp = exp_shifted.sum()\n    if sum_exp > 0:\n        softmax = exp_shifted / sum_exp\n    else:\n        max_mask = (det_score == max_score) & feasible\n        count_max = max_mask.sum()\n        softmax = np.where(max_mask, 1.0 / count_max, 0.0)\n    rand_vals = rng.random(bins_remain_cap.shape) * feasible\n    sum_rand = rand_vals.sum()\n    if sum_rand > 0:\n        rand_dist = rand_vals / sum_rand\n    else:\n        rand_dist = np.zeros_like(bins_remain_cap, dtype=float)\n    combined = (1.0 - epsilon) * softmax + epsilon * rand_dist\n    return np.where(feasible, combined, -np.inf)\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                epsilon: float = 0.0, rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"Softmax fit (temp\u202ftau) with epsilon\u2011greedy random exploration.\"\"\"\n    # Combine stable softmax scoring of waste with occasional random scoring.\n    if rng is None:\n        rng = np.random.default_rng()\n    residual = bins_remain_cap - item\n    mask = residual >= 0\n    if not np.any(mask):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n    if epsilon > 0 and rng.random() < epsilon:\n        rand_scores = rng.random(bins_remain_cap.shape[0])\n        rand_scores[~mask] = -np.inf\n        max_rand = rand_scores[mask].max()\n        exp_rand = np.exp(rand_scores - max_rand)\n        exp_rand[~mask] = 0.0\n        total_rand = exp_rand.sum()\n        return exp_rand / total_rand if total_rand > 0 else np.zeros_like(bins_remain_cap, dtype=float)\n\n### Analyze & experience\n- - Comparing (best) vs (worst), we see **H1** uses a stable, temperature\u2011scaled softmax with clean \u03b5\u2011exploration and returns a proper probability vector, whereas **H20** mixes logistic transformation and \u03b5\u2011blending before softmax, adding unnecessary complexity and potential numerical instability.  \n- (second best) vs (second worst), **H2** implements a tidy softmax with optional \u03b5\u2011exploration and returns normalized probabilities, while **H19** (duplicate of H15) lacks a fallback for exploitation and yields zeros when \u03b5=0, making it unusable.  \n- Comparing (1st) vs (2nd), **H1** directly masks infeasible bins with \u2011inf and computes raw scores in a single expression, whereas **H2** builds a separate scores array and duplicates logic, resulting in slightly more verbose code and a minor performance hit.  \n- (3rd) vs (4th), **H3** applies a sigmoid on the slack ratio, producing bounded but non\u2011probability priorities and no exploration; **H4** returns negative waste priorities with optional \u03b5\u2011exploration but uses \u2011inf for infeasible bins and does not normalize to a probability distribution, complicating downstream decisions.  \n- Comparing (second worst) vs (worst), **H19** returns zeros or improper scores due to a missing exploitation branch, whereas **H20** produces a valid probability distribution but still contains unnecessary logistic blending and may suffer from exponentiation of large combined values.  \n- Overall: The top heuristics share consistent infeasible\u2011bin handling, stable temperature\u2011scaled softmax, optional \u03b5\u2011exploration, and clear probability outputs. The bottom ones suffer from incomplete logic, non\u2011probability outputs, or redundant complexity.\n- \n**Keywords:** Adaptive ranking, Contextual scoring, Learning\u2011based priority, Dynamic thresholds, Clustered selection, Feedback loops, Batch optimization, Hybrid heuristics, Resilience.  \n\n**Advice:** Build a predictive model to rank items from features; use dynamic thresholds that shift with recent outcomes; cluster similar items to reduce complexity; employ feedback loops to tune scores; weight options with contextual signals; favor rank\u2011based adjustments over chance\u2011based weighting.  \n\n**Avoid:** Fixed ranking rules; static thresholds; ignoring context; duplicate evaluations; opaque heuristics; simplistic score tweaks; disregarding noisy inputs.  \n\n**Explanation:** Adaptive, data\u2011driven, feedback\u2011rich methods deliver robust, responsive heuristics without unstable random weighting.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}