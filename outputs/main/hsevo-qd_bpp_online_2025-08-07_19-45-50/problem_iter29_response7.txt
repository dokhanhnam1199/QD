```python
import numpy as np

# Priority heuristic for online bin packing
def priority_v2(item: float, bins_remain_cap: np.ndarray,
                tau: float = 1.0, epsilon: float = 0.1, risk_factor: float = 0.1,
                rng: np.random.Generator = None) -> np.ndarray:
    """Priority via softmax on negative waste, epsilonâ€‘greedy, risk penalty."""
    if rng is None:
        rng = np.random.default_rng()
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if rng.random() < epsilon:
        probs = np.zeros_like(bins_remain_cap, dtype=float)
        probs[feasible] = 1.0 / np.count_nonzero(feasible)
        return probs
    residual = bins_remain_cap - item
    raw_scores = -residual / tau
    max_residual = np.max(residual[feasible])
    risk = np.where(feasible, 1.0 - residual / (max_residual + 1e-12), 0.0)
    raw_scores[feasible] -= risk_factor * risk[feasible]
    raw_scores[~feasible] = -np.inf
    max_score = np.max(raw_scores)
    exp_scores = np.exp(raw_scores - max_score)
    sum_exp = np.sum(exp_scores)
    return exp_scores / sum_exp if sum_exp > 0 else np.zeros_like(exp_scores)
```
