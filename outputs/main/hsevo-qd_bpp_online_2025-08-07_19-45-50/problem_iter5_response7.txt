```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    tau: float = 1.0,
    epsilon: float = 0.0,
    rng: np.random.Generator | None = None,
) -> np.ndarray:
    """Temperature‑scaled softmax with optional ε‑greedy exploration for online BPP."""
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    feasible = residual >= 0
    n = bins_remain_cap.shape[0]
    priorities = np.zeros(n, dtype=float)
    if not feasible.any():
        return priorities
    if epsilon > 0.0 and rng.random() < epsilon:
        rand_scores = rng.random(feasible.sum())
        max_s = rand_scores.max()
        exp_scores = np.exp((rand_scores - max_s) / max(tau, 1e-12))
        priorities[feasible] = exp_scores / exp_scores.sum()
        return priorities
    # softmax on negative residual (tight fits) scaled by temperature τ
    scores = -residual[feasible] / max(tau, 1e-12)
    max_s = scores.max()
    exp_scores = np.exp(scores - max_s)
    priorities[feasible] = exp_scores / exp_scores.sum()
    return priorities
```
