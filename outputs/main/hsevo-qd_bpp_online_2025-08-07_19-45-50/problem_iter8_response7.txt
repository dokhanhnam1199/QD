```python
import numpy as np
from typing import Optional

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0,
                random_state: Optional[int] = None) -> np.ndarray:
    """Compute bin priority using negative waste and optional ε‑greedy random scores; returns a probability vector."""
    # Combine deterministic waste minimization with ε‑greedy exploration.
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return np.zeros_like(bins_remain_cap, dtype=float)
    rng = np.random.default_rng(random_state)
    if epsilon > 0.0 and rng.random() < epsilon:
        scores = np.where(feasible, rng.random(bins_remain_cap.shape[0]), -np.inf)
    else:
        waste = bins_remain_cap - item
        scores = np.where(feasible, -waste, -np.inf)
    max_score = np.max(scores[feasible])
    exp_scores = np.exp(scores - max_score)
    exp_scores[~feasible] = 0.0
    prob = exp_scores / np.sum(exp_scores)
    return prob
```
