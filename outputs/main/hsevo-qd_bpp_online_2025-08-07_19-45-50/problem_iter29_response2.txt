```python
import numpy as np
from typing import Optional

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    temperature: float = 1.0,
    epsilon: float = 0.0,
    rng: Optional[np.random.Generator] = None,
) -> np.ndarray:
    """Rank‑weighted waste softmax with optional ε‑greedy exploration for bin selection."""
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    feasible = residual >= 0
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    # ε‑greedy random fallback
    if epsilon > 0 and rng.random() < epsilon:
        rand = rng.random(bins_remain_cap.shape)
        rand[~feasible] = 0.0
        total = rand.sum()
        return rand / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)
    waste = residual[feasible]                       # positive waste for feasible bins
    order = np.argsort(waste)                        # best‑fit (smallest waste) first
    ranks = np.empty_like(order)
    ranks[order] = np.arange(waste.size)             # rank 0 = smallest waste
    rank_weight = 1.0 / (ranks + 1.0)                # higher weight for lower waste
    base_score = -waste                              # higher (less negative) = better fit
    combined = base_score * rank_weight              # rank‑weighted deterministic score
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    scores[feasible] = combined
    temp = max(temperature, 1e-12)
    scaled = scores / temp
    max_score = scaled[feasible].max()
    exp_scores = np.exp(scaled - max_score)
    exp_scores[~feasible] = 0.0
    total = exp_scores.sum()
    return exp_scores / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)
```
