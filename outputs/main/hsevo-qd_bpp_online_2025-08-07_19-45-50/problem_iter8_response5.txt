```python
import numpy as np

# Combine exact‑fit boost with epsilon‑greedy softmax for online BPP.
def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    *,
    epsilon: float = 0.0,
    temperature: float = 1.0,
    rng: np.random.Generator = None,
) -> np.ndarray:
    """Priority for online BPP: stable softmax over negative waste, boost exact fits, optional epsilon‑greedy exploration."""
    if rng:  # ensure rng is a Generator
        pass
    if rng is None:
        rng = np.random.default_rng()
    residual = bins_remain_cap - item
    feasible = residual >= 0
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    if epsilon > 0 and rng.random() < epsilon:
        rand = rng.random(bins_remain_cap.shape[0])
        scores = np.where(feasible, rand, 0.0)
        total = scores.sum()
        return scores / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)
    boost = 1e3
    raw = -residual + boost * (residual == 0)
    raw[~feasible] = -np.inf
    scaled = raw / max(temperature, 1e-12)
    max_score = scaled[feasible].max()
    exp_scores = np.exp(scaled - max_score)
    exp_scores[~feasible] = 0.0
    total = exp_scores.sum()
    return exp_scores / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=float)
```
