```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to estimate the promise of including each edge in a solution.

    Args:
        distance_matrix (np.ndarray): A 2D NumPy array representing the distance
                                       matrix between cities.

    Returns:
        np.ndarray: A 2D NumPy array of the same shape as the distance matrix,
                    containing heuristic values indicating the promise of each edge.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # 1. Inverse Distance: Shorter distances are generally more promising.
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small value to avoid division by zero

    # 2. Nearest Neighbor: Edges connecting to nearest neighbors are likely good.
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_mask = np.zeros_like(distance_matrix, dtype=bool)
    for i in range(n):
        # Consider the k nearest neighbors (excluding the city itself)
        k = min(5, n - 1)  # Consider at most 5 nearest neighbors. Important when n is small
        for j in range(1, k + 1): # Start from 1 because the closest is the node itself
            nearest_neighbor_mask[i, nearest_neighbors[i, j]] = True

    # 3. Minimum Spanning Tree Approximation (using Prim's algorithm idea):
    #    Edges likely to be in an MST might be part of a good TSP tour.
    mst_approximation = np.zeros_like(distance_matrix)
    for i in range(n):
        min_dist = np.inf
        for j in range(n):
            if i != j:
                min_dist = min(min_dist, distance_matrix[i,j])
        mst_approximation[i,:] = np.clip(1/(distance_matrix+1e-9)/(min_dist+1e-9), 0, 1) # Ensure reasonable value and avoids div by 0

    # Combine the factors:  Assign weights to each factor and combine them.
    heuristics = (0.6 * inverse_distance +
                  0.3 * nearest_neighbor_mask +
                  0.1 * mst_approximation)

    # Sparsify the matrix: Set unpromising edges to zero. This helps reduce
    # the search space for stochastic sampling methods.
    threshold = np.percentile(heuristics[heuristics > 0], 20)  #Keep only the best 80%

    heuristics[heuristics < threshold] = 0

    return heuristics
```
