```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                     representing the prior indicators of edge importance.
    """

    n = distance_matrix.shape[0]

    # Avoid division by zero and create a copy to modify
    heuristic_matrix = np.copy(distance_matrix)
    heuristic_matrix[heuristic_matrix == 0] = np.inf  # Replace 0 with infinity

    # 1. Inverse distance: Shorter distances are more promising.
    heuristic_matrix = 1 / heuristic_matrix

    # 2. Node degree desirability: Nodes with fewer nearby neighbors should connect to them earlier
    node_degree = np.sum(heuristic_matrix > 0, axis=0)
    degree_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            degree_matrix[i, j] = node_degree[i] + node_degree[j]
    heuristic_matrix = heuristic_matrix * degree_matrix # favor low degree nodes

    # 3. Global Distance Scaling. Scale by median distance to emphasize short connections.
    median_distance = np.median(distance_matrix[distance_matrix != np.inf])  # Avoid inf in median
    heuristic_matrix = heuristic_matrix * (median_distance)

    # 4. Sparsification: Zero out less promising edges.
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2) # Keep top 80% edges
    heuristic_matrix[heuristic_matrix < threshold] = 0


    # Ensure no self-loops
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
