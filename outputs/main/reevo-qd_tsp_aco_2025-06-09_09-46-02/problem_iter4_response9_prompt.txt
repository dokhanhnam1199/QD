{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling.\n\n    This function combines multiple factors to determine the promise of including each edge in a solution.\n    It considers:\n        1. Inverse distance: Shorter distances are preferred.\n        2. Node degree: Edges connected to nodes with fewer connections are favored (encourages exploration).\n        3. Global shortest path consideration: An approximation of whether the edge lies on several shortest paths.\n        4. Sparsification: Sets less promising edges to zero.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix representing the distances between cities.\n                                         distance_matrix[i][j] is the distance between city i and city j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the\n                      promise of including the corresponding edge in the TSP solution.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse distance (basic desirability)\n    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero\n\n    # 2. Node degree (encourage exploration from sparsely connected nodes)\n    degree_penalty = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                degree_i = np.sum(distance_matrix[i, :] > 0)  #number of adjacent nodes for node i.\n                degree_j = np.sum(distance_matrix[j, :] > 0)  #number of adjacent nodes for node j.\n                degree_penalty[i, j] = 1.0 / (degree_i * degree_j + 1e-6)\n\n\n    # 3. Shortest Path Consideration\n    shortest_path_bonus = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Approximate shortest path consideration by using Dijkstra (or Floyd-Warshall for a complete graph)\n                # In this case, use a basic heuristic.\n\n                shortest_path_bonus[i, j] = np.exp(-distance_matrix[i,j]/np.mean(distance_matrix))  # Favors edges with shorter distances\n\n\n    # Combine the factors\n    heuristics_matrix = inverse_distance * degree_penalty * shortest_path_bonus\n\n    # 4. Sparsification (set less promising edges to zero)\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 25) # remove 25% lowest scored edges\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling with improvements.\n\n    This function refines the heuristics by incorporating node proximity, edge diversity, and iterative refinement\n    to enhance the exploration-exploitation balance in TSP solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix representing the distances between cities.\n                                         distance_matrix[i][j] is the distance between city i and city j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the\n                      promise of including the corresponding edge in the TSP solution.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Node Proximity (Inverse Distance with Scaling)\n    inverse_distance = 1 / (distance_matrix + 1e-6)\n    proximity_factor = np.mean(distance_matrix) / (distance_matrix + 1e-6)  # Scale based on average distance\n    node_proximity = inverse_distance * proximity_factor\n\n    # 2. Edge Diversity (Penalize High-Degree Nodes)\n    degree_penalty = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Using the number of 'relatively close' neighbors for degree estimation\n                threshold = np.mean(distance_matrix[i,:])\n                degree_i = np.sum(distance_matrix[i, :] < threshold)\n                degree_j = np.sum(distance_matrix[j, :] < threshold)\n                degree_penalty[i, j] = 1.0 / (degree_i * degree_j + 1e-6)\n\n    # 3. Iterative Refinement (Shortest Path Consideration with Adaptive Scaling)\n    shortest_path_bonus = np.zeros_like(distance_matrix, dtype=float)\n    mean_distance = np.mean(distance_matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                shortest_path_bonus[i, j] = np.exp(-distance_matrix[i, j] / mean_distance)  # Favors shorter edges\n\n    # Combine factors\n    heuristics_matrix = node_proximity * degree_penalty * shortest_path_bonus\n\n    # 4. Sparsification (Adaptive Thresholding)\n    # Dynamically adjust the threshold based on the iteration\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 25) # remove bottom 25%\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    # Add a small amount of noise to break symmetry and encourage exploration.\n    noise = np.random.normal(0, 0.01 * np.mean(heuristics_matrix[heuristics_matrix > 0]), size=heuristics_matrix.shape)\n    heuristics_matrix = heuristics_matrix + noise\n    heuristics_matrix[heuristics_matrix < 0] = 0  # Ensure no negative values after adding noise\n\n    return heuristics_matrix\n\n[Reflection]\nConsider adaptive scaling, refined degree estimation, noise injection, and dynamic thresholding for improved exploration.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}