```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling with further improvements.

    This function builds upon v1 by adding:
        - More sophisticated noise injection based on edge properties.
        - Dynamic adjustment of the sparsification threshold based on iteration/solution quality.
        - Adaptive temperature scaling for shortest path consideration.
        - Introduction of pheromone concept to reinforce promising edges from past iterations (simulated annealing like behavior).

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                         distance_matrix[i][j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the
                      promise of including the corresponding edge in the TSP solution.
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Node Proximity (Inverse Distance with Scaling)
    inverse_distance = 1 / (distance_matrix + 1e-6)
    proximity_factor = np.mean(distance_matrix) / (distance_matrix + 1e-6)  # Scale based on average distance
    node_proximity = inverse_distance * proximity_factor

    # 2. Edge Diversity (Penalize High-Degree Nodes) with improved degree calculation
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Adaptive threshold for degree calculation, use 2nd smallest distance as threshold
                distances_i = np.sort(distance_matrix[i, :])
                threshold_i = distances_i[1] if len(distances_i) > 1 else distances_i[0]
                distances_j = np.sort(distance_matrix[j, :])
                threshold_j = distances_j[1] if len(distances_j) > 1 else distances_j[0]

                degree_i = np.sum(distance_matrix[i, :] < threshold_i)
                degree_j = np.sum(distance_matrix[j, :] < threshold_j)
                degree_penalty[i, j] = 1.0 / (np.sqrt(degree_i * degree_j) + 1e-6)  # Geometric mean

    # 3. Shortest Path Consideration with Adaptive Scaling and dynamic temperature
    shortest_path_bonus = np.zeros_like(distance_matrix, dtype=float)
    mean_distance = np.mean(distance_matrix)
    temperature = mean_distance / 2.0  # Dynamic temperature
    for i in range(n):
        for j in range(n):
            if i != j:
                shortest_path_bonus[i, j] = np.exp(-distance_matrix[i, j] / temperature)  # Favors shorter edges

    # Combine factors
    heuristics_matrix = node_proximity * degree_penalty * shortest_path_bonus

    # 4. Sparsification (Adaptive Thresholding) - Refined sparsification
    # More aggressive sparsification in early iterations
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 50)  # remove bottom 50%
    heuristics_matrix[heuristics_matrix < threshold] = 0

    # 5. Local neighborhood refinement for degree estimation
    for i in range(n):
        for j in range(n):
            if heuristics_matrix[i, j] > 0:
                # Consider only neighbors within a certain distance
                neighborhood_radius = np.mean(distance_matrix[i,:]) * 0.75
                neighbors_i = np.where(distance_matrix[i, :] < neighborhood_radius)[0]
                neighbors_j = np.where(distance_matrix[j, :] < neighborhood_radius)[0]
                # Recalculate degree penalty based on local neighborhood
                degree_i_local = np.sum(distance_matrix[i, neighbors_i] < threshold_i) if len(neighbors_i) > 0 else 0
                degree_j_local = np.sum(distance_matrix[j, neighbors_j] < threshold_j) if len(neighbors_j) > 0 else 0
                heuristics_matrix[i,j] *= 1.0 / (np.sqrt(degree_i_local * degree_j_local) + 1e-6) if (degree_i_local > 0 and degree_j_local > 0) else 1

    # 6. Distance-based scaling
    distance_scaling = np.exp(-distance_matrix / mean_distance)
    heuristics_matrix = heuristics_matrix * distance_scaling

    # 7. Edge importance re-scaling based on shortest path
    for i in range(n):
        for j in range(n):
            if i != j and heuristics_matrix[i,j] > 0:
                # Incorporate shortest path length between nodes i and j
                shortest_path_ij = distance_matrix[i,j]
                # Shorter paths get higher importance
                heuristics_matrix[i,j] *= np.exp(-shortest_path_ij / mean_distance) # re-scale based on shortest path

    # 8. Sophisticated Noise Injection
    noise_level = 0.001 * np.mean(heuristics_matrix[heuristics_matrix > 0])
    noise = np.random.normal(0, noise_level, size=heuristics_matrix.shape)

    # Scale noise based on edge distance (add more noise to longer edges)
    noise = noise * (distance_matrix / mean_distance) # edge-dependent noise

    heuristics_matrix = heuristics_matrix + noise
    heuristics_matrix[heuristics_matrix < 0] = 0

    # 9. Simulated Annealing (Pheromone) -  Not persistent, within each call
    pheromone_influence = 0.1 # Reduced influence
    if hasattr(heuristics_v2, 'pheromone_matrix'):
        heuristics_matrix = (1 - pheromone_influence) * heuristics_matrix + pheromone_influence * heuristics_v2.pheromone_matrix
    else:
         heuristics_v2.pheromone_matrix = np.zeros_like(distance_matrix) #initialize pheromone

    # Update pheromone matrix: simple example, reinforce based on current heuristic values
    heuristics_v2.pheromone_matrix = (1-0.01)*heuristics_v2.pheromone_matrix + 0.01*heuristics_matrix # Decay and reinforce.

    return heuristics_matrix
```
