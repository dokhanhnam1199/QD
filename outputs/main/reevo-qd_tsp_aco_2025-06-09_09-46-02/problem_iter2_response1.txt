```python
import numpy as np
import scipy.sparse
from scipy.sparse.csgraph import shortest_path

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling.

    This function combines multiple factors to determine the promise of including each edge in a solution.
    It considers:
        1. Node proximity (inverse distance): Shorter distances are preferred.
        2. Node connectivity (degree): Edges connected to nodes with fewer connections are favored.
        3. Shortest paths: Edges that lie on many shortest paths between other nodes are favored.
        4. Sparsification: Sets less promising edges to zero to reduce the search space.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                         distance_matrix[i][j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the
                      promise of including the corresponding edge in the TSP solution.
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Node proximity (inverse distance)
    inverse_distance = 1 / (distance_matrix + 1e-9)

    # 2. Node connectivity (degree)
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    degrees = np.sum(distance_matrix > 0, axis=0)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty[i, j] = 1 / (degrees[i] * degrees[j] + 1e-9) if (degrees[i] * degrees[j]) > 0 else 1.0


    # 3. Shortest paths
    graph = scipy.sparse.csr_matrix(distance_matrix)
    dist_matrix, predecessors = shortest_path(graph, directed=False, return_predecessors=True)
    shortest_path_count = np.zeros_like(distance_matrix, dtype=float)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Count how many shortest paths between other nodes pass through edge (i, j)
                for start_node in range(n):
                    for end_node in range(n):
                        if start_node != end_node and start_node != i and start_node != j and end_node != i and end_node != j:
                            path = []
                            current = end_node
                            while current != start_node:
                                path.append(current)
                                current = predecessors[start_node, current]
                                if current == -9999: #No path exists
                                    path = []
                                    break
                            path.append(start_node)
                            path = path[::-1] #reverse the array

                            #Check the edge is in path or not.
                            for k in range(len(path) - 1):
                                if (path[k] == i and path[k+1] == j) or (path[k] == j and path[k+1] == i):
                                    shortest_path_count[i, j] += 1
                                    break


    # Combine the factors
    heuristics_matrix = inverse_distance * degree_penalty * (1 + shortest_path_count)

    # 4. Sparsification
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 40)  # Remove the bottom 40%
    heuristics_matrix[heuristics_matrix < threshold] = 0

    return heuristics_matrix
```
