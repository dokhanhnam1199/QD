```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling,
    incorporating adaptive scaling, local neighborhood in degree calculation, and noise injection.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                         distance_matrix[i][j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the
                      promise of including the corresponding edge in the TSP solution.
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Adaptive Node Proximity (Inverse Distance with Adaptive Scaling)
    inverse_distance = 1 / (distance_matrix + 1e-6)
    adaptive_scale = np.median(distance_matrix) #Robust to outliers
    proximity_factor = adaptive_scale / (distance_matrix + 1e-6)
    node_proximity = inverse_distance * proximity_factor

    # 2. Local Neighborhood Degree Penalty
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Define a local neighborhood based on a fraction of the average distance
                neighborhood_radius = np.mean(distance_matrix[i, :]) * 0.75  # Adjust 0.75 as needed
                degree_i = np.sum(distance_matrix[i, :] < neighborhood_radius) # Count neighbors within the radius
                degree_j = np.sum(distance_matrix[j, :] < neighborhood_radius)
                degree_penalty[i, j] = 1.0 / (degree_i * degree_j + 1e-6)

    # 3. Shortest Path Consideration (Exponential Decay)
    shortest_path_bonus = np.zeros_like(distance_matrix, dtype=float)
    adaptive_mean_distance = np.mean(distance_matrix)  # Using the adaptive mean distance
    for i in range(n):
        for j in range(n):
            if i != j:
                shortest_path_bonus[i, j] = np.exp(-distance_matrix[i, j] / adaptive_mean_distance)


    # Combine the factors
    heuristics_matrix = node_proximity * degree_penalty * shortest_path_bonus

    # 4. Sparsification with dynamic percentile
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 30) #Remove the bottom 30% edges.
    heuristics_matrix[heuristics_matrix < threshold] = 0


    # 5. Noise Injection for Exploration
    noise_level = 0.05 * np.mean(heuristics_matrix[heuristics_matrix > 0]) #Adaptive noise level

    noise = np.random.normal(0, noise_level, size=heuristics_matrix.shape)
    heuristics_matrix = heuristics_matrix + noise
    heuristics_matrix[heuristics_matrix < 0] = 0  # Ensure non-negative values

    return heuristics_matrix
```
