```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling,
    incorporating node distribution, edge clustering, and adaptive sparsification.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                         distance_matrix[i][j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the
                      promise of including the corresponding edge in the TSP solution.
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance (basic desirability)
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # 2. Node degree (encourage exploration from sparsely connected nodes)
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_i = np.sum(distance_matrix[i, :] > 0)  #number of adjacent nodes for node i.
                degree_j = np.sum(distance_matrix[j, :] > 0)  #number of adjacent nodes for node j.
                degree_penalty[i, j] = 1.0 / (degree_i * degree_j + 1e-6)

    # 3. Shortest Path Consideration
    shortest_path_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                shortest_path_bonus[i, j] = np.exp(-distance_matrix[i,j]/np.mean(distance_matrix))  # Favors edges with shorter distances

    # 4. Edge Clustering (Encourage edges that are part of local clusters)
    clustering_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Check neighbors of i and j. If they are close, give a bonus
                neighbors_i = np.argsort(distance_matrix[i, :])[1:4]  # 3 nearest neighbors excluding itself
                neighbors_j = np.argsort(distance_matrix[j, :])[1:4]  # 3 nearest neighbors excluding itself

                common_neighbors = len(np.intersect1d(neighbors_i, neighbors_j))
                clustering_bonus[i, j] = common_neighbors / 3.0  # Higher if they share neighbors

    # Combine the factors
    heuristics_matrix = inverse_distance * degree_penalty * shortest_path_bonus * (1 + clustering_bonus) #clustering bonus added

    # 5. Adaptive Sparsification (set less promising edges to zero, adaptive threshold)
    # Adjust threshold based on problem size, ensure at least k edges per node.
    k = max(2, int(np.log(n)))  # Aim for at least log(n) edges per node on average after sparsification
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 10) # remove lower 10%
    heuristics_matrix_temp = np.copy(heuristics_matrix) # copy to check condition
    heuristics_matrix_temp[heuristics_matrix_temp < threshold] = 0

    # check that each node have at least K edges. Restore edge if not.
    for i in range(n):
        if np.sum(heuristics_matrix_temp[i,:]>0) < k:
            #Get the edges with higher scores to revert
            idx_to_restore = np.argsort(heuristics_matrix[i,:])[:k]

            for idx in idx_to_restore:
                heuristics_matrix_temp[i,idx] = heuristics_matrix[i,idx]
                heuristics_matrix_temp[idx,i] = heuristics_matrix[idx,i]


    # Apply adaptive sparsification based on k-nearest neighbors.
    # For each node, keep only the k best edges.
    heuristics_matrix = np.zeros_like(distance_matrix) # Reinitialize to ensure the k constraint

    for i in range(n):
        # Identify the indices of the k smallest distances from node i
        nearest_neighbors_idx = np.argsort(distance_matrix[i, :])[1:k+1] # Exclude self-loop
        for j in nearest_neighbors_idx:
           heuristics_matrix[i,j] = heuristics_matrix_temp[i,j]
           heuristics_matrix[j,i] = heuristics_matrix_temp[j,i] #ensure symmetry

    return heuristics_matrix
```
