```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using stochastic solution sampling.

    This version combines several factors to estimate the promise of including each edge in a solution.
    It also sparsifies the matrix by setting unpromising elements to zero.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                        distance_matrix[i, j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing the heuristic values
                     for each edge. Higher values indicate a more promising edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance: Shorter edges are generally more desirable.
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero.

    # 2. Nearest neighbor heuristic: Prefer edges connecting to cities that are close to each other.
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # Consider top 3 nearest neighbors

    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if j in nearest_neighbors[i]:
                nearest_neighbor_bonus[i, j] = 0.5 #Bonus if node j is among i's nearest neighbors

    # 3. Avoid long edges that might cut across the optimal path: Penalize large distances
    distance_penalty = np.clip(1 - (distance_matrix / np.mean(distance_matrix)), 0, 1)

    # 4. Combine the factors: weighted sum of inverse distance, nearest neighbor bonus, and distance penalty.
    heuristic_matrix = 0.6 * inverse_distance + 0.3 * nearest_neighbor_bonus + 0.1 * distance_penalty

    # 5. Sparsification: Set heuristic values to zero for edges with very low promise.
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25)  # Dynamic Threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0

    #Set diagonal elements to zero:
    for i in range(n):
        heuristic_matrix[i, i] = 0
    return heuristic_matrix
```
