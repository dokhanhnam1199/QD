```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using stochastic solution sampling.

    Combines multiple factors to assess edge promise and sparsifies the matrix.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Heuristic matrix indicating the desirability of including each edge.
                      Values closer to 1 indicate higher desirability, 0 indicates exclusion.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate inverse distance (closer is better)
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to prevent division by zero

    # Calculate row-wise and column-wise centrality measures (nodes with high degree)
    row_centrality = np.sum(inverse_distance, axis=1)
    col_centrality = np.sum(inverse_distance, axis=0)

    # Normalize centrality measures to range [0, 1]
    row_centrality_normalized = (row_centrality - np.min(row_centrality)) / (np.max(row_centrality) - np.min(row_centrality) + 1e-9)
    col_centrality_normalized = (col_centrality - np.min(col_centrality)) / (np.max(col_centrality) - np.min(col_centrality) + 1e-9)

    # Combine factors: Inverse distance, row centrality, and col centrality
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = (
                    0.6 * inverse_distance[i, j] +
                    0.2 * row_centrality_normalized[i] +
                    0.2 * col_centrality_normalized[j]
                )
            else:
                heuristic_matrix[i, j] = 0  # No self-loops

    # Normalize the heuristic matrix to the range [0, 1]
    heuristic_matrix_normalized = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9)

    # Sparsify the matrix by setting values below a threshold to zero
    threshold = np.mean(heuristic_matrix_normalized) * 0.3 # Adjust threshold as needed
    heuristic_matrix_normalized[heuristic_matrix_normalized < threshold] = 0

    #Scale between 0 and 1.
    heuristic_matrix_normalized = (heuristic_matrix_normalized - np.min(heuristic_matrix_normalized))/(np.max(heuristic_matrix_normalized) - np.min(heuristic_matrix_normalized) + 1e-9)

    return heuristic_matrix_normalized
```
