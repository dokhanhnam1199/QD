```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, containing heuristic values
                     indicating how promising each edge is. Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate the mean distance for each city to all other cities
    city_mean_distances = np.mean(distance_matrix, axis=1)

    # Calculate the overall mean distance
    overall_mean_distance = np.mean(distance_matrix)
    
    #Combination of heuristics:

    for i in range(n):
        for j in range(n):
            if i != j:
                # Inverse distance (shorter distances are better)
                inverse_distance = 1 / (distance_matrix[i, j] + 1e-9) #avoid division by zero
                
                # Combination of inverse distance and relative mean distance
                heuristic_matrix[i, j] = inverse_distance * (overall_mean_distance / (city_mean_distances[i] + city_mean_distances[j]+ 1e-9) )
            else:
                heuristic_matrix[i, j] = 0  # No self-loops
                
    #Sparsification
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2 # adaptive thresholding

    heuristic_matrix[heuristic_matrix < threshold] = 0 #set lower values to zero to sparsify
    
    return heuristic_matrix
```
