```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This function calculates a heuristic matrix that indicates the
    likelihood of including each edge in the optimal TSP tour. It combines
    several factors, including inverse distance, node degree (favoring less
    connected nodes), and a stochastic element to encourage exploration.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the
            distances between all pairs of cities.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix,
            where each element represents the heuristic value (prior indicator)
            for the corresponding edge. Higher values indicate more promising
            edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance: Shorter distances are more promising.
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node Degree: Preferentially select edges connected to nodes with fewer connections.
    #    This encourages exploration of different parts of the graph and helps to avoid getting stuck in local optima.
    node_degree = np.sum(distance_matrix > 0, axis=0)  # Assuming 0 distance indicates no connection (or same city)
    degree_factor = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            degree_factor[i, j] = (n - node_degree[i] + n - node_degree[j]) / (2 * n) # added together degrees

    # 3. Stochasticity: Adding random noise to encourage exploration.  More noise for worse edges
    stochastic_factor = np.random.rand(n, n) * (distance_matrix / np.max(distance_matrix))  # Scale noise by relative distance

    # Combine the factors
    heuristic_matrix = inverse_distance * degree_factor * (1 + 0.1 * stochastic_factor) #added small amount of stochasticity.


    # 4. Sparsify the matrix:  Zero out unpromising elements.
    threshold = np.percentile(heuristic_matrix[distance_matrix > 0], 20)  # Keep the top 80% edges based on nonzero distances

    heuristic_matrix[distance_matrix > 0] = np.where(heuristic_matrix[distance_matrix > 0] > threshold, heuristic_matrix[distance_matrix > 0], 0)


    return heuristic_matrix
```
