```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling with further improvements.

    This function builds upon heuristics_v1 by refining node degree handling, shortest path prioritization,
    adaptive sparsification, and noise injection for better exploration-exploitation balance in TSP solution sampling.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                         distance_matrix[i][j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the
                      promise of including the corresponding edge in the TSP solution.
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Node Proximity (Inverse Distance with Scaling)
    inverse_distance = 1 / (distance_matrix + 1e-6)
    proximity_factor = np.mean(distance_matrix) / (distance_matrix + 1e-6)  # Scale based on average distance
    node_proximity = inverse_distance * proximity_factor

    # 2. Edge Diversity (Penalize High-Degree Nodes) with refined degree calculation
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Adaptive threshold for degree calculation, using a more robust measure
                threshold_i = np.mean(distance_matrix[i,:])  # Use mean for robustness
                threshold_j = np.mean(distance_matrix[j,:])
                degree_i = np.sum(distance_matrix[i, :] < threshold_i)
                degree_j = np.sum(distance_matrix[j, :] < threshold_j)

                # Penalize high-degree nodes more effectively with an exponential decay
                degree_penalty[i, j] = np.exp(-0.2 * (degree_i + degree_j)) # Adjusted decay rate

    # 3. Shortest Path Consideration with Adaptive Scaling and dynamic temperature
    shortest_path_bonus = np.zeros_like(distance_matrix, dtype=float)
    mean_distance = np.mean(distance_matrix)
    temperature = mean_distance / 4.0  # Dynamic temperature, adjusted divisor
    for i in range(n):
        for j in range(n):
            if i != j:
                shortest_path_bonus[i, j] = np.exp(-2 * distance_matrix[i, j] / temperature)  # Favors shorter edges even more

    # Combine factors
    heuristics_matrix = node_proximity * degree_penalty * shortest_path_bonus

    # 4. Sparsification (Adaptive Thresholding) - Refined sparsification
    # More aggressive sparsification using a dynamic percentile
    sparsification_percentile = 25 # Focus on top edges

    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], sparsification_percentile)
    heuristics_matrix[heuristics_matrix < threshold] = 0

    # Add noise, but scale it adaptively and decrease the impact
    noise_level = 0.001 * np.mean(heuristics_matrix[heuristics_matrix > 0]) # Significantly reduced noise
    noise = np.random.normal(0, noise_level, size=heuristics_matrix.shape)
    heuristics_matrix = heuristics_matrix + noise
    heuristics_matrix[heuristics_matrix < 0] = 0  # Ensure no negative values after adding noise

    return heuristics_matrix
```
