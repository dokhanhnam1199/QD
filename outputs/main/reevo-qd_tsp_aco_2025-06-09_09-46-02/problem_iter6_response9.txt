```python
import numpy as np
from scipy.sparse.csgraph import floyd_warshall

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling.

    This function combines multiple factors to determine the promise of including each edge in a solution.
    It considers:
        1. Inverse distance: Shorter distances are preferred.
        2. Node degree: Edges connected to nodes with fewer connections are favored (encourages exploration).
        3. Global shortest path consideration:  Favors edges that lie on many shortest paths between node pairs.
        4. Sparsification: Sets less promising edges to zero.
        5. Node Importance: Edges connecting more central nodes are favored. Centrality is computed using degree centrality.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                         distance_matrix[i][j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the
                      promise of including the corresponding edge in the TSP solution.
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance (basic desirability)
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # 2. Node degree (encourage exploration from sparsely connected nodes)
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_i = np.sum(distance_matrix[i, :] > 0)
                degree_j = np.sum(distance_matrix[j, :] > 0)
                degree_penalty[i, j] = 1.0 / (degree_i * degree_j + 1e-6)

    # 3. Shortest Path Consideration (using Floyd-Warshall)
    dist_matrix, predecessors = floyd_warshall(distance_matrix, directed=False, return_predecessors=True)
    shortest_path_bonus = np.zeros_like(distance_matrix, dtype=float)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Count how many shortest paths the edge (i, j) participates in
                count = 0
                for start_node in range(n):
                    for end_node in range(n):
                        if start_node != end_node:
                            path = []
                            current = end_node
                            while current != start_node:
                                path.append(current)
                                current = predecessors[start_node, current]
                                if current == -9999:  # No path exists
                                    path = []
                                    break  # Stop traversing if no path exists
                            path.append(start_node)
                            path = path[::-1]

                            # Check if the edge (i, j) is in the shortest path (allowing for both directions)
                            for k in range(len(path) - 1):
                                if (path[k] == i and path[k+1] == j) or (path[k] == j and path[k+1] == i):
                                    count += 1
                                    break

                shortest_path_bonus[i, j] = count

    # 4. Node Importance (Degree Centrality)
    node_degrees = np.sum(distance_matrix > 0, axis=1)
    node_importance = node_degrees / (n - 1 + 1e-6)  # Normalize degrees.  Small constant to avoid division by zero

    importance_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                importance_bonus[i, j] = node_importance[i] * node_importance[j]


    # Combine the factors
    heuristics_matrix = inverse_distance * degree_penalty * shortest_path_bonus * importance_bonus

    # 5. Sparsification (set less promising edges to zero)
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 25) if np.any(heuristics_matrix > 0) else 0
    heuristics_matrix[heuristics_matrix < threshold] = 0

    return heuristics_matrix
```
