```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling with further improvements.

    This function builds upon v1 by introducing more adaptive scaling, refined degree estimation using a variable threshold,
    noise injection that considers the distance matrix characteristics, and dynamic thresholding that adapts to the
    distribution of heuristic values.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                         distance_matrix[i][j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the
                      promise of including the corresponding edge in the TSP solution.
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Node Proximity (Inverse Distance with Adaptive Scaling)
    inverse_distance = 1 / (distance_matrix + 1e-6)
    # Adaptive scaling based on row-wise mean, reflecting local distance characteristics
    proximity_factor = np.zeros_like(distance_matrix)
    for i in range(n):
        proximity_factor[i, :] = np.mean(distance_matrix[i, :]) / (distance_matrix[i, :] + 1e-6)
    node_proximity = inverse_distance * proximity_factor

    # 2. Edge Diversity (Penalize High-Degree Nodes with Variable Threshold)
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Variable threshold based on the standard deviation of distances from node i
                threshold_i = np.mean(distance_matrix[i,:]) + np.std(distance_matrix[i,:])
                degree_i = np.sum(distance_matrix[i, :] < threshold_i)
                threshold_j = np.mean(distance_matrix[j,:]) + np.std(distance_matrix[j,:])
                degree_j = np.sum(distance_matrix[j, :] < threshold_j)
                degree_penalty[i, j] = 1.0 / (degree_i * degree_j + 1e-6)

    # 3. Iterative Refinement (Shortest Path Consideration with Overall Mean Distance)
    shortest_path_bonus = np.zeros_like(distance_matrix, dtype=float)
    mean_distance = np.mean(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                shortest_path_bonus[i, j] = np.exp(-distance_matrix[i, j] / mean_distance)  # Favors shorter edges

    # Combine factors
    heuristics_matrix = node_proximity * degree_penalty * shortest_path_bonus

    # 4. Sparsification (Adaptive Thresholding based on heuristic distribution)
    # Dynamic threshold adjustment based on the mean and standard deviation of non-zero heuristic values
    non_zero_values = heuristics_matrix[heuristics_matrix > 0]
    if len(non_zero_values) > 0:  # Check to avoid errors if heuristics_matrix is all zeros
        threshold = np.mean(non_zero_values) - 0.5 * np.std(non_zero_values)  # Adjust factor (0.5) if needed
        heuristics_matrix[heuristics_matrix < threshold] = 0

    # Add noise proportional to local distances to break symmetry and encourage exploration.
    noise_scale = 0.01 * np.mean(distance_matrix)  # Noise scales with average distance
    noise = np.random.normal(0, noise_scale, size=heuristics_matrix.shape)
    heuristics_matrix = heuristics_matrix + noise
    heuristics_matrix[heuristics_matrix < 0] = 0  # Ensure no negative values after adding noise

    return heuristics_matrix
```
