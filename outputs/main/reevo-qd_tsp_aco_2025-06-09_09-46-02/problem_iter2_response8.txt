```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling.

    This function combines multiple factors to determine the promise of including each edge in a solution.
    It considers:
        1. Inverse distance: Shorter distances are preferred.
        2. Node connectivity: Edges connected to nodes with better overall connectivity are favored.
        3. Shortest path structures: Approximation of whether the edge lies on shortest paths between node pairs.
        4. Sparsification: Sets less promising edges to zero to reduce the search space.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                         distance_matrix[i][j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the
                      promise of including the corresponding edge in the TSP solution.
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance (basic desirability)
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # 2. Node Connectivity (favor well-connected nodes)
    node_connectivity = np.sum(1/(distance_matrix + 1e-6), axis=1) # Sum of inverse distances for each node
    connectivity_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                connectivity_bonus[i, j] = node_connectivity[i] + node_connectivity[j]

    # 3. Shortest Path Structures (approximate shortest path participation)
    shortest_path_bonus = np.zeros_like(distance_matrix, dtype=float)
    mean_distance = np.mean(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                shortest_path_bonus[i, j] = np.exp(-distance_matrix[i, j] / mean_distance)


    # Combine the factors
    heuristics_matrix = inverse_distance * connectivity_bonus * shortest_path_bonus

    # 4. Sparsification (set less promising edges to zero)
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 30)  # remove 30% lowest scored edges
    heuristics_matrix[heuristics_matrix < threshold] = 0

    return heuristics_matrix
```
