```python
import numpy as np
from scipy.sparse.csgraph import floyd_warshall

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling.

    This function combines multiple factors to determine the promise of including each edge in a solution.
    It considers:
        1. Inverse distance: Shorter distances are preferred.
        2. Node degree: Edges connected to nodes with fewer connections are favored (encourages exploration).
        3. Global shortest path consideration: An approximation of whether the edge lies on several shortest paths.
        4. Sparsification: Sets less promising edges to zero.
        5. Connectivity Bonus: Edges between disconnected components are boosted.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                         distance_matrix[i][j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the
                      promise of including the corresponding edge in the TSP solution.
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance (basic desirability)
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # 2. Node degree (encourage exploration from sparsely connected nodes)
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_i = np.sum(distance_matrix[i, :] > 0)  #number of adjacent nodes for node i.
                degree_j = np.sum(distance_matrix[j, :] > 0)  #number of adjacent nodes for node j.
                degree_penalty[i, j] = 1.0 / (degree_i * degree_j + 1e-6)


    # 3. Shortest Path Consideration
    shortest_path_bonus = np.zeros_like(distance_matrix, dtype=float)
    dist_matrix, predecessors = floyd_warshall(distance_matrix, directed=False, return_predecessors=True)
    mean_distance = np.mean(dist_matrix[dist_matrix != np.inf])
    for i in range(n):
        for j in range(n):
            if i != j:
                shortest_path_bonus[i, j] = np.exp(-distance_matrix[i,j]/mean_distance)  # Favors edges with shorter distances

    # 5. Connectivity Bonus: Give high priority to connect the disconnected subgraphs.
    connectivity_bonus = np.zeros_like(distance_matrix, dtype=float)
    # Find the connected components.
    visited = [False] * n
    components = []
    def dfs(node, component):
        visited[node] = True
        component.append(node)
        for neighbor in range(n):
            if distance_matrix[node, neighbor] > 0 and not visited[neighbor]:
                dfs(neighbor, component)

    for i in range(n):
        if not visited[i]:
            component = []
            dfs(i, component)
            components.append(component)

    # Add bonus to links between disconnected components.
    if len(components) > 1:
        for i in range(n):
            for j in range(n):
                if i != j:
                    component_i = -1
                    component_j = -1
                    for k, component in enumerate(components):
                        if i in component:
                            component_i = k
                        if j in component:
                            component_j = k
                    if component_i != component_j:
                        connectivity_bonus[i, j] = 1.0

    # Combine the factors
    heuristics_matrix = inverse_distance * degree_penalty * shortest_path_bonus + connectivity_bonus

    # 4. Sparsification (set less promising edges to zero)
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 25) # remove 25% lowest scored edges
    heuristics_matrix[heuristics_matrix < threshold] = 0

    return heuristics_matrix
```
