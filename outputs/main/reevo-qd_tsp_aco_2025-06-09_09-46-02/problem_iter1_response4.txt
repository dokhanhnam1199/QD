```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between cities.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as the distance matrix,
                    representing the prior indicators of edge inclusion. Higher values
                    indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbor information
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:min(n, 6)] # Consider top 5 nearest neighbors, excluding self
    neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)

    for i in range(n):
        for j_index in range(nearest_neighbors.shape[1]):
            j = nearest_neighbors[i, j_index]
            neighbor_bonus[i, j] = 1.0 / (j_index + 1)  # Closer neighbors get higher bonus

    # Calculate global average distance
    avg_distance = np.mean(distance_matrix[distance_matrix != 0])

    # Combine factors to create the heuristic matrix
    heuristic_matrix = (
        (1 / (distance_matrix + 1e-9)) # Inverse distance. Adding small number to avoid division by zero
        + 0.5 * neighbor_bonus # Nearest neighbor bonus
    )

    # Sparsify the matrix by setting unpromising elements to zero
    threshold = np.quantile(heuristic_matrix[heuristic_matrix != 0], 0.25) #Keep top 75%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalize heuristic matrix to a range between 0 and 1
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
