```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling.

    This version incorporates a refined combination of factors to determine edge selection promise,
    including inverse distance, node degree, shortest paths, and sparsification, with adaptive scaling,
    dynamic thresholds, noise injection, and localized degree estimation.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                         distance_matrix[i][j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the
                      promise of including the corresponding edge in the TSP solution.
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Node Proximity (Inverse Distance with Scaling)
    inverse_distance = 1 / (distance_matrix + 1e-6)
    proximity_factor = np.mean(distance_matrix) / (distance_matrix + 1e-6)
    node_proximity = inverse_distance * proximity_factor

    # 2. Edge Diversity (Penalize High-Degree Nodes)
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                distances_i = np.sort(distance_matrix[i, :])
                threshold_i = distances_i[min(1, n - 1)] if n > 1 else distances_i[0]
                distances_j = np.sort(distance_matrix[j, :])
                threshold_j = distances_j[min(1, n - 1)] if n > 1 else distances_j[0]

                degree_i = np.sum(distance_matrix[i, :] < threshold_i)
                degree_j = np.sum(distance_matrix[j, :] < threshold_j)
                degree_penalty[i, j] = 1.0 / (np.sqrt(degree_i * degree_j) + 1e-6)

    # 3. Shortest Path Consideration with Adaptive Scaling
    shortest_path_bonus = np.zeros_like(distance_matrix, dtype=float)
    mean_distance = np.mean(distance_matrix)
    temperature = mean_distance / 2.0
    for i in range(n):
        for j in range(n):
            if i != j:
                shortest_path_bonus[i, j] = np.exp(-distance_matrix[i, j] / temperature)

    # Combine factors with weighted sum and a sigmoid function
    combined_factor = (0.4 * node_proximity + 0.3 * degree_penalty + 0.3 * shortest_path_bonus)
    heuristics_matrix = 1 / (1 + np.exp(-combined_factor)) # sigmoid to ensure values between 0 and 1


    # 4. Sparsification (Adaptive Thresholding)
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 60)
    heuristics_matrix[heuristics_matrix < threshold] = 0

    # 5. Local neighborhood refinement and adaptive degree estimation
    for i in range(n):
      for j in range(n):
        if heuristics_matrix[i, j] > 0:
          neighborhood_radius = np.mean(distance_matrix[i, :]) * 0.75
          neighbors_i = np.where(distance_matrix[i, :] < neighborhood_radius)[0]
          neighbors_j = np.where(distance_matrix[j, :] < neighborhood_radius)[0]

          # Adaptive degree calculation within the local neighborhood
          local_distances_i = distance_matrix[i, neighbors_i]
          local_threshold_i = np.sort(local_distances_i)[min(1, len(local_distances_i) - 1)] if len(local_distances_i) > 1 else (local_distances_i[0] if len(local_distances_i) > 0 else threshold_i)
          local_distances_j = distance_matrix[j, neighbors_j]
          local_threshold_j = np.sort(local_distances_j)[min(1, len(local_distances_j) - 1)] if len(local_distances_j) > 1 else (local_distances_j[0] if len(local_distances_j) > 0 else threshold_j)

          degree_i_local = np.sum(distance_matrix[i, neighbors_i] < local_threshold_i) if len(neighbors_i) > 0 else 0
          degree_j_local = np.sum(distance_matrix[j, neighbors_j] < local_threshold_j) if len(neighbors_j) > 0 else 0

          # Update the heuristic value based on local degree penalty
          heuristics_matrix[i, j] *= (1.0 / (np.sqrt(degree_i_local * degree_j_local) + 1e-6)) if (degree_i_local > 0 and degree_j_local > 0) else 1

    # 6. Noise Injection - adaptively scaled based on mean of non-zero elements
    noise_level = 0.001 * np.mean(heuristics_matrix[heuristics_matrix > 0])
    noise = np.random.normal(0, noise_level, size=heuristics_matrix.shape)
    heuristics_matrix = heuristics_matrix + noise
    heuristics_matrix[heuristics_matrix < 0] = 0

    return heuristics_matrix
```
