{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling with improvements.\n\n    This function refines the heuristics by incorporating node proximity, edge diversity, and iterative refinement\n    to enhance the exploration-exploitation balance in TSP solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix representing the distances between cities.\n                                         distance_matrix[i][j] is the distance between city i and city j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the\n                      promise of including the corresponding edge in the TSP solution.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Node Proximity (Inverse Distance with Scaling)\n    inverse_distance = 1 / (distance_matrix + 1e-6)\n    proximity_factor = np.mean(distance_matrix) / (distance_matrix + 1e-6)  # Scale based on average distance\n    node_proximity = inverse_distance * proximity_factor\n\n    # 2. Edge Diversity (Penalize High-Degree Nodes) with improved degree calculation\n    degree_penalty = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Adaptive threshold for degree calculation\n                threshold_i = np.median(distance_matrix[i,:])  # Use median for robustness\n                threshold_j = np.median(distance_matrix[j,:])\n                degree_i = np.sum(distance_matrix[i, :] < threshold_i)\n                degree_j = np.sum(distance_matrix[j, :] < threshold_j)\n                degree_penalty[i, j] = 1.0 / (np.sqrt(degree_i * degree_j) + 1e-6)  # Geometric mean\n\n    # 3. Shortest Path Consideration with Adaptive Scaling and dynamic temperature\n    shortest_path_bonus = np.zeros_like(distance_matrix, dtype=float)\n    mean_distance = np.mean(distance_matrix)\n    temperature = mean_distance / 2.0  # Dynamic temperature\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                shortest_path_bonus[i, j] = np.exp(-distance_matrix[i, j] / temperature)  # Favors shorter edges\n\n    # Combine factors\n    heuristics_matrix = node_proximity * degree_penalty * shortest_path_bonus\n\n    # 4. Sparsification (Adaptive Thresholding) - Refined sparsification\n    # More aggressive sparsification in early iterations\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 40)  # remove bottom 40%\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    # Add noise, but scale it adaptively\n    noise_level = 0.005 * np.mean(heuristics_matrix[heuristics_matrix > 0]) # Reduce noise\n    noise = np.random.normal(0, noise_level, size=heuristics_matrix.shape)\n    heuristics_matrix = heuristics_matrix + noise\n    heuristics_matrix[heuristics_matrix < 0] = 0  # Ensure no negative values after adding noise\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling with further improvements.\n\n    This function builds upon heuristics_v1 by refining node degree handling, shortest path prioritization,\n    adaptive sparsification, and noise injection for better exploration-exploitation balance in TSP solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix representing the distances between cities.\n                                         distance_matrix[i][j] is the distance between city i and city j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each element represents the\n                      promise of including the corresponding edge in the TSP solution.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Node Proximity (Inverse Distance with Scaling)\n    inverse_distance = 1 / (distance_matrix + 1e-6)\n    proximity_factor = np.mean(distance_matrix) / (distance_matrix + 1e-6)  # Scale based on average distance\n    node_proximity = inverse_distance * proximity_factor\n\n    # 2. Edge Diversity (Penalize High-Degree Nodes) with refined degree calculation\n    degree_penalty = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Adaptive threshold for degree calculation, using a more robust measure\n                threshold_i = np.mean(distance_matrix[i,:])  # Use mean for robustness\n                threshold_j = np.mean(distance_matrix[j,:])\n                degree_i = np.sum(distance_matrix[i, :] < threshold_i)\n                degree_j = np.sum(distance_matrix[j, :] < threshold_j)\n\n                # Penalize high-degree nodes more effectively with an exponential decay\n                degree_penalty[i, j] = np.exp(-0.1 * (degree_i + degree_j)) # Adjusted decay rate\n\n    # 3. Shortest Path Consideration with Adaptive Scaling and dynamic temperature\n    shortest_path_bonus = np.zeros_like(distance_matrix, dtype=float)\n    mean_distance = np.mean(distance_matrix)\n    temperature = mean_distance / 3.0  # Dynamic temperature, adjusted divisor\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                shortest_path_bonus[i, j] = np.exp(-distance_matrix[i, j] / temperature)  # Favors shorter edges\n\n    # Combine factors\n    heuristics_matrix = node_proximity * degree_penalty * shortest_path_bonus\n\n    # 4. Sparsification (Adaptive Thresholding) - Refined sparsification\n    # More aggressive sparsification using a dynamic percentile\n    sparsification_percentile = 30 # Focus on top edges\n\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], sparsification_percentile)\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    # Add noise, but scale it adaptively and decrease the impact\n    noise_level = 0.002 * np.mean(heuristics_matrix[heuristics_matrix > 0]) # Significantly reduced noise\n    noise = np.random.normal(0, noise_level, size=heuristics_matrix.shape)\n    heuristics_matrix = heuristics_matrix + noise\n    heuristics_matrix[heuristics_matrix < 0] = 0  # Ensure no negative values after adding noise\n\n    return heuristics_matrix\n\n[Reflection]\nRefine degree penalization with exponential decay, prioritize shortest paths more, and reduce noise impact.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}