```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).
    This version combines several factors to estimate the promise of each edge:

    1.  Inverse distance: Shorter edges are generally more promising.
    2.  Nearest neighbor influence: Edges connected to nodes with few nearby neighbors
        are penalized to encourage connecting nodes that might otherwise be isolated.
    3.  Variance penalty: Edges are penalized if they connect nodes whose distances to
        other nodes vary greatly. This encourages smoother routes.
    4. Sparsification: Set low-promise edges to zero, based on a quantile threshold.
    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            representing the heuristic values for each edge.  Higher values indicate
            more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance (primary heuristic)
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Add a small value to avoid division by zero

    # 2. Nearest neighbor influence
    nearest_neighbors = np.zeros(n)
    for i in range(n):
        # Find distances to all other nodes, excluding itself
        distances = distance_matrix[i, :]
        distances_without_self = distances[distances > 0]
        nearest_neighbors[i] = np.mean(np.partition(distances_without_self, 2)[:3]) #average distance to its 3 nearest neighbors

    for i in range(n):
        for j in range(i + 1, n):
            # Penalize edges connected to nodes with few nearby neighbors (higher average nearest neighbor distance).
            heuristic_matrix[i, j] /= (nearest_neighbors[i] * nearest_neighbors[j])**(0.25) # adjusted weight

    # 3. Variance penalty
    node_variances = np.var(distance_matrix, axis=1)
    for i in range(n):
        for j in range(i + 1, n):
            # Penalize edges connecting nodes with high distance variance
            heuristic_matrix[i, j] /= (node_variances[i] * node_variances[j])**(0.125) # adjusted weight

    # Ensure symmetry
    heuristic_matrix = np.triu(heuristic_matrix, 1) + np.triu(heuristic_matrix, 1).transpose()

    # 4. Sparsification
    threshold = np.quantile(heuristic_matrix[np.triu_indices_from(heuristic_matrix, k=1)], 0.25) # adjusted threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
