```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using stochastic solution sampling principles.

    This function calculates a heuristic matrix where each element indicates the
    likelihood of an edge being included in a good TSP solution.  It combines
    several factors, including inverse distance, node degree, and a random component
    to encourage exploration.  The resulting matrix is then sparsified to remove
    edges deemed unlikely to be in the optimal tour.

    Args:
        distance_matrix (np.ndarray): A square, symmetric NumPy array representing the
                                      distances between cities. distance_matrix[i, j]
                                      gives the distance between city i and city j.

    Returns:
        np.ndarray: A NumPy array of the same shape as distance_matrix, where each
                    element represents a heuristic score for the corresponding edge.
                    Higher scores indicate a higher likelihood of the edge being
                    included in an optimal or near-optimal TSP tour.
    """
    n = distance_matrix.shape[0]

    # 1. Inverse Distance: Closer cities are generally preferred.
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero

    # 2. Node Degree:  Prioritize edges connected to nodes with fewer connections so far.
    #    Initially, all nodes have equal degree (0 in the selection process). We simulate that aspect
    #    using a uniform weight

    # 3. Randomness:  Introduce some randomness to explore different solution paths.
    random_component = np.random.rand(n, n) * 0.1 # scaled to be a small fraction

    # 4. Combine the factors:
    heuristic_matrix = inverse_distance + random_component

    # 5. Sparsify the matrix: remove less promising edges to reduce search space.
    #    Calculate a threshold based on the average heuristic value.
    average_heuristic = np.mean(heuristic_matrix)
    threshold = 0.25 * average_heuristic  # Keep only edges significantly better than average

    heuristic_matrix[heuristic_matrix < threshold] = 0.0

    # Ensure symmetry and zero diagonal for correctness
    for i in range(n):
        for j in range(i, n):
            heuristic_matrix[i, j] = heuristic_matrix[j, i] #enforce symmetry
        heuristic_matrix[i,i] = 0.0 #zero diag

    return heuristic_matrix
```
