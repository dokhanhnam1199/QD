```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): A distance matrix representing the distances between cities.

    Returns:
        np.ndarray: A heuristic matrix with values indicating the desirability of each edge.
    """

    n = distance_matrix.shape[0]

    # 1. Inverse distance (as in v1)
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero

    # 2. Nearest neighbor information: Edges to nearest neighbors are more likely to be good
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    for i in range(n):
        for j_index in range(1, min(4, n)):  # Consider the 3 nearest neighbors
            j = nearest_neighbors[i, j_index]
            heuristic_matrix[i, j] += 0.5  # Boost the heuristic value

    # 3. Penalize edges connecting nodes that are already "saturated" (high degree in the heuristic matrix)
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] /= (degree[i] + degree[j])**0.5  #Reduce if high degree

    # 4. Sparsification: Zero out less promising edges to reduce the search space
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.3)  # Keep top 70% of edges
    heuristic_matrix[heuristic_matrix < threshold] = 0


    # 5. Normalize heuristic values to be between 0 and 1
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val


    return heuristic_matrix
```
