```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array representing the heuristic values for each edge.
    """

    n = distance_matrix.shape[0]

    # 1. Inverse Distance: Shorter distances are generally better.
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero.

    # 2. Node Degree: Prefer nodes with low degree to avoid getting stuck early on.
    #    This is approximated by summing inverse distances for each node.
    node_degrees = np.sum(inverse_distance, axis=0)
    node_degree_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            node_degree_matrix[i, j] = node_degrees[i] + node_degrees[j] # Sum degree of i and j

    # 3. Nearest Neighbor: Emphasize edges connecting to nearest neighbors.
    nearest_neighbors = np.zeros((n, n))
    for i in range(n):
        # Get indices of nodes sorted by distance from node i
        nearest_indices = np.argsort(distance_matrix[i, :])
        # Only consider the top k nearest neighbors (e.g., k=5)
        k = min(5, n)  # Consider at most 5 nearest neighbors
        for j in nearest_indices[1:k + 1]:  # Exclude self-loop (index 0)
            nearest_neighbors[i, j] = 1
            nearest_neighbors[j, i] = 1

    # Combine the factors:
    heuristic_matrix = inverse_distance * (1 / (node_degree_matrix + 1e-9)) * (nearest_neighbors + 0.1) # Add small const to ensure nonzero value

    # Sparsification: Set values below a threshold to zero.
    threshold = np.mean(heuristic_matrix) * 0.1 # Dynamic threshold based on the mean

    heuristic_matrix[heuristic_matrix < threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0)  # Remove self-loops

    return heuristic_matrix
```
