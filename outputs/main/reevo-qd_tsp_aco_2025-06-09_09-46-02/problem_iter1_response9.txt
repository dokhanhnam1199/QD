```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP that combines distance, node degree, and
    a stochastic element to estimate the desirability of including an edge.

    Args:
        distance_matrix (np.ndarray): A square matrix where
                                       distance_matrix[i][j] is the distance
                                       between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix,
                    containing heuristic values for each edge.  Higher
                    values indicate a more promising edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance (closer cities are preferred)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Adding a small value to prevent division by zero

    # Node degree preference (prioritize connecting to nodes with fewer connections).
    # Initially, give every node equal 'opportunity'
    node_degree_preference = np.ones(n)

    # Incorporate stochasticity for exploration.  Introduce a temperature parameter to control the randomness
    temperature = 1.0 # Adjust for more or less randomness

    for i in range(n):
        for j in range(n):
            if i != j:
                # Combine inverse distance, node degree, and stochasticity
                heuristic_matrix[i, j] = (inverse_distance[i, j] *
                                           node_degree_preference[i] *
                                           node_degree_preference[j] *
                                           np.random.uniform(0, temperature))

    # Sparsify: set edges with very low heuristic values to zero to encourage focus on promising edges
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25)  # Adaptive threshold based on distribution of values >0.

    heuristic_matrix[heuristic_matrix < threshold] = 0.0

    # Normalize the heuristic matrix to a range of 0 to 1 to keep the values from becoming too large, which will help during sampling

    max_val = np.max(heuristic_matrix)
    if max_val > 0:  # Avoid division by zero if the heuristic matrix is entirely zero
        heuristic_matrix = heuristic_matrix / max_val


    return heuristic_matrix
```
