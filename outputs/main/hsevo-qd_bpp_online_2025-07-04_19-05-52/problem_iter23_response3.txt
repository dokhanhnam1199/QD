```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, existing fill, gap penalty, and item fit."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    max_cap = np.max(bins_remain_cap)

    # Feasibility check
    priorities[~eligible_bins] = -np.inf

    # Fill ratio
    fill_ratio = item / bins_remain_cap
    priorities[eligible_bins] += fill_ratio[eligible_bins]

    # Existing fill bonus
    existing_fill = 1 - (bins_remain_cap / max_cap)
    priorities[eligible_bins] += 0.1 * existing_fill[eligible_bins]

    # Gap penalty
    gap_size = bins_remain_cap - item
    small_gap = gap_size < (0.2 * max_cap)
    priorities[small_gap & eligible_bins] -= 0.05

    # Item size consideration (relative to average fill)
    average_fill = np.mean(1 - (bins_remain_cap / max_cap))
    item_fit_score = item / max_cap
    if 0.05 < abs(item_fit_score - average_fill) < 0.25:
        priorities[eligible_bins] += 0.02

    return priorities
```
