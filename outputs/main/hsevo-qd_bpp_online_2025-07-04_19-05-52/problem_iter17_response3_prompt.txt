{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines fill ratio, existing fill, and fragmentation penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        return np.zeros_like(bins_remain_cap) - np.inf\n\n    # Fill Ratio\n    fill_ratio = item / bins_remain_cap\n    fill_ratio[~eligible_bins] = -np.inf\n    priorities = 0.6 * fill_ratio\n\n    # Existing Fill Bonus\n    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    priorities[eligible_bins] += 0.2 * existing_fill[eligible_bins]\n\n    # Fragmentation Penalty\n    gap_size = bins_remain_cap - item\n    small_gap = gap_size < (0.2 * np.max(bins_remain_cap))\n    priorities[small_gap & eligible_bins] -= 0.15\n    \n    # Scale and Clip\n    priorities = np.clip(priorities, -1, 1)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # A bin must have at least item size capacity\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n      # No bin can fit the item, prioritize creating a new bin. Since we cannot create bins in this problem. We'll assign lowest priority possible\n      return np.zeros_like(bins_remain_cap) - np.inf # Give a large negative number to effectively say these are impossible.\n\n    # First priority: Bins that can fit the item with minimal waste (highest fill ratio). Avoid fragmentation!\n    fill_ratio = item / bins_remain_cap\n    fill_ratio[~eligible_bins] = -np.inf # Disqualify bins that can't fit.\n    priorities = fill_ratio\n\n\n    # Add a small bonus for bins that are already relatively full. This promotes utilizing bins further before opening new ones.\n    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Assuming bins all have same max capacity, normalize\n    priorities[eligible_bins] += 0.1 * existing_fill[eligible_bins] #Adjustable weighting factor to existing_fill bonus.\n\n\n    # Penalty for bins that have *just enough* space; Encourages more even filling\n    # Avoiding situations where next few items can *only* go in that single bin creating bottlenecks.\n\n    small_gap = (bins_remain_cap - item) < (0.2 * np.max(bins_remain_cap)) #Bins with nearly perfect fits\n    priorities[small_gap & eligible_bins] -= 0.05 #Adjustable penalty factor\n\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the first heuristic uses a multi-faceted approach considering utilization, fragmentation, and future packing, while the last one only considers the log of the fill ratio. (2nd) vs (19th) is similar. Comparing (1st) vs (2nd), we see the 1st has increased weights on utilization maximization and near-perfect fit reward and a look-ahead fragmentation penalty; Comparing (3rd) vs (4th), we see (3rd) has the same logic, just a smaller reward for near-perfect fit. Comparing (2nd) vs (3rd), we observe the existing fill bonus weight and near-perfect fit reward are higher in (2nd). (14th) vs (13th), we see that (14th) adds a whole host of parameters and constraints, but doesn't actually implement the core logic, making it less effective. (17th) vs (16th) is similar. Comparing (second worst) vs (worst), we see second worst one lacks necessary logic. Overall: The better heuristics incorporate a combination of factors, use adaptive parameters, and scale and clip the final priorities. Simpler heuristics focusing solely on fill ratio tend to perform poorly. Over-parameterization without core logic is also ineffective.\n- \nOkay, I'm ready to refine \"Current Self-Reflection\" to design better heuristics, keeping in mind the pitfalls of \"Ineffective Self-Reflection\". Let's aim for actionable advice, focusing on structured improvement and avoiding premature complexity.\n\nHere's a redefined approach to self-reflection:\n\n*   **Keywords:** Incremental, Empirical, Contextual, Validation.\n*   **Advice:** Build heuristics iteratively, validating each addition empirically. Consider the problem's context to guide feature selection.\n*   **Avoid:** Over-parameterization early on. Blindly adding features without understanding their impact.\n*   **Explanation:** Prioritize a clear understanding of the heuristic's behavior at each step. Start with a basic solution and only add complexity if proven necessary through careful testing and observation. Focus on data-driven decisions for feature engineering and parameter tuning.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}