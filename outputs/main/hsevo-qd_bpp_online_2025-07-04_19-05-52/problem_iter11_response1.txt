```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, and capacity for bin priority."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Utilization Maximization
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = fill_ratio

    # 2. Existing Fill Bonus
    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[eligible_bins] += 0.2 * existing_fill[eligible_bins]

    # 3. Fragmentation Penalty (Adaptive)
    gap_size = bins_remain_cap - item
    small_gap = gap_size < (0.2 * np.max(bins_remain_cap))
    penalty_factor = 0.15 + 0.07 * (item / np.max(bins_remain_cap))
    priorities[small_gap & eligible_bins] -= penalty_factor

    # 4. Near-Perfect Fit Reward
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.01

    # 5. Remaining Capacity Consideration
    priorities[eligible_bins] += 0.05 * (bins_remain_cap[eligible_bins] / np.max(bins_remain_cap))
    
    # 6. Min Item Size Ratio Consideration
    min_item_size_cap_ratio = 1.2 # Parameter selected to be one to consider bins with similar capacity
    min_capacity_eligible = bins_remain_cap >= item * min_item_size_cap_ratio
    priorities[~min_capacity_eligible] = -np.inf
    
    priorities = np.clip(priorities, -1, 1)
    return priorities
```
