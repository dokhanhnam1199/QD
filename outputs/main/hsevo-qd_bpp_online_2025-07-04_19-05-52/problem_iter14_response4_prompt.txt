{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # A bin must have at least item size capacity\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        # No bin can fit the item, prioritize creating a new bin if possible.  Since not possible assign lowest priority.\n        return np.zeros_like(bins_remain_cap) - np.inf\n\n    # Primary Priority: Maximize bin utilization while minimizing fragmentation.\n    fill_ratio = item / bins_remain_cap\n    fill_ratio[~eligible_bins] = -np.inf  # Disqualify bins that can't fit.\n    priorities = fill_ratio\n\n    # Bonus for bins that are already well-utilized (avoid opening new bins unnecessarily).\n    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    priorities[eligible_bins] += 0.15 * existing_fill[eligible_bins]  # Increased weight\n\n    # Fragmentation Penalty: Heavily penalize bins that would leave small gaps.  Make this adaptive to item size.\n    #  The smaller the average item size is, the more important it becomes to avoid small gaps.\n    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item #Average item size to decide penalty scaling\n\n    small_gap = (bins_remain_cap - item) < (0.2 * np.max(bins_remain_cap))\n    penalty_factor = 0.10 + 0.05*(avg_item_size / np.max(bins_remain_cap)) #Dynamic penalty; adjustable base\n    priorities[small_gap & eligible_bins] -= penalty_factor #Increased base penalty\n\n\n\n    # Reward near-perfect fits, but less so than perfect fills\n    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)\n    priorities[near_perfect_fit & eligible_bins] += 0.02 # Small bonus for perfect fit\n\n    # Scale priorities to ensure a reasonable range\n    priorities = np.clip(priorities, -1, 1)  # Prevent extreme values\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray,\n                well_utilized_weight: float = 0.24728286901450924,\n                small_gap_threshold: float = 0.4985336729381905,\n                penalty_base: float = 0.49469717920928247,\n                penalty_scaling: float = 0.7052548426334041,\n                near_perfect_fit_bonus: float = 0.031543737126602966,\n                clip_lower: float = -1.1063978813760091,\n                clip_upper: float = 0.35396569928206845,\n                rtol: float = 0.0008781615481267307,\n                atol: float = 6.625360861980192e-06,\n                min_item_size_cap_ratio: float = 1.4312050738011082,\n                eligible_bins_multiplier: float = 0.43177516546408823) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        well_utilized_weight: Weight for bins that are already well-utilized.\n        small_gap_threshold: Threshold for considering a gap as small (fraction of max bin cap).\n        penalty_base: Base penalty for small gaps.\n        penalty_scaling: Scaling factor for the small gap penalty based on item size.\n        near_perfect_fit_bonus: Bonus for near-perfect fits.\n        clip_lower: Lower bound for clipping priority values.\n        clip_upper: Upper bound for clipping priority values.\n        rtol: Relative tolerance for near-perfect fit comparison.\n        atol: Absolute tolerance for near-perfect fit comparison.\n        min_item_size_cap_ratio:  A bin must have at least item size cap * this ratio\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # A bin must have at least item size capacity\n    eligible_bins = bins_remain_cap >= item * min_item_size_cap_ratio\n\n    if not np.any(eligible_bins):\n        # No bin can fit the item, prioritize creating a new bin if possible.  Since not possible assign lowest priority.\n        return np.zeros_like(bins_remain_cap) - np.inf\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the 1st heuristic incorporates utilization maximization, existing fill bonus, fragmentation penalty, near-perfect fit reward, remaining capacity consideration, nearly full bin penalty, look-ahead fragmentation penalty, and scaling/clipping, whereas the 20th uses only a logarithmic ratio of item size to remaining capacity. (2nd best) vs (second worst) highlights that even simplified versions including just fill ratio, existing fill bonus, and gap penalties outperform just fill ratio based approach. Comparing (1st) vs (2nd), we observe adjustments to weights (e.g., fill ratio weight, existing fill bonus weight), and the introduction of a \"look-ahead fragmentation penalty\" in the 1st that is not in 2nd. (3rd) vs (4th) shows no differences. Comparing (second worst) vs (worst), we see that while both are rather basic, the second worst incorporates fill ratio, existing fill, and a small gap penalty, providing more nuance than the raw logarithmic ratios of the worst performing heuristics. Overall: More sophisticated heuristics consider multiple factors (utilization, fragmentation, remaining capacity) with weighted bonuses/penalties, adaptive thresholds, and scaling. Simpler heuristics focus primarily on fill ratio and may only consider rudimentary gap penalties. More parameters give better fine-tuning.\n- \nOkay, let's redefine \"Current Self-Reflection\" to be more effective in guiding the design of better heuristics, specifically addressing the pitfalls of ineffective self-reflection:\n\n**Redefined \"Current Self-Reflection\":**\n\n*   **Keywords:** Problem Understanding, Iterative Refinement, Targeted Experimentation, Performance Measurement.\n*   **Advice:** Focus first on *deeply* understanding the core problem constraints and objectives. Design a simple, understandable baseline heuristic addressing these. Then, iteratively improve based on *measurable* performance gains obtained through *targeted* experiments addressing specific weaknesses.\n*   **Avoid:** Premature complexity, untuned parameters, vague \"relevant factors,\" and optimization without clear performance metrics. Resist the urge to add \"everything.\"\n*   **Explanation:** Effective self-reflection focuses on a structured approach. Start simple, understand *why* your heuristic fails, and introduce complexity *only* to address those specific failures. Avoid \"kitchen sink\" heuristics. Prioritize understanding and control over perceived completeness.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}