```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Feasibility check. Ineligible bins get -inf priority.
    priorities[~eligible_bins] = -np.inf

    # 2. Maximize fill ratio (primary objective).
    fill_ratio = item / bins_remain_cap
    priorities[eligible_bins] += fill_ratio[eligible_bins]

    # 3. Fragmentation penalty (adaptive). Avoid small remaining spaces.
    gap_size = bins_remain_cap - item
    max_bin_size = np.max(bins_remain_cap)  # Use for relative comparisons

    # Dynamic threshold based on item size and max bin size
    frag_threshold = 0.1 * max_bin_size + 0.05 * item
    fragmentation_penalty = np.where(
        (gap_size > 0) & (gap_size <= frag_threshold) & eligible_bins,
        -0.25 * (frag_threshold - gap_size) / frag_threshold, # Adaptive penalty
        0
    )

    priorities += fragmentation_penalty

    # 4. Reward near-perfect fits (but less aggressively than fragmentation penalty).
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.1  # Small reward boost

    # 5. Prioritize bins with higher *absolute* remaining capacity (among eligible ones).
    # Keeps options open for future items.  Important for online packing.
    priorities[eligible_bins] += 0.05 * (bins_remain_cap[eligible_bins] / max_bin_size)

    # 6. Existing fill bonus (encourage reusing existing bins).  Reduce its influence.
    existing_fill = 1 - (bins_remain_cap / max_bin_size)
    priorities[eligible_bins] += 0.1 * existing_fill[eligible_bins]

    # 7. Last resort:  If no bins are significantly better, slightly prefer the fullest one.
    # This can break ties in a reasonable way.
    if np.all(np.isclose(priorities, priorities[0])):  # All priorities are almost equal
        priorities[eligible_bins] += 0.01 * existing_fill[eligible_bins]

    return priorities
```
