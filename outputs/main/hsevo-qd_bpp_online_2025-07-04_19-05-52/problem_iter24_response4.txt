```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Improved priority function focusing on reducing fragmentation, maximizing bin utilization,
    and adapting to item sizes. Uses a combination of fill ratio, fragmentation penalties,
    and rewards for desirable bin states.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item
    bin_capacity = np.max(bins_remain_cap)

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Fill Ratio Maximization (Adaptive weight based on item size)
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    fill_ratio_weight = 1.2 + 0.8 * (item / bin_capacity)  # Item size impact
    priorities = fill_ratio_weight * fill_ratio

    # 2. Existing Fill Encouragement (Adjusted weight)
    existing_fill = 1 - (bins_remain_cap / bin_capacity)
    priorities[eligible_bins] += 0.15 * existing_fill[eligible_bins]

    # 3. Fragmentation Penalty (Dynamic threshold and penalty)
    gap_size = bins_remain_cap - item
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item
    fragmentation_threshold = 0.15 * bin_capacity + 0.05 * avg_item_size  # Adaptive
    small_gap = gap_size < fragmentation_threshold
    penalty_factor = 0.1 + 0.15 * (item / bin_capacity)  # Item-size sensitive
    priorities[small_gap & eligible_bins] -= penalty_factor

    # 4. Near-Perfect Fit Reward (Slightly enhanced)
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.07

    # 5. Remaining Capacity Prioritization (Reduced weight)
    priorities[eligible_bins] += 0.03 * (bins_remain_cap[eligible_bins] / bin_capacity)

    # 6. Nearly Full Penalty (Adaptive Threshold and Stronger Penalty)
    min_useful_capacity = 0.1 * bin_capacity  # More aggressive limit
    nearly_full = gap_size < min_useful_capacity
    priorities[nearly_full & eligible_bins] -= 0.2  # Increased penalty

    # 7. Look-Ahead Fragmentation Penalty (Relative to smallest item - Refined threshold and penalty)
    min_item_size = np.min(item) if isinstance(item, np.ndarray) else item
    if min_item_size > 0:
        very_small_gap = gap_size < (0.3 * min_item_size)  # Tuned threshold
        priorities[very_small_gap & eligible_bins] -= 0.25  # Increased penalty

    # 8. Half-Full Reward (More targeted range and reward)
    half_full_range_lower = 0.42 * bin_capacity
    half_full_range_upper = 0.58 * bin_capacity

    close_to_half = (bins_remain_cap >= (item + half_full_range_lower)) & (bins_remain_cap <= (item + half_full_range_upper))
    priorities[close_to_half & eligible_bins] += 0.1

    # 9. Avoid Overfilling (Strong penalty for exceeding capacity by a small margin due to floating point errors)
    overfill = (bins_remain_cap - item) < -1e-6 # Tolerate small negative values due to floating point inaccuracies
    priorities[overfill] = -np.inf # Disqualify bins

    # 10. Scale and Clip
    priorities = np.clip(priorities, -1, 1)
    return priorities
```
