```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., all zeros).
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give higher priority to bins that can fit the item.
    fit_indices = np.where(bins_remain_cap >= item)[0]
    if len(fit_indices) > 0:
        # Prioritize bins that are filled more completely after adding the item
        # but avoid bins that are filled too closely. This prevents fragmentation.

        post_fill_ratios = item / bins_remain_cap[fit_indices]
        # Apply a sigmoid-like function to balance complete filling and avoiding overflow.
        priorities[fit_indices] = np.exp(-np.abs(post_fill_ratios - 0.9))  # Peak priority around 90% full

        # Add small extra to those closest to capacity without overflow
        remaining = bins_remain_cap[fit_indices] - item
        priorities[fit_indices] += np.where(remaining > 0, np.exp(-1/remaining), 0)

    # Give a negative priority to bins that are already overfull (shouldn't happen normally)
    overfull_indices = np.where(bins_remain_cap < item)[0]
    priorities[overfull_indices] = -1e9  # Very low priority to discourage using

    return priorities
```
