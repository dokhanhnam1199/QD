```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, existing fullness, gap penalty, and look-ahead for bin selection."""

    priorities = np.zeros_like(bins_remain_cap)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Fill Ratio
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = fill_ratio

    # 2. Existing Fill Bonus
    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[eligible_bins] += 0.1 * existing_fill[eligible_bins]

    # 3. Fragmentation Penalty
    small_gap = (bins_remain_cap - item) < (0.2 * np.max(bins_remain_cap))
    priorities[small_gap & eligible_bins] -= 0.05

    # 4. Look-Ahead Fragmentation Penalty (Consolidate smaller items)
    min_item_size = np.min(item) if isinstance(item, np.ndarray) else item
    if min_item_size > 0:
        very_small_gap = (bins_remain_cap - item) < (0.5 * min_item_size)
        priorities[very_small_gap & eligible_bins] -= 0.12
    
    return priorities
```
