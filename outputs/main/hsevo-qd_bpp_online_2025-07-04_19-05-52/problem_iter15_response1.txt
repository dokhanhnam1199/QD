```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Improved priority function focusing on a balance between bin utilization,
    fragmentation avoidance, and adaptability to item sizes.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    bin_capacity = np.max(bins_remain_cap)

    # 1. Fill Ratio Prioritization (Aggressive utilization)
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = 1.3 * fill_ratio  # Increased weight

    # 2. Existing Fill Bonus (More emphasis on partially filled bins)
    existing_fill = 1 - (bins_remain_cap / bin_capacity)
    priorities[eligible_bins] += 0.3 * existing_fill[eligible_bins]  # More significant boost

    # 3. Fragmentation Penalty (Context-aware)
    gap_size = bins_remain_cap - item
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item

    # Dynamic penalty based on item size relative to bin and gap.
    fragment_threshold = 0.2 * bin_capacity #Was 0.2
    small_gap = gap_size < fragment_threshold
    penalty_strength = 0.1 + 0.1 * (avg_item_size / bin_capacity)
    priorities[small_gap & eligible_bins] -= penalty_strength

    # 4. Near-Perfect Fit Reward (Boost for near-optimal packing)
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.05  # Increased reward

    # 5. Remaining Capacity (Favor larger remaining capacity among eligible)
    priorities[eligible_bins] += 0.07 * (bins_remain_cap[eligible_bins] / bin_capacity)

    # 6. Penalize Low-Capacity Bins (More aggressive prevention)
    min_useful_capacity = 0.15 * bin_capacity
    nearly_full = gap_size < min_useful_capacity
    priorities[nearly_full & eligible_bins] -= 0.15 #Increased Penalty

    # 7. Look-Ahead Fragmentation Penalty (Against extremely small gaps)
    min_item_size = np.min(item) if isinstance(item, np.ndarray) else item
    if min_item_size > 0:
        very_small_gap = gap_size < (0.4 * min_item_size) #Reduced Gap Size
        priorities[very_small_gap & eligible_bins] -= 0.18 # Increased Penalty

    # 8. Introduce "Bin Diversity" (Slight randomness to avoid local optima)
    # Encourages exploration of different packing configurations
    priorities[eligible_bins] += np.random.normal(0, 0.01, np.sum(eligible_bins))

    # 9.  Scale and Clip
    priorities = np.clip(priorities, -1, 1)
    return priorities
```
