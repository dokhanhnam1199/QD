```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1:  The 'almost full' bin gets very high priority.  This encourages filling bins.
    almost_full_bonus = np.where(np.abs(bins_remain_cap - item) < 0.01, 100, 0)  # Tunable tolerance (0.01). Large bonus.

    # Heuristic 2: Avoid fragmentation.  Prefer bins that can fit the item reasonably well.
    fit_ratio = np.clip((bins_remain_cap - item) / bins_remain_cap, 0, 1)  # Fraction of remaining space after placing item
    fit_priority = 1 - fit_ratio # Prefer smaller resulting fraction remaining

    # Heuristic 3: A minimum requirement is that the bin has enough room. Assign a very low priority if it doesn't fit.
    too_small_penalty = np.where(bins_remain_cap < item, -1000, 0) # very low score if can't fit

    # Combine the heuristics.
    priorities = almost_full_bonus + fit_priority + too_small_penalty
    return priorities
```
