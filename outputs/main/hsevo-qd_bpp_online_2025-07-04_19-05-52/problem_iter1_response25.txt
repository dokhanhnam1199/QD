```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Higher priority for bins that can accommodate the item
            remaining = cap - item
            priorities[i] = 1.0 / (remaining + 0.0001) # Avoid division by zero; prefer smaller remaining space

            # Penalize bins that become almost full (optional, may need tuning)
            if remaining < 0.1:
              priorities[i] *= 0.5

        else:
            # Very low priority for bins that can't fit the item
            priorities[i] = -1000  # Or some other very low value
    return priorities
```
