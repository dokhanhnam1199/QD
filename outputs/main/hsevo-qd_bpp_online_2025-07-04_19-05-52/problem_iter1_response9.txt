```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are close to the item size,
    but also considers how full the bin is, favoring bins with less
    remaining capacity to avoid leaving many nearly-empty bins. It adds
    a small penalty for bins that cannot fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Initialize penalty for bins that cannot fit the item
    penalty = -1e9  # A very large negative number

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            # Calculate the "closeness" of the item size to the remaining capacity
            closeness = 1.0 / (abs(remaining_capacity - item) + 1e-6) # Avoid division by zero

            # Consider the "fullness" of the bin (inverse of remaining capacity)
            fullness = 1.0 / (remaining_capacity + 1e-6)

            # Combine closeness and fullness to create a priority score
            priorities[i] = closeness + fullness # Adjusted combination strategy
        else:
            priorities[i] = penalty  # Apply penalty if the item doesn't fit

    return priorities
```
