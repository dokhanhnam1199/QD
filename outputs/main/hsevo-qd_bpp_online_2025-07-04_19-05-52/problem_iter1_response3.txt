```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins that can accommodate the item with minimal remaining capacity,
    but avoids bins that are too full or too empty. It incorporates a scaling factor to
    emphasize bins close to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Filter out bins that cannot accommodate the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bin can accommodate, return a very low priority for all bins to signal failure.
        return priorities - np.inf  # Consider an alternative: place in the fullest possible bin (least waste).


    # Calculate remaining capacity after placing the item
    remaining_capacity_after_placement = bins_remain_cap[valid_bins] - item

    # Scale priority based on how closely the remaining capacity matches the item size.
    # The closer the capacity to the item size, the higher the priority.
    # Use an exponential function to give diminishing returns as remaining capacity increases.
    scaling_factor = np.exp(-np.abs(remaining_capacity_after_placement / item))  # scaled between 0 and 1

    # Prioritize bins that leave minimal empty space.  Use 1 / (remaining capacity) where defined
    # Add a small constant to avoid division by zero
    empty_space_penalty = 1 / (remaining_capacity_after_placement + 0.0001)

    # Combine the scaling factor and empty space penalty
    priorities[valid_bins] = scaling_factor * empty_space_penalty

    return priorities
```
