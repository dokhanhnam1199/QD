```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] = 1.0

    # Further prioritize bins where the remaining space after packing the item is minimized.
    # Smaller remainder hints at efficient packing. Add small value to the denominator to prevent division by zero.
    remainder = bins_remain_cap - item
    remainder[remainder < 0] = np.inf #Mark ineligible bins with infinite remainders to avoid them being selected.
    priorities[eligible_bins] += 1.0 / (remainder[eligible_bins] + 0.0001) # Adding 1/remainder as additional prioritization

    # Bonus for bins that are nearly full after the item is placed. This attempts to create full bins
    near_full_threshold = 0.1  # Define what "nearly full" means (remaining capacity < 10% of the bin size). Assumes max bin capacity is 1 (standardized)
    nearly_full_bins = (remainder >= 0) & (remainder <= near_full_threshold)
    priorities[nearly_full_bins] += 5.0 # Large bonus for almost full bins

    # Avoid bins with very large capacity relative to the item to prevent fragmentations. Only when bin eligible
    item_relative_size = item / (bins_remain_cap + 0.0001) #Ratio
    fragmentation_risk = bins_remain_cap > (3*item) # Avoid overly large bins, which may introduce fragmentation.
    priorities[eligible_bins & fragmentation_risk] -= 0.5 #Reduce priorities, small penalty


    return priorities
```
