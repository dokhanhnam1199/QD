```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Improved priority function, balancing various factors.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Fill Ratio - Prioritize bins that are filled well
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = fill_ratio * 0.4 # Scale down

    # 2. Existing Fill Bonus - Encourage filling bins that are already partially filled
    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[eligible_bins] += 0.25 * existing_fill[eligible_bins]

    # 3. Fragmentation Penalty - Penalize bins that will leave small unusable fragments
    gap_size = bins_remain_cap - item
    fragmentation_threshold = 0.1 * np.max(bins_remain_cap) # was 0.2
    small_gap = gap_size < fragmentation_threshold
    priorities[small_gap & eligible_bins] -= 0.2 # Scale Up

    # 4. Near-Perfect Fit Reward - Reward bins that result in a near-perfect fit
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.15

    # 5. Remaining Capacity Consideration - Favor bins with larger *remaining* capacity (exploration)
    priorities[eligible_bins] += 0.10 * (bins_remain_cap[eligible_bins] / np.max(bins_remain_cap)) #Scale up

    # 6. Prevent too small remaining cap
    min_useful_capacity = 0.15 * np.max(bins_remain_cap)
    nearly_full = gap_size < min_useful_capacity
    priorities[nearly_full & eligible_bins] -= 0.25 # Scale up

    # 7. Item Size consideration.  Prioritize bins that better fit item in relative to available space
    item_relative_size = item/np.max(bins_remain_cap)
    priorities[eligible_bins] += 0.1 * (1- np.abs(bins_remain_cap[eligible_bins]/np.max(bins_remain_cap) - item_relative_size))

    # Scale and Clip
    priorities = np.clip(priorities, -1, 1)
    return priorities
```
