```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Improved priority function balancing fill ratio, fragmentation, and capacity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    max_cap = np.max(bins_remain_cap)

    # Feasibility Check
    priorities[~eligible_bins] = -np.inf

    # Fill Ratio
    fill_ratio = item / bins_remain_cap
    priorities[eligible_bins] += fill_ratio[eligible_bins]

    # Existing Fill Bonus
    existing_fill_bonus = 0.15 * (1 - (bins_remain_cap / max_cap))
    priorities[eligible_bins] += existing_fill_bonus[eligible_bins]

    # Fragmentation Penalty
    gap_size = bins_remain_cap - item
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item
    frag_threshold = 0.2 * max_cap
    fragmentation_penalty = 0.1 * (avg_item_size / max_cap)

    small_gap = (gap_size > 0) & (gap_size < frag_threshold)
    priorities[small_gap & eligible_bins] -= fragmentation_penalty

    # Near-Perfect Fit Reward
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.05

    # Remaining Capacity Preference
    priorities[eligible_bins] += 0.03 * (bins_remain_cap[eligible_bins] / max_cap)

    # Minimum Useful Capacity Penalty
    min_useful_capacity = 0.15 * max_cap
    nearly_full = (gap_size > 0) & (gap_size < min_useful_capacity)
    priorities[nearly_full & eligible_bins] -= 0.2
    
    #Item size consideration
    average_fill = np.mean(1 - (bins_remain_cap / max_cap))
    item_fit_score = item / max_cap

    if 0.05 < abs(item_fit_score - average_fill) < 0.25:
        priorities[eligible_bins] += 0.02
    

    # A bin must have at least item size capacity. Adapt min_item_size_cap_ratio from priority_v1
    min_item_size_cap_ratio = 1.2934804877229156
    eligible_bins_v2 = bins_remain_cap >= item * min_item_size_cap_ratio
    priorities[~eligible_bins_v2 & eligible_bins] -= 0.1  #slightly penalize bins failing new criteria but initially eligible

    # Clip for stability
    priorities = np.clip(priorities, -1, 1)
    

    return priorities
```
