```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Improved priority function focusing on best fit, reduced fragmentation,
    and adaptive penalties based on item and bin characteristics.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Best Fit Primary: Minimize wasted space - SIGNIFICANTLY increased weight
    waste = bins_remain_cap - item
    priorities = -waste  # Lower waste is better, so negate
    priorities[~eligible_bins] = -np.inf
    priorities = 2.0 * priorities  # Strong emphasis on best fit

    # 2. Fragmentation Penalty:  Adaptive and more aggressive for small gaps
    max_bin_cap = np.max(bins_remain_cap)
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item

    #  Prioritize the penalty such that bins that have a small amount of waste and items that
    # are small themselves are more heavily penalized, encouraging better use of space.
    small_gap_threshold = 0.2 * max_bin_cap
    fragmentation_penalty = 0.25 * (avg_item_size / max_bin_cap) #Scale by the max bin cap
    small_gap = (waste > 0) & (waste < small_gap_threshold)

    priorities[small_gap & eligible_bins] -= fragmentation_penalty

    # 3. Existing Fill Bonus:  Reward bins that are already somewhat full
    #   - Adjusted to be more sensitive to bins that are more than halfway full
    existing_fill_ratio = 1 - (bins_remain_cap / max_bin_cap)
    mostly_full = existing_fill_ratio > 0.5
    priorities[mostly_full & eligible_bins] += 0.15 * existing_fill_ratio[mostly_full & eligible_bins]

    # 4. Near-Perfect Fit Reward: Even Stronger Reward
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.05  # Higher reward

    # 5. Penalize small remaining capacity after placement. More dynamic.
    min_useful_capacity = 0.1 * max_bin_cap
    nearly_full = (waste > 0) & (waste < min_useful_capacity)
    priorities[nearly_full & eligible_bins] -= 0.175

    # 6. Look-Ahead Penalty:  Stronger penalty for creating tiny fragments relative to item sizes
    min_item_size = np.min(item) if isinstance(item, np.ndarray) else item
    if min_item_size > 0:
        very_small_gap = (waste > 0) & (waste < (0.4 * min_item_size))
        priorities[very_small_gap & eligible_bins] -= 0.20  # Increased penalty

    # 7. Capacity Balancing: Encourage using larger bins when near capacity
    # Only consider when item size exceeds a certain fraction of max_bin_cap
    large_item_threshold = 0.6 * max_bin_cap
    if item > large_item_threshold:
      priorities[eligible_bins] += 0.075 * (bins_remain_cap[eligible_bins] / max_bin_cap)

    # 8. Scaling and Clipping
    priorities = np.clip(priorities, -1, 1)
    return priorities
```
