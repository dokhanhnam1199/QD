```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Advanced priority function focusing on a balanced approach between fill ratio,
    fragmentation control, and look-ahead considerations, with dynamic adjustments.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item
    bin_capacity = np.max(bins_remain_cap)

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Aggressive Fill Ratio with Dynamic Scaling:
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    # Scale fill ratio importance based on item size relative to bin capacity.
    fill_ratio_weight = 1.2 + 0.8 * (item / bin_capacity)
    priorities = fill_ratio_weight * fill_ratio

    # 2. Fragmentation Penalty (Adaptive):
    gap_size = bins_remain_cap - item
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item
    # Increased sensitivity based on the average item size relative to bin size.
    frag_threshold = 0.3 * bin_capacity

    small_gap = gap_size < frag_threshold

    penalty_factor = 0.15 + 0.15 * (avg_item_size / bin_capacity)  # Adjusted penalty scaling.

    priorities[small_gap & eligible_bins] -= penalty_factor

    # 3. Near-Perfect Fit Reward (Enhanced):
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.12  # More significant reward

    # 4. Reward for bins nearing optimal utilization (Dynamic):

    optimal_util_lower = 0.70 * bin_capacity
    optimal_util_upper = 0.90 * bin_capacity

    nearing_optimal = (bins_remain_cap >= item) & (bins_remain_cap - item >= 0) & (bins_remain_cap - item <= (bin_capacity - optimal_util_lower) ) & (bins_remain_cap - item >= (bin_capacity- optimal_util_upper))
    priorities[nearing_optimal & eligible_bins] += 0.1

    # 5. Look-Ahead Fragmentation Penalty (relative to smallest item and item)
    min_item_size = np.min(item) if isinstance(item, np.ndarray) else item

    if min_item_size > 0:
        very_small_gap = gap_size < (0.5 * min_item_size)
        priorities[very_small_gap & eligible_bins] -= 0.25

    # 6. Bins Close to Half-Full (with wider window)
    half_full_range_lower = 0.35 * bin_capacity
    half_full_range_upper = 0.65 * bin_capacity
    close_to_half = (bins_remain_cap >= (item + half_full_range_lower)) & (bins_remain_cap <= (item + half_full_range_upper))
    priorities[close_to_half & eligible_bins] += 0.06

    # 7. Balance bin usage by preferring bins with higher relative fill level (but not too full)
    relative_fill = (bin_capacity - bins_remain_cap) / bin_capacity

    # Avoid bins with very low relative fill AND bins that are too full.

    low_fill = relative_fill < 0.15
    high_fill = relative_fill > 0.95 # Avoid almost full bins

    priorities[~low_fill & ~high_fill & eligible_bins] += 0.04 * relative_fill[~low_fill & ~high_fill & eligible_bins] # Add a slight preference

    # 8. Minimum useful capacity penalty.

    min_useful_capacity = 0.1 * bin_capacity

    nearly_full = gap_size < min_useful_capacity
    priorities[nearly_full & eligible_bins] -= 0.17  # Higher penalty

    #9. Larger remaining capacity (scaled)
    priorities[eligible_bins] += 0.07 * (bins_remain_cap[eligible_bins] / bin_capacity)

    #10. Very Small Items to Almost Empty Bins (Discourages filling up empty bins with small items initially, giving larger items a chance.)

    if item < (0.1 * bin_capacity): # If the item is small relative to bin size.
        almost_empty = bins_remain_cap > (0.9 * bin_capacity) # bin is almost empty

        priorities[almost_empty & eligible_bins] -=0.05

    # 11. Clip and Scale
    priorities = np.clip(priorities, -1, 1)

    return priorities
```
