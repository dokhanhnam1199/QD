```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small negative value to avoid assigning
    # to bins that are too small from the start.
    priorities = np.full(bins_remain_cap.shape, -1e9)

    # Only consider bins where the item fits
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Calculate the wasted space if the item is placed in each bin
        wasted_space = bins_remain_cap[valid_bins] - item

        # Give a higher priority to bins with less wasted space, but avoid near-empty
        # bins, and give highest priority to bins that fits the items nearly perfectly
        priorities[valid_bins] = (bins_remain_cap[valid_bins] * item) / (wasted_space + 1e-6)  # Avoid division by zero

        # Give an extra bonus if placing the item results in a bin being close to full
        fullness_ratio = (item) / (bins_remain_cap[valid_bins] + 1e-6) # How full would be the bin without item if we added the item
        priorities[valid_bins] += np.exp(5 * (fullness_ratio-0.8)) # Try to reach 80% occupancy rate with exponential bonus.

    # If there are no valid bins (item doesn't fit), find the bin with the most space,
    # and give it a very small positive priority to signal the possibility of creating new bin
    # In online bin packing, it's not clear that we could create a new bin at this stage.

    return priorities
```
