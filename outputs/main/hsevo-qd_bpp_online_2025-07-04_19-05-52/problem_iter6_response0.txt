```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin must have at least item size capacity
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # No bin can fit the item, prioritize creating a new bin if possible.  Since not possible assign lowest priority.
        return np.zeros_like(bins_remain_cap) - np.inf

    # Primary Priority: Maximize bin utilization while minimizing fragmentation.
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf  # Disqualify bins that can't fit.
    priorities = fill_ratio

    # Bonus for bins that are already well-utilized (avoid opening new bins unnecessarily).
    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[eligible_bins] += 0.15 * existing_fill[eligible_bins]  # Increased weight

    # Fragmentation Penalty: Heavily penalize bins that would leave small gaps.  Make this adaptive to item size.
    #  The smaller the average item size is, the more important it becomes to avoid small gaps.
    avg_item_size = item # Assuming single item input; if array mean would make sense here
    small_gap_threshold = 0.2 * np.max(bins_remain_cap)
    small_gap = (bins_remain_cap - item) < small_gap_threshold
    
    penalty_factor = 0.10 + 0.05*(avg_item_size / np.max(bins_remain_cap)) #Dynamic penalty; adjustable base
    priorities[small_gap & eligible_bins] -= penalty_factor #Increased base penalty


    # Reward near-perfect fits, but less so than perfect fills
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.02 # Small bonus for perfect fit
    
    # Introduce a capacity-aware penalty for larger remaining capacities to encourage filling smaller bins first.
    # This encourages consolidation and reduces the chance of many bins with large gaps.
    capacity_penalty = bins_remain_cap / np.max(bins_remain_cap)  # Normalize remaining capacity.

    #Apply penalty only to eligible bins, scale the penalty
    priorities[eligible_bins] -= 0.05 * capacity_penalty[eligible_bins]

    # Introduce a bonus for bins that are close to half full before adding the item.
    # This encourages using bins that have some space but aren't too empty.
    half_full_threshold_lower = 0.4 * np.max(bins_remain_cap)
    half_full_threshold_upper = 0.6 * np.max(bins_remain_cap)

    nearly_half_full = (bins_remain_cap >= half_full_threshold_lower) & (bins_remain_cap <= half_full_threshold_upper)
    priorities[nearly_half_full & eligible_bins] += 0.03

    # Scale priorities to ensure a reasonable range
    priorities = np.clip(priorities, -1, 1)  # Prevent extreme values
    return priorities
```
