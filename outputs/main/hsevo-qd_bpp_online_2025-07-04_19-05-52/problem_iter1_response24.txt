```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing inspired priority: prefer bins that can almost perfectly fit the item
    fit_diff = bins_remain_cap - item
    
    # Assign high priority to bins where the item fits with minimal waste.
    # The closer fit, the better.
    
    
    for i in range(len(bins_remain_cap)):
        if fit_diff[i] >= 0:
          priorities[i] = 100 / (fit_diff[i] + 0.001) # Avoid division by zero, inverse of waste
        else:
          priorities[i] = -1000 #Very Low Priority
    
    # Boost priority for bins that are already somewhat filled
    occupancy = 1 - (bins_remain_cap / np.max(bins_remain_cap))  #Normalize between 0 and 1.

    priorities = priorities + occupancy*10  #Adjust the strength of occupancy bonus
    
    return priorities
```
