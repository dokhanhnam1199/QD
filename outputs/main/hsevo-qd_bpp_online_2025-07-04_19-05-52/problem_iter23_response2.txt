```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, fragmentation, and near-fit for bin priority."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    bin_capacity = np.max(bins_remain_cap)

    # 1. Fill Ratio
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = 1.5 * fill_ratio

    # 2. Fragmentation Penalty
    gap_size = bins_remain_cap - item
    small_gap = gap_size < (0.2 * bin_capacity)
    priorities[small_gap & eligible_bins] -= 0.2

    # 3. Near-Perfect Fit Reward
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.05

    # 4. Existing fill
    existing_fill = 1 - (bins_remain_cap / bin_capacity)
    priorities[eligible_bins] += 0.2 * existing_fill[eligible_bins]

    # 5. Nearly full bin penalty
    min_useful_capacity = 0.15 * bin_capacity
    nearly_full = gap_size < min_useful_capacity
    priorities[nearly_full & eligible_bins] -= 0.15

    priorities = np.clip(priorities, -1, 1)

    return priorities
```
