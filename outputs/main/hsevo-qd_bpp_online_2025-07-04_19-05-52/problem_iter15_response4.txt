```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Improved priority function with focus on best fit and reduced fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Best Fit Primary Criterion (Maximize utilization, minimize waste) - HIGHEST weight
    gap_size = bins_remain_cap - item
    priorities[eligible_bins] = -gap_size[eligible_bins] # Smaller gap is better.  Negative because we want to *maximize* the priority.
    priorities[~eligible_bins] = -np.inf  # Ineligible bins have lowest priority.


    # 2.  Slight preference for using existing bins (unless a much better fit is available elsewhere)
    # This is a tie-breaker if gap sizes are similar.  Avoids creating new bins unnecessarily.
    existing_fill_level = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # Normalize to bin size
    priorities[eligible_bins] += 0.05 * existing_fill_level[eligible_bins] # Small bonus


    # 3. Fragmentation Penalty (Heavier penalty for creating small gaps)
    # Penalize bins that will be left with very small capacities, making them unusable.
    min_useful_capacity = 0.2 * np.max(bins_remain_cap) # Up to 20% fragmentation threshold
    nearly_full = gap_size < min_useful_capacity
    priorities[nearly_full & eligible_bins] -= 0.2 # Higher penalty for fragmenation

    # 4.  Look Ahead - Min Item Size
    # If we can leave enough space to still fit the smallest item later, boost priority
    min_item_size = np.min(item) if isinstance(item, np.ndarray) else item

    if min_item_size > 0:
        room_for_min = gap_size >= min_item_size
        priorities[room_for_min & eligible_bins] += 0.08 # Give small boost if we can fit at least one minimal item.


    # 5.  Maximize Remaining Capacity among nearly equal bins
    # Very slight tie breaker for bins that are nearly the same best fit
    remaining_capacity_bonus = bins_remain_cap / np.max(bins_remain_cap) # Normalize

    priorities[eligible_bins] += 0.02 * remaining_capacity_bonus[eligible_bins] # Small bonus for larger remaining capacity



    # 6. Clipping
    priorities = np.clip(priorities, -1, 1)
    return priorities
```
