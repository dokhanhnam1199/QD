```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Improved priority function focusing on reducing fragmentation and maximizing bin utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item
    bin_capacity = np.max(bins_remain_cap)

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Fill Ratio Maximization (Aggressive)
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = 1.6 * fill_ratio  # Even more importance to fill ratio

    # 2. Encourage existing fill (but less aggressively). Adjusted weight
    existing_fill = 1 - (bins_remain_cap / bin_capacity)
    priorities[eligible_bins] += 0.15 * existing_fill[eligible_bins]

    # 3. Fragmentation Penalty (Adaptive and more sensitive) - Reduced threshold and increased penalty
    gap_size = bins_remain_cap - item
    small_gap = gap_size < (0.15 * bin_capacity)
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item
    penalty_factor = 0.25 + 0.1 * (avg_item_size / bin_capacity)  # Increased base penalty
    priorities[small_gap & eligible_bins] -= penalty_factor

    # 4. Near-Perfect Fit Reward (Significant reward) - Tuned threshold
    near_perfect_fit = np.abs(bins_remain_cap - item) <= (0.01 * bin_capacity)
    priorities[near_perfect_fit & eligible_bins] += 0.1

    # 5. Prioritize larger remaining capacity (slightly adjusted weight) - Reduced weight
    priorities[eligible_bins] += 0.03 * (bins_remain_cap[eligible_bins] / bin_capacity)

    # 6. Significant penalty for bins that become nearly full, with dynamic threshold - Adjusted Threshold
    min_useful_capacity = 0.1 * bin_capacity
    nearly_full = gap_size < min_useful_capacity
    priorities[nearly_full & eligible_bins] -= 0.2  # Even greater penalty

    # 7. Look-Ahead Fragmentation Penalty (Relative to smallest item) - Enhanced penalty.
    min_item_size = np.min(item) if isinstance(item, np.ndarray) else item
    if min_item_size > 0:
        very_small_gap = gap_size < (0.3 * min_item_size)  # Reduced threshold
        priorities[very_small_gap & eligible_bins] -= 0.3  # Increased penalty

    # 8. Reward bins close to half-full (Balance utilization with future flexibility) - Widened range and adjusted reward
    half_full_range_lower = 0.35 * bin_capacity
    half_full_range_upper = 0.65 * bin_capacity

    close_to_half = (bins_remain_cap >= (item + half_full_range_lower)) & (bins_remain_cap <= (item + half_full_range_upper))
    priorities[close_to_half & eligible_bins] += 0.1  # Moderate reward

    # 9. Introduce a penalty for leaving large gaps that are difficult to fill later - Dynamic gap penalty
    large_gap = gap_size > (0.7 * bin_capacity)
    priorities[large_gap & eligible_bins] -= 0.15 * (gap_size[large_gap & eligible_bins] / bin_capacity)

    # 10. Scale and Clip
    priorities = np.clip(priorities, -1, 1)

    return priorities
```
