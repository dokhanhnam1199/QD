```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Enhanced priority function considering utilization, fragmentation, and future packing.
    Version 2: Focus on reducing fragmentation and balancing bin utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Utilization Maximization (Fill Ratio) - Emphasized
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = 1.2 * fill_ratio  # Increased weight to prioritize utilization

    # 2. Existing Fill Bonus (Encourage using partially filled bins) - Adjusted weight.
    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[eligible_bins] += 0.25 * existing_fill[eligible_bins]  # Slightly increased bonus

    # 3. Fragmentation Penalty (Adaptive based on remaining capacity and item size) - Tuned
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item
    gap_size = bins_remain_cap - item
    small_gap = gap_size < (0.2 * np.max(bins_remain_cap))  #Same Threshold
    penalty_factor = 0.20 + 0.05 * (avg_item_size / np.max(bins_remain_cap)) # Adjusted Penalty Magnitude
    priorities[small_gap & eligible_bins] -= penalty_factor

    # 4. Near-Perfect Fit Reward (Encourage near-optimal packing) - Modified Condition & Reward
    near_perfect_fit = np.abs(bins_remain_cap - item) <= (0.05 * np.max(bins_remain_cap)) #Fuzzy condition
    priorities[near_perfect_fit & eligible_bins] += 0.08  # Increased reward

    # 5. Remaining Capacity Consideration (Prioritize bins with larger *remaining* capacity among eligible bins)
    # This helps to keep options open for potentially larger future items.  Important!
    priorities[eligible_bins] += 0.07 * (bins_remain_cap[eligible_bins] / np.max(bins_remain_cap))  # Adjusted weight

    # 6. Penalize bins that will be left with capacities that are smaller than a certain threshold (Dynamic threshold)
    min_useful_capacity = 0.15 * np.max(bins_remain_cap)  # Same Threshold
    nearly_full = gap_size < min_useful_capacity
    priorities[nearly_full & eligible_bins] -= 0.15 # Increased penalty

    # 7.  Prioritize bins with a remaining capacity that is close to the average item size
    #  This encourages using bins that can accommodate typical items
    capacity_diff = np.abs(bins_remain_cap - avg_item_size)
    priority_boost = np.exp(-capacity_diff / (0.2 * np.max(bins_remain_cap))) # Gaussian-like boost
    priorities[eligible_bins] += 0.1*priority_boost[eligible_bins]

    # 8. Scale and Clip, with adjusted range
    priorities = np.clip(priorities, -1.2, 1.2) # Slightly extended range
    return priorities
```
