```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    max_capacity = np.max(bins_remain_cap)

    # A bin must have at least item size capacity
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
      # No bin can fit the item, prioritize creating a new bin. Since we cannot create bins in this problem. We'll assign lowest priority possible
      return np.zeros_like(bins_remain_cap) - np.inf # Give a large negative number to effectively say these are impossible.

    # Priority 1: Fill Ratio (Minimize Waste)
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf  # Disqualify bins that can't fit.
    priorities = fill_ratio

    # Priority 2: Existing Fill Level (Use existing bins)
    existing_fill = 1 - (bins_remain_cap / max_capacity)
    priorities[eligible_bins] += 0.15 * existing_fill[eligible_bins]

    # Priority 3: Gap Penalty (Avoid small gaps but less aggressively)
    small_gap = (bins_remain_cap - item) < (0.2 * max_capacity)
    priorities[small_gap & eligible_bins] -= 0.03

    # Priority 4: Bonus for bins with sufficient space for next likely item (Encourage future flexibility)
    # Assuming a rough estimate of the next likely item size (e.g., average of current item or smaller)
    avg_item_size = item * 0.75  # Reduced from 0.8 to 0.75 for more balance
    sufficient_space = (bins_remain_cap - item) >= avg_item_size
    priorities[sufficient_space & eligible_bins] += 0.07  # Reduced bonus from 0.1 to 0.07

    # Priority 5: Slight preference for bins that are not too full, to avoid single point of failure

    not_too_full = bins_remain_cap > (0.1 * max_capacity)
    priorities[not_too_full & eligible_bins] += 0.02

    return priorities
```
