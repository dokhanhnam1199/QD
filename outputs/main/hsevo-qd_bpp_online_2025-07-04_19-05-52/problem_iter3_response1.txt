```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # A bin must have at least item size capacity
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
      # No bin can fit the item, prioritize creating a new bin. Since we cannot create bins in this problem. We'll assign lowest priority possible
      return np.zeros_like(bins_remain_cap) - np.inf # Give a large negative number to effectively say these are impossible.

    # First priority: Bins that can fit the item with minimal waste (highest fill ratio). Avoid fragmentation!
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf # Disqualify bins that can't fit.
    priorities = fill_ratio


    # Add a bonus for bins that are already relatively full. This promotes utilizing bins further before opening new ones.
    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Assuming bins all have same max capacity, normalize
    priorities[eligible_bins] += 0.1 * existing_fill[eligible_bins] #Adjustable weighting factor to existing_fill bonus.

    # Penalty for bins that have *just enough* space; Encourages more even filling
    # Avoiding situations where next few items can *only* go in that single bin creating bottlenecks.

    small_gap = (bins_remain_cap - item) < (0.2 * np.max(bins_remain_cap)) #Bins with nearly perfect fits
    priorities[small_gap & eligible_bins] -= 0.05 #Adjustable penalty factor

    # Bonus for bins that are neither too full nor too empty.  Promotes medium fill levels.
    medium_fill = (bins_remain_cap > 0.2 * np.max(bins_remain_cap)) & (bins_remain_cap < 0.8 * np.max(bins_remain_cap))
    priorities[medium_fill & eligible_bins] += 0.025  # Adjustable bonus factor

    # Introduce a small random factor to break ties and potentially explore different packings.
    priorities[eligible_bins] += np.random.normal(0, 0.005, size=np.sum(eligible_bins)) #Add random noise
    return priorities
```
