```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Improved priority function with adaptive weights and strategic considerations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    max_capacity = np.max(bins_remain_cap)
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item

    # 1. Fill Ratio (Utilization) - Increased weight
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = fill_ratio * 1.2  # Slightly higher weight on utilization

    # 2. Existing Fill Bonus (Encourage using partially filled bins) - Adaptive weight
    existing_fill = 1 - (bins_remain_cap / max_capacity)
    existing_fill_weight = 0.25  # Increased weight
    priorities[eligible_bins] += existing_fill_weight * existing_fill[eligible_bins]

    # 3. Fragmentation Penalty (Adaptive penalty based on gap size)
    gap_size = bins_remain_cap - item
    frag_threshold = 0.2 * max_capacity
    small_gap = gap_size < frag_threshold
    penalty_factor = 0.18 + 0.08 * (avg_item_size / max_capacity) # Adjusted penalty
    priorities[small_gap & eligible_bins] -= penalty_factor

    # 4. Near-Perfect Fit Reward (Slightly Increased)
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.02 # Slight increase

    # 5. Remaining Capacity Consideration (Prioritize larger *remaining* capacity) - Dynamic scaling
    remaining_capacity_bonus = 0.07 * (bins_remain_cap[eligible_bins] / max_capacity)
    priorities[eligible_bins] += remaining_capacity_bonus

    # 6. Penalize small remaining capacities (Dynamic Threshold and stronger penalty)
    min_useful_capacity = 0.15 * max_capacity
    nearly_full = gap_size < min_useful_capacity
    priorities[nearly_full & eligible_bins] -= 0.15 # Increased penalty

    # 7. Lookahead Fragmentation Penalty:
    # Penalize bins where *any* subsequent item of size <= the current item cannot fit well.
    # This is a crucial improvement to avoid creating tiny, unusable gaps.
    # We're simulating placing a smaller or equal sized item to see if we leave a tiny fragment
    potential_waste = gap_size < 2 * avg_item_size #Is there space for an item of size avg_item_size after placing current item?
    priorities[potential_waste & eligible_bins] -= 0.05

    # 8.  Favor bins where the *remaining* capacity, after placing the item, is close
    #     to another item's size (if such an item exists and we know something about the distribution)
    # This is a forward-looking strategy
    # priorities += np.where(eligible_bins, np.exp(-np.abs(gap_size - avg_item_size)/max_capacity), 0) * 0.03

    # 9. Scale and Clip
    priorities = np.clip(priorities, -1, 1)
    return priorities
```
