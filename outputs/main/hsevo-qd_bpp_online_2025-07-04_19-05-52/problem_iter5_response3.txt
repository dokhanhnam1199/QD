```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, existing fill, and gap for bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    # If no bin can fit the item, return -inf priority for all
    if not np.any(eligible_bins):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate fill ratio, penalize ineligible bins
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = fill_ratio.copy()  # Start with fill ratio as base

    # Add existing fill as incentive (higher fill = better)
    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[eligible_bins] += 0.1 * existing_fill[eligible_bins]

    # Small gap penalty to avoid creating tiny gaps
    small_gap = (bins_remain_cap - item) < (0.2 * np.max(bins_remain_cap))
    priorities[small_gap & eligible_bins] -= 0.05

    # Near-perfect fit bonus. Big bonus
    near_perfect = np.abs(bins_remain_cap - item) < (0.05 * np.max(bins_remain_cap))
    priorities[near_perfect & eligible_bins] += 0.2


    return priorities
```
