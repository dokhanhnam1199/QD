```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Bin priority based on fill ratio, fragmentation, and remaining capacity.
    Combines adaptive penalties/rewards for enhanced bin packing.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    max_cap = np.max(bins_remain_cap)

    # 1. Feasibility
    priorities[~eligible_bins] = -np.inf

    # 2. Fill Ratio
    fill_ratio = item / bins_remain_cap
    priorities[eligible_bins] += fill_ratio[eligible_bins]

    # 3. Existing Fill Bonus
    existing_fill_bonus = 0.15 * (1 - (bins_remain_cap / max_cap))
    priorities[eligible_bins] += existing_fill_bonus[eligible_bins]

    # 4. Fragmentation Penalty (Adaptive)
    gap_size = bins_remain_cap - item
    frag_threshold = 0.2 * max_cap
    fragmentation_penalty = 0.1 * (item / max_cap)

    small_gap = (gap_size > 0) & (gap_size < frag_threshold)
    priorities[small_gap & eligible_bins] -= fragmentation_penalty

    # 5. Near-Perfect Fit Reward
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.05

    # 6. Remaining Capacity Preference
    priorities[eligible_bins] += 0.03 * (bins_remain_cap[eligible_bins] / max_cap)

    # 7. Minimum Useful Capacity Penalty
    min_useful_capacity = 0.15 * max_cap
    nearly_full = (gap_size > 0) & (gap_size < min_useful_capacity)
    priorities[nearly_full & eligible_bins] -= 0.2
    
    # 8. Clip priorities
    priorities = np.clip(priorities, -1, 1)

    return priorities
```
