```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Improved priority function focusing on reducing fragmentation and balancing bin usage.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Feasibility (Ensure item fits) - Essential
    priorities[~eligible_bins] = -np.inf

    # 2. Reduced Fragmentation: Prioritize bins where the remaining space is small but useful
    gap_size = bins_remain_cap - item
    max_bin_size = np.max(bins_remain_cap)

    # Define "useful" gap dynamically based on remaining capacity and item size
    min_useful_gap = 0.1 * max_bin_size
    max_useful_gap = 0.3 * max_bin_size #increased from 0.2 to 0.3
    useful_gap_bins = (gap_size >= min_useful_gap) & (gap_size <= max_useful_gap) & eligible_bins
    priorities[useful_gap_bins] += 0.4  # Substantially increased priority
    # Prioritize smaller gaps within the useful range
    priorities[useful_gap_bins] += 0.2 * (1 - (gap_size[useful_gap_bins] - min_useful_gap) / (max_useful_gap - min_useful_gap))

    # 3. Encourage Filling: Reward bins that are already somewhat full.
    existing_fill_ratio = (max_bin_size - bins_remain_cap) / max_bin_size
    priorities[eligible_bins] += 0.15 * existing_fill_ratio[eligible_bins]

    # 4. Discourage Very Small Gaps: Penalize bins that would result in tiny, unusable gaps.
    tiny_gap_threshold = 0.05 * max_bin_size
    tiny_gap_bins = (gap_size > 0) & (gap_size < tiny_gap_threshold) & eligible_bins
    priorities[tiny_gap_bins] -= 0.3 # increased penalty.

    # 5. Capacity balancing: Slightly favour bins with more remaining capacity to keep options open
    priorities[eligible_bins] += 0.05 * (bins_remain_cap[eligible_bins] / max_bin_size)

    # 6. Near Perfect Fit reward.
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.02

    # 7. Clipping and Scaling
    priorities = np.clip(priorities, -1, 1)

    return priorities
```
