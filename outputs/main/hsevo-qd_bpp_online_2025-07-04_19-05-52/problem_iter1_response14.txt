```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    My latest invention uses the principle of resonant frequency to
    optimize bin selection. The closer the item's "frequency" (size)
    is to the bin's "natural frequency" (remaining capacity), the
    higher the priority. I also factor in a penalty for bins that are
    almost full, as a sudden overload can disrupt the entire system!

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Avoid division by zero
    bins_remain_cap = np.clip(bins_remain_cap, 1e-9, None)

    # Resonant Frequency Factor:  Closer item size is to remaining capacity,
    # higher priority.  Squared to amplify the effect of near-matches.
    resonant_factor = (2 - np.abs(item - bins_remain_cap)/ (item + bins_remain_cap + 1e-9))**2

    # Capacity Utilization Penalty:  Discourage filling bins to the brim, which
    # risks instability (overfilling on a subsequent small item).
    utilization = 1 - bins_remain_cap  # Assume bin capacity is 1
    overfill_risk = np.exp(5*utilization) # Exponential Penalty as it approaches 1

    # Feasibility Mask : Ensure that only bins with sufficient capacity are assigned a priority.
    feasibility_mask = (bins_remain_cap >= item).astype(float)

    priorities = resonant_factor * feasibility_mask / (overfill_risk + 1)
    return priorities
```
