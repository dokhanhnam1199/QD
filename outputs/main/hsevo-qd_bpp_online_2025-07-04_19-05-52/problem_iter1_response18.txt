```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Idea: Focus on bins where the item almost fills them, but also avoid overflow
    # Prioritize bins with remaining capacity slightly larger than the item.

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a very negative priority to bins that are too small for the item
    priorities[bins_remain_cap < item] = -np.inf

    # Give bins that fit the item a score based on how well they fill the bin
    # Avoid putting it into bins that are way bigger because those should
    # ideally be reserved for bigger items
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        fill_ratios = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] = np.exp(-np.abs(fill_ratios - 0.8)) # Peak near 80% full
        priorities[valid_bins] *= bins_remain_cap[valid_bins] / np.max(bins_remain_cap) # favour more full bins

    # Small tweak: Add a tiny amount of randomness for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-6

    return priorities
```
