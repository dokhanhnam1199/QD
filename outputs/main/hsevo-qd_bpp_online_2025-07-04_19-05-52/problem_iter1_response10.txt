```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate wasted space if item is placed in each bin.
    wasted_space = bins_remain_cap - item
    
    # Give high priority to bins where the item fits and leaves minimal wasted space.
    # and set a very negative prioritiy to the bins the item can not fit.
    for i in range(len(bins_remain_cap)):
        if wasted_space[i] >= 0:
            # Prioritize bins with smaller wasted space
            priorities[i] = 1.0 / (1e-6 + wasted_space[i])  # Avoid division by zero
            
            # Slightly prefer bins that are already somewhat full (to consolidate usage)
            priorities[i] += (1 - bins_remain_cap[i])  # Higher value when bins_remain_cap is small
        else:
            # Very low priority for bins that can't fit the item.
            priorities[i] = -1e6
    
    return priorities
```
