import numpy as np
import random
import math
import scipy
import torch
def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                well_utilized_weight: float = 0.26739540527941164,
                small_gap_threshold: float = 0.22478725391857268,
                penalty_base: float = 0.7776806467864485,
                penalty_scaling: float = 0.7403027725459688,
                near_perfect_fit_bonus: float = 0.12600964737140238,
                clip_lower: float = -1.1063978813760091,
                clip_upper: float = 0.05020206100100136,
                rtol: float = 0.0001339781734238814,
                atol: float = 6.074383852160195e-06,
                min_item_size_cap_ratio: float = 1.1380925907693251,
                eligible_bins_multiplier: float = 1.6837957980615965) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        well_utilized_weight: Weight for bins that are already well-utilized.
        small_gap_threshold: Threshold for considering a gap as small (fraction of max bin cap).
        penalty_base: Base penalty for small gaps.
        penalty_scaling: Scaling factor for the small gap penalty based on item size.
        near_perfect_fit_bonus: Bonus for near-perfect fits.
        clip_lower: Lower bound for clipping priority values.
        clip_upper: Upper bound for clipping priority values.
        rtol: Relative tolerance for near-perfect fit comparison.
        atol: Absolute tolerance for near-perfect fit comparison.
        min_item_size_cap_ratio:  A bin must have at least item size cap * this ratio
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin must have at least item size capacity
    eligible_bins = bins_remain_cap >= item * min_item_size_cap_ratio

    if not np.any(eligible_bins):
        # No bin can fit the item, prioritize creating a new bin if possible.  Since not possible assign lowest priority.
        return np.zeros_like(bins_remain_cap) - np.inf
