import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                fill_ratio_weight: float = 0.27185683728087884,
                existing_fill_weight: float = 0.9439489511718357,
                fragmentation_penalty: float = 0.8897026564970084,
                small_gap_threshold_ratio: float = 0.14910319697568974,
                clip_min: float = -4.013487062495224,
                clip_max: float = 8.040555082863328) -> np.ndarray:
    """Combines fill ratio, existing fill, and fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # Fill Ratio
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = fill_ratio_weight * fill_ratio

    # Existing Fill Bonus
    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[eligible_bins] += existing_fill_weight * existing_fill[eligible_bins]

    # Fragmentation Penalty
    gap_size = bins_remain_cap - item
    small_gap = gap_size < (small_gap_threshold_ratio * np.max(bins_remain_cap))
    priorities[small_gap & eligible_bins] -= fragmentation_penalty
    
    # Scale and Clip
    priorities = np.clip(priorities, clip_min, clip_max)
    return priorities
