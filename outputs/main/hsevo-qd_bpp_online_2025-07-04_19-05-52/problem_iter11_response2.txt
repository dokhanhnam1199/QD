```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid priority function combining fill ratio, fragmentation, and capacity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    max_cap = np.max(bins_remain_cap)

    # Feasibility check
    priorities[~eligible_bins] = -np.inf

    # Fill Ratio
    fill_ratio = item / bins_remain_cap
    priorities[eligible_bins] += fill_ratio[eligible_bins]

    # Fragmentation penalty (adaptive)
    gap_size = bins_remain_cap - item
    frag_threshold = 0.2 * max_cap
    fragmentation_penalty = 0.1 * (item / max_cap)

    small_gap = (gap_size > 0) & (gap_size < frag_threshold)
    priorities[small_gap & eligible_bins] -= fragmentation_penalty

    # Near-perfect fit bonus
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.05

    # Remaining capacity preference (slight bias)
    priorities[eligible_bins] += 0.03 * (bins_remain_cap[eligible_bins] / max_cap)

    # Clip priorities
    priorities = np.clip(priorities, -1, 1)

    return priorities
```
