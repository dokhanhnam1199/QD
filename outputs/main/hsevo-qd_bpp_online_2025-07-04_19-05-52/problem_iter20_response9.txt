```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio with a fragmentation consideration."""
    priorities = np.zeros_like(bins_remain_cap)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = fill_ratio

    # Penalize bins that would result in small remaining capacity after packing.
    frag_threshold = 0.2 * np.max(bins_remain_cap)  #tuneable param
    fragmentation_penalty = 0.1 #tuneable param
    small_gap = (bins_remain_cap - item) < frag_threshold
    priorities[small_gap & eligible_bins] -= fragmentation_penalty

    return priorities
```
