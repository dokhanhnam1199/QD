import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, existing_fill_weight: float = 0.2601057492520784,
                frag_threshold_coeff: float = 0.1719369807738953, fragmentation_penalty_coeff: float = 0.49394005673792823,
                near_perfect_fit_rtol: float = 6.559282577347577e-05, near_perfect_fit_atol: float = 6.5247755301044245e-06,
                remaining_capacity_weight: float = 0.026026996742055733, min_useful_capacity_coeff: float = 0.21538492440293788,
                min_useful_capacity_penalty: float = 0.24168332313479396, item_fit_score_threshold_lower: float = 0.04867048859589254,
                item_fit_score_threshold_upper: float = 0.23252883001155678, item_fit_score_bonus: float = 0.026821794336693596,
                clip_lower: float = -3.0136674283926137, clip_upper: float = 4.938450997397067) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Improved priority function with adaptive parameters and combined strategies.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        existing_fill_weight: Weight for encouraging existing fill.
        frag_threshold_coeff: Coefficient for fragmentation threshold calculation.
        fragmentation_penalty_coeff: Coefficient for fragmentation penalty calculation.
        near_perfect_fit_rtol: Relative tolerance for near-perfect fit check.
        near_perfect_fit_atol: Absolute tolerance for near-perfect fit check.
        remaining_capacity_weight: Weight for remaining capacity preference.
        min_useful_capacity_coeff: Coefficient for minimum useful capacity calculation.
        min_useful_capacity_penalty: Penalty for nearly full bins.
        item_fit_score_threshold_lower: Lower threshold for item fit score difference.
        item_fit_score_threshold_upper: Upper threshold for item fit score difference.
        item_fit_score_bonus: Bonus for item fit score within the thresholds.
        clip_lower: Lower bound for clipping the priorities.
        clip_upper: Upper bound for clipping the priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    max_cap = np.max(bins_remain_cap)

    # 1. Feasibility Check (Essential - High Priority)
    priorities[~eligible_bins] = -np.inf

    # 2. Fill Ratio (Primary Optimization Goal)
    fill_ratio = item / bins_remain_cap
    priorities[eligible_bins] += fill_ratio[eligible_bins]

    # 3. Encourage Existing Fill (But Moderately)
    existing_fill_bonus = existing_fill_weight * (1 - (bins_remain_cap / max_cap))
    priorities[eligible_bins] += existing_fill_bonus[eligible_bins]

    # 4. Fragmentation Penalty (Adaptive)
    gap_size = bins_remain_cap - item
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item

    # Dynamic penalty based on gap size relative to average item size and max bin size.
    frag_threshold = frag_threshold_coeff * max_cap #If gap is less than 20% of max capacity
    fragmentation_penalty = fragmentation_penalty_coeff * (avg_item_size / max_cap) # penalty relative to item size

    small_gap = (gap_size > 0) & (gap_size < frag_threshold)
    priorities[small_gap & eligible_bins] -= fragmentation_penalty

    # 5. Near-Perfect Fit Reward (Small but consistent)
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=near_perfect_fit_rtol, atol=near_perfect_fit_atol)
    priorities[near_perfect_fit & eligible_bins] += 0.05

    # 6. Remaining Capacity Preference (Slight bias towards larger remaining capacity)
    priorities[eligible_bins] += remaining_capacity_weight * (bins_remain_cap[eligible_bins] / max_cap)

    # 7. Minimum Useful Capacity Penalty (Aggressive to avoid useless small gaps)
    min_useful_capacity = min_useful_capacity_coeff * max_cap
    nearly_full = (gap_size >0 ) & (gap_size < min_useful_capacity)
    priorities[nearly_full & eligible_bins] -= min_useful_capacity_penalty

    # 8. Item Size Consideration: Slightly prefer bins that fit the item well relative to *average* fill level
    average_fill = np.mean(1 - (bins_remain_cap / max_cap))
    item_fit_score = item / max_cap

    # If the item size is close to the average fill level, give a small bonus.
    if item_fit_score_threshold_lower < abs(item_fit_score - average_fill) < item_fit_score_threshold_upper:
        priorities[eligible_bins] += item_fit_score_bonus


    # 9. Scale and Clip (Important for stability)
    priorities = np.clip(priorities, clip_lower, clip_upper)

    return priorities
