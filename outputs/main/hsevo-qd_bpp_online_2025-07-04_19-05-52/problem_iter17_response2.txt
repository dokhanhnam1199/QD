```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fill ratio with fragmentation awareness for bin selection.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # Fill ratio component
    fill_ratios = item / bins_remain_cap
    priorities[eligible_bins] = np.log(fill_ratios[eligible_bins])

    # Fragmentation component - penalize bins where item almost fills it
    remaining_after_fit = bins_remain_cap[eligible_bins] - item
    fragmentation_penalty = np.where(remaining_after_fit / bins_remain_cap[eligible_bins] < 0.2, -0.5, 0) 
    priorities[eligible_bins] += fragmentation_penalty
    
    return priorities
```
