{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines fill ratio, existing fullness, and gap penalty for bin selection.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap)\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        return np.zeros_like(bins_remain_cap) - np.inf\n\n    fill_ratio = item / bins_remain_cap\n    fill_ratio[~eligible_bins] = -np.inf\n    priorities = fill_ratio\n\n    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    priorities[eligible_bins] += 0.1 * existing_fill[eligible_bins]\n\n    small_gap = (bins_remain_cap - item) < (0.2 * np.max(bins_remain_cap))\n    priorities[small_gap & eligible_bins] -= 0.05\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray,\n                well_utilized_weight: float = 0.33684964708141574,\n                small_gap_threshold: float = 0.9937521875311601,\n                penalty_base: float = 0.14087058721910561,\n                penalty_scaling: float = 0.7456715961991748,\n                near_perfect_fit_bonus: float = 0.3262973990916761,\n                clip_lower: float = -0.4853737418644255,\n                clip_upper: float = 0.2862108305319966,\n                rtol: float = 7.942197028166212e-05,\n                atol: float = 7.367572964633593e-06,\n                min_item_size_cap_ratio: float = 1.9040666194598361,\n                eligible_bins_check_ratio: float = 1.0397338542853263) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        well_utilized_weight: Weight for bins that are already well-utilized.\n        small_gap_threshold: Threshold for considering a gap as small (fraction of max bin cap).\n        penalty_base: Base penalty for small gaps.\n        penalty_scaling: Scaling factor for the small gap penalty based on item size.\n        near_perfect_fit_bonus: Bonus for near-perfect fits.\n        clip_lower: Lower bound for clipping priority values.\n        clip_upper: Upper bound for clipping priority values.\n        rtol: Relative tolerance for near-perfect fit comparison.\n        atol: Absolute tolerance for near-perfect fit comparison.\n        min_item_size_cap_ratio:  A bin must have at least item size cap * this ratio\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # A bin must have at least item size capacity\n    eligible_bins = bins_remain_cap >= item * min_item_size_cap_ratio * eligible_bins_check_ratio\n\n    if not np.any(eligible_bins):\n        # No bin can fit the item, prioritize creating a new bin if possible.  Since not possible assign lowest priority.\n        return np.zeros_like(bins_remain_cap) - np.inf\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic directly implements fill ratio, existing fill bonus, fragmentation penalty, near-perfect fit reward, and remaining capacity consideration, while the worst only checks for eligibility. Comparing (2nd best) vs (second worst), we see that the second best adds bin utilization variance penalty, dynamic gap penalty scaling, and reward for creating bins that can fit a specific \"common size\", while the second worst combines fill ratio, existing fullness, and gap penalty. Comparing (1st) vs (2nd), we see that the top heuristic lacks bin utilization variance penalty, dynamic gap penalty scaling, and reward for creating bins that can fit a specific \"common size\" compared to the 2nd ranked heuristic. Comparing (3rd) vs (4th), we see that the 3rd only focuses on fill ratio, existing fill bonus, fragmentation penalty, near-perfect fit reward, and remaining capacity consideration whereas the 4th adds bin utilization variance penalty, dynamic gap penalty scaling, and reward for creating bins that can fit a specific \"common size\". Comparing (second worst) vs (worst), we see that the second worst implements fill ratio, existing fullness, and gap penalty but the worst only checks for eligibility before exiting. Overall: Top heuristics incorporate several factors such as fill ratio, fragmentation penalty, existing fill, and near-perfect fit rewards. The more successful heuristics dynamically adjust parameters based on item size and remaining capacity, and scale/clip the final priorities. Less successful heuristics either lack key features or use fixed parameters. Heavily parameterized functions are ranked lower.\n- \nOkay, let's redefine self-reflection for better heuristic design, focusing on actionable insights and avoiding common pitfalls.\n\nHere's a breakdown:\n\n*   **Keywords:** Objective functions, problem structure, iterative refinement, ablation studies, generalization, adaptability, computational cost, exploration-exploitation balance.\n\n*   **Advice:** Focus on understanding *why* a heuristic works (or doesn't). Analyze performance across diverse problem instances to identify weaknesses and opportunities for improvement. Prioritize adaptability and computational efficiency in design.\n\n*   **Avoid:** Premature complexity, reliance on isolated performance metrics, lack of problem structure analysis, and neglecting computational cost.\n\n*   **Explanation:** Effective self-reflection involves deeply understanding the problem, the heuristic's limitations, and how design choices influence generalization and computational efficiency. Iteratively refine based on rigorous analysis and ablation, always questioning the value of added complexity.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}