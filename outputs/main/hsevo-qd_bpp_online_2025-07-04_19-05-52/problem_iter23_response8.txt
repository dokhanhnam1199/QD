```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Assigns priority to bins based on fill ratio, existing fill, and gap."""
    priorities = np.zeros_like(bins_remain_cap)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = fill_ratio

    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[eligible_bins] += 0.1 * existing_fill[eligible_bins]

    small_gap = (bins_remain_cap - item) < (0.2 * np.max(bins_remain_cap))
    priorities[small_gap & eligible_bins] -= 0.05

    #Bin utilization variance penalty. Encourage filling multiple bins.
    mean_utilization = np.mean(1 - (bins_remain_cap[eligible_bins]/ np.max(bins_remain_cap))) if np.any(eligible_bins) else 0
    utilization_diff = np.abs((1 - (bins_remain_cap[eligible_bins]/ np.max(bins_remain_cap))) - mean_utilization) if np.any(eligible_bins) else np.array([])
    priorities[eligible_bins] -= 0.02 * utilization_diff

    return priorities
```
