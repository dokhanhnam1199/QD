```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, existing fill, and gap, with added capacity check."""
    priorities = np.zeros_like(bins_remain_cap)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = fill_ratio  # Base priority on fill ratio

    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[eligible_bins] += 0.1 * existing_fill[eligible_bins]  # Add a bonus for using partially filled bins

    gap_size = bins_remain_cap - item
    small_gap = gap_size < (0.2 * np.max(bins_remain_cap))
    priorities[small_gap & eligible_bins] -= 0.05 # Reduce priority for creating small gaps

    # Additional capacity check: slight preference for larger remaining capacity
    priorities[eligible_bins] += 0.02 * (bins_remain_cap[eligible_bins] / np.max(bins_remain_cap))

    return priorities
```
