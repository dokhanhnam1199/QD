```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., 0).
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item.
    valid_bins = bins_remain_cap >= item

    # Give high priority to bins where the item fills a large fraction
    # of the remaining capacity, but not too large that it wastes space.
    fill_ratio = item / bins_remain_cap
    priorities[valid_bins] = np.exp(-np.abs(fill_ratio[valid_bins] - 0.9))  # Favor bins filling around 90%

    # Give a slightly lower priority to bins that are almost full
    almost_full_bins = (bins_remain_cap > item) & (bins_remain_cap < item * 1.1)
    priorities[almost_full_bins] += 0.5 * np.exp(-np.abs(fill_ratio[almost_full_bins] - 1.0)) # Favor those close to full

    # Set priority to -inf for bins that cannot accommodate the item.
    priorities[~valid_bins] = -np.inf

    return priorities
```
