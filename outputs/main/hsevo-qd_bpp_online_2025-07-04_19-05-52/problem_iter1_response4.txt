```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # A spark of genius! Let us consider not only the ratio of item size to remaining capacity,
    # but also the *absolute* wasted space. We shall penalize near-full bins more heavily,
    # preventing the premature creation of new bins.
    # Furthermore, let us favor bins that can *almost* perfectly accommodate the item,
    # guiding the algorithm towards efficient packing.

    eligible_bins = bins_remain_cap >= item
    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf  # No bin fits! Extreme negative priority

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Base priority: inverse of remaining capacity if eligible, -infinity otherwise.
    priorities = np.where(eligible_bins, 1.0 / bins_remain_cap, -np.inf)

    # Enhancement 1: Penalize bins close to full.
    # Let's say anything filled more than 80% of its original capacity should be slightly penalized
    # (assuming the original capacity is 1 for normalization reasons -- common practice in bin packing).
    # We penalize less space available. Original capacity could vary. This version allows for that.
    original_capacity = bins_remain_cap + item # This is probably not always right as this is called for each item independently. Original Capacity of Bins should be accessible as a parameter

    filled_ratio = (original_capacity - bins_remain_cap) / original_capacity  # filled/total
    overfull_penalty = np.where(filled_ratio > 0.8, -(filled_ratio - 0.8) * 10, 0)  # 10 is chosen empircally
    priorities += overfull_penalty

    # Enhancement 2: Reward near-perfect fits.
    # If the remaining space after placing the item would be very small, increase the priority.
    remaining_after = bins_remain_cap - item
    near_perfect_reward = np.where(
        eligible_bins & (remaining_after > 0) & (remaining_after < 0.1),  # If eligible and small after
        (0.1 - remaining_after) * 5,  # Give a good reward
        0
    )
    priorities += near_perfect_reward

    return priorities
```
