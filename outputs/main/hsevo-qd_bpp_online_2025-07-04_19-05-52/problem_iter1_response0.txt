```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # First priority: Can the item fit?
            priorities[i] += 1

            # Second priority: How much space will be wasted? Prefer bins where waste is minimized
            waste = cap - item
            priorities[i] += 1 / (waste + 0.00001)  # Avoid division by zero

            # Third priority: Try to fill up bins that are already somewhat full
            priorities[i] += (1 - (cap / (np.max(bins_remain_cap) + 0.00001))) # Bias towards small caps
    return priorities
```
