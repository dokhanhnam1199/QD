```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fills a significant portion
    of the remaining capacity, but avoids bins that are either too full or
    would be left with very little space. It also considers the absolute
    remaining capacity, favoring bins with more space when ratios are similar.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate fill ratio: How much of the remaining capacity the item uses.
            fill_ratio = item / cap

            # Significant fill is good, but not *too* significant.
            if 0.05 <= fill_ratio <= 1.0:  # Modified ratio range to better manage placement. Original was (0 < fill_ratio <= 0.95)
              #We favor bins where the item size approaches the current remaining cap, while keeping it in the feasible area.
              priorities[i] = fill_ratio ** 2  #Squaring makes this value larger

              #Add additional priority if the remaining capacity is high
              priorities[i] += cap / np.max(bins_remain_cap) /100 # normalized remaining capacity/small number so it's a smaller contribution

        else:
            priorities[i] = -np.inf  # Item doesn't fit, so lowest priority.

    return priorities
```
