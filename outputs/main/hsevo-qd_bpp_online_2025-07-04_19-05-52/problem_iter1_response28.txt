```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: First-Fit Decreasing variant: prioritize bins that have enough space
    #               but avoid overfilling, prioritize bins that will leave smallest
    #               remaining space.
    # Heuristic 2: Consider both remaining capacity and relative fullness (occupation rate).
    #               Fuller bins are favored, avoid creating too many almost empty bins.

    # Mask for bins that can accommodate the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bin can accommodate, give lowest priority everywhere, indicating that
        # a new bin is needed. Or potentially allow the item to go to the least full
        # bin, but penalize it heavily. A negative priority can work.
        return -np.ones_like(bins_remain_cap)  # All negative priority

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining space after placing item in valid bins
    remaining_space = bins_remain_cap - item
    remaining_space[remaining_space < 0] = np.inf  # Avoid non-valid operations after this.

    # Heuristic 1: Prioritize smaller remaining space (within valid bins)
    priorities[valid_bins] = -remaining_space[valid_bins]  # More negative = higher priority

    # Heuristic 2: Fuller bins favoured
    occupation_rate = 1 - (bins_remain_cap / bins_remain_cap.max()) #Bins with lower remain_cap have higher occupation rate, thus high priority
    priorities[valid_bins] += occupation_rate[valid_bins] * 0.5 # Weighting the occupation rate. 0.5 seems reasonable. Can tune further.

    # Small adjustment to spread out the priorities further to better discriminate.
    priorities[valid_bins] += np.random.normal(0, 0.01, size=np.sum(valid_bins))

    return priorities
```
