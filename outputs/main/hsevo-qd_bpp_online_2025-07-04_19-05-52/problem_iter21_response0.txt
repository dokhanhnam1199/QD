```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes a balance between bin utilization and future packing flexibility.
    It uses a scoring system based on remaining capacity, fill ratio, and fragmentation,
    with adaptive penalties and rewards.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item
    bin_capacity = np.max(bins_remain_cap)

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Primary: Maximize Fill Ratio (Adaptive Weight)
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    fill_weight = 0.6 + 0.2 * (item / bin_capacity)  # Item-size dependent weight
    priorities = fill_weight * fill_ratio

    # 2. Reduce Fragmentation (Dynamic Penalty)
    gap_size = bins_remain_cap - item
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item
    frag_threshold = 0.3 * bin_capacity  # Adaptive threshold
    fragmentation_penalty = (0.1 + 0.15 * (item / bin_capacity)) * (gap_size / bin_capacity)
    fragmentation_penalty[gap_size >= frag_threshold] = 0  # No penalty for large gaps
    priorities[eligible_bins] -= fragmentation_penalty[eligible_bins]

    # 3. Reward Near-Perfect Fits (Significant Bonus)
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.3

    # 4. Moderate Capacity Utilization (Maintain Flexibility)
    capacity_utilization = (bin_capacity - bins_remain_cap) / bin_capacity
    utilization_reward = 0.15 * capacity_utilization
    priorities[eligible_bins] += utilization_reward[eligible_bins]

    # 5. Discourage Near-Full Bins (Increased Penalty)
    nearly_full_threshold = 0.1 * bin_capacity
    nearly_full = gap_size < nearly_full_threshold
    priorities[nearly_full & eligible_bins] -= 0.25

    # 6. Lookahead Fragmentation (Relative to minimum item, stronger penalty)
    min_item_size = np.min(item) if isinstance(item, np.ndarray) else item
    if min_item_size > 0:
        small_gap_threshold = 0.25 * min_item_size
        very_small_gap = gap_size < small_gap_threshold
        priorities[very_small_gap & eligible_bins] -= 0.3

    # 7. Balance Around Half-Full (Fine-tuning)
    half_full_lower = 0.45 * bin_capacity
    half_full_upper = 0.55 * bin_capacity
    close_to_half = (bins_remain_cap >= (item + half_full_lower)) & (bins_remain_cap <= (item + half_full_upper))
    priorities[close_to_half & eligible_bins] += 0.1

    # 8. Final Clipping and Scaling
    priorities = np.clip(priorities, -1, 1)
    return priorities
```
