{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Improved priority function with adaptive parameters and combined strategies.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        return np.zeros_like(bins_remain_cap) - np.inf\n\n    max_cap = np.max(bins_remain_cap)\n\n    # 1. Feasibility Check (Essential - High Priority)\n    priorities[~eligible_bins] = -np.inf\n\n    # 2. Fill Ratio (Primary Optimization Goal)\n    fill_ratio = item / bins_remain_cap\n    priorities[eligible_bins] += fill_ratio[eligible_bins]\n\n    # 3. Encourage Existing Fill (But Moderately)\n    existing_fill_bonus = 0.15 * (1 - (bins_remain_cap / max_cap))\n    priorities[eligible_bins] += existing_fill_bonus[eligible_bins]\n\n    # 4. Fragmentation Penalty (Adaptive)\n    gap_size = bins_remain_cap - item\n    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item\n\n    # Dynamic penalty based on gap size relative to average item size and max bin size.\n    frag_threshold = 0.2 * max_cap #If gap is less than 20% of max capacity\n    fragmentation_penalty = 0.1 * (avg_item_size / max_cap) # penalty relative to item size\n\n    small_gap = (gap_size > 0) & (gap_size < frag_threshold)\n    priorities[small_gap & eligible_bins] -= fragmentation_penalty\n\n    # 5. Near-Perfect Fit Reward (Small but consistent)\n    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)\n    priorities[near_perfect_fit & eligible_bins] += 0.05\n\n    # 6. Remaining Capacity Preference (Slight bias towards larger remaining capacity)\n    priorities[eligible_bins] += 0.03 * (bins_remain_cap[eligible_bins] / max_cap)\n\n    # 7. Minimum Useful Capacity Penalty (Aggressive to avoid useless small gaps)\n    min_useful_capacity = 0.15 * max_cap\n    nearly_full = (gap_size >0 ) & (gap_size < min_useful_capacity)\n    priorities[nearly_full & eligible_bins] -= 0.2\n\n    # 8. Item Size Consideration: Slightly prefer bins that fit the item well relative to *average* fill level\n    average_fill = np.mean(1 - (bins_remain_cap / max_cap))\n    item_fit_score = item / max_cap\n\n    # If the item size is close to the average fill level, give a small bonus.\n    if 0.05 < abs(item_fit_score - average_fill) < 0.25:\n        priorities[eligible_bins] += 0.02\n\n\n    # 9. Scale and Clip (Important for stability)\n    priorities = np.clip(priorities, -1, 1)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray,\n                well_utilized_weight: float = 0.9767042431939332,\n                small_gap_threshold: float = 0.7661779765338794,\n                penalty_base: float = 0.822658676260284,\n                penalty_scaling: float = 0.5774246707396835,\n                near_perfect_fit_bonus: float = 0.05102813276505112,\n                clip_lower: float = -1.6149819187450574,\n                clip_upper: float = 0.14715493303357707,\n                rtol: float = 9.771420380638054e-05,\n                atol: float = 8.874997683098374e-06,\n                min_item_size_cap_ratio: float = 1.2934804877229156) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        well_utilized_weight: Weight for bins that are already well-utilized.\n        small_gap_threshold: Threshold for considering a gap as small (fraction of max bin cap).\n        penalty_base: Base penalty for small gaps.\n        penalty_scaling: Scaling factor for the small gap penalty based on item size.\n        near_perfect_fit_bonus: Bonus for near-perfect fits.\n        clip_lower: Lower bound for clipping priority values.\n        clip_upper: Upper bound for clipping priority values.\n        rtol: Relative tolerance for near-perfect fit comparison.\n        atol: Absolute tolerance for near-perfect fit comparison.\n        min_item_size_cap_ratio:  A bin must have at least item size cap * this ratio\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # A bin must have at least item size capacity\n    eligible_bins = bins_remain_cap >= item * min_item_size_cap_ratio\n\n    if not np.any(eligible_bins):\n        # No bin can fit the item, prioritize creating a new bin if possible.  Since not possible assign lowest priority.\n        return np.zeros_like(bins_remain_cap) - np.inf\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a multi-faceted approach considering utilization, fragmentation, and remaining capacity, while the worst focuses solely on the item-to-bin capacity ratio. (2nd best) vs (second worst), the second best employs several bonuses and penalties to improve upon the base fill ratio, whereas the second worst only considers fill ratio, existing fill and gap penalty. Comparing (1st) vs (2nd), we see a focus shift towards adaptive parameterization in the second, like using average item size for fragmentation. (3rd) vs (4th) illustrates that the 4th one incorporates additional adaptive strategies, such as dynamically adjusting the fragmentation penalty. Comparing (second worst) vs (worst), we see the second worst combines fill ratio, existing fullness, and gap penalty while the worst only consider the ratio of item size and bins remaining capacity. Overall: The best heuristics prioritize a balanced approach, adapt to problem specifics through dynamic parameters, and implement well-defined penalties and rewards. The worst heuristics lack these considerations, leading to suboptimal bin packing decisions.\n- \nOkay, let's refine \"Current self-reflection\" for better heuristics design, focusing on actionable advice while avoiding common pitfalls.\n\nHere's a breakdown:\n\n*   **Keywords:** Problem constraints, objective function, iterative refinement, contextual adaptation, parameter tuning, performance evaluation, simplicity.\n\n*   **Advice:** Begin with a simple baseline heuristic. Systematically add and refine factors informed by problem constraints and the objective function. Prioritize rigorous performance evaluation after each modification. Contextually adapt parameters.\n\n*   **Avoid:** Overly complex initial designs, neglecting baseline performance measurement, insufficient testing of parameter settings, focusing solely on immediate fit instead of long-term impact.\n\n*   **Explanation:** Effective heuristic design is an iterative process of building from simple solutions. Continuously evaluate and refine based on performance against the objective function.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}