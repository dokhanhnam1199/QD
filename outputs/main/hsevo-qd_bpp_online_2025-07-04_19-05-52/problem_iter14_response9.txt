```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, existing fill, and fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item
    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf
    max_cap = np.max(bins_remain_cap)
    priorities[~eligible_bins] = -np.inf
    fill_ratio = item / bins_remain_cap
    priorities[eligible_bins] += fill_ratio[eligible_bins]
    existing_fill_bonus = 0.15 * (1 - (bins_remain_cap / max_cap))
    priorities[eligible_bins] += existing_fill_bonus[eligible_bins]
    gap_size = bins_remain_cap - item
    frag_threshold = 0.2 * max_cap
    fragmentation_penalty = 0.1 * (item / max_cap)
    small_gap = (gap_size > 0) & (gap_size < frag_threshold)
    priorities[small_gap & eligible_bins] -= fragmentation_penalty
    priorities = np.clip(priorities, -1, 1)
    return priorities
```
