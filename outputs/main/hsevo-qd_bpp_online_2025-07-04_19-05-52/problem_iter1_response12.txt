```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # A bin can only be considered if it can fit the item.
    feasible_bins = bins_remain_cap >= item

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Set a very low priority to infeasible bins to exclude them.
    priorities[~feasible_bins] = -np.inf

    # For feasible bins, calculate the wasted space after placing the item.
    wasted_space = bins_remain_cap[feasible_bins] - item

    # Prioritize bins with less wasted space.
    # Add a small constant to avoid division by zero if item perfectly fits.
    priorities[feasible_bins] = 1 / (wasted_space + 0.0001)

    # Further prioritize bins that are close to being full after adding the item.
    # Higher remaining capacity means lower additional score from this term
    capacity_utilization = (bins_remain_cap[feasible_bins] - wasted_space) / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] += 2 * capacity_utilization

    # Give a slight advantage to almost full bins. This can encourage closing bins.
    almost_full = (bins_remain_cap[feasible_bins] - item) < 0.1 # If remain cap is within 10% of the full cap after insertion, prefer it more.

    priorities[feasible_bins][almost_full] += 1

    return priorities
```
