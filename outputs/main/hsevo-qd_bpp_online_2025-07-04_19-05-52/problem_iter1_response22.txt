```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Assign high priority to bins where the item fits reasonably well,
    # but avoid bins that are almost full or too empty.

    fit_mask = bins_remain_cap >= item  # Only consider bins where the item fits

    if np.any(fit_mask):  # Only calculate priorities if there is any feasible bin
        # Calculate wasted space if we were to place the item in each bin
        wasted_space = bins_remain_cap - item

        # Prioritize bins that minimize wasted space, but not too much.
        # Use a power function to penalize bins with very little or too much waste

        # Normalize wasted space to [0,1] to avoid scaling issues. Also, add a small constant to avoid dividing by zero when normalizing.
        min_waste = np.min(wasted_space[fit_mask])
        max_waste = np.max(wasted_space[fit_mask])
        if max_waste - min_waste > 0:
          normalized_waste = (wasted_space[fit_mask] - min_waste) / (max_waste - min_waste)
        else:
          normalized_waste = np.zeros_like(wasted_space[fit_mask])


        # Prioritize based on 'good fit' using inverted normalized waste.
        # The '3' and '-0.5' are just example parameters, need to be optimized for given settings.
        priorities[fit_mask] = (1 - normalized_waste)**3 - 0.5
        priorities[priorities < 0] = 0

        # Bonus if the item fits perfectly to the bin
        perfect_fit_mask = (wasted_space == 0) & fit_mask
        priorities[perfect_fit_mask] = 1.0

    #if no bins large enough, return zero priorities (meaning cannot add to bin).
    return priorities
```
