```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Eligibility Check
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Fill Ratio Priority (Maximize Utilization)
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = fill_ratio

    # 2. Existing Fill Bonus (Encourage Use of Partially Filled Bins)
    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[eligible_bins] += 0.15 * existing_fill[eligible_bins]

    # 3. Fragmentation Penalty (Adaptive to Item Size and Remaining Capacity)
    #   - Penalize small gaps, but the penalty strength decreases as the remaining capacity increases.
    #   - This makes it less critical to perfectly fill almost empty bins.
    gap_size = bins_remain_cap - item
    small_gap = gap_size > 0
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item
    penalty_factor = 0.10 + 0.05 * (avg_item_size / np.max(bins_remain_cap))
    # Reduce penalty when remaining capacity is high, meaning filling it later is easier
    adaptive_penalty = penalty_factor * (1 - (bins_remain_cap / np.max(bins_remain_cap)))
    priorities[small_gap & eligible_bins] -= adaptive_penalty[small_gap & eligible_bins]


    # 4. Reward Near-Perfect Fits (Prioritize Tight Packing)
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.02

    # 5. Capacity Thresholding (Discourage Overfilling a bin)
    #  - Introduce a cost if filling a bin would lead it to exceed a certain occupancy threshold.
    occupancy_threshold = 0.95 * np.max(bins_remain_cap)  # e.g., 95% full
    post_fill_level = bins_remain_cap - item
    overfill_risk = post_fill_level < occupancy_threshold
    priorities[overfill_risk & eligible_bins] -= 0.07 # Flat Penalty for bins that exceed occupancy_threshold

    # 6. Future Fit Prediction (Penalize bins that will result in many unusable spaces.)
    #    - Estimate the likelihood of future items fitting into the remaining space. If low, penalize it
    #    - This is simplified by estimating likelihood based on remaining space relative to average item size.
    future_fit_likelihood = np.clip(gap_size / avg_item_size, 0, 1)
    priorities[eligible_bins] -= 0.03 * (1 - future_fit_likelihood[eligible_bins])


    # 7. Introduce randomness to break ties and explore the solution space better.
    priorities[eligible_bins] += np.random.normal(0, 0.005, size=np.sum(eligible_bins))

    # 8. Scale priorities and prevent extreme values
    priorities = np.clip(priorities, -1, 1)

    return priorities
```
