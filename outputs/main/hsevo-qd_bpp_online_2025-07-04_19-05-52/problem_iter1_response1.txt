```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version attempts to balance filling bins and avoiding wasted space,
    inspired by the space-time continuum and the curvature induced by mass.
    It gives higher priority to bins that can fit the item with minimal waste
    relative to the bin size, while also penalizing bins that are too full or too empty.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero
    bins_remain_cap = np.maximum(bins_remain_cap, 1e-9)  # Replace zeros with small value

    # 1. Fit penalty: negative if item doesn't fit
    fit_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # 2. Waste ratio: Calculate the ratio of remaining space after adding the item
    # to the original capacity. Lower waste is better.
    waste_ratio = np.clip((bins_remain_cap - item) / bins_remain_cap, 0, 1)  # Ensure ratio is between 0 and 1. Avoid negative value.

    # 3. "Curvature" term: Favor bins with remaining capacity close to item size, but not too close to full.
    #   This helps distribute items and avoid creating extremely full bins early on.
    #   Penalize bins if adding the item makes bin to full, waste_ratio to small
    curvature = np.exp(-10 * np.abs(waste_ratio - 0.5))

    # 4. "Potential Energy": Bins with very little space remaining (small bins_remain_cap) should get higher priority.
    # This reflects a "last resort" attempt to fill bins already substantially used.
    potential_energy = 1 / (bins_remain_cap + 1e-9)

    # Combine the factors.
    priorities =  fit_penalty + 0.5*np.log(potential_energy + 1) - 0.1 * curvature - 0.5 * waste_ratio

    return priorities
```
