```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Enhanced priority function considering utilization, fragmentation, and future packing.
    It adaptively adjusts weights based on item size and remaining capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    max_capacity = np.max(bins_remain_cap)

    # 1. Utilization Maximization (Fill Ratio) - Core component
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf  # Very important
    priorities = fill_ratio

    # 2. Existing Fill Bonus (Encourage using partially filled bins) - Adaptive Weight
    existing_fill = 1 - (bins_remain_cap / max_capacity)
    fill_bonus_weight = 0.15 + 0.1 * (item / max_capacity)  # Smaller items get a slightly lower bonus.
    priorities[eligible_bins] += fill_bonus_weight * existing_fill[eligible_bins]

    # 3. Fragmentation Penalty (Adaptive based on remaining capacity and item size)
    gap_size = bins_remain_cap - item
    small_gap_threshold = 0.2 * max_capacity
    small_gap = gap_size < small_gap_threshold
    
    penalty_factor = 0.2 * (item / max_capacity) + 0.05 # Adapt penalty to item size.  Larger item = larger penalty.
    priorities[small_gap & eligible_bins] -= penalty_factor

    # 4. Near-Perfect Fit Reward (Encourage near-optimal packing) - Reduced magnitude and adaptive
    near_perfect_fit_tolerance = 0.02 * max_capacity # Scale tolerance to max capacity
    near_perfect_fit = np.abs(bins_remain_cap - item) <= near_perfect_fit_tolerance
    perfect_fit_reward = 0.03 * (1 - (item / max_capacity)) # Smaller Items get higher rewards
    priorities[near_perfect_fit & eligible_bins] += perfect_fit_reward

    # 5. Remaining Capacity Consideration (Prioritize bins with larger *remaining* capacity among eligible bins)
    remaining_capacity_bonus = 0.07 * (bins_remain_cap[eligible_bins] / max_capacity)
    priorities[eligible_bins] += remaining_capacity_bonus

    # 6. Penalize bins that will be left with capacities that are smaller than a certain threshold (Dynamic threshold)
    min_useful_capacity = 0.1 * max_capacity
    nearly_full = gap_size < min_useful_capacity
    nearly_full_penalty = 0.12 + 0.03 * (item/max_capacity)
    priorities[nearly_full & eligible_bins] -= nearly_full_penalty

    # 7. Bonus for bins close to half full *after* packing the item
    half_full_target = 0.5 * max_capacity
    close_to_half = np.abs(gap_size - half_full_target) < (0.1 * max_capacity)
    half_full_bonus = 0.04
    priorities[close_to_half & eligible_bins] += half_full_bonus

    # 8. Item size normalization
    item_size_normalized = item / max_capacity

    # 9. If item is very small, slightly prioritize bins that are more empty
    if item_size_normalized < 0.1:
        empty_bin_preference = 0.03 * (1 - existing_fill[eligible_bins])
        priorities[eligible_bins] += empty_bin_preference
        

    # Scale and Clip - Important for stability and preventing domination by any single factor.
    priorities = np.clip(priorities, -1, 1)

    return priorities
```
