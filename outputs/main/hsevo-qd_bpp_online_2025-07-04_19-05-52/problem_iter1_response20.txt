```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Prioritize bins where the item fits
            space_left = cap - item
            # Give higher priority to bins with smaller remaining space after packing
            priorities[i] = 1 / (space_left + 0.0001)  # Adding a small value to avoid division by zero

            #Potentially add a component to further prioritize bins which are mostly full
            priorities[i]+= (1 - (cap/10))  #Assuming bin size is 10

        else:
            # If item doesn't fit, give it a very low priority
            priorities[i] = -1000  #Arbitrary negative value

    return priorities
```
