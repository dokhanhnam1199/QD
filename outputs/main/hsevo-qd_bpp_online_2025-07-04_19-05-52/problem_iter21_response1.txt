```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes a balance between fill level, fragmentation avoidance, and bin selection diversity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item
    bin_capacity = np.max(bins_remain_cap)

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Primary Priority: Fill Ratio (but tempered)
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = 1.2 * fill_ratio # Slightly reduced weight

    # 2. Fragmentation Penalty (Focus on smaller gaps)
    gap_size = bins_remain_cap - item
    small_gap = gap_size < (0.2 * bin_capacity)
    priorities[small_gap & eligible_bins] -= 0.15 # Significant penalty for small gaps

    # 3. Reward Near-Perfect Fit (more impactful)
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.10  # Increased reward

    # 4. Capacity Utilization (Avoid over-filling, but also under-filling)
    capacity_utilization = (bin_capacity - bins_remain_cap) / bin_capacity
    #Penalize bins that are already nearly full
    nearly_full = gap_size < 0.15* bin_capacity
    priorities[nearly_full & eligible_bins] -= 0.2
   #Reward mid-range capacity utilization
    mid_range_util = (capacity_utilization > 0.4) & (capacity_utilization < 0.8)
    priorities[mid_range_util & eligible_bins] += 0.05

    # 5. Remaining Capacity Consideration (Slight preference for larger bins when similar fit)
    priorities[eligible_bins] += 0.03 * (bins_remain_cap[eligible_bins] / bin_capacity)

    # 6. Encourage Diversity (Select less used bins more often when suitable)
    bin_usage_count = np.sum(bins_remain_cap < bin_capacity) #Rough proxy for bin usage
    usage_penalty = bin_usage_count/len(bins_remain_cap)
    priorities[eligible_bins] -= 0.02 * usage_penalty

    #7. Look-Ahead fragmentation using average item size
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item
    very_small_gap = gap_size < (0.3 * avg_item_size)
    priorities[very_small_gap & eligible_bins] -= 0.18

    #8. Clip Priorities (Important for stability)
    priorities = np.clip(priorities, -1, 1)

    return priorities
```
