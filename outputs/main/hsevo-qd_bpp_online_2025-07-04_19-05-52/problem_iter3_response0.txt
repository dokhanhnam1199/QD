```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several enhancements over priority_v1,
    including:
    1.  Dynamic adjustment of priority components based on bin fill levels.
    2.  A simulated "look-ahead" to estimate future bin utilization.
    3.  Different penalty and bonus to avoid empty or overfill the bins

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    max_capacity = np.max(bins_remain_cap)  # Assuming all bins have same capacity

    # A bin must have at least item size capacity
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # No bin can fit the item, prioritize creating a new bin. Since we cannot create bins in this problem.
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Fill Ratio Priority (Minimize Waste)
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = fill_ratio

    # 2. Existing Fill Level Bonus (Utilize partially filled bins)
    existing_fill = 1 - (bins_remain_cap / max_capacity)
    priorities[eligible_bins] += 0.15 * existing_fill[eligible_bins]  # Increased weight

    # 3. Gap Penalty (Avoid small gaps that are hard to fill later)
    small_gap = (bins_remain_cap - item) < (0.2 * max_capacity)
    priorities[small_gap & eligible_bins] -= 0.08 # Adjusted Penalty

    # 4. Look-Ahead Simulation (Estimate future bin utilization)
    #    Simulate adding a fraction of the current item to eligible bins to see how it impacts remaining capacity distribution.
    future_item_fraction = 0.3 * item
    future_bins_remain_cap = bins_remain_cap.copy()
    future_bins_remain_cap[eligible_bins] -= future_item_fraction

    #    Heuristic: Penalize bins that would become nearly empty after placing future items there
    nearly_empty = future_bins_remain_cap < (0.1 * max_capacity)
    priorities[nearly_empty & eligible_bins] -= 0.06 #Slight penalty

    #   Heuristic: Also penalize bins that become overfilled easily, since we want to avoid having few items
    #    that cannot be placed, leading to creation of new bins.
    overfilled = future_bins_remain_cap > (0.9 * max_capacity)
    priorities[overfilled & eligible_bins] -= 0.04 # Less penalty since it's better than being nearly empty

    # 5. Dynamic Weight Adjustment (Example: Adjust gap penalty based on average fill)
    average_fill = np.mean(existing_fill)
    if average_fill > 0.7:
        # If bins are generally full, increase gap penalty (fragmentation is more costly)
        priorities[small_gap & eligible_bins] -= 0.04  #Add more penalty, originally 0.08. The final value will be 0.12

    # Add a very small random component to break ties; ensure exploration
    priorities += np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
