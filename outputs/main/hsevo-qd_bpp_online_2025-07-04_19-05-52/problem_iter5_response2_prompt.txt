{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines fill ratio, existing fullness, and gap penalty for bin selection.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap)\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        return np.zeros_like(bins_remain_cap) - np.inf\n\n    fill_ratio = item / bins_remain_cap\n    fill_ratio[~eligible_bins] = -np.inf\n    priorities = fill_ratio\n\n    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    priorities[eligible_bins] += 0.1 * existing_fill[eligible_bins]\n\n    small_gap = (bins_remain_cap - item) < (0.2 * np.max(bins_remain_cap))\n    priorities[small_gap & eligible_bins] -= 0.05\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray,\n                well_utilized_weight: float = 0.35062835173089724,\n                small_gap_threshold: float = 0.2843404739363855,\n                penalty_base: float = 0.06433963514511276,\n                penalty_scaling: float = 0.25541437954022345,\n                near_perfect_fit_bonus: float = 0.002922134236358265,\n                clip_lower: float = -1.6092107662972261,\n                clip_upper: float = 0.9282869875935645,\n                rtol: float = 1.4782407673254387e-05,\n                atol: float = 9.868264437581935e-06) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        well_utilized_weight: Weight for bins that are already well-utilized.\n        small_gap_threshold: Threshold for considering a gap as small (fraction of max bin cap).\n        penalty_base: Base penalty for small gaps.\n        penalty_scaling: Scaling factor for the small gap penalty based on item size.\n        near_perfect_fit_bonus: Bonus for near-perfect fits.\n        clip_lower: Lower bound for clipping priority values.\n        clip_upper: Upper bound for clipping priority values.\n        rtol: Relative tolerance for near-perfect fit comparison.\n        atol: Absolute tolerance for near-perfect fit comparison.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # A bin must have at least item size capacity\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        # No bin can fit the item, prioritize creating a new bin if possible.  Since not possible assign lowest priority.\n        return np.zeros_like(bins_remain_cap) - np.inf\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates several factors (fill ratio, existing fill, gap penalty, near-perfect fit bonus, and clipping) to prioritize bin selection, while the worst only considers the log of the fill ratio. (2nd best) vs (second worst) The 2nd best code block is the same as the best code block. The second worst code block is the same as the worst code block. Comparing (1st) vs (2nd), we see they are identical. Comparing (3rd) vs (4th) again, they are identical. Comparing (second worst) vs (worst), we see they are identical. Overall: The best heuristics consider multiple factors and tunable parameters to optimize bin selection, while the worst performing heuristics oversimplify the bin selection process using just the fill ratio. More complex heuristics generally perform better, provided the weighting and parameters are appropriately tuned.\n- \nHere's a refined approach to self-reflection for heuristic design, emphasizing effectiveness:\n\n*   **Keywords:** Holistic Evaluation, Adaptive Tuning, Constraint Focus, Predictive Awareness.\n\n*   **Advice:** Systematically evaluate the interplay of multiple factors, dynamically adjust heuristic parameters based on observed solution landscapes, and prioritize constraints most critical for optimality.\n\n*   **Avoid:** Narrow focus on immediate gains, static parameter settings, and neglecting long-term consequences of early decisions.\n\n*   **Explanation:** Move beyond reactive adjustments to proactive design, considering how current choices impact future solution states and optimizing for overall, long-term performance.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}