import numpy as np
import random
import math
import scipy
import torch
def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                well_utilized_weight: float = 0.5928476964676361,
                small_gap_threshold: float = 0.5556918577251541,
                penalty_base: float = 0.006530270747344136,
                penalty_scaling: float = 0.39497024060781927,
                near_perfect_fit_bonus: float = 0.07681437666623914,
                clip_lower: float = -1.6266794517423437,
                clip_upper: float = 1.5734026649937278,
                rtol: float = 6.327357493692324e-05,
                atol: float = 9.53250732258619e-06,
                min_remain_cap_priority: float = -3.2978913128265352) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        well_utilized_weight: Weight for bins that are already well-utilized.
        small_gap_threshold: Threshold for considering a gap as small (fraction of max bin cap).
        penalty_base: Base penalty for small gaps.
        penalty_scaling: Scaling factor for the small gap penalty based on item size.
        near_perfect_fit_bonus: Bonus for near-perfect fits.
        clip_lower: Lower bound for clipping priority values.
        clip_upper: Upper bound for clipping priority values.
        rtol: Relative tolerance for near-perfect fit comparison.
        atol: Absolute tolerance for near-perfect fit comparison.
        min_remain_cap_priority: priority value when no bin can fit the item

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin must have at least item size capacity
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # No bin can fit the item, prioritize creating a new bin if possible.  Since not possible assign lowest priority.
        return np.full_like(bins_remain_cap, min_remain_cap_priority)
