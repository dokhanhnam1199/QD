```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Higher priority means we want to put the item in that bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, filter out bins that cannot hold the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Mark as infeasible with negative infinity.

    # For feasible bins:
    feasible_bins = ~infeasible_bins
    remaining_capacities = bins_remain_cap[feasible_bins]

    # 1. Fill-Ratio based priority (try to fill bins efficiently). Prioritize bins
    #    where the item fits snugly.  Use the inverse of the wasted space
    #    as a priority.  Smaller waste gives higher priority.
    wasted_space = remaining_capacities - item
    priorities[feasible_bins] = 1.0 / (wasted_space + 1e-9) #add small constant to prevent zero division

    # 2. Give preference to bins with capacity close to item size to fill bins.
    #priorities[feasible_bins] += np.exp(-np.abs(wasted_space) / (item + 1e-9))

    # 3. Avoid fragmenting the nearly-full bins, pack the item to nearly-full bins.
    nearly_full_threshold = 0.1  # Define nearly full threshold as 10%
    nearly_full_bins = (bins_remain_cap < item * (1 + nearly_full_threshold)) & feasible_bins
    priorities[nearly_full_bins] += 10 # give additional high priority to these bins

    return priorities
```
