```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers several factors:
    1. Remaining capacity: Bins with capacity closest to the item size get higher priority (minimize wasted space).
    2. Item size relative to bin capacity: Bins where the item fills a significant portion get higher priority.
    3. Number of nearly full bins: If there are many nearly full bins, prioritize bins with larger capacity. This avoids creating too many fragmented bins early on.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Handle edge cases where bins_remain_cap is zero to prevent division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap) # Replace zeros with a tiny value

    # Capacity difference: Smaller difference is better. Use reciprocal to convert to priority.
    capacity_diff = np.abs(bins_remain_cap - item)
    capacity_priority = 1 / (capacity_diff + 1e-9)  # Add a small constant to avoid division by zero

    # Fill ratio: Higher ratio is better
    fill_ratio = item / bins_remain_cap
    fill_ratio_priority = fill_ratio

    # Nearly full bin avoidance:
    nearly_full_threshold = 0.1  # Define nearly full as having < 10% of original capacity
    nearly_full_bins_count = np.sum(bins_remain_cap < nearly_full_threshold * np.max(bins_remain_cap))

    nearly_full_penalty = np.where(bins_remain_cap < nearly_full_threshold * np.max(bins_remain_cap), -1, 0)

    # Combine the priorities with appropriate weights:

    if nearly_full_bins_count > len(bins_remain_cap)/2:
        priorities = capacity_priority + fill_ratio_priority -0.5 * nearly_full_penalty
    else:
         priorities = capacity_priority + fill_ratio_priority

    return priorities
```
