```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins that can fit the item snugly, but also
    considers bins that are nearly full. It aims to balance waste and
    bin utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very large negative value to discourage overflowing bins
    overflow_penalty = -1e9

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = overflow_penalty  # Significantly penalize overflows
        else:
            # Calculate remaining capacity after placing the item
            remaining_capacity = cap - item

            # Priority based on how well the item fits (smaller remaining capacity is better)
            # Using exponential decay to prioritize smaller remainders
            fit_priority = np.exp(-remaining_capacity)

            # Bonus for bins that are already nearly full
            fullness_bonus = (cap / bins_remain_cap.max()) if bins_remain_cap.max() > 0 else 0 # normalize fullness

            # Combine fit priority and fullness bonus
            priorities[i] = fit_priority + fullness_bonus


    return priorities
```
