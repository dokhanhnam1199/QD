```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a combination of remaining capacity and wasted space considerations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            # Priority is higher for bins where the item fits well (less wasted space)
            wasted_space = capacity - item
            priorities[i] = (capacity + item) / (wasted_space + 1e-9)  # Add small value to avoid division by zero

            #Boost priority slightly if capacity nearly matches item to encourage best fit (minimizes fragmentation)
            if wasted_space < 0.1 * capacity: #Adjust threshold as needed, as ratio of capacity
                 priorities[i] *= 1.2   #boost 20%, may need tweaking
        else:
            priorities[i] = -np.inf #Cannot fit
    return priorities
```
