```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function incorporates ideas from quantum mechanics. Specifically, it uses a "potential well"
    analogy, favoring bins where the item "fits well" (low potential energy).  It also includes a stochastic
    element to mimic quantum fluctuations, increasing the chance of escaping local optima.  Finally, it uses a "Fermi-Dirac"
    like distribution to favour bins that are not already too full, somewhat discouraging over-filling of already significantly loaded bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Quantum Potential Well: Favour bins where the item fits "snugly" but with room.
    potential_well_depth = 1.0
    fit_quality = np.exp(-potential_well_depth * np.abs(bins_remain_cap - item))

    #Fermi Dirac distribution.
    fermi_level = np.mean(bins_remain_cap)
    thermal_energy = 0.5
    occupation_prob = 1.0 / (np.exp((bins_remain_cap - fermi_level) / thermal_energy) + 1)


    # Stochastic "Quantum Fluctuations" - introduce randomness.
    fluctuations = np.random.normal(0, 0.1, size=bins_remain_cap.shape)  # Gaussian noise


    priorities = fit_quality * occupation_prob + fluctuations  # Combine factors

    #Handle the case where bins are too small by setting to a very small value, making the algorithm effectively skip this bin.
    priorities = np.where(bins_remain_cap < item, -np.inf, priorities)

    return priorities
```
