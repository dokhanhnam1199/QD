```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a more nuanced priority scheme for the online bin packing problem.
    It considers multiple factors:
        - How well the item fits in the bin (residual capacity).
        - A penalty for bins that are almost full (to encourage utilizing emptier bins first).
        - A bonus for bins where the item fills a significant portion of the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Iterate through each bin and calculate its priority
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:  # Only consider bins where the item fits

            residual_capacity = cap - item
            
            # Primary factor: Favor bins where the item fits well
            priority = cap - item   # Larger residual_capacity means a better fit
           
            # Penalty for bins that are almost full after packing the item.
            # This tries to balance the usage of different bins.
            if residual_capacity < 0.1 * cap:  #If capacity goes down by more than 90% after packing
                priority -= (0.1 * cap - residual_capacity) # penalty
                

            # Bonus for bins that can be filled significantly with this item. Encourages finding good fits and reducing waste.
            if item > 0.5 * cap:
                priority += 0.1 *item # bonus, up to 10% of item size, encourage good fit.
               

            priorities[i] = priority
        else:
            priorities[i] = -np.inf # very low priority if the item doesn't fit

    return priorities
```
