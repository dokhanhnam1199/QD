```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function incorporates elements of "best fit decreasing"
    and simulated annealing, attempting to balance immediate fit
    with exploration of the solution space. It uses concepts reminiscent
    of potential energy minimization to encourage compact packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    potential_energy = (bins_remain_cap - item)**2
    # Increase priority of bins that fit and introduce randomness to allow exploration
    priorities = np.where(bins_remain_cap >= item, 1.0 / (potential_energy + 1e-9) + np.random.normal(0, 0.01, size=bins_remain_cap.shape), -np.inf)

    # Scaling for stability
    priorities = priorities - np.min(priorities)
    priorities = priorities / (np.max(priorities) + 1e-9) #Avoid div by 0
    return priorities
```
