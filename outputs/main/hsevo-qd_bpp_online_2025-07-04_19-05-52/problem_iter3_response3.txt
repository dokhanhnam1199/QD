```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)  # Ensure float type

    # A bin must have at least item size capacity
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # No bin can fit the item, prioritize creating a new bin. Since we cannot create bins in this problem. We'll assign lowest priority possible
        return np.zeros_like(bins_remain_cap, dtype=float) - np.inf  # Give a large negative number to effectively say these are impossible.

    # Priority 1: Minimize Waste (Maximize Fill Ratio) - Primary Driver
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf  # Disqualify bins that can't fit.
    priorities = fill_ratio

    # Priority 2: Encourage Utilizing Existing Bins (Bonus for Higher Initial Fill)
    # Normalize bin capacities to bin_remain_cap.max() to ensure consistent scaling across bin sizes.
    existing_fill = 1 - (bins_remain_cap / bins_remain_cap.max())
    priorities[eligible_bins] += 0.15 * existing_fill[eligible_bins] # Slightly increased weighting

    # Priority 3: Penalty for Near-Perfect Fits (Avoid Creating Bottlenecks)
    # Slightly reduced the near perfect fit threshold and adjusted penalty
    small_gap = (bins_remain_cap - item) < (0.15 * bins_remain_cap.max())
    priorities[small_gap & eligible_bins] -= 0.07  #Adjusted penalty

    # Priority 4: Favor bins with capacity slightly *larger* than the current item
    # This is a type of lookahead: it attempts to leave room for potentially larger future items in almost full bins
    larger_gap = (bins_remain_cap - item) > (0.25 * bins_remain_cap.max()) & (bins_remain_cap - item) < (0.5 * bins_remain_cap.max())
    priorities[larger_gap & eligible_bins] += 0.03  # Small bonus

    # Priority 5: Add a noise to break ties. This encourages exploration of different packing options and avoid getting stuck in local optima.
    priorities[eligible_bins] += np.random.normal(0, 0.005, size=np.sum(eligible_bins))

    return priorities
```
