```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Bin priorities considering fill ratio, existing fill, and fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # 1. Fill Ratio
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = fill_ratio

    # 2. Existing Fill Bonus (scaled)
    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[eligible_bins] += 0.2 * existing_fill[eligible_bins]

    # 3. Fragmentation Penalty
    gap_size = bins_remain_cap - item
    small_gap = gap_size < (0.2 * np.max(bins_remain_cap))
    priorities[small_gap & eligible_bins] -= 0.15

    return priorities
```
