```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by concepts of gravitational lensing and spacetime curvature,
    we prioritize bins that have capacities "close" to the item size,
    but penalize bins where the item would result in a very small remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A "gravitational lensing" effect: bins with remaining capacity close to the item size get higher priority.
    # We define "close" as a Gaussian distribution centered around the item size.
    mu = item
    sigma = item / 3  # Standard deviation, adjust as needed. Smaller sigma means stricter "closeness".
    proximity_score = np.exp(-0.5 * ((bins_remain_cap - mu) / sigma)**2)

    # Penalize bins where the remaining capacity after adding the item is too small.
    remaining_capacity = bins_remain_cap - item
    small_capacity_penalty = np.where(remaining_capacity > 0, np.exp(-1/(remaining_capacity + 1e-9)), 0) # Exponential decay as remaining capacity decreases

    #Avoid placing items where remainig capacity <0. Remove as invalid choice.
    invalid_bins = (remaining_capacity < 0)
    proximity_score[invalid_bins] = -np.inf # Set these invalid locations to -inf, removing them as options.

    priorities = proximity_score * small_capacity_penalty  # Combine the two effects

    return priorities
```
