```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, existing fill, and gap penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf
    priorities = fill_ratio

    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[eligible_bins] += 0.15 * existing_fill[eligible_bins]

    small_gap = (bins_remain_cap - item) < (0.2 * np.max(bins_remain_cap))
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item
    penalty_factor = 0.10 + 0.05*(avg_item_size / np.max(bins_remain_cap))
    priorities[small_gap & eligible_bins] -= penalty_factor

    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.02

    priorities = np.clip(priorities, -1, 1)
    return priorities
```
