```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a combination of factors to determine bin priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Factor 1: Remaining capacity after adding the item.
            remaining_after_fit = cap - item
            # We want bins that will have a smaller remaining capacity (but > 0).
            priority_remaining = 1 / (remaining_after_fit + 1e-9)  # Adding small value to avoid division by zero
            
            # Factor 2: Utilization ratio.  How much of the bin is used *after* packing.
            utilization_ratio = item / cap
            priority_utilization = utilization_ratio

            #Factor 3: Prefer bins close to item size, not much larger
            priority_close_fit = np.exp(-abs(item - cap))

            priorities[i] = priority_remaining + priority_utilization + priority_close_fit  # Combine the factors

        else:
            priorities[i] = -np.inf #Assign minimum priority, i.e., reject

    return priorities
```
