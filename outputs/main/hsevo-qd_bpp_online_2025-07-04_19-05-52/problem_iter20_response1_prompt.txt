{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Assigns bin priorities considering utilization, fragmentation.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        return np.zeros_like(bins_remain_cap) - np.inf\n\n    # 1. Utilization Maximization (fill ratio) - increased weight\n    fill_ratio = item / bins_remain_cap\n    fill_ratio[~eligible_bins] = -np.inf\n    priorities = 1.1 * fill_ratio # Increased weight\n\n    # 2. Existing Fill Bonus - adjusted weight\n    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    priorities[eligible_bins] += 0.22 * existing_fill[eligible_bins] # Slightly Increased weight\n\n    # 3. Fragmentation Penalty (Adaptive)\n    gap_size = bins_remain_cap - item\n    small_gap = gap_size < (0.2 * np.max(bins_remain_cap))\n    penalty_factor = 0.15 + 0.07 * (item / np.max(bins_remain_cap))\n    priorities[small_gap & eligible_bins] -= penalty_factor\n\n    # 4. Near-Perfect Fit Reward - keep consistent\n    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)\n    priorities[near_perfect_fit & eligible_bins] += 0.015\n\n    # 5. Remaining Capacity Consideration - scaled, keep consistent\n    priorities[eligible_bins] += 0.05 * (bins_remain_cap[eligible_bins] / np.max(bins_remain_cap))\n\n    # 6. Penalize Nearly Full Bins - adjusted weight\n    min_useful_capacity = 0.15 * np.max(bins_remain_cap)\n    nearly_full = gap_size < min_useful_capacity\n    priorities[nearly_full & eligible_bins] -= 0.1\n\n    # 7.  Look-Ahead Fragmentation Penalty\n    min_item_size = np.min(item) if isinstance(item, np.ndarray) else item\n    if min_item_size > 0:\n        very_small_gap = gap_size < (0.5 * min_item_size)\n        priorities[very_small_gap & eligible_bins] -= 0.12\n\n    priorities = np.clip(priorities, -1, 1)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Enhanced priority function considering utilization, fragmentation, and future packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        return np.zeros_like(bins_remain_cap) - np.inf\n\n    # 1. Utilization Maximization (Fill Ratio) - Increased Weight\n    fill_ratio = item / bins_remain_cap\n    fill_ratio[~eligible_bins] = -np.inf\n    priorities = 1.2 * fill_ratio  # Increased weight for fill ratio\n\n    # 2. Existing Fill Bonus (Encourage using partially filled bins) - Adjusted weight.\n    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    priorities[eligible_bins] += 0.25 * existing_fill[eligible_bins]  # Slightly increased weight\n\n    # 3. Fragmentation Penalty (Adaptive based on remaining capacity and item size)\n    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item\n    gap_size = bins_remain_cap - item\n    small_gap = gap_size < (0.2 * np.max(bins_remain_cap))\n    penalty_factor = 0.15 + 0.07 * (avg_item_size / np.max(bins_remain_cap))\n    priorities[small_gap & eligible_bins] -= penalty_factor\n\n    # 4. Near-Perfect Fit Reward (Encourage near-optimal packing) - Increased magnitude\n    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)\n    priorities[near_perfect_fit & eligible_bins] += 0.02  # Increased reward\n\n    # 5. Remaining Capacity Consideration (Prioritize bins with larger *remaining* capacity among eligible bins)\n    # This helps to keep options open for potentially larger future items.  Important!  Adjusted Weight\n    priorities[eligible_bins] += 0.06 * (bins_remain_cap[eligible_bins] / np.max(bins_remain_cap)) # Slightly increased\n\n    # 6. Penalize bins that will be left with capacities that are smaller than a certain threshold (Dynamic threshold)\n    min_useful_capacity = 0.15 * np.max(bins_remain_cap)  # Bin must have at least 15% useful capacity\n    nearly_full = gap_size < min_useful_capacity\n    priorities[nearly_full & eligible_bins] -= 0.1\n\n    # 7.  Look-Ahead Fragmentation Penalty (New Heuristic)\n    # Penalize bins that, after placing the item, would leave a remaining space\n    # that's smaller than a fraction of the *smallest* item size seen so far.\n    # This encourages consolidating smaller items.\n\n    min_item_size = np.min(item) if isinstance(item, np.ndarray) else item\n    if min_item_size > 0: # Check for zero item sizes to avoid division by zero\n        very_small_gap = gap_size < (0.5 * min_item_size)\n        priorities[very_small_gap & eligible_bins] -= 0.12 # Higher penalty\n\n    # 8. Scale and Clip\n    priorities = np.clip(priorities, -1, 1)\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the first heuristic incorporates a much more complex, multi-faceted approach, considering fill ratio, existing fill, fragmentation penalty, near-perfect fit reward, remaining capacity, nearly full bin penalty, look-ahead fragmentation penalty, and half-full bin reward, bin utilization variance penalty, dynamic gap penalty scaling, reward for creating bins with specific common size, and a final scaling/clipping step. The last heuristic uses a simple log ratio calculation.\nComparing (2nd) vs (19th), the second heuristic uses a weighted combination of fill ratio, existing fill bonus, and fragmentation penalty. The 19th heuristic uses a simple log ratio calculation.\nComparing (1st) vs (2nd), we see that the first heuristic has new heuristics like 9. Bin Utilization Variance Penalty, 10. Dynamic Gap Penalty Scaling, 11. Reward for creating bins that can fit a specific \"common size\", and 12. Scale and Clip and uses more aggressive weights than the second.\nComparing (3rd) vs (4th), we see the 3rd and 4th are nearly identical; they differ only in comments.\nComparing (second worst) vs (worst), we see 19th and 20th are nearly identical; both are the same function. Overall: Better heuristics employ multiple factors including fill ratio, fragmentation, remaining capacity, and look-ahead considerations, combining them with carefully tuned weights and adaptive penalties/rewards. They often incorporate scaling/clipping to maintain stability and prevent extreme priority values. Simpler heuristics rely on one or two factors.\n- \nOkay, I'll help you redefine \"Current self-reflection\" to design better heuristics, avoiding the pitfalls of \"Ineffective self-reflection.\" Here's a refined approach:\n\n*   **Keywords:** Iterative refinement, problem constraints, performance-driven, simplification.\n\n*   **Advice:** Begin with a simple heuristic that directly addresses core constraints. Iteratively improve by incorporating relevant factors guided by performance analysis.\n\n*   **Avoid:** Premature complexity, over-parameterization without justification, neglecting core problem constraints.\n\n*   **Explanation:** Prioritize a functional baseline and build upon it using data-driven insights. Focus on addressing the core problem before adding complexity, and only add complexity where there is a demonstrated performance improvement.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}