```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, remaining capacity, and a penalty for small gaps."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    # Fill ratio priority (higher is better)
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = 0  # Ignore bins that can't fit

    priorities = fill_ratio

    # Remaining capacity penalty for bins too empty after placing item
    remaining_capacity_after_placement = bins_remain_cap - item
    small_gap_penalty = np.where(remaining_capacity_after_placement > 0 , np.exp(-5 * remaining_capacity_after_placement / np.max(bins_remain_cap)) - 1 , 0)
    priorities += small_gap_penalty # Subtract penalty

    priorities[~eligible_bins] = -np.inf  # Exclude invalid bins explicitly

    return priorities
```
