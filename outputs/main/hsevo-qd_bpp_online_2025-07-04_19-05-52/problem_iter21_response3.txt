```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Simplified and refined priority function focusing on core aspects of bin packing:
    - Feasibility
    - Bin utilization
    - Fragmentation reduction

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return np.zeros_like(bins_remain_cap) - np.inf

    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Disqualify ineligible bins completely.
    priorities[~eligible_bins] = -np.inf

    # 2. Fill Ratio: Primary driver for bin selection.
    fill_ratio = item / bins_remain_cap
    priorities[eligible_bins] += 2.0 * fill_ratio[eligible_bins]  # Strong emphasis

    # 3. Remaining Capacity Penalty: Discourage leaving very small gaps.
    gap_size = bins_remain_cap - item
    small_gap = gap_size < (0.15 * bin_capacity)
    priorities[small_gap & eligible_bins] -= 0.5

    # 4. Reward for good utilization (avoiding near-empty bins and near-full bins).
    utilization = 1 - (bins_remain_cap / bin_capacity)
    good_utilization = (utilization > 0.1) & (utilization < 0.9)
    priorities[good_utilization & eligible_bins] += 0.2

    # 5. Perfect Fit: Huge bonus for perfect fit
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 1.0

    # 6. Prioritize larger bins
    priorities[eligible_bins] += 0.1 * (bins_remain_cap[eligible_bins] / bin_capacity)


    # 7. Clip and return (ensures reasonable priority range)
    priorities = np.clip(priorities, -1, 2)
    return priorities
```
