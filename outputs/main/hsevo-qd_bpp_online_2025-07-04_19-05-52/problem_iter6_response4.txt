```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin must have at least item size capacity
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # No bin can fit the item, prioritize creating a new bin if possible.  Since not possible assign lowest priority.
        return np.zeros_like(bins_remain_cap) - np.inf

    # Primary Priority: Maximize bin utilization while minimizing fragmentation.
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = -np.inf  # Disqualify bins that can't fit.
    priorities = fill_ratio

    # Bonus for bins that are already well-utilized (avoid opening new bins unnecessarily).  Make this adaptive to item size.
    existing_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item
    bonus_weight = 0.10 + 0.05 * (avg_item_size / np.max(bins_remain_cap))
    priorities[eligible_bins] += bonus_weight * existing_fill[eligible_bins]

    # Fragmentation Penalty: Heavily penalize bins that would leave small gaps. Make this adaptive to remaining capacity.
    remaining_capacity_ratio = bins_remain_cap / np.max(bins_remain_cap)  # ratio of remaining capacity compared to full capacity

    small_gap = (bins_remain_cap - item) < (0.2 * np.max(bins_remain_cap))
    penalty_factor = 0.15 * (1 - remaining_capacity_ratio) # Adapt penalty based on remaining capacity.
    priorities[small_gap & eligible_bins] -= penalty_factor[small_gap & eligible_bins]

    # Reward near-perfect fits, but less so than perfect fills
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=1e-06)
    priorities[near_perfect_fit & eligible_bins] += 0.02

    # Introduce a bin-selection pressure term.  Prefer bins that are not near empty.
    bin_selection_pressure = 0.01 * (1 - remaining_capacity_ratio) # Scale based on occupancy
    priorities[eligible_bins] += bin_selection_pressure[eligible_bins]

    # Refine priority with respect to the item size. If the item size is relatively large, prioritize bins with larger remaining capacity.
    item_size_ratio = item / np.max(bins_remain_cap) #Size of item related to the bin cap
    if item_size_ratio > 0.5: # dynamically adjust the threshold
         priorities[eligible_bins] += 0.03 * remaining_capacity_ratio[eligible_bins]

    # Scale priorities to ensure a reasonable range
    priorities = np.clip(priorities, -1, 1)  # Prevent extreme values
    return priorities
```
