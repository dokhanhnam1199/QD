```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin based on remaining capacity and item size.
    Prioritizes bins with remaining capacity closest to the item size, with tie-breaking.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Bins that cannot accommodate the item should have a priority of negative infinity
    priority = np.where(remaining_cap_after_addition >= 0, -np.abs(remaining_cap_after_addition), -np.inf)
    
    # Add a small random noise to break ties
    priority = priority + np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    
    return priority
```
