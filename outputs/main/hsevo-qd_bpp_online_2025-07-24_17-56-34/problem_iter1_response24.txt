```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Give higher priority to bins that have just enough capacity for the item
    # and lower priority to bins that are either too full or too empty
    priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)
    # Use negative priority to simulate "smaller is better" for np.inf
    # and avoid division by zero
    return -priority
```
