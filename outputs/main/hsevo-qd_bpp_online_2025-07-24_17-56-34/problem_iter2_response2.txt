```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritize bins based on remaining capacity after adding item and use noise to break ties."""
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot accommodate the item
    # For bins that can accommodate the item, prioritize the one with the least remaining capacity
    # Add a small random noise to break ties
    priority = np.where(remaining_cap_after_addition >= 0, 
                        1 / (1 + remaining_cap_after_addition) + np.random.uniform(0, 1e-6, size=len(bins_remain_cap)), 
                        -np.inf)
    
    return priority
```
