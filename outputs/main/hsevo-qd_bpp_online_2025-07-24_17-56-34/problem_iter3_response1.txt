```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_addition = bins_remain_cap - item
    
    # For bins that can fit the item, the priority is a combination of the negative of the remaining capacity after addition
    # and a noise term to break ties. The noise term is a small random value that helps to avoid always choosing the same bin
    # when multiple bins have the same remaining capacity.
    priority = np.where(remaining_cap_after_addition >= 0, 
                        -remaining_cap_after_addition + np.random.uniform(0, 1e-6, size=len(bins_remain_cap)), 
                        -np.inf)
    
    return priority
```
