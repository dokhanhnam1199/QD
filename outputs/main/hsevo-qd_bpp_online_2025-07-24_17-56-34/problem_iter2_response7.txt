```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority score based on the remaining capacity and a tie-breaker.
    
    Bins with remaining capacity closest to the item size get the highest priority.
    A small random noise is added to break ties.
    """
    # Calculate the absolute difference between the item size and the remaining capacity
    diff = np.abs(bins_remain_cap - item)
    
    # Assign a very low priority to bins that cannot hold the item
    priority = np.where(bins_remain_cap < item, -1e9, -diff + np.random.uniform(0, 1e-6, size=diff.shape))
    
    return priority
```
