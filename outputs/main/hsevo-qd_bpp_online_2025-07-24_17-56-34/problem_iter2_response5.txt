```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin based on remaining capacity and item size.
    Prioritizes bins where the item fits well, with a tie-breaker for close fits.
    """
    # Calculate priority based on how well the item fits into the bin
    priority = np.where(bins_remain_cap >= item, 
                        1 - np.abs(bins_remain_cap - item) / item,  # Similar to priority_v0
                        -np.inf)  # Similar to priority_v1 for bins that are too small
    
    # Add a small random noise to break ties
    priority += np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    
    return priority
```
