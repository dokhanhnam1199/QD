```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is determined by how well the item fits into the bin.
    A higher priority is given to bins where the item fits perfectly or 
    almost perfectly (i.e., remaining capacity is minimized after adding 
    the item). Bins that cannot accommodate the item are given a priority 
    of negative infinity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Bins that cannot accommodate the item should have a priority of negative infinity
    priority = np.where(remaining_cap_after_addition >= 0, -remaining_cap_after_addition, -np.inf)
    
    # Normalize the priority scores to be between 0 and 1
    max_priority = np.max(priority)
    if max_priority == -np.inf:  # All bins are too small
        return np.zeros_like(bins_remain_cap)
    else:
        return (priority + np.inf) / (max_priority + np.inf)
```
