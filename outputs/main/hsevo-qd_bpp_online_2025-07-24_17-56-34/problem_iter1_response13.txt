```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin based on the remaining capacity
    # and how well the item fits into it. The bin that has just enough capacity 
    # for the item gets the highest priority.
    priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)
    # Convert the distance to priority score; smaller distance means higher priority
    priority_score = 1 / (1 + priority)
    # Special handling for bins that cannot fit the item; give them a score of 0
    priority_score[priority == np.inf] = 0
    return priority_score
```
