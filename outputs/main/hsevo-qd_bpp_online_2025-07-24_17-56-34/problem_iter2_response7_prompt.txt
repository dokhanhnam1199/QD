{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    The priority score is calculated based on the remaining capacity of each bin.\n    A bin with a remaining capacity closest to the item size will have the highest priority.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the absolute difference between the item size and the remaining capacity of each bin\n    diff = np.abs(bins_remain_cap - item)\n    \n    # Assign a very low priority to bins that cannot hold the item\n    priority = np.where(bins_remain_cap < item, -1e9, -diff)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the best heuristic uses a meaningful calculation for priority based on the remaining capacity and adds a small random noise to break ties, while the worst simply returns zeros. \nComparing (1st) vs (2nd), we see both use a similar strategy but differ in the exact formula; (1st) uses `1 / (bins_remain_cap - item + 1e-6)` while (2nd) uses `1 / (1 + np.abs(bins_remain_cap - item))`. \n(3rd) vs (4th) shows a similar pattern with different formulas. \nComparing (second worst) vs (worst), both return zeros or constant values, indicating a lack of a meaningful heuristic. \nOverall, better heuristics tend to use formulas that prioritize bins based on how well the item fits, with some form of tie-breaking.\n- \nTo refine \"Current self-reflection\" and design better heuristics, here's a breakdown:\n\n* **Keywords**: Heuristics design, prioritization formula, tie-breaking mechanism.\n* **Advice**: Develop a more sophisticated prioritization formula that considers multiple factors, such as item size, remaining capacity, and potentially other attributes like item value or urgency.\n* **Avoid**: Oversimplification, neglecting edge cases, and failing to incorporate diverse factors.\n* **Explanation**: By developing a nuanced formula and incorporating a robust tie-breaking mechanism, such as a well-designed noise function, we can create more effective heuristics that outperform simple, existing methods, justifying a significant improvement like the one worth $999K.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}