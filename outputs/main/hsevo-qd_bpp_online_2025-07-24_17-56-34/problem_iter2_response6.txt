```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin based on remaining capacity and a tie-breaker.

    The priority is inversely proportional to the remaining capacity after adding the item.
    A small random noise is added to break ties.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_addition = bins_remain_cap - item
    
    # For bins that can fit the item, the priority is inversely proportional to the remaining capacity after addition
    # Add a small random noise to break ties
    priority = np.where(remaining_cap_after_addition >= 0, 1 / (remaining_cap_after_addition + 1e-6) + np.random.uniform(0, 1e-6, size=len(bins_remain_cap)), -np.inf)
    
    return priority
```
