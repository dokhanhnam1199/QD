```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Give high priority to bins that have just enough capacity for the item
    # and low priority to bins that would have a lot of remaining capacity or not enough capacity
    priority = np.where(remaining_after_addition >= 0, -np.abs(remaining_after_addition), -np.inf)
    
    # Normalize the priority scores to ensure they are on the same scale
    # and handle the case when all bins are too small for the item
    if np.all(np.isinf(priority)):
        priority = np.zeros_like(bins_remain_cap)
    else:
        priority = np.where(np.isinf(priority), np.min(priority[~np.isinf(priority)]) - 1, priority)
    
    return priority
```
