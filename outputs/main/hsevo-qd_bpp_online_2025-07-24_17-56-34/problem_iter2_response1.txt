```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin based on remaining capacity and item size.
    Prioritizes bins where the item fits well and breaks ties using a small noise.
    """
    # Calculate the absolute difference between the item size and the remaining capacity
    diff = np.abs(bins_remain_cap - item)
    
    # Assign high priority to bins that can accommodate the item and have remaining capacity close to the item size
    priority = np.where(bins_remain_cap >= item, 1 / (1 + diff), -1e9)
    
    # Add a small random noise to break ties
    noise = np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    priority += noise
    
    return priority
```
