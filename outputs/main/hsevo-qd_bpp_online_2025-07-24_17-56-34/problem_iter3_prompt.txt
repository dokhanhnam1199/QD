{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # For bins that can fit the item, the priority is the negative of the remaining capacity after addition\n    # This encourages the algorithm to choose the bin with the least remaining capacity that can still fit the item\n    priority = np.where(remaining_cap_after_addition >= 0, -remaining_cap_after_addition, -np.inf)\n    \n    return priority\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nTo refine \"Current self-reflection\" and design better heuristics, here's a breakdown:\n\n* **Keywords**: Heuristics design, prioritization formula, tie-breaking mechanism.\n* **Advice**: Develop a more sophisticated prioritization formula that considers multiple factors, such as item size, remaining capacity, and potentially other attributes like item value or urgency.\n* **Avoid**: Oversimplification, neglecting edge cases, and failing to incorporate diverse factors.\n* **Explanation**: By developing a nuanced formula and incorporating a robust tie-breaking mechanism, such as a well-designed noise function, we can create more effective heuristics that outperform simple, existing methods, justifying a significant improvement like the one worth $999K.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}