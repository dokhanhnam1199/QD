```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for solving the Capacitated Vehicle Routing Problem (CVRP)
    via stochastic solution sampling. It combines several factors to determine
    how promising it is to include each edge in a solution.

    Args:
        distance_matrix (np.ndarray): A matrix of pairwise distances between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): A vector of customer demands (shape: n).
        capacity (int): The capacity of each vehicle.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                  indicates how promising it is to include the corresponding edge
                  in a solution. Higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Heuristic 1: Distance-based
    distance_heuristic = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # Heuristic 2: Demand-based (encourage connections to nodes with lower demand when close to capacity)
    demand_normalized = demands / np.sum(demands)
    demand_heuristic = 1 - demand_normalized  # Higher value for nodes with lower relative demand

    # Heuristic 3: Angle to depot (encourage routes going radially out and back from depot)
    depot_x, depot_y = coordinates[0]
    angle_heuristic = np.zeros((n, n))
    for i in range(1, n):
        angle_i = np.arctan2(coordinates[i, 1] - depot_y, coordinates[i, 0] - depot_x)
        for j in range(1, n):
            if i == j:
                continue
            angle_j = np.arctan2(coordinates[j, 1] - depot_y, coordinates[j, 0] - depot_x)
            angle_diff = np.abs(angle_i - angle_j)
            angle_heuristic[i, j] = 1 - (angle_diff / np.pi)  # Smaller angle differences are preferred.

    # Combine heuristics
    heuristic_matrix = (0.6 * distance_heuristic +
                         0.2 * demand_heuristic[np.newaxis, :] +  # Broadcast to make it n x n
                         0.2 * angle_heuristic)  # Try weights 0.6, 0.2, 0.2. The weights should add up to 1.

    # Sparsify the matrix (set less promising edges to zero)
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20)  # Keep top 80%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure depot connectivity - high priority for connections from/to depot.
    for i in range(1, n):
        heuristic_matrix[0, i] = distance_heuristic[0, i] * 2
        heuristic_matrix[i, 0] = distance_heuristic[i, 0] * 2

    return heuristic_matrix
```
