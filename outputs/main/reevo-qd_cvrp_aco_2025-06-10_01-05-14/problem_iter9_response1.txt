```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Distance factor with inverse square to prioritize very short edges
    distance_factor = 1 / (distance_matrix + 1e-6)**2

    # Savings factor
    savings_factor = savings_matrix

    # Demand factor
    demand_factor = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if demands[i] + demands[j] > capacity:
                demand_factor[i, j] = 0.1  # Reduced penalty instead of zero. Allows some chance

    # Depot proximity boost. Higher boost for edges connected to depot if demand is high.
    depot_proximity = np.zeros((n, n))
    for i in range(1, n):
        depot_proximity[0, i] = (demands[i] / capacity) * (1 / (distance_matrix[0, i] + 1e-6))
        depot_proximity[i, 0] = depot_proximity[0, i]

    # Combine factors
    heuristic_matrix = distance_factor * savings_factor * demand_factor + 0.1 * depot_proximity

    # Adaptive sparsification
    k = int(np.sqrt(n))  # More aggressive sparsification
    for i in range(n):
        # Get the indices of the top k promising edges for node i
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]

        # Sparsify
        row_copy = np.zeros(n) # Create a local copy for assignment to avoid modifying during iteration
        for j in range(n):
             if j not in top_k_indices:
                 row_copy[j] = 0
             else:
                 row_copy[j] = heuristic_matrix[i, j]
        heuristic_matrix[i, :] = row_copy

    # Capacity-Aware Edge Penalization (Stronger)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                combined_demand = demands[i] + demands[j]
                if combined_demand > capacity:
                    penalty_factor = (combined_demand - capacity) / capacity
                    heuristic_matrix[i, j] *= max(0.1, (1 - 0.5 * penalty_factor))  # Stronger penalty
                    heuristic_matrix[j, i] *= max(0.1, (1 - 0.5 * penalty_factor))

    # Normalize
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
