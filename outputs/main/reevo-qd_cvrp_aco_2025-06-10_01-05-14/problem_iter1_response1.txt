```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate savings for each edge
    savings_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Savings matrix is symmetric

    # Calculate angle cost based on node coordinates
    angle_cost = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vec_i = coordinates[i] - coordinates[0]
                vec_j = coordinates[j] - coordinates[0]
                angle = np.arctan2(vec_j[1], vec_j[0]) - np.arctan2(vec_i[1], vec_i[0])
                angle_cost[i, j] = np.abs(angle) # Penalty increases as relative angle increases
            else:
                angle_cost[i,j] = np.inf

    # Node importance based on demand relative to capacity
    node_importance = demands / capacity
    demand_factor = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(1, n):
            demand_factor[i, j] = node_importance[i] * node_importance[j]

    # Combine factors
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = (
                    (1 / (distance_matrix[i, j] + 1e-6))
                    + 0.5 * savings_matrix[i, j]
                    - 0.1 * angle_cost[i,j]
                    + 0.2 * demand_factor[i, j]
                )
            else:
                 heuristic_matrix[i, j] = 0 # zero for i==j

    # Sparsify the matrix (remove edges with low heuristic values)
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 30)  # Keep top 70% edges
    heuristic_matrix[heuristic_matrix < threshold] = 0
    heuristic_matrix[distance_matrix == 0] = 0 #Ensure zero dist gives zero heuristic. This might not be neccessary, and it may be beneficial to allow these.
    return heuristic_matrix
```
