```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node Proximity Factor (Euclidean distance)
    proximity_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                proximity_matrix[i, j] = 1 / (np.linalg.norm(coordinates[i] - coordinates[j]) + 1e-6)

    # Demand Compatibility Factor
    demand_compatibility = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            if combined_demand <= capacity:
                demand_compatibility[i, j] = 1 - (combined_demand / capacity)  # Prefer combinations with lower utilization
            else:
                demand_compatibility[i, j] = 0  # Incompatible if exceeds capacity

    # Edge Importance Learning (Simple): Reward edges used more often (simulated with demand here)
    edge_importance = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            edge_importance[i, j] = (demands[i] + demands[j]) / (2*capacity) #normalized demand

    # Combine all factors
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0
            else:
                heuristic_matrix[i, j] = (0.4 * proximity_matrix[i, j] +
                                         0.3 * savings_matrix[i, j] +
                                         0.2 * demand_compatibility[i, j] +
                                         0.1 * edge_importance[i, j])

    # Adaptive Sparsification (based on the refined heuristic)
    k = int(np.sqrt(n))  # Adjust sparsification aggressiveness
    k = max(1, min(k, n - 1)) # bound k

    for i in range(n):
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0

    return heuristic_matrix
```
