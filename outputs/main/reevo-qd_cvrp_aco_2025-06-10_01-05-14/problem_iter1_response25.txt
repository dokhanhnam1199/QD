```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP)
    that combines distance, demand, and angle information to estimate
    the desirability of including each edge in a route.

    Args:
        distance_matrix (np.ndarray): A matrix of distances between nodes.
        coordinates (np.ndarray): Euclidean coordinates of the nodes.
        demands (np.ndarray): A vector of customer demands.
        capacity (int): The capacity of each vehicle.

    Returns:
        np.ndarray: A matrix of heuristic values, indicating the
                      promisingness of each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters to control the influence of each factor
    distance_weight = 1.0
    demand_weight = 1.0
    angle_weight = 0.5
    sparsification_threshold = 0.2

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # Avoid self-loops
                continue

            # Distance factor: Shorter distances are more desirable
            distance_factor = distance_weight / (distance_matrix[i, j] + 1e-6) # Avoid division by zero

            # Demand factor: Avoid edges that would immediately violate capacity
            demand_factor = 1.0
            if i == 0:
                demand_factor = 1.0 / (demands[j] / capacity + 1e-6)
            elif j == 0:
                demand_factor = 1.0 / (demands[i] / capacity + 1e-6)  #Consider the demand if routing back to the depot
            else:
                demand_factor = 1.0

            # Angle factor: Penalize sharp turns (encourage smoother routes)
            angle_factor = 1.0
            if i != 0 and j != 0:
              # Calculate angle between vectors (0 -> i) and (i -> j)
              vector1 = coordinates[i] - coordinates[0]
              vector2 = coordinates[j] - coordinates[i]

              # Normalize vectors
              vector1 = vector1 / (np.linalg.norm(vector1) + 1e-6)
              vector2 = vector2 / (np.linalg.norm(vector2) + 1e-6)

              # Calculate cosine of the angle
              cos_angle = np.dot(vector1, vector2)
              angle = np.arccos(np.clip(cos_angle, -1.0, 1.0)) #Clip to avoid domain errors
              angle_factor = 1.0 - (angle / np.pi)
              angle_factor = angle_factor**angle_weight
            else:
              angle_factor = 1.0

            # Combine the factors
            heuristic_matrix[i, j] = (distance_factor * demand_factor * angle_factor)**0.5

    #Sparsification: Remove less promising edges
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], sparsification_threshold * 100)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
