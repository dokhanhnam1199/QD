```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance, savings, and demand considerations
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance factor (shorter distances are preferred)
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero

                # Savings factor (higher savings are preferred)
                savings_factor = savings_matrix[i, j]

                # Demand factor (prioritize connections that help balance vehicle load).
                # Avoid combining nodes if combined demand exceeds capacity right away
                demand_factor = 1.0
                if (i != 0 and j != 0) and (demands[i] + demands[j] > capacity):
                    demand_factor = 0.0  # prevent node combination from beginning

                # Demand boosting near the depot: nodes with high demand are more likely to be connected to the depot
                depot_proximity = 1.0
                if i == 0 and j !=0:
                   depot_proximity = 1 + (demands[j] / capacity)
                if j == 0 and i != 0:
                   depot_proximity = 1 + (demands[i] / capacity)

                # Combine the factors
                heuristic_matrix[i, j] = distance_factor * savings_factor * demand_factor * depot_proximity

    # Adaptive sparsification: adjust k based on problem size
    k = max(1, int(np.log(n)))  # logarithmic scaling seems appropriate
    # Ensure k is at least 1 and less than n
    k = max(1, min(k, n - 1))

    for i in range(n):
        # Get the indices of the top k promising edges for node i
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]

        # Set the heuristic value to 0 for all other edges
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0

    # Learned Component (simple example: boost edges connected to nodes with high demand)
    demand_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
             # Scale by capacity to avoid excessive boost. Increase boost when one of the demand is relatively high
            demand_boost[i, j] = (demands[i] / capacity) * (demands[j] / capacity)

    heuristic_matrix = heuristic_matrix + 0.1 * demand_boost # Add a small proportion of the demand boost

    # Normalization
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    # Adding a small bias toward shorter edges after normalization to prevent complete dominance by learned components.
    heuristic_matrix = heuristic_matrix + 0.05 * (1 - distance_matrix / np.max(distance_matrix))

    return heuristic_matrix
```
