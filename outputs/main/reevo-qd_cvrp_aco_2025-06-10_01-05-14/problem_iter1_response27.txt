```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Normalize distance and savings matrices
    normalized_distance = distance_matrix / np.max(distance_matrix)
    normalized_savings = savings_matrix / np.max(savings_matrix)

    # Combine factors: distance, savings, and demand compatibility
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Favor shorter distances, higher savings.
                heuristic_matrix[i, j] = (1 - normalized_distance[i, j]) + normalized_savings[i, j]

                # Penalize edges that would likely overload a vehicle (crude estimate)
                if i != 0 and j != 0:
                    if demands[i] + demands[j] > capacity / 3: #Changed value 1/2 to 1/3 to allow more freedom for routing
                        heuristic_matrix[i, j] *= 0.5  # Further discount if demand is high

    # Sparsify the matrix: remove less promising edges
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 40) # Keep the top 60%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure that depot connections are always considered (more robust starting point)
    for i in range(1, n):
      if heuristic_matrix[0, i] == 0:
        heuristic_matrix[0, i] = threshold/2 #Setting a small value to make sure it gets selected later on if necessary.
        heuristic_matrix[i, 0] = threshold/2 #symmetric.


    return heuristic_matrix
```
