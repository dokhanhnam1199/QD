```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Improved version with refined factor combinations and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance, savings, and demand considerations with refined weights
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance factor (shorter distances are preferred)
                distance_factor = np.exp(-distance_matrix[i, j] / np.mean(distance_matrix))  # Normalized distance

                # Savings factor (higher savings are preferred)
                savings_factor = savings_matrix[i, j] / (np.max(savings_matrix) + 1e-6) if np.max(savings_matrix) > 0 else 0.0 #Normalized Savings

                # Demand factor (prioritize connections that help balance vehicle load).
                demand_compatibility = 1.0 if (i == 0 or j == 0 or (demands[i] + demands[j] <= capacity)) else 0.1 #Slight penalization instead of hard zero
                demand_factor = (1 - abs(capacity/2 - (demands[i] + demands[j])) / capacity) * demand_compatibility if (i != 0 and j != 0) else demand_compatibility

                # Adaptive weight for demand factor based on remaining capacity
                remaining_capacity_i = capacity - demands[i] if i != 0 else capacity
                remaining_capacity_j = capacity - demands[j] if j != 0 else capacity
                adaptive_demand_weight = min(1.0, (remaining_capacity_i + remaining_capacity_j) / (2 * capacity))

                # Combine the factors non-linearly and adaptively
                heuristic_matrix[i, j] = (distance_factor**0.5 * savings_factor**0.4 * demand_factor**0.6)

    # Adaptive sparsification: adjust k based on problem size
    k = int(1.5 * np.log(n))  # Increased influence of log(n)
    k = max(1, min(k, n - 1))  # Ensure k is within bounds

    for i in range(n):
        # Get the indices of the top k promising edges for node i
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]

        # Set the heuristic value to 0 for all other edges
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0

    # Learned Component (simple example: boost edges connected to nodes with high demand)
    demand_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
             demand_boost[i, j] = (demands[i] + demands[j]) / (2 * capacity)  # Scale by capacity to avoid excessive boost

    heuristic_matrix = heuristic_matrix + 0.05 * demand_boost # Reduced boost contribution

    return heuristic_matrix
```
