```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Capacity of each vehicle.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Parameters for tuning the heuristic
    alpha = 1.0   # Weight for distance
    beta = 1.0    # Weight for demand considerations
    gamma = 0.5   # Weight for angular proximity to depot
    delta = 0.5  #sparsification

    # Calculate angle to depot
    depot_coords = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_coords[1], coordinates[:, 0] - depot_coords[0])

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero

                # Demand factor: penalize edges that might lead to exceeding capacity quickly
                demand_factor = 1.0
                if i != 0 and j != 0:  #consider only for customer nodes
                    demand_factor = max(0, (capacity - demands[i] - demands[j]) / capacity) # Favor edges where combined demand is lower relative to capacity. The greater, the more we favor.

                # Angular proximity factor: prioritize edges that maintain a route towards the depot (node 0)
                angle_diff = min(abs(angles[i] - angles[j]), 2 * np.pi - abs(angles[i] - angles[j]))
                angular_proximity = 1 / (angle_diff + 0.1) #inverse of angle diff, the lower, the better (closer to 0).  Avoid division by zero
                
                heuristic_matrix[i, j] = (alpha * distance_factor +
                                         beta * demand_factor +
                                         gamma * angular_proximity)


    # Sparsify the matrix: Set less promising edges to zero
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 100-delta*100) # keep only top delta % edges
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
