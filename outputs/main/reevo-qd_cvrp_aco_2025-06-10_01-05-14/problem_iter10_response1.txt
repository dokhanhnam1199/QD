```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates more sophisticated demand handling, adaptive sparsification, and edge penalties.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Edge weighting based on distance, savings, and demand
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance factor (shorter distances are preferred)
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)

                # Savings factor (higher savings are preferred)
                savings_factor = savings_matrix[i, j]

                # Demand factor (prioritize connections that help balance vehicle load)
                demand_factor = 1.0
                if (i != 0 and j != 0) and (demands[i] + demands[j] > capacity):
                    demand_factor = 0.0  # prevent node combination if combined demand exceeds capacity

                # Combine the factors
                heuristic_matrix[i, j] = distance_factor * savings_factor * demand_factor

    # Adaptive sparsification: adjust k based on problem size, logarithmic scaling
    k = int(np.ceil(1.5 * np.log(n)))  # Increased sparsification
    k = max(1, min(k, n - 1))  # Ensure k is within bounds

    for i in range(n):
        # Sparsify based on the top k promising edges
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0

    # Learned Demand Boost Component
    demand_boost = np.zeros((n, n))
    total_demand = np.sum(demands[1:])

    for i in range(1, n):
        for j in range(1, n):
            demand_component = (demands[i] / total_demand + demands[j] / total_demand) if total_demand > 0 else 0 #Handle zero demand
            depot_proximity = (1 / (distance_matrix[i, 0] + 1e-6) + 1 / (distance_matrix[j, 0] + 1e-6)) if (i != j) else 0
            demand_boost[i, j] = demand_component + 0.1 * depot_proximity  # Increased depot proximity influence

    demand_boost_scale = 0.05  # Reduced Demand Boost Scale

    heuristic_matrix = heuristic_matrix + demand_boost_scale * demand_boost

    # Capacity-Aware Edge Penalization, more aggressive penalization
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                combined_demand = demands[i] + demands[j]
                if combined_demand > capacity:
                    penalty_factor = (combined_demand - capacity) / capacity
                    heuristic_matrix[i, j] *= (1 - 0.3 * penalty_factor)  # Stronger penalization
                    heuristic_matrix[j, i] *= (1 - 0.3 * penalty_factor)

    # Normalize heuristic matrix to a range between 0 and 1
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    # Dynamic Adjustment of Savings Weight:
    avg_demand = np.mean(demands[1:])  # average demand per customer
    savings_weight = 1.0  # default
    if avg_demand > 0.3 * capacity:
        savings_weight = 0.75  # downweight when demand is higher.

    for i in range(n):
        for j in range(n):
            if i != j:
                 heuristic_matrix[i,j] = (1 - savings_weight)*heuristic_matrix[i,j] + savings_weight * savings_matrix[i, j] / (np.max(savings_matrix)+1e-6) if np.max(savings_matrix) > 0 else heuristic_matrix[i,j]

    return heuristic_matrix
```
