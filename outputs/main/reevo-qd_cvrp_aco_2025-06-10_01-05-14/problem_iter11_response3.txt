```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates adaptive sparsification, depot proximity boosting, and capacity violation penalization.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance, savings, and demand considerations
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance factor (shorter distances are preferred)
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero

                # Savings factor (higher savings are preferred)
                savings_factor = savings_matrix[i, j]

                # Demand factor (prioritize connections that help balance vehicle load).
                # Avoid combining nodes if combined demand exceeds capacity right away
                demand_factor = 1.0
                if (i != 0 and j != 0) and (demands[i] + demands[j] > capacity):
                    demand_factor = 0.0  # prevent node combination from beginning

                heuristic_matrix[i, j] = distance_factor * savings_factor * demand_factor

    # Adaptive Sparsification: adjust k based on problem size, balancing exploration and exploitation.
    k = int(1.5 * np.log(n))  # Reduce k for more aggressive sparsification
    k = max(1, min(k, n - 1))

    for i in range(n):
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0

    # Depot Proximity Boosting: Encourage connections to the depot, especially for remote nodes.
    depot_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            depot_proximity_i = 1 / (distance_matrix[i, 0] + 1e-6)
            depot_proximity_j = 1 / (distance_matrix[j, 0] + 1e-6)
            depot_boost[i, j] = 0.5 * (depot_proximity_i + depot_proximity_j)  #scaled down

    depot_boost_scale = 0.05 # reduce further scale
    heuristic_matrix += depot_boost_scale * depot_boost

    # Capacity-Aware Edge Penalization: Discourage edges that lead to capacity violations.
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                combined_demand = demands[i] + demands[j]
                if combined_demand > capacity:
                    penalty_factor = min(1.0, (combined_demand - capacity) / capacity)  # Cap penalty
                    heuristic_matrix[i, j] *= (1 - 0.3 * penalty_factor)  # Increased the penalty
                    heuristic_matrix[j, i] *= (1 - 0.3 * penalty_factor)

    # Normalize the heuristic matrix to a range of [0, 1] to prevent any single component from dominating
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    return heuristic_matrix
```
