```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for the Capacitated Vehicle Routing Problem (CVRP)
    using a combination of distance, demand, and angular considerations.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).  depot demand is demands[0]
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of edge inclusion (n x n).
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Parameters (tunable)
    distance_weight = 1.0
    demand_weight = 0.5
    angle_weight = 0.5
    sparsification_threshold = 0.1  # Only keep top X% of edges

    # Node based weights: a heuristic
    node_weights = np.zeros(n)
    for i in range(1, n):
        node_weights[i] = demands[i] / (np.sum(distance_matrix[i,:]) / (n-1) )

    # Calculate heuristic values for each edge
    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor (normalized)
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # avoid division by zero
                #demand factor
                demand_factor = 1.0/(demands[i] + demands[j] + 1e-6) if (i!=0 and j!=0) else 1.0
                # Angle factor: penalize sharp turns (using depot as reference)
                if i != 0 and j != 0:
                    vector_i = coordinates[i] - coordinates[0]
                    vector_j = coordinates[j] - coordinates[0]
                    dot_product = np.dot(vector_i, vector_j)
                    magnitude_i = np.linalg.norm(vector_i)
                    magnitude_j = np.linalg.norm(vector_j)
                    angle = np.arccos(dot_product / (magnitude_i * magnitude_j + 1e-6)) # Avoid division by zero
                    angle_factor = 1 / (angle + 1e-6)
                else:
                    angle_factor = 1.0
                    
                # Combine factors
                heuristics_matrix[i, j] = (
                    distance_weight * distance_factor +
                    demand_weight * demand_factor +
                    angle_weight * angle_factor
                ) * (node_weights[i] * node_weights[j] if (i!=0 and j!=0) else 1.0 )


    # Sparsify the matrix (keep only top X% of edges)
    threshold_value = np.quantile(heuristics_matrix[heuristics_matrix > 0], 1 - sparsification_threshold) # only looking at positive values

    heuristics_matrix[heuristics_matrix < threshold_value] = 0
    return heuristics_matrix
```
