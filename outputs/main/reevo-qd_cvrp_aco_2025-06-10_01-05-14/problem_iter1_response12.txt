```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings matrix (Clarke-Wright savings heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance, savings, and demand information
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0
            else:
                # Factor 1: Inverse of distance (shorter distances are better)
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Add small value to prevent division by zero

                # Factor 2: Savings (higher savings are better)
                savings_factor = savings_matrix[i, j]

                # Factor 3: Demand (avoid edges that would overload the vehicle)
                demand_factor = 1.0
                if i != 0 and j != 0 and (demands[i] + demands[j] > capacity):
                    demand_factor = 0.0  # Very unpromising if exceeding capacity from depot


                heuristic_matrix[i, j] = distance_factor * (savings_factor+1) * demand_factor  # Combine factors

    # Sparsify the matrix (set unpromising elements to zero)
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25) # Keep top 75% (adjust as needed)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Make depot edges more attractive
    for i in range(1, n):
        heuristic_matrix[0, i] *= 2.0
        heuristic_matrix[i, 0] *= 2.0


    return heuristic_matrix
```
