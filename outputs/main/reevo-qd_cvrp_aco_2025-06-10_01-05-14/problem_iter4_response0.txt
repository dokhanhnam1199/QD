```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Improved version incorporating node proximity, load balancing, adaptive sparsification, and a learned component (demand boost).

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node Proximity Factor (encourage connections between nearby nodes)
    proximity_matrix = np.zeros((n, n))
    max_distance = np.max(distance_matrix)
    for i in range(n):
        for j in range(n):
            proximity_matrix[i, j] = 1 - (distance_matrix[i, j] / (max_distance + 1e-6)) # Adding a small constant to avoid division by zero

    # Load Balancing Factor (penalize edges that lead to exceeding capacity)
    load_balance_matrix = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                load_balance_matrix[i, j] = max(0.1, 1 - (demands[i] + demands[j]) / (2*capacity)) # Penalize if combined demand is larger than the average capacity

    # Combine distance, savings, proximity and load balancing considerations
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance factor (shorter distances are preferred)
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero

                # Savings factor (higher savings are preferred)
                savings_factor = savings_matrix[i, j]

                # Proximity factor
                proximity_factor = proximity_matrix[i, j]

                # Load balancing factor
                load_factor = load_balance_matrix[i, j]

                # Combine the factors
                heuristic_matrix[i, j] = distance_factor * savings_factor * proximity_factor * load_factor

    # Adaptive sparsification: adjust k based on problem size
    k = int(1.5 * np.log(n))  # Adjust k as needed; logarithmic scaling seems appropriate
    # Ensure k is at least 1 and less than n
    k = max(1, min(k, n - 1))

    for i in range(n):
        # Get the indices of the top k promising edges for node i
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]

        # Set the heuristic value to 0 for all other edges
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0

    # Learned Component (boost edges connected to nodes with high demand, normalized)
    demand_boost = np.zeros((n, n))
    total_demand = np.sum(demands[1:])
    normalized_demands = demands / total_demand  # Normalize demand to a probability distribution.
    for i in range(1, n):
        for j in range(1, n):
            demand_boost[i, j] = normalized_demands[i] + normalized_demands[j]  # Sum of normalized demands

    heuristic_matrix = heuristic_matrix + 0.1 * demand_boost # Add a proportion of the demand boost, scaling down to avoid dominating other heuristics

    # Bias towards edges connected to the depot, crucial for CVRP
    depot_bias = np.zeros((n, n))
    for i in range(1, n):
        depot_bias[0, i] = 0.5  # Moderate bias
        depot_bias[i, 0] = 0.5

    heuristic_matrix = heuristic_matrix + 0.1 * depot_bias # adding bias

    return heuristic_matrix
```
