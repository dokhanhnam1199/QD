```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates savings, demand considerations, sparsification, adaptive k, node proximity, and route shape considerations.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node Proximity Factor (encourage edges between geographically close nodes)
    proximity_matrix = np.zeros((n, n))
    max_distance = np.max(distance_matrix)
    for i in range(n):
        for j in range(n):
            proximity_matrix[i, j] = 1 - (distance_matrix[i, j] / max_distance)  # Normalize distance

    # Route Shape Factor (encourage edges that don't cause sharp turns) - very basic
    route_shape_matrix = np.ones((n, n)) # Initialize to neutral

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance factor (shorter distances are preferred)
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero

                # Savings factor (higher savings are preferred)
                savings_factor = savings_matrix[i, j]

                # Demand factor (prioritize connections that help balance vehicle load).
                demand_factor = 1.0
                if (i != 0 and j != 0) and (demands[i] + demands[j] > capacity):
                    demand_factor = 0.0  # Prevent node combination from beginning if exceeds capacity

                # Proximity factor
                proximity_factor = proximity_matrix[i, j]

                # Route shape factor
                route_shape_factor = route_shape_matrix[i, j]
                # Combine the factors
                heuristic_matrix[i, j] = distance_factor * savings_factor * demand_factor * proximity_factor * route_shape_factor

    # Adaptive Sparsification: keep only the top k promising edges for each node
    for i in range(n):
        # Adaptive k:  fewer neighbors if close to depot, more neighbors if far.
        distance_to_depot = distance_matrix[i, 0]
        normalized_distance = distance_to_depot / max_distance
        k = max(1, int((1 - normalized_distance) * np.sqrt(n)) )  #Adjust k dynamically
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]

        # Set the heuristic value to 0 for all other edges
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0

    return heuristic_matrix
```
