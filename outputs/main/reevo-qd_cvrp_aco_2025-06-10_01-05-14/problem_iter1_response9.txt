```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of customers
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance, savings, demand, and proximity to depot
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0
            else:
                # Distance factor: shorter distances are more promising
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small value to avoid division by zero

                # Savings factor: higher savings are more promising
                savings_factor = savings_matrix[i, j]

                # Demand factor: Penalize edges that connect nodes with high demands if capacity is exceeded.
                demand_factor = 1.0 / (demands[i] + demands[j] + 1e-6)

                # Proximity to depot factor: prioritize nodes closer to the depot, avoid long trips to depot later
                depot_proximity_factor = (1 / (distance_matrix[0, i] + 1e-6)) * (1 / (distance_matrix[0, j] + 1e-6))

                # Combine all factors
                heuristic_matrix[i, j] = distance_factor * (0.4) + savings_factor * (0.3) + demand_factor*(0.15) + depot_proximity_factor*(0.15)

    # Sparsify the matrix by setting unpromising elements to zero
    # Keep only the top k edges for each node, or edges with value above a threshold

    # Method 1: Top k edges
    k = int(np.ceil(np.log(n)))
    for i in range(n):
        row = heuristic_matrix[i, :].copy() # use copy so we don't modify the original
        indices = np.argsort(row)[::-1][k:] # gets indices of everything but the top k (reverse sorted)
        heuristic_matrix[i, indices] = 0
    

    # Alternatively, use a threshold (e.g., based on mean)
    # threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.5
    # heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
