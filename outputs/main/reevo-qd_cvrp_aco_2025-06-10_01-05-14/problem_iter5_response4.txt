```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance, savings, and demand considerations
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance factor (shorter distances are preferred)
                distance_factor = np.exp(-distance_matrix[i, j] / np.mean(distance_matrix))

                # Savings factor (higher savings are preferred)
                savings_factor = savings_matrix[i, j] / (np.max(savings_matrix) + 1e-6) # Normalize savings

                # Demand factor (prioritize connections that help balance vehicle load).
                # Avoid combining nodes if combined demand exceeds capacity right away
                demand_factor = 1.0
                if (i != 0 and j != 0):
                    if (demands[i] + demands[j] > capacity):
                        demand_factor = 0.1  # Strongly discourage, but allow for escape
                    else:
                        demand_factor = (capacity - abs(demands[i] + demands[j] - capacity/2.0)) / capacity  # closer to half capacity prefered

                # Combine the factors (geometric mean)
                heuristic_matrix[i, j] = (distance_factor * savings_factor * demand_factor)**(1/3)

    # Adaptive sparsification: adjust k based on problem size
    k = int(np.sqrt(n))  # Adjust k as needed; logarithmic scaling seems appropriate
    # Ensure k is at least 1 and less than n
    k = max(1, min(k, n - 1))

    for i in range(n):
        # Get the indices of the top k promising edges for node i
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]

        # Set the heuristic value to a small value for all other edges to guide towards promising nodes
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0.001 * heuristic_matrix[i,top_k_indices[-1]] if len(top_k_indices) > 0 else 0.0

    # Learned Component (simple example: boost edges connected to nodes with high demand)
    demand_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            demand_boost[i, j] = (demands[i] + demands[j]) / (2 * capacity) # Scale by capacity to avoid excessive boost

    heuristic_matrix = heuristic_matrix + 0.05 * demand_boost # Add a smaller proportion of the demand boost
    heuristic_matrix[np.diag_indices_from(heuristic_matrix)] = 0 # Ensure no self loops

    return heuristic_matrix
```
