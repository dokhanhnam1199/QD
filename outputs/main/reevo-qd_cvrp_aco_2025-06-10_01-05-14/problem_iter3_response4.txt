```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node Proximity Factor (Encourage connections between nearby nodes)
    proximity_matrix = np.zeros((n, n))
    max_distance = np.max(distance_matrix)
    for i in range(n):
        for j in range(n):
            proximity_matrix[i, j] = 1 - (distance_matrix[i, j] / max_distance)  # Normalize distance to [0, 1] and invert

    # Combine distance, savings, proximity, and demand considerations
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance factor (shorter distances are preferred)
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero

                # Savings factor (higher savings are preferred)
                savings_factor = savings_matrix[i, j]

                # Demand factor (prioritize connections that help balance vehicle load).
                demand_factor = 1.0
                if (i != 0 and j != 0):
                    if demands[i] + demands[j] > capacity:
                        demand_factor = 0.0
                    else:
                        # Encourage combining smaller demands
                        demand_factor = 1 - (demands[i] + demands[j]) / capacity
                else:
                    demand_factor = 1.0


                # Node Proximity Factor
                proximity_factor = proximity_matrix[i, j]

                # Combine the factors
                heuristic_matrix[i, j] = distance_factor * savings_factor * demand_factor * proximity_factor

    # Adaptive sparsification: adjust k based on problem size
    k = int(1.5 * np.log(n))  # Adjust k; make it less aggressive in pruning
    k = max(1, min(k, n - 1))

    for i in range(n):
        # Get the indices of the top k promising edges for node i
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]

        # Set the heuristic value to 0 for all other edges
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0

    # Learned Component (Adjust based on demand characteristics)
    demand_boost = np.zeros((n, n))
    avg_demand = np.mean(demands[1:]) # Average demand of customers, excluding depot
    for i in range(1, n):
        for j in range(1, n):
            # If both nodes have above-average demand, slightly discourage the connection
            if demands[i] > avg_demand and demands[j] > avg_demand:
                demand_boost[i, j] = -0.05  # Slight discouragement
            else:
                demand_boost[i, j] = 0.02 * (1 - abs(demands[i] - demands[j]) / capacity) # Encourage if demands are dissimilar

    heuristic_matrix = heuristic_matrix + 0.1 * demand_boost # Add the demand boost; reduce the scaling factor

    return heuristic_matrix
```
