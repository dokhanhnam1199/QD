```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Parameters to control the influence of different factors
    alpha = 0.5  # Weight for distance
    beta = 0.3  # Weight for demand
    gamma = 0.2  # Weight for angle to depot

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor: shorter distance is more promising
                distance_factor = 1 / distance_matrix[i, j]

                # Demand factor: consider the demands of both nodes
                demand_factor = 1 / (demands[i] + demands[j] + 1e-6) # Small epsilon added to prevent division by zero

                # Angle to depot factor: nodes closer to the depot in terms of angle are more promising.
                # Calculates the angle between the lines connecting i to depot (0) and j to depot (0)
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[0]
                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)

                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))  # Clip to handle potential floating-point errors
                    angle_factor = 1 / (angle + 1e-6) # Prefer smaller angles
                else:
                    angle_factor = 0  # If either node is the depot, angle doesn't make sense

                # Combine the factors
                heuristic_matrix[i, j] = (alpha * distance_factor +
                                           beta * demand_factor +
                                           gamma * angle_factor)

    # Sparsify the matrix: keep only the most promising edges
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 50)  # Keep top 50%
    heuristic_matrix[heuristic_matrix < threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0) # Remove self loops.

    return heuristic_matrix
```
