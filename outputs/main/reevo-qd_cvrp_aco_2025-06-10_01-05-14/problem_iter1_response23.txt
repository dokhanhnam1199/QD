```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for CVRP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Edge prior indicators (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Parameters (can be tuned)
    alpha = 1.0  # Weight for distance
    beta = 0.5  # Weight for demand (attraction to nodes with appropriate demand)
    gamma = 0.2  # Weight for depot proximity
    delta = 0.1 # Weight for coordinate proximity

    # Calculate depot distances
    depot_distances = distance_matrix[0, :]
    depot_distances = np.tile(depot_distances, (n, 1)) #make broadcastable

    # Calculate demand compatibility.  Give higher values to edges leading to nodes whose demand is "appropriate"
    # Relative to the capacity.
    demand_compatibility = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            if i==j:
                demand_compatibility[i,j] = 0 #avoid loops
            else:
                demand_compatibility[i,j] = max(0, 1 - abs(demands[j] - capacity/3)/capacity)  # Example: reward demands around 1/3 capacity

    #Coordinate proximity. Nodes that are in a similar location.
    coordinate_proximity = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            if i == j:
                coordinate_proximity[i,j] = 0
            else:
                dist_coord = np.linalg.norm(coordinates[i] - coordinates[j])
                coordinate_proximity[i,j] = np.exp(-dist_coord)


    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = (
                    (alpha / (distance_matrix[i, j] + 1e-6)) +  # Avoid division by zero
                    (beta * demand_compatibility[i, j]) +
                    (gamma / (depot_distances[i,j] + 1e-6)) +
                    (delta * coordinate_proximity[i,j])
                )
                #Sparsify
                if demands[j] > capacity: #Cannot visit the node due to capacity
                    heuristic_matrix[i, j] = 0
                if i == 0 and demands[j] > capacity/2:
                    heuristic_matrix[i, j] = 0 #Avoid large loads straight from depot.


    #Sparsify more aggressively
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2 #Keep only top 20%
    heuristic_matrix[heuristic_matrix < threshold] = 0
    np.fill_diagonal(heuristic_matrix,0) # no self loops

    return heuristic_matrix
```
