```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates several factors to assess the desirability of including each edge in a solution:
    - Distance: Shorter distances are preferred.
    - Demand Compatibility: Edges connecting nodes with compatible demands are favored.
    - Depot Proximity: Edges closer to the depot are considered more often, particularly for starting and ending routes.
    - Sparsity: Unpromising edges are set to zero to reduce the search space.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Parameters (can be tuned)
    distance_weight = 1.0
    demand_weight = 0.5
    depot_proximity_weight = 0.3
    sparsity_threshold = 0.1

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            # Distance factor (shorter distances are better)
            distance_factor = distance_weight / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero

            # Demand compatibility factor (encourages routes with compatible demands)
            demand_factor = 1.0
            if demands[i] + demands[j] > capacity:
                demand_factor = 0.1  # Penalize edges that likely exceed capacity
            else:
                demand_factor = 1.0 # Consider edges that fit vehicle capacity

            # Depot proximity factor (prioritizes edges close to the depot, especially for starting/ending routes)
            depot_proximity_i = np.linalg.norm(coordinates[i] - coordinates[0])
            depot_proximity_j = np.linalg.norm(coordinates[j] - coordinates[0])
            depot_proximity_factor = depot_proximity_weight / (depot_proximity_i + depot_proximity_j + 1e-6)


            # Combine the factors
            heuristic_matrix[i, j] = (
                distance_factor +
                demand_factor * demand_weight +
                depot_proximity_factor
            )

    # Normalize the heuristic matrix (optional, but can improve performance)
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    # Sparsify the matrix (set unpromising edges to zero)
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], sparsity_threshold) # ignore zero value when considering threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0.0


    return heuristic_matrix
```
