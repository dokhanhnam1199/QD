```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters for tuning the heuristic
    alpha = 1.0  # Weight for distance
    beta = 1.0   # Weight for demand considerations
    gamma = 1.0  # Weight for closeness to depot

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor: Shorter distances are more promising
                distance_factor = np.exp(-alpha * distance_matrix[i, j] / np.mean(distance_matrix))

                # Demand factor: Avoid edges that quickly lead to capacity overflow
                demand_factor = 1.0
                if i != 0 and j != 0: #exclude depot
                    demand_factor = np.exp(-beta * (demands[i] + demands[j]) / capacity)


                # Closeness to depot: Prefer edges that bring you closer to the depot.  Penalize going far away.
                depot_distance_factor = 1.0

                # Heuristic value is a combination of these factors
                heuristic_matrix[i, j] = distance_factor * demand_factor * depot_distance_factor

    # Sparsify the matrix: Keep only the most promising edges
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 70) # Keep top 30%

    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalize to avoid inf and nan
    if np.any(heuristic_matrix > 0): #make sure some elements are non-zero.
        heuristic_matrix = heuristic_matrix / np.max(heuristic_matrix)

    return heuristic_matrix
```
