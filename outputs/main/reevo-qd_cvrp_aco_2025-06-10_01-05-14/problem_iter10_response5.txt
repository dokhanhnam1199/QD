```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Improves upon v1 by dynamically adjusting parameters.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Calculate average demand
    avg_demand = np.mean(demands[1:])  # Exclude depot demand

    # Dynamic k for sparsification
    k = max(2, int(np.sqrt(n))) #ensure at least 2 edges are kept.

    # Adjust weights based on problem characteristics
    distance_weight = 1.0
    savings_weight = 1.0
    demand_weight = 1.0

    if capacity < 3 * avg_demand:
        demand_weight = 1.5 # More emphasis on demand if capacity is tight
        savings_weight = 0.8 # Slightly deemphasize savings

    # Combine distance, savings, and demand considerations
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance factor (shorter distances are preferred)
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero

                # Savings factor (higher savings are preferred)
                savings_factor = savings_matrix[i, j]

                # Demand factor (prioritize connections that help balance vehicle load).
                demand_factor = 1.0
                if (i != 0 and j != 0):
                    if (demands[i] + demands[j] > capacity):
                        demand_factor = 0.0  # Prevent immediate capacity violations
                    else:
                        #Prefer pairing nodes with complementary demand levels to better utilize capacity.
                        demand_factor = 1 - abs(demands[i] - demands[j]) / capacity

                # Combine the factors
                heuristic_matrix[i, j] = (distance_weight * distance_factor +
                                           savings_weight * savings_factor +
                                           demand_weight * demand_factor)

    # Sparsify the matrix: keep only the top k promising edges for each node
    for i in range(n):
        # Get the indices of the top k promising edges for node i
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]

        # Set the heuristic value to 0 for all other edges
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0

    return heuristic_matrix
```
