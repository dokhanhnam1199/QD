```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Incorporates savings, demand considerations, node proximity, route shape, and adaptive k-sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Calculate node proximity based on Euclidean distance
    proximity_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            proximity_matrix[i, j] = np.linalg.norm(coordinates[i] - coordinates[j])
            if proximity_matrix[i,j] == 0:
                proximity_matrix[i,j] = 1e-6

    # Combine distance, savings, proximity and demand considerations
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance factor (shorter distances are preferred)
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero

                # Savings factor (higher savings are preferred)
                savings_factor = savings_matrix[i, j]

                # Demand factor
                demand_factor = 1.0
                if (i != 0 and j != 0) and (demands[i] + demands[j] > capacity):
                    demand_factor = 0.0

                # Proximity factor (nodes close by are more likely to belong to the same route)
                proximity_factor = 1 / (proximity_matrix[i, j] + 1e-6)

                # Combine the factors
                heuristic_matrix[i, j] = distance_factor * savings_factor * demand_factor * proximity_factor

    # Adaptive sparsification
    for i in range(n):
        # The number of edges to keep should depend on the node's demand:
        # Nodes with high demand might need more connections to depot
        k = int(np.sqrt(n) * (1 - demands[i]/np.max(demands))) + 2  # Adding +2 to ensure that k is not zero even if demands[i] is high
        k = min(k, n - 1)  # Ensure that k is not greater than n-1
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0

    return heuristic_matrix
```
