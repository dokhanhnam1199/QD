```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings matrix (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Distance factor: Inverse of distance
    distance_factor = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Demand factor: Penalize edges connecting nodes with high demands
    demand_factor = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            demand_factor[i, j] = 1 / (demands[i] + demands[j] + 1e-9)

    # Depot proximity factor: Favor edges close to the depot, especially if they connect to high demand nodes
    depot_proximity_factor = np.zeros((n, n))
    for i in range(1, n):
        depot_proximity_factor[0, i] = 1 / (distance_matrix[0, i] + 1e-9) * demands[i]/capacity
        depot_proximity_factor[i, 0] = depot_proximity_factor[0, i]
        for j in range(1,n):
            depot_proximity_factor[i,j] = (depot_proximity_factor[0,i] + depot_proximity_factor[0,j])/2

    # Combine factors:
    heuristics_matrix = distance_factor * demand_factor * savings_matrix * depot_proximity_factor

    # Sparsify the matrix: Zero out edges that are not promising
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 50) # Keep top 50% values
    heuristics_matrix[heuristics_matrix < threshold] = 0

    #Ensure the diagonal elements are zero to avoid self loops.
    for i in range(n):
        heuristics_matrix[i, i] = 0
    
    return heuristics_matrix
```
