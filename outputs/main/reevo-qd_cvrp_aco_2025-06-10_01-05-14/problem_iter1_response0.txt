```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings matrix
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node proximity to depot (distance factor)
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / distance_matrix[0, i] # Closer nodes are preferred
    
    # Demand factor
    demand_normalized = demands / np.max(demands)  # Normalize demand to range [0, 1]

    # Edge demand consideration: Prioritize edges connecting nodes with smaller total demand.
    edge_demand = np.zeros((n, n))
    for i in range(1, n):
      for j in range(1, n):
        edge_demand[i, j] = 1 / (demand_normalized[i] + demand_normalized[j] + 1e-6) # Add small value for numerical stability.


    # Combine factors to create the heuristic matrix
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = (
                    0.4 * (1 / (distance_matrix[i, j] + 1e-6))  # Distance factor
                    + 0.3 * savings_matrix[i, j] # Savings factor
                    + 0.15 * depot_proximity[i] + 0.15 * depot_proximity[j] # proximity factor
                    + 0.1 * edge_demand[i,j] # edge demand factor
                )
            else:
                heuristic_matrix[i, j] = 0  # No self-loops

    # Sparsify the matrix: keep only top k edges for each node
    k = int(np.sqrt(n)) # Adjust k as needed. sqrt(n) is just a guide
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argpartition(row, -k)[-k:]  # Indices of k largest elements
        mask = np.ones(n, dtype=bool)
        mask[indices] = False
        heuristic_matrix[i, mask] = 0
        heuristic_matrix[i, i] = 0 # Remove self loop again just to be sure.

    # Normalize
    heuristic_matrix = heuristic_matrix / np.max(heuristic_matrix) #normalize to avoid any extremely large values

    return heuristic_matrix
```
