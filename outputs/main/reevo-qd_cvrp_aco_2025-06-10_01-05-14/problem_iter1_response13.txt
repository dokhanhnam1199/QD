```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Calculate savings for each pair of customers
    savings = np.zeros((n, n), dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings[j, i] = savings[i, j]  # Savings matrix is symmetric

    # Normalize distances (invert and scale)
    normalized_distances = 1 / (distance_matrix + 1e-6)  # Add small value to avoid division by zero
    normalized_distances = normalized_distances / np.max(normalized_distances)

    # Demand factor: Edges connecting nodes with high demands might be less desirable
    demand_factor = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            demand_factor[i, j] = demands[i] + demands[j]

    demand_factor = demand_factor / np.max(demand_factor)  # Normalize demand factor
    demand_factor = 1 - demand_factor #Invert: higher is better

    #Combination of factors
    heuristics = 0.4* normalized_distances + 0.4 * savings/np.max(savings) + 0.2 * demand_factor

    #Sparsify the matrix
    threshold = np.percentile(heuristics[heuristics > 0], 50) #Keep top 50 %
    heuristics[heuristics < threshold] = 0
    
    #Set diagonals to 0 to avoid self-loops
    for i in range(n):
        heuristics[i, i] = 0

    return heuristics
```
