```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance, savings, and demand considerations
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance factor (shorter distances are preferred)
                distance_factor = np.exp(-distance_matrix[i, j] / np.mean(distance_matrix))

                # Savings factor (higher savings are preferred)
                savings_factor = savings_matrix[i, j] / (np.max(savings_matrix) + 1e-6) # Normalize savings

                # Demand factor (prioritize connections that help balance vehicle load).
                demand_similarity = 1 - abs(demands[i] - demands[j]) / (capacity + 1e-6) if (i != 0 and j != 0) else 1.0
                if (i != 0 and j != 0) and (demands[i] + demands[j] > capacity):
                    demand_similarity = 0.0
                
                # Combine the factors
                heuristic_matrix[i, j] = distance_factor * savings_factor * demand_similarity

    # Adaptive sparsification: adjust k based on local density
    k = int(np.sqrt(n))  # Adjust k as needed, trying a square root scaling
    k = max(1, min(k, n - 1))

    for i in range(n):
        # Get the indices of the top k promising edges for node i
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]

        # Set the heuristic value to 0 for all other edges
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0

    # Edge Following: Boost edges connecting to nodes with high connectivity
    connectivity_boost = np.zeros((n, n))
    node_connectivity = np.sum(heuristic_matrix > 0, axis=0) # number of non zero entries by column (incoming edges)
    for i in range(1, n):
        for j in range(1, n):
            connectivity_boost[i, j] = (node_connectivity[i] + node_connectivity[j]) / (2 * k + 1e-6) # Avoid division by zero, scale by max possible connectivity
    
    heuristic_matrix = heuristic_matrix + 0.05 * connectivity_boost # Lower influence compared to the first version

    return heuristic_matrix
```
