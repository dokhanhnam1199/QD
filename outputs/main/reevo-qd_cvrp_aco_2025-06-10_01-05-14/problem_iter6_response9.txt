```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Improved version with refined heuristics, sparsification, and a learned component.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Normalize the savings matrix
    max_savings = np.max(savings_matrix)
    if max_savings > 0:
        savings_matrix = savings_matrix / max_savings
    else:
        savings_matrix = np.zeros((n,n))  # Handle the case where all savings are zero

    # Combine distance, savings, and demand considerations
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance factor (shorter distances are preferred)
                distance_factor = np.exp(-distance_matrix[i, j] / np.mean(distance_matrix))

                # Savings factor (higher savings are preferred)
                savings_factor = savings_matrix[i, j]

                # Demand factor (prioritize connections that help balance vehicle load).
                demand_penalty = 0.0
                if i != 0 and j != 0:
                    combined_demand = demands[i] + demands[j]
                    if combined_demand > capacity:
                        demand_penalty = 1.0  # Heavy penalty if exceeds
                    else:
                        demand_penalty = (combined_demand / capacity)**2 # Moderate penalty

                demand_factor = 1 - demand_penalty # Modified Demand factor

                # Combine the factors
                heuristic_matrix[i, j] = distance_factor * savings_factor * demand_factor # Multiplicative Combination
                # Adding proximity to depot
                heuristic_matrix[i, j] *= (1 / (distance_matrix[0,i] + distance_matrix[0,j] + 1e-6))**0.5 # Prefer nodes closer to depot

    # Adaptive sparsification: adjust k based on problem size
    k = int(np.sqrt(n))  # Adjust k as needed; square root scaling
    # Ensure k is at least 1 and less than n
    k = max(1, min(k, n - 1))

    for i in range(n):
        # Get the indices of the top k promising edges for node i
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]

        # Set the heuristic value to 0 for all other edges
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0

    # Learned Component (boost edges connected to nodes with high demand and proximity)
    demand_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            demand_boost[i, j] = (demands[i] * demands[j]) / (capacity**2) # More impact if both high
            demand_boost[i, j] *= np.exp(-(distance_matrix[0, i] + distance_matrix[0, j]) / np.mean(distance_matrix))

    #Normalize demand boost
    max_demand_boost = np.max(demand_boost)
    if max_demand_boost > 0:
        demand_boost = demand_boost / max_demand_boost
    else:
        demand_boost = np.zeros((n,n))

    heuristic_matrix = heuristic_matrix + 0.1 * demand_boost  # Add a small proportion of the demand boost

    # Final touch: Emphasize edges connected to the depot
    for i in range(1,n):
        heuristic_matrix[0, i] *= 1.2
        heuristic_matrix[i, 0] *= 1.2

    return heuristic_matrix
```
