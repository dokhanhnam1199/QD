{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Combine distance, savings, and demand considerations\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n            else:\n                # Distance factor (shorter distances are preferred)\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero\n\n                # Savings factor (higher savings are preferred)\n                savings_factor = savings_matrix[i, j]\n\n                # Demand factor (prioritize connections that help balance vehicle load).\n                # Avoid combining nodes if combined demand exceeds capacity right away\n                demand_factor = 1.0\n                if (i != 0 and j != 0) and (demands[i] + demands[j] > capacity):\n                    demand_factor = 0.0  # prevent node combination from beginning\n\n                # Combine the factors\n                heuristic_matrix[i, j] = distance_factor * savings_factor * demand_factor\n\n    # Sparsify the matrix: keep only the top k promising edges for each node\n    k = int(np.sqrt(n))  # Adjust k as needed; e.g., const * np.log(n)\n    for i in range(n):\n        # Get the indices of the top k promising edges for node i\n        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]\n\n        # Set the heuristic value to 0 for all other edges\n        for j in range(n):\n            if j not in top_k_indices:\n                heuristic_matrix[i, j] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Calculate savings for each pair of nodes (Clarke-Wright Savings Heuristic)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Combine distance, savings, and demand considerations\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n            else:\n                # Distance factor (shorter distances are preferred)\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero\n\n                # Savings factor (higher savings are preferred)\n                savings_factor = savings_matrix[i, j]\n\n                # Demand factor (prioritize connections that help balance vehicle load).\n                # Avoid combining nodes if combined demand exceeds capacity right away\n                demand_factor = 1.0\n                if (i != 0 and j != 0) and (demands[i] + demands[j] > capacity):\n                    demand_factor = 0.0  # prevent node combination from beginning\n\n                # Combine the factors\n                heuristic_matrix[i, j] = distance_factor * savings_factor * demand_factor\n\n    # Adaptive sparsification: adjust k based on problem size\n    k = int(2 * np.log(n))  # Adjust k as needed; logarithmic scaling seems appropriate\n    # Ensure k is at least 1 and less than n\n    k = max(1, min(k, n - 1))\n\n    for i in range(n):\n        # Get the indices of the top k promising edges for node i\n        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]\n\n        # Set the heuristic value to 0 for all other edges\n        for j in range(n):\n            if j not in top_k_indices:\n                heuristic_matrix[i, j] = 0\n\n    # Learned Component (more sophisticated: boost edges connected to nodes with high demand, considering depot)\n    demand_boost = np.zeros((n, n))\n    total_demand = np.sum(demands[1:])  # Total demand of all customers\n\n    for i in range(1, n):\n        for j in range(1, n):\n            # Boost edges connecting high-demand nodes to each other or to the depot\n            demand_component = (demands[i] / total_demand + demands[j] / total_demand)\n            # Prioritize connecting high demand nodes to the depot and vice versa\n            depot_proximity = (1 / (distance_matrix[i, 0] + 1e-6) + 1 / (distance_matrix[j, 0] + 1e-6)) if (i !=j) else 0\n\n            demand_boost[i, j] = demand_component + 0.1 * depot_proximity\n\n    # Scale the demand boost to avoid dominating other heuristics\n    demand_boost_scale = 0.05\n    heuristic_matrix = heuristic_matrix + demand_boost_scale * demand_boost\n    \n    # Introducing Capacity-Aware Edge Penalization\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                # Penalize edges that lead to exceeding vehicle capacity early in the route\n                # The penalty is higher if the combined demand is significantly greater than the capacity.\n                combined_demand = demands[i] + demands[j]\n                if combined_demand > capacity:\n                    penalty_factor = (combined_demand - capacity) / capacity  # Scale penalty\n                    heuristic_matrix[i, j] *= (1 - 0.2 * penalty_factor)  # Reduce the heuristic value\n                    heuristic_matrix[j, i] *= (1 - 0.2 * penalty_factor) #Ensure symetry\n\n    return heuristic_matrix\n\n[Reflection]\nAdaptive sparsification, demand-aware boosting, and capacity-aware penalization improve heuristic quality.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}