```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Improved version with refined heuristics, sparsification, and learned components.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Clarke-Wright Savings Heuristic
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Depot Proximity Heuristic: prioritize connections near the depot
    depot_proximity = np.zeros((n, n))
    for i in range(1, n):
        depot_proximity[0, i] = 1 / (distance_matrix[0, i] + 1e-6)
        depot_proximity[i, 0] = 1 / (distance_matrix[i, 0] + 1e-6)

    # Demand-based Adjustment: discourage links that violate capacity constraints early
    demand_compatibility = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if demands[i] + demands[j] > capacity:
                demand_compatibility[i, j] = 0.1  # Discourage, but don't eliminate

    # Combined Heuristic
    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor
                distance_factor = np.exp(-distance_matrix[i, j] / np.mean(distance_matrix))

                # Savings factor
                savings_factor = savings_matrix[i, j] / (np.max(savings_matrix) + 1e-6)

                heuristic_matrix[i, j] = distance_factor * savings_factor * demand_compatibility[i,j]

                # Incorporate Depot Proximity: more direct impact
                if i == 0 or j == 0:
                     heuristic_matrix[i, j] *= (depot_proximity[i, j] + 0.5)  # Combine savings with distance to depot

    # Adaptive Sparsification: depends on problem size
    k = max(1, min(int(np.sqrt(n) * 2), n - 1))

    for i in range(n):
        top_k_indices = np.argsort(heuristic_matrix[i, :])[::-1][:k]
        for j in range(n):
            if j not in top_k_indices:
                heuristic_matrix[i, j] = 0

    # Learned Component (Example: promote edges frequently in good solutions)
    # In a real scenario, this data would come from previous iterations.
    # Here, we simulate it with a simple demand correlation.

    demand_correlation = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            demand_correlation[i, j] = (demands[i] * demands[j]) / (capacity**2 + 1e-6)

    heuristic_matrix += 0.05 * demand_correlation  # Small influence
    return heuristic_matrix
```
