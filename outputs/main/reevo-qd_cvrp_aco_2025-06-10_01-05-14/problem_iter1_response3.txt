```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for solving the Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This function combines several factors to estimate the desirability of including each edge in a solution.
    It considers distance, demand, angle, and sparsifies the matrix by setting unpromising elements to zero.

    Args:
        distance_matrix (np.ndarray): A distance matrix (shape: n by n) representing distances between nodes.
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): A vector of customer demands (shape: n).
        capacity (int): The capacity of each vehicle.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                    The return is of the same shape as the distance_matrix.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters for tuning the heuristic
    distance_importance = 1.0
    demand_importance = 0.5
    angle_importance = 0.2
    sparsity_threshold = 3.0 # Increased threshold for potentially better exploration

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor (more promising for shorter distances)
                distance_factor = 1 / distance_matrix[i, j]

                # Demand factor (discourage connecting nodes with very high individual demands if either i or j are depot, or very low demand in general)
                demand_factor = 1.0  # Default value
                if i == 0 or j == 0:
                    demand_factor = 1 / max(1e-6, demands[i] + demands[j])  # Avoid division by zero
                else:
                    demand_factor = 1 / max(1e-6, demands[i] + demands[j])


                # Angle factor (encourages connections that don't deviate too much)
                # Calculate angle between the depot and the two nodes i and j
                if i != 0 and j != 0:
                    depot_x, depot_y = coordinates[0]
                    node_i_x, node_i_y = coordinates[i]
                    node_j_x, node_j_y = coordinates[j]

                    vector_i = np.array([node_i_x - depot_x, node_i_y - depot_y])
                    vector_j = np.array([node_j_x - depot_x, node_j_y - depot_y])

                    # Compute cosine similarity for the angle, clip for stability
                    cos_angle = np.dot(vector_i, vector_j) / (np.linalg.norm(vector_i) * np.linalg.norm(vector_j) + 1e-8)
                    cos_angle = np.clip(cos_angle, -1.0, 1.0) # Ensure it falls between -1 and 1

                    angle_factor = (1 + cos_angle) / 2  # Scale angle factor to be between 0 and 1, higher is better

                else:
                    angle_factor = 0.5 #neutral value when one of the nodes is the depot

                # Combine factors
                heuristic_matrix[i, j] = (
                    distance_importance * distance_factor +
                    demand_importance * demand_factor +
                    angle_importance * angle_factor
                )

    # Sparsify the matrix: zero out less promising edges
    mean_heuristic = np.mean(heuristic_matrix[heuristic_matrix > 0])  # Consider only non-zero elements
    heuristic_matrix[heuristic_matrix < mean_heuristic / sparsity_threshold] = 0

    return heuristic_matrix
```
