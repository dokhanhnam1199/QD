```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by assigning higher,
    positive priority scores to bins that result in smaller remaining
    capacities (tighter fits). Perfect fits (0 remaining capacity) receive
    the highest possible score. Bins where the item does not fit are
    assigned the lowest possible priority (-np.inf).

    This version leverages the problem state (remaining capacity) to
    calculate a score that is inversely proportional to the remaining
    capacity after placement. This makes the interpretation of 'higher
    score is better' more intuitive and explicitly prioritizes perfect fits
    over near-perfect or loose fits, aligning directly with the objective
    of minimizing the number of bins by packing items as tightly as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were hypothetically placed.
    hypothetical_remaining = bins_remain_cap - item

    # A small epsilon to prevent division by zero if hypothetical_remaining is 0 (perfect fit).
    # This also ensures that perfect fits receive a very large, distinct priority score.
    epsilon = 1e-9

    # Calculate scores for bins where the item fits.
    # The score is inversely proportional to the hypothetical remaining capacity.
    # Smaller remaining capacity (tighter fit) results in a larger positive score.
    # Perfect fits (rem=0) get an extremely high score due to epsilon.
    fit_scores = 1.0 / (hypothetical_remaining + epsilon)

    # Assign priority scores:
    # - If the item fits (hypothetical_remaining is non-negative), use the calculated fit_scores.
    #   This ensures that tighter fits receive higher positive scores, with perfect fits being the best.
    # - If the item does not fit (hypothetical_remaining is negative), assign
    #   a very low priority (-np.inf) to ensure these bins are never selected.
    priority_scores = np.where(
        hypothetical_remaining >= 0,
        fit_scores,
        -np.inf
    )

    return priority_scores
```
