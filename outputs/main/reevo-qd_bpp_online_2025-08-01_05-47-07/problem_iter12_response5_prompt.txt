{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add an item to each bin.\n    This heuristic implements a Best-Fit-like strategy that strongly prioritizes\n    perfect fits. For cases that are not perfect fits, it falls back to the\n    standard Best Fit approach (minimizing remaining capacity).\n    The design addresses the \"Prior reflection\" by:\n    1. Prioritizing Best Fit for immediate utilization by preferring tighter fits.\n    2. Rewarding perfect fits with an exceptionally high score to \"fill bins\".\n    3. Implicitly \"penalizing small fragments\" by making perfect fits vastly\n       more attractive than any non-perfect fit, even those that result in a\n       very small remaining capacity. The value of a perfectly utilized bin\n       outweighs the marginal benefit of a very small (but non-zero) fragment.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin if the item were placed in it.\n    # A negative value indicates the item does not fit.\n    hypothetical_remaining = bins_remain_cap - item\n\n    # Initialize priority scores for all bins to a very low value (-infinity).\n    # This ensures that bins where the item does not fit (hypothetical_remaining < 0)\n    # will never be selected by argmax, as their score will remain -np.inf.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n\n    # --- Step 1: Identify and assign scores for perfect fits ---\n    # A perfect fit leaves exactly 0 capacity remaining.\n    perfect_fit_mask = hypothetical_remaining == 0\n\n    # Assign a very high positive score for perfect fits. This score must be\n    # guaranteed to be higher than any possible score from a non-perfect fit.\n    # If bins_remain_cap is empty, max_bin_capacity would be invalid, handle this.\n    if bins_remain_cap.size > 0:\n        # A score derived from the max bin capacity ensures it's relative to the problem scale\n        # and sufficiently large to dominate any negative scores from non-perfect fits.\n        perfect_fit_value = np.max(bins_remain_cap) + 1.0\n    else:\n        # If there are no bins, the specific value doesn't matter, but set a default.\n        perfect_fit_value = 1.0 \n\n    priority_scores[perfect_fit_mask] = perfect_fit_value\n\n    # --- Step 2: Handle bins where the item fits but is not a perfect fit ---\n    # These are bins where hypothetical_remaining is positive (0 < hypothetical_remaining <= original_capacity).\n    non_perfect_fit_mask = (hypothetical_remaining > 0)\n\n    # For these bins, implement the Best Fit strategy: prioritize bins that result\n    # in the smallest remaining capacity. To do this with np.argmax (which selects\n    # the maximum score), we negate the hypothetical_remaining.\n    # These scores will be negative (or zero if hypothetical_remaining is very small,\n    # but still less than 1), ensuring that perfect fits (with their large positive score)\n    # are always preferred over any non-perfect fit.\n    priority_scores[non_perfect_fit_mask] = -hypothetical_remaining[non_perfect_fit_mask]\n\n    return priority_scores\n\n[Reflection]\nPrioritize perfect fits, then minimal remaining capacity. Leverage all problem-specific properties.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}