```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on the First Fit heuristic.

    The First Fit heuristic places the item into the first bin (in order of appearance)
    that can accommodate it. This heuristic is known for its simplicity and computational
    efficiency in online bin packing.

    As per the reflection, simpler heuristics often perform well. While Best Fit (priority_v1)
    focuses on minimizing remaining space, First Fit offers an alternative simple strategy
    by prioritizing the earliest available bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         The order of bins in this array is crucial, as it defines
                         which bin is considered "first".

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins where the item does not fit receive a very low (negative infinity) score.
        For bins where it fits, the score is inversely related to their index, meaning
        bins appearing earlier in the `bins_remain_cap` array will have higher scores.
    """
    # Initialize all priorities to a very low value (negative infinity).
    # This ensures that bins where the item does not fit are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # For the bins that can fit the item, assign a score based on their index.
    # To implement First Fit using a priority score (where higher is better),
    # we assign a higher score to bins with a lower index (i.e., appearing earlier).
    # Using the negative of the index achieves this:
    # index 0 gets score 0
    # index 1 gets score -1
    # index 2 gets score -2, and so on.
    # When np.argmax is used, it will select the bin with the smallest index among those that fit.
    priorities[can_fit_mask] = -np.arange(len(bins_remain_cap))[can_fit_mask].astype(float)

    return priorities
```
