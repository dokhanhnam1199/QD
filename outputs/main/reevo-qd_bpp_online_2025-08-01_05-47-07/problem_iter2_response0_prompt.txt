{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This implementation uses a Best Fit heuristic: it prioritizes bins\n    that will have the smallest non-negative remaining capacity after the\n    item is placed. Bins where the item does not fit receive a very low priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate a more desirable bin.\n    \"\"\"\n    # Calculate the remaining capacity if the item were hypothetically placed in each bin.\n    # This also naturally handles cases where the item does not fit, resulting in negative values.\n    potential_remaining_cap = bins_remain_cap - item\n\n    # Initialize priority scores for all bins to a very low value.\n    # Bins that cannot fit the item will retain this -np.inf score.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Create a boolean mask for bins where the item can actually fit.\n    fitting_bins_mask = potential_remaining_cap >= 0\n\n    # For bins where the item fits, calculate the priority score.\n    # The Best Fit strategy aims to minimize the remaining space.\n    # To convert this minimization into a maximization problem (for priority scores),\n    # we negate the potential_remaining_cap.\n    #\n    # Examples:\n    # - If potential_remaining_cap is 0.0 (perfect fit), priority is 0.0 (highest).\n    # - If potential_remaining_cap is 0.1 (small leftover), priority is -0.1.\n    # - If potential_remaining_cap is 0.5 (large leftover), priority is -0.5.\n    # This ensures that smaller non-negative remainders yield higher (less negative) priority scores.\n    priority_scores[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]\n\n    return priority_scores\n\n[Reflection]\nCalculate item-bin interactions and consequences. Optimize future bin state to minimize overall waste.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}