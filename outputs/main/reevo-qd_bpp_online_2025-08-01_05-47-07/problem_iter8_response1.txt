```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by giving extremely high priority
    to bins that would result in a perfect fit (zero remaining capacity).
    For other bins where the item fits, the priority is inversely proportional
    to the remaining capacity, heavily favoring tighter fits. Bins where the
    item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores with a very low value (-np.inf) for all bins.
    # This ensures bins where the item does not fit are never selected.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit (remaining capacity is non-negative).
    can_fit_indices = np.where(hypothetical_remaining >= 0)[0]

    if len(can_fit_indices) > 0:
        # Define a small epsilon to avoid division by zero for perfect fits (remaining == 0).
        # Adding epsilon makes perfect fits receive an extremely high, but finite, score,
        # distinguishing them sharply from non-perfect fits.
        epsilon = 1e-9

        # For bins where the item fits, calculate priority as 1 / (remaining_capacity + epsilon).
        # This function strongly penalizes larger remaining capacities, making tighter fits
        # (smaller remaining capacities) yield much higher scores.
        priorities_for_fitting_bins = 1.0 / (hypothetical_remaining[can_fit_indices] + epsilon)
        priority_scores[can_fit_indices] = priorities_for_fitting_bins

    return priority_scores
```
