```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Implements the Best Fit (BF) heuristic, which aligns with the reflection's
    recommendation to "Prioritize direct space minimization".
    This strategy assigns higher priority to bins that will have the smallest
    remaining capacity after the item is placed, among those where the item fits.
    This aims to achieve a "tightest fit" to minimize wasted space within bins.

    Bins where the item cannot fit are assigned the lowest possible priority
    (-infinity) to ensure they are never selected.

    Args:
        item: Size of item to be added to the bin. Must be non-negative.
        bins_remain_cap: Array of remaining capacities for each bin.
                         Elements must be non-negative.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more preferred bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed.
    # Bins where the item does not fit will result in a negative value.
    potential_remaining_capacity = bins_remain_cap - item

    # Initialize all priority scores to negative infinity.
    # This ensures that bins where the item cannot be placed will not be chosen.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the bins where the item actually fits (i.e., where the
    # potential remaining capacity is non-negative).
    fits_mask = potential_remaining_capacity >= 0

    # For the bins where the item fits, assign priority scores.
    # The Best Fit heuristic aims to find the bin that results in the
    # smallest positive remaining capacity. By negating this value,
    # a smaller positive remaining capacity (e.g., 0.1) translates to
    # a larger (less negative) priority score (e.g., -0.1) compared to
    # a larger remaining capacity (e.g., 0.5 becomes -0.5).
    # This way, when the bin with the maximum priority score is chosen,
    # it corresponds to the bin with the minimum remaining capacity.
    priority_scores[fits_mask] = -potential_remaining_capacity[fits_mask]

    return priority_scores
```
