{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This heuristic extends priority_v1 by incorporating strategies to avoid\n    leaving very small, unusable fragments in bins and to consolidate items\n    in existing bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin if the item were placed in it.\n    # A negative value indicates the item does not fit.\n    hypothetical_remaining = bins_remain_cap - item\n\n    # Initialize priority scores for all bins to a very low value (-infinity).\n    # This ensures that bins where the item does not fit will never be selected\n    # by argmax.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n\n    # Create a boolean mask for bins where the item actually fits (i.e.,\n    # hypothetical_remaining is non-negative).\n    fits_mask = hypothetical_remaining >= 0\n\n    # If no bin fits, all scores remain -inf. The calling logic should handle opening a new bin.\n    if not np.any(fits_mask):\n        return priority_scores\n\n    # --- Heuristic Parameters ---\n    # These parameters are tuned for typical normalized Bin Packing Problem setups,\n    # where bin capacities and item sizes are often normalized to a range like [0, 1].\n    # If your problem uses a different scale (e.g., bin capacity 100), these values\n    # might need to be adjusted proportionally.\n    ASSUMED_BIN_CAPACITY = 1.0 # Common assumption for normalized BPP.\n\n    # Parameters for \"avoiding small fragments\" to maximize future bin utilization.\n    # Fragments smaller than this threshold (relative to ASSUMED_BIN_CAPACITY) are penalized.\n    SMALL_FRAGMENT_THRESHOLD = ASSUMED_BIN_CAPACITY * 0.05 # E.g., 5% of bin capacity\n    # The penalty applied to bins that would result in a small, non-zero fragment.\n    # This value should be large enough to make a \"bad\" small fragment less desirable\n    # than leaving a slightly larger (non-fragment) space.\n    FRAGMENT_PENALTY = ASSUMED_BIN_CAPACITY * 0.5\n\n    # Parameter for \"consolidate items in existing bins\".\n    # A very small epsilon used as a tie-breaker. It slightly prioritizes bins that are\n    # already more full (i.e., have less remaining capacity before placing the item).\n    # This value must be much smaller than the primary Best-Fit scores and fragment penalties.\n    TINY_CONSOLIDATION_EPSILON = 1e-6\n\n    # 1. Calculate the base Best-Fit score for fitting bins.\n    #    A smaller hypothetical_remaining (tighter fit) results in a larger score.\n    scores_for_fitting = -hypothetical_remaining[fits_mask]\n\n    # 2. Apply penalty for \"small fragments\".\n    #    Identify bins where the item fits, the remaining capacity is positive (not a perfect fit),\n    #    and falls within the \"small fragment\" range. These bins are penalized.\n    small_fragment_mask_for_fitting_bins = (hypothetical_remaining[fits_mask] > 0) & \\\n                                           (hypothetical_remaining[fits_mask] <= SMALL_FRAGMENT_THRESHOLD)\n    scores_for_fitting[small_fragment_mask_for_fitting_bins] -= FRAGMENT_PENALTY\n\n    # 3. Apply \"consolidation bonus\" (as a tie-breaker).\n    #    To \"consolidate items in existing bins\", we slightly prefer bins that are\n    #    already more full *before* the current item is placed.\n    #    This is achieved by subtracting a very small value proportional to the\n    #    original remaining capacity. A smaller `original_remaining_for_fitting`\n    #    (meaning the bin was more full) results in a smaller subtraction (higher score).\n    original_remaining_for_fitting = bins_remain_cap[fits_mask]\n    scores_for_fitting -= original_remaining_for_fitting * TINY_CONSOLIDATION_EPSILON\n\n    # Assign the calculated scores back to the main priority_scores array\n    # only for the bins where the item fits.\n    priority_scores[fits_mask] = scores_for_fitting\n\n    return priority_scores\n\n[Reflection]\nPrioritize tight fits, avoid small fragments, and consolidate items in existing bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}