```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit strategy with a focus on maximizing fill efficiency.

    This heuristic aims to place the item into the bin that will leave the
    least remaining space after the item is placed. This is often effective
    in online bin packing as it attempts to "tighten" existing bins,
    reserving larger empty bins for potentially larger future items.

    For each bin:
    - If the item fits (item_size <= bin_remaining_capacity):
      The priority score is calculated as `-(bin_remaining_capacity - item_size)`.
      This transformation ensures that a smaller `(remaining_capacity - item_size)`
      (meaning a tighter fit) results in a priority score closer to zero (i.e.,
      a larger, less negative value), which will be picked as the "highest"
      priority. An exact fit (remaining_capacity - item_size == 0) will yield
      a priority of 0, which is the highest possible.
    - If the item does not fit (item_size > bin_remaining_capacity):
      The priority score is set to negative infinity (`-np.inf`), ensuring
      these bins are never selected.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score should be chosen.
    """
    # Initialize all priorities to negative infinity. Bins that don't fit
    # will retain this score, making them ineligible.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining space if the item were placed in fitting bins
    remaining_space_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign priority scores for fitting bins based on the Best Fit principle.
    # We want to minimize 'remaining_space_after_placement', so we negate it
    # to convert the minimization problem into a maximization problem for
    # priority scores (e.g., -0.1 > -0.5).
    priorities[can_fit_mask] = -remaining_space_after_placement

    return priorities
```
