```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a refined Best-Fit strategy. It primarily prioritizes
    bins that will have the least remaining capacity (tightest fit) after the item is placed.
    As a secondary criterion, for bins that result in the same tightest fit,
    it prioritizes the bin that was already fuller (i.e., had less remaining capacity
    before the item was placed). This aims to "finish off" bins that are closer to being full,
    which can lead to fewer partially filled bins.

    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a score.
    # Primary criterion: Best Fit (minimize hypothetical_remaining, so maximize its negation).
    # A smaller positive hypothetical_remaining (e.g., 0 for a perfect fit)
    # will result in a larger score (e.g., 0).
    #
    # Secondary criterion (for tie-breaking): Among bins with the same hypothetical_remaining,
    # prioritize the bin that was already fuller (i.e., had smaller bins_remain_cap).
    # To achieve this, we subtract a very small multiple of bins_remain_cap.
    # A smaller bins_remain_cap (meaning the bin was already fuller) will result in a
    # smaller subtraction, thus a higher overall score, making it preferred in case of a tie
    # on the primary criterion.
    #
    # We use a small epsilon (e.g., 1e-6) to ensure the primary criterion (Best Fit)
    # dominates completely, and this secondary term only acts as a tie-breaker.
    epsilon = 1e-6 

    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask] - epsilon * bins_remain_cap[fits_mask]

    return priority_scores
```
