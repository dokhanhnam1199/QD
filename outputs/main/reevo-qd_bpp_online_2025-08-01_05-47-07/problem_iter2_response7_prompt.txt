{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This strategy, 'Targeted Remaining Capacity Fit', aims to find a bin\n    such that after placing the item, the bin's remaining capacity (slack)\n    is as close as possible to a predefined 'target slack'.\n    \n    The 'target slack' is defined as a small fraction of the item's size.\n    This heuristic attempts to balance two objectives:\n    1. Fill bins efficiently (similar to Best Fit) by minimizing remaining space.\n    2. Avoid creating excessively tiny, potentially unusable gaps, or leaving bins\n       too full, by aiming for a \"just right\" amount of remaining space that might\n       be useful for future, possibly small, items.\n\n    Bins that cannot accommodate the item receive the lowest possible priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize all priorities to a very low value (negative infinity)\n    # This ensures that bins where the item does not fit are never chosen.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify which bins can accommodate the item\n    can_fit = bins_remain_cap >= item\n\n    # Calculate the remaining capacity in each fitting bin after placing the item\n    remaining_after_placement = bins_remain_cap[can_fit] - item\n\n    # Define a 'target slack' for the remaining capacity.\n    # This factor is a heuristic choice; 0.0 would revert to a pure Best Fit.\n    # A positive factor biases towards leaving a small, specific amount of slack.\n    TARGET_SLACK_FACTOR = 0.05  # Aim to leave 5% of the item's size as remaining capacity\n    TARGET_SLACK = TARGET_SLACK_FACTOR * item\n\n    # If item is zero (or very small near float precision limit), set target slack to zero\n    # to avoid numerical issues or unreasonable targets for tiny items.\n    if item <= np.finfo(float).eps:\n        TARGET_SLACK = 0.0\n\n    # The priority score is the negative of the absolute difference\n    # between the actual remaining capacity and the target slack.\n    # A smaller absolute difference results in a higher (less negative) priority score.\n    priorities[can_fit] = -np.abs(remaining_after_placement - TARGET_SLACK)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin based on the Best Fit heuristic.\n\n    The Best Fit heuristic places the item into the bin where it fits most snugly,\n    i.e., the bin that will have the smallest remaining capacity after the item is placed.\n    This aims to minimize wasted space and keep bins as full as possible.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Bins where the item does not fit will have a very low (negative infinity) score.\n        For bins where it fits, the score is the negative of the remaining space,\n        meaning a tighter fit (less remaining space) yields a higher (less negative) score.\n    \"\"\"\n    # Initialize scores with negative infinity. Bins where the item doesn't fit\n    # will keep this very low score, ensuring they are not chosen.\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Find indices of bins where the item can actually fit\n    fitting_bins_mask = bins_remain_cap >= item\n\n    # Calculate the remaining capacity if the item were placed in the fitting bins\n    remaining_space_after_placement = bins_remain_cap[fitting_bins_mask] - item\n\n    # For fitting bins, assign a score based on the negative of the remaining space.\n    # This means:\n    # - A perfect fit (0 remaining space) gets a score of 0.\n    # - A tight fit (small positive remaining space) gets a small negative score.\n    # - A loose fit (large positive remaining space) gets a large negative score.\n    # By maximizing this score (which `np.argmax` does), we effectively minimize\n    # the remaining space, achieving the Best Fit strategy.\n    scores[fitting_bins_mask] = -remaining_space_after_placement\n\n    return scores\n\n[Reflection]\nSimpler heuristics, like direct space minimization (Best Fit), often outperform complex target-based strategies.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}