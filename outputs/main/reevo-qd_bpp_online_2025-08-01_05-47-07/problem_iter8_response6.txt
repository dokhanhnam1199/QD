```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.

    This heuristic implements a Best-Fit-like strategy that strongly prioritizes
    perfect fits. For cases that are not perfect fits, it adapts the Best Fit
    approach by considering the remaining capacity relative to the item size.
    The design addresses the "Prior reflection" by:
    1.  **Prioritizing Strategic Fits:**
        *   **Perfect Fits:** Assigns the highest possible score to perfectly
            fill a bin, minimizing future fragmentation and maximizing immediate
            bin utilization.
        *   **Tightest Fits (Relative Best Fit):** For non-perfect fits,
            it prioritizes bins that leave the smallest remaining capacity
            *relative to the size of the item being placed*. This aims to
            minimize proportional waste.
    2.  **Rewarding Desirable States, Penalizing Inefficient Ones:**
        *   Perfectly filled bins are maximally rewarded.
        *   Placing an item such that it leaves a small fragment *relative to its own size*
            is rewarded (less penalized). Conversely, placing a small item that
            leaves a large fragment relative to its own size is more heavily
            penalized, discouraging the "waste" of a large bin on a small item
            if other, relatively tighter fits are available.
        *   Bins where the item does not fit are implicitly penalized with a
            very low score, ensuring they are never chosen.

    Args:
        item: Size of item to be added to the bin. Must be greater than 0.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    if item <= 0:
        raise ValueError("Item size must be greater than 0.")
    if bins_remain_cap.size == 0:
        return np.array([]) # No bins to place in

    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit (hypothetical_remaining < 0)
    # will never be selected by argmax, as their score will remain -np.inf.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # --- Step 1: Identify and assign scores for perfect fits ---
    # A perfect fit leaves exactly 0 capacity remaining.
    perfect_fit_mask = hypothetical_remaining == 0

    # Assign a very high positive score for perfect fits. This score must be
    # guaranteed to be higher than any possible score from a non-perfect fit.
    # Use a value relative to problem scale, ensuring it dominates any negative scores.
    perfect_fit_value = np.max(bins_remain_cap) + 1.0 
    priority_scores[perfect_fit_mask] = perfect_fit_value

    # --- Step 2: Handle bins where the item fits but is not a perfect fit ---
    # These are bins where hypothetical_remaining is positive (0 < hypothetical_remaining <= original_capacity).
    non_perfect_fit_mask = (hypothetical_remaining > 0)

    # For these bins, implement a "Relative Best Fit" strategy: prioritize bins
    # that result in the smallest remaining capacity *relative to the item size*.
    # To do this with np.argmax, we negate the ratio (hypothetical_remaining / item).
    # This means smaller positive ratios yield higher (less negative) scores.
    # These scores will be negative, ensuring that perfect fits (with their large positive score)
    # are always preferred over any non-perfect fit.
    # Division by `item` amplifies the penalty for larger remaining gaps,
    # especially when `item` itself is small.
    priority_scores[non_perfect_fit_mask] = -hypothetical_remaining[non_perfect_fit_mask] / item

    return priority_scores
```
