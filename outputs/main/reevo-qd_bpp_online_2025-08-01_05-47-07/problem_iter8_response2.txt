```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.

    This heuristic implements a Best-Fit-like strategy that prioritizes bins
    based on how fully the item utilizes the bin's current remaining capacity.
    The goal is to reward full utilization and penalize wasted space, while
    avoiding arbitrary choices in scoring.

    The prioritization logic is as follows:
    1.  **Non-fitting bins:** Bins where the item cannot fit (i.e., `bins_remain_cap < item`)
        are assigned the lowest possible score (`-np.inf`), effectively removing them
        from consideration by `np.argmax`.
    2.  **Fitting bins (including perfect fits):** For bins where the item can fit
        (`bins_remain_cap >= item`), the priority score is calculated as the
        **ratio of the item's size to the bin's current remaining capacity (`item / bins_remain_cap`)**.
        *   **Perfect fits:** If `bins_remain_cap == item`, the ratio is `1.0`. This is the
            highest possible score, naturally rewarding perfect utilization.
        *   **Tight fits:** If `bins_remain_cap` is slightly larger than `item`, the ratio
            will be close to `1.0` (e.g., `0.95`). This correctly prioritizes tighter fits
            over looser ones.
        *   **Looser fits:** If `bins_remain_cap` is much larger than `item`, the ratio will
            be closer to `0.0`.

    This approach ensures that perfect fits are always preferred, followed by the tightest
    possible non-perfect fits, thereby minimizing wasted space and promoting bin closure.

    Args:
        item: Size of item to be added to the bin. Assumed to be a positive float.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax, as their score will remain -np.inf.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit (remaining capacity is sufficient).
    # We assume 'item' is positive. If 'item' is 0, 'bins_remain_cap >= item'
    # would be true for all non-negative capacities, and division by zero could occur
    # if a bin's remaining capacity is also 0. Standard BPP implies item sizes > 0.
    fits_mask = bins_remain_cap >= item

    # Calculate scores only for the bins where the item fits.
    # The score is the ratio of the item size to the bin's current remaining capacity.
    # This naturally assigns 1.0 for perfect fits and values between 0 and 1 for others.
    # Since fits_mask ensures bins_remain_cap >= item (and item > 0),
    # there won't be a division by zero in `item / bins_remain_cap[fits_mask]`.
    eligible_bins_cap = bins_remain_cap[fits_mask]
    priority_scores[fits_mask] = item / eligible_bins_cap

    return priority_scores
```
