```python
import numpy as np

# Assume a standard bin size for the Bin Packing Problem.
# In many contexts, items and bin capacities are normalized, so 1.0 is a common default.
# If specific problem constraints dictate a different size (e.g., integer capacities),
# this constant should be adjusted accordingly or passed as an argument.
BIN_SIZE = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.

    This heuristic combines the Best-Fit strategy with an explicit bonus for
    consolidating items into existing, partially-filled bins, thereby aiming
    to minimize the opening of new bins.

    The priority is determined by two main factors, combined additively:
    1.  **Tightness of Fit (Primary Component):** Calculated as the negative
        of the hypothetical remaining capacity after placing the item. Bins
        that result in less remaining space (tighter fit) are preferred.
        A perfect fit (0 remaining capacity) yields the highest score for this component.
    2.  **Bin Usage Status (Consolidation Component):** A small positive bonus
        is applied to bins that are already in use (i.e., not completely empty).
        This bonus is small enough that it doesn't override a significantly
        better Best-Fit in an empty bin, but it acts as a tie-breaker or a
        slight preference when fit qualities are very similar.

    Bins where the item does not fit are assigned the lowest possible priority (-np.inf),
    ensuring they are never selected.

    Args:
        item: Size of the item to be added to a bin.
        bins_remain_cap: NumPy array of remaining capacities for each bin.
                         Assumes `BIN_SIZE` (defaulting to 1.0) is the full
                         capacity of an empty bin for identification purposes.

    Return:
        NumPy array of the same size as `bins_remain_cap`, containing the
        priority score for each bin. The bin with the highest score is preferred.
    """
    # Calculate the remaining capacity for each bin if the item were hypothetically placed.
    hypothetical_remaining = bins_remain_cap - item

    # Step 1: Initialize priority scores, setting non-fitting bins to -np.inf.
    # This ensures that bins where the item does not fit are never selected.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # A mask to identify bins where the item actually fits (i.e., hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # Calculate the Best-Fit component for bins where the item fits.
    # We want to maximize the negative of hypothetical_remaining (i.e., minimize hypothetical_remaining).
    best_fit_component = -hypothetical_remaining[fits_mask]

    # Step 2: Calculate the Consolidation component.
    # Identify bins that are currently completely empty using a robust floating-point comparison.
    EPSILON = 1e-9
    is_empty_bin = np.isclose(bins_remain_cap, BIN_SIZE, atol=EPSILON)

    # Define a small positive bonus value for used bins.
    # This value should be carefully chosen: it must be smaller than the smallest meaningful
    # difference in remaining capacities to ensure Best-Fit remains primary, but large
    # enough to consistently break ties towards used bins.
    BONUS_FOR_USED_BIN = 0.001  # A small positive value

    # Create an array where elements are BONUS_FOR_USED_BIN if the bin is NOT empty, else 0.
    consolidation_bonus_array = np.where(is_empty_bin, 0.0, BONUS_FOR_USED_BIN)
    
    # Get the consolidation component for only the bins that the item fits into.
    consolidation_component = consolidation_bonus_array[fits_mask]

    # Combine the Best-Fit and Consolidation components to form the final priority scores
    # for the bins where the item can be placed.
    priority_scores[fits_mask] = best_fit_component + consolidation_component

    return priority_scores
```
