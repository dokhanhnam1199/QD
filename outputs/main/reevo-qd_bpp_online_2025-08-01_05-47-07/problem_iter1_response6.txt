```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Implements a Best Fit (BF) heuristic by assigning higher priority to bins
    that will have the smallest remaining capacity after the item is placed,
    among those where the item fits. Bins where the item does not fit
    receive a very low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # For a perfect fit (remaining_cap == item), this would be 0.
    potential_new_remaining_cap = bins_remain_cap - item

    # Initialize priority scores as an array of negative infinities.
    # This ensures that bins where the item does not fit will have
    # the lowest possible priority.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # where the potential new remaining capacity is non-negative).
    fits_mask = potential_new_remaining_cap >= 0

    # For bins where the item fits:
    # We want to assign a higher priority score to bins that result in a
    # smaller 'potential_new_remaining_cap'.
    # Multiplying by -1 achieves this: a smaller positive value of
    # `potential_new_remaining_cap` becomes a larger (less negative) value
    # when negated. For example, 0.1 becomes -0.1, and 0.5 becomes -0.5.
    # Since np.argmax selects the largest value, -0.1 will be preferred over -0.5.
    priority_scores[fits_mask] = -potential_new_remaining_cap[fits_mask]

    return priority_scores
```
