```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.
    This heuristic implements a Best-Fit-like strategy that strongly prioritizes
    perfect fits. For cases that are not perfect fits, it falls back to the
    standard Best Fit approach (minimizing remaining capacity).

    The design explicitly addresses the "Prior reflection" by:
    1.  **Penalizing invalid options:** Bins where the item does not fit receive the lowest possible score (-np.inf).
    2.  **Prioritizing tight fits:** For all valid placements, scores are inversely proportional to remaining capacity.
        (i.e., smaller remaining capacity yields a higher score).
    3.  **Prioritizing perfect fits with a strong boost:** Bins that result in exactly zero remaining capacity
        receive an exceptionally high positive score, overriding any "tight fit" score.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Step 1: Calculate hypothetical remaining capacity for all bins.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Step 2: Initialize priority scores, penalizing invalid options by default.
    # Bins where the item does not fit (hypothetical_remaining < 0) will retain this score,
    # ensuring they are never selected by argmax. This directly addresses "penalize invalid options".
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Step 3: Identify bins where the item *can* fit (remaining capacity is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # Step 4: Assign scores for bins where the item fits, applying the Best Fit principle.
    # For these bins, we want to "prioritize tight fits": a smaller remaining capacity
    # should result in a higher score. By negating `hypothetical_remaining`,
    # values closer to zero (tight fit) become larger (closer to 0 or very small negative),
    # while larger remaining capacities become smaller (more negative).
    # These scores will be <= 0.
    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]

    # Step 5: Apply a strong boost to perfect fits.
    # A perfect fit leaves exactly 0 capacity remaining.
    perfect_fit_mask = (hypothetical_remaining == 0)

    # Determine a boost value that is guaranteed to be higher than any score from
    # a non-perfect fit (which are <= 0). Using a value relative to the problem scale
    # (e.g., max bin capacity + 1.0) ensures robustness, as it will always be positive
    # and significantly distinct from the negative/zero scores for non-perfect fits.
    if bins_remain_cap.size > 0:
        perfect_fit_boost_value = np.max(bins_remain_cap) + 1.0
    else:
        # Edge case: If there are no bins, the specific value doesn't matter, but set a default.
        perfect_fit_boost_value = 1.0 

    # Overwrite the scores for perfect fits with this exceptionally high value.
    # This explicitly implements "prioritizing perfect fits with a strong boost".
    priority_scores[perfect_fit_mask] = perfect_fit_boost_value

    return priority_scores
```
