```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    directly prioritizing the minimization of remaining space (Best Fit heuristic).

    Following the reflection to "prioritize minimizing remaining space directly"
    and avoid complex slack targets, this function implements the Best Fit strategy.
    It places the item into the bin that, after placement, would have the smallest
    amount of remaining capacity. This aims to maximize bin utilization and
    reduce wasted space by achieving the tightest possible fit for each item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score for each bin.
        Bins where the item cannot fit will receive the lowest possible priority
        (negative infinity). For bins where the item fits, the score is the
        negative of the remaining space after placement. A smaller remaining
        space results in a higher (less negative) priority score, thus
        prioritizing the tightest fit.
    """
    # Initialize all priorities to a very low value (negative infinity).
    # This ensures that bins where the item does not fit are never chosen
    # when selecting the bin with the maximum priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify all bins that have enough capacity to accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item can fit, calculate the capacity that would
    # remain after the item is placed.
    remaining_space_if_placed = bins_remain_cap[can_fit_mask] - item

    # Assign priority scores to fitting bins. To directly prioritize minimizing
    # the remaining space, we use the negative of this value as the score.
    # This means:
    # - A perfect fit (0 remaining space) yields a score of 0, which is the highest.
    # - A small positive remaining space yields a small negative score.
    # - A large positive remaining space yields a large negative (lower) score.
    # Maximizing this score effectively minimizes the remaining space.
    priorities[can_fit_mask] = -remaining_space_if_placed

    return priorities
```
