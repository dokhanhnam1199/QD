```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on the Best Fit heuristic.

    The Best Fit heuristic places the item into the bin where it fits most snugly,
    i.e., the bin that will have the smallest remaining capacity after the item is placed.
    This aims to minimize wasted space and keep bins as full as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins where the item does not fit will have a very low (negative infinity) score.
        For bins where it fits, the score is the negative of the remaining space,
        meaning a tighter fit (less remaining space) yields a higher (less negative) score.
    """
    # Initialize scores with negative infinity. Bins where the item doesn't fit
    # will keep this very low score, ensuring they are not chosen.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find indices of bins where the item can actually fit
    fitting_bins_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item were placed in the fitting bins
    remaining_space_after_placement = bins_remain_cap[fitting_bins_mask] - item

    # For fitting bins, assign a score based on the negative of the remaining space.
    # This means:
    # - A perfect fit (0 remaining space) gets a score of 0.
    # - A tight fit (small positive remaining space) gets a small negative score.
    # - A loose fit (large positive remaining space) gets a large negative score.
    # By maximizing this score (which `np.argmax` does), we effectively minimize
    # the remaining space, achieving the Best Fit strategy.
    scores[fitting_bins_mask] = -remaining_space_after_placement

    return scores
```
