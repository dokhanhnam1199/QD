```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit strategy with a secondary tie-breaking rule.
    It prioritizes bins that will have the least remaining capacity (tightest fit)
    after the item is placed. Among bins with equally tight fits, it further
    prioritizes the bin that was *already more full* (i.e., had less remaining capacity
    before the item was placed). This aims to "finish off" bins faster and free up
    bin resources, leveraging the problem-specific goal of minimizing the number of bins.
    Bins where the item does not fit are assigned the lowest possible priority.

    This version combines the primary Best Fit objective with a secondary tie-breaking
    objective to make more informed decisions when multiple bins offer the same
    optimal primary fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were hypothetically placed.
    hypothetical_remaining = bins_remain_cap - item

    # Define a large factor to ensure the primary Best-Fit criterion dominates
    # the secondary tie-breaking criterion. This factor should be significantly
    # larger than the maximum possible value of `bins_remain_cap`.
    # Assuming `item` and `bins_remain_cap` are non-negative, and `bins_remain_cap`
    # generally represents a capacity (e.g., between 0 and 1, or 0 and 100).
    # A value like 1e6 is safe for typical floating-point scenarios.
    LARGE_FACTOR = 1e6

    # Calculate base priority scores:
    # 1. Primary objective: -hypothetical_remaining. This ensures that smaller
    #    remaining capacities (tighter fits, less "waste") result in higher
    #    (less negative, closer to zero) priority scores, aligning with Best Fit.
    #    Multiplying by LARGE_FACTOR makes this term dominant.
    # 2. Secondary objective (tie-breaker): -bins_remain_cap. If the primary
    #    scores are equal (i.e., multiple bins offer the same 'best fit'),
    #    this term then differentiates. A smaller initial `bins_remain_cap`
    #    means the bin was *already more full*. By using `-bins_remain_cap`,
    #    we give a higher score to bins that were already more full, encouraging
    #    them to be "finished off" and potentially closed sooner.
    potential_scores = -hypothetical_remaining * LARGE_FACTOR - bins_remain_cap

    # Assign final priority scores:
    # - If the item fits (hypothetical_remaining is non-negative), use the calculated
    #   `potential_scores`.
    # - If the item does not fit (hypothetical_remaining is negative), assign
    #   a very low priority (-np.inf) to ensure these bins are never selected.
    priority_scores = np.where(
        hypothetical_remaining >= 0,
        potential_scores,
        -np.inf
    )

    return priority_scores
```
