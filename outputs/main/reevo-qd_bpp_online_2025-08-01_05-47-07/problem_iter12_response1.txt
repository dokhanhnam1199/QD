```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin for online Bin Packing.

    This heuristic refines the Best-Fit strategy by giving an overwhelmingly
    high priority to perfect fits. For non-perfect fits, it applies a primary
    Best-Fit strategy (minimizing remaining space). As a secondary criterion
    for non-perfect fits, it subtly favors bins that are already more full
    (i.e., have less remaining capacity *before* placing the item). This
    secondary factor "leverages all available data" (`bins_remain_cap` itself)
    to encourage consolidating items into fewer bins and minimizing overall
    wasted bin space by promoting the closure of partially filled bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # Determine a bonus value for perfect fits. This bonus must be
    # numerically greater than any possible score from a non-perfect fit,
    # ensuring perfect fits are always chosen first.
    # The maximum possible negative score for a non-perfect fit is roughly
    # -MAX_BIN_CAPACITY (e.g., if item is very small and bin is full).
    # So, MAX_BIN_CAPACITY + 1.0 ensures a sufficiently high positive score.
    if bins_remain_cap.size > 0:
        PERFECT_FIT_BONUS = np.max(bins_remain_cap) + 1.0
    else:
        # Fallback for an unlikely empty bins_remain_cap array
        PERFECT_FIT_BONUS = 1000.0 

    # Identify and assign the highest priority to perfect fits.
    perfect_fit_mask = (hypothetical_remaining == 0)
    priority_scores[perfect_fit_mask] = PERFECT_FIT_BONUS

    # For bins where the item fits but it's not a perfect fit,
    # apply a primary Best-Fit strategy with a secondary consolidation preference.
    non_perfect_fits_mask = fits_mask & ~perfect_fit_mask

    # Primary scoring (Best-Fit): Prefer the bin that results in the smallest
    # hypothetical remaining space. Since np.argmax selects the maximum score,
    # we negate the hypothetical_remaining (smaller positive remainder -> larger score).
    base_best_fit_scores = -hypothetical_remaining[non_perfect_fits_mask]

    # Secondary scoring (Consolidation): To "leverage all available data" and
    # "minimize wasted bin space" by encouraging bin closure, we subtly penalize
    # bins that are less full (i.e., have a larger `bins_remain_cap` before placement).
    # EPS is a very small positive number to ensure this penalty only acts as a
    # tie-breaker or a slight nudge for very similar Best-Fit scores, without
    # overriding the primary Best-Fit objective for significantly different remainders.
    EPS = 1e-9  # Epsilon value for the consolidation penalty

    # The penalty is proportional to the bin's current remaining capacity.
    # A larger `bins_remain_cap` means a larger penalty (more negative score).
    secondary_consolidation_penalty = EPS * bins_remain_cap[non_perfect_fits_mask]

    # Combine primary (Best-Fit) and secondary (consolidation) scores.
    priority_scores[non_perfect_fits_mask] = base_best_fit_scores - secondary_consolidation_penalty

    return priority_scores
```
