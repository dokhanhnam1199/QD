```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by making a more strategic
    choice regarding the resulting bin state. It prioritizes bins as follows:

    1.  **Perfect Fit:** Highest priority is given to bins where the item
        fits exactly, resulting in zero remaining capacity. This effectively
        "closes" the bin.
    2.  **Useful Remaining Capacity (Best-Fit for these):** Among bins that
        leave a non-zero remaining capacity, those that leave a capacity
        larger than a small, predefined threshold are preferred. Within this
        group, the standard Best-Fit logic applies: smaller remaining
        capacities are prioritized (i.e., a tighter fit).
    3.  **Small, Non-Zero Remaining Capacity (Penalized):** Bins that would
        result in a very small, non-zero remaining capacity (below the threshold)
        are heavily penalized. This is a strategic choice to avoid creating
        "awkward" or "useless" bin fragments that are too small to
        accommodate most future items.
    4.  **Item Does Not Fit:** Lowest possible priority for bins where the
        item cannot be placed.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed in it.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores to a very low value for bins where the item does not fit.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Define a small threshold for what constitutes a "useless" remaining capacity.
    # This value should be tuned based on the expected range and granularity of item sizes.
    # For items normalized to a [0, 1] range, 0.05 (5%) is a common heuristic.
    SMALL_REMAINDER_THRESHOLD = 0.05 

    # A constant to heavily penalize bins that result in small, "useless" remainders.
    # This value must be sufficiently large to ensure that scores for "useless"
    # remainders are lower than any scores for "useful" remainders.
    PENALTY_CONSTANT = 1000.0 

    # Mask for bins where the item actually fits
    fits_mask = hypothetical_remaining >= 0

    # Case 1: Perfect fit (remaining capacity is exactly 0)
    # These are the most desirable outcomes.
    perfect_fit_mask = (hypothetical_remaining == 0) & fits_mask
    priority_scores[perfect_fit_mask] = np.inf  # Assign highest possible priority

    # Case 2: Small, non-zero remaining capacity (potentially 'useless' or 'awkward')
    # These are bins where the item fits, the remainder is positive, but very small.
    small_remainder_mask = (hypothetical_remaining > 0) & \
                           (hypothetical_remaining <= SMALL_REMAINDER_THRESHOLD) & fits_mask
    # Apply a heavy penalty. The base Best-Fit score is -hypothetical_remaining.
    # By adding a large negative constant, these become very undesirable, pushing
    # their priority below bins with useful remainders.
    priority_scores[small_remainder_mask] = -hypothetical_remaining[small_remainder_mask] - PENALTY_CONSTANT

    # Case 3: Useful remaining capacity (larger than the threshold)
    # These are bins where the item fits, and the remainder is large enough to be potentially useful
    # for future items. For these, we apply the standard Best-Fit strategy:
    # prefer smaller remaining capacities (a tighter fit among useful remainders).
    useful_remainder_mask = (hypothetical_remaining > SMALL_REMAINDER_THRESHOLD) & fits_mask
    priority_scores[useful_remainder_mask] = -hypothetical_remaining[useful_remainder_mask]
    
    return priority_scores
```
