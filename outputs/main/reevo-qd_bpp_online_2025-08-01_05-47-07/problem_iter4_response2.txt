```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements an enhanced Best-Fit strategy, designed to be more
    aggressive in seeking the tightest possible fit. It prioritizes:
    1. Perfect fits (remaining capacity is exactly zero) with the highest possible score.
    2. Among imperfect fits, bins that result in the smallest positive remaining capacity
       (tightest fit) are strongly preferred. A non-linear penalty is applied to larger
       remaining capacities, making the preference for very tight fits more pronounced.
    3. Bins where the item does not fit are assigned the lowest possible priority.
       For tie-breaking among bins with identical scores, the bin with the lowest index
       (first encountered) is implicitly selected by np.argmax.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit (hypothetical_remaining < 0)
    # will never be selected by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits.
    fits_mask = hypothetical_remaining >= 0

    # Extract the positive remaining capacities for bins where the item fits.
    positive_remaining = hypothetical_remaining[fits_mask]

    # Best-Fit component: A standard Best-Fit score is the negative of the remaining capacity.
    # A smaller remaining capacity results in a higher score (e.g., 0 for perfect fit).
    best_fit_component = -positive_remaining

    # Enhanced penalty for remaining capacity:
    # To make the preference for tighter fits more aggressive, we add a quadratic penalty
    # to the score for any remaining capacity. This penalizes larger remainders more steeply
    # than smaller ones. For a perfect fit (remaining = 0), this penalty is 0.
    # 'alpha' is a small coefficient to control the strength of this quadratic penalty,
    # ensuring the primary Best-Fit ordering is maintained while exaggerating differences.
    alpha = 0.01  # Adjust this value to control the aggression of the penalty.

    quadratic_penalty = -alpha * (positive_remaining ** 2)

    # Combine the Best-Fit component with the quadratic penalty.
    # The overall score is maximized, effectively prioritizing minimal remaining capacity
    # with a stronger bias towards very tight fits.
    priority_scores[fits_mask] = best_fit_component + quadratic_penalty

    return priority_scores
```
