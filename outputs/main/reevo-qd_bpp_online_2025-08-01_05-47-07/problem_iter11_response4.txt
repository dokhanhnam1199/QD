```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic extends the Best-Fit strategy to explicitly prioritize perfect fits
    and penalize bins that would result in very small, potentially unusable
    remaining capacities (fragments).

    Prioritization hierarchy:
    1. Perfect Fit: Highest priority, ensuring bins are completely filled when possible.
    2. Useful Tight Fit: Among bins that will have a "useful" remaining capacity (i.e., not a tiny fragment),
       the bin with the smallest remaining capacity is preferred (Best-Fit logic).
    3. Small Fragment Penalty: Bins that would result in a very small, "unusable" remaining capacity
       are significantly penalized, making them less desirable than larger, useful fragments.
    4. Does Not Fit: Bins where the item cannot be placed receive the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # --- Heuristic Parameters ---
    # A large positive score to strongly prioritize perfect fits.
    PERFECT_FIT_BONUS = 1000.0

    # Define what constitutes a "small fragment" that we want to avoid.
    # This threshold prevents leaving bins with tiny, unusable capacities.
    # It's set as a small fraction of the maximum bin capacity, or a default small value
    # if there are no bins or capacities are zero.
    if bins_remain_cap.size > 0:
        MIN_USEFUL_CAPACITY_THRESHOLD = 0.05 * np.max(bins_remain_cap)
        # Ensure the threshold is not zero if max capacity is zero.
        if MIN_USEFUL_CAPACITY_THRESHOLD == 0 and np.max(bins_remain_cap) > 0:
            MIN_USEFUL_CAPACITY_THRESHOLD = 0.01  # Fallback for very small max capacities
        elif MIN_USEFUL_CAPACITY_THRESHOLD == 0:
            MIN_USEFUL_CAPACITY_THRESHOLD = 0.01 # Arbitrary small value if all bins are empty
    else:
        MIN_USEFUL_CAPACITY_THRESHOLD = 0.01 # Default for empty bins_remain_cap array


    # A large negative penalty for leaving small fragments. This ensures these bins
    # are less preferred than those leaving useful space, but still more preferred
    # than bins where the item doesn't fit.
    # This value should be more negative than any possible score from -hypothetical_remaining
    # for useful fragments (i.e., less than -MIN_USEFUL_CAPACITY_THRESHOLD).
    # For example, if MIN_USEFUL_CAPACITY_THRESHOLD is 0.05, the best useful score is -0.05.
    # A penalty of -100 ensures small fragments are much worse.
    SMALL_FRAGMENT_PENALTY_BASE = -100.0
    # --- End Heuristic Parameters ---

    # Create a boolean mask for bins where the item actually fits (i.e., hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # Get the hypothetical remaining capacities only for the bins where the item fits.
    fitting_hypothetical_remaining = hypothetical_remaining[fits_mask]

    # Create sub-masks for different fitting scenarios:
    perfect_fit_mask = (fitting_hypothetical_remaining == 0)
    small_fragment_mask = (fitting_hypothetical_remaining > 0) & (fitting_hypothetical_remaining < MIN_USEFUL_CAPACITY_THRESHOLD)
    useful_fragment_mask = (fitting_hypothetical_remaining >= MIN_USEFUL_CAPACITY_THRESHOLD)

    # Assign priorities based on the masks:

    # 1. Perfect fits: Assign a very high positive bonus.
    priority_scores[fits_mask][perfect_fit_mask] = PERFECT_FIT_BONUS

    # 2. Small fragments: Assign a penalized score. The base penalty ensures these
    # are significantly less desirable than useful fragments.
    priority_scores[fits_mask][small_fragment_mask] = SMALL_FRAGMENT_PENALTY_BASE - fitting_hypothetical_remaining[small_fragment_mask]

    # 3. Useful fragments: Assign a Best-Fit score (negative of remaining capacity).
    # A smaller positive remaining capacity (tighter fit) results in a score closer to zero (higher).
    priority_scores[fits_mask][useful_fragment_mask] = -fitting_hypothetical_remaining[useful_fragment_mask]

    # Bins that do not fit remain at -np.inf.

    return priority_scores
```
