```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit strategy by prioritizing bins
    that will have the least remaining capacity (tightest fit) after the item is placed.
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Assign priority scores directly using np.where.
    # If the item fits (hypothetical_remaining >= 0), the score is the negative
    # of the remaining capacity. This means smaller remaining capacities (tighter fits)
    # yield higher scores (e.g., 0 for a perfect fit, -5 for 5 units remaining).
    # If the item does not fit, assign a very low priority score (-np.inf)
    # to ensure it's never selected.
    priority_scores = np.where(
        hypothetical_remaining >= 0,
        -hypothetical_remaining,
        -np.inf
    )

    return priority_scores
```
