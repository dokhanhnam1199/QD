```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    This heuristic refines a Best-Fit-like strategy by explicitly rewarding perfect fits
    and penalizing small, potentially unusable fragments, aligning with the
    "analyze future bin states" principle from the reflection.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a base score based on the remaining capacity.
    # This implements the Best-Fit strategy: prefer bins that leave the smallest positive
    # remaining capacity. Since np.argmax selects the maximum score, we negate
    # hypothetical_remaining. A smaller positive hypothetical_remaining (e.g., 0.1)
    # results in a larger score (-0.1) compared to a larger remaining (e.g., 0.5 -> -0.5).
    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]

    # --- Implement "Analyze future bin states, rewarding perfect fits and penalizing small fragments" ---

    # Heuristic parameters (can be tuned based on problem specifics)
    # This constant assigns a high score to perfect fits, making them the absolute top priority.
    PERFECT_FIT_BONUS = 1.0
    # EPSILON defines what constitutes a "small fragment". For example, if bin capacity is 1.0,
    # 0.05 means fragments up to 5% of the capacity are considered small.
    EPSILON = 0.05
    # This penalty is applied to "small fragments", making them less attractive.
    # A negative boost reduces the priority score.
    SMALL_FRAGMENT_PENALTY_BOOST = -0.5

    # 1. Reward perfect fits: Explicitly set a very high priority for bins that result in 0 remaining capacity.
    perfect_fit_mask = (hypothetical_remaining == 0) & fits_mask
    priority_scores[perfect_fit_mask] = PERFECT_FIT_BONUS

    # 2. Penalize small fragments: Identify bins where the remaining capacity is small but not zero.
    # This aims to avoid "unusable waste" by making bins with tiny remainders less appealing.
    small_fragment_mask = (hypothetical_remaining > 0) & (hypothetical_remaining <= EPSILON) & fits_mask
    priority_scores[small_fragment_mask] += SMALL_FRAGMENT_PENALTY_BOOST

    return priority_scores
```
