```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by giving an overwhelmingly
    high priority to perfect fits, ensuring they are always selected first.
    For non-perfect fits, it falls back to a tightest-fit (Best-Fit) strategy.
    This explicitly rewards full bin utilization and minimizes wasted space,
    while addressing "arbitrary or poor quality outcomes" by making the
    optimal perfect fit choice numerically distinct and highly preferred.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # as they retain this minimum possible score.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate the hypothetical remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a score based on the remaining capacity.
    # To implement a Best-Fit-like strategy, we want to select the bin that results
    # in the *smallest* hypothetical_remaining value (tightest fit).
    # Since np.argmax selects the maximum score, we negate the hypothetical_remaining.
    # A smaller positive hypothetical_remaining (e.g., 0.01) will result in a
    # larger score (e.g., -0.01) which is preferred over -0.5 (from 0.5 remaining).
    # Perfect fits (0.0 remaining) would initially receive a score of 0.0 here.
    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]

    # **Strongly reward perfect fits:**
    # Identify bins that would have exactly 0 remaining capacity after placing the item.
    # This directly addresses "rewarding full bin utilization" by making
    # a perfect fit unequivocally the highest priority.
    perfect_fit_mask = (hypothetical_remaining == 0)

    # Determine a bonus value that is guaranteed to be larger than any possible
    # score derived from -hypothetical_remaining (which are 0 or negative).
    # A bonus slightly larger than the maximum possible bin capacity ensures this.
    if bins_remain_cap.size > 0:
        # Using np.max(bins_remain_cap) ensures the bonus is always positive and
        # numerically distinct from (and greater than) any non-perfect fit score.
        PERFECT_FIT_BONUS = np.max(bins_remain_cap) + 1.0
    else:
        # Fallback for an empty bins_remain_cap array (unlikely in typical BPP operation),
        # providing a sensible default bonus value.
        PERFECT_FIT_BONUS = 1000.0 
    
    # Apply the overwhelming bonus to perfect fit bins, overriding their Best-Fit score of 0.0.
    priority_scores[perfect_fit_mask] = PERFECT_FIT_BONUS

    return priority_scores
```
