```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic extends priority_v1 by incorporating strategies to avoid
    leaving very small, unusable fragments in bins and to consolidate items
    in existing bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # If no bin fits, all scores remain -inf. The calling logic should handle opening a new bin.
    if not np.any(fits_mask):
        return priority_scores

    # --- Heuristic Parameters ---
    # These parameters are tuned for typical normalized Bin Packing Problem setups,
    # where bin capacities and item sizes are often normalized to a range like [0, 1].
    # If your problem uses a different scale (e.g., bin capacity 100), these values
    # might need to be adjusted proportionally.
    ASSUMED_BIN_CAPACITY = 1.0 # Common assumption for normalized BPP.

    # Parameters for "avoiding small fragments" to maximize future bin utilization.
    # Fragments smaller than this threshold (relative to ASSUMED_BIN_CAPACITY) are penalized.
    SMALL_FRAGMENT_THRESHOLD = ASSUMED_BIN_CAPACITY * 0.05 # E.g., 5% of bin capacity
    # The penalty applied to bins that would result in a small, non-zero fragment.
    # This value should be large enough to make a "bad" small fragment less desirable
    # than leaving a slightly larger (non-fragment) space.
    FRAGMENT_PENALTY = ASSUMED_BIN_CAPACITY * 0.5

    # Parameter for "consolidate items in existing bins".
    # A very small epsilon used as a tie-breaker. It slightly prioritizes bins that are
    # already more full (i.e., have less remaining capacity before placing the item).
    # This value must be much smaller than the primary Best-Fit scores and fragment penalties.
    TINY_CONSOLIDATION_EPSILON = 1e-6

    # 1. Calculate the base Best-Fit score for fitting bins.
    #    A smaller hypothetical_remaining (tighter fit) results in a larger score.
    scores_for_fitting = -hypothetical_remaining[fits_mask]

    # 2. Apply penalty for "small fragments".
    #    Identify bins where the item fits, the remaining capacity is positive (not a perfect fit),
    #    and falls within the "small fragment" range. These bins are penalized.
    small_fragment_mask_for_fitting_bins = (hypothetical_remaining[fits_mask] > 0) & \
                                           (hypothetical_remaining[fits_mask] <= SMALL_FRAGMENT_THRESHOLD)
    scores_for_fitting[small_fragment_mask_for_fitting_bins] -= FRAGMENT_PENALTY

    # 3. Apply "consolidation bonus" (as a tie-breaker).
    #    To "consolidate items in existing bins", we slightly prefer bins that are
    #    already more full *before* the current item is placed.
    #    This is achieved by subtracting a very small value proportional to the
    #    original remaining capacity. A smaller `original_remaining_for_fitting`
    #    (meaning the bin was more full) results in a smaller subtraction (higher score).
    original_remaining_for_fitting = bins_remain_cap[fits_mask]
    scores_for_fitting -= original_remaining_for_fitting * TINY_CONSOLIDATION_EPSILON

    # Assign the calculated scores back to the main priority_scores array
    # only for the bins where the item fits.
    priority_scores[fits_mask] = scores_for_fitting

    return priority_scores
```
