```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a "Perfect Fit then Worst Fit" (PFWF) strategy.
    It prioritizes bins that result in a perfect fit (0 remaining capacity) above all else.
    If no perfect fit is possible, it then prioritizes bins that leave the
    largest remaining capacity (Worst Fit) among those where the item fits.
    This aims to maximize future bin utilization by:
    1. Consolidating items perfectly when possible, completely filling a bin.
    2. When a perfect fit isn't available, avoiding creating small, potentially
       unusable fragments by instead leaving larger, more versatile remaining capacities.
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax. Use float64 to ensure sufficient range for -np.inf and bonus.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Create boolean masks for different fit scenarios
    fits_mask = hypothetical_remaining >= 0
    perfect_fit_mask = hypothetical_remaining == 0
    # Non-perfect fits are those where the item fits AND the remaining capacity is greater than 0
    non_perfect_fit_mask = (hypothetical_remaining > 0) & fits_mask

    # Define a large bonus for perfect fits to ensure they are always chosen
    # over any non-perfect fit. This bonus should be significantly larger than
    # any possible positive hypothetical_remaining value.
    # Assuming capacities are non-negative, a value like 1e9 should suffice.
    HUGE_PERFECT_FIT_BONUS = 1e9

    # 1. Assign the highest priority to bins that achieve a perfect fit.
    priority_scores[perfect_fit_mask] = HUGE_PERFECT_FIT_BONUS

    # 2. For bins that fit but are not a perfect fit, apply a "Worst Fit" strategy.
    # We want to select the bin that leaves the LARGEST remaining capacity.
    # The hypothetical_remaining values for these bins are positive, so we can
    # directly use them as scores. Since HUGE_PERFECT_FIT_BONUS is much larger,
    # these scores will always be lower than any perfect fit score.
    priority_scores[non_perfect_fit_mask] = hypothetical_remaining[non_perfect_fit_mask]

    return priority_scores
```
