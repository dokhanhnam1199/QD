```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit strategy, prioritizing bins that
    will have the least remaining capacity (tightest fit) after the item is placed.
    It improves upon v1 by scaling the priority scores for valid bins to be
    non-negative, where higher scores always indicate a better (tighter) fit.
    Bins where the item does not fit are assigned the lowest possible priority (-np.inf).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Create a boolean mask for bins where the item actually fits (remaining capacity is non-negative).
    can_fit_mask = hypothetical_remaining >= 0

    # Initialize all priority scores to -np.inf. This ensures bins where the item doesn't fit
    # are never selected.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Only process bins where the item can fit
    if np.any(can_fit_mask):
        # Extract the hypothetical remaining capacities for only the bins that can fit the item.
        valid_hypothetical_remaining = hypothetical_remaining[can_fit_mask]

        # Determine the maximum remaining capacity among all bins where the item fits.
        # This value represents the "loosest" valid fit, or the maximum possible
        # remaining space if an item is placed in a valid bin.
        # We use this to scale our scores. A perfect fit (0 remaining) will get
        # the highest score, which is this max_valid_remaining_capacity.
        max_valid_remaining_capacity = np.max(valid_hypothetical_remaining)

        # Assign priority scores for valid bins:
        # The score is calculated as (max_valid_remaining_capacity - current_hypothetical_remaining).
        # This means:
        # - A perfect fit (hypothetical_remaining = 0) gets the highest score (equal to max_valid_remaining_capacity).
        # - The "loosest" valid fit (hypothetical_remaining = max_valid_remaining_capacity) gets a score of 0.
        # - All other valid fits get scores between 0 and max_valid_remaining_capacity.
        # This ensures that higher scores always represent tighter fits, and all valid scores are non-negative.
        priority_scores[can_fit_mask] = max_valid_remaining_capacity - valid_hypothetical_remaining

    return priority_scores
```
