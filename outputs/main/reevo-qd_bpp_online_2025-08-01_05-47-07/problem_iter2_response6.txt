```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Implements a Best Fit (BF) heuristic, which prioritizes placing the item
    into the bin that will have the smallest amount of remaining capacity
    after the item is placed. This strategy aims to maximize bin utilization
    and leave minimal wasted space in partially filled bins, as it is generally
    found to be very effective in online bin packing.

    Bins where the item does not fit receive a very low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A smaller positive value indicates a "tighter" fit, which is preferred.
    potential_new_remaining_cap = bins_remain_cap - item

    # Initialize priority scores to negative infinity.
    # This ensures that bins where the item does not fit are effectively
    # excluded from selection as their priority will be the lowest possible.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item actually fits (i.e., where the remaining
    # capacity after placing the item would be non-negative).
    fits_mask = potential_new_remaining_cap >= 0

    # For bins where the item fits:
    # Assign priority scores by negating the potential new remaining capacity.
    # This transforms the "minimize remaining capacity" objective into a
    # "maximize priority score" objective, allowing `np.argmax` to pick
    # the best fit. For example, a remaining capacity of 0.1 becomes -0.1
    # (higher priority), while 0.5 becomes -0.5 (lower priority).
    priority_scores[fits_mask] = -potential_new_remaining_cap[fits_mask]

    return priority_scores
```
