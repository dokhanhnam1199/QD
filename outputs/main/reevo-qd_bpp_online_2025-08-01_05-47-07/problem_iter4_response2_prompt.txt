{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This heuristic implements a Best-Fit-like strategy by prioritizing bins\n    that will have the least remaining capacity (tightest fit) after the item is placed.\n    Bins where the item does not fit are assigned the lowest possible priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin if the item were placed in it.\n    # A negative value indicates the item does not fit.\n    hypothetical_remaining = bins_remain_cap - item\n\n    # Initialize priority scores for all bins to a very low value (-infinity).\n    # This ensures that bins where the item does not fit will never be selected\n    # by argmax.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n\n    # Create a boolean mask for bins where the item actually fits (i.e.,\n    # hypothetical_remaining is non-negative).\n    fits_mask = hypothetical_remaining >= 0\n\n    # For bins where the item fits, assign a score based on the remaining capacity.\n    # To implement Best Fit, we want to select the bin that results in the\n    # *smallest* hypothetical_remaining value (tightest fit).\n    # Since np.argmax selects the maximum score, we negate the hypothetical_remaining.\n    # A smaller positive hypothetical_remaining (e.g., 0 for a perfect fit)\n    # will result in a larger score (e.g., 0). A larger positive\n    # hypothetical_remaining (e.g., 10) will result in a smaller score (e.g., -10).\n    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]\n\n    return priority_scores\n\n[Reflection]\nPrioritize feasible options using all available data to guide informed greedy choices like Best Fit.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}