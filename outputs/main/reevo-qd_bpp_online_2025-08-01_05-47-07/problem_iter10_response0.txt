```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic extends the Best-Fit strategy by giving a significantly higher
    priority to bins where the item fits perfectly, resulting in zero remaining capacity.
    For other valid bins, it still prioritizes the tightest fit (least remaining capacity).
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a score based on the remaining capacity.
    # To implement Best Fit, we want to select the bin that results in the
    # *smallest* hypothetical_remaining value (tightest fit).
    # Since np.argmax selects the maximum score, we negate the hypothetical_remaining.
    # A smaller positive hypothetical_remaining (e.g., 0 for a perfect fit)
    # will result in a larger score (e.g., 0). A larger positive
    # hypothetical_remaining (e.g., 10) will result in a smaller score (e.g., -10).
    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]

    # Identify bins where the item fits perfectly (remaining capacity is exactly 0).
    # Using np.isclose for robust floating-point comparison to zero.
    perfect_fit_mask = np.isclose(hypothetical_remaining, 0.0)

    # Assign a significantly higher score to perfect fits. This ensures that
    # if a perfect fit exists, it will always be chosen over any non-perfect fit,
    # regardless of how tight the non-perfect fit is.
    # A score of 1.0 is chosen because all other valid scores are <= 0.
    PERFECT_FIT_BONUS_SCORE = 1.0
    priority_scores[perfect_fit_mask] = PERFECT_FIT_BONUS_SCORE

    return priority_scores
```
