```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit-like strategy by prioritizing bins
    that will have the least remaining capacity (tightest fit) after the item is placed.
    Bins where the item does not fit are assigned the lowest possible priority.

    This version improves upon `priority_v1` by scaling the priority scores for
    valid bins to be non-negative, where a higher positive value indicates a
    better (tighter) fit. A perfect fit (0 remaining capacity) will receive the
    highest positive score among fitting bins, and bins with larger remaining
    capacities will receive lower positive scores, progressively closer to zero.
    Bins where the item does not fit are still assigned negative infinity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    if bins_remain_cap.size == 0:
        return np.array([])

    # Calculate the remaining capacity for each bin if the item were hypothetically placed.
    hypothetical_remaining = bins_remain_cap - item

    # Create a mask for bins where the item actually fits (remaining capacity >= 0)
    fits_mask = hypothetical_remaining >= 0

    # Initialize priority scores. Bins where the item does not fit get -np.inf.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate scores only for bins where the item fits.
    # Check if any bin actually fits the item to avoid calculating max on an empty array.
    if np.any(fits_mask):
        # Get the hypothetical remaining capacities for only the bins where the item fits.
        valid_hypothetical_remaining = hypothetical_remaining[fits_mask]

        # Determine the maximum remaining capacity among the bins where the item fits.
        # This value is used to normalize the scores. By subtracting current_remaining
        # from this maximum, a smaller current_remaining results in a larger positive score.
        max_valid_rem_after_fit = np.max(valid_hypothetical_remaining)

        # Assign priority scores for fitting bins:
        # (max_valid_rem_after_fit - current_hypothetical_remaining).
        # This transformation ensures:
        # 1. Scores are non-negative for fitting bins.
        # 2. A perfect fit (current_hypothetical_remaining = 0) gets the highest score
        #    (equal to `max_valid_rem_after_fit`).
        # 3. Tighter fits (smaller `current_hypothetical_remaining`) get higher scores.
        priority_scores[fits_mask] = max_valid_rem_after_fit - valid_hypothetical_remaining

    return priority_scores
```
