```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by explicitly rewarding perfect matches
    with a distinct high score, while other valid fits are prioritized based on
    tightness (smallest remaining capacity). Invalid fits are penalized.
    This approach aims to consolidate items in existing bins and minimize new bin openings
    by aggressively favoring the most efficient use of current bin space,
    especially perfect fits which close a bin efficiently.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # Identify perfect fits: where remaining capacity would be exactly 0.
    # These are highly desirable as they efficiently "close" a bin.
    perfect_fits_mask = (hypothetical_remaining == 0) & fits_mask

    # Identify other valid fits: where item fits but remaining capacity is > 0.
    other_fits_mask = (hypothetical_remaining > 0) & fits_mask

    # Assign a distinct, high positive score for perfect fits.
    # This significantly elevates their priority, ensuring they are chosen
    # over any non-perfect valid fit, fulfilling the "rewarding perfect matches"
    # aspect of the reflection.
    priority_scores[perfect_fits_mask] = 1.0

    # For other valid fits, assign a score based on the negation of remaining capacity.
    # This implements the Best-Fit strategy: smaller remaining capacities (tighter fits)
    # result in higher scores (closer to 0, but still less than 1.0).
    priority_scores[other_fits_mask] = -hypothetical_remaining[other_fits_mask]

    return priority_scores
```
