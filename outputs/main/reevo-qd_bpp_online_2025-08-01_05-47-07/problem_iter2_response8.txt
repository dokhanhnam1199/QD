```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing an enhanced Best Fit strategy with a penalty for "sliver" remaining spaces.

    This function prioritizes bins based on two main criteria:
    1.  **Best Fit (Tightness):** It first favors bins that can accommodate the item
        and would leave the least remaining capacity after the item is placed.
        An exact fit (0 remaining capacity) receives the highest possible score.
    2.  **Sliver Avoidance (Efficiency):** To improve overall packing efficiency and
        avoid creating many bins with tiny, potentially unusable, leftover spaces,
        a penalty is applied to bins that would leave a very small, non-zero
        amount of remaining capacity (a "sliver"). This encourages the selection
        of bins that either become exactly full or leave a more substantial,
        potentially more useful, remaining space.

    Bins that cannot fit the item are assigned a very low priority (-np.inf),
    ensuring they are not selected unless no other bin can fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a very low value for all bins.
    # This ensures that bins which cannot fit the item will have the lowest priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # --- Heuristic Constants for Sliver Penalty ---
    # These values are chosen heuristically assuming item sizes and bin capacities
    # are typically in a normalized range (e.g., between 0 and 1, or 0 and 100).
    # They may require tuning based on the specific distribution of item sizes
    # and the bin capacity of the problem being solved.

    # EPSILON_FOR_SLIVERS: Defines the upper bound of what constitutes a "sliver"
    # remaining space after an item is placed. E.g., 0.01 means any remaining
    # space between (0, 0.01] is considered a sliver.
    EPSILON_FOR_SLIVERS = 0.01

    # SLIVER_PENALTY: The magnitude of the penalty applied to bins leaving a sliver.
    # This value should be large enough to make a sliver-leaving bin less attractive
    # than a bin that leaves a slightly larger, non-sliver remainder.
    SLIVER_PENALTY = 0.05

    # 1. Identify bins that can accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the initialized priorities (-inf everywhere).
    if not np.any(can_fit_mask):
        return priorities

    # Get remaining capacities for only those bins that can fit the item.
    valid_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate the remaining space after placing the item in valid bins.
    # A smaller positive value means a tighter fit. An exact fit is 0.
    valid_bins_remaining_space = valid_bins_remain_cap - item

    # 2. Calculate base priority using Best Fit logic:
    # We want to minimize valid_bins_remaining_space, so we negate it to make it a priority score
    # (higher is better). An exact fit (0 remaining space) results in a priority of 0,
    # which is the highest possible score for a valid bin.
    base_priorities = -valid_bins_remaining_space

    # 3. Apply the sliver penalty:
    # Identify valid bins that would result in a "sliver" (small, non-zero remaining space).
    # We use (valid_bins_remaining_space > 0) to exclude exact fits (where remaining_space is 0).
    sliver_mask_in_valid_bins = (valid_bins_remaining_space > 0) & \
                                (valid_bins_remaining_space <= EPSILON_FOR_SLIVERS)

    # Subtract the penalty from the base priorities for bins identified as leaving a sliver.
    # This makes these bins less attractive than other Best Fit candidates that
    # either perfectly fit the item or leave a more substantial remaining space.
    base_priorities[sliver_mask_in_valid_bins] -= SLIVER_PENALTY

    # Assign the calculated priorities back to the full priorities array using the mask.
    priorities[can_fit_mask] = base_priorities

    return priorities
```
