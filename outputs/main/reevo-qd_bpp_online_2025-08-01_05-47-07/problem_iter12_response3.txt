```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.

    This heuristic implements a Best-Fit-like strategy that strongly prioritizes
    perfect fits. For cases that are not perfect fits, it falls back to the
    standard Best Fit approach (minimizing remaining capacity).
    The design explicitly addresses the "Prior reflection" by:
    1.  **Prioritizing Best Fit for immediate utilization:** Preferring tighter fits
        (smaller remaining capacity) for non-perfect scenarios.
    2.  **Rewarding perfect fits with exceptionally high scores:** A perfect fit
        (leaving 0 capacity) is given a uniquely high score to strongly encourage
        "finishing" a bin, thus directly reducing the total number of bins used.
    3.  **Implicitly penalizing small fragments:** By making perfect fits vastly
        more attractive, the algorithm encourages full utilization. For non-perfect
        fits, minimizing fragments is achieved by assigning scores that are negatively
        proportional to the remaining capacity; thus, smaller positive remaining
        capacities receive higher (less negative) scores. Bins where the item
        does not fit are effectively "penalized" to negative infinity.

    Compared to `priority_v1`, this version makes the constant for perfect fits
    explicitly a very large, fixed number (e.g., 1e9). This ensures its dominance
    universally, regardless of the scale of `bins_remain_cap` or potential edge
    cases where `np.max(bins_remain_cap)` might be very small, providing more
    robustness and clarity regarding the absolute highest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit (hypothetical_remaining < 0)
    # will never be selected by argmax, as their score will remain -np.inf.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Define a very large positive score for perfect fits.
    # This constant is chosen to be sufficiently large to guarantee it is higher
    # than any possible score derived from a non-perfect fit (which will be
    # negative or zero).
    PERFECT_FIT_SCORE = 1e9 

    # --- Step 1: Identify and assign scores for perfect fits ---
    # A perfect fit leaves exactly 0 capacity remaining.
    perfect_fit_mask = (hypothetical_remaining == 0)
    priority_scores[perfect_fit_mask] = PERFECT_FIT_SCORE

    # --- Step 2: Handle bins where the item fits but is not a perfect fit ---
    # These are bins where hypothetical_remaining is positive (0 < hypothetical_remaining <= original_capacity).
    non_perfect_fit_mask = (hypothetical_remaining > 0)

    # For these bins, implement the Best Fit strategy: prioritize bins that result
    # in the smallest remaining capacity. To do this with np.argmax (which selects
    # the maximum score), we negate the hypothetical_remaining.
    # These scores will be negative (or very close to zero for very small fragments),
    # ensuring that perfect fits (with their large positive score) are always preferred
    # over any non-perfect fit.
    priority_scores[non_perfect_fit_mask] = -hypothetical_remaining[non_perfect_fit_mask]

    return priority_scores
```
