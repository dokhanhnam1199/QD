```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit-like strategy by prioritizing bins
    that will have the least remaining capacity (tightest fit) after the item is placed.
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # the bin's current remaining capacity is greater than or equal to the item size).
    fits_mask = bins_remain_cap >= item

    # For bins where the item fits, assign a score based on the remaining capacity.
    # To implement Best Fit (minimal remaining space), we want to select the bin
    # that results in the *smallest* remaining capacity after the item is placed.
    # Since np.argmax selects the maximum score, we negate the remaining capacity.
    # This makes smaller remaining capacities (e.g., 0 for a perfect fit) result
    # in larger scores (e.g., 0), and larger remaining capacities (e.g., 10) result
    # in smaller scores (e.g., -10). This directly optimizes for minimal remaining space.
    priority_scores[fits_mask] = -(bins_remain_cap[fits_mask] - item)

    return priority_scores
```
