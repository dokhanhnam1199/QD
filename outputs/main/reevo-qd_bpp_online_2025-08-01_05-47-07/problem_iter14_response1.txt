```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by prioritizing bins
    that result in a high ratio of the item's size to the remaining capacity
    after placement. This approach strongly emphasizes 'tightest fits' and aims
    to minimize "waste" by ensuring that placed items utilize as large a
    proportion of the newly remaining empty space as possible.

    Specifically:
    - Bins where the item fits perfectly (resulting in zero remaining capacity)
      are assigned the highest possible priority (infinity).
    - For bins where the item fits but leaves some capacity, the priority score
      is calculated as `item / (remaining_capacity_after_placement)`. This
      maximizes the score for bins where the item nearly fills the bin's
      remaining space.
    - Bins where the item does not fit are assigned the lowest possible priority (-infinity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores. Bins where the item does not fit will retain -np.inf.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit (remaining capacity is non-negative).
    can_fit_mask = hypothetical_remaining >= 0

    # Extract the hypothetical remaining capacities only for the bins where the item fits.
    fitting_hypothetical_remaining = hypothetical_remaining[can_fit_mask]
    
    # Calculate scores for the fitting bins based on the refined logic.
    # Use np.where to apply different scoring rules for perfect fits vs. partial fits.
    scores_for_fitting_bins = np.where(
        # Condition 1: Perfect fit (remaining capacity is exactly 0)
        fitting_hypothetical_remaining == 0,
        np.inf,  # Assign infinite priority for a perfect fit
        # Condition 2: Partial fit (remaining capacity is greater than 0)
        item / fitting_hypothetical_remaining # Prioritize based on item/remaining ratio
    )
    
    # Assign the calculated scores back to the main priority_scores array
    # for the bins that can accommodate the item.
    priority_scores[can_fit_mask] = scores_for_fitting_bins

    return priority_scores
```
