```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines Best-Fit by explicitly rewarding perfect fits
    and penalizing bins that would be left with very small, potentially unusable,
    remaining capacities (small fragments).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits.
    fits_mask = hypothetical_remaining >= 0

    # Get the hypothetical remaining capacities for only the bins where the item fits.
    fitting_hypothetical_remaining = hypothetical_remaining[fits_mask]

    # --- Define thresholds and scores for different fit scenarios ---
    # A small positive value to define what constitutes a "small fragment".
    # This value might need tuning based on the typical range of item sizes.
    # For common bin packing scenarios (e.g., items between 0 and 1, bin capacity 1),
    # a threshold like 0.05 or 0.1 is a reasonable starting point.
    FRAGMENT_THRESHOLD = 0.05

    # Scores are chosen to ensure the desired priority order:
    # Perfect Fit > Best Fit (among non-fragments) > Small Fragment Penalty > No Fit
    PERFECT_FIT_SCORE = 1000.0  # Very high score for exact fits
    SMALL_FRAGMENT_PENALTY_SCORE = -500.0 # Very low score for creating small, potentially unusable, fragments

    # 1. Assign scores for Perfect Fits (remaining capacity is exactly 0)
    perfect_fit_mask_local = (fitting_hypothetical_remaining == 0)
    priority_scores[fits_mask][perfect_fit_mask_local] = PERFECT_FIT_SCORE

    # 2. Assign scores for Small Fragments remaining (0 < remaining < FRAGMENT_THRESHOLD)
    # These bins are penalized because they might leave unusable space.
    small_fragment_mask_local = (fitting_hypothetical_remaining > 0) & \
                                (fitting_hypothetical_remaining < FRAGMENT_THRESHOLD)
    priority_scores[fits_mask][small_fragment_mask_local] = SMALL_FRAGMENT_PENALTY_SCORE

    # 3. Assign scores for Other Valid Fits (remaining capacity >= FRAGMENT_THRESHOLD)
    # For these, apply the Best-Fit strategy: prioritize the bin that leaves the
    # smallest remaining capacity (i.e., the tightest fit). This is done by
    # negating the remaining capacity, so smaller remaining values get higher scores.
    other_fits_mask_local = (fitting_hypothetical_remaining >= FRAGMENT_THRESHOLD)
    priority_scores[fits_mask][other_fits_mask_local] = -fitting_hypothetical_remaining[other_fits_mask_local]

    return priority_scores
```
