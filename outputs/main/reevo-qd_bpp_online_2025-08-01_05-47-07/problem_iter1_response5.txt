```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on a Best Fit approach.

    The "Best Fit" heuristic places an item into the bin that has the smallest
    remaining capacity but is still large enough to hold the item. This strategy
    aims to leave larger spaces in other bins for larger items or to pack bins as
    densely as possible.

    For this priority function:
    - Bins where the item *cannot* fit receive a very low (negative infinity) priority.
    - Bins where the item *can* fit receive a priority score equal to the negative of
      the remaining capacity after placing the item. This way, a smaller remaining
      capacity (which is desired for Best Fit) results in a priority score closer to zero
      (or less negative), thus being higher. A perfect fit (0 remaining capacity)
      gets the highest possible score of 0 among valid bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities for all bins.
    # By default, set priority to negative infinity, implying the item cannot be placed.
    # This ensures that bins where the item does not fit will never be chosen
    # unless there are no other options (in which case, the main BPP algorithm
    # should typically open a new bin).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity in bins where the item can fit.
    # For Best Fit, we want to minimize this value (bins_remain_cap - item).
    # To convert this to a priority (higher is better), we take the negative.
    # Example:
    # - If item fits perfectly (capacity left = 0), priority = 0.
    # - If item leaves small space (e.g., 0.1), priority = -0.1.
    # - If item leaves large space (e.g., 0.5), priority = -0.5.
    # 0 > -0.1 > -0.5, so higher priority corresponds to a tighter fit.
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign the calculated priorities to the bins that can fit the item.
    priorities[can_fit_mask] = -remaining_after_placement

    return priorities
```
