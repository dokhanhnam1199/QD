```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy to explicitly prioritize perfect fits
    and promote strategic consolidation, aiming to maximize bin utilization and
    reduce the number of open bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # 1. Base Score: Best-Fit (tightest fit)
    # For bins where the item fits, assign a score based on the remaining capacity.
    # To implement Best Fit, we want to select the bin that results in the
    # *smallest* hypothetical_remaining value (tightest fit).
    # Since np.argmax selects the maximum score, we negate the hypothetical_remaining.
    # A perfect fit (0 remaining) gets a score of 0. A loose fit (e.g., 10 remaining)
    # gets a score of -10.
    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]

    # 2. Strategic Consolidation: Boost Perfect Fits
    # To strongly prioritize "strategic consolidation" and "maximizing bin utilization",
    # we give a significant bonus to bins that achieve a perfect fit (i.e., where
    # hypothetical_remaining is exactly 0). This promotes closing bins quickly,
    # which directly contributes to minimizing the total number of bins used.
    # The bonus must be large enough to ensure a perfect fit's score is
    # always higher than any non-perfect fit's score (e.g., 0 vs -0.001).
    # A value like 1000 ensures this robustness.
    perfect_fit_mask = (hypothetical_remaining == 0)
    priority_scores[perfect_fit_mask] += 1000

    # Note on "avoiding fragmentation":
    # While Best-Fit implicitly tries to minimize waste, directly avoiding "small fragments"
    # (i.e., very small, non-zero remaining capacities) without knowing the
    # distribution of future item sizes or a minimum usable capacity threshold
    # can be counterproductive or highly complex. The strong preference for
    # perfect fits is the most robust way to address "consolidation" and
    # "bin utilization" with the given information, as it aims to completely
    # fill and effectively "close" bins.

    return priority_scores
```
