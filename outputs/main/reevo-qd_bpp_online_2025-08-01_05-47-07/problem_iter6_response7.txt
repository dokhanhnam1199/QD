```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.
    This heuristic refines the Best-Fit strategy by explicitly penalizing
    bins that would be left with very small, "unusable" fragments, while
    still strongly prioritizing perfect fits.

    The strategy prioritizes as follows:
    1. Perfect Fits: Assigns an exceptionally high score to any bin that
       can be filled exactly by the item, reflecting a "fill bins" strategy.
    2. Useful Fits (Best Fit): For items that fit but not perfectly, prioritize
       bins that leave a "useful" remaining capacity, preferring tighter fits
       (Best Fit) among these. This aims to maximize bin utilization while
       leaving space large enough for future items.
    3. Small Fragment Penalty: Explicitly penalizes bins that would be left
       with a very small, "unusable" fragment (i.e., not a perfect fit, but
       remaining capacity is below a certain threshold). These are considered
       worse than leaving a larger, potentially more useful fragment,
       or even opening a new bin (if external logic supports it). This
       addresses the "penalize small fragments" aspect more directly.
    4. No Fit: Assigns the lowest possible score, ensuring these bins are never selected.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit (hypothetical_remaining < 0)
    # will never be selected by argmax, as their score will remain -np.inf.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # --- Define dynamic thresholds and scores based on problem scale ---
    max_capacity = 0.0
    if bins_remain_cap.size > 0:
        max_capacity = np.max(bins_remain_cap)
    
    # PERFECT_FIT_SCORE: A large positive value to ensure perfect fits are always top priority.
    # Scales with max capacity to remain distinct from other scores.
    PERFECT_FIT_SCORE = max_capacity + 1.0 if max_capacity > 0 else 1.0

    # FRAGMENT_THRESHOLD: Defines what constitutes a "very small" or "unusable" fragment.
    # For robustness, we use a small percentage of the max bin capacity, or a default if max_capacity is zero.
    FRAGMENT_THRESHOLD = max_capacity * 0.05 if max_capacity > 0 else 0.05
    # Ensure threshold is always positive for valid checks
    FRAGMENT_THRESHOLD = max(1e-9, FRAGMENT_THRESHOLD) 

    # FRAGMENT_PENALTY_SCORE: A very low negative score for small, undesirable fragments.
    # This ensures these fits are worse than any standard Best-Fit outcome (which are
    # negative, but generally closer to zero than this penalty).
    FRAGMENT_PENALTY_SCORE = -2 * max_capacity - 1.0 if max_capacity > 0 else -1e9


    # --- Step 1: Assign scores for perfect fits ---
    # These are bins where hypothetical_remaining is exactly 0.
    perfect_fit_mask = (hypothetical_remaining == 0)
    priority_scores[perfect_fit_mask] = PERFECT_FIT_SCORE

    # --- Step 2: Assign scores for small, unusable fragments ---
    # These are bins where the item fits (hypothetical_remaining > 0) but leaves
    # a remaining capacity below the defined FRAGMENT_THRESHOLD.
    small_fragment_mask = (hypothetical_remaining > 0) & (hypothetical_remaining <= FRAGMENT_THRESHOLD)
    priority_scores[small_fragment_mask] = FRAGMENT_PENALTY_SCORE

    # --- Step 3: Assign scores for useful remaining capacities (Best-Fit) ---
    # These are bins where the item fits (hypothetical_remaining > 0) and leaves
    # a remaining capacity greater than the FRAGMENT_THRESHOLD.
    # For Best-Fit, we want to minimize the remaining capacity, which means
    # maximizing the negative of the remaining capacity.
    useful_fragment_mask = (hypothetical_remaining > FRAGMENT_THRESHOLD)
    priority_scores[useful_fragment_mask] = -hypothetical_remaining[useful_fragment_mask]

    return priority_scores
```
