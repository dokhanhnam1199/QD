```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit-like strategy by prioritizing bins
    that, if the item were placed, would result in the item taking up the
    largest proportion of the bin's *currently available* capacity. This aims
    for the tightest 'relative' fit, promoting efficient space utilization
    and minimizing fragmentation, which aligns with the objective of using
    the fewest bins.

    Bins where the item does not fit are assigned the lowest possible priority.

    This improved version provides a priority score that is a positive ratio,
    making it more intuitive for prioritization (higher value = higher priority).
    A score of 1.0 indicates a perfect fit where the item completely fills
    the remaining capacity of the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores to negative infinity. This ensures bins where
    # the item does not fit are effectively excluded from consideration.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    # A bin fits if its remaining capacity is greater than or equal to the item's size.
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item fits, calculate the priority score.
    # The score is the ratio of the item's size to the bin's current remaining capacity.
    # This ratio quantifies how 'much' of the available space the item will consume.
    # Higher ratios indicate a 'tighter' relative fit and are preferred.
    # This calculation is applied only to the bins identified by `can_fit_mask`.
    # Assuming item sizes are positive (typical for BPP), if an item fits,
    # its `bins_remain_cap` will be >= `item`, thus strictly positive,
    # preventing division by zero errors for valid fits.
    
    # Only proceed if the item has a positive size to avoid division issues if item is 0
    # (though item sizes are typically positive in BPP).
    if item > 0:
        valid_bins_remain_cap = bins_remain_cap[can_fit_mask]
        priority_scores[can_fit_mask] = item / valid_bins_remain_cap
    # If item is 0, it theoretically fits everywhere, but doesn't "fill" capacity.
    # For a 0-sized item, scores would be 0, which is still a valid (though trivial) priority.
    # The default -np.inf for non-fitting bins correctly handles cases where item > 0.

    return priority_scores
```
