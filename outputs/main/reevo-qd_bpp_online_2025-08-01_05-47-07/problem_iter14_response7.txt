```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit strategy, prioritizing bins that
    will have the least remaining capacity (tightest fit) after the item is placed.
    Bins where the item does not fit are assigned the lowest possible priority (-np.inf).

    The priority score for valid bins is the negative of the remaining capacity
    after the item is placed. This means:
    - A perfect fit (0 remaining capacity) receives the highest score (0).
    - A very tight fit (small positive remaining capacity) receives a score close to 0 (slightly negative).
    - A looser fit (larger positive remaining capacity) receives a more negative score.
    This directly maps the objective of minimizing remaining capacity to maximizing the priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed in it.
    # A negative value here means the item does not fit in that bin.
    hypothetical_remaining = bins_remain_cap - item

    # Create a boolean mask to identify bins where the item can actually fit
    # (i.e., where the hypothetical remaining capacity is non-negative).
    can_fit_mask = hypothetical_remaining >= 0

    # Initialize all priority scores to -np.inf. This ensures that bins where the item
    # does not fit will never be selected, as they have the lowest possible priority.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # For only the bins where the item can fit, calculate their priority scores.
    # The score is the negative of the hypothetical remaining capacity.
    # This design directly translates "smaller remaining capacity" into "larger priority score".
    # For example:
    #   - If a bin has 0 remaining capacity after placing the item (perfect fit), its score is 0.
    #   - If a bin has 0.1 remaining capacity, its score is -0.1.
    #   - If a bin has 0.5 remaining capacity, its score is -0.5.
    # This ensures that selecting the bin with the highest priority score (closest to 0 or 0)
    # achieves the "tightest fit" objective.
    priority_scores[can_fit_mask] = -hypothetical_remaining[can_fit_mask]

    return priority_scores
```
