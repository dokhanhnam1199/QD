```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation uses a Best Fit heuristic: it prioritizes bins
    that will have the smallest non-negative remaining capacity after the
    item is placed. Bins where the item does not fit receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Calculate the remaining capacity if the item were hypothetically placed in each bin.
    # This also naturally handles cases where the item does not fit, resulting in negative values.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value.
    # Bins that cannot fit the item will retain this -np.inf score.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    fitting_bins_mask = potential_remaining_cap >= 0

    # For bins where the item fits, calculate the priority score.
    # The Best Fit strategy aims to minimize the remaining space.
    # To convert this minimization into a maximization problem (for priority scores),
    # we negate the potential_remaining_cap.
    #
    # Examples:
    # - If potential_remaining_cap is 0.0 (perfect fit), priority is 0.0 (highest).
    # - If potential_remaining_cap is 0.1 (small leftover), priority is -0.1.
    # - If potential_remaining_cap is 0.5 (large leftover), priority is -0.5.
    # This ensures that smaller non-negative remainders yield higher (less negative) priority scores.
    priority_scores[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    return priority_scores
```
