```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic extends the Best-Fit strategy by giving a significantly higher
    priority to bins where the item fits perfectly, resulting in zero remaining capacity.
    For other valid bins, it still prioritizes the tightest fit (least remaining capacity).
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Define the bonus score for a perfect fit.
    # This value must be strictly greater than any score assigned to a non-perfect fit.
    # Non-perfect fits result in scores <= 0 (e.g., 0 for a very tight fit, negative otherwise).
    PERFECT_FIT_BONUS_SCORE = 1.0

    # Define conditions for assigning priority scores using np.select.
    # The order of conditions is important: np.select uses the choice corresponding
    # to the first True condition it encounters for each element.
    conditions = [
        # Condition 1: Perfect fit (hypothetical_remaining is approximately 0).
        # np.isclose is used for robust floating-point comparison.
        np.isclose(hypothetical_remaining, 0.0),

        # Condition 2: Valid fit (hypothetical_remaining is non-negative).
        # This condition captures all bins where the item fits, including perfect fits.
        # However, for perfect fits, the first condition (perfect_fit_mask) takes precedence.
        hypothetical_remaining >= 0
    ]

    # Define choices corresponding to each condition:
    choices = [
        # Choice for Condition 1 (Perfect Fit): Assign a high bonus score.
        PERFECT_FIT_BONUS_SCORE,

        # Choice for Condition 2 (Other Valid Fits): Assign a score based on Best-Fit logic.
        # We negate hypothetical_remaining because argmax selects the maximum score,
        # and we want to prioritize smaller remaining capacities (tighter fits).
        -hypothetical_remaining
    ]

    # Use np.select to efficiently assign scores based on the defined conditions and choices.
    # Bins that do not satisfy any of the conditions (i.e., the item does not fit)
    # will be assigned the default value of -np.inf, ensuring they are never selected.
    priority_scores = np.select(conditions, choices, default=-np.inf)

    return priority_scores
```
