```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This strategy, 'Targeted Remaining Capacity Fit', aims to find a bin
    such that after placing the item, the bin's remaining capacity (slack)
    is as close as possible to a predefined 'target slack'.
    
    The 'target slack' is defined as a small fraction of the item's size.
    This heuristic attempts to balance two objectives:
    1. Fill bins efficiently (similar to Best Fit) by minimizing remaining space.
    2. Avoid creating excessively tiny, potentially unusable gaps, or leaving bins
       too full, by aiming for a "just right" amount of remaining space that might
       be useful for future, possibly small, items.

    Bins that cannot accommodate the item receive the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low value (negative infinity)
    # This ensures that bins where the item does not fit are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can accommodate the item
    can_fit = bins_remain_cap >= item

    # Calculate the remaining capacity in each fitting bin after placing the item
    remaining_after_placement = bins_remain_cap[can_fit] - item

    # Define a 'target slack' for the remaining capacity.
    # This factor is a heuristic choice; 0.0 would revert to a pure Best Fit.
    # A positive factor biases towards leaving a small, specific amount of slack.
    TARGET_SLACK_FACTOR = 0.05  # Aim to leave 5% of the item's size as remaining capacity
    TARGET_SLACK = TARGET_SLACK_FACTOR * item

    # If item is zero (or very small near float precision limit), set target slack to zero
    # to avoid numerical issues or unreasonable targets for tiny items.
    if item <= np.finfo(float).eps:
        TARGET_SLACK = 0.0

    # The priority score is the negative of the absolute difference
    # between the actual remaining capacity and the target slack.
    # A smaller absolute difference results in a higher (less negative) priority score.
    priorities[can_fit] = -np.abs(remaining_after_placement - TARGET_SLACK)

    return priorities
```
