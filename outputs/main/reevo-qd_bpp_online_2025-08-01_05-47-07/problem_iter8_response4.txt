```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.

    This heuristic implements a Best-Fit-like strategy that strictly follows
    the "Reflection" by:
    1. Discarding impossible placements: Bins where the item does not fit receive
       the lowest possible priority score (-infinity).
    2. Prioritizing perfect fits: Bins where the item fits exactly receive the
       highest possible priority score (+infinity).
    3. Prioritizing tightest fits: Among bins where the item fits but not perfectly,
       those that result in the smallest remaining capacity receive higher scores
       (specifically, the negative of their remaining capacity, ensuring smaller
       remaining capacity yields a numerically larger score).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    if bins_remain_cap.size == 0:
        return np.array([]) # Handle the edge case of no bins

    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This effectively "discards" bins where the item does not fit, as their score
    # will remain -np.inf and thus they will never be selected by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # --- Step 1: Score bins where the item fits (hypothetical_remaining >= 0) ---
    # These are potential candidates for placement.
    fits_mask = hypothetical_remaining >= 0

    # For these fitting bins, calculate their initial scores based on a Best-Fit strategy:
    # A smaller positive remaining capacity is preferred. By negating `hypothetical_remaining`,
    # a smaller positive value (e.g., 0.1) results in a larger negative score (-0.1) than
    # a larger positive value (e.g., 10.0) which results in a smaller negative score (-10.0).
    # This means `argmax` will correctly pick the "least negative" (i.e., tightest) fit among them.
    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]

    # --- Step 2: Super-prioritize perfect fits (hypothetical_remaining == 0) ---
    # Identify bins where the item fits perfectly (leaves exactly 0 capacity remaining).
    perfect_fit_mask = hypothetical_remaining == 0

    # Overwrite the scores for perfect fits with positive infinity.
    # This guarantees that perfect fits will always have a higher priority than any
    # non-perfect fit (whose scores are negative or zero from the previous step),
    # and certainly higher than bins where the item doesn't fit (-np.inf).
    priority_scores[perfect_fit_mask] = float('inf')

    return priority_scores
```
