```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic explicitly prioritizes perfect fits, then uses a Best-Fit strategy
    for other suitable bins, and assigns the lowest priority to bins where the item does not fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed in it.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item fits perfectly (remaining capacity is 0).
    perfect_fit_mask = (hypothetical_remaining == 0)

    # Create a boolean mask for bins where the item fits, but not perfectly (remaining capacity > 0).
    general_fits_mask = (hypothetical_remaining > 0)

    # Assign a high positive score to bins that are a perfect fit.
    # This ensures they are always chosen over any other type of fit, as per the reflection.
    priority_scores[perfect_fit_mask] = 1.0

    # For bins where the item fits but not perfectly, assign a score based on the
    # negative of the hypothetical remaining capacity.
    # This implements the Best Fit strategy: a smaller positive remaining capacity
    # (tighter fit) results in a score closer to 0 (e.g., -0.1 is better than -0.5).
    # These scores will always be less than 1.0 (the perfect fit score).
    priority_scores[general_fits_mask] = -hypothetical_remaining[general_fits_mask]

    # Bins where the item does not fit (hypothetical_remaining < 0) retain their
    # initial -np.inf score, ensuring they are not selected.

    return priority_scores
```
