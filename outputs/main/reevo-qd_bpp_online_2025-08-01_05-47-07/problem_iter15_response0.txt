```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic strongly prioritizes perfect fits to efficiently close bins,
    and then applies a Best-Fit-like strategy among non-perfect but valid placements.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # Create a boolean mask for bins where the item is a perfect fit (remaining is 0).
    perfect_fit_mask = (hypothetical_remaining == 0)

    # Assign an extremely high priority to perfect fits.
    # This directly rewards perfect matches, ensuring they are always preferred
    # over any other type of fit, helping to close bins efficiently.
    priority_scores[perfect_fit_mask] = np.inf

    # For bins where the item fits but is *not* a perfect fit,
    # assign a score based on the remaining capacity using Best-Fit logic.
    # We want to select the bin that results in the *smallest* positive
    # hypothetical_remaining value (tightest fit).
    # Since np.argmax selects the maximum score, we negate the hypothetical_remaining.
    # A smaller positive remaining (e.g., 0.1) results in a larger score (-0.1).
    # A larger positive remaining (e.g., 10) results in a smaller score (-10).
    non_perfect_fits_mask = fits_mask & ~perfect_fit_mask
    priority_scores[non_perfect_fits_mask] = -hypothetical_remaining[non_perfect_fits_mask]

    return priority_scores
```
