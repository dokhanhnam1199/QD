```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy to more explicitly "reward full bin utilization"
    and handle perfect fits with distinct priority, aiming to minimize wasted space and avoid
    arbitrary choices where possible.

    Specifically:
    1. Perfect fits are given a significantly higher priority than any non-perfect fit.
    2. Among perfect fits, a tie-breaking rule slightly prefers perfect fits for items
       that fill a bin that was already closer to its total capacity (i.e., smaller initial remaining capacity).
       (Note: For a specific 'item', all perfect fits will have the same 'bins_remain_cap' equal to 'item',
       so this secondary tie-breaker won't differentiate multiple perfect fits for the *same* item size.
       It would differentiate between perfect fits for different item sizes if all were considered simultaneously,
       but here, it acts on the current item.)
    3. For non-perfect fits, the classic Best-Fit strategy (minimizing remaining capacity) is used.
    4. A subtle secondary preference is added for non-perfect fits, nudging towards bins that are
       already more utilized (i.e., smaller current `bins_remain_cap`).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin. Assumed to be normalized,
                         e.g., the maximum bin capacity is implicitly 1.0 for relative scoring.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Masks for bins where the item actually fits (i.e., hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0
    perfect_fit_mask = (hypothetical_remaining == 0) & fits_mask
    non_perfect_fit_mask = (hypothetical_remaining > 0) & fits_mask

    # Define a high constant score to strongly prioritize perfect fits.
    # This value must be greater than any possible score from a non-perfect fit.
    # Assuming `bins_remain_cap` and `item` are positive and typically within [0, 1] (e.g., normalized),
    # the `-hypothetical_remaining` for non-perfect fits will be between (e.g., -1.0, 0.0).
    # A bonus of 1.0 or higher is sufficient to clearly separate perfect fits.
    PERFECT_FIT_BONUS = 1.0

    # A very small weight for the secondary criterion (current bin utilization).
    # This term slightly prefers bins that are already more full (smaller bins_remain_cap).
    # It acts as a subtle tie-breaker or a slight preference nudger among solutions
    # that are very close in their primary Best-Fit score.
    # This value must be small enough not to overturn the primary Best-Fit ranking significantly.
    TIE_BREAKER_WEIGHT = 1e-6 

    # --- Step 1: Score for all fitting bins based on Best-Fit and current utilization ---
    # Primary Best-Fit component: -hypothetical_remaining (smaller remaining -> higher score)
    # Secondary current utilization component: + (TIE_BREAKER_WEIGHT * -bins_remain_cap)
    # (smaller current remaining capacity -> higher score for this component -> preference for more full bins)
    
    # Apply this combined score to all bins where the item fits.
    if np.any(fits_mask):
        priority_scores[fits_mask] = (
            -hypothetical_remaining[fits_mask] +
            (TIE_BREAKER_WEIGHT * -bins_remain_cap[fits_mask])
        )

    # --- Step 2: Elevate perfect fit scores ---
    # Perfect fits are numerically separated from all other fits by adding a large bonus.
    # This makes them unequivocally the highest priority.
    # For a perfect fit, hypothetical_remaining is 0, so its base score before this step was
    # `0 + (TIE_BREAKER_WEIGHT * -bins_remain_cap)`.
    # After adding the bonus, its score becomes `PERFECT_FIT_BONUS + (TIE_BREAKER_WEIGHT * -bins_remain_cap)`.
    if np.any(perfect_fit_mask):
        priority_scores[perfect_fit_mask] += PERFECT_FIT_BONUS

    return priority_scores
```
