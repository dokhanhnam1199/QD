{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin,\n    implementing a Best Fit (BF) strategy.\n\n    Prioritizes bins that can fit the item and would leave the least\n    remaining capacity after the item is placed (i.e., the \"tightest fit\").\n    Bins that cannot fit the item receive a very low priority (-np.inf),\n    ensuring they are never selected unless no other bin can fit the item.\n\n    The priority score is calculated as the negative of the remaining space\n    after placing the item. Thus, a smaller positive remaining space results\n    in a larger (closer to zero or positive) priority score, making it the\n    preferred choice. An exact fit results in a priority of 0, which is\n    the highest possible score for a valid bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities with a very low value for all bins.\n    # This ensures that bins which cannot fit the item will have the lowest priority.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Create a boolean mask for bins that can accommodate the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the remaining capacity for only those bins that can fit the item.\n    # We want to minimize this remaining capacity (Best Fit).\n    # To convert this into a priority (where higher is better), we negate the value.\n    # For example:\n    #   - If remaining capacity is 1, priority is -1.\n    #   - If remaining capacity is 5, priority is -5.\n    #   - If remaining capacity is 0 (exact fit), priority is 0 (highest).\n    # Since -1 is greater than -5, this correctly prioritizes the \"tightest\" fit.\n    valid_bins_remaining_space = bins_remain_cap[can_fit_mask] - item\n    priorities[can_fit_mask] = -valid_bins_remaining_space\n\n    return priorities\n\n[Reflection]\nLeverage item and bin properties to prioritize decisions, aiming for tighter fits and efficiency.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}