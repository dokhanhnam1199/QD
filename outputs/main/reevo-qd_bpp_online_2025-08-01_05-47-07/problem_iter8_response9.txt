```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation refines the Best Fit heuristic with strategic bonuses and penalties,
    aiming to "optimize future bin state to minimize overall waste" by being smart about
    leftover space using a more nuanced scoring system than v1.

    It prioritizes bins based on the following hierarchy and numerical scoring:
    1.  **Perfect Fit**: Highest positive bonus. This fully utilizes a bin, effectively
        "closing" it and preventing fragmentation. Gets a large positive score.
    2.  **Best Fit (Useful Remainder)**: For other cases where the item fits and leaves
        a "useful" positive remainder (i.e., not a very small fragment). These bins
        are scored by the Best Fit principle (smaller positive remainder gets a higher score),
        which ensures items are packed as tightly as possible without creating "dead space".
    3.  **Avoid Small Fragments**: Significant negative penalty. These are bins that would be
        left with a very small, non-zero remaining capacity. Such spaces are often
        "dead space" or hard-to-use fragments, contributing to overall waste by making
        bins appear partially full but practically unusable. The penalty ensures they
        are chosen only if absolutely no other, better option exists.
    4.  **Does Not Fit**: Lowest possible score. Bins where the item cannot fit
        are assigned an infinitely low score, ensuring they are never chosen.

    This heuristic attempts to consolidate items efficiently while avoiding the creation of
    small, unusable gaps, providing a clearer numerical differentiation between valid but
    undesirable choices, unlike the absolute `inf`/`-inf` used for non-perfect/non-dead-space
    cases in v1.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Define thresholds for remaining capacity types.
    # EPSILON_FOR_ZERO: A very small number to account for floating point inaccuracies
    #                   when checking if a remaining capacity is effectively zero.
    # SMALL_REMAINDER_THRESHOLD: Defines what constitutes a "very small" or "dead" remaining space.
    #                            This value might need tuning based on the typical range of item sizes
    #                            and bin capacity (e.g., if item sizes are always >= 0.1, then 0.05
    #                            is indeed "dead space"). For normalized items/bins (0 to 1), 0.05
    #                            is a reasonable starting point.
    EPSILON_FOR_ZERO = 1e-9
    SMALL_REMAINDER_THRESHOLD = 0.05

    # Define score modifiers. These values are chosen to create distinct priority tiers.
    # The base score (negative of potential remainder) will typically be between 0 and -1 (for normalized bins).
    # PERFECT_FIT_BONUS: A large positive value to make perfect fits unequivocally best.
    # SMALL_FRAGMENT_PENALTY: A large negative value to make small fragments highly undesirable,
    #                         but still numerically comparable to other bad options if necessary.
    PERFECT_FIT_BONUS = 100.0
    SMALL_FRAGMENT_PENALTY = -50.0

    # Calculate the remaining capacity if the item were hypothetically placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priority scores for all bins to negative infinity.
    # Bins where the item does not fit will retain this score, making them never chosen.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit.
    # Allow for a very tiny negative remaining capacity due to floating point precision, treating it as 0.
    fitting_bins_mask = potential_remaining_cap >= -EPSILON_FOR_ZERO

    # Process only the fitting bins.
    if np.any(fitting_bins_mask):
        fitting_caps_actual = potential_remaining_cap[fitting_bins_mask]

        # 1. Base score for fitting bins: Negative of the remaining capacity.
        # This implements the Best Fit principle: smaller positive remainder -> higher (less negative) score.
        # A perfect fit (remainder 0) would initially get a base score of 0.
        fitting_scores = -fitting_caps_actual

        # 2. Apply specific adjustments based on the nature of the remaining capacity:

        # Perfect Fit (remaining capacity is zero or very close to it)
        perfect_fit_mask = np.isclose(fitting_caps_actual, 0.0, atol=EPSILON_FOR_ZERO)
        fitting_scores[perfect_fit_mask] += PERFECT_FIT_BONUS

        # Small, Non-Zero Remainder (considered "dead space")
        # This applies to capacities that are greater than zero but below the threshold.
        small_remainder_mask = (fitting_caps_actual > EPSILON_FOR_ZERO) & \
                               (fitting_caps_actual < SMALL_REMAINDER_THRESHOLD)
        fitting_scores[small_remainder_mask] += SMALL_FRAGMENT_PENALTY

        # For all other fitting bins (those with larger, "useful" remaining capacities),
        # the initial Best Fit scoring (`-fitting_caps_actual`) remains,
        # ensuring that among these, smaller remainders are still preferred.

        # Assign the calculated fitting scores back to the main priority_scores array.
        priority_scores[fitting_bins_mask] = fitting_scores

    return priority_scores
```
