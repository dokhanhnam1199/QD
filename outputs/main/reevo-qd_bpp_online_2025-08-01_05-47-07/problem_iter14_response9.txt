```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.
    This heuristic implements a Best-Fit-like strategy that strongly prioritizes
    perfect fits. For cases that are not perfect fits, it falls back to the
    standard Best Fit approach (minimizing remaining capacity).

    The design directly implements the reflection's objectives:
    1.  **Reward perfect fits highly**: Perfect fits receive an exceptionally
        high, effectively infinite, priority score. This ensures they are
        always chosen when available.
    2.  **Minimize remaining capacity**: For bins where the item fits but is
        not a perfect fit, the priority is set as the negative of the
        hypothetical remaining capacity. This means smaller remaining capacities
        (tighter fits) result in higher (less negative) scores.
    3.  **Filter out non-fitting bins**: Bins where the item does not fit
        (i.e., item size exceeds remaining capacity) are initialized with a
        negative infinity score and are not updated, ensuring they are never selected.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This automatically handles bins where the item does not fit, as their score
    # will remain -np.inf, ensuring they are never selected by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # --- Step 1: Assign scores for perfect fits ---
    # A perfect fit leaves exactly 0 capacity remaining.
    perfect_fit_mask = hypothetical_remaining == 0

    # Assign an infinitely high score for perfect fits. This guarantees they are
    # always preferred over any non-perfect fit (which will have finite, negative scores).
    priority_scores[perfect_fit_mask] = float('inf')

    # --- Step 2: Handle bins where the item fits but is not a perfect fit ---
    # These are bins where hypothetical_remaining is positive (0 < hypothetical_remaining <= original_capacity).
    non_perfect_fit_mask = (hypothetical_remaining > 0)

    # For these bins, implement the Best Fit strategy: prioritize bins that result
    # in the smallest remaining capacity. To do this with np.argmax (which selects
    # the maximum score), we negate the hypothetical_remaining.
    # These scores will be negative (or very close to zero if hypothetical_remaining
    # is small but positive), ensuring that perfect fits (with their infinite score)
    # are always preferred over any non-perfect fit.
    priority_scores[non_perfect_fit_mask] = -hypothetical_remaining[non_perfect_fit_mask]

    return priority_scores
```
