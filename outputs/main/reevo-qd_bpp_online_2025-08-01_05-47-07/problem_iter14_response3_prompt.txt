{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This heuristic implements a Best-Fit strategy, prioritizing bins that\n    will have the least remaining capacity (tightest fit) after the item is placed.\n    It improves upon v1 by scaling the priority scores for valid bins to be\n    non-negative, where higher scores always indicate a better (tighter) fit.\n    Bins where the item does not fit are assigned the lowest possible priority (-np.inf).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin if the item were placed in it.\n    # A negative value indicates the item does not fit.\n    hypothetical_remaining = bins_remain_cap - item\n\n    # Create a boolean mask for bins where the item actually fits (remaining capacity is non-negative).\n    can_fit_mask = hypothetical_remaining >= 0\n\n    # Initialize all priority scores to -np.inf. This ensures bins where the item doesn't fit\n    # are never selected.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Only process bins where the item can fit\n    if np.any(can_fit_mask):\n        # Extract the hypothetical remaining capacities for only the bins that can fit the item.\n        valid_hypothetical_remaining = hypothetical_remaining[can_fit_mask]\n\n        # Determine the maximum remaining capacity among all bins where the item fits.\n        # This value represents the \"loosest\" valid fit, or the maximum possible\n        # remaining space if an item is placed in a valid bin.\n        # We use this to scale our scores. A perfect fit (0 remaining) will get\n        # the highest score, which is this max_valid_remaining_capacity.\n        max_valid_remaining_capacity = np.max(valid_hypothetical_remaining)\n\n        # Assign priority scores for valid bins:\n        # The score is calculated as (max_valid_remaining_capacity - current_hypothetical_remaining).\n        # This means:\n        # - A perfect fit (hypothetical_remaining = 0) gets the highest score (equal to max_valid_remaining_capacity).\n        # - The \"loosest\" valid fit (hypothetical_remaining = max_valid_remaining_capacity) gets a score of 0.\n        # - All other valid fits get scores between 0 and max_valid_remaining_capacity.\n        # This ensures that higher scores always represent tighter fits, and all valid scores are non-negative.\n        priority_scores[can_fit_mask] = max_valid_remaining_capacity - valid_hypothetical_remaining\n\n    return priority_scores\n\n[Reflection]\nPrioritize valid options. Implement strategies (e.g., Best-Fit) to optimize resource utilization based on clear criteria.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}