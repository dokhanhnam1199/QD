```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a refined Best-Fit strategy. It assigns a higher
    priority to bins that result in smaller remaining capacity, with perfect fits
    naturally receiving the highest possible score. Bins where the item does not
    fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed in it.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a score based on the inverse of the
    # hypothetical remaining capacity, plus one. This ensures that:
    # 1. Perfect fits (hypothetical_remaining = 0) yield the highest score (1.0 / (0 + 1) = 1.0).
    # 2. Tighter fits (smaller positive hypothetical_remaining) yield higher positive scores.
    #    (e.g., if remaining=1, score=0.5; if remaining=10, score=0.09)
    # 3. All valid fits receive a positive score in the range (0, 1.0].
    # This approach combines the "prioritize tight fits" and "reward perfect fits"
    # logic into a single, continuous function for fitting bins.
    scores_for_fitting_bins = 1.0 / (1.0 + hypothetical_remaining[fits_mask])

    # Assign these calculated scores to the bins where the item fits.
    priority_scores[fits_mask] = scores_for_fitting_bins

    return priority_scores
```
