```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements an enhanced Best-Fit-like strategy by prioritizing bins
    that will have the least remaining capacity (tightest fit) after the item is placed.
    It significantly rewards perfect fits to encourage efficient bin consolidation and closure,
    thereby maximizing overall bin utilization and minimizing fragmentation.
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a score based on the remaining capacity.
    # To implement Best Fit, we want to select the bin that results in the
    # *smallest* hypothetical_remaining value (tightest fit).
    # Since np.argmax selects the maximum score, we negate the hypothetical_remaining.
    # A smaller positive hypothetical_remaining (e.g., 0 for a perfect fit)
    # will result in a larger score (e.g., 0). A larger positive
    # hypothetical_remaining (e.g., 10) will result in a smaller score (e.g., -10).
    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]

    # --- Mutation for enhanced strategic consolidation and optimal fit reward ---
    # Assign a significant bonus to perfect fits (where hypothetical_remaining is 0).
    # This strongly incentivizes filling bins completely, which directly
    # contributes to maximizing bin utilization and preventing fragmentation
    # by effectively "closing" a bin. The bonus should be large enough to
    # override any non-perfect fit score.
    perfect_fit_mask = hypothetical_remaining == 0
    # The bonus value should be greater than the maximum possible negative score
    # (-max_bin_capacity). A general large float value works here.
    PERFECT_FIT_BONUS = 10000.0  # A sufficiently large bonus

    priority_scores[perfect_fit_mask] += PERFECT_FIT_BONUS

    return priority_scores
```
