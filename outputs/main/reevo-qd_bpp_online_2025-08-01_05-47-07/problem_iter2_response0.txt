```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation extends the Best Fit heuristic (v1) by introducing a
    strategic approach to remaining capacities, aiming to "optimize future bin state
    to minimize overall waste" by being smart about leftover space.

    It prioritizes bins based on the following hierarchy:
    1.  **Perfect Fit**: Highest priority (remaining capacity is 0). This fully utilizes a bin,
        effectively "closing" it and preventing fragmentation.
    2.  **Avoid Small Fragments**: Lowest priority for bins that would be left with a very small,
        non-zero remaining capacity. These are considered "dead space" or hard-to-use fragments,
        which contribute to overall waste by making bins appear partially full but practically unusable.
    3.  **Best Fit for Others**: For all other cases where the item fits (i.e., not a perfect fit
        and not a "small fragment"), it prefers bins that leave a smaller positive remainder.
        This follows the Best Fit principle of packing tightly.

    This heuristic tries to consolidate items efficiently while avoiding the creation of
    small, unusable gaps that contribute to overall waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Define thresholds for remaining capacity types.
    # EPSILON_FOR_ZERO: A very small number to account for floating point inaccuracies
    #                   when checking if a remaining capacity is effectively zero.
    # SMALL_REMAINDER_THRESHOLD: Defines what constitutes a "very small" or "dead" remaining space.
    #                            This value might need tuning based on the typical range of item sizes
    #                            and bin capacity. For normalized items/bins (0 to 1), 0.05 is a
    #                            reasonable starting point, meaning remnants less than 5% of bin cap
    #                            are considered "dead space".
    EPSILON_FOR_ZERO = 1e-9 
    SMALL_REMAINDER_THRESHOLD = 0.05

    # Calculate the remaining capacity if the item were hypothetically placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priority scores for all bins.
    # Bins where the item does not fit will retain a very low priority (-np.inf).
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit.
    # Allow for a very tiny negative due to floating point precision, treating it as 0.
    fitting_bins_mask = potential_remaining_cap >= -EPSILON_FOR_ZERO

    # Extract potential remaining capacities for only the fitting bins.
    fitting_caps_actual = potential_remaining_cap[fitting_bins_mask]

    # Initialize scores for fitting bins using the standard Best Fit approach (negative of remainder).
    # This means smaller positive remainders get higher (less negative) scores.
    fitting_scores = -fitting_caps_actual

    # Apply specific rules for different types of remainders:

    # 1. Perfect Fit (remaining capacity is zero or very close to it)
    perfect_fit_mask = np.isclose(fitting_caps_actual, 0.0, atol=EPSILON_FOR_ZERO)
    # Assign a very high score to perfect fits to ensure they are always chosen first.
    fitting_scores[perfect_fit_mask] = float('inf')

    # 2. Small, Non-Zero Remainder (considered "dead space")
    # This applies to capacities that are greater than zero but below the threshold.
    small_remainder_mask = (fitting_caps_actual > EPSILON_FOR_ZERO) & \
                           (fitting_caps_actual < SMALL_REMAINDER_THRESHOLD)
    # Assign a very low score to discourage leaving such small, potentially unusable gaps.
    fitting_scores[small_remainder_mask] = -float('inf')

    # For all other fitting bins (those with larger, "useful" remaining capacities),
    # the initial Best Fit scoring (`-fitting_caps_actual`) remains,
    # ensuring that among these, smaller remainders are still preferred.

    # Assign the calculated fitting scores back to the main priority_scores array.
    priority_scores[fitting_bins_mask] = fitting_scores

    return priority_scores
```
