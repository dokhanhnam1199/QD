```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns a priority score for each bin, implementing a refined Best-Fit
    strategy that strongly rewards perfect fits to minimize wasted space.

    This heuristic aligns with the reflection by:
    1.  **Strongly rewarding perfect fits**: Bins where the item exactly fills
        the remaining capacity receive an extremely high positive priority score
        (e.g., 1e9). This incentivizes "closing" bins and reduces fragmentation.
    2.  **Prioritizing Best Fit**: For bins where the item fits but does not
        perfectly fill the bin, the heuristic favors the bin that results in
        the smallest positive remaining capacity. This is achieved by assigning
        a score of `-remaining_capacity`, where a smaller positive remainder
        yields a score closer to zero (less negative), making it a higher
        preference when no perfect fit is available.
    3.  **Penalizing non-fits**: Bins where the item does not fit (remaining
        capacity would be negative) are assigned the lowest possible priority
        score (`-np.inf`), ensuring they are never selected.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher preference for selection by argmax.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed.
    # A negative value indicates the item would overflow the bin.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to the lowest possible value.
    # This automatically assigns the lowest priority to bins where the item does not fit.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # --- Step 1: Assign a very high priority to bins that allow a perfect fit ---
    # A perfect fit occurs when hypothetical_remaining is exactly zero.
    perfect_fit_mask = (hypothetical_remaining == 0)

    # Assign a large positive value to perfect fits. This ensures they are
    # always preferred over any non-perfect fit (which will receive non-positive scores).
    perfect_fit_value = 1e9  # A sufficiently large constant value

    priority_scores[perfect_fit_mask] = perfect_fit_value

    # --- Step 2: Assign priorities for non-perfect but valid fits (Best-Fit logic) ---
    # These are bins where the item fits, but leaves some positive capacity.
    # We want to select the bin that minimizes this positive remaining capacity.
    # To do this with argmax (which selects the maximum score), we negate the
    # hypothetical remaining capacity. A smaller positive remainder will result
    # in a larger (closer to zero, less negative) priority score.
    non_perfect_fit_mask = (hypothetical_remaining > 0)

    priority_scores[non_perfect_fit_mask] = -hypothetical_remaining[non_perfect_fit_mask]

    return priority_scores
```
