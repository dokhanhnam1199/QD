```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Worst-Fit strategy by prioritizing bins
    that will have the most remaining capacity after the item is placed.
    The clear objective is to keep bins as "open" and flexible as possible
    by leaving the largest possible space, thus aiming to distribute items
    more widely or save tighter fits for smaller items later.
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a score based on the remaining capacity.
    # To implement Worst Fit, we want to select the bin that results in the
    # *largest* hypothetical_remaining value (loosest fit).
    # A larger positive hypothetical_remaining (e.g., 10) will result in a larger score (e.g., 10).
    # A smaller positive hypothetical_remaining (e.g., 0 for a perfect fit)
    # will result in a smaller score (e.g., 0).
    priority_scores[fits_mask] = hypothetical_remaining[fits_mask]

    return priority_scores
```
