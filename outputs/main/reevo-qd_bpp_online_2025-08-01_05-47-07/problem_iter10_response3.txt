```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation refines the Best Fit heuristic (v1) by explicitly defining
    and applying a strategic hierarchy of priorities, aiming to minimize overall waste
    by being smart about leftover space and consolidating the logic for clarity and
    potential parameter tuning.

    It prioritizes bins based on the following hierarchy (from most desired to least):
    1.  **Perfect Fit**: Highest priority. When placing the item results in exactly zero
        remaining capacity. This fully utilizes a bin, effectively "closing" it and
        preventing fragmentation.
    2.  **Best Fit for Useful Remainder**: For cases where the item fits and leaves
        a "useful" non-zero remaining capacity. Among these, bins that leave a smaller
        positive remainder are preferred (standard Best Fit principle).
    3.  **Avoid Small Fragments**: Lowest effective priority among bins where the item fits.
        This applies to bins that would be left with a very small, non-zero remaining capacity
        (below a defined threshold). These are considered "dead space" or hard-to-use fragments,
        which contribute to overall waste by making bins appear partially full but practically
        unusable for future items.
    4.  **No Fit**: Bins where the item simply cannot fit. These are given the absolute
        lowest priority, making them unselectable.

    This heuristic tries to consolidate items efficiently while strongly discouraging the
    creation of small, unusable gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # --- Configuration Parameters ---
    # EPSILON_FOR_ZERO: A very small number to account for floating-point inaccuracies
    #                   when checking if a remaining capacity is effectively zero or non-negative.
    EPSILON_FOR_ZERO = 1e-9

    # SMALL_REMAINDER_THRESHOLD: Defines what constitutes a "very small" or "dead"
    #                            remaining space. This value is crucial for the heuristic's
    #                            performance and should be tuned based on the typical range
    #                            of item sizes and bin capacity. For normalized items/bins
    #                            (e.g., capacities between 0 and 1), 0.05 (5% of bin capacity)
    #                            is a reasonable starting point.
    SMALL_REMAINDER_THRESHOLD = 0.05

    # --- Priority Score Constants ---
    # These constants define the fixed priority scores for specific states.
    # NO_FIT_SCORE: Priority for bins where the item cannot fit. Set to negative infinity
    #               to ensure they are never chosen if any other option exists.
    NO_FIT_SCORE = -float('inf')

    # SMALL_FRAGMENT_SCORE: Priority for bins that would result in a "small fragment".
    #                       Set to negative infinity to strongly discourage their selection,
    #                       effectively making them as undesirable as non-fitting bins.
    #                       If you want to distinguish them from impossible fits, a large
    #                       negative finite number (e.g., -1e10) could be used.
    SMALL_FRAGMENT_SCORE = -float('inf')

    # PERFECT_FIT_SCORE: Priority for bins that result in a perfect fit. Set to positive
    #                    infinity to ensure they are always chosen over any other option.
    PERFECT_FIT_SCORE = float('inf')

    # --- Heuristic Logic ---

    # Calculate the hypothetical remaining capacity if the item were placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize all bin priorities to the lowest possible (no fit).
    priority_scores = np.full_like(bins_remain_cap, NO_FIT_SCORE, dtype=float)

    # Identify bins where the item can physically fit (remaining capacity is non-negative,
    # accounting for potential floating-point errors).
    can_fit_mask = potential_remaining_cap >= -EPSILON_FOR_ZERO

    # Extract the actual remaining capacities for only the fitting bins.
    fitting_bins_caps = potential_remaining_cap[can_fit_mask]

    # Initialize scores for fitting bins based on the standard Best Fit principle:
    # Smaller positive remainders will result in higher scores (closer to zero or positive).
    # For example, a remainder of 0.1 gets a score of -0.1, while 0.5 gets -0.5.
    fitting_scores = -fitting_bins_caps

    # Apply specific priority adjustments based on the resulting remaining capacity:

    # 1. Prioritize Perfect Fits:
    # If the remaining capacity is very close to zero, it's a perfect fit.
    perfect_fit_mask = np.isclose(fitting_bins_caps, 0.0, atol=EPSILON_FOR_ZERO)
    fitting_scores[perfect_fit_mask] = PERFECT_FIT_SCORE

    # 2. Discourage Small Fragments:
    # If the remaining capacity is positive but below the defined threshold, it's a small fragment.
    small_remainder_mask = (fitting_bins_caps > EPSILON_FOR_ZERO) & \
                           (fitting_bins_caps < SMALL_REMAINDER_THRESHOLD)
    fitting_scores[small_remainder_mask] = SMALL_FRAGMENT_SCORE

    # For all other fitting bins (i.e., those not a perfect fit and not a small fragment),
    # their scores remain based on the initial Best Fit calculation (`-fitting_bins_caps`),
    # which correctly ranks them by preferring tighter fits.

    # Assign the calculated fitting scores back to the main priority_scores array
    # at the positions corresponding to the `can_fit_mask`.
    priority_scores[can_fit_mask] = fitting_scores

    return priority_scores
```
