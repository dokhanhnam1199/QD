```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by explicitly prioritizing
    perfect fits with a significant positive score, ensuring they are chosen
    whenever possible. This aligns with the goal of efficiently closing bins.
    For other valid fits, it reverts to the standard Best-Fit logic
    (smallest remaining capacity). Bins where the item does not fit are
    assigned the lowest possible priority. This strategy aims to consolidate
    items in existing bins and minimize new bin openings by strongly
    favoring efficient use of current bin space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # Identify bins that result in a perfect fit (0 remaining capacity).
    perfect_fits_mask = hypothetical_remaining == 0

    # Assign a very high positive score to perfect fits. This makes them
    # unequivocally the top priority, strongly incentivizing closing bins
    # and minimizing fragmentation.
    # A large constant (e.g., 1000.0) is used to ensure this score is
    # always higher than any score from non-perfect fits (which are <= 0).
    priority_scores[perfect_fits_mask] = 1000.0

    # Identify bins that fit the item but are not perfect fits.
    non_perfect_fits_mask = (hypothetical_remaining > 0) & fits_mask

    # For non-perfect but valid fits, apply the Best-Fit strategy:
    # A smaller positive hypothetical_remaining (tighter fit) results in
    # a larger score (less negative).
    priority_scores[non_perfect_fits_mask] = -hypothetical_remaining[non_perfect_fits_mask]

    return priority_scores
```
