```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by giving a strong preference to perfect fits,
    and for non-perfect fits, it prioritizes tighter fits (Best Fit). This directly
    addresses the reflection's emphasis on prioritizing perfect/tight fits and
    maximizing bin utilization by "closing" bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The total capacity of a single bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits.
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a score based on the remaining capacity.
    # This implements the Best Fit principle: minimizing the remaining capacity
    # leads to a less negative (i.e., higher) score.
    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]

    # Explicitly give a large bonus to perfect fits (where hypothetical_remaining is 0).
    # This ensures that a perfect fit is *always* chosen over any non-perfect fit,
    # regardless of how tight the non-perfect fit is. This strongly prioritizes
    # "closing" a bin and maximizing its utilization.
    perfect_fit_mask = (hypothetical_remaining == 0) & fits_mask
    if np.any(perfect_fit_mask):
        # Add a bonus larger than any possible negative score for non-perfect fits.
        # The maximum score for a non-perfect fit (e.g., hypothetical_remaining=1) is -1.
        # Adding `bin_capacity + 1` ensures a perfect fit score will be positive and dominant.
        priority_scores[perfect_fit_mask] += (bin_capacity + 1)

    return priority_scores
```
