```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic explicitly prioritizes perfect fits by assigning a very high score.
    If no perfect fit is available, it then applies a Best-Fit strategy by prioritizing
    bins that will have the least remaining capacity (tightest fit) after the item is placed.
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Define a high score for perfect fits to ensure they are chosen first.
    # This value must be significantly larger than any score generated by the
    # Best-Fit part of the heuristic (which produces non-positive scores).
    HIGH_PERFECT_FIT_SCORE = 1e9

    # 1. Identify and prioritize perfect fits.
    # A perfect fit occurs when hypothetical_remaining is exactly 0.
    perfect_fits_mask = hypothetical_remaining == 0
    priority_scores[perfect_fits_mask] = HIGH_PERFECT_FIT_SCORE

    # 2. For bins where the item fits but not perfectly, apply Best Fit.
    # This means selecting the bin that results in the *smallest positive*
    # hypothetical_remaining value (tightest fit).
    # Since np.argmax selects the maximum score, we negate the hypothetical_remaining
    # so that smaller positive remaining values result in larger (less negative) scores.
    # We only consider bins where the item fits and is NOT a perfect fit.
    best_fit_mask = hypothetical_remaining > 0
    priority_scores[best_fit_mask] = -hypothetical_remaining[best_fit_mask]

    return priority_scores
```
