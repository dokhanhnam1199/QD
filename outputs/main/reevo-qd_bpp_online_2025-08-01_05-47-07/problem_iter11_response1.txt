```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by explicitly prioritizing perfect fits,
    penalizing the creation of very small, potentially unusable fragments,
    and otherwise using a Best-Fit approach for remaining "useful" capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Define a threshold for what constitutes a "tiny fragment".
    # This value is crucial and depends on the typical scale of item sizes
    # and bin capacities in your problem. For example, if bin capacities are
    # typically 1.0, a threshold of 0.05 means any remaining space less than 5%
    # of a full bin is considered tiny and undesirable.
    TINY_FRAGMENT_THRESHOLD = 0.05

    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # Extract hypothetical remaining capacities for only the bins where the item fits.
    fitting_hypothetical_remaining = hypothetical_remaining[fits_mask]

    # --- Scoring Logic based on reflection ---

    # 1. Prioritize perfect/tight fits:
    #    Case 1: Perfect Fit (hypothetical_remaining == 0)
    #    This is the most desirable outcome as it maximizes space utilization.
    perfect_fit_mask_in_fits = (fitting_hypothetical_remaining == 0)
    priority_scores[fits_mask][perfect_fit_mask_in_fits] = 1000.0 # Assign a distinctively high score

    # 2. Avoiding small fragments:
    #    Case 2: Tiny Fragment (0 < hypothetical_remaining < TINY_FRAGMENT_THRESHOLD)
    #    These are small, potentially unusable fragments that we want to avoid creating.
    tiny_fragment_mask_in_fits = (fitting_hypothetical_remaining > 0) & \
                                 (fitting_hypothetical_remaining < TINY_FRAGMENT_THRESHOLD)
    priority_scores[fits_mask][tiny_fragment_mask_in_fits] = -100.0 # Assign a significant penalty

    # 3. Useful fragments (hypothetical_remaining >= TINY_FRAGMENT_THRESHOLD):
    #    Case 3: Useful Remaining Capacity
    #    For these bins, we still want a relatively tight fit (Best-Fit like), but one
    #    that leaves a large enough space to be potentially useful for future items.
    #    We negate the remaining capacity, so a smaller remaining capacity (e.g., 0.05)
    #    results in a higher score (-0.05) than a larger one (e.g., 0.5 -> -0.5).
    #    These scores will naturally fall between the "perfect fit" score (1000.0)
    #    and the "tiny fragment penalty" score (-100.0).
    useful_fragment_mask_in_fits = (fitting_hypothetical_remaining >= TINY_FRAGMENT_THRESHOLD)
    priority_scores[fits_mask][useful_fragment_mask_in_fits] = \
        -fitting_hypothetical_remaining[useful_fragment_mask_in_fits]

    # Bins that don't fit (not covered by the masks above) remain at -np.inf.

    return priority_scores
```
