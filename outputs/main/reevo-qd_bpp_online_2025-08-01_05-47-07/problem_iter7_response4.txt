```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic explicitly prioritizes perfect fits above all other options.
    If no perfect fit is available, it then applies a Best-Fit strategy,
    prioritizing bins that result in the smallest remaining capacity
    (tightest non-perfect fit).
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create masks for different fitting scenarios:
    # 1. Bins where the item fits perfectly (hypothetical_remaining is exactly 0).
    perfect_fit_mask = (hypothetical_remaining == 0)

    # 2. Bins where the item fits but is not a perfect fit (hypothetical_remaining > 0).
    non_perfect_fit_mask = (hypothetical_remaining > 0)

    # Assign scores based on the prioritization strategy:

    # First priority: Perfect fits. Assign a high, constant score (e.g., 1.0)
    # to ensure these are always chosen over any non-perfect fit.
    priority_scores[perfect_fit_mask] = 1.0

    # Second priority: Best-Fit for non-perfect fits.
    # For these, we want to select the bin that results in the *smallest*
    # hypothetical_remaining value (tightest fit). Since np.argmax selects
    # the maximum score, we negate the hypothetical_remaining.
    # These scores will be negative, ensuring they are always lower than
    # the perfect fit score of 1.0, but still ordered correctly amongst themselves.
    priority_scores[non_perfect_fit_mask] = -hypothetical_remaining[non_perfect_fit_mask]

    return priority_scores
```
