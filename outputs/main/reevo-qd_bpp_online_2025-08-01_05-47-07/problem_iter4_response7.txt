```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit strategy by prioritizing bins
    that will be filled most completely by the item, relative to their current capacity.
    A perfect fit yields the highest possible score (1.0).
    Bins where the item does not fit are assigned the lowest possible priority (-np.inf).

    Args:
        item: Size of item to be added to the bin. Assumed to be positive.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores with a very low value. Bins that don't fit
    # the item will retain this score, ensuring they are not selected.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit.
    # An item must be positive for valid packing. If item is 0, special
    # handling might be needed, but typically item sizes are > 0.
    can_fit_mask = bins_remain_cap >= item

    # Calculate scores only for bins where the item actually fits.
    # The score is defined as the proportion of the bin's current remaining capacity
    # that the item will occupy. This directly measures how "tight" the fit is
    # relative to the available space in the bin.
    # - A perfect fit (item == bins_remain_cap) results in a score of 1.0.
    # - A loose fit (item much smaller than bins_remain_cap) results in a score closer to 0.0.
    # This prioritizes making the most out of the currently available space in a bin.
    
    # Select capacities of only those bins where the item fits
    valid_bins_capacities = bins_remain_cap[can_fit_mask]

    # Calculate the proportion. This division is safe as valid_bins_capacities > 0
    # when item > 0 and item fits.
    # If item is 0, this might lead to 0/0 if bins_remain_cap is 0.
    # Assuming item > 0 as it's a "size" in BPP.
    scores_for_valid_bins = item / valid_bins_capacities

    # Assign the calculated scores to the corresponding bins
    priority_scores[can_fit_mask] = scores_for_valid_bins

    return priority_scores
```
