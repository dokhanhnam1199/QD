```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a First-Fit (FF) strategy. It prioritizes the first
    available bin (lowest index) in the `bins_remain_cap` array into which the
    item fits. This aligns with the idea of resource utilization by attempting
    to fill "earlier" bins first, which can consolidate items and potentially
    lead to fewer open bins in the long run.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed in it.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # Get the indices of the bins where the item fits.
    fitting_indices = np.where(fits_mask)[0]

    if len(fitting_indices) > 0:
        # For First Fit, we want to select the bin with the lowest index among
        # those that fit. To achieve this with `np.argmax`, we assign higher
        # priority scores to bins with lower indices.
        # A simple way is to subtract the bin's index from a sufficiently
        # large base number. This ensures that index 0 gets the highest score,
        # index 1 the next highest, and so on, for all bins where the item fits.
        # The base number must be larger than any possible index difference to maintain
        # correct ordering, and sufficiently large to be above -inf.
        # `len(bins_remain_cap)` serves as a suitable base as it's greater than
        # any valid index (0 to len-1).
        base_priority = len(bins_remain_cap)

        # Assign scores: `base_priority - bin_index`.
        # E.g., for bin_idx = 0, score = base_priority
        # for bin_idx = 1, score = base_priority - 1, etc.
        priority_scores[fitting_indices] = base_priority - fitting_indices

    return priority_scores
```
