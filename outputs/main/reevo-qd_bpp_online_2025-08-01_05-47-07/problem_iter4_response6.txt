```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation refines the strategic Best Fit approach by using distinct,
    numerically bounded score tiers. It provides robust prioritization without
    relying on `inf` or `-inf`, which, while generally safe, can sometimes be less
    transparent in score ranges for debugging or analysis.

    It prioritizes bins based on the following hierarchy and scoring:
    1.  **Perfect Fit**: Assigns a very high positive constant score. This ensures
        perfect fits are always chosen first.
    2.  **Good Fit (Best Fit Principle)**: For bins where the item fits and leaves
        a "useful" remaining capacity (above a small fragment threshold), scores are
        assigned based on the standard Best Fit principle: `BIN_CAPACITY - potential_remaining_cap`.
        This rewards tighter fits with higher scores within this tier.
    3.  **Small Fragment (Avoid)**: For bins that would be left with a very small,
        non-zero remaining capacity (considered "dead space"), a distinctly low
        negative score is assigned. Within this tier, a slightly larger small fragment
        is marginally preferred over an extremely tiny one, ensuring consistency with
        the general Best Fit logic, but the entire tier is heavily penalized.
    4.  **No Fit**: Assigns a very low negative constant score, ensuring these bins
        are never chosen unless absolutely no other option exists (implying a new bin
        should be opened by external logic).

    The `BIN_CAPACITY` is assumed to be 1.0, typical for normalized bin packing problems.
    If items/bins are not normalized to [0, 1], this value might need adjustment.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Define thresholds and scoring constants.
    # EPSILON_FOR_ZERO: A very small number for floating point comparisons to treat
    #                   values near zero as zero.
    # SMALL_REMAINDER_THRESHOLD: Defines what constitutes a "very small" or "dead"
    #                            remaining space. Tuning this value is crucial for
    #                            heuristic performance based on typical item sizes.
    # BIN_CAPACITY: Assumed total capacity of a bin (e.g., 1.0 for normalized problems).
    #               Used to scale scores for 'Good Fit' and establish tier separation.
    
    EPSILON_FOR_ZERO = 1e-9 
    SMALL_REMAINDER_THRESHOLD = 0.05
    BIN_CAPACITY = 1.0 # Default assumption for normalized BPP

    # --- Score Tiers ---
    # These constants define the distinct priority levels.
    # They are chosen to be sufficiently separated such that scores from one tier
    # cannot overlap with scores from another (e.g., a 'Good Fit' score will never
    # be as high as 'Perfect Fit', or as low as 'Small Fragment').
    SCORE_PERFECT_FIT_BASE = 1000.0  # Highest priority tier base score
    SCORE_NO_FIT = -1000.0         # Lowest priority for non-fitting bins
    # For 'Good Fit' and 'Small Fragment' tiers, scores are relative to BIN_CAPACITY
    # and potential_remaining_cap to maintain Best Fit behavior within their tiers.

    # Calculate the remaining capacity if the item were hypothetically placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priority scores for all bins to the 'No Fit' score.
    priority_scores = np.full_like(bins_remain_cap, SCORE_NO_FIT, dtype=float)

    # Identify bins where the item can fit.
    # Allow for a very tiny negative due to floating point precision, treating it as zero.
    fitting_bins_mask = potential_remaining_cap >= -EPSILON_FOR_ZERO

    # If no bins fit, return the initialized scores (all SCORE_NO_FIT).
    if not np.any(fitting_bins_mask):
        return priority_scores

    # Extract potential remaining capacities for only the fitting bins.
    fitting_caps_actual = potential_remaining_cap[fitting_bins_mask]

    # Initialize a temporary array for scores of fitting bins.
    scores_for_fitting_bins = np.zeros_like(fitting_caps_actual)

    # Apply specific rules for different types of remainders to assign scores:

    # 1. Perfect Fit (remaining capacity is zero or very close to it)
    perfect_fit_mask = np.isclose(fitting_caps_actual, 0.0, atol=EPSILON_FOR_ZERO)
    scores_for_fitting_bins[perfect_fit_mask] = SCORE_PERFECT_FIT_BASE

    # 2. Small, Non-Zero Remainder (considered "dead space" or hard-to-use fragments)
    # These are capacities greater than zero but below the threshold.
    small_remainder_mask = (fitting_caps_actual > EPSILON_FOR_ZERO) & \
                           (fitting_caps_actual < SMALL_REMAINDER_THRESHOLD)
    
    # Assign a low negative score to discourage. The score is structured to be:
    # - A base value that puts it in the low priority tier (e.g., -10.0 or -2 * BIN_CAPACITY)
    # - Minus the actual remainder. This means a smaller `fitting_caps_actual` (e.g., 0.01)
    #   results in a more negative overall score (e.g., -10.01), thus preferring
    #   the slightly larger small fragments (e.g., -10.04 for remainder 0.04) if forced to choose.
    scores_for_fitting_bins[small_remainder_mask] = -2.0 * BIN_CAPACITY - fitting_caps_actual[small_remainder_mask]

    # 3. Good Fit (Useful Remainder)
    # This applies to all other fitting bins that are not perfect fits and not small fragments.
    # Their remaining capacity is >= SMALL_REMAINDER_THRESHOLD.
    good_fit_mask = ~perfect_fit_mask & ~small_remainder_mask
    
    # Standard Best Fit scoring: smaller remainder yields a higher score.
    # Scores in this tier will range from `BIN_CAPACITY - SMALL_REMAINDER_THRESHOLD`
    # down to a value just above 0 (e.g., if BIN_CAPACITY=1.0, 0.95 down to 0).
    scores_for_fitting_bins[good_fit_mask] = BIN_CAPACITY - fitting_caps_actual[good_fit_mask]

    # Assign the calculated fitting scores back to the main priority_scores array.
    priority_scores[fitting_bins_mask] = scores_for_fitting_bins

    return priority_scores
```
