```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit-like strategy.

    This function prioritizes bins that will have the smallest remaining capacity
    after the item is placed, aiming for the 'snug fit'. A perfect fit (0
    remaining capacity) receives a very high priority score. For other bins
    where the item fits but leaves some space, the priority is inversely
    proportional to the remaining space (smaller space implies higher priority).
    Bins where the item does not fit receive a priority score of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Step 1: Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return all zeros.
    if not np.any(can_fit_mask):
        return scores

    # Calculate the remaining capacity if the item were placed in suitable bins.
    # This array will only contain values for bins where can_fit_mask is True.
    remaining_after_placement_for_fit_bins = bins_remain_cap[can_fit_mask] - item

    # Step 2: Identify perfect fits (remaining capacity is 0).
    # This mask refers to the indices within the 'can_fit_mask' subset.
    perfect_fit_in_subset_mask = (remaining_after_placement_for_fit_bins == 0)

    # Assign a very high score for perfect fits to ensure they are chosen first.
    # Using a large constant like 1e10 ensures it's higher than any inverse value.
    LARGE_PERFECT_FIT_SCORE = 1e10
    
    # Apply the perfect fit score to the corresponding bins in the original 'scores' array.
    # We use can_fit_mask to index the original array, and then perfect_fit_in_subset_mask
    # to select the specific ones that are perfect fits from that subset.
    original_indices_of_perfect_fits = np.where(can_fit_mask)[0][perfect_fit_in_subset_mask]
    scores[original_indices_of_perfect_fits] = LARGE_PERFECT_FIT_SCORE

    # Step 3: Handle non-perfect fits (item fits, but remaining capacity > 0).
    # This mask identifies bins in the original array that fit the item AND have space remaining.
    non_perfect_fit_mask = (bins_remain_cap > item) # This implies can_fit_mask is also true
    
    # Only calculate scores for these bins.
    remaining_non_perfect = bins_remain_cap[non_perfect_fit_mask] - item
    
    # Assign score based on the inverse of remaining space.
    # A small epsilon is added to the denominator to prevent division by zero for
    # very tiny positive floating-point remainders, and to ensure finite scores.
    # This makes smaller remaining spaces result in higher priority scores.
    EPSILON = 1e-9 
    
    scores[non_perfect_fit_mask] = 1.0 / (remaining_non_perfect + EPSILON)

    return scores
```
