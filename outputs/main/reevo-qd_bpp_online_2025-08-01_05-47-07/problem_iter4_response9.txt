```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation enhances the Best Fit heuristic (v1) by introducing a
    strategic composite scoring for bins that are neither perfectly filled nor
    result in small, unusable fragments. The core strategy is to not only minimize
    the resulting remaining capacity but also to actively "top off" bins that
    are already partially utilized.

    It prioritizes bins based on the following hierarchy:
    1.  **Perfect Fit**: Highest priority (remaining capacity is 0). This fully utilizes a bin,
        effectively "closing" it and preventing fragmentation.
    2.  **Avoid Small Fragments**: Lowest priority for bins that would be left with a very small,
        non-zero remaining capacity. These are considered "dead space" or hard-to-use fragments,
        which contribute to overall waste by making bins appear partially full but practically unusable.
    3.  **Composite Score for Others**: For all other cases where the item fits (i.e., not a perfect fit
        and not a "small fragment"), it uses a weighted composite score:
        a.  **Best Fit Component**: Strongly prefers bins that leave a smaller positive remainder.
            This is the traditional Best Fit approach of packing tightly.
        b.  **Fullness Preference Component**: Slightly prefers bins that were already more full
            before the item was placed (i.e., had a smaller initial remaining capacity). This
            encourages consolidating items into existing, partially used bins before resorting
            to less filled ones, promoting a more compact overall solution.

    This heuristic aims to consolidate items efficiently, prevent the creation of small,
    unusable gaps, and strategically utilize bins that are already partially filled to
    minimize the number of bins used and overall waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.
                         It is assumed that these capacities are relative to a consistent
                         bin capacity (e.g., all items and bins normalized to a 0-1 scale
                         where bin capacity is 1.0).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Define thresholds for remaining capacity types.
    # EPSILON_FOR_ZERO: A very small number to account for floating point inaccuracies
    #                   when checking if a remaining capacity is effectively zero.
    # SMALL_REMAINDER_THRESHOLD: Defines what constitutes a "very small" or "dead" remaining space.
    #                            This value might need tuning based on the typical range of item sizes
    #                            and bin capacity. For normalized items/bins (0 to 1), 0.05 is a
    #                            reasonable starting point.
    EPSILON_FOR_ZERO = 1e-9
    SMALL_REMAINDER_THRESHOLD = 0.05

    # Weights for the composite score for 'other' bins.
    # BEST_FIT_WEIGHT: Dominant weight for minimizing the new remaining capacity.
    # FULLNESS_PREFERENCE_WEIGHT: Smaller weight to give a slight preference to bins
    #                             that were already more full (less remaining capacity initially).
    BEST_FIT_WEIGHT = 1.0
    FULLNESS_PREFERENCE_WEIGHT = 0.1  # A small positive weight (e.g., 0.05 to 0.2)

    # Calculate the remaining capacity if the item were hypothetically placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priority scores for all bins.
    # Bins where the item does not fit will retain a very low priority (-np.inf).
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit.
    # Allow for a very tiny negative due to floating point precision, treating it as 0.
    fitting_bins_mask = potential_remaining_cap >= -EPSILON_FOR_ZERO

    # Extract relevant capacities for only the fitting bins.
    fitting_caps_original = bins_remain_cap[fitting_bins_mask]    # Original remaining capacity
    fitting_caps_potential = potential_remaining_cap[fitting_bins_mask] # Potential new remaining capacity

    # Calculate initial scores for fitting bins using the composite strategy.
    # The term (1.0 - fitting_caps_original) assumes a bin capacity of 1.0
    # and represents the 'used' capacity of the bin *before* placing the item.
    fitting_scores = (-BEST_FIT_WEIGHT * fitting_caps_potential +
                      FULLNESS_PREFERENCE_WEIGHT * (1.0 - fitting_caps_original))

    # Apply specific rules for different types of remainders, overriding the composite score:

    # 1. Perfect Fit (remaining capacity is zero or very close to it)
    perfect_fit_mask = np.isclose(fitting_caps_potential, 0.0, atol=EPSILON_FOR_ZERO)
    # Assign a very high score to perfect fits to ensure they are always chosen first.
    fitting_scores[perfect_fit_mask] = float('inf')

    # 2. Small, Non-Zero Remainder (considered "dead space")
    # This applies to capacities that are greater than zero but below the threshold.
    small_remainder_mask = (fitting_caps_potential > EPSILON_FOR_ZERO) & \
                           (fitting_caps_potential < SMALL_REMAINDER_THRESHOLD)
    # Assign a very low score to discourage leaving such small, potentially unusable gaps.
    # This must be lower than any possible valid composite score.
    fitting_scores[small_remainder_mask] = -float('inf')

    # Assign the calculated fitting scores back to the main priority_scores array.
    priority_scores[fitting_bins_mask] = fitting_scores

    return priority_scores
```
