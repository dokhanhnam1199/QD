```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on a Worst Fit approach.

    The "Worst Fit" heuristic places an item into the bin that has the largest
    remaining capacity but is still large enough to hold the item. This strategy
    aims to keep bins from getting too full too quickly, potentially saving larger
    bins for larger future items, or distributing items more evenly across bins.
    This aligns with the 'simpler, direct objectives' principle by directly
    maximizing the remaining space.

    For this priority function:
    - Bins where the item *cannot* fit receive a very low (negative infinity) priority.
    - Bins where the item *can* fit receive a priority score equal to the remaining
      capacity after placing the item. This way, a larger remaining capacity
      (which is desired for Worst Fit) results in a higher priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities for all bins to a very low value (negative infinity).
    # This ensures that bins where the item does not fit will never be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity in bins where the item can fit.
    # For Worst Fit, we want to maximize this value (bins_remain_cap - item).
    # This value directly serves as the priority score.
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign the calculated priorities to the bins that can fit the item.
    # Higher remaining_after_placement leads to higher priority.
    priorities[can_fit_mask] = remaining_after_placement

    return priorities
```
