```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic explicitly defines tiers of preference to "Prioritize tight fits,
    avoid small fragments, and consolidate items in existing bins." It uses
    vectorized NumPy operations for efficiency.

    The priority tiers (highest to lowest):
    1. Perfect Fit: The item exactly fills a bin, leaving 0 remaining capacity.
    2. Best Fit (non-fragment): The item fits, leaving a 'useful' amount of remaining
       capacity (above a small fragment threshold). Tighter fits within this tier are preferred.
    3. Small Fragment Fit: The item fits, but would leave a very small, potentially
       unusable fragment. These are penalized heavily. Within this tier,
       less wasteful fragments are slightly preferred (i.e., smaller fragments).

    Consolidation Bonus: As a tie-breaker within tiers (except perfect fit), bins that
    are already more full (have less original remaining capacity) are slightly preferred.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # If no bin fits, all scores remain -inf. The calling logic should handle opening a new bin.
    if not np.any(fits_mask):
        return priority_scores

    # --- Heuristic Parameters ---
    # These parameters are tuned for typical normalized Bin Packing Problem setups,
    # where bin capacities and item sizes are often normalized to a range like [0, 1].
    # If your problem uses a different scale (e.g., bin capacity 100), these values
    # might need to be adjusted proportionally.
    ASSUMED_BIN_CAPACITY = 1.0 # Common assumption for normalized BPP.

    # Fragments smaller than this threshold (relative to ASSUMED_BIN_CAPACITY) are penalized.
    SMALL_FRAGMENT_THRESHOLD = ASSUMED_BIN_CAPACITY * 0.05 # E.g., 5% of bin capacity

    # Tier constants: ensure clear numerical separation between priority tiers.
    # The actual values are less important than their relative order and the gaps.
    # A perfect fit receives the highest base score.
    TIER_PERFECT_FIT_BASE = 2.0 * ASSUMED_BIN_CAPACITY
    # Non-fragment fits get a lower base score than perfect fits, but higher than small fragments.
    TIER_NON_FRAGMENT_BASE = 1.0 * ASSUMED_BIN_CAPACITY
    # Small fragment fits get the lowest base score among fitting options.
    TIER_SMALL_FRAGMENT_BASE = 0.0

    # Consolidation bonus: a very small value added to prioritize fuller bins within a tier.
    # This bonus must be significantly smaller than the smallest tier difference to avoid
    # crossing priority tiers.
    CONSOLIDATION_BONUS_MULTIPLIER = 1e-6

    # Extract relevant data for fitting bins using the mask
    h_rem_fitting = hypothetical_remaining[fits_mask]
    original_rem_fitting = bins_remain_cap[fits_mask]

    # Initialize scores for fitting bins to zeros, which will be overwritten based on tier
    scores_for_fitting = np.zeros_like(h_rem_fitting)

    # --- Identify bins for each tier using masks ---
    perfect_fit_mask = (h_rem_fitting == 0)
    small_fragment_mask = (h_rem_fitting > 0) & (h_rem_fitting <= SMALL_FRAGMENT_THRESHOLD)
    non_fragment_mask = (h_rem_fitting > SMALL_FRAGMENT_THRESHOLD)

    # --- Apply Tier Scores ---

    # Tier 1: Perfect Fit (Highest Priority)
    # They receive the highest fixed score. No further best-fit or consolidation needed.
    scores_for_fitting[perfect_fit_mask] = TIER_PERFECT_FIT_BASE

    # Tier 3: Small Fragment Fit (Lowest Priority among fitting options)
    # These bins receive the lowest base score. Within this tier, a slightly smaller fragment
    # (i.e., `h_rem_fitting` closer to 0) results in a slightly higher `(TIER_SMALL_FRAGMENT_BASE - h_rem_fitting)` score,
    # meaning the "least bad" small fragment is preferred if no better option exists.
    scores_for_fitting[small_fragment_mask] = TIER_SMALL_FRAGMENT_BASE - h_rem_fitting[small_fragment_mask]

    # Tier 2: Non-Small-Fragment Fit (Best Fit style)
    # These bins receive a mid-tier base score. Prioritize tighter fits within this tier:
    # A smaller `h_rem_fitting` (closer to 0) yields a higher `(TIER_NON_FRAGMENT_BASE - h_rem_fitting)` score.
    scores_for_fitting[non_fragment_mask] = TIER_NON_FRAGMENT_BASE - h_rem_fitting[non_fragment_mask]

    # --- Apply Consolidation Bonus (as a tie-breaker for non-perfect fits) ---
    # This bonus encourages using bins that are already more full.
    # `(ASSUMED_BIN_CAPACITY - original_rem_fitting)` calculates the space already filled.
    # A larger filled space (smaller `original_rem_fitting`) results in a larger bonus.
    # This is applied to all fitting bins EXCEPT perfect fits, as perfect fits are already supreme.
    scores_for_fitting[~perfect_fit_mask] += (
        ASSUMED_BIN_CAPACITY - original_rem_fitting[~perfect_fit_mask]
    ) * CONSOLIDATION_BONUS_MULTIPLIER

    # Assign the calculated scores back to the main priority_scores array
    # only for the bins where the item fits.
    priority_scores[fits_mask] = scores_for_fitting

    return priority_scores
```
