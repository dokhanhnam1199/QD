```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy based on the prior reflection
    to consider 'future state' and 'reward full bin utilization'.
    It prioritizes bins based on a composite score:
    1.  **Primary Criterion (Best Fit):** Bins that result in the tightest fit
        (least remaining capacity) after the item is placed. A perfect fit
        (0 remaining capacity) receives the highest score. This minimizes wasted space.
    2.  **Secondary Criterion (Tie-Breaker - Rewarding Full Utilization):**
        Among bins that offer the exact same primary (tightest) fit, it prefers
        bins that were already more full (i.e., had less remaining capacity before
        the item was placed). This encourages 'finishing off' bins and consolidates
        items, avoiding many partially filled bins.

    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits.
    fits_mask = hypothetical_remaining >= 0

    # Define a small epsilon for tie-breaking. This value ensures that the
    # secondary criterion only applies when the primary criterion scores are
    # exactly equal (or extremely close due to floating point inaccuracies
    # that are not considered 'meaningful' differences).
    # Choose a value sufficiently small relative to the expected precision
    # of 'hypothetical_remaining' differences. For general floats, 1e-9 is a reasonable default.
    EPSILON = 1e-9

    # For bins where the item fits, calculate the composite score.
    # The primary score aims to maximize -(hypothetical_remaining)
    # (i.e., minimize hypothetical_remaining for tightest fit).
    primary_score = -hypothetical_remaining[fits_mask]

    # The secondary score aims to maximize -(bins_remain_cap)
    # (i.e., minimize original bins_remain_cap for more full bins).
    # This term is scaled by EPSILON to ensure it only acts as a tie-breaker.
    secondary_score = -bins_remain_cap[fits_mask] * EPSILON

    # Combine scores. The primary_score dominates unless it's an exact tie.
    priority_scores[fits_mask] = primary_score + secondary_score

    return priority_scores
```
