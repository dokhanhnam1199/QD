```python
import numpy as np
import sys

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This strategy combines the principles of:
    1.  **Best Fit (Primary Objective):** Prioritize bins that result in the smallest
        positive remaining capacity after the item is placed. This aims to minimize
        wasted space within bins and encourages efficient packing.
    2.  **Perfect Fit Bonus (Strong Secondary Bias):** Apply a significant positive
        bonus to bins that would result in a *perfect fit* (zero remaining capacity).
        This strongly encourages completing (closing off) bins.
    3.  **Positional Bias (Weak Tertiary Bias/Tie-breaker):** For bins with very
        similar primary scores (especially when not a perfect fit), prefer bins
        with lower indices (i.e., older or more "settled" bins). This helps in
        consistently consolidating items into existing bins before opening new ones.

    Bins where the item cannot physically fit are assigned the absolute lowest
    possible priority score to ensure they are never selected.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    num_bins = len(bins_remain_cap)
    
    # Initialize all priorities to a very low value. Bins that cannot fit the item
    # will retain this value, ensuring they are not chosen.
    priorities = np.full_like(bins_remain_cap, -sys.float_info.max, dtype=float)

    # Identify which bins can accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return the initialized priorities. The calling
    # algorithm should then ideally open a new bin.
    if not np.any(can_fit_mask):
        return priorities

    # --- Step 1: Calculate Remaining Capacity for Fitting Bins ---
    # These are the capacities if the item were placed in each fitting bin.
    # A smaller value indicates a better Best Fit.
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # --- Step 2: Primary Best Fit Score ---
    # The base score for Best Fit is the negative of the remaining capacity.
    # This means a perfect fit (0 remaining) gets a score of 0, 0.1 remaining gets -0.1, etc.
    # Higher score means better fit (less remaining space).
    best_fit_scores = -remaining_after_placement

    # --- Step 3: Perfect Fit Bonus (Strong Secondary Bias) ---
    # Give a significant positive bonus to bins that result in a perfect fit.
    # Use a small epsilon for floating point comparison to account for precision issues.
    PERFECT_FIT_EPSILON = 1e-9  # Tolerance for "zero" remaining capacity
    is_perfect_fit = np.isclose(remaining_after_placement, 0.0, atol=PERFECT_FIT_EPSILON)
    
    # The bonus value should be large enough to make a perfect fit strongly preferred
    # over any non-perfect fit, even if the non-perfect fit is very close to zero
    # or has a favorable positional bias.
    PERFECT_FIT_BONUS = 100.0 
    best_fit_scores[is_perfect_fit] += PERFECT_FIT_BONUS
    
    # --- Step 4: Positional Bias (Weak Tertiary Bias) ---
    # Add a small positive bias for bins with lower indices (older bins).
    # This acts as a tie-breaker or a subtle preference to fill existing bins.
    # The alpha value must be small enough not to override significant differences
    # in best_fit_scores (especially after the perfect fit bonus).
    POSITIONAL_BIAS_ALPHA = 0.001 
    
    # Get the actual indices of the bins that can fit the item.
    fitting_bin_indices = np.where(can_fit_mask)[0]
    
    # Calculate the bias: `(num_bins - 1 - bin_index)` ensures that bin 0 gets
    # the largest bias and the last bin (num_bins - 1) gets 0 bias.
    positional_bias = POSITIONAL_BIAS_ALPHA * (num_bins - 1 - fitting_bin_indices)

    # --- Step 5: Combine Scores and Update Priorities ---
    # Apply the combined score (Best Fit + Perfect Fit Bonus + Positional Bias)
    # only to the bins that can actually fit the item.
    priorities[can_fit_mask] = best_fit_scores + positional_bias

    return priorities
```
