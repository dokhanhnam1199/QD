```python
import numpy as np

# Assume a standard bin size for the Bin Packing Problem.
# In many contexts, items and bin capacities are normalized, so 1.0 is a common default.
# If specific problem constraints dictate a different size (e.g., integer capacities),
# this constant should be adjusted accordingly or passed as an argument.
BIN_SIZE = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.

    This heuristic implements a strong preference for placing items into existing
    (partially-filled) bins before opening new ones. It does this by applying a
    substantial bonus to the priority scores of non-empty bins. Within both categories
    (non-empty and empty bins), the Best-Fit strategy is applied, prioritizing the
    tightest fit (i.e., smallest remaining capacity after placement).

    The primary goal is to consolidate items into already utilized bins, thereby
    minimizing the total number of bins used, and only resorting to opening a new
    bin if no existing bin can accommodate the item or if such a strong preference
    is not overridden by other factors.

    Bins where the item does not fit are assigned the lowest possible priority (-inf).

    Args:
        item: Size of the item to be added to a bin.
        bins_remain_cap: NumPy array of remaining capacities for each bin.
                         Assumes `BIN_SIZE` (defaulting to 1.0) is the full
                         capacity of an empty bin for identification purposes.

    Return:
        NumPy array of the same size as `bins_remain_cap`, containing the
        priority score for each bin. The bin with the highest score is preferred.
    """
    # Initialize priority scores to negative infinity. Bins where the item
    # does not fit will retain this score, ensuring they are never selected.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate the hypothetical remaining capacity for each bin if the item were placed.
    hypothetical_remaining = bins_remain_cap - item

    # Identify bins where the item actually fits (i.e., hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # Calculate the base Best-Fit score for all bins where the item fits.
    # A smaller hypothetical remaining capacity (tighter fit, less waste)
    # results in a higher (less negative) base priority score.
    base_fit_scores = -hypothetical_remaining[fits_mask]

    # Apply the base Best-Fit scores to the bins that fit the item.
    priority_scores[fits_mask] = base_fit_scores

    # Define a small epsilon for robust floating-point comparisons to identify empty bins.
    EPSILON = 1e-9

    # Determine which of the fitting bins are currently empty or non-empty.
    is_empty_bin = np.isclose(bins_remain_cap, BIN_SIZE, atol=EPSILON)
    is_non_empty_bin = ~is_empty_bin

    # Define a substantial bonus for non-empty bins.
    # This bonus is designed to be larger than the entire possible range of base_fit_scores
    # (which is [ -BIN_SIZE, 0 ] for items fitting within BIN_SIZE).
    # This guarantees that any fitting non-empty bin will have a higher priority score
    # than any fitting empty bin, effectively prioritizing existing bins.
    LARGE_BONUS_FOR_NON_EMPTY = BIN_SIZE + EPSILON

    # Apply the large bonus to all non-empty bins that can fit the item.
    # The `&` operator combines the `fits_mask` and `is_non_empty_bin` masks.
    non_empty_fitting_mask = fits_mask & is_non_empty_bin
    priority_scores[non_empty_fitting_mask] += LARGE_BONUS_FOR_NON_EMPTY

    return priority_scores
```
