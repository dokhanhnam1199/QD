```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by prioritizing perfect fits
    and then breaking ties (for equally tight fits) by favoring bins that are
    already more full. This aims to reward fuller bin utilization and avoid
    arbitrary tie-breaking outcomes.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a score based on two criteria:
    # 1. Primary Criterion (Dominant): Tightness of fit.
    #    We want the smallest hypothetical_remaining (tightest fit).
    #    Since np.argmax selects the maximum score, we negate this value.
    #    A perfect fit (0 remaining) gets a score of 0. A tight fit (e.g., 0.1 remaining)
    #    gets -0.1. A looser fit (e.g., 0.5 remaining) gets -0.5.
    primary_score = -hypothetical_remaining[fits_mask]

    # 2. Secondary Criterion (Tie-breaker): Prioritize bins that are already more full.
    #    If multiple bins offer the exact same primary fit (e.g., two perfect fits,
    #    or two bins leaving the same minimal remainder), we prefer the bin that
    #    currently has less remaining capacity (i.e., is more full). This helps
    #    to close bins faster and consolidate items.
    #    To prioritize smaller bins_remain_cap, we negate it.
    secondary_score = -bins_remain_cap[fits_mask]

    # Combine scores. The constant K must be large enough to ensure that
    # primary_score differences always outweigh secondary_score differences.
    # Assuming item and bin capacities are normalized (e.g., 0 to 1),
    # secondary_score will typically be between -1 and 0. Primary_score differences
    # can be very small (e.g., 0.001). We need K * (min_primary_diff) > max_secondary_score_range.
    # A value like 10000.0 should be sufficient for typical floating point ranges.
    K = 10000.0

    priority_scores[fits_mask] = primary_score * K + secondary_score

    return priority_scores
```
