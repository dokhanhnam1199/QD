```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit-like strategy by prioritizing bins
    that will have the least remaining capacity (tightest fit) after the item is placed.
    Bins where the item does not fit are assigned the lowest possible priority.

    This improved version leverages `np.where` for more concise and explicit
    conditional assignment of priority scores, clearly separating the logic for
    bins where the item fits versus where it doesn't. It reinforces the 'minimal
    waste' objective by giving higher scores to bins that result in smaller
    remaining capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were hypothetically placed.
    hypothetical_remaining = bins_remain_cap - item

    # Assign priority scores using np.where for clear conditional logic:
    # - If the item fits (hypothetical_remaining is non-negative), the score is
    #   the negative of the hypothetical remaining capacity. This means smaller
    #   remaining capacities (tighter fits, less "waste") result in higher
    #   (less negative, closer to zero) priority scores, aligning with Best Fit.
    # - If the item does not fit (hypothetical_remaining is negative), assign
    #   a very low priority (-np.inf) to ensure these bins are never selected.
    priority_scores = np.where(
        hypothetical_remaining >= 0,
        -hypothetical_remaining,
        -np.inf
    )

    return priority_scores
```
