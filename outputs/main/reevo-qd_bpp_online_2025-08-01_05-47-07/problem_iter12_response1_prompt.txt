{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This heuristic refines the Best-Fit strategy by giving an overwhelmingly\n    high priority to perfect fits, ensuring they are always selected first.\n    For non-perfect fits, it falls back to a tightest-fit (Best-Fit) strategy.\n    This explicitly rewards full bin utilization and minimizes wasted space,\n    while addressing \"arbitrary or poor quality outcomes\" by making the\n    optimal perfect fit choice numerically distinct and highly preferred.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin if the item were placed in it.\n    # A negative value indicates the item does not fit.\n    hypothetical_remaining = bins_remain_cap - item\n\n    # Initialize priority scores for all bins to a very low value (-infinity).\n    # This ensures that bins where the item does not fit will never be selected.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n\n    # Create a boolean mask for bins where the item actually fits (i.e.,\n    # hypothetical_remaining is non-negative).\n    fits_mask = hypothetical_remaining >= 0\n\n    # For bins where the item fits, assign a score based on the remaining capacity.\n    # To implement a Best-Fit-like strategy, we want to select the bin that results\n    # in the *smallest* hypothetical_remaining value (tightest fit).\n    # Since np.argmax selects the maximum score, we negate the hypothetical_remaining.\n    # A smaller positive hypothetical_remaining (e.g., 0.01) will result in a\n    # larger score (e.g., -0.01).\n    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]\n\n    # **Improvement for v2: Explicitly boost perfect fits.**\n    # This directly addresses \"rewarding full bin utilization\" by making\n    # a perfect fit (hypothetical_remaining == 0) unequivocally the highest priority.\n    # While v1 already made 0 the highest possible score for fitting bins,\n    # this makes its numerical priority significantly higher than any non-zero tight fit,\n    # reinforcing its optimality and avoiding any \"arbitrary\" tie-breaking if floating point\n    # precision were to make a very small positive remnant score equal to a perfect fit score\n    # (though unlikely with standard floats, it makes the intent clear and robust).\n    perfect_fit_mask = (hypothetical_remaining == 0)\n\n    # Determine a bonus value that is guaranteed to be larger than any possible\n    # negative score derived from -hypothetical_remaining.\n    # The maximum possible value for hypothetical_remaining (when fitting)\n    # would be the original bin capacity (if item is very small).\n    # So, a bonus slightly larger than the maximum bin capacity ensures this.\n    if bins_remain_cap.size > 0:\n        PERFECT_FIT_BONUS = np.max(bins_remain_cap) + 1.0\n    else:\n        # Fallback for empty bins_remain_cap array (though it should not happen in typical BPP)\n        PERFECT_FIT_BONUS = 1000.0 \n    \n    priority_scores[perfect_fit_mask] = PERFECT_FIT_BONUS\n\n    return priority_scores\n\n[Reflection]\nLeverage all available data. Prioritize optimal fits (e.g., perfect matches) and minimize wasted bin space.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}