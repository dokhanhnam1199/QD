```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit strategy with a tie-breaking rule.
    It prioritizes bins that will have the least remaining capacity (tightest fit).
    In case of a tie in remaining capacity, it prioritizes bins with a smaller
    index (i.e., "older" or "earlier-opened" bins), encouraging consolidation
    into existing bins and potentially "closing" them sooner.
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a base score based on the remaining capacity.
    # To implement Best Fit, we want to select the bin that results in the
    # *smallest* hypothetical_remaining value (tightest fit).
    # Since np.argmax selects the maximum score, we negate the hypothetical_remaining.
    # A smaller positive hypothetical_remaining (e.g., 0 for a perfect fit)
    # will result in a larger score (e.g., 0). A larger positive
    # hypothetical_remaining (e.g., 10) will result in a smaller score (e.g., -10).
    base_scores = -hypothetical_remaining[fits_mask]

    # Add a small tie-breaking term to prioritize "older" bins (smaller indices)
    # in case of identical base_scores. This aims to consolidate items into
    # existing bins more efficiently, aligning with the objective of minimizing
    # the number of bins.
    # EPSILON should be small enough not to alter the order of bins with different
    # base scores, but large enough to effectively break ties in floating-point comparisons.
    # For typical item sizes and bin capacities, a value like 1e-9 or 1e-12 is often suitable.
    EPSILON = 1e-9 

    # Get the original indices of bins that fit the item
    indices_of_fitting_bins = np.where(fits_mask)[0]
    
    # The tie-breaking term subtracts a small value proportional to the bin index.
    # This means a smaller index (older bin) will result in a larger (less negative)
    # score, thus being prioritized by argmax.
    tie_breaking_term = -indices_of_fitting_bins * EPSILON

    # Combine base scores with the tie-breaking term
    priority_scores[fits_mask] = base_scores + tie_breaking_term

    return priority_scores
```
