```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation strategically manages remaining capacity to minimize overall waste.
    It prioritizes bins based on a hierarchical approach:
    1. Perfect Fit: Highest priority (remaining capacity is 0).
    2. Best Fit (for useful remainders): Prefers bins that leave a smaller, useful positive remainder.
    3. Avoid Small Fragments: Lowest priority for bins that would be left with a very small,
       non-zero remaining capacity, considering them "dead space".
    Bins where the item does not fit receive the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Define thresholds. These values might need tuning based on the specific problem
    # (e.g., typical item sizes relative to bin capacity).
    EPSILON_FOR_ZERO = 1e-9  # Used for floating point comparisons to effectively check for zero.
    SMALL_REMAINDER_THRESHOLD = 0.05 # Defines what constitutes a "small", undesirable fragment.
                                     # For items/bins normalized between 0 and 1, 0.05 means
                                     # remnants less than 5% of bin capacity are "dead space".

    # Calculate the remaining capacity if the item were hypothetically placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priority scores for all bins to negative infinity.
    # Bins where the item does not fit will retain this very low priority.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can physically fit.
    # We allow for a tiny negative remaining capacity due to floating point precision,
    # effectively treating it as fitting perfectly.
    can_fit_mask = potential_remaining_cap >= -EPSILON_FOR_ZERO

    # For all bins where the item can fit, apply the Best Fit principle as a base score.
    # A smaller positive remainder results in a higher (less negative) score.
    # Example: remaining 0.1 gives score -0.1; remaining 0.01 gives score -0.01.
    priority_scores[can_fit_mask] = -potential_remaining_cap[can_fit_mask]

    # Now, refine these scores based on the specific type of remainder, applying a hierarchy:

    # 1. Perfect Fit: Remaining capacity is virtually zero.
    # This takes precedence over all other scores for these bins.
    perfect_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EPSILON_FOR_ZERO) & can_fit_mask
    priority_scores[perfect_fit_mask] = float('inf') # Assign the highest possible priority.

    # 2. Small, Non-Zero Remainder: Remaining capacity is positive but below the threshold.
    # These are considered "dead space" and should be avoided if possible.
    # Ensure this mask only applies to valid fitting bins that are not perfect fits.
    small_remainder_mask = (potential_remaining_cap > EPSILON_FOR_ZERO) & \
                           (potential_remaining_cap < SMALL_REMAINDER_THRESHOLD) & can_fit_mask
    priority_scores[small_remainder_mask] = -float('inf') # Assign the lowest priority among fitting bins.

    # For all other fitting bins not covered by perfect fit or small remainder,
    # their scores remain based on the Best Fit principle (i.e., -potential_remaining_cap),
    # ensuring that tighter fits are still preferred among useful remainders.

    return priority_scores
```
