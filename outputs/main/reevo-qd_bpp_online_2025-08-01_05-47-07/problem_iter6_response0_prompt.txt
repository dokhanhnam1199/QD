{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This heuristic implements a Best-Fit-like strategy by prioritizing bins\n    that will have the least remaining capacity (tightest fit) after the item is placed.\n    Bins where the item does not fit are assigned the lowest possible priority.\n\n    This improved version leverages `np.where` for more concise and explicit\n    conditional assignment of priority scores, clearly separating the logic for\n    bins where the item fits versus where it doesn't. It reinforces the 'minimal\n    waste' objective by giving higher scores to bins that result in smaller\n    remaining capacities.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin if the item were hypothetically placed.\n    hypothetical_remaining = bins_remain_cap - item\n\n    # Assign priority scores using np.where for clear conditional logic:\n    # - If the item fits (hypothetical_remaining is non-negative), the score is\n    #   the negative of the hypothetical remaining capacity. This means smaller\n    #   remaining capacities (tighter fits, less \"waste\") result in higher\n    #   (less negative, closer to zero) priority scores, aligning with Best Fit.\n    # - If the item does not fit (hypothetical_remaining is negative), assign\n    #   a very low priority (-np.inf) to ensure these bins are never selected.\n    priority_scores = np.where(\n        hypothetical_remaining >= 0,\n        -hypothetical_remaining,\n        -np.inf\n    )\n\n    return priority_scores\n\n[Reflection]\nLeverage problem data to optimize for objectives (e.g., minimize waste); handle infeasible options.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}