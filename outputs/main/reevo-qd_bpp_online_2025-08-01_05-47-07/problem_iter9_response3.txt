```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements an enhanced Best-Fit-like strategy by prioritizing bins
    that will have the least remaining capacity (tightest fit) after the item is placed.
    It introduces a non-linear scoring to strongly reward perfect fits and penalize
    larger remaining capacities more aggressively, aligning with the goal of
    minimizing wasted space and encouraging full bin utilization.
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a score based on the remaining capacity.
    # To implement Best Fit, we want to select the bin that results in the
    # *smallest* hypothetical_remaining value (tightest fit).

    # We use a non-linear transformation (e.g., squaring) to penalize larger
    # remaining capacities more aggressively. This makes tight fits (especially
    # perfect fits where remaining capacity is 0) much more attractive by
    # creating a larger separation in scores.
    # A perfect fit (0 remaining) will still yield a score of 0.
    # A small positive remaining will result in a small negative score.
    # A larger positive remaining will result in a much larger negative score,
    # thereby strongly disfavoring less tight fits.
    POWER = 2.0  # This power can be tuned. Values > 1.0 exaggerate the difference.
    
    # Calculate scores for bins where the item fits.
    # np.power handles the case of 0.0**POWER correctly as 0.0.
    scores_for_fitting_bins = -np.power(hypothetical_remaining[fits_mask], POWER)
    
    # Assign these calculated scores to the appropriate positions in the priority_scores array.
    priority_scores[fits_mask] = scores_for_fitting_bins

    return priority_scores
```
