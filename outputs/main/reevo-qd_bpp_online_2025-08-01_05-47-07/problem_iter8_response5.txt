```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation refines the Best Fit heuristic with strategic remainder handling
    to optimize future bin states and minimize overall waste. It strictly adheres to the
    principle of prioritizing perfect fits, penalizing unusable small remnants, and
    preferring tighter useful fits.

    The priority function assigns scores to bins based on the following hierarchical rules:
    1.  **Perfect Fit (Highest Priority)**: If placing the item leaves the bin with exactly zero
        remaining capacity (or very close to it due to floating-point precision), this bin is
        given the maximum possible priority (`+inf`). This ensures a bin is fully utilized and
        effectively "closed" without fragmentation.
    2.  **No Fit (Lowest Priority)**: If the item's size exceeds the bin's remaining capacity,
        the bin is immediately assigned the minimum possible priority (`-inf`). These bins are
        not viable options for the current item.
    3.  **Avoid Small, Unusable Fragments (Heavily Penalized)**: If placing the item would leave
        a very small, non-zero remaining capacity (below a defined `SMALL_REMAINDER_THRESHOLD`),
        this bin is heavily penalized (`-inf`). Such small remnants are often "dead space" that
        are difficult to fill later, contributing to overall waste.
    4.  **Best Fit for Useful Remainder (Standard Priority)**: For all other cases where the item
        fits and would leave a "useful" amount of remaining capacity (i.e., not a perfect fit
        and not a tiny fragment), the standard Best Fit principle applies. Bins that leave a
        smaller positive remainder are preferred, ensuring tight packing and maximizing the
        potential for future use of the remaining space. This is achieved by assigning a score
        that is the negative of the remaining capacity (smaller positive remainder means higher,
        less negative score).

    This heuristic aims to consolidate items efficiently, prevent the creation of tiny,
    hard-to-use gaps, and ultimately minimize the total number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Configuration parameters for the heuristic.
    # These values might need tuning based on the specific problem instance
    # (e.g., typical item sizes relative to bin capacity).
    EPSILON_FOR_ZERO = 1e-9  # Tolerance for floating-point comparisons to zero.
    # Threshold below which remaining capacity is considered "unusable". For items/bins
    # normalized between 0 and 1, 0.05 (5%) is a common starting point.
    SMALL_REMAINDER_THRESHOLD = 0.05 

    # Calculate the hypothetical remaining capacity for each bin if the item were placed in it.
    # A negative value here implies the item does not fit.
    hypothetical_remainder = bins_remain_cap - item

    # Initialize all priority scores to negative infinity.
    # Bins where the item does not fit will retain this score, making them
    # the least preferred (unselectable) options.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    # We use EPSILON_FOR_ZERO to account for slight floating-point inaccuracies,
    # treating very small negative remainders as zero.
    can_fit_mask = hypothetical_remainder >= -EPSILON_FOR_ZERO

    # Extract the actual hypothetical remainders for only the bins that can fit the item.
    fitting_remainders = hypothetical_remainder[can_fit_mask]

    # --- Step 1: Initialize scores for fitting bins based on Best Fit principle ---
    # By default, for fitting bins, we prefer those that leave the smallest positive remainder.
    # A smaller positive remainder results in a higher score (less negative).
    scores_for_fitting_bins = -fitting_remainders

    # --- Step 2: Apply specific priority rules based on remainder type ---

    # Rule A: Prioritize Perfect Fits (score = +inf)
    # Identify bins where the item perfectly fills the remaining capacity.
    perfect_fit_mask = np.isclose(fitting_remainders, 0.0, atol=EPSILON_FOR_ZERO)
    scores_for_fitting_bins[perfect_fit_mask] = float('inf')

    # Rule B: Penalize Small, Unusable Fragments (score = -inf)
    # Identify bins that would be left with a small, non-zero remainder.
    # These are considered "dead space" and are heavily discouraged.
    small_fragment_mask = (fitting_remainders > EPSILON_FOR_ZERO) & \
                          (fitting_remainders < SMALL_REMAINDER_THRESHOLD)
    scores_for_fitting_bins[small_fragment_mask] = -float('inf')

    # --- Step 3: Assign the calculated scores back to the main priority array ---
    # Only the bins identified by `can_fit_mask` will have their scores updated;
    # non-fitting bins will retain their initial -inf score.
    priority_scores[can_fit_mask] = scores_for_fitting_bins

    return priority_scores
```
