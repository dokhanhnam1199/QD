```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic prioritizes perfect fits (remaining capacity 0) first,
    assigning them a distinctively high score. If no perfect fit is available,
    it then applies a Best-Fit-like strategy by prioritizing bins that
    will have the least remaining capacity (tightest fit) after the item is placed.
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # 1. Identify perfect fits: bins where remaining capacity would be exactly 0.
    perfect_fit_mask = (hypothetical_remaining == 0)

    # Assign a distinctively high score to perfect fits.
    # This score must be higher than any possible score from the Best-Fit strategy
    # for non-perfect fits (which will be negative).
    priority_scores[perfect_fit_mask] = 1.0

    # 2. Identify feasible but not perfect fits: bins where remaining capacity would be > 0.
    # This also implicitly filters out bins where the item does not fit.
    feasible_not_perfect_mask = (hypothetical_remaining > 0)

    # For these bins, apply the Best-Fit strategy:
    # We want to minimize the hypothetical_remaining, which means maximizing
    # the negative of hypothetical_remaining (e.g., -0.1 is better than -0.5).
    priority_scores[feasible_not_perfect_mask] = -hypothetical_remaining[feasible_not_perfect_mask]

    return priority_scores
```
