{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This heuristic explicitly prioritizes perfect fits by assigning a very high score.\n    If no perfect fit is available, it then applies a Best-Fit strategy by prioritizing\n    bins that will have the least remaining capacity (tightest fit) after the item is placed.\n    Bins where the item does not fit are assigned the lowest possible priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin if the item were placed in it.\n    # A negative value indicates the item does not fit.\n    hypothetical_remaining = bins_remain_cap - item\n\n    # Initialize priority scores for all bins to a very low value (-infinity).\n    # This ensures that bins where the item does not fit will never be selected\n    # by argmax.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n\n    # Define a high score for perfect fits to ensure they are chosen first.\n    # This value must be significantly larger than any score generated by the\n    # Best-Fit part of the heuristic (which produces non-positive scores).\n    HIGH_PERFECT_FIT_SCORE = 1e9\n\n    # 1. Identify and prioritize perfect fits.\n    # A perfect fit occurs when hypothetical_remaining is exactly 0.\n    perfect_fits_mask = hypothetical_remaining == 0\n    priority_scores[perfect_fits_mask] = HIGH_PERFECT_FIT_SCORE\n\n    # 2. For bins where the item fits but not perfectly, apply Best Fit.\n    # This means selecting the bin that results in the *smallest positive*\n    # hypothetical_remaining value (tightest fit).\n    # Since np.argmax selects the maximum score, we negate the hypothetical_remaining.\n    # We only consider bins where the item fits and is NOT a perfect fit.\n    non_perfect_fits_mask = np.logical_and(hypothetical_remaining > 0, hypothetical_remaining >= 0) # The second part is redundant but explicit\n    priority_scores[non_perfect_fits_mask] = -hypothetical_remaining[non_perfect_fits_mask]\n\n    return priority_scores\n\n[Reflection]\nPrioritize perfect fits, then minimize remaining bin capacity (Best Fit). Exclude non-fitting options.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}