```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit strategy by prioritizing bins
    that will have the least remaining capacity (tightest fit) after the item is placed.
    Bins where the item does not fit are assigned the lowest possible priority.
    This version uses a slightly different arithmetic expression for the score
    while maintaining the core Best-Fit principle.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits.
    # The item fits if the bin's remaining capacity is greater than or equal to the item size.
    fits_mask = bins_remain_cap >= item

    # For bins where the item fits, assign a score based on the remaining capacity.
    # To implement Best Fit, we want to select the bin that results in the
    # *smallest* remaining capacity (tightest fit) after the item is placed.
    # The remaining capacity after placement would be `bins_remain_cap - item`.
    # To achieve "maximize score" for "minimize remaining capacity", we can
    # calculate `item - bins_remain_cap`.
    # For example:
    #   If item=10, bin_cap=10 (perfect fit): Score = 10 - 10 = 0
    #   If item=10, bin_cap=15: Score = 10 - 15 = -5
    #   If item=10, bin_cap=20: Score = 10 - 20 = -10
    # Maximizing these scores (0 > -5 > -10) correctly prioritizes the tightest fit.
    priority_scores[fits_mask] = item - bins_remain_cap[fits_mask]

    return priority_scores
```
