```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Worst-Fit strategy, prioritizing bins that
    will have the *most* remaining capacity after the item is placed.
    This approach aims to keep bins as "open" as possible for future items,
    potentially leading to a more balanced distribution of items across bins
    or saving smaller bins for smaller items. This can be beneficial in scenarios
    where packing efficiency isn't the sole concern, or when the distribution
    of future items is unknown, aiming to avoid "fragmentation" of capacity.
    Bins where the item does not fit are assigned the lowest possible priority (-np.inf).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Create a boolean mask for bins where the item actually fits (remaining capacity is non-negative).
    can_fit_mask = hypothetical_remaining >= 0

    # Initialize all priority scores to -np.inf. This ensures bins where the item doesn't fit
    # are never selected.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Only process bins where the item can fit
    if np.any(can_fit_mask):
        # Assign priority scores for valid bins:
        # For Worst-Fit, the score is directly the hypothetical_remaining.
        # This means a larger remaining capacity results in a higher score,
        # thereby prioritizing the "worst fit" (the bin that will have the most space left).
        priority_scores[can_fit_mask] = hypothetical_remaining[can_fit_mask]

    return priority_scores
```
