```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements an enhanced Best-Fit-like strategy by more strongly
    prioritizing bins that will have the least remaining capacity (tightest fit)
    after the item is placed. It amplifies the reward for very tight fits and
    perfect matches by squaring the remaining capacity before negating, which
    more severely penalizes larger remaining capacities (fragmentation).
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a score based on the remaining capacity.
    # To implement an enhanced Best Fit that rewards perfect matches and minimizes
    # fragmentation more aggressively, we square the hypothetical_remaining before negating.
    # This means:
    # - A perfect fit (0 remaining) still results in a score of 0 (highest possible).
    # - Small positive remainders (e.g., 0.1) result in a very high score (e.g., -0.01).
    # - Larger positive remainders (e.g., 0.5) result in a significantly lower score (e.g., -0.25).
    # This pushes items towards very tight fits, aiming to 'close' bins more effectively.
    priority_scores[fits_mask] = -(hypothetical_remaining[fits_mask] ** 2)

    return priority_scores
```
