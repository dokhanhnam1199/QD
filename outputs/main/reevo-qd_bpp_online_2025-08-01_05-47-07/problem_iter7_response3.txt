```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic explicitly prioritizes perfect fits. If no perfect fit is
    available, it falls back to a Best-Fit strategy, prioritizing bins that
    will have the least remaining capacity (tightest fit).
    Bins where the item does not fit are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate the hypothetical remaining capacity if the item were placed in each bin.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Identify bins where the item actually fits (i.e., hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # Identify bins with a perfect fit (remaining capacity is exactly zero).
    perfect_fit_mask = hypothetical_remaining == 0

    # Assign the highest possible priority score to perfect fit bins.
    # This makes them unequivocally preferred over any other type of fit.
    priority_scores[perfect_fit_mask] = np.inf

    # For bins where the item fits but not perfectly, apply the Best-Fit strategy.
    # This means selecting the bin that results in the smallest positive remaining
    # capacity. Since np.argmax selects the maximum score, we negate the
    # hypothetical_remaining for these bins. A smaller positive remaining capacity
    # (e.g., 2) will result in a larger score (e.g., -2) compared to a larger
    # remaining capacity (e.g., 10, resulting in -10).
    non_perfect_fits_mask = fits_mask & ~perfect_fit_mask
    priority_scores[non_perfect_fits_mask] = -hypothetical_remaining[non_perfect_fits_mask]

    return priority_scores
```
