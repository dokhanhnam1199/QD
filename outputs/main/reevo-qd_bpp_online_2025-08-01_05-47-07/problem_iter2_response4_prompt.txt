{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This strategy, 'Targeted Remaining Capacity Fit', aims to find a bin\n    such that after placing the item, the bin's remaining capacity (slack)\n    is as close as possible to a predefined 'target slack'.\n    \n    The 'target slack' is defined as a small fraction of the item's size.\n    This heuristic attempts to balance two objectives:\n    1. Fill bins efficiently (similar to Best Fit) by minimizing remaining space.\n    2. Avoid creating excessively tiny, potentially unusable gaps, or leaving bins\n       too full, by aiming for a \"just right\" amount of remaining space that might\n       be useful for future, possibly small, items.\n\n    Bins that cannot accommodate the item receive the lowest possible priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize all priorities to a very low value (negative infinity)\n    # This ensures that bins where the item does not fit are never chosen.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify which bins can accommodate the item\n    can_fit = bins_remain_cap >= item\n\n    # Calculate the remaining capacity in each fitting bin after placing the item\n    remaining_after_placement = bins_remain_cap[can_fit] - item\n\n    # Define a 'target slack' for the remaining capacity.\n    # This factor is a heuristic choice; 0.0 would revert to a pure Best Fit.\n    # A positive factor biases towards leaving a small, specific amount of slack.\n    TARGET_SLACK_FACTOR = 0.05  # Aim to leave 5% of the item's size as remaining capacity\n    TARGET_SLACK = TARGET_SLACK_FACTOR * item\n\n    # If item is zero (or very small near float precision limit), set target slack to zero\n    # to avoid numerical issues or unreasonable targets for tiny items.\n    if item <= np.finfo(float).eps:\n        TARGET_SLACK = 0.0\n\n    # The priority score is the negative of the absolute difference\n    # between the actual remaining capacity and the target slack.\n    # A smaller absolute difference results in a higher (less negative) priority score.\n    priorities[can_fit] = -np.abs(remaining_after_placement - TARGET_SLACK)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This version implements a Modified Best-Fit strategy with a preference for\n    bins with lower indices (older/more \"settled\" bins).\n\n    The core idea is:\n    1. **Best Fit Principle:** Prioritize bins that result in the smallest remaining capacity\n       after the item is placed. This minimizes wasted space within a bin and encourages\n       bins to be filled completely. A perfect fit (0 remaining capacity) receives the highest score.\n       Score contribution: `-(bins_remain_cap - item)`.\n       (Smaller positive remaining capacity leads to a higher, less negative score).\n    2. **Positional Bias (Tie-breaker/Preference):** Add a slight positive bias to bins\n       with lower indices. This means if two or more bins offer an equally good \"Best Fit\",\n       the one that was \"opened\" earlier (lower index) will be preferred. This can help\n       in consistently closing off earlier bins.\n       Score contribution: `alpha * (num_bins - 1 - bin_index)`.\n\n    Bins where the item cannot fit receive a very low priority to ensure they are never selected.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    \n    # Calculate potential remaining capacity if the item is placed into each bin.\n    # A smaller positive potential_rem_cap means a tighter, more efficient fit.\n    potential_rem_cap = bins_remain_cap - item\n\n    # Base Best-Fit scores: Maximize -potential_rem_cap.\n    # If potential_rem_cap is 0 (perfect fit), score is 0.\n    # If potential_rem_cap is 0.1, score is -0.1.\n    # If potential_rem_cap is 0.5, score is -0.5.\n    # So, higher score means better (smaller positive) remaining capacity.\n    base_scores = -potential_rem_cap\n\n    # Add a positional bias to favor bins with lower indices.\n    # This acts as a tie-breaker for equally good best fits, or a slight preference.\n    # alpha should be a small positive constant. It needs to be small enough\n    # not to disrupt the Best Fit primary sorting, but large enough to break ties.\n    # A value like 0.001 ensures it's usually less than typical differences\n    # in remaining capacities (assuming capacities are floats like 0.1, 0.05 etc.).\n    alpha = 0.001 \n    \n    # Create an array of indices [0, 1, ..., num_bins-1]\n    bin_indices = np.arange(num_bins)\n    \n    # Calculate the bias term:\n    # (num_bins - 1 - bin_index) ensures that bin_indices[0] (the first bin)\n    # gets the largest positive bias (alpha * (num_bins - 1)), and\n    # bin_indices[num_bins-1] (the last bin) gets the smallest bias (alpha * 0).\n    bin_index_bias = alpha * (num_bins - 1 - bin_indices)\n\n    # Combine the Best-Fit score with the positional bias.\n    priorities = base_scores + bin_index_bias\n    \n    # Identify bins where the item cannot fit (remaining capacity is less than item size).\n    can_fit_mask = bins_remain_cap >= item\n    \n    # Assign a very low priority to bins where the item cannot fit.\n    # This ensures these bins are never selected as long as there's a valid option.\n    # Using -sys.float_info.max ensures it's the absolute lowest float value.\n    min_priority_val = -sys.float_info.max\n    priorities[~can_fit_mask] = min_priority_val\n\n    return priorities\n\n[Reflection]\nPrioritize minimal remaining space (Best Fit). Use subtle secondary biases (e.g., positional) for tie-breaking and closing bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}