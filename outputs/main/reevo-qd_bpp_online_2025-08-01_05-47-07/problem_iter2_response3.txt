```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit strategy focused on maximizing immediate bin utilization.

    This heuristic prioritizes placing the item into the bin that will result in
    the least amount of remaining space (tightest fit) after the item is placed.
    This approach aims to efficiently fill bins and avoid creating large,
    potentially fragmented empty spaces within bins, which is crucial for
    maximizing overall bin utilization in online scenarios. It explicitly avoids
    strategies that aim for a specific "target slack", instead focusing purely
    on minimizing wasted space for the current item.

    For each bin:
    - If the item fits (item_size <= bin_remaining_capacity):
      The priority score is calculated as `-(bin_remaining_capacity - item_size)`.
      A smaller difference (tighter fit) results in a priority score closer to
      zero (i.e., a larger, less negative value), making it the preferred choice.
      An exact fit (remaining_capacity - item_size == 0) yields a priority of 0,
      the highest possible score for a fitting bin.
    - If the item does not fit (item_size > bin_remaining_capacity):
      The priority score is set to negative infinity (`-np.inf`), ensuring
      these bins are never selected.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score should be chosen.
    """
    # Initialize all priorities to negative infinity. Bins that cannot fit the item
    # will retain this score, making them ineligible for selection.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify all bins where the current item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the space that would remain in each fitting bin after placing the item.
    # This value is what we want to minimize for a "tightest fit".
    remaining_space_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign priority scores for the fitting bins.
    # To convert minimization of 'remaining_space_after_placement' into a maximization
    # for the priority score (as the highest priority wins), we negate the value.
    # E.g., a remaining space of 0 (perfect fit) yields a priority of 0.
    # A remaining space of 5 yields a priority of -5.
    # A remaining space of 10 yields a priority of -10.
    # Clearly, 0 is the highest priority, then -5, then -10, correctly selecting
    # the tightest fit.
    priorities[can_fit_mask] = -remaining_space_after_placement

    return priorities
```
