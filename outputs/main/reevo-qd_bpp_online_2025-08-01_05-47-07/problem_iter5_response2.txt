```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by explicitly rewarding perfect fits
    and penalizing small, potentially unusable remaining capacities (fragments).

    The strategy considers three main scenarios for bins where the item fits:
    1.  Perfect Fit: Prioritized highest to efficiently close bins.
    2.  Small Fragment: Remaining capacity is positive but less than the item size,
        making it likely unusable for future items. These bins are heavily penalized.
    3.  Usable Remaining Space: Remaining capacity is greater than or equal to the
        item size. Among these, the standard Best-Fit logic is applied (preferring
        the tightest fit that still leaves a "large enough" remainder).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Define constants for distinct priority levels. These values are chosen to
    # ensure clear separation between categories, assuming item and capacity values
    # are within a reasonable numerical range.
    # A perfect fit is given the highest possible priority.
    PERFECT_FIT_BONUS = 1e9  # A large positive number to ensure highest priority
    # Small fragments are heavily penalized to discourage leaving unusable space.
    SMALL_FRAGMENT_PENALTY = -1e9  # A large negative number to ensure lowest priority among fitting bins

    # Mask for bins where the item actually fits (i.e., hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # Apply scores based on the "future bin state" logic, prioritizing in stages.

    # 1. Perfect Fit: If remaining capacity is exactly 0.
    # This addresses "rewarding perfect fits".
    perfect_fit_mask = (hypothetical_remaining == 0)
    priority_scores[perfect_fit_mask] = PERFECT_FIT_BONUS

    # 2. Small Fragment: If remaining capacity is greater than 0 but less than the item size.
    # This addresses "penalizing small fragments" that might become dead space.
    # Ensure this mask only applies to bins where the item fits and is not a perfect fit.
    small_fragment_mask = (hypothetical_remaining > 0) & (hypothetical_remaining < item)
    priority_scores[small_fragment_mask] = SMALL_FRAGMENT_PENALTY

    # 3. Usable Remaining Space (Best-Fit within this category): If remaining capacity is
    #    greater than or equal to the item size. This implies the remaining space
    #    is substantial enough to potentially fit another item of similar size or larger.
    #    Among these, we still prefer the one that leaves the smallest remaining capacity
    #    (i.e., standard Best-Fit logic for "tight immediate utilization").
    # Ensure this mask only applies to bins where the item fits and is not a perfect fit
    # and not a small fragment.
    usable_remaining_mask = (hypothetical_remaining >= item)
    priority_scores[usable_remaining_mask] = -hypothetical_remaining[usable_remaining_mask]

    # Ensure that any bin where the item truly does not fit remains at -np.inf
    # (or the initial very low value). This is already handled by the initial full() call
    # and the masks implicitly only applying to fitting scenarios.
    # The `fits_mask` can be used to explicitly zero out non-fitting priorities if needed,
    # but the current structure directly assigns scores only to the fitting cases, leaving
    # non-fitting cases at their default -inf.

    return priority_scores
```
