```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by prioritizing bins
    that will have the least remaining capacity (tightest fit) after the item is placed.
    It further leverages problem-specific data (bin indices) to implement a
    consistent tie-breaking mechanism: among bins with identical optimal
    'tightness' scores, those with lower indices are prioritized.
    Bins where the item does not fit are assigned the lowest possible priority.

    This version builds upon v1 by explicitly addressing ties in the 'tightness'
    score. By introducing a small penalty proportional to the bin's index,
    it ensures a deterministic and consistent selection when multiple bins offer
    the exact same best fit, effectively preferring to fill "older" or
    lower-indexed bins first. This contributes to a more predictable
    and potentially more stable bin packing process.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were hypothetically placed.
    hypothetical_remaining = bins_remain_cap - item

    # Assign primary priority scores based on Best-Fit strategy:
    # - If the item fits (hypothetical_remaining is non-negative), the score is
    #   the negative of the hypothetical remaining capacity. This means smaller
    #   remaining capacities (tighter fits, less "waste") result in higher
    #   (less negative, closer to zero) priority scores.
    # - If the item does not fit (hypothetical_remaining is negative), assign
    #   a very low priority (-np.inf) to ensure these bins are never selected.
    primary_scores = np.where(
        hypothetical_remaining >= 0,
        -hypothetical_remaining,
        -np.inf
    )

    # Implement a tie-breaking mechanism using bin indices.
    # For bins with identical primary scores, we want to prioritize those with
    # lower indices (e.g., the first available bin that offers the best fit).
    # This is done by subtracting a very small penalty that increases with the bin's index.
    # The penalty (e.g., 1e-9 * index) must be small enough not to alter the
    # relative order of bins with different primary_scores, but large enough
    # to differentiate between bins with identical primary_scores.
    indices = np.arange(len(bins_remain_cap))
    # Using a small constant like 1e-9 ensures the penalty is negligible compared to typical capacity values.
    tie_breaking_penalty = indices * 1e-9

    # Apply the tie-breaking penalty to the primary scores.
    # Bins with lower indices will have a smaller (less negative) penalty,
    # resulting in a slightly higher overall score if their primary scores are tied.
    priority_scores = primary_scores - tie_breaking_penalty

    return priority_scores
```
