```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation prioritizes bins by maximizing the proportion of the
    bin's current remaining capacity that the item will consume. This aims
    to optimize immediate resource utilization by making the most of the
    available space in a bin, effectively trying to "fill up" bins more quickly
    relative to their current availability. Bins where the item does not fit
    receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize priority scores for all bins to a very low value.
    # Bins that cannot fit the item will retain this -np.inf score.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    # An item fits if its size is less than or equal to the bin's remaining capacity.
    fitting_bins_mask = item <= bins_remain_cap

    # For bins where the item fits, calculate the priority score.
    # The heuristic is to maximize the ratio of the item size to the bin's
    # current remaining capacity. This means we prefer bins where the item
    # fills a larger percentage of the available space, making it a form of
    # "relative best fit" or "maximize capacity utilization ratio".
    #
    # Examples:
    # - If item is 0.5 and bin_cap is 0.5 (perfect fit), ratio is 1.0 (highest).
    # - If item is 0.1 and bin_cap is 0.2 (fills 50% of available), ratio is 0.5.
    # - If item is 0.1 and bin_cap is 0.9 (fills ~11% of available), ratio is ~0.11.
    # This prioritizes making fuller use of the *current* available capacity.
    
    # To avoid division by zero if bins_remain_cap could be zero for a fitting bin
    # (which would only happen if item is also zero, which is typically not the case for items),
    # we add a tiny epsilon if necessary, but generally, bins_remain_cap for a fitting
    # bin should be >= item > 0.
    
    # Calculate scores only for fitting bins to prevent division by zero or errors
    # for bins where item doesn't fit (capacity <= 0).
    priority_scores[fitting_bins_mask] = item / bins_remain_cap[fitting_bins_mask]

    return priority_scores
```
