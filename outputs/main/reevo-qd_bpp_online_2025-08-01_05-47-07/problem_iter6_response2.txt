```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit strategy, prioritizing bins that will
    have the least remaining capacity (tightest fit) after the item is placed.
    The scoring system is designed such that higher values indicate a better fit,
    and a perfect fit receives the highest possible score. Bins where the item
    does not fit are assigned the lowest possible priority (0).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed in it.
    hypothetical_remaining = bins_remain_cap - item

    # A small epsilon value to handle perfect fits (hypothetical_remaining == 0).
    # Adding epsilon to the denominator ensures that division by zero is avoided
    # for perfect fits, and these fits receive a very high, finite score (1/epsilon).
    epsilon = 1e-9

    # Assign priority scores using a Best-Fit approach:
    # - If the item fits (hypothetical_remaining >= 0):
    #   The score is calculated as 1.0 / (hypothetical_remaining + epsilon).
    #   This means:
    #   - A perfect fit (0 remaining) yields an extremely high score (1/epsilon).
    #   - Tighter fits (smaller positive remaining capacity) yield higher scores.
    #   - Looser fits (larger positive remaining capacity) yield lower positive scores.
    # - If the item does not fit (hypothetical_remaining < 0):
    #   Assign a score of 0, ensuring these bins are never selected unless no
    #   other bin fits (in which case the calling logic should typically open a new bin).
    priority_scores = np.where(
        hypothetical_remaining >= 0,
        1.0 / (hypothetical_remaining + epsilon),
        0.0  # Assign 0 for bins where the item does not fit
    )

    return priority_scores
```
