```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by explicitly giving the
    highest possible priority (np.inf) to bins that result in a perfect fit
    (zero remaining capacity). For other bins where the item fits, it applies
    the standard Best-Fit logic, prioritizing tighter fits (smaller positive
    remaining capacity). Bins where the item does not fit are assigned the
    lowest possible priority (-np.inf).

    This approach ensures that perfect fits are always chosen first if available,
    and then among non-perfect fits, the tightest one is preferred, thereby
    strategically minimizing wasted space and promoting efficient packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # Apply scoring only to bins where the item fits.
    # Check if any bin fits to avoid operations on empty arrays if no bin fits.
    if np.any(fits_mask):
        # Identify bins that result in a perfect fit (remaining capacity is 0).
        perfect_fit_mask = (hypothetical_remaining == 0) & fits_mask

        # Assign an infinitely high priority to perfect fits. This ensures they
        # are always chosen first if available, clearly signaling their optimality.
        priority_scores[perfect_fit_mask] = np.inf

        # For bins where the item fits but is not a perfect fit,
        # apply the Best-Fit strategy: prioritize smaller remaining capacity.
        # We negate the hypothetical_remaining value so that np.argmax picks the
        # smallest positive remaining value (which becomes the largest negative score,
        # closest to zero).
        non_perfect_fit_mask = fits_mask & ~perfect_fit_mask
        priority_scores[non_perfect_fit_mask] = -hypothetical_remaining[non_perfect_fit_mask]

    return priority_scores
```
