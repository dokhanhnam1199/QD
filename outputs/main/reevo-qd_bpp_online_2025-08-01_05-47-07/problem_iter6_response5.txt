```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit strategy, but with a 'strategic'
    adjustment to discourage creating very small, potentially unusable,
    positive remaining capacities (fragmentation avoidance). Perfect fits
    are given the highest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Determine the effective bin size. In a real application, BIN_SIZE
    # should ideally be a known constant or passed as an argument.
    # Here, we infer it heuristically from the input data to make the
    # thresholds and penalties scale appropriately.
    # We assume a default of 1.0 (common for normalized BPP), but adapt
    # if actual bin capacities or the item size suggest a different scale.
    effective_bin_size = 1.0 
    if bins_remain_cap.size > 0:
        max_existing_cap = np.max(bins_remain_cap)
        if max_existing_cap > effective_bin_size:
            effective_bin_size = max_existing_cap
    # Ensure effective_bin_size is at least large enough to contain the current item,
    # as a new bin (if opened) would need to fit it.
    if item > effective_bin_size:
        effective_bin_size = item * 1.1 # A bit larger than the item to allow for new bin capacity

    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores. Bins where the item does not fit
    # are assigned the lowest possible priority.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item actually fits.
    fits_mask = hypothetical_remaining >= 0

    # Base score: Best-Fit strategy.
    # The score is the negative of the hypothetical remaining capacity.
    # A smaller remaining capacity (tighter fit) results in a score closer to zero (higher priority).
    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]

    # --- Strategic Adjustment: Penalize small, positive remainders ---
    # Define a threshold for what constitutes a 'very small' remaining capacity.
    # For example, if the remaining space is less than 5% of the effective bin size.
    SMALL_REMAINDER_THRESHOLD = 0.05 * effective_bin_size

    # Define a penalty for leaving such a small remainder. This penalty aims to
    # make these fragmented outcomes less attractive compared to slightly looser
    # fits that leave more usable space.
    PENALTY_FOR_SMALL_REMAINDER = 0.1 * effective_bin_size # E.g., a penalty equal to 10% of bin size

    # Mask for bins that will result in a 'small but positive' remaining capacity.
    # This specifically excludes perfect fits (remaining == 0) from being penalized.
    small_positive_remainder_mask = (hypothetical_remaining > 0) & \
                                    (hypothetical_remaining < SMALL_REMAINDER_THRESHOLD)

    # Apply the penalty to valid fitting bins that meet the small remainder criteria.
    penalize_mask = fits_mask & small_positive_remainder_mask
    priority_scores[penalize_mask] -= PENALTY_FOR_SMALL_REMAINDER

    # --- Absolute Highest Priority: Perfect Fits ---
    # Perfect fits (where item completely fills a bin, leaving 0 capacity) are
    # highly desirable as they efficiently close a bin. Assign a significantly
    # high bonus score to ensure they are always chosen if available,
    # overriding any other scores or penalties.
    perfect_fit_mask = (hypothetical_remaining == 0)
    # The bonus should be higher than any possible Best-Fit score (which maxes at 0)
    # and any negative penalized score. Adding `effective_bin_size + 1.0` ensures this.
    priority_scores[perfect_fit_mask] = effective_bin_size + 1.0

    return priority_scores
```
