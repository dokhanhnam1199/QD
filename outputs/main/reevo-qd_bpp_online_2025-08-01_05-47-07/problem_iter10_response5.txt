```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit-like strategy by prioritizing bins
    that will have the least remaining capacity (tightest fit) after the item is placed.
    It uses a non-linear scoring function to place a stronger emphasis on very
    tight fits, especially perfect fits. Bins where the item does not fit are
    assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # For bins where the item fits, assign a score based on the remaining capacity.
    # To prioritize tightest fits, we want a function that yields higher scores
    # for smaller hypothetical_remaining values.
    # The function f(x) = 1 / (1 + x) achieves this:
    # - If x (hypothetical_remaining) is 0 (perfect fit), score is 1.0 (highest possible).
    # - As x increases, the score decreases, approaching 0.
    # This non-linear transformation gives a stronger "reward" for very tight fits
    # (especially perfect ones) compared to simply negating the remaining capacity,
    # as the score drops off more steeply for small remaining capacities.
    priority_scores[fits_mask] = 1.0 / (1.0 + hypothetical_remaining[fits_mask])

    return priority_scores
```
