```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation refines the strategic scoring of v1 by making the
    distinction between "small fragments" and "non-fitting" bins explicit
    in their priority scores, and by using clear, scaled constants for
    perfect fits and penalties.

    It prioritizes bins based on the following hierarchy, with distinct score ranges:
    1.  **Perfect Fit**: Highest priority. This fully utilizes a bin, effectively
        "closing" it and preventing fragmentation. Assigned a very high positive score.
    2.  **Best Fit for Others**: For bins where the item fits and leaves a
        "useful" positive remainder. Prioritizes bins that leave a smaller
        positive remainder. Scores are in a range from 0 (nearly perfect fit)
        down to a negative value (leaving a lot of space).
    3.  **Avoid Small Fragments**: Lowest finite priority for bins that would be
        left with a very small, non-zero remaining capacity. These are considered
        "dead space" or hard-to-use fragments. Assigned a specific negative penalty
        score, lower than any "Best Fit" score but still finite.
    4.  **Cannot Fit**: Absolute lowest priority for bins where the item simply
        does not fit. Assigned negative infinity.

    This heuristic aims to consolidate items efficiently while avoiding the creation
    of small, unusable gaps, providing clearer score differentiation for
    decision-making.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Define constants for strategic scoring.
    # EPSILON_FOR_ZERO: Tolerance for floating point comparisons to treat a remainder as zero.
    EPSILON_FOR_ZERO = 1e-9 
    
    # SMALL_REMAINDER_THRESHOLD: Defines what constitutes a "very small" or "dead"
    # remaining space. This value often needs tuning based on typical item sizes
    # and bin capacity (e.g., 0.05 for normalized items/bins meaning <5% capacity left).
    SMALL_REMAINDER_THRESHOLD = 0.05 

    # Score for a perfect fit. Should be significantly higher than any regular best-fit score.
    # Assuming bin capacities and item sizes are typically within [0, 1] range,
    # regular best-fit scores will be in [-1, 0]. A score like 100.0 ensures highest priority.
    MAX_SCORE_PERFECT_FIT = 100.0 

    # Penalty for creating a small, undesirable fragment. Should be significantly
    # lower than any regular best-fit score but still finite, allowing it to be
    # distinguished from non-fitting bins. E.g., -100.0 is much lower than -1.0 (worst best-fit).
    PENALTY_SMALL_FRAGMENT = -100.0 

    # Absolute lowest priority for bins where the item does not fit.
    PENALTY_NO_FIT = -float('inf')

    # Initialize priority scores for all bins to the "cannot fit" penalty.
    priority_scores = np.full_like(bins_remain_cap, PENALTY_NO_FIT, dtype=float)

    # Calculate the remaining capacity if the item were hypothetically placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Identify bins where the item can fit (remaining capacity is non-negative, allowing for epsilon).
    # A bin fits if potential_remaining_cap is approximately >= 0.
    fitting_bins_mask = potential_remaining_cap >= -EPSILON_FOR_ZERO

    # Process only the fitting bins.
    if np.any(fitting_bins_mask):
        # Create a temporary array to hold scores for fitting bins, initialized to default best-fit.
        fitting_caps_actual = potential_remaining_cap[fitting_bins_mask]
        
        # Initial scoring for fitting bins: regular Best Fit approach (negative of remainder).
        # This prioritizes smaller positive remainders (scores closer to 0).
        # Note: A negative remainder (due to EPSILON_FOR_ZERO tolerance) would get a positive score,
        # but these cases are handled by perfect_fit_mask or small_remainder_mask.
        current_fitting_scores = -fitting_caps_actual

        # Apply specific rules based on the type of remainder:

        # 1. Perfect Fit (remaining capacity is zero or very close to it)
        # Using np.isclose to handle floating-point precision issues for exact zero.
        perfect_fit_mask = np.isclose(fitting_caps_actual, 0.0, atol=EPSILON_FOR_ZERO)
        current_fitting_scores[perfect_fit_mask] = MAX_SCORE_PERFECT_FIT

        # 2. Small, Non-Zero Remainder (considered "dead space")
        # This applies to capacities that are strictly greater than zero (beyond epsilon)
        # but below the defined threshold for "small".
        small_remainder_mask = (fitting_caps_actual > EPSILON_FOR_ZERO) & \
                               (fitting_caps_actual < SMALL_REMAINDER_THRESHOLD)
        current_fitting_scores[small_remainder_mask] = PENALTY_SMALL_FRAGMENT

        # Assign the calculated fitting scores back to the main priority_scores array.
        priority_scores[fitting_bins_mask] = current_fitting_scores

    return priority_scores
```
