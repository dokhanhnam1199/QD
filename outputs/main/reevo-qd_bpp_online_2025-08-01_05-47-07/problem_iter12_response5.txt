```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.

    This heuristic implements a Best-Fit-like strategy that strongly prioritizes
    perfect fits. For cases that are not perfect fits, it falls back to the
    standard Best Fit approach (minimizing remaining capacity).

    The design explicitly prioritizes and leverages problem-specific properties by:
    1. Perfect fits: Assigning an infinitely high priority to bins where the item
       exactly fills the remaining capacity. This aggressively "closes" bins,
       maximizing their utilization and minimizing the total bin count.
    2. Best Fit: For non-perfect fits where the item still fits, prioritizing
       bins that leave the smallest positive remaining capacity. This minimizes
       fragmentation and reserves larger spaces for potentially larger future items.
    3. Invalid placements: Assigning the lowest possible priority (-infinity) to
       bins where the item does not fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Define the exceptionally high score for perfect fits.
    # Using np.inf ensures that a perfect fit is always chosen over any
    # non-perfect fit, regardless of the scale of capacities.
    perfect_fit_score = np.inf

    # Calculate scores for non-perfect fits where the item accommodates.
    # We negate the hypothetical_remaining. A smaller positive remaining capacity
    # results in a larger (less negative) score, implementing Best Fit.
    non_perfect_fit_scores = -hypothetical_remaining

    # Define the conditions for applying scores.
    conditions = [
        hypothetical_remaining == 0,  # Condition 1: Perfect fit
        hypothetical_remaining > 0    # Condition 2: Item fits, but not perfectly
    ]

    # Define the choices (scores) corresponding to each condition.
    choices = [
        perfect_fit_score,            # Score for perfect fits
        non_perfect_fit_scores        # Score for non-perfect fits (Best Fit logic)
    ]

    # Use np.select to assign scores based on the defined conditions.
    # Bins where the item does not fit (hypothetical_remaining < 0) will fall
    # to the 'default' value of -np.inf, ensuring they are never chosen.
    priority_scores = np.select(conditions, choices, default=-np.inf)

    return priority_scores
```
