```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.
    This heuristic implements a Best-Fit-like strategy that strongly prioritizes
    perfect fits. For cases that are not perfect fits, it falls back to the
    standard Best Fit approach (minimizing remaining capacity).
    The design addresses the "Prior reflection" by:
    1. Prioritizing Best Fit for immediate utilization by preferring tighter fits.
    2. Rewarding perfect fits with an exceptionally high score to "fill bins".
    3. Implicitly "penalizing small fragments" by making perfect fits vastly
       more attractive than any non-perfect fit, even those that result in a
       very small remaining capacity. The value of a perfectly utilized bin
       outweighs the marginal benefit of a very small (but non-zero) fragment.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit (hypothetical_remaining < 0)
    # will never be selected by argmax, as their score will remain -np.inf.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # --- Step 1: Identify and assign scores for perfect fits ---
    # A perfect fit leaves exactly 0 capacity remaining.
    perfect_fit_mask = hypothetical_remaining == 0

    # Assign a very high positive score for perfect fits. This score must be
    # guaranteed to be higher than any possible score from a non-perfect fit.
    # If bins_remain_cap is empty, max_bin_capacity would be invalid, handle this.
    if bins_remain_cap.size > 0:
        # A score derived from the max bin capacity ensures it's relative to the problem scale
        # and sufficiently large to dominate any negative scores from non-perfect fits.
        perfect_fit_value = np.max(bins_remain_cap) + 1.0
    else:
        # If there are no bins, the specific value doesn't matter, but set a default.
        perfect_fit_value = 1.0 

    priority_scores[perfect_fit_mask] = perfect_fit_value

    # --- Step 2: Handle bins where the item fits but is not a perfect fit ---
    # These are bins where hypothetical_remaining is positive (0 < hypothetical_remaining <= original_capacity).
    non_perfect_fit_mask = (hypothetical_remaining > 0)

    # For these bins, implement the Best Fit strategy: prioritize bins that result
    # in the smallest remaining capacity. To do this with np.argmax (which selects
    # the maximum score), we negate the hypothetical_remaining.
    # These scores will be negative (or zero if hypothetical_remaining is very small,
    # but still less than 1), ensuring that perfect fits (with their large positive score)
    # are always preferred over any non-perfect fit.
    priority_scores[non_perfect_fit_mask] = -hypothetical_remaining[non_perfect_fit_mask]

    return priority_scores
```
