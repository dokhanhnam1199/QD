```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by explicitly prioritizing perfect fits
    and penalizing the creation of very small, potentially unusable fragments.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Define constants for scoring
    PERFECT_FIT_SCORE = 1e9  # A very large positive score for perfect fits
    # Define what constitutes a "small fragment". This threshold is crucial and might
    # need tuning based on the typical item sizes and bin capacities in your problem.
    # A value like 0.01 implies that any remaining capacity less than 1% of a typical
    # unit bin size (e.g., if max bin capacity is 1.0) is considered a small fragment.
    FRAGMENT_THRESHOLD = 0.01
    SMALL_FRAGMENT_PENALTY_SCORE = -1e6  # A very large negative score for small fragments
    EPSILON = 1e-9  # Small value for float comparisons (to treat near-zero as zero)

    # Calculate the hypothetical remaining capacity for each bin if the item were placed.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to the lowest possible value.
    # Bins where the item does not fit will retain this score, preventing their selection.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # --- Identify different types of fits using boolean masks ---

    # 1. Bins where the item fits (remaining capacity is non-negative, allowing for float precision)
    can_fit_mask = hypothetical_remaining >= -EPSILON

    # 2. Bins resulting in a perfect fit (remaining capacity is practically zero)
    perfect_fit_mask = np.abs(hypothetical_remaining) < EPSILON

    # 3. Bins resulting in a "small fragment" (remaining capacity is positive but below threshold)
    small_fragment_mask = (hypothetical_remaining > EPSILON) & (hypothetical_remaining < FRAGMENT_THRESHOLD)

    # 4. Bins resulting in a "regular" fit (remaining capacity is positive and above threshold)
    # This mask ensures we only consider bins where the item actually fits and
    # the remaining capacity is not a small fragment.
    regular_fit_mask = (hypothetical_remaining >= FRAGMENT_THRESHOLD) & can_fit_mask

    # --- Assign priority scores based on the identified masks ---

    # Assign highest priority to perfect fits
    priority_scores[perfect_fit_mask] = PERFECT_FIT_SCORE

    # Assign a very low priority to bins that would result in small, unusable fragments
    # This directly addresses "avoiding small fragments".
    priority_scores[small_fragment_mask] = SMALL_FRAGMENT_PENALTY_SCORE

    # For regular fits, apply the Best-Fit principle: prioritize bins that result in
    # the smallest remaining capacity (tightest fit).
    # Negating the remaining capacity means a smaller positive remaining (e.g., 0.1)
    # results in a larger score (-0.1) than a larger remaining (e.g., 0.5 -> -0.5).
    priority_scores[regular_fit_mask] = -hypothetical_remaining[regular_fit_mask]

    return priority_scores
```
