```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy to explicitly address
    "strategic consolidation, maximizing bin utilization and avoiding fragmentation."
    It does so by:
    1. Assigning the highest possible priority to perfect fits (0 remaining capacity).
    2. Penalizing bins that, after placement, would result in a very small,
       non-zero remaining capacity (considered 'fragmentation').
    3. For all other valid fits, it applies the standard Best-Fit logic,
       prioritizing bins that leave less remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (i.e., non-negative remaining).
    fits_mask = hypothetical_remaining >= 0

    # Get the hypothetical remaining values only for the bins where the item fits.
    valid_hypothetical_remaining = hypothetical_remaining[fits_mask]

    # --- Heuristic Parameters for Fragmentation ---
    # These values are heuristic parameters. Their optimal values may depend on the specific
    # scale and distribution of item sizes and bin capacities in the problem.
    # Assuming item and bin sizes are normalized (e.g., bin capacity is 1.0).
    FRAGMENT_THRESHOLD = 0.1  # If remaining capacity is > 0 and <= this, it's a fragment.
    # This penalty pushes the priority of fragmenting fits below even looser, non-fragmenting fits.
    # For example, if FRAGMENT_THRESHOLD is 0.1, and a bin leaves 0.05 remaining,
    # its Best-Fit score would be -0.05. We want to penalize it enough to be worse
    # than a bin leaving 0.15 (Best-Fit score -0.15). So, -0.05 - PENALTY < -0.15 => PENALTY > 0.1.
    FRAGMENTATION_PENALTY = 0.2

    # --- Apply Scoring Logic ---

    # 1. Perfect Fit: Assign the highest possible priority.
    # This aligns with "Prioritize perfect/tight fits" and maximizes utilization by completely filling a bin.
    perfect_fit_mask = (valid_hypothetical_remaining == 0)
    priority_scores[fits_mask][perfect_fit_mask] = np.inf

    # 2. Small Fragment Fit: Penalize these options.
    # This directly addresses "avoiding fragmentation".
    small_fragment_mask = (valid_hypothetical_remaining > 0) & \
                          (valid_hypothetical_remaining < FRAGMENT_THRESHOLD)
    
    # For these, the score is based on Best-Fit logic, but with an added penalty.
    # A smaller `hypothetical_remaining` is still better *within this category*,
    # but the penalty pushes the entire category lower than non-fragmenting fits.
    priority_scores[fits_mask][small_fragment_mask] = \
        -(valid_hypothetical_remaining[small_fragment_mask] + FRAGMENTATION_PENALTY)

    # 3. Other Valid Fits (non-perfect, non-fragment): Standard Best-Fit logic.
    # This covers cases where the remaining capacity is large enough not to be considered a fragment.
    standard_fit_mask = (valid_hypothetical_remaining >= FRAGMENT_THRESHOLD)
    
    # Best-Fit: Prioritize smaller remaining capacity (hence the negation).
    priority_scores[fits_mask][standard_fit_mask] = \
        -valid_hypothetical_remaining[standard_fit_mask]

    return priority_scores
```
