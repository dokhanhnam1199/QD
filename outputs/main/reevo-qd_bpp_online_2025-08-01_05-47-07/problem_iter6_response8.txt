```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic refines the Best-Fit strategy by directly computing the negative
    hypothetical remaining capacity for valid bins, and explicitly assigns a
    prohibitively low score to bins where the item does not fit.
    It utilizes NumPy's `where` function for a more concise and direct implementation
    of the conditional logic, adhering to the "tightest fit" principle by
    minimizing remaining capacity while effectively filtering invalid options.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item would overflow the bin.
    hypothetical_remaining = bins_remain_cap - item

    # Use np.where to assign priority scores:
    # If the item fits (hypothetical_remaining is non-negative), the score is
    # the negative of the remaining capacity. This means a smaller positive
    # remaining capacity (a tighter fit, e.g., 0 for a perfect fit) will
    # result in a larger score (e.g., 0).
    # If the item does not fit, assign a very low priority (-np.inf) to ensure
    # these bins are never selected by np.argmax.
    priority_scores = np.where(
        hypothetical_remaining >= 0,  # Condition: True if the item fits in the bin
        -hypothetical_remaining,      # Value if condition is True (Best-Fit logic)
        -np.inf                       # Value if condition is False (item does not fit)
    )

    return priority_scores
```
