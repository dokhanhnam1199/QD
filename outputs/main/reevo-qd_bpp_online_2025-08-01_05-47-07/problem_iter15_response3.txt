```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic enhances the Best-Fit strategy by explicitly giving
    a significantly higher priority score to perfect fits, ensuring they are
    chosen over any non-perfect tight fit. This strongly promotes bin closure
    and efficient space utilization by consolidating items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Define a large bonus value for perfect fits. This value must be strictly
    # greater than any possible score derived from non-perfect fits (which are
    # zero or negative in this Best-Fit scheme).
    PERFECT_FIT_BONUS = 1e9  # A sufficiently large number

    # Create boolean masks for fitting and perfect fitting scenarios.
    fits_mask = hypothetical_remaining >= 0
    perfect_fit_mask = hypothetical_remaining == 0

    # 1. For bins where the item fits (but not perfectly), assign a score based on
    # Best-Fit. A smaller positive hypothetical_remaining (tighter fit) results
    # in a score closer to zero (less negative).
    # This also initially sets perfect fits to 0.
    priority_scores[fits_mask] = -hypothetical_remaining[fits_mask]

    # 2. Explicitly assign a very high bonus score for perfect fits.
    # This overwrites the '0' score for perfect fits from the previous step,
    # making them the highest priority.
    priority_scores[perfect_fit_mask] = PERFECT_FIT_BONUS

    return priority_scores
```
