```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic prioritizes bins based on the proportion of their remaining capacity
    that would be filled by the item. A perfect fit (filling 100% of the remaining
    capacity, or an item of size 0 fitting into a bin with 0 remaining capacity)
    receives the highest possible score of 1.0. Tighter fits (higher proportion filled)
    receive higher scores. Bins where the item does not fit are assigned the lowest
    possible priority. This strategy aims to minimize waste and efficiently close bins
    by favoring options that leave less relative space or perfectly fill a bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax. Use dtype=float to ensure compatibility with -np.inf and float division results.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits.
    # An item fits if its size is less than or equal to the bin's remaining capacity.
    fits_mask = bins_remain_cap >= item

    # For bins where the item fits and have non-zero remaining capacity,
    # calculate the score as the proportion of the bin's remaining capacity
    # that would be filled by the item (item / bins_remain_cap).
    # This naturally assigns higher scores to tighter fits.
    # We explicitly exclude bins with zero remaining capacity here to avoid
    # division by zero, as those will be handled by the perfect_fit_mask.
    non_zero_cap_fits_mask = fits_mask & (bins_remain_cap > 0)
    priority_scores[non_zero_cap_fits_mask] = item / bins_remain_cap[non_zero_cap_fits_mask]

    # Identify bins where the item fits perfectly.
    # This covers cases where item == bins_remain_cap (e.g., 5 into 5)
    # AND the edge case where item == 0 and bins_remain_cap == 0.
    # np.isclose is used for robust floating-point comparison.
    perfect_fit_mask = np.isclose(bins_remain_cap, item)

    # Assign a score of 1.0 to perfect fits. This is the highest possible score
    # for this ratio-based heuristic, ensuring perfect fits are always preferred
    # over any non-perfect fit, regardless of how tight the non-perfect fit is.
    priority_scores[perfect_fit_mask] = 1.0

    return priority_scores
```
