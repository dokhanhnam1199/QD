```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit-like strategy by prioritizing bins
    that will have the least remaining capacity (tightest fit) after the item is placed.
    Bins where the item does not fit are assigned the lowest possible priority.

    This version refines the implementation by using np.where for a more concise
    and direct calculation of priority scores, while maintaining the core Best Fit logic
    of prioritizing bins that result in minimal remaining space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate priority scores directly using np.where:
    # If the item fits in a bin (bins_remain_cap >= item),
    # the score is the negative of the remaining capacity. This way,
    # a smaller positive remaining capacity (e.g., 0 for a perfect fit)
    # yields a larger score (e.g., 0), effectively implementing Best Fit.
    # If the item does not fit, assign a very low priority (-np.inf)
    # to ensure it is never selected.
    priority_scores = np.where(
        bins_remain_cap >= item,                  # Condition: Does the item fit?
        -(bins_remain_cap - item),               # Value if True (item fits): Negated remaining capacity
        -np.inf                                  # Value if False (item does not fit): Lowest possible priority
    )

    return priority_scores
```
