```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation refines the strategy from v1 by using large but finite
    scores for perfect fits and small fragments, instead of infinite values.
    This allows for more nuanced comparisons and potential tie-breaking based
    on the underlying Best Fit logic within broader categories, while still
    maintaining a strong preference for desired outcomes.

    The hierarchy remains:
    1.  **Perfect Fit**: Highest priority (remaining capacity is 0). Gets a large positive bonus.
        If multiple perfect fits exist, their priority will be identical, as the base score
        for a perfect fit is always zero.
    2.  **Avoid Small Fragments**: Lowest priority for bins that would be left with a very small,
        non-zero remaining capacity. Gets a large negative penalty. If multiple such bins exist,
        the one leaving the *smallest* non-zero fragment will be preferred (less negative penalty).
    3.  **Best Fit for Others**: For all other cases where the item fits (i.e., not a perfect fit
        and not a "small fragment"), it prefers bins that leave a smaller positive remainder.
        This follows the Best Fit principle of packing tightly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Define thresholds for remaining capacity types.
    # EPSILON_FOR_ZERO: A very small number to account for floating point inaccuracies
    #                   when checking if a remaining capacity is effectively zero.
    EPSILON_FOR_ZERO = 1e-9

    # Determine a reference for bin capacity to scale bonuses/penalties.
    # This assumes a typical bin capacity. If bins_remain_cap contains capacities
    # of bins that were initially of various sizes, or if all bins are currently
    # very full, using max(bins_remain_cap) might not reflect the 'original'
    # bin capacity. For simplicity and typical BPP, we assume a standard bin
    # capacity, or infer from the largest remaining capacity if at least one bin
    # is mostly empty. If items/bins are normalized (e.g., max capacity 1.0),
    # this can be fixed to 1.0.
    BIN_CAPACITY_REFERENCE = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 1.0
    # Ensure a reasonable minimum reference, e.g., if all bins are very full.
    BIN_CAPACITY_REFERENCE = max(BIN_CAPACITY_REFERENCE, item, 1.0) # Ensure it's not too small or zero

    # Define the "small fragment" threshold relative to the bin capacity reference.
    # A fragment smaller than 5% of the total bin capacity is considered undesirable.
    SMALL_REMAINDER_THRESHOLD = BIN_CAPACITY_REFERENCE * 0.05

    # Define large but finite bonus/penalty values.
    # These values should be significantly larger than the maximum possible
    # range of base Best Fit scores (which is roughly -BIN_CAPACITY_REFERENCE to 0).
    # Multiplying by a factor like 10 or 100 ensures they dominate.
    PERFECT_FIT_BONUS = BIN_CAPACITY_REFERENCE * 100.0
    SMALL_FRAGMENT_PENALTY = -BIN_CAPACITY_REFERENCE * 100.0

    # Calculate the remaining capacity if the item were hypothetically placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priority scores for all bins.
    # Bins where the item does not fit will retain a very low priority.
    # This value ensures they are always less preferred than any bin
    # where the item fits, including those resulting in small fragments.
    priority_scores = np.full_like(bins_remain_cap, SMALL_FRAGMENT_PENALTY * 2, dtype=float)

    # Identify bins where the item can fit.
    # Allow for a very tiny negative due to floating point precision, treating it as 0.
    fitting_bins_mask = potential_remaining_cap >= -EPSILON_FOR_ZERO

    # Extract potential remaining capacities for only the fitting bins.
    fitting_caps_actual = potential_remaining_cap[fitting_bins_mask]

    # Initialize scores for fitting bins using the standard Best Fit approach (negative of remainder).
    # This means smaller positive remainders get higher (less negative) scores.
    # Scores will range from -BIN_CAPACITY_REFERENCE (for item << bin) to 0 (perfect fit).
    base_fitting_scores = -fitting_caps_actual

    # Create a mutable copy for applying category-specific score adjustments.
    current_fitting_scores = np.copy(base_fitting_scores)

    # 1. Perfect Fit (remaining capacity is zero or very close to it)
    perfect_fit_mask = np.isclose(fitting_caps_actual, 0.0, atol=EPSILON_FOR_ZERO)
    # For perfect fits, the base_fitting_score is effectively 0. So, we simply add the bonus.
    current_fitting_scores[perfect_fit_mask] = PERFECT_FIT_BONUS

    # 2. Small, Non-Zero Remainder (considered "dead space")
    # This applies to capacities that are greater than zero but below the threshold.
    small_remainder_mask = (fitting_caps_actual > EPSILON_FOR_ZERO) & \
                           (fitting_caps_actual < SMALL_REMAINDER_THRESHOLD)
    # For small fragments, we add a large negative penalty to their base score.
    # This ensures they are heavily penalized but still retain their relative
    # ordering within the "small fragment" category (e.g., a smaller fragment
    # might be slightly less penalized than a larger one, if forced to choose).
    current_fitting_scores[small_remainder_mask] = SMALL_FRAGMENT_PENALTY + base_fitting_scores[small_remainder_mask]

    # For all other fitting bins (those with larger, "useful" remaining capacities),
    # the initial Best Fit scoring (`-fitting_caps_actual`) remains,
    # ensuring that among these, smaller remainders are still preferred.

    # Assign the calculated fitting scores back to the main priority_scores array.
    priority_scores[fitting_bins_mask] = current_fitting_scores

    return priority_scores
```
