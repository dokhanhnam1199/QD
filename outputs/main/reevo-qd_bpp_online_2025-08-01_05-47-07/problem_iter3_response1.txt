```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a Best-Fit-like strategy by prioritizing bins
    that will have the least remaining capacity (tightest fit) after the item is placed.
    It explicitly assigns the highest possible priority (infinity) to perfect fits (remaining capacity = 0).
    For non-perfect but valid fits, the priority is inversely proportional to the remaining capacity,
    ensuring tighter fits receive higher positive scores. Bins where the item does not fit
    are assigned the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores to a very low value (-infinity) for all bins.
    # This ensures bins where the item does not fit will never be selected by argmax.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # 1. Handle perfect fits: If hypothetical_remaining is exactly 0,
    # assign an infinitely high priority. This makes perfect fits the absolute top choice.
    perfect_fit_mask = hypothetical_remaining == 0
    priority_scores[perfect_fit_mask] = np.inf

    # 2. Handle non-perfect, but valid fits: If item fits and remaining capacity > 0.
    # We want smaller remaining capacity to result in higher scores.
    # Using 1.0 / remaining_capacity achieves this: smaller divisor yields a larger quotient.
    # This correctly implements the Best Fit principle for non-perfect fits.
    loose_fit_mask = hypothetical_remaining > 0
    priority_scores[loose_fit_mask] = 1.0 / hypothetical_remaining[loose_fit_mask]

    # Bins where the item does not fit (hypothetical_remaining < 0) retain their
    # initial -np.inf score, ensuring they are never chosen.

    return priority_scores
```
