```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best-Fit strategy with enhancements for perfect fits
    and penalties for small, potentially unusable fragments.

    This heuristic extends the basic Best-Fit by:
    1. Assigning a very high priority to bins that would be perfectly filled (remaining capacity = 0).
    2. Penalizing bins that would be left with a very small, "fragmented" remaining capacity,
       which might be too small to be useful for future items.
    3. For other cases, it reverts to the standard Best-Fit (prioritizing the tightest fit).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Define constants for priority logic. These values might need tuning
    # based on the specific distribution of item sizes and bin capacities.
    PERFECT_FIT_BONUS = 1e9  # A very large positive score for perfect fits.
                             # Ensures a perfect fit is always chosen if available.

    # This threshold defines what constitutes a "small fragment".
    # Remaining capacities ( > 0 ) that are less than or equal to this value
    # will be penalized. This value should be set considering the typical
    # smallest item size or a percentage of the bin capacity.
    MIN_USEFUL_REMAINDER = 0.1 # Example: If item sizes are usually >= 0.1,
                               # a remaining capacity < 0.1 is likely "unusable".

    FRAGMENT_PENALTY = 1e6   # A large negative penalty applied to bins
                             # that would result in a small fragment.
                             # This pushes their priority significantly lower than useful remainders.

    # Calculate the remaining capacity for each bin if the item were hypothetically placed.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # (as their score will remain -np.inf, which is the lowest possible).
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Create a boolean mask for bins where the item actually fits (i.e.,
    # hypothetical_remaining is non-negative).
    fits_mask = hypothetical_remaining >= 0

    # --- Apply specific scoring based on the hypothetical remaining capacity ---

    # 1. Perfect Fit: If remaining capacity is exactly 0.
    #    This is the ideal outcome, so assign a very high bonus.
    perfect_fit_mask = (hypothetical_remaining == 0) & fits_mask
    priority_scores[perfect_fit_mask] = PERFECT_FIT_BONUS

    # 2. Small Fragment: If remaining capacity is greater than 0 but less than or equal
    #    to MIN_USEFUL_REMAINDER. These are penalized.
    #    The base score is -hypothetical_remaining (Best-Fit logic), then a large penalty is subtracted.
    fragment_mask = (hypothetical_remaining > 0) & (hypothetical_remaining <= MIN_USEFUL_REMAINDER) & fits_mask
    priority_scores[fragment_mask] = -hypothetical_remaining[fragment_mask] - FRAGMENT_PENALTY

    # 3. Useful Remainder: If remaining capacity is greater than MIN_USEFUL_REMAINDER.
    #    Apply standard Best-Fit logic: prioritize bins that result in the smallest
    #    (but still useful) remaining capacity. We negate the remaining capacity
    #    because `np.argmax` selects the highest score (a smaller positive remainder
    #    yields a larger negative score closer to zero).
    useful_remainder_mask = (hypothetical_remaining > MIN_USEFUL_REMAINDER) & fits_mask
    priority_scores[useful_remainder_mask] = -hypothetical_remaining[useful_remainder_mask]

    return priority_scores
```
