```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    eligible_bins = bins_remain_cap >= item
    if not np.any(eligible_bins):
        return priorities

    # Prioritize empty bins
    empty_bins = (bins_remain_cap == 0) & eligible_bins
    priorities[empty_bins] = 1.0  # Highest priority

    # Then prioritize bins with more remaining capacity
    remaining_capacities = bins_remain_cap[eligible_bins]
    
    eligible_bin_indices = np.where(eligible_bins)[0]

    if len(eligible_bin_indices) > 0:
        # Normalize remaining capacities to [0, 1]
        max_capacity = np.max(remaining_capacities)
        if max_capacity > 0:
            normalized_capacities = remaining_capacities / max_capacity
            priorities[eligible_bin_indices] = normalized_capacities

    # Add a small random component to break ties
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    return priorities
```
