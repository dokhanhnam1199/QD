```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Probability of choosing a bin randomly.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the "greedy" priority: inverse of the wasted space if item fits
    for i in range(n_bins):
        if bins_remain_cap[i] >= item:
            priorities[i] = 1.0 / (bins_remain_cap[i] - item)

    # Epsilon-greedy exploration: add a small random value to each bin's priority
    if np.random.rand() < epsilon:
        priorities += np.random.uniform(0, 0.1, n_bins)

    return priorities
```
