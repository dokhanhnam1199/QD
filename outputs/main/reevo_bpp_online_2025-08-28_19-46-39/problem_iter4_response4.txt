```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities  # No bin can fit the item

    # 1. Prioritize empty bins (or bins with very little in them)
    empty_bins = bins_remain_cap <= item * 0.01
    priorities[empty_bins] = 1.0

    # 2. Calculate fit score (sigmoid function) for eligible bins
    fit_scores = np.where(eligible_bins, 1.0 / (1.0 + np.exp(-10 * (bins_remain_cap - item))), 0.0)

    # 3. Prioritize near-size bins
    size_diff = np.where(eligible_bins, np.abs(bins_remain_cap - item), np.inf)
    near_size_bonus = np.where(eligible_bins, np.exp(-size_diff / (item * 0.1)), 0.0)  # Adjust sensitivity

    # 4. Combine scores
    priorities = fit_scores + 0.5 * near_size_bonus

    # Add small random noise to break ties and encourage exploration
    priorities += np.random.rand(len(bins_remain_cap)) * 0.005

    return priorities
```
