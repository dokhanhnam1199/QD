```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit strategy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the ratio of item size to remaining capacity for each bin
    ratios = item / bins_remain_cap
    
    # Initialize priorities to 0
    
    # Give higher priority to bins where the item fits almost perfectly
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            priorities[i] = 1 - (bins_remain_cap[i] - item) / bins_remain_cap[i]  # Almost full
        else:
            priorities[i] = 0
            
    return priorities
```
