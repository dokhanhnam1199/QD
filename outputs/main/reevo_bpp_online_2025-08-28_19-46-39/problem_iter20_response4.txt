```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Calculate fit scores (remaining capacity - item size). Lower is better (tighter fit).
        fit_scores = bins_remain_cap[eligible_bins] - item

        # Use exponentially scaled remainders for priority. Smaller remainder -> higher priority.
        # Add a small constant to avoid division by zero or extremely large values
        priorities[eligible_bins] = np.exp(-fit_scores / (np.mean(bins_remain_cap[eligible_bins]) + 1e-6))

        # Normalize priorities to avoid issues with scaling
        priorities[eligible_bins] /= np.max(priorities[eligible_bins]) if np.max(priorities[eligible_bins]) > 0 else 1.0

        # Dynamic exploration strength based on bin fullness
        fullness = 1 - (np.sum(bins_remain_cap) / len(bins_remain_cap) / np.mean(bins_remain_cap) if np.mean(bins_remain_cap) > 0 else 1.0) #average fullness
        exploration_strength = fullness * 0.5 + 0.1

        # Epsilon-greedy exploration: with probability proportional to fullness, assign a random priority to eligible bins
        if np.random.rand() < fullness:
            random_bin_indices = np.where(eligible_bins)[0]
            random_index = np.random.choice(random_bin_indices)
            priorities[random_index] += np.random.rand() * exploration_strength * (np.mean(bins_remain_cap[eligible_bins]) / item)
            priorities[random_index] = min(priorities[random_index], 1.0) #clip to avoid extreme values
    return priorities
```
