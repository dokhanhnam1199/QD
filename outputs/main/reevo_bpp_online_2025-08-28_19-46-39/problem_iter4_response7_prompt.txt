{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, using Sigmoid Fit Score.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the fitness score for each bin using a sigmoid function.\n    # The sigmoid function maps the remaining capacity to a value between 0 and 1,\n    # where 1 indicates a perfect fit and 0 indicates no fit.\n    # We use the item size as a scaling factor to adjust the sigmoid curve.\n    # Add a small constant to bins_remain_cap to avoid division by zero and instability.\n    bins_remain_cap = np.maximum(bins_remain_cap, 1e-6)\n    sigmoid_input = (bins_remain_cap - item) / item\n    priorities = 1 / (1 + np.exp(-sigmoid_input))\n\n    # Further boost the priority of bins that have very little remaining capacity,\n    # to encourage filling up those bins first. This can help reduce the total\n    # number of bins used. Add a small constant to item size to avoid division by zero.\n    item = np.maximum(item, 1e-6)\n    priorities = priorities * (bins_remain_cap / item)\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if np.any(possible_bins):\n        # Prioritize bins with less remaining capacity (better fit)\n        fit_score = 1.0 / (bins_remain_cap[possible_bins] - item + 1e-6)\n        # Add a diversity bonus:  bins that are less full get a slight boost.\n        # This encourages exploration and avoids filling up bins too quickly.\n        diversity_bonus = (bins_remain_cap[possible_bins] / np.max(bins_remain_cap) ) * 0.1\n        # Add some randomness for exploration\n        randomness = np.random.rand(np.sum(possible_bins)) * 1e-6\n        priorities[possible_bins] = fit_score + diversity_bonus + randomness\n    return priorities\n\n[Reflection]\nPrioritize fit, encourage diversity, and add small randomness for exploration\u2014avoid premature convergence.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}