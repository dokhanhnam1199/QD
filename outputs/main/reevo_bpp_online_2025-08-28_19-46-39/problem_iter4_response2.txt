```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    possible_bins = bins_remain_cap >= item

    if np.any(possible_bins):
        # Prioritize tight fits
        fit_score = 1.0 / (bins_remain_cap[possible_bins] - item + 1e-6)

        # Encourage diversity: bins that are less full get a boost.
        diversity_bonus = (bins_remain_cap[possible_bins] / np.max(bins_remain_cap)) * 0.2

        # Add some randomness for exploration
        randomness = np.random.rand(np.sum(possible_bins)) * 1e-5

        priorities[possible_bins] = fit_score + diversity_bonus + randomness

    return priorities
```
