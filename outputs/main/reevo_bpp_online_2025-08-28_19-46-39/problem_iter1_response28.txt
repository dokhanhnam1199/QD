```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    num_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate greedy priority (best fit)
    best_fit_bin_index = np.argmax(bins_remain_cap >= item) if np.any(bins_remain_cap >= item) else -1
    if best_fit_bin_index != -1:
        priorities[best_fit_bin_index] = bins_remain_cap[best_fit_bin_index] - item

    # Exploration
    if np.random.rand() < epsilon:
        # Assign random priorities to bins that can fit the item
        available_bins = np.where(bins_remain_cap >= item)[0]
        if len(available_bins) > 0:
            random_bin_index = np.random.choice(available_bins)
            priorities[random_bin_index] = np.random.rand()

    # Add a small bonus to bins that aren't too full
    for i in range(num_bins):
        if bins_remain_cap[i] >= item:
            priorities[i] += 0.1 * (bins_remain_cap[i] - item) # Encourage fitting items

    return priorities
```
