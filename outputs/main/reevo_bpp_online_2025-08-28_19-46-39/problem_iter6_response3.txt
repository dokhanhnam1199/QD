```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a refined strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Calculate bin densities
        bin_densities = 1.0 - (bins_remain_cap[eligible_bins] / np.max(bins_remain_cap))

        # Best-fit: Prioritize bins with smallest remaining capacity after placing the item
        remaining_space = bins_remain_cap[eligible_bins] - item
        best_fit_bin_index = np.argmin(remaining_space)
        best_fit_bin_index = np.where(eligible_bins)[0][best_fit_bin_index]
        
        # Prioritize based on density (lower density is better) and best-fit
        priorities[best_fit_bin_index] = 1.0 / (remaining_space[best_fit_bin_index] + 1e-6) + bin_densities[best_fit_bin_index]

        # Epsilon-greedy exploration: Assign random priorities to other eligible bins
        if np.random.rand() < epsilon:
            other_eligible_bins = eligible_bins.copy()
            other_eligible_bins[best_fit_bin_index] = False
            other_bin_indices = np.where(other_eligible_bins)[0]
            if len(other_bin_indices) > 0:
                random_priorities = np.random.rand(len(other_bin_indices))
                priorities[other_bin_indices] = random_priorities
            

    return priorities
```
