[
  {
    "stdout_filepath": "problem_iter26_response0.txt_stdout.txt",
    "code_path": "problem_iter26_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamically tuned exploration based on item size and bin capacity\n        epsilon = 0.1 + 0.2 * (item / np.max(bins_remain_cap))  # Adjust epsilon range\n        epsilon = np.clip(epsilon, 0.05, 0.5)  # Ensure epsilon is within a reasonable range\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n\n        # Scale exploration by bin capacity. Smaller bins get more boost.\n        priorities += random_boost / (bins_remain_cap + 1e-6)  # Scale by bin capacity and avoid division by zero\n\n    return priorities",
    "response_id": 0,
    "obj": 3.4603111288392543,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 159.81495041679716,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response1.txt_stdout.txt",
    "code_path": "problem_iter26_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Adaptive Exploration: Scale exploration with bin utilization\n        bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n        exploration_rate = 0.1 * (1 - bin_utilization)  # Higher rate for less utilized bins\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * exploration_rate / (bins_remain_cap + 1e-6)\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n\n    return priorities",
    "response_id": 1,
    "obj": 31.87076186677305,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 175.93083758004835,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response2.txt_stdout.txt",
    "code_path": "problem_iter26_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Scaled Randomness Exploration\n        epsilon = 0.3\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost / (bins_remain_cap + 1e-6)  # Scale by bin capacity, avoid division by zero\n\n    return priorities",
    "response_id": 2,
    "obj": 3.5101715197447194,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response3.txt_stdout.txt",
    "code_path": "problem_iter26_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamically adjusted exploration rate\n        epsilon = 0.3 / (np.mean(bins_remain_cap) + 1e-6)  # Adjust epsilon based on average remaining capacity\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n\n        priorities += random_boost / (bins_remain_cap + 1e-6)  # Scale by bin capacity, avoid division by zero\n\n    return priorities",
    "response_id": 3,
    "obj": 3.9988033506182825,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 142.13383752235586,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response4.txt_stdout.txt",
    "code_path": "problem_iter26_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Scaled Randomness Exploration\n        epsilon = 0.3\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)  # avoid division by zero\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n\n    return priorities",
    "response_id": 4,
    "obj": 3.520143597925803,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response5.txt_stdout.txt",
    "code_path": "problem_iter26_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Scaled Randomness Exploration\n        epsilon = 0.05  # Further reduced exploration rate\n        scale = 0.5  # Reduced scale\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n    return priorities",
    "response_id": 5,
    "obj": 3.6796968488233035,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response6.txt_stdout.txt",
    "code_path": "problem_iter26_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Scaled Randomness Exploration with dynamic exploration rate\n        epsilon = 0.5  # Increased exploration rate\n        scale = 1.2  # Adjusted scaling\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)  # avoid division by zero\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n\n    return priorities",
    "response_id": 6,
    "obj": 3.4603111288392543,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response7.txt_stdout.txt",
    "code_path": "problem_iter26_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamic Scaled Randomness Exploration\n        epsilon = 0.5  # Increased epsilon for more exploration\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)\n        random_boost[~eligible_bins] = 0.0\n        priorities += random_boost\n\n    return priorities",
    "response_id": 7,
    "obj": 3.320702034303945,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response8.txt_stdout.txt",
    "code_path": "problem_iter26_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Fixed Exploration Rate and Scaled Randomness\n        exploration_rate = 0.1\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * exploration_rate / (bins_remain_cap + 1e-6)\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n    return priorities",
    "response_id": 8,
    "obj": 3.4802552852014452,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response9.txt_stdout.txt",
    "code_path": "problem_iter26_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamically tuned exploration based on item size and bin capacity\n        epsilon = 0.1 + 0.2 * (item / np.max(bins_remain_cap))  # Adjust epsilon range\n        epsilon = np.clip(epsilon, 0.01, 0.6)  # Ensure epsilon is within a reasonable range\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n\n        # Scale by bin capacity and avoid division by zero, add a small constant to bins_remain_cap\n        priorities += random_boost / (bins_remain_cap + 1e-6)\n\n    return priorities",
    "response_id": 9,
    "obj": 3.4603111288392543,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 159.81495041679716,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response0.txt_stdout.txt",
    "code_path": "problem_iter27_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamic Scaled Randomness Exploration\n        epsilon = 0.5\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)\n        random_boost[~eligible_bins] = 0.0\n        priorities += random_boost\n\n    return priorities",
    "response_id": 0,
    "obj": 3.4204228161148738,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response1.txt_stdout.txt",
    "code_path": "problem_iter27_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n    # Dynamic Scaled Randomness Exploration\n    epsilon = 0.5  # Increased epsilon for more exploration\n    scale = 1.0\n    random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)\n    random_boost[~eligible_bins] = 0.0\n    priorities += random_boost\n\n    return priorities",
    "response_id": 1,
    "obj": 3.4004786597527064,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response2.txt_stdout.txt",
    "code_path": "problem_iter27_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n    # Dynamic Scaled Randomness Exploration\n    epsilon = 0.2  # Reduced epsilon for more robustness\n    scale = 1.0\n    random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)\n    random_boost[~eligible_bins] = 0.0\n    priorities += random_boost\n\n    return priorities",
    "response_id": 2,
    "obj": 3.5001994415636353,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response3.txt_stdout.txt",
    "code_path": "problem_iter27_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n    # Dynamic Scaled Randomness Exploration\n    epsilon = 0.2  # Increased epsilon for more exploration\n    scale = 1.0\n    random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)\n    random_boost[~eligible_bins] = 0.0\n    priorities += random_boost\n\n    return priorities",
    "response_id": 3,
    "obj": 3.450339050658171,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response4.txt_stdout.txt",
    "code_path": "problem_iter27_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamic Scaled Randomness Exploration\n        epsilon = 0.2  # Base exploration rate\n        scale = 1.0\n\n        # Adjust exploration based on bin capacity\n        bin_capacity = np.max(bins_remain_cap) + 1e-6 # prevent zero division\n\n        epsilon = epsilon * (bin_capacity / (item + 1e-6)) # Increase epsilon with larger bins\n\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)\n        random_boost[~eligible_bins] = 0.0\n        priorities += random_boost\n\n    return priorities",
    "response_id": 4,
    "obj": 3.430394894295981,
    "SLOC": 14.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 171.8226790216648,
    "exec_success": true
  }
]