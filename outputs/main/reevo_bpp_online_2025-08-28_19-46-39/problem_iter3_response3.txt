```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities  # No bin can fit the item

    # 1. Prioritize empty bins
    empty_bins = bins_remain_cap == 0
    priorities[empty_bins] = 1.0

    # 2. Prioritize near-size bins
    fit_ratio = (bins_remain_cap[eligible_bins] - item) / bins_remain_cap[eligible_bins]
    near_size_priority = 1.0 - fit_ratio  # Lower fit_ratio = better fit
    priorities[eligible_bins] += near_size_priority

    # 3. Sigmoid scaling of remaining capacity (smoothness)
    sigmoid_scale = 1.0 / (1.0 + np.exp(-bins_remain_cap[eligible_bins] / item - 1.0))
    priorities[eligible_bins] += sigmoid_scale * 0.5

    # Add a small amount of random noise to avoid deterministic choices
    noise = np.random.rand(len(bins_remain_cap)) * 0.01
    priorities += noise

    return priorities
```
