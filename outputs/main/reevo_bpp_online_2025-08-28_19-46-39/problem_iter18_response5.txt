```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_count: int, exploration_rate: float = 0.05) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_count: Total number of bins.
        exploration_rate: Probability of choosing a random bin for exploration.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        fit_scores = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = np.exp(-fit_scores)  # Exploit: tighter fit = higher priority

        # Epsilon-greedy exploration with dynamic boost
        if np.random.rand() < exploration_rate:
            random_bin_indices = np.where(eligible_bins)[0]
            random_index = np.random.choice(random_bin_indices)

            # Scale random boost by remaining capacity and bin count
            boost = np.random.rand() * 0.1 * (bins_remain_cap[random_index] / np.max(bins_remain_cap)) * (1 / bin_count)
            priorities[random_index] += boost

    return priorities
```
