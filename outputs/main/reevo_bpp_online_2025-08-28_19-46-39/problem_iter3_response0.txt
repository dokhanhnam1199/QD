```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities  # No suitable bin

    # 1. Prioritize empty bins
    empty_bins = bins_remain_cap == 0
    priorities[empty_bins & eligible_bins] = 0.9

    # 2. Prioritize bins with near-size fit (sigmoid scaling)
    fit_ratios = (bins_remain_cap[eligible_bins] - item) / bins_remain_cap[eligible_bins]
    sigmoid_scores = 1 / (1 + np.exp(-5 * (0.5 - fit_ratios)))  # Sigmoid centered at 0.5
    priorities[eligible_bins] = sigmoid_scores

    # 3. Add a small amount of randomness to avoid deterministic choices
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
