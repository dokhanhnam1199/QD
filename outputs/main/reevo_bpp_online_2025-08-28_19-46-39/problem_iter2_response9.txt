```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fitness score for each bin using a sigmoid function.
    # The sigmoid function maps the remaining capacity to a value between 0 and 1,
    # where 1 indicates a perfect fit and 0 indicates no fit.
    # We use the item size as a scaling factor to adjust the sigmoid curve.
    # Add a small constant to bins_remain_cap to avoid division by zero and instability.
    bins_remain_cap = np.maximum(bins_remain_cap, 1e-6)
    sigmoid_input = (bins_remain_cap - item) / item
    priorities = 1 / (1 + np.exp(-sigmoid_input))

    # Further boost the priority of bins that have very little remaining capacity,
    # to encourage filling up those bins first. This can help reduce the total
    # number of bins used. Add a small constant to item size to avoid division by zero.
    item = np.maximum(item, 1e-6)
    priorities = priorities * (bins_remain_cap / item)
    return priorities
```
