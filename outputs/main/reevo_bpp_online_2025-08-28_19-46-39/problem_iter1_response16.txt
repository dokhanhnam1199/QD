```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using Sigmoid Fit Score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fitness score for each bin using a sigmoid function.
    # The sigmoid function maps the remaining capacity to a value between 0 and 1,
    # where 1 indicates a perfect fit and 0 indicates no fit.
    # We use the item size as a scaling factor to adjust the sigmoid curve.

    # Add a small constant to bins_remain_cap to avoid division by zero
    bins_remain_cap = np.maximum(bins_remain_cap, 1e-6) 

    sigmoid_input = (bins_remain_cap - item) / item
    priorities = 1 / (1 + np.exp(-sigmoid_input))

    return priorities
```
