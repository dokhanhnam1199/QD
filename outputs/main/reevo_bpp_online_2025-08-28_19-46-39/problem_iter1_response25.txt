```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the item size and the remaining capacity of each bin.
    diffs = np.abs(item - bins_remain_cap)

    # Avoid division by zero by adding a small constant to the differences.
    diffs = np.where(diffs == 0, 1e-6, diffs)

    # Calculate the inverse distance (proximity fit) score.  Smaller difference = higher score
    priorities = 1.0 / diffs

    #Handle bins that are smaller than the item so the score can't be infinity.
    priorities[bins_remain_cap < item] = -np.inf
    
    return priorities
```
