{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    # Exact Fit First: Give highest priority to bins where item fits exactly\n    exact_fit_mask = (bins_remain_cap == item)\n    priorities[exact_fit_mask] = 1.0\n\n    # If no exact fit, prioritize bins with the smallest remaining capacity\n    # that can still accommodate the item.\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        priorities[valid_bins] = 1.0 / bins_remain_cap[valid_bins]\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Sigmoid Fit Score.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the fit score for each bin\n    fit_scores = item / bins_remain_cap\n\n    # Apply a sigmoid function to the fit scores.  A larger fit score will result in\n    # a priority closer to 1, representing a better fit.  The sigmoid function\n    # ensures that the score remains between 0 and 1. We also introduce a scaling factor\n    # (e.g., 4) and a shift (e.g., -2) to adjust the sigmoid's slope and center.\n    # This could be tuned during experimentation.  Adjusting the sigmoid's shape\n    # will influence the strategy; a steeper slope means more aggressive use of tight bins.\n    sigmoid_scores = 1 / (1 + np.exp(-4 * (fit_scores - 0.5)))\n\n    # Penalize bins that have very small remaining capacity. Adding the item to an\n    # almost full bin can lead to fragmentation.\n    capacity_penalty = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    sigmoid_scores = sigmoid_scores * capacity_penalty\n\n    # Additional penalty if the item doesn't fit at all in a particular bin. Avoids NaNs.\n    no_fit_penalty = np.where(bins_remain_cap < item, 0.0, 1.0)  #set to 0 if not fit, else 1\n    sigmoid_scores = sigmoid_scores * no_fit_penalty\n    \n\n    return sigmoid_scores\n\n[Reflection]\nPrioritize fit *and* avoid fragmentation; sigmoid scaling & penalties are key for nuanced bin selection.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}