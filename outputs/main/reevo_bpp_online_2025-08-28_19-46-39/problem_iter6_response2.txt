```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.05) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Calculate fit scores (tightest fit first)
        fit_scores = bins_remain_cap[eligible_bins] - item
        fit_scores = 1.0 / (fit_scores + 1e-6)  # Avoid division by zero, prioritize tighter fits

        # Normalize fit scores using sigmoid function
        sigmoid_scale = 5.0  # Adjust for desired sigmoid steepness
        fit_priorities = 1.0 / (1.0 + np.exp(-sigmoid_scale * fit_scores))

        # Assign priorities to eligible bins
        priorities[eligible_bins] = fit_priorities

        # Epsilon-greedy exploration
        if np.random.rand() < epsilon:
            random_bin_indices = np.where(eligible_bins)[0]
            random_index = np.random.choice(random_bin_indices)
            priorities[random_index] = np.random.rand()

    return priorities
```
