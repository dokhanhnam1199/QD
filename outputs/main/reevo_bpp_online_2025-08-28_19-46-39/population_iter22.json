[
  {
    "stdout_filepath": "problem_iter22_response0.txt_stdout.txt",
    "code_path": "problem_iter22_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamically tuned exploration with decaying randomness\n        epsilon = 0.05  # Reduced exploration rate\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-9)  # Avoid division by zero\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n\n    return priorities",
    "response_id": 0,
    "obj": 3.5899481451934583,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response1.txt_stdout.txt",
    "code_path": "problem_iter22_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Scaled Randomness Exploration with dynamic exploration rate\n        epsilon = 0.3\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)  # avoid division by zero\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n\n    return priorities",
    "response_id": 1,
    "obj": 3.430394894295981,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response2.txt_stdout.txt",
    "code_path": "problem_iter22_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Scaled Randomness Exploration\n        epsilon = 0.3\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n    return priorities",
    "response_id": 2,
    "obj": 3.4403669724770642,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response3.txt_stdout.txt",
    "code_path": "problem_iter22_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores / item)  # Normalize by item size\n\n        # Epsilon-greedy exploration with decaying epsilon\n        epsilon = 0.005  # Start with a lower epsilon\n        if np.random.rand() < epsilon:\n            random_bin_indices = np.where(eligible_bins)[0]\n            random_index = np.random.choice(random_bin_indices)\n            priorities[random_index] += np.random.rand() * 0.02  # Adjusted randomness scale\n\n    return priorities",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 83.39850002884624,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response4.txt_stdout.txt",
    "code_path": "problem_iter22_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n    # Scaled Randomness Exploration with dynamic exploration rate\n    epsilon = 0.05  # Reduced exploration rate\n    scale = 0.5\n    random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)  # Avoid division by zero\n    random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n    priorities += random_boost\n\n    return priorities",
    "response_id": 4,
    "obj": 3.6796968488233035,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response5.txt_stdout.txt",
    "code_path": "problem_iter22_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Exponential scaling for tightest fit\n\n        # Epsilon-greedy exploration with decaying epsilon\n        epsilon = 0.01\n        if np.random.rand() < epsilon:\n            random_bin_indices = np.where(eligible_bins)[0]\n            random_index = np.random.choice(random_bin_indices)\n            priorities[random_index] += np.random.rand() * 0.01  # Reduced randomness scale\n    return priorities",
    "response_id": 5,
    "obj": 4.038691663342641,
    "SLOC": 12.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 68.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response6.txt_stdout.txt",
    "code_path": "problem_iter22_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Scaled Randomness Exploration\n        epsilon = 0.2\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-9)\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n\n    return priorities",
    "response_id": 6,
    "obj": 3.430394894295981,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response7.txt_stdout.txt",
    "code_path": "problem_iter22_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Adaptive Exploration Rate: based on average bin fullness\n        avg_remaining_cap = np.mean(bins_remain_cap[eligible_bins])\n        max_cap = np.max(bins_remain_cap)\n        epsilon = 0.1 * (1.0 - (avg_remaining_cap / max_cap))  # Lower epsilon when bins are fuller, base epsilon at 0.1\n        epsilon = max(0.0, min(0.5, epsilon))  # Clamp epsilon between 0 and 0.5\n\n        # Epsilon-greedy exploration with controlled random boost\n        if np.random.rand() < epsilon:\n            random_bin_indices = np.where(eligible_bins)[0]\n            random_index = np.random.choice(random_bin_indices)\n            priorities[random_index] += np.random.rand() * 0.05  # Control random boost magnitude (0.05)\n\n    return priorities",
    "response_id": 7,
    "obj": 4.048663741523748,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 117.61261085748234,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response8.txt_stdout.txt",
    "code_path": "problem_iter22_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamically tuned exploration based on item size and bin capacity\n        epsilon = 0.1 * (item / np.max(bins_remain_cap))  # Item-aware exploration\n        epsilon = max(0.01, epsilon)  # Ensure minimum exploration\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)  # Avoid division by zero\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n\n    return priorities",
    "response_id": 8,
    "obj": 3.6298364579178393,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 142.13383752235586,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response9.txt_stdout.txt",
    "code_path": "problem_iter22_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamic Exploration Rate and Scaled Randomness\n        exploration_rate = 0.1  # Initial exploration rate\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * exploration_rate / (bins_remain_cap + 1e-6)\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n\n    return priorities",
    "response_id": 9,
    "obj": 3.540087754287994,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  }
]