```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit strategy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the difference between the item size and the remaining capacity of each bin.
    # Smaller difference means better fit, so higher priority.
    diffs = bins_remain_cap - item

    # Only consider bins that can fit the item
    valid_bins = diffs >= 0

    if not np.any(valid_bins):
        return priorities  # No bin can fit the item.

    # Assign priority based on how well the item fits
    priorities[valid_bins] = diffs[valid_bins]

    # If there's a tie (same remaining space), prioritize bins with smaller capacity
    # to potentially leave larger bins open for future items
    
    return priorities
```
