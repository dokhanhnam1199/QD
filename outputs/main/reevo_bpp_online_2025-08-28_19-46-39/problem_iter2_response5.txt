```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the difference between the item size and the remaining capacity of each bin.
    diffs = bins_remain_cap - item
    
    # Handle bins that are smaller than the item. Assign a large negative score.
    priorities[diffs < 0] = -np.inf
    
    # For bins where the item fits, calculate the inverse distance.
    valid_bins = diffs >= 0
    
    # Avoid division by zero by adding a small constant to the differences.
    diffs_valid = diffs[valid_bins]
    diffs_valid = np.where(diffs_valid == 0, 1e-6, diffs_valid)
    
    priorities[valid_bins] = 1.0 / diffs_valid
    
    return priorities
```
