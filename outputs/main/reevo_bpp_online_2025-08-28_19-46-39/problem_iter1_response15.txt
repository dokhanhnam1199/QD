```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Avoid division by zero by setting a small value if remaining capacity is zero
    remain_cap = np.where(bins_remain_cap == 0, 1e-6, bins_remain_cap)
    
    # Calculate the inverse distance (proximity fit)
    priorities = 1.0 / (remain_cap - item)
    
    #Handle cases where item is bigger than bin capacity
    priorities[remain_cap < item] = -np.inf # Assign low priority if item doesn't fit
    
    return priorities
```
