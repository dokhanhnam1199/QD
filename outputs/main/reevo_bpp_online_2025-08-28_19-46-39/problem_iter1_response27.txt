```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Find bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item
    
    # If no bins can fit the item, return zero priorities
    if not np.any(eligible_bins):
        return priorities
    
    # Assign priority randomly to the eligible bins
    num_eligible_bins = np.sum(eligible_bins)
    
    # Assign priorities uniformly at random
    random_priorities = np.random.rand(num_eligible_bins)
    
    # Add the random priorities to the eligible bins
    eligible_bin_indices = np.where(eligible_bins)[0]
    priorities[eligible_bin_indices] = random_priorities

    return priorities
```
