```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using Softmax-Based Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate fit scores: how well the item fits into each bin
    fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)

    # Normalize fit scores using softmax to get probabilities
    exp_fit = np.exp(fit_scores / 1.0)  # Temperature parameter controls randomness; 1.0 is a good starting point
    probabilities = exp_fit / np.sum(exp_fit)

    # Handle the case where all bins are too small (prevent division by zero and assign zero probability)
    if np.sum(exp_fit) == 0:
        probabilities = np.zeros_like(bins_remain_cap)

    return probabilities
```
