```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score with improved penalties and tuning.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin.  Higher is better.
    fit_scores = item / bins_remain_cap
    fit_scores[np.isinf(fit_scores)] = 0.0  # Handle cases where item > bin_remain_cap

    # Apply a sigmoid function to the fit scores to normalize and enhance selection.
    # Scaling factor (k) controls the steepness, and shift (x0) controls the center.
    k = 5.0  # Increased steepness for more selective binning
    x0 = 0.4  # Adjusted center to favor reasonably full bins
    sigmoid_scores = 1 / (1 + np.exp(-k * (fit_scores - x0)))

    # Penalize bins that have very small remaining capacity. This discourages fragmentation.
    capacity_penalty = bins_remain_cap / np.max(bins_remain_cap)
    sigmoid_scores = sigmoid_scores * capacity_penalty

    # Strict penalty for bins where the item doesn't fit at all. This is crucial.
    no_fit_penalty = np.where(bins_remain_cap < item, 0.0, 1.0)
    sigmoid_scores = sigmoid_scores * no_fit_penalty

    # Add a small amount of randomness for exploration, particularly when multiple bins have similar scores
    randomness = np.random.rand(len(bins_remain_cap)) * 1e-6
    sigmoid_scores = sigmoid_scores + randomness

    return sigmoid_scores
```
