```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1, adaptive_epsilon: bool = True, current_item_index: int = 0, total_items: int = 100) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        epsilon: Exploration rate for epsilon-greedy approach.
        adaptive_epsilon: Whether to adapt epsilon based on the item index.
        current_item_index: The index of the current item being packed (for adaptive epsilon).
        total_items: The total number of items to be packed.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        fit_scores = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = np.exp(-fit_scores)

        # Adaptive epsilon-greedy exploration
        if adaptive_epsilon:
            epsilon = max(0.01, 1 - (current_item_index / total_items))  # Reduce epsilon over time

        if np.random.rand() < epsilon:
            random_bin_indices = np.where(eligible_bins)[0]
            random_index = np.random.choice(random_bin_indices)
            priorities[random_index] = np.random.rand() * 0.5  # Assign a random priority, but capped at 0.5

    return priorities
```
