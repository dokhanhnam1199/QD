```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure bins_remain_cap is a numpy array
    bins_remain_cap = np.array(bins_remain_cap)

    # Calculate the fitness score for each bin.  Use a sigmoid function to scale the fit.
    # A high score indicates a good fit (item fits well into the bin).

    # Avoid division by zero and handle negative capacities.
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    fit_scores = np.zeros_like(bins_remain_cap, dtype=float)
    fit_scores[valid_bins] = 1.0 / (1.0 + np.exp(-5 * (bins_remain_cap[valid_bins] - item)))

    # Apply a bonus for bins that are closer to being full. Helps to consolidate.
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    fit_scores += 0.1 * fullness

    return fit_scores
```
