{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Epsilon-Greedy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        epsilon: Exploration rate.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Calculate fit score (smaller remaining capacity after placing item is better)\n        fit_score = 1.0 / (bins_remain_cap[eligible_bins] - item + 1e-6)\n        \n        # Normalize fit scores to be between 0 and 1\n        fit_score = (fit_score - np.min(fit_score)) / (np.max(fit_score) - np.min(fit_score))\n\n        # Assign fit score to eligible bins\n        bin_indices = np.where(eligible_bins)[0]\n        priorities[bin_indices] = fit_score\n\n        # Epsilon-greedy exploration\n        if np.random.rand() < epsilon:\n            # Assign a random priority to eligible bins\n            random_indices = np.random.choice(bin_indices, size=len(bin_indices), replace=False)\n            random_priorities = np.random.rand(len(bin_indices))\n            priorities[random_indices] = random_priorities\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        epsilon: Exploration rate for epsilon-greedy approach.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = -fit_scores  # Prioritize tighter fits (smaller difference)\n\n        # Epsilon-greedy exploration: with probability epsilon, add a small random value\n        if np.random.rand() < epsilon:\n            random_bin_indices = np.where(eligible_bins)[0]\n            random_index = np.random.choice(random_bin_indices)\n            priorities[random_index] += np.random.rand() * 0.1 # Add small random value\n\n    return priorities\n\n[Reflection]\nPrioritize tighter fits directly; focused epsilon-greedy on *one* bin boosts exploration effectiveness.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}