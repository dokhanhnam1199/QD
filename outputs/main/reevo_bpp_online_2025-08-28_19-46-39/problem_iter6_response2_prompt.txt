{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Sigmoid Fit Score with improved penalties and tuning.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the fit score for each bin.  Higher is better.\n    fit_scores = item / bins_remain_cap\n    fit_scores[np.isinf(fit_scores)] = 0.0  # Handle cases where item > bin_remain_cap\n\n    # Apply a sigmoid function to the fit scores to normalize and enhance selection.\n    # Scaling factor (k) controls the steepness, and shift (x0) controls the center.\n    k = 5.0  # Increased steepness for more selective binning\n    x0 = 0.4  # Adjusted center to favor reasonably full bins\n    sigmoid_scores = 1 / (1 + np.exp(-k * (fit_scores - x0)))\n\n    # Penalize bins that have very small remaining capacity. This discourages fragmentation.\n    capacity_penalty = bins_remain_cap / np.max(bins_remain_cap)\n    sigmoid_scores = sigmoid_scores * capacity_penalty\n\n    # Strict penalty for bins where the item doesn't fit at all. This is crucial.\n    no_fit_penalty = np.where(bins_remain_cap < item, 0.0, 1.0)\n    sigmoid_scores = sigmoid_scores * no_fit_penalty\n\n    # Add a small amount of randomness for exploration, particularly when multiple bins have similar scores\n    randomness = np.random.rand(len(bins_remain_cap)) * 1e-6\n    sigmoid_scores = sigmoid_scores + randomness\n\n    return sigmoid_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        epsilon: Exploration rate.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Calculate fit scores (tightest fit first)\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        fit_scores = 1.0 / (fit_scores + 1e-6)  # Avoid division by zero and prioritize tighter fits\n\n        # Normalize fit scores using sigmoid function\n        sigmoid_scale = 1.0\n        fit_priorities = 1.0 / (1.0 + np.exp(-sigmoid_scale * fit_scores))\n\n        # Assign priorities to eligible bins\n        priorities[eligible_bins] = fit_priorities\n\n        # Epsilon-greedy exploration\n        if np.random.rand() < epsilon:\n            random_bin_indices = np.where(eligible_bins)[0]\n            random_index = np.random.choice(random_bin_indices)\n            priorities[random_index] = np.random.rand()\n\n    return priorities\n\n[Reflection]\nPrioritize tightest fit, normalize scores (sigmoid), and use epsilon-greedy for exploration & diversification. \n\n\n\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}