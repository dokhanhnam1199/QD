```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a refined sigmoid fit score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin.  Lower is better (less wasted space)
    fit_scores = item / bins_remain_cap
    fit_scores[np.isinf(fit_scores)] = 1.0  # Cap at 1.0 to avoid inf, item cannot fit.

    # Apply a sigmoid function to the fit scores. A larger fit score will result in
    # a priority closer to 0, representing a worse fit.  The sigmoid function
    # ensures that the score remains between 0 and 1.  We also introduce a scaling factor
    # (e.g., 5) and a shift (e.g., -1) to adjust the sigmoid's slope and center.
    # This could be tuned during experimentation.
    sigmoid_scores = 1 / (1 + np.exp(-5 * (fit_scores - 0.5)))

    # Penalize bins that have very small remaining capacity. Adding the item to an
    # almost full bin can lead to fragmentation.
    capacity_penalty = bins_remain_cap / np.max(bins_remain_cap)
    sigmoid_scores = sigmoid_scores * capacity_penalty

    # Additional penalty if the item doesn't fit at all in a particular bin.
    no_fit_penalty = np.where(bins_remain_cap < item, 0.0, 1.0)
    sigmoid_scores = sigmoid_scores * no_fit_penalty

    return sigmoid_scores
```
