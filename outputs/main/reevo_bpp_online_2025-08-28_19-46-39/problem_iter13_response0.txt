```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        fit_scores = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = np.exp(-fit_scores)  # Prioritize tightest fit

        # Epsilon-greedy exploration with decaying epsilon
        epsilon = 0.1  # Initial exploration rate
        epsilon = max(0.01, epsilon * 0.99)  # Decay epsilon over time
        if np.random.rand() < epsilon:
            random_bin_indices = np.where(eligible_bins)[0]
            random_index = np.random.choice(random_bin_indices)
            priorities[random_index] += np.random.rand() * 0.05  # Small random boost

    return priorities
```
