```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities

    eligible_bin_indices = np.where(eligible_bins)[0]
    num_eligible_bins = len(eligible_bin_indices)

    # Calculate a score based on bin utilization and item density
    scores = np.zeros(num_eligible_bins)
    for i, bin_index in enumerate(eligible_bin_indices):
        remaining_capacity = bins_remain_cap[bin_index]
        utilization = 1 - (remaining_capacity / bins_remain_cap[bin_index])
        density = item / bins_remain_cap[bin_index]  # Item density relative to bin size
        # Combine utilization and density.  Higher utilization is preferred, but also
        # consider if the item is a good fit for the remaining space. Add some randomness.
        scores[i] = 0.6 * utilization + 0.3 * density + 0.1 * np.random.rand()

    priorities[eligible_bin_indices] = scores
    return priorities
```
