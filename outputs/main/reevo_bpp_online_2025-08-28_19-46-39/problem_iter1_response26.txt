```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin
    fit_scores = item / bins_remain_cap

    # Apply a sigmoid function to the fit scores.  A larger fit score will result in
    # a priority closer to 1, representing a better fit.  The sigmoid function
    # ensures that the score remains between 0 and 1. We also introduce a scaling factor
    # (e.g., 4) and a shift (e.g., -2) to adjust the sigmoid's slope and center.
    # This could be tuned during experimentation.  Adjusting the sigmoid's shape
    # will influence the strategy; a steeper slope means more aggressive use of tight bins.
    sigmoid_scores = 1 / (1 + np.exp(-4 * (fit_scores - 0.5)))

    # Penalize bins that have very small remaining capacity. Adding the item to an
    # almost full bin can lead to fragmentation.
    capacity_penalty = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    sigmoid_scores = sigmoid_scores * capacity_penalty

    # Additional penalty if the item doesn't fit at all in a particular bin. Avoids NaNs.
    no_fit_penalty = np.where(bins_remain_cap < item, 0.0, 1.0)  #set to 0 if not fit, else 1
    sigmoid_scores = sigmoid_scores * no_fit_penalty
    

    return sigmoid_scores
```
