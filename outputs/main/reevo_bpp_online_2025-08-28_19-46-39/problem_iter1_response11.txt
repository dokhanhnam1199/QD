```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, Best Fit strategy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the difference between the item size and the remaining capacity of each bin.
    diffs = bins_remain_cap - item

    # Check for bins where the item fits.
    valid_bins = diffs >= 0

    # If no bin is available, return zeros.
    if not np.any(valid_bins):
        return priorities

    # Assign priority to bins where the item fits. The bin with the smallest difference
    # (i.e., best fit) gets the highest priority.
    priorities[valid_bins] = 1.0 / (diffs[valid_bins] + 1e-6)  # Adding a small constant to avoid division by zero
    return priorities
```
