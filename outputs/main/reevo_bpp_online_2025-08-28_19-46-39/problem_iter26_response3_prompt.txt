{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Fixed Exploration Rate and Scaled Randomness\n        exploration_rate = 0.1\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * exploration_rate / (bins_remain_cap + 1e-6)\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Scaled Randomness Exploration\n        epsilon = 0.2\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost / (bins_remain_cap + 1e-6)  # Scale by bin capacity, avoid division by zero\n\n    return priorities\n\n[Reflection]\nScale exploration by bin capacity; adapt exploration rate (epsilon) dynamically for improved performance.\n\n\n\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}