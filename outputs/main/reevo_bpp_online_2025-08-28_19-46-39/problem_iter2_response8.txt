```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the difference between the item size and the remaining capacity of each bin
    diffs = bins_remain_cap - item
    # Check for bins that can accommodate the item
    valid_bins = diffs >= 0

    if not np.any(valid_bins):
        return priorities

    # Calculate the priority score as a combination of fit and utilization.
    # Smaller difference (better fit) gets higher priority.
    # Higher remaining capacity (better utilization) also gets higher priority.
    priorities[valid_bins] = (1.0 / (diffs[valid_bins] + 1e-6)) * (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))

    return priorities
```
