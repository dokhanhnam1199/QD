```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        fit_scores = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first

        # Scaled Randomness Exploration with dynamic epsilon
        epsilon = 0.3 / (np.mean(bins_remain_cap) + 1e-6)  # Dynamic epsilon based on average remaining capacity
        scale = 1.0
        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon
        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins

        # Scale exploration by bin capacity. Smaller bins get more boost.
        capacity_scale = 1.0 / (bins_remain_cap + 1e-6)  # Avoid division by zero
        random_boost *= capacity_scale

        priorities += random_boost

    return priorities
```
