```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    possible_bins = bins_remain_cap >= item

    if np.any(possible_bins):
        # Prioritize bins with lower remaining capacity (better fit)
        remaining_capacity = bins_remain_cap[possible_bins]
        priorities[possible_bins] = 1.0 / (remaining_capacity - item + 1e-6)

        # Add a small random element to break ties and encourage exploration
        priorities[possible_bins] += np.random.rand(np.sum(possible_bins)) * 1e-6

    return priorities
```
