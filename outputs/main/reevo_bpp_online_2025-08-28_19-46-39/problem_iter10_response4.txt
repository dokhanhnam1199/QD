```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_ages: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, prioritizing tightest fit, bin age, and strategic exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_ages: Array of ages of each bin (number of items already packed).
        epsilon: Exploration rate for epsilon-greedy approach.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Calculate fit scores (remaining capacity - item size). Lower is better (tighter fit).
        fit_scores = bins_remain_cap[eligible_bins] - item

        # Use exponential function to convert fit scores to priorities.
        # Tighter fit -> higher priority. Larger negative fit_score -> higher priority.
        fit_priorities = np.exp(-fit_scores)

        # Incorporate bin age: Older bins get a slight boost to encourage their use.
        age_priorities = np.exp(-bin_ages[eligible_bins] / 10)  # Adjust the divisor for age sensitivity

        # Combine fit and age priorities.
        priorities[eligible_bins] = fit_priorities * age_priorities

        # Strategic exploration: With probability epsilon, assign a priority based on bin age.
        if np.random.rand() < epsilon:
            # Prioritize newer bins for exploration (potentially better utilization).
            random_bin_indices = np.where(eligible_bins)[0]
            random_index = np.random.choice(random_bin_indices)
            priorities[random_index] = np.random.rand() * np.exp(-bin_ages[random_index] / 5) # Favor new bins

    return priorities
```
