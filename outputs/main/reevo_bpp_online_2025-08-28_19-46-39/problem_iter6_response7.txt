```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Calculate fit score (smaller remaining capacity after placing item is better)
        fit_score = 1.0 / (bins_remain_cap[eligible_bins] - item + 1e-6)
        
        # Normalize fit scores to be between 0 and 1
        fit_score = (fit_score - np.min(fit_score)) / (np.max(fit_score) - np.min(fit_score))

        # Assign fit score to eligible bins
        bin_indices = np.where(eligible_bins)[0]
        priorities[bin_indices] = fit_score

        # Epsilon-greedy exploration
        if np.random.rand() < epsilon:
            # Assign a random priority to eligible bins
            random_indices = np.random.choice(bin_indices, size=len(bin_indices), replace=False)
            random_priorities = np.random.rand(len(bin_indices))
            priorities[random_indices] = random_priorities

    return priorities
```
