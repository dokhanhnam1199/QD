```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities

    # Sigmoid scaling based on fit
    fit_scores = (bins_remain_cap[eligible_bins] - item) / item
    priorities[eligible_bins] = 1 / (1 + np.exp(-fit_scores))

    # Boost empty bins
    priorities[bins_remain_cap == 0] += 0.5

    # Small penalty for very large bins (discourage using huge bins for tiny items)
    priorities[bins_remain_cap > item * 2] -= 0.1

    # Add a small amount of random noise to break ties and encourage exploration
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
