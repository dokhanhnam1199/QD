[
  {
    "stdout_filepath": "problem_iter24_response0.txt_stdout.txt",
    "code_path": "problem_iter24_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamic Exploration Rate and Scaled Randomness\n        epsilon = 0.2 * (1.0 / (bins_remain_cap[eligible_bins].mean() + 1e-9))  # Adjust epsilon based on remaining capacities\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-9)\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n\n    return priorities",
    "response_id": 0,
    "obj": 4.068607897885915,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 159.81495041679716,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response1.txt_stdout.txt",
    "code_path": "problem_iter24_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Scaled Randomness Exploration\n        epsilon = 0.1  # Reduced exploration rate\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n\n        # Scale exploration by bin capacity\n        random_boost /= bins_remain_cap + 1e-6  # Avoid division by zero\n\n        priorities += random_boost\n\n    return priorities",
    "response_id": 1,
    "obj": 4.058635819704831,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 108.04820237218406,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response2.txt_stdout.txt",
    "code_path": "problem_iter24_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Scaled Randomness Exploration with dynamic epsilon\n        epsilon = 0.3 / (np.mean(bins_remain_cap) + 1e-6)  # Dynamic epsilon based on average remaining capacity\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n\n        # Scale exploration by bin capacity. Smaller bins get more boost.\n        capacity_scale = 1.0 / (bins_remain_cap + 1e-6)  # Avoid division by zero\n        random_boost *= capacity_scale\n\n        priorities += random_boost\n\n    return priorities",
    "response_id": 2,
    "obj": 3.948942959712818,
    "SLOC": 14.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 157.89111045234063,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response3.txt_stdout.txt",
    "code_path": "problem_iter24_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamic, scaled randomness exploration\n        epsilon = 0.3\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)  # avoid division by zero\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n\n    return priorities",
    "response_id": 3,
    "obj": 3.4802552852014452,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response4.txt_stdout.txt",
    "code_path": "problem_iter24_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamically tuned exploration based on item size and bin capacity\n        epsilon = 0.1 * (item / np.max(bins_remain_cap))\n        epsilon = max(0.01, epsilon)  # Ensure minimum exploration\n\n        # Scale randomness to item/bin characteristics\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)  # Avoid division by zero\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n\n        priorities += random_boost\n\n    return priorities",
    "response_id": 4,
    "obj": 3.6398085360989234,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 142.13383752235586,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response5.txt_stdout.txt",
    "code_path": "problem_iter24_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamic Scaled Randomness Exploration\n        epsilon = 0.4\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)\n        random_boost[~eligible_bins] = 0.0\n        priorities += random_boost\n\n    return priorities",
    "response_id": 5,
    "obj": 3.490227363382529,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response6.txt_stdout.txt",
    "code_path": "problem_iter24_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Scaled Randomness Exploration with dynamic exploration rate\n        epsilon = 0.3\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon / (bins_remain_cap + 1e-6)  # avoid division by zero\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n\n    return priorities",
    "response_id": 6,
    "obj": 3.4204228161148738,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response7.txt_stdout.txt",
    "code_path": "problem_iter24_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Fixed Exploration Rate and Scaled Randomness\n        exploration_rate = 0.1\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * exploration_rate / (bins_remain_cap + 1e-6)\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost\n\n    return priorities",
    "response_id": 7,
    "obj": 3.5301156761069095,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response8.txt_stdout.txt",
    "code_path": "problem_iter24_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Dynamically tuned exploration based on item size and bin capacity\n        epsilon = 0.2 + 0.1 * (item / np.max(bins_remain_cap))  # Adjust epsilon range\n        epsilon = np.clip(epsilon, 0.05, 0.5)  # Ensure epsilon is within a reasonable range\n\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n\n        priorities += random_boost / (bins_remain_cap + 1e-6)  # Scale by bin capacity and avoid division by zero\n\n    return priorities",
    "response_id": 8,
    "obj": 3.4004786597527064,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 159.81495041679716,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response9.txt_stdout.txt",
    "code_path": "problem_iter24_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin, prioritizing tightest fit and exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        fit_scores = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = np.exp(-fit_scores)  # Tightest fit first\n\n        # Scaled Randomness Exploration\n        epsilon = 0.2\n        scale = 1.0\n        random_boost = np.random.rand(len(bins_remain_cap)) * scale * epsilon\n        random_boost[~eligible_bins] = 0.0  # Zero boost for ineligible bins\n        priorities += random_boost / (bins_remain_cap + 1e-6)  # Scale by bin capacity, avoid division by zero\n\n    return priorities",
    "response_id": 9,
    "obj": 3.450339050658171,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  }
]