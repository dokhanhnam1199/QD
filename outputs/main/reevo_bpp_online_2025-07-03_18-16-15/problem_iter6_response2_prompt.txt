{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: identify bins that can accommodate the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        # If no bin can fit the item, return very negative priorities\n        return priorities - np.inf\n\n    # Heuristic 1: Snug Fit - prioritize bins where the item fits snugly\n    slack = bins_remain_cap - item\n    priorities[feasible_bins] += 1 / (slack[feasible_bins] + 1e-6)\n\n    # Heuristic 2: Fragmentation Penalty - Penalize bins that will become too empty or too full\n    remaining_capacity = bins_remain_cap - item\n    max_capacity = np.max(bins_remain_cap)\n\n    # Penalize bins becoming too full (high remaining capacity ratio)\n    too_full = remaining_capacity < 0.1 * max_capacity\n    priorities[feasible_bins & too_full] -= 0.2\n\n    # Penalize bins becoming too empty (low remaining capacity ratio but still feasible)\n    too_empty = (remaining_capacity > 0.75 * max_capacity) & feasible_bins\n    priorities[too_empty] -= 0.1\n\n    # Heuristic 3: Occupancy Bonus - Reward bins that are already somewhat occupied\n    occupancy = max_capacity - bins_remain_cap\n    normalized_occupancy = occupancy / max_capacity\n    priorities += 0.1 * normalized_occupancy\n\n    # Heuristic 4: Item Size Influence - Give higher priority to bins that can accommodate larger items,\n    # to pack smaller ones together and reduce fragmentation\n    priorities[feasible_bins] += 0.05 * (item / max_capacity)\n\n    # Heuristic 5: moderate fill bonus\n    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < max_capacity * 0.75)\n    priorities[moderate_capacity] += 0.03\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Perfect Fit - Highest priority for bins that fit perfectly.\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000.0\n\n    # Heuristic 2: Remaining Space - Prioritize bins with minimal remaining space after packing.\n    can_fit = bins_remain_cap >= item\n    if np.any(can_fit):\n        remaining_space = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = item / (remaining_space + 1e-6)  # Scale priority by item size\n\n    # Heuristic 3: Moderate Capacity - Encourage using bins with moderate capacity relative to item size.\n    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap <= (item * 3)) & (~perfect_fit)\n    priorities[moderate_capacity] += 10.0\n\n    # Heuristic 4: Large Capacity Penalty - Discourage using bins with significantly more capacity than needed.\n    large_capacity = (bins_remain_cap > item * 5) & can_fit\n    priorities[large_capacity] -= 1.0\n\n    # Heuristic 5: Infeasible Allocation Penalty: Massive negative priority.\n    priorities[bins_remain_cap < item] = -np.inf\n\n    return priorities\n\n[Reflection]\nPrioritize perfect fits, scale by item size, and penalize both infeasibility and large capacity gaps.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}