```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Large items have higher priority to go to bins that can fit them closely
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask] # closeness metric, lower is better
        priorities[fit_mask] = 1 - priorities[fit_mask]  # higher is better, prioritizes closer fits
    else:
        # if no bin fits, prioritize bins with largest remaining capacity to avoid creating too many almost empty bins
        priorities = bins_remain_cap / np.max(bins_remain_cap)  # normalized to max cap

    return priorities
```
