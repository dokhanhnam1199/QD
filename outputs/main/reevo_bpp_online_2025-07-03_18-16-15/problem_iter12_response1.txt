```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Heuristic 1: First-Fit Decreasing-like behavior. Prioritize bins that can fit the item snugly.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        # Non-linear priority based on slack (smaller slack -> much higher priority)
        priorities[fit_mask] = np.exp(-5 * slack / max_cap)
    else:
        priorities[:] = -np.inf  # item cannot fit in the bins, force new bins to open up

    # Heuristic 2: Penalize bins that become too full or too empty after insertion to avoid fragmentation
    remaining_capacity = bins_remain_cap - item
    too_full_penalty = np.exp(-15 * (remaining_capacity / max_cap)) * (remaining_capacity >= 0) # Penalize nearly full
    too_empty_penalty = np.exp(-15 * (bins_remain_cap / max_cap)) * (remaining_capacity >= 0) * (bins_remain_cap<max_cap/2) #penalize low fill

    priorities = priorities - too_full_penalty - too_empty_penalty

    # Heuristic 3: Bonus for bins that are already somewhat filled (reduces number of partially-filled bins)
    occupied_ratio = (max_cap - bins_remain_cap) / max_cap
    # Non-linear bonus: more reward for bins that are moderately filled
    bonus = 0.2 * (occupied_ratio**2) 
    priorities = priorities + bonus

    #Heuristic 4: Moderate Capacity Bonus (more targeted)
    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < max_cap*0.75)
    priorities[moderate_capacity] += 0.1

    #Heuristic 5: Item Size Adjustment: Scale priority boost by item size (more impactful)
    priorities[fit_mask] *= (1 + 2 * item / max_cap)

    return priorities
```
