```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Perfect/Snug Fit - High Priority
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        perfect_fit = np.isclose(slack, 0)
        priorities[fit_mask] = np.where(perfect_fit, 10, 1 / (slack + 1e-6))  # Huge boost for perfect fit
    else:
        priorities[:] = -np.inf  # Cannot fit

    # Heuristic 2: Moderate Fill Encouragement
    remaining_capacity = bins_remain_cap - item
    moderate_fill_mask = np.logical_and(remaining_capacity >= 0, remaining_capacity <= np.max(bins_remain_cap) * 0.5) # Prefer leave at least half capacity unused
    priorities[moderate_fill_mask] += 2.0 # Significantly encourage this case

    # Heuristic 3: Overflow Penalty (Severe)
    overflow_mask = remaining_capacity < 0
    priorities[overflow_mask] = -1000  # Extreme penalty

    # Heuristic 4: Fragmentation Penalty (Size-Scaled)
    fragmentation_penalty = np.zeros_like(bins_remain_cap)
    valid_bins = remaining_capacity >= 0
    fragmentation_penalty[valid_bins] = np.exp(-5 * (remaining_capacity[valid_bins] / np.max(bins_remain_cap)))  # Smaller remaining, bigger penalty.

    priorities -= fragmentation_penalty

    # Heuristic 5: Reward Partial Fills (Less Aggressively)
    partial_fill_mask = np.logical_and(remaining_capacity >= 0, remaining_capacity > np.max(bins_remain_cap) * 0.5)
    priorities[partial_fill_mask] += 0.5
    
    # Heuristic 6: Item Size Adjustment (Subtle, Only when it fits)
    if np.any(fit_mask):
         priorities[fit_mask] *= (1 + 0.1 * (item/np.max(bins_remain_cap))) # A small boost, proportional to item size

    return priorities
```
