```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Tight Fit Priority
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority
        priorities[fit_mask] *= (1 + item / bin_capacity)  # Scale by item size
    else:
        priorities[:] = -np.inf  # Item cannot fit; force new bin

    # 2. Avoid Extreme Fill Levels
    remaining_capacity = bins_remain_cap - item
    too_full_penalty = np.exp(-10 * (remaining_capacity / bin_capacity)) * (remaining_capacity >= 0)
    too_empty_penalty = np.exp(-10 * (bins_remain_cap / bin_capacity)) * (remaining_capacity >= 0) * (bins_remain_cap < bin_capacity / 2)

    priorities -= (too_full_penalty + too_empty_penalty)

    # 3. Reward Moderately Filled Bins
    occupied_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    moderate_capacity_bonus = 0.1 * occupied_ratio
    priorities += moderate_capacity_bonus

    # 4. Added encouragement for bins that are more than one item filled
    filled_threshold = 0.25 * bin_capacity
    already_filled = (bin_capacity - bins_remain_cap) > filled_threshold
    priorities[already_filled] += 0.025
    
    return priorities
```
