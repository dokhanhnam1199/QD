```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, so all priorities are 0

    # 2. Remaining Capacity: Prioritize bins with less remaining capacity after packing
    remaining_capacity_after_packing = np.clip(bins_remain_cap - item, a_min=0, a_max=None)

    # 3. Fill Ratio: Calculate how full the bin would be after packing.
    fill_ratio = (bins_remain_cap - remaining_capacity_after_packing) / (bins_remain_cap + 1e-9) # avoid divide by zero

    # 4. Combination: Combine the above factors to create a priority score.  We prioritize bins that:
    #    - Can fit the item (feasibility).
    #    - Result in higher fill ratios (use bins efficiently).
    #    - Leave less remaining capacity.
    
    priorities[feasible_bins] = (fill_ratio[feasible_bins]**2) / (remaining_capacity_after_packing[feasible_bins] + 0.01)
    
    return priorities
```
