```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing heuristic: Prefer bins with enough space, but not too much.
    # Reward bins that are close to fitting the item perfectly
    
    #Option 1: Use exponential. Higher score if item almost fits in a bin
    diff = bins_remain_cap - item
    priorities = np.exp(-np.abs(diff)/(item + 1e-9))

    #Option 2: If it can fit, compute difference.
    # If it can not fit, make it close to negative infinity
    can_fit = bins_remain_cap >= item
    diff = bins_remain_cap - item
    priorities = -np.abs(diff) * can_fit + (1-can_fit) * -1e9

    # Option 3: Normalized capacity of bin after placing item. Prefer higher final capacity.
    can_fit = bins_remain_cap >= item
    final_capacity = (bins_remain_cap - item) * can_fit
    priorities = final_capacity / (np.sum(bins_remain_cap) + 1e-9) * can_fit + (1 - can_fit) * -1e9
    
    #Option 4: Compute ratio between item and bin capacity. Closer to 1 gets more priority, only when it fits
    ratio = item / (bins_remain_cap + 1e-9)
    can_fit = bins_remain_cap >= item
    priorities = np.exp(-np.abs(ratio - 1)) * can_fit + (1-can_fit) * -1e9

    return priorities
```
