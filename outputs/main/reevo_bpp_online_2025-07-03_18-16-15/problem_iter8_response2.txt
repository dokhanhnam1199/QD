```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Heuristic 1: First-Fit Decreasing-like behavior. Prioritize bins that can fit the item snugly.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority
    else:
        priorities[:] = -np.inf  # item cannot fit in the bins, force new bins to open up

    # Heuristic 2: Exponential penalties for bins that become too full or too empty after insertion to avoid fragmentation
    remaining_capacity = bins_remain_cap - item
    too_full_penalty = np.exp(5 * (remaining_capacity / max_cap - 1)) * (remaining_capacity >= 0)  # More aggressive penalty
    too_empty_penalty = np.exp(5 * ((bins_remain_cap - max_cap/2) / max_cap)) * (remaining_capacity >= 0) * (bins_remain_cap > max_cap/2) #Only penalize empty if original bin is empty

    priorities = priorities - too_full_penalty - too_empty_penalty

    # Heuristic 3: Moderate occupancy bonus
    occupied_ratio = (max_cap - bins_remain_cap) / max_cap
    moderate_occupancy = np.logical_and(occupied_ratio > 0.2, occupied_ratio < 0.8)
    priorities[moderate_occupancy & fit_mask] += 0.1

    #Heuristic 4: Item Size Adjustment
    priorities[fit_mask] *= (1 + 0.5 * item / max_cap) #Increased importance

    return priorities
```
