```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)
    
    # 1. Perfect/Near Fits: Gaussian centered around perfect fit
    slack = bins_remain_cap - item
    gaussian_fit = np.exp(-((slack) ** 2) / (2 * (0.1 * item) ** 2)) * (slack >= 0)
    priorities += gaussian_fit * item * 2 # Scale by item size

    # 2. Target Fill Level: Exponential penalty for deviating from target fill
    target_fill = 0.75 * bin_capacity # Aim for 75% fill
    remaining_after_fill = (bins_remain_cap - item) 
    fill_deviation = np.abs(remaining_after_fill - (bin_capacity - target_fill)) * (slack >= 0)
    exponential_penalty = np.exp( - (fill_deviation / (0.2 * bin_capacity)))
    priorities -= exponential_penalty * item # Scale by item size

    # 3. Fragmentation Penalty: Sharp penalty for small remaining space
    small_space = (remaining_after_fill > 0) & (remaining_after_fill < 0.1 * bin_capacity)
    priorities[small_space] -= 5 * item  # Very high penalty to avoid fragments

    # 4. Controlled Randomness (Exploration)
    randomness = np.random.normal(0, 0.01 * item, size=bins_remain_cap.shape)
    priorities += randomness

    # 5. Item size bonus/penalty. Avoid placing large items into near full bin if possible.
    near_full = (bins_remain_cap > item) & (bins_remain_cap < 1.2*item)
    if item > 0.5 * bin_capacity:
        priorities[near_full] -= item

    #6. If item can't fit, apply negative infinity to prioritize creating a new bin
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -np.inf

    return priorities
```
