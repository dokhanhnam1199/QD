{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Near-Perfect Fit Bonus\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        # Exponential bonus for near-perfect fit, scaled by item size\n        fit_bonus = np.exp(-10 * slack / item)\n        priorities[fit_mask] += fit_bonus\n\n    else:\n        priorities[:] = -np.inf  # item cannot fit in the bins, force new bins to open up\n\n    # 2. Moderate Fill Level Bonus\n    moderate_fill_mask = np.logical_and(bins_remain_cap > item, bins_remain_cap <= 0.75 * bin_capacity)\n    priorities[moderate_fill_mask] += 0.2  # Increased moderate fill bonus\n\n    # 3. Adaptive Occupancy Ratio Optimization\n    occupancy_ratio = (bin_capacity - bins_remain_cap) / bin_capacity\n    priorities += 0.1 * occupancy_ratio\n\n    # 4. Exponential Penalties for Extreme Fill Levels\n    remaining_capacity = bins_remain_cap - item\n    too_full_penalty = np.exp(5 * (remaining_capacity / bin_capacity)) * (remaining_capacity < 0.1 * bin_capacity) * (remaining_capacity >= 0) #Penalize nearly full bin\n    too_empty_penalty = np.exp(-5 * ((bin_capacity - bins_remain_cap) / bin_capacity)) * (bins_remain_cap > 0.9* bin_capacity)*(remaining_capacity >= 0)  # Penalize nearly empty after insertion\n    priorities -= too_full_penalty + too_empty_penalty\n\n    # 5. Item Size Adjustment\n    priorities[fit_mask] *= (1 + item / bin_capacity)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First-Fit Decreasing-like behavior. Prioritize bins that can fit the item snugly.\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority\n    else:\n        priorities[:] = -np.inf  # item cannot fit in the bins, force new bins to open up\n\n    # Heuristic 2: Penalize bins that become too full or too empty after insertion to avoid fragmentation\n    remaining_capacity = bins_remain_cap - item\n    too_full_penalty = np.exp(-10 * (remaining_capacity / np.max(bins_remain_cap))) * (remaining_capacity >= 0) # Penalize nearly full\n    too_empty_penalty = np.exp(-10 * (bins_remain_cap / np.max(bins_remain_cap))) * (remaining_capacity >= 0) * (bins_remain_cap<np.max(bins_remain_cap)/2) #penalize low fill\n\n    priorities = priorities - too_full_penalty - too_empty_penalty\n\n\n    # Heuristic 3: Bonus for bins that are already somewhat filled (reduces number of partially-filled bins)\n    occupied_ratio = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)\n    bonus = 0.1 * occupied_ratio\n    priorities = priorities + bonus\n\n    #Heuristic 4: Moderate Capacity Bonus\n    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < np.max(bins_remain_cap)*0.75)\n    priorities[moderate_capacity] += 0.05\n\n    #Heuristic 5: Item Size Adjustment\n    priorities[fit_mask] *= (1 + item/np.max(bins_remain_cap))\n\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits, penalize extreme fill levels, and reward moderate occupancy. Adjust parameters and explore non-linear scaling.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}