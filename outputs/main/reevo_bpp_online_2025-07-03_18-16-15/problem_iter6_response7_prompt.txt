{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Perfect Fit: Huge reward for perfect fits\n    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6\n    priorities[perfect_fit] += 1000 * item  # Scale by item size\n\n    # 2. Near Fit: Reward close fits, scaled by item size and remaining capacity.\n    almost_fit = (bins_remain_cap >= item)\n    slack = bins_remain_cap - item\n    priorities[almost_fit] += (item / bin_capacity) * (1 / (slack[almost_fit] + 1e-6))\n\n    # 3. Moderate Fill: Gaussian-like function to favor moderate fills.\n    remaining_after_fill = bins_remain_cap - item\n    moderate_fill = np.exp(-((remaining_after_fill - (bin_capacity / 3)) ** 2) / (2 * (bin_capacity / 6) ** 2)) * (remaining_after_fill >= 0)\n    priorities += moderate_fill\n\n    # 4. Fragmentation Penalty: Sharply penalize small remaining capacities.\n    small_remaining = remaining_after_fill > 0\n    fragmentation_penalty = -100 * (remaining_after_fill[small_remaining] / bin_capacity)**0.5\n    priorities[small_remaining] += fragmentation_penalty\n\n    # 5. Impossible Fit: Very negative priority if the item doesn't fit.\n    no_fit = bins_remain_cap < item\n    priorities[no_fit] = -1000\n\n    # 6. Randomness: Introduce small amount of randomness to explore different options.\n    priorities += np.random.normal(0, 0.01, size=bins_remain_cap.shape)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Perfect Fit: Huge reward, scaled by item size.\n    perfect_fit_mask = np.isclose(bins_remain_cap, item)\n    if np.any(perfect_fit_mask):\n        priorities[perfect_fit_mask] += 10 * item/bin_capacity  #Substantially increase the reward of perfect fit.\n\n    # 2. Near Fit: Moderate reward, scaled by remaining capacity after placement.\n    near_fit_mask = (bins_remain_cap > item) & (bins_remain_cap <= item + 0.1 * bin_capacity)\n    if np.any(near_fit_mask):\n        slack = bins_remain_cap[near_fit_mask] - item\n        priorities[near_fit_mask] += 2 * (1 - slack/(0.1 * bin_capacity)) * item/bin_capacity\n\n    # 3. Gaussian-like reward for moderate fills (peaks at 60% full after placement).\n    remaining_capacity = bins_remain_cap - item\n    fill_level = (bin_capacity - remaining_capacity) / bin_capacity #Ratio of fill level.\n    gaussian_center = 0.6 #Favor bins that will be 60% full.\n    gaussian_width = 0.3 #Standard deviation of gaussian\n    gaussian_reward = np.exp(-((fill_level - gaussian_center)**2) / (2 * gaussian_width**2)) * item/bin_capacity\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += gaussian_reward[fit_mask]\n\n    # 4. Fragmentation penalty: Sharp penalty if remaining capacity is small but non-zero.  Scaled by item size.\n    fragmentation_threshold = 0.1 * bin_capacity # Small remaining capacity.\n    fragmentation_mask = (remaining_capacity > 0) & (remaining_capacity < fragmentation_threshold)\n    priorities[fragmentation_mask] -= 5 * item/bin_capacity\n\n    # 5. Impossible fit: Large negative priority.\n    no_fit_mask = bins_remain_cap < item\n    priorities[no_fit_mask] = -np.inf\n\n    # 6. Moderate Capacity Bonus: Small bonus for bins that are moderately filled before adding an item\n    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < bin_capacity * 0.75)\n    priorities[moderate_capacity] += 0.01\n\n    # 7. Random Exploration: Small chance to pick any feasible bin.\n    # if np.random.rand() < 0.01 and np.any(fit_mask):\n    #     eligible_bins = np.where(fit_mask)[0]\n    #     random_bin = np.random.choice(eligible_bins)\n    #     priorities[random_bin] += 0.1\n\n    return priorities\n\n[Reflection]\nFocus on relative item size, precise fit definitions, and targeted rewards/penalties with clear scaling.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}