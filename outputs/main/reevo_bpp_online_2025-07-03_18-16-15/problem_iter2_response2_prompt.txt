{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n    \n    # 2. Remaining Capacity Optimization:\n    #   - Reward bins with tighter fit (minimize wasted space)\n    #   - Avoid bins that result in very small remaining capacity.\n    remaining_after_fit = bins_remain_cap - item\n    \n    #   Scale priorities based on the ratio of item size to remaining capacity.\n    #   Larger values mean a better fit. A higher value is good if its almost filled\n    priorities[feasible_bins] = item / (bins_remain_cap[feasible_bins] + 1e-9) # Add small value to avoid division by zero\n    \n    #   Penalize bins where very little capacity is remaining\n    very_small_threshold = 0.1  # Can be adjusted\n    priorities[feasible_bins] -= 10 * (remaining_after_fit[feasible_bins] < very_small_threshold)  # Large penalty\n    \n    # 3. Prioritize almost full bins\n    almost_full_threshold = 0.9 #Threshold can be changed\n    almost_full = bins_remain_cap / np.max(bins_remain_cap) > almost_full_threshold\n    \n    priorities[almost_full] += 5  #A small priority for almost full bins, could avoid spreading the items around if they could actually fit on the almost-full bins.\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First Fit Decreasing inspired approach:\n    # Give preference to bins that can accommodate the item with minimal waste.\n    \n    # Give -inf priority to bins that can't fit the item\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n    \n    # For bins that can fit, prioritize based on remaining capacity after placing the item\n    feasible_mask = ~infeasible_mask\n    remaining_capacity = bins_remain_cap[feasible_mask] - item\n    \n    # Give higher priority to bins with smaller remaining capacity. Avoids creating nearly empty bins.\n    priorities[feasible_mask] = -remaining_capacity\n    \n    # Add a small bonus to bins that are very close to full before placing item, in order to fill them quickly\n    close_to_full_mask = feasible_mask & (bins_remain_cap >= item) & (bins_remain_cap < item * 1.2)\n    priorities[close_to_full_mask] += 1  # Arbitrary bonus, can be tuned\n\n    # Add a penalty for almost full, encouraging creation of a new bin if we're too close to the bin limit\n    almost_full_mask = feasible_mask & (bins_remain_cap > item* 0.95)\n    priorities[almost_full_mask] -=0.5\n    return priorities\n\n[Reflection]\nPrioritize tight fits, prevent near-empty bins, and discourage bins nearing full capacity.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}