{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # Heuristic 1: Tight Fit - Prioritize bins with small slack after packing.\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] += 1 / (slack + 1e-6)  # Smaller slack, higher priority. Adding to existing value\n    else:\n        return -np.inf * np.ones_like(bins_remain_cap) #Cannot fit in any bin\n\n    # Heuristic 2: Filled Bin Bonus - Give a bonus to bins already somewhat full.\n    occupied_ratio = (max_cap - bins_remain_cap) / max_cap\n    priorities += 0.2 * occupied_ratio  # Bonus proportional to occupancy. Adding to existing value\n\n    # Heuristic 3: Moderate Capacity Preference - Avoid bins that are nearly empty or full.\n    capacity_ratio = bins_remain_cap / max_cap\n    priorities -= 0.1 * np.abs(capacity_ratio - 0.5)  # Penalize deviation from 0.5 capacity. Subtracting from existing value\n\n    # Heuristic 4: Penalize near-full bins after insertion (fragmentation avoidance).\n    remaining_ratio = (bins_remain_cap - item) / max_cap\n    near_full_penalty = np.where((remaining_ratio > 0) & (remaining_ratio < 0.1), 10 * (0.1 - remaining_ratio), 0)\n    priorities -= near_full_penalty # Subtracting from existing value\n\n    # Heuristic 5: Adaptive Penalty based on item size. Larger items penalize nearly-full bins more.\n    large_item_penalty = np.where((remaining_ratio > 0) & (remaining_ratio < 0.2), item * 5 * (0.2 - remaining_ratio), 0)\n    priorities -= large_item_penalty # Subtracting from existing value\n\n    # Heuristic 6: Infeasible Allocation Penalty: Massive negative priority.\n    priorities[bins_remain_cap < item] = -np.inf\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # Heuristic 1: Tight Fit Prioritization\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] += 10 / (slack + 0.01)  # Higher priority for tighter fits\n    else:\n        priorities[:] = -np.inf  # Cannot fit, assign lowest priority\n\n    # Heuristic 2: Filling Bins - Reward bins that are already somewhat filled\n    filled_ratio = (bin_capacity - bins_remain_cap) / bin_capacity\n    priorities += 5 * filled_ratio\n\n    # Heuristic 3: Moderate Capacity - Prefer bins with moderate remaining capacity\n    capacity_ratio = bins_remain_cap / bin_capacity\n    priorities += 2 * np.exp(-((capacity_ratio - 0.5) ** 2) / 0.08) # Gaussian-like bonus\n\n    # Heuristic 4: Penalty for Near-Full Bins (Avoid Excessive Fragmentation)\n    near_full_threshold = 0.1 * bin_capacity\n    near_full_mask = (bins_remain_cap - item) < near_full_threshold\n    priorities[near_full_mask] -= 8  # Substantial penalty for bins becoming near full\n\n    # Heuristic 5: Penalty for Near-Empty Bins (Avoid Spreading Items Too Thinly)\n    near_empty_threshold = 0.9 * bin_capacity\n    near_empty_mask = bins_remain_cap > near_empty_threshold\n    priorities[near_empty_mask] -= 3\n\n    # Heuristic 6: Item Size Adaptation\n    item_size_ratio = item / bin_capacity\n    if item_size_ratio > 0.5:  # Large item, prioritize partially filled bins more\n        priorities += 3 * filled_ratio\n    elif item_size_ratio < 0.2:  # Small item, penalize almost full bins\n        near_full_mask = (bins_remain_cap - item) < 0.2 * bin_capacity\n        priorities[near_full_mask] -= 5\n\n    return priorities\n\n[Reflection]\nFocus on: (1) Sharper rewards/penalties, (2) Gaussian-like moderate capacity, (3) Item-size adaptive strategies.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}