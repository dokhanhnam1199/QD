```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Heuristic 1: Near-perfect fit bonus
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        near_perfect_fit = np.exp(-10 * slack / bin_capacity)
        priorities[fit_mask] += near_perfect_fit
    else:
        priorities[:] = -np.inf

    # Heuristic 2: Moderate fill bonus
    moderate_fill_mask = np.logical_and(bins_remain_cap - item > 0.1 * bin_capacity, bins_remain_cap - item < 0.7 * bin_capacity)
    priorities[moderate_fill_mask] += 0.5

    # Heuristic 3: Occupancy ratio bonus
    occupancy_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    priorities += 0.2 * occupancy_ratio

    # Heuristic 4: Penalty for becoming too full
    remaining_capacity = bins_remain_cap - item
    too_full_penalty = np.exp(5 * (remaining_capacity / bin_capacity - 1)) * (remaining_capacity >= 0)
    priorities -= too_full_penalty

    # Heuristic 5: Penalty for small items in almost empty bins.
    almost_empty_mask = bins_remain_cap > 0.9 * bin_capacity
    small_item_penalty = (item/bin_capacity) * almost_empty_mask
    priorities -= 0.1 * small_item_penalty #scaled penalty

    #Heuristic 6: Moderate Capacity Bonus
    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < bin_capacity*0.75)
    priorities[moderate_capacity] += 0.05


    #Heuristic 7: Item Size Adjustment

    priorities[fit_mask] *= (1 + item/bin_capacity)

    return priorities
```
