```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Heuristic 1: Near-Perfect Fit Bonus
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        # Exponential bonus for snug fits, scaled by item size and bin capacity
        fit_bonus = np.exp(-5 * (slack / bin_capacity)) * (item / bin_capacity)
        priorities[fit_mask] += fit_bonus
    else:
        priorities[:] = -np.inf  # item cannot fit

    # Heuristic 2: Moderate Fill Level Reward
    fill_level = (bin_capacity - bins_remain_cap) / bin_capacity
    moderate_fill_mask = np.logical_and(fill_level > 0.2, fill_level < 0.8)  # Adjust thresholds as needed
    priorities[moderate_fill_mask] += 0.1  # Higher reward for moderate fill

    # Heuristic 3: Exponential Penalty for Near-Full and Near-Empty Bins
    remaining_ratio = (bins_remain_cap - item) / bin_capacity
    near_full_penalty = np.exp(10 * (remaining_ratio)) * (remaining_ratio < 0.1) * (bins_remain_cap >= item) # Highly penalize nearly full
    near_empty_penalty = np.exp(5 * (bins_remain_cap / bin_capacity)) * (remaining_ratio > 0) * (bins_remain_cap > bin_capacity/2) # Penalize low fills, adjust sensitivity

    priorities -= near_full_penalty
    priorities -= near_empty_penalty

    # Heuristic 4: Occupancy Ratio Optimization (reward higher occupancy, if item fits)
    occupancy_ratio = (bin_capacity - bins_remain_cap + item * (bins_remain_cap >= item)) / bin_capacity
    priorities[bins_remain_cap >= item] += 0.05 * occupancy_ratio[bins_remain_cap >= item]

    # Heuristic 5: Item Size Normalization & Scaling
    priorities[fit_mask] *= (1 + 0.5 * (item / bin_capacity)) # Scale priorities based on item size

    return priorities
```
