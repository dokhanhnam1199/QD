{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Perfect Fit: Big Reward\n    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6  # Tolerance for floating-point comparisons\n    if np.any(perfect_fit):\n        priorities[perfect_fit] += 100 * item  # Huge reward scaled by item size\n\n    # 2. Near Fit: Moderate Reward, scaled by item size and remaining capacity\n    near_fit = (bins_remain_cap >= item) & (~perfect_fit)\n    if np.any(near_fit):\n        slack = bins_remain_cap[near_fit] - item\n        priorities[near_fit] += (item / bin_capacity) * (1 / (slack + 1e-6))\n\n    # 3. Penalize Overflow: Very Harsh Penalty\n    overflow = bins_remain_cap < item\n    priorities[overflow] = -np.inf\n\n    # 4. Moderate Fills: Gaussian-like preference\n    remaining_ratio = bins_remain_cap / bin_capacity\n    preferred_ratio = 0.6  # Target fill ratio\n    gaussian_penalty = np.exp(-((remaining_ratio - preferred_ratio)**2) / (2 * 0.1**2))\n    priorities += gaussian_penalty * item\n\n    # 5. Fragmentation Penalty: Exponential decay\n    remaining_capacity = bins_remain_cap - item\n    fragmentation_penalty = np.exp(-5 * np.abs(remaining_capacity / bin_capacity)) * (remaining_capacity >= 0) #only if the item can fit in bin.\n    priorities -= fragmentation_penalty * item\n\n    # 6. Small Randomness\n    priorities += np.random.normal(0, 0.01, size=bins_remain_cap.shape) * item\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # Heuristic 1: Tight Fit Priority\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority\n    else:\n        priorities[:] = -np.inf  # If it doesn't fit, don't consider the bin\n\n    # Heuristic 2: Fragmentation Penalty\n    remaining_capacity = bins_remain_cap - item\n    too_full_penalty = np.exp(-10 * (remaining_capacity / max_cap)) * (remaining_capacity >= 0)  # Penalize bins that are nearly full after insertion\n    too_empty_penalty = np.exp(-10 * (bins_remain_cap / max_cap)) * (remaining_capacity >= 0) * (bins_remain_cap < max_cap / 2)  # Penalize bins with low fill\n\n    priorities -= too_full_penalty\n    priorities -= too_empty_penalty\n\n    # Heuristic 3: Reward Partially Filled Bins\n    occupied_ratio = (max_cap - bins_remain_cap) / max_cap\n    bonus = 0.1 * occupied_ratio\n    priorities += bonus\n\n    # Heuristic 4: Item Size Adjustment (favor using smaller items in partially filled bins)\n    priorities[fit_mask] *= (1 + 0.5*item / max_cap)\n\n    #Heuristic 5: Moderate Capacity Bonus\n    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < max_cap*0.75)\n    priorities[moderate_capacity] += 0.05\n\n    return priorities\n\n[Reflection]\nFocus on simple, interpretable metrics like slack and fill ratio, and consider interactions between heuristics.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}