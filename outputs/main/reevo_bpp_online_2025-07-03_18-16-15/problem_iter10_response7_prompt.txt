{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n    \n    # 1. Perfect Fit: Highest priority for bins that fit perfectly.\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] += 1000.0\n\n    # 2. Moderate Capacity: Prioritize bins with moderate capacity relative to item size.\n    #    Also avoid bins that are already almost full.\n    can_fit = bins_remain_cap >= item\n    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap <= (item * 3)) & (~perfect_fit) & (bins_remain_cap > 1.1 * item)\n    priorities[moderate_capacity] += 50.0\n\n    # 3. Remaining Space: Prioritize bins with minimal remaining space after packing, but only if it's not a perfect fit or moderate capacity.\n    if np.any(can_fit & ~perfect_fit & ~moderate_capacity):\n        remaining_space = bins_remain_cap[can_fit & ~perfect_fit & ~moderate_capacity] - item\n        priorities[can_fit & ~perfect_fit & ~moderate_capacity] += item / (remaining_space + 1e-6)  # Scale priority by item size\n\n    # 4. Fragmentation Penalty: Penalize creating very small remaining space in bins.\n    remaining_after_fill = bins_remain_cap - item\n    fragmentation = (remaining_after_fill > 0) & (remaining_after_fill < 0.1 * bin_capacity)\n    priorities[fragmentation] -= 50.0\n\n    # 5. Large Capacity Penalty: Discourage using bins with significantly more capacity than needed.\n    large_capacity = (bins_remain_cap > item * 5) & can_fit\n    priorities[large_capacity] -= 5.0\n\n    # 6. Infeasible Allocation Penalty: Massive negative priority if item doesn't fit.\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf\n\n    # 7. Prioritize more filled bins (encourage using partially filled bins before empty ones).\n    fill_level = (bin_capacity - bins_remain_cap) / bin_capacity\n    priorities[can_fit] += 10 * fill_level[can_fit]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Feasibility Mask: Filter out bins that cannot fit the item\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf  # Set priority to -inf for infeasible bins\n\n    # 2. Near-Fit Reward: Exponential reward for bins with remaining capacity close to item size\n    slack = bins_remain_cap - item\n    near_fit = np.exp(-5 * np.abs(slack) / bin_capacity) * feasible_bins # Ensure only feasible bins are considered\n    priorities[feasible_bins] += 0.8 * item * near_fit[feasible_bins]  # Scale reward by item size and reduce magnitude\n\n    # 3. Target Fill Level: Gaussian distribution centered around the optimal fill level (75%)\n    target_fill = 0.75 * bin_capacity\n    fill_level = bin_capacity - bins_remain_cap\n    priorities[feasible_bins] += 0.2 * np.exp(-((fill_level[feasible_bins] - target_fill) ** 2) / (2 * (bin_capacity * 0.2) ** 2))  #Smaller magnitude to avoid dominating near-fit\n\n    # 4. Fragmentation Penalty: Apply a negative reward if remaining capacity is very small\n    remaining_capacity = bins_remain_cap - item\n    frag_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * bin_capacity) & feasible_bins  # Consider fragmentation only on feasible bins\n    priorities[frag_mask] -= 0.6 * item  # Scale penalty by item size; tuned magnitude\n\n    # 5. Controlled Randomness: Add a small amount of noise to the priorities for exploration\n    priorities[feasible_bins] += 0.005 * item * np.random.randn(np.sum(feasible_bins)) # Scale randomness with item size; further reduced magnitude\n\n    return priorities\n\n[Reflection]\nFocus on smooth, scaled rewards/penalties, feasibility masks, and controlled randomness for exploration.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}