{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # Heuristic 1: Tight Fit - Prioritize bins with small slack after packing.\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] += 1 / (slack + 1e-6)  # Smaller slack, higher priority. Adding to existing value\n    else:\n        return -np.inf * np.ones_like(bins_remain_cap) #Cannot fit in any bin\n\n    # Heuristic 2: Filled Bin Bonus - Give a bonus to bins already somewhat full.\n    occupied_ratio = (max_cap - bins_remain_cap) / max_cap\n    priorities += 0.2 * occupied_ratio  # Bonus proportional to occupancy. Adding to existing value\n\n    # Heuristic 3: Moderate Capacity Preference - Avoid bins that are nearly empty or full.\n    capacity_ratio = bins_remain_cap / max_cap\n    priorities -= 0.1 * np.abs(capacity_ratio - 0.5)  # Penalize deviation from 0.5 capacity. Subtracting from existing value\n\n    # Heuristic 4: Penalize near-full bins after insertion (fragmentation avoidance).\n    remaining_ratio = (bins_remain_cap - item) / max_cap\n    near_full_penalty = np.where((remaining_ratio > 0) & (remaining_ratio < 0.1), 10 * (0.1 - remaining_ratio), 0)\n    priorities -= near_full_penalty # Subtracting from existing value\n\n    # Heuristic 5: Adaptive Penalty based on item size. Larger items penalize nearly-full bins more.\n    large_item_penalty = np.where((remaining_ratio > 0) & (remaining_ratio < 0.2), item * 5 * (0.2 - remaining_ratio), 0)\n    priorities -= large_item_penalty # Subtracting from existing value\n\n    # Heuristic 6: Infeasible Allocation Penalty: Massive negative priority.\n    priorities[bins_remain_cap < item] = -np.inf\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # Heuristic 1: Tight Fit - Prioritize bins where the item fits snugly.\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] += 1 / (slack + 1e-6)  # Smaller slack, higher priority\n    else:\n        return -np.inf * np.ones_like(priorities)\n\n\n    # Heuristic 2: Fill Bins - Reward bins that are already partially full.\n    occupancy = (bin_capacity - bins_remain_cap) / bin_capacity\n    priorities += 0.2 * occupancy\n\n    # Heuristic 3: Moderate Capacity - Prioritize bins with moderate remaining capacity.\n    moderate_mask = (bins_remain_cap > 0.2 * bin_capacity) & (bins_remain_cap < 0.8 * bin_capacity)\n    priorities[moderate_mask] += 0.3\n\n    # Heuristic 4: Penalize Near-Full - Heavily penalize bins that will become nearly full after adding the item.\n    remaining_after_add = bins_remain_cap - item\n    near_full_penalty = np.exp(-50 * (0.05 - remaining_after_add/bin_capacity)) # high penalty if remaining is less than 5%\n    near_full_penalty[remaining_after_add > 0.05 * bin_capacity] = 0\n    priorities -= near_full_penalty\n\n    # Heuristic 5: Penalize Near-Empty - Penalize bins that are almost empty.\n    near_empty_penalty = np.exp(-50 * (bins_remain_cap/bin_capacity - 0.95))\n    near_empty_penalty[bins_remain_cap/bin_capacity < 0.95] = 0\n    priorities -= near_empty_penalty\n\n    # Heuristic 6: Item Size Adaptation - Adjust penalties based on item size.\n    item_ratio = item / bin_capacity\n    if item_ratio > 0.5: # for big item, we want to fill any bin to reduce overall number of bins.\n        priorities += 0.1\n\n    # Heuristic 7: Inverse Capacity - Use inverse of remaining capacity as a finer selection mechanism.\n    priorities += 0.05 / (bins_remain_cap + 1e-6)\n\n    return priorities\n\n[Reflection]\nFocus on sharper penalties, moderate capacity preference, and item size adaptation for improved bin utilization.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}