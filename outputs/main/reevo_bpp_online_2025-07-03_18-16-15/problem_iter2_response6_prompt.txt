{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Large bins that can fit the item have higher priority.\n    valid_bins = bins_remain_cap >= item\n    priorities[valid_bins] = bins_remain_cap[valid_bins] - item  # Remaining capacity after packing (higher is better). This favors bins that aren't filled too much\n\n    # If no bins can fit the item, penalize heavily.\n    if not np.any(valid_bins):\n        priorities = np.full_like(bins_remain_cap, -np.inf)\n\n    # Prioritize bins with remaining capacity close to item size, but only if there are valid bins\n    if np.any(valid_bins):\n        diffs = np.abs(bins_remain_cap - item)\n        normalized_diffs = diffs / np.max(bins_remain_cap) # Normalized to bin size\n        priorities[valid_bins] += (1 - normalized_diffs[valid_bins])*10 #Add a value based on how close it is, scale by 10 so it outweighs base remaining capacity, make only valid_bins affect values.\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Bins that can fit the item get a base priority.\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] = 1.0\n\n    # Rule 2: Prioritize bins with smaller remaining capacity after placing the item (First Fit Decreasing heuristic idea).\n    remaining_capacity_after_fit = bins_remain_cap[fit_mask] - item\n    priorities[fit_mask] += 1.0 / (remaining_capacity_after_fit + 0.00001) # Avoid division by zero\n\n    # Rule 3: Give a higher priority to bins which are already somewhat filled. Avoid opening new bins when possible\n    priorities[fit_mask] += (1 - bins_remain_cap[fit_mask]/np.max(bins_remain_cap))\n    # If there are no bins with enough capacity, return a flat priority array so the first available will be chosen\n    if np.sum(fit_mask) == 0:\n        return np.ones_like(bins_remain_cap)\n    return priorities\n\n[Reflection]\nPrioritize filled bins, penalize waste, and ensure valid bin selection for better online bin packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}