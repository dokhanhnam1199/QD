```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # 1. Feasibility check: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    # 2. Remaining capacity after placing the item: prefer bins where little space will be wasted.
    remaining_after_placement = bins_remain_cap - item
    remaining_after_placement[remaining_after_placement < 0] = np.inf # if bin cannot fit item, then inf remaining capacity.

    # 3. A small amount of bias
    epsilon = 1e-6

    # 4. Priority Score assignment. The bin that can fit the item, and has smallest capacity left after placement will be picked.
    priorities = np.where(feasible_bins, 1 / (remaining_after_placement + epsilon), 0) # Assign small amount of score so we pick this bin.
    
    # Alternative prioritzation strategy: favor bins with fill level closer to 75%
    # fill_levels = (bins_remain_cap - item) / bins_remain_cap
    # target_fill = 0.25 # 1-0.75
    # priorities = np.where(feasible_bins, 1 - np.abs(fill_levels - target_fill), 0)

    return priorities
```
