```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Large bins that can fit the item have higher priority.
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] = bins_remain_cap[valid_bins] - item  # Remaining capacity after packing (higher is better). This favors bins that aren't filled too much

    # If no bins can fit the item, penalize heavily.
    if not np.any(valid_bins):
        priorities = np.full_like(bins_remain_cap, -np.inf)

    # Prioritize bins with remaining capacity close to item size, but only if there are valid bins
    if np.any(valid_bins):
        diffs = np.abs(bins_remain_cap - item)
        normalized_diffs = diffs / np.max(bins_remain_cap) # Normalized to bin size
        priorities[valid_bins] += (1 - normalized_diffs[valid_bins])*10 #Add a value based on how close it is, scale by 10 so it outweighs base remaining capacity, make only valid_bins affect values.

    return priorities
```
