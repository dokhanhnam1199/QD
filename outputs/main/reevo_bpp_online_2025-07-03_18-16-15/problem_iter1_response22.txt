```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # 1. Feasibility: Assign -inf priority if the item doesn't fit.
    priorities[bins_remain_cap < item] = -np.inf
    
    # 2. Remaining capacity: Prefer bins where the item fits best (smallest waste).
    waste = bins_remain_cap - item
    priorities[bins_remain_cap >= item] = -waste[bins_remain_cap >= item]
    
    # 3. Fill percentage: Prefer bins that are already somewhat full (avoid creating too many almost-empty bins).
    fill_percentage = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # Assumes bins are of equal max capacity
    priorities[bins_remain_cap >= item] += fill_percentage[bins_remain_cap >= item] * 0.5 # Weigh this factor

    # 4. Prioritize nearly full bins even more.
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap - item <= 0.1 * np.max(bins_remain_cap))
    priorities[nearly_full] += 10 # Boost nearly full bins

    return priorities
```
