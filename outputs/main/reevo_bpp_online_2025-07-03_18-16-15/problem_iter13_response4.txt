```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Heuristic 1: Near-Perfect Fit Bonus (adaptively scaled)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        # Exponential reward for near-perfect fits, scaled by item size
        near_perfect_fit_reward = np.exp(-10 * slack / item) if item > 0 else np.exp(-10*slack/bin_capacity) #Avoid divide by zero
        priorities[fit_mask] += near_perfect_fit_reward
    else:
        priorities[:] = -np.inf  # Item cannot fit, force new bin

    # Heuristic 2: Moderate Fill Reward (scaled by remaining capacity)
    moderate_fill_mask = np.logical_and(bins_remain_cap > item, bins_remain_cap < 0.75 * bin_capacity)
    priorities[moderate_fill_mask] += 0.2 * (bins_remain_cap[moderate_fill_mask] / bin_capacity)

    # Heuristic 3: Exponential Penalty for Extreme Fill Levels
    remaining_capacity = bins_remain_cap - item
    # Scale exponent by bin capacity
    too_full_penalty = np.exp(5 * (remaining_capacity / bin_capacity - 1)) * (remaining_capacity >= 0)
    too_empty_penalty = np.exp(-5 * (bins_remain_cap / bin_capacity)) * (remaining_capacity >= 0)
    priorities -= too_full_penalty + too_empty_penalty
    # Heuristic 4: Occupancy Ratio Optimization (global perspective)
    occupied_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    priorities += 0.1 * occupied_ratio

    # Heuristic 5: Small Item Consideration (favor filling partially empty bins if the item is small)
    if item < 0.2 * bin_capacity:
        partially_filled_mask = np.logical_and(bins_remain_cap < bin_capacity, bins_remain_cap >= item)
        priorities[partially_filled_mask] += 0.05
    # Heuristic 6: Larger item adjustment - try to fill biggest bin

    if item > 0.5 * bin_capacity and np.any(fit_mask):
        max_bin_index = np.argmax(bins_remain_cap[fit_mask])
        bin_index = np.where(bins_remain_cap == bins_remain_cap[fit_mask][max_bin_index])[0][0]
        priorities[bin_index]+= 0.2


    return priorities
```
