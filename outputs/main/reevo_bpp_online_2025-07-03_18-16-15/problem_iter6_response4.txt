```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    epsilon = 1e-6

    # Heuristic 1: Feasibility Mask
    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        return -np.inf * np.ones_like(priorities)

    # Heuristic 2: Tight Fit with Normalized Slack
    slack = bins_remain_cap[fit_mask] - item
    normalized_slack = slack / max_cap
    priorities[fit_mask] += 1 / (normalized_slack + epsilon)

    # Heuristic 3: Adaptive Fragmentation Penalty
    remaining_capacity = bins_remain_cap - item
    overfill = remaining_capacity < 0
    remaining_capacity[overfill] = 0 # avoid negative capacity
    
    normalized_remaining = remaining_capacity / max_cap
    fragmentation_penalty = np.exp(-5 * normalized_remaining) 
    priorities -= fragmentation_penalty

    # Heuristic 4: Fill Level Bonus - Synergistic with Item Size
    fill_level = (max_cap - bins_remain_cap) / max_cap
    item_size_ratio = item / max_cap
    fill_bonus = fill_level * (1 - item_size_ratio)  # Smaller items favor fuller bins
    priorities += 0.2 * fill_bonus

    # Heuristic 5: Moderate Capacity Sweet Spot
    moderate_mask = np.logical_and(bins_remain_cap >= item, bins_remain_cap <= 0.75 * max_cap)
    priorities[moderate_mask] += 0.1

    # Heuristic 6: Item Size Specific Adjustments
    if item_size_ratio > 0.7: # Large items, avoid almost full bins
        almost_full = np.logical_and(bins_remain_cap >= item, remaining_capacity < 0.1 * max_cap)
        priorities[almost_full] -= 0.3
    elif item_size_ratio < 0.2: # Smaller items, prefer to consolidate
        priorities[fit_mask] += 0.1 * fill_level[fit_mask]

    # Heuristic 7: Capacity Utilization
    capacity_utilization = (max_cap - bins_remain_cap) / max_cap
    priorities += 0.05 * capacity_utilization

    return priorities
```
