```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing inspired approach:
    # Give preference to bins that can accommodate the item with minimal waste.
    
    # Give -inf priority to bins that can't fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    
    # For bins that can fit, prioritize based on remaining capacity after placing the item
    feasible_mask = ~infeasible_mask
    remaining_capacity = bins_remain_cap[feasible_mask] - item
    
    # Give higher priority to bins with smaller remaining capacity. Avoids creating nearly empty bins.
    priorities[feasible_mask] = -remaining_capacity
    
    # Add a small bonus to bins that are very close to full before placing item, in order to fill them quickly
    close_to_full_mask = feasible_mask & (bins_remain_cap >= item) & (bins_remain_cap < item * 1.2)
    priorities[close_to_full_mask] += 1  # Arbitrary bonus, can be tuned

    # Add a penalty for almost full, encouraging creation of a new bin if we're too close to the bin limit
    almost_full_mask = feasible_mask & (bins_remain_cap > item* 0.95)
    priorities[almost_full_mask] -=0.5
    return priorities
```
