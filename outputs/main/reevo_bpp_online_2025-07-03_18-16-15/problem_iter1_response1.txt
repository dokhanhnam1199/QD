```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First-Fit Decreasing heuristic inspiration
    # Give higher priority to bins that can fit the item best (smallest waste)
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap - item
    priorities[fit_mask] = -waste[fit_mask] # Smaller waste is better
    
    # If no bin fits perfectly, penalize significantly those which don't.
    priorities[~fit_mask] = -np.inf

    # Add a small random component to break ties
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-6 

    return priorities
```
