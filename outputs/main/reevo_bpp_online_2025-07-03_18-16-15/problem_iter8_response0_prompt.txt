{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Perfect/Near Fit: Gaussian centered around perfect fit. Scaled by item size.\n    perfect_fit_target = item\n    fit_deviation = np.abs(bins_remain_cap - perfect_fit_target)\n    priorities = item * np.exp(-0.5 * (fit_deviation / (0.1 * bin_capacity))**2)  # Gaussian, scaled by item\n\n    # 2. Fragmentation Penalty: Exponential penalty for small remaining capacity. Sharper penalty.\n    remaining_capacity = bins_remain_cap - item\n    fragmentation_penalty = np.zeros_like(bins_remain_cap)\n    fragmentation_mask = remaining_capacity > 0\n    fragmentation_penalty[fragmentation_mask] = np.exp(-10 * remaining_capacity[fragmentation_mask] / bin_capacity)\n    priorities -= fragmentation_penalty * item #scale penalty by item size\n\n    # 3. Controlled Randomness: Add noise proportional to item size for exploration.\n    noise = 0.01 * item * np.random.randn(len(bins_remain_cap))\n    priorities += noise\n\n    # 4. Infeasibility: Heavily penalize bins that cannot fit the item.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    #5. Prioritize bins that are somewhat occupied.\n    occupied_ratio = (bin_capacity - bins_remain_cap)/bin_capacity\n    priorities += 0.05 * occupied_ratio\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Perfect Fit - Highest priority for bins that fit perfectly.\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000.0\n\n    # Heuristic 2: Remaining Space - Prioritize bins with minimal remaining space after packing.\n    can_fit = bins_remain_cap >= item\n    if np.any(can_fit):\n        remaining_space = bins_remain_cap[can_fit] - item\n        priorities[can_fit] += item / (remaining_space + 1e-6)  # Scale priority by item size\n\n    # Heuristic 3: Moderate Capacity - Encourage using bins with moderate capacity relative to item size.\n    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap <= (item * 3)) & (~perfect_fit)\n    priorities[moderate_capacity] += 10.0\n\n    # Heuristic 4: Large Capacity Penalty - Discourage using bins with significantly more capacity than needed.\n    large_capacity = (bins_remain_cap > item * 5) & can_fit\n    priorities[large_capacity] -= 1.0\n\n    # Heuristic 5: Infeasible Allocation Penalty: Massive negative priority.\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf\n\n    # Heuristic 6: Prioritize more filled bins.\n    max_capacity = np.max(bins_remain_cap)\n    fill_level = (max_capacity - bins_remain_cap) / max_capacity\n    priorities[can_fit] += 5 * fill_level[can_fit]\n    \n    return priorities\n\n[Reflection]\nPrioritize clear, distinct heuristics. Use explicit rules and thresholds instead of complex, scaled functions.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}