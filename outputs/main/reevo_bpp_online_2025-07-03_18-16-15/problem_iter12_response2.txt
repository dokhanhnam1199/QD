```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Tighter Slack Penalization and Item Size Adjustment
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        # Exponential penalization of slack, scaled by item size
        priorities[fit_mask] = np.exp(-50 * slack / bin_capacity) * (1 + 0.6 * item / bin_capacity)  # Tighter slack, higher item influence
    else:
        priorities[:] = -np.inf  # Cannot fit

    # 2. Refined Fill Thresholds and Penalties
    remaining_capacity = bins_remain_cap - item
    nearly_full_penalty = np.exp(-20 * (remaining_capacity / bin_capacity)) * (remaining_capacity >= 0) # even stronger penalty when close to being full
    nearly_empty_penalty = np.exp(-7 * (bins_remain_cap / bin_capacity)) * (remaining_capacity >= 0) * (bins_remain_cap > 0) * (bins_remain_cap > (2 * item)) # slightly stronger penalty for being nearly empty
    priorities -= nearly_full_penalty + nearly_empty_penalty

    # 3. Direct Occupancy Reward
    occupied_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    bonus = 0.3 * occupied_ratio # stronger bonus
    priorities += bonus

    # 4. Moderate Occupancy Preference
    moderate_occupancy = np.logical_and(remaining_capacity/bin_capacity > 0.25, remaining_capacity/bin_capacity < 0.75) & (remaining_capacity >= 0)
    priorities[moderate_occupancy] += 0.1 # stronger preference for this range

    # 5. Larger Item, Larger Bin Preference (refined)
    priorities[fit_mask] *= (1 + 0.2 * item / bin_capacity) # increase influence for large item

    return priorities
```
