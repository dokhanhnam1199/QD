```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility Check
    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        return -np.inf * np.ones_like(bins_remain_cap)

    # Snug Fit Reward
    slack = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1.0 / (slack + 0.001)  # Inverse slack, avoid division by zero

    # Fragmentation Penalty (Exponential)
    remaining_capacity = bins_remain_cap - item
    frac_penalty_mask = remaining_capacity >= 0
    remaining_capacity_norm = remaining_capacity[frac_penalty_mask] / np.max(bins_remain_cap)
    priorities[frac_penalty_mask] -= np.exp(-50 * remaining_capacity_norm) # exponential penalty for small remaining cap
    #Extreme Fill Penalty
    almost_full = np.logical_and(remaining_capacity >=0, remaining_capacity <= 0.1 * np.max(bins_remain_cap)) #extremely high fill levels
    priorities[almost_full] -= 5


    # Moderate Fill Bonus
    occupied_space = np.max(bins_remain_cap) - bins_remain_cap
    occupied_ratio = occupied_space / np.max(bins_remain_cap)

    moderate_fill_mask = np.logical_and(occupied_ratio > 0.2, occupied_ratio < 0.8) & fit_mask #Only give bonus to bins where item can fit and are moderately filled
    priorities[moderate_fill_mask] += 0.5


    # Item Size Scaling
    priorities[fit_mask] *= (1 + 0.5 * (item / np.max(bins_remain_cap))) #scale priorities with item size


    # Remaining capacity bonus
    bonus_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap< 0.75 * np.max(bins_remain_cap)) #bins which can hold item and is less than 75% full
    priorities[bonus_capacity] += 0.1



    return priorities
```
