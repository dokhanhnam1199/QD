```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give a very high priority to bins that can fit the item exactly.
    exact_fit = np.isclose(bins_remain_cap, item)
    priorities[exact_fit] = 1000  # Very high priority
    
    # Give higher priority to bins where the item fits, but not too much space is left.
    fits = bins_remain_cap >= item
    
    # Calculate remaining space after placing the item.
    remaining_space = bins_remain_cap[fits] - item
    
    # Prioritize bins where the remaining space is small.
    # Avoid bins with large wasted space, which could be used to pack later items.
    priorities[fits] = 100 / (remaining_space + 0.001) # Adding a small number for avoiding division by zero.
    
    # Penalize bins that don't fit.
    priorities[bins_remain_cap < item] = -100  # Very low priority

    return priorities
```
