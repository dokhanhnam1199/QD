```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1:  Bins that can accommodate the item perfectly get highest priority
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # Arbitrarily high value for perfect fit

    # Heuristic 2: Bins where item fits with least remaining space get higher priority.
    # But only consider those bins where the item can fit.
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):  # Avoid division by zero
      remaining_space = bins_remain_cap[can_fit] - item
      # Use a more nuanced scoring based on remaining space.  Scale by item size.
      priorities[can_fit] = item / (remaining_space + 0.00001)  # Smaller remainders get higher scores, scaled by item size.

    # Heuristic 3: Moderate capacity bins get higher priority if perfect fit isn't an option.
    # This is a bit of exploration: avoid filling very small and large capacity bins.
    # Mod capacity defined relative to the item size, not the absolute max bin size.
    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap < (item * 3)) & (~perfect_fit)
    priorities[moderate_capacity] += 10  # Add a moderate amount to moderate capacity bins.

    #Heuristic 4: Slightly penalize bins with *much* more capacity than needed.  This encourages filling bins more fully.
    large_capacity = (bins_remain_cap > item * 5) & can_fit
    priorities[large_capacity] -= 1 #Small penalty.
    
    return priorities
```
