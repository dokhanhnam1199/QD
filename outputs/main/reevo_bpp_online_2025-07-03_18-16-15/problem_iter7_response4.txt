```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Perfect/Near Fit: Gaussian centered around perfect fit. Scaled by item size.
    perfect_fit_target = item
    fit_deviation = np.abs(bins_remain_cap - perfect_fit_target)
    priorities = item * np.exp(-0.5 * (fit_deviation / (0.1 * bin_capacity))**2)  # Gaussian, scaled by item

    # 2. Fragmentation Penalty: Exponential penalty for small remaining capacity. Sharper penalty.
    remaining_capacity = bins_remain_cap - item
    fragmentation_penalty = np.zeros_like(bins_remain_cap)
    fragmentation_mask = remaining_capacity > 0
    fragmentation_penalty[fragmentation_mask] = np.exp(-10 * remaining_capacity[fragmentation_mask] / bin_capacity)
    priorities -= fragmentation_penalty * item #scale penalty by item size

    # 3. Controlled Randomness: Add noise proportional to item size for exploration.
    noise = 0.01 * item * np.random.randn(len(bins_remain_cap))
    priorities += noise

    # 4. Infeasibility: Heavily penalize bins that cannot fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    #5. Prioritize bins that are somewhat occupied.
    occupied_ratio = (bin_capacity - bins_remain_cap)/bin_capacity
    priorities += 0.05 * occupied_ratio

    return priorities
```
