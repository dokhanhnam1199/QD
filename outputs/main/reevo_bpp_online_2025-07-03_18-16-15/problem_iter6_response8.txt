```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # 1. Feasibility Check and Slack-Based Priority
    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        return -np.inf * np.ones_like(bins_remain_cap)  # No feasible bin
    
    slack = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority

    # 2. Fill Ratio Optimization
    fill_ratio = (max_cap - bins_remain_cap) / max_cap
    
    # 2.1 Reward bins that are not empty
    priorities[fit_mask] += 0.1 * fill_ratio[fit_mask]

    # 2.2 Penalize too empty bins
    too_empty = bins_remain_cap > 0.75 * max_cap
    priorities[too_empty] -= 0.05

    # 3. Item Size Influence (Interaction with Fill Ratio)
    # Favor smaller items for bins with moderate fill
    moderate_fill = (fill_ratio > 0.25) & (fill_ratio < 0.75) & fit_mask
    priorities[moderate_fill] += 0.2 * (1 - item / max_cap) # smaller item get higher priority if the bin is moderately filled.

    # 4. Balance between Slack and Fill
    # If slack is very small, we want to put this item in
    small_slack = (slack / max_cap < 0.1) & fit_mask
    priorities[small_slack] += 0.1

    return priorities
```
