{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # 1. Essential Fit Prioritization: Highest priority to bins that can accommodate the item.\n    fit_mask = bins_remain_cap >= item\n    if not np.any(fit_mask):\n        return -np.inf * np.ones_like(bins_remain_cap)  # Item doesn't fit in any bin\n\n    slack = bins_remain_cap[fit_mask] - item\n    priorities[fit_mask] = 1.0 / (slack + 1e-6)  # Smaller slack -> higher priority, crucial scaling\n\n    # 2. Fragmentation Penalty: Penalize bins that would become too empty after placing item.\n    remaining_capacity = bins_remain_cap - item\n    frag_mask = (remaining_capacity > 0) & (remaining_capacity / max_cap < 0.2)\n    priorities[frag_mask] -= 0.2 * (1 - remaining_capacity[frag_mask] / (0.2 * max_cap)) # Scale penalty based on level of fragmentation.\n\n    # 3. Fill Level Bonus: Reward bins that are already reasonably filled.\n    occupied_ratio = (max_cap - bins_remain_cap) / max_cap\n    good_fill = (occupied_ratio > 0.1) & (occupied_ratio < 0.9) # Adjust fill range\n    priorities[good_fill] += 0.1 * occupied_ratio[good_fill]  #Scale bonus by occupied ratio\n\n    # 4. Item Size Adaptive Scaling: Adjust based on the proportion of item size to bin capacity.\n    priorities[fit_mask] *= (1 + 0.5 * (item / max_cap)) # Stronger scaling for larger items.\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Snug Fit Priority: Prioritize bins with minimal slack, adjusted by item size.\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        snug_fit_priority = 1 / (slack + 1e-6)\n        priorities[fit_mask] = snug_fit_priority * (1 + 0.5 * item / bin_capacity)  # Larger items get higher priority for snug fits\n    else:\n        priorities[:] = -np.inf  # Cannot fit, so strongly discourage\n\n    # 2. Penalize Extreme Fills: Discourage bins that become nearly full or nearly empty.\n    remaining_capacity = bins_remain_cap - item\n    nearly_full_penalty = np.exp(-10 * (remaining_capacity / bin_capacity)) * (remaining_capacity >= 0)  # Stronger penalty for nearly full\n    nearly_empty_penalty = np.exp(-5 * (bins_remain_cap / bin_capacity)) * (remaining_capacity >= 0) * (bins_remain_cap > 0) * (bins_remain_cap > (2 * item))  # Moderate penalty for low fill, avoid emptying bins completely\n    priorities -= nearly_full_penalty + nearly_empty_penalty\n\n    # 3. Reward Partially Filled Bins: Encourage filling bins that are already partially used.\n    occupied_ratio = (bin_capacity - bins_remain_cap) / bin_capacity\n    bonus = 0.2 * occupied_ratio\n    priorities += bonus\n\n    # 4. Item Size Adjustment: Preferentially use larger bins for larger items (helps packing better overall).\n    priorities[fit_mask] *= (1 + 0.1 * item / bin_capacity)\n\n    # 5. Moderate Capacity Bonus: slight preference to bins between 0.25 and 0.75 fill\n    moderate_capacity = np.logical_and(remaining_capacity/bin_capacity > 0.25, remaining_capacity/bin_capacity < 0.75) & (remaining_capacity >= 0)\n    priorities[moderate_capacity] += 0.05\n\n    return priorities\n\n[Reflection]\nPrioritize snug fits, strongly penalize extreme fills, and moderately reward partially filled bins.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}