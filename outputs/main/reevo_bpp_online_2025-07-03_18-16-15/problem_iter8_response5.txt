```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility Mask: Filter out bins that cannot fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Set priority to -inf for infeasible bins

    # 2. Near-Fit Reward: Exponential reward for bins with remaining capacity close to item size
    slack = bins_remain_cap - item
    near_fit = np.exp(-5 * np.abs(slack) / bin_capacity) * feasible_bins # Ensure only feasible bins are considered
    priorities[feasible_bins] += 0.8 * item * near_fit[feasible_bins]  # Scale reward by item size and reduce magnitude

    # 3. Target Fill Level: Gaussian distribution centered around the optimal fill level (75%)
    target_fill = 0.75 * bin_capacity
    fill_level = bin_capacity - bins_remain_cap
    priorities[feasible_bins] += 0.2 * np.exp(-((fill_level[feasible_bins] - target_fill) ** 2) / (2 * (bin_capacity * 0.2) ** 2))  #Smaller magnitude to avoid dominating near-fit

    # 4. Fragmentation Penalty: Apply a negative reward if remaining capacity is very small
    remaining_capacity = bins_remain_cap - item
    frag_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * bin_capacity) & feasible_bins  # Consider fragmentation only on feasible bins
    priorities[frag_mask] -= 0.6 * item  # Scale penalty by item size; tuned magnitude

    # 5. Controlled Randomness: Add a small amount of noise to the priorities for exploration
    priorities[feasible_bins] += 0.005 * item * np.random.randn(np.sum(feasible_bins)) # Scale randomness with item size; further reduced magnitude

    return priorities
```
