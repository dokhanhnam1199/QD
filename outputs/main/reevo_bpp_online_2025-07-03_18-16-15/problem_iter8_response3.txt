```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)
    
    # 1. Perfect Fit: Highest priority for bins that fit perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] += 1000.0

    # 2. Moderate Capacity: Prioritize bins with moderate capacity relative to item size.
    #    Also avoid bins that are already almost full.
    can_fit = bins_remain_cap >= item
    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap <= (item * 3)) & (~perfect_fit) & (bins_remain_cap > 1.1 * item)
    priorities[moderate_capacity] += 50.0

    # 3. Remaining Space: Prioritize bins with minimal remaining space after packing, but only if it's not a perfect fit or moderate capacity.
    if np.any(can_fit & ~perfect_fit & ~moderate_capacity):
        remaining_space = bins_remain_cap[can_fit & ~perfect_fit & ~moderate_capacity] - item
        priorities[can_fit & ~perfect_fit & ~moderate_capacity] += item / (remaining_space + 1e-6)  # Scale priority by item size

    # 4. Fragmentation Penalty: Penalize creating very small remaining space in bins.
    remaining_after_fill = bins_remain_cap - item
    fragmentation = (remaining_after_fill > 0) & (remaining_after_fill < 0.1 * bin_capacity)
    priorities[fragmentation] -= 50.0

    # 5. Large Capacity Penalty: Discourage using bins with significantly more capacity than needed.
    large_capacity = (bins_remain_cap > item * 5) & can_fit
    priorities[large_capacity] -= 5.0

    # 6. Infeasible Allocation Penalty: Massive negative priority if item doesn't fit.
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # 7. Prioritize more filled bins (encourage using partially filled bins before empty ones).
    fill_level = (bin_capacity - bins_remain_cap) / bin_capacity
    priorities[can_fit] += 10 * fill_level[can_fit]

    return priorities
```
