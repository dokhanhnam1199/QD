```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Heuristic 1: Tight Fit - Prioritize bins with small slack after packing.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] += 1 / (slack + 1e-6)  # Smaller slack, higher priority. Adding to existing value
    else:
        return -np.inf * np.ones_like(bins_remain_cap) #Cannot fit in any bin

    # Heuristic 2: Filled Bin Bonus - Give a bonus to bins already somewhat full.
    occupied_ratio = (max_cap - bins_remain_cap) / max_cap
    priorities += 0.2 * occupied_ratio  # Bonus proportional to occupancy. Adding to existing value

    # Heuristic 3: Moderate Capacity Preference - Avoid bins that are nearly empty or full.
    capacity_ratio = bins_remain_cap / max_cap
    priorities -= 0.1 * np.abs(capacity_ratio - 0.5)  # Penalize deviation from 0.5 capacity. Subtracting from existing value

    # Heuristic 4: Penalize near-full bins after insertion (fragmentation avoidance).
    remaining_ratio = (bins_remain_cap - item) / max_cap
    near_full_penalty = np.where((remaining_ratio > 0) & (remaining_ratio < 0.1), 10 * (0.1 - remaining_ratio), 0)
    priorities -= near_full_penalty # Subtracting from existing value

    # Heuristic 5: Adaptive Penalty based on item size. Larger items penalize nearly-full bins more.
    large_item_penalty = np.where((remaining_ratio > 0) & (remaining_ratio < 0.2), item * 5 * (0.2 - remaining_ratio), 0)
    priorities -= large_item_penalty # Subtracting from existing value

    # Heuristic 6: Infeasible Allocation Penalty: Massive negative priority.
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
