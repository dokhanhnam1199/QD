{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Perfect Fit: Highest priority if the bin fits perfectly.\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000.0\n\n    # 2. First Fit: Give a base priority to all bins that can fit the item.\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1.0\n\n    # 3. Best Fit: Prioritize bins with the least remaining space after packing.\n    if np.any(can_fit):\n        remaining_space = bins_remain_cap[can_fit] - item\n        min_remaining_space_mask = remaining_space == np.min(remaining_space)\n        priorities[can_fit][min_remaining_space_mask] += 50.0\n\n    # 4. Moderate Waste: Add a bonus if the remaining capacity is not too large relative to the item.\n    moderate_waste = can_fit & (bins_remain_cap <= 2 * item)\n    priorities[moderate_waste] += 20.0\n\n    # 5. Avoid Overfilling: Heavily penalize bins that cannot fit the item.\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf\n\n    # 6. Prioritize Occupied Bins: Add priority based on how full the bin is.\n    max_capacity = np.max(bins_remain_cap)\n    fill_ratio = (max_capacity - bins_remain_cap) / max_capacity\n    priorities[can_fit] += 10 * fill_ratio[can_fit]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Tight Fit Priority\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority\n        priorities[fit_mask] *= (1 + item / bin_capacity)  # Scale by item size\n    else:\n        priorities[:] = -np.inf  # Item cannot fit; force new bin\n\n    # 2. Avoid Extreme Fill Levels\n    remaining_capacity = bins_remain_cap - item\n    too_full_penalty = np.exp(-10 * (remaining_capacity / bin_capacity)) * (remaining_capacity >= 0)\n    too_empty_penalty = np.exp(-10 * (bins_remain_cap / bin_capacity)) * (remaining_capacity >= 0) * (bins_remain_cap < bin_capacity / 2)\n\n    priorities -= (too_full_penalty + too_empty_penalty)\n\n    # 3. Reward Moderately Filled Bins\n    occupied_ratio = (bin_capacity - bins_remain_cap) / bin_capacity\n    moderate_capacity_bonus = 0.1 * occupied_ratio\n    priorities += moderate_capacity_bonus\n\n    # 4. Added encouragement for bins that are more than one item filled\n    filled_threshold = 0.25 * bin_capacity\n    already_filled = (bin_capacity - bins_remain_cap) > filled_threshold\n    priorities[already_filled] += 0.025\n    \n    return priorities\n\n[Reflection]\nThe better code uses continuous, scaled priorities, encouraging tight fits and penalizing extreme fill levels with non-linear functions.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}