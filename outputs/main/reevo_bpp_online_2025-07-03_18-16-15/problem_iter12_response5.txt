```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Heuristic 1: First-Fit Decreasing-like behavior (Snug Fit)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority

        # Scale snug fit reward based on item size and remaining capacity
        priorities[fit_mask] *= (1 + item / bin_capacity)
    else:
        priorities[:] = -np.inf  # Item cannot fit, force new bin

    # Heuristic 2: Sharply Penalize Fragmentation (Exponentially)
    remaining_capacity = bins_remain_cap - item
    
    # Calculate penalties only for bins where the item can fit
    fragmentation_penalty_mask = remaining_capacity >= 0

    if np.any(fragmentation_penalty_mask):
        remaining_capacity_norm = remaining_capacity[fragmentation_penalty_mask] / bin_capacity

        # Sharply penalize bins that become too full
        too_full_penalty = np.zeros_like(bins_remain_cap)
        too_full_penalty[fragmentation_penalty_mask] = np.exp(10 * (remaining_capacity_norm - 0.1)) * (remaining_capacity_norm <= 0.1)
        priorities -= too_full_penalty
        
        # Sharply penalize bins that become too empty (fragmented)
        too_empty_penalty = np.zeros_like(bins_remain_cap)
        too_empty_penalty[fragmentation_penalty_mask] = np.exp(-10 * (bins_remain_cap[fragmentation_penalty_mask] / bin_capacity)) * (bins_remain_cap[fragmentation_penalty_mask] > bin_capacity * 0.7)
        priorities -= too_empty_penalty


    # Heuristic 3: Bonus for bins that are already somewhat filled
    occupied_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    bonus = 0.1 * occupied_ratio
    priorities += bonus

    # Heuristic 4: Moderate Capacity Bonus (balance fill)
    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < bin_capacity * 0.75)
    priorities[moderate_capacity] += 0.05

    return priorities
```
