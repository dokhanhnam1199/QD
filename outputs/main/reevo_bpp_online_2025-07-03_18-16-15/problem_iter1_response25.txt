```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Bins that can't fit the item get a very low priority.
    priorities[bins_remain_cap < item] = -np.inf

    # Rule 2: Maximize the used space while preventing overflow (First-Fit Decreasing heuristic inspired).
    # Bins with remaining capacity closest to the item size get the highest priority.
    # The closer the fit, the better (without overflowing).
    fit_diff = bins_remain_cap - item
    priorities[bins_remain_cap >= item] = -np.abs(fit_diff[bins_remain_cap >= item])

    # Rule 3: If multiple bins have the same fit difference, prioritize those with smaller remaining capacity to prevent fragmentation. (Worst-Fit Decreasing heuristic inspired but adapted).
    # This acts as a tie-breaker.
    min_diff = np.min(np.abs(fit_diff[bins_remain_cap >= item]))
    equal_fit_bins = np.isclose(np.abs(fit_diff), min_diff) & (bins_remain_cap >= item)
    priorities[equal_fit_bins] += -bins_remain_cap[equal_fit_bins] / np.max(bins_remain_cap) if np.any(equal_fit_bins) else 0 # Normalize to range [-1, 0]
    
    return priorities
```
