```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    item_ratio = item / max_cap

    # 1. Feasibility Check
    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        return -np.inf * np.ones_like(bins_remain_cap)

    # 2. Snug Fit Reward
    slack = bins_remain_cap[fit_mask] - item
    slack_ratio = slack / max_cap
    priorities[fit_mask] += item_ratio / (slack_ratio + 0.001) #scaled by item size and scaled slack

    # 3. Fragmentation Penalty (Exponential)
    remaining_capacity = bins_remain_cap - item
    remaining_mask = remaining_capacity >= 0

    if np.any(remaining_mask):
        remaining_ratio = remaining_capacity[remaining_mask] / max_cap
        priorities[remaining_mask] -= item_ratio * np.exp(-50 * remaining_ratio) # exponentially decaying penalty for small remaining cap

    # 4. Moderate Fill Bonus
    occupied_space = max_cap - bins_remain_cap
    occupied_ratio = occupied_space / max_cap
    moderate_fill_mask = np.logical_and(occupied_ratio > 0.2, occupied_ratio < 0.8) & fit_mask  # Only give bonus to bins where item can fit and are moderately filled
    priorities[moderate_fill_mask] += 0.5 * item_ratio

    # 5. Item Size Scaling - removed duplication of item ratio
    priorities[fit_mask] *= (1 + 0.5 * item_ratio)

    # 6. Remaining capacity bonus - scale by item size too
    bonus_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < 0.75 * max_cap)
    priorities[bonus_capacity] += 0.1 * item_ratio

    return priorities
```
