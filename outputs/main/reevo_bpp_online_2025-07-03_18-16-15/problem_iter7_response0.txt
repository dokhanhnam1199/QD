```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Heuristic 1: Perfect/Near Fit Reward (scaled by item size)
    slack = bins_remain_cap - item
    perfect_fit_bonus = np.exp(-np.abs(slack) / (0.1 * bin_capacity)) * (slack >= 0) * item
    priorities += 10 * perfect_fit_bonus

    # Heuristic 2: Target Fill Level (Gaussian)
    target_fill = 0.75 * bin_capacity  # Aim for 75% fill
    fill_level = bin_capacity - bins_remain_cap
    gaussian_reward = np.exp(-((fill_level - target_fill) ** 2) / (2 * (0.2 * bin_capacity) ** 2))
    priorities += gaussian_reward

    # Heuristic 3: Fragmentation Penalty (sharp)
    remaining_capacity = bins_remain_cap - item
    fragmentation_penalty = -100 * (remaining_capacity < 0.1 * bin_capacity) * (remaining_capacity >= 0)
    priorities += fragmentation_penalty

    # Heuristic 4: Controlled Randomness (proportional to item size)
    randomness = np.random.rand(len(bins_remain_cap)) * 0.01 * item
    priorities += randomness

    # Heuristic 5: First-Fit consideration (avoid many almost empty bins)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        priorities[~fit_mask] = -np.inf
    else:
        priorities[:] = -np.inf

    # Heuristic 6: Prioritize item fitting if bin is below a threshold
    threshold = bin_capacity * 0.25
    priorities[bins_remain_cap < threshold] += 5.0

    return priorities
```
