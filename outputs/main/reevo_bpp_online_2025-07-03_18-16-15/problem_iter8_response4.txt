```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # 1. Fit Prioritization: Highest priority to bins that can accommodate the item.
    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        return -np.inf * np.ones_like(bins_remain_cap)  # Item doesn't fit in any bin
    slack = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack -> higher priority

    # 2. Fragmentation Penalty: Penalize bins that would become nearly full.
    remaining_capacity = bins_remain_cap - item
    too_full = (remaining_capacity / max_cap) < 0.1
    priorities[fit_mask & too_full] -= 0.25 # Reduce priority if almost full.

    # 3. Fill Level Bonus: Reward bins that are already somewhat filled (but not too full).
    occupied_ratio = (max_cap - bins_remain_cap) / max_cap
    good_fill = (occupied_ratio > 0.2) & (occupied_ratio < 0.8)
    priorities[good_fill] += 0.15 # Increased bonus

    # 4. Moderate Capacity Bonus
    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < max_cap * 0.75)
    priorities[moderate_capacity] += 0.05

    # 5. Item size adjustment: Prefer to put larger items in bins with available capacity
    priorities[fit_mask] *= (1 + item / max_cap)

    return priorities
```
