```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            fill_ratio = item / cap
            waste = cap - item

            # Heuristic 1: Prefer bins where the item fits reasonably well.
            priorities[i] += 1 / (1 + abs(fill_ratio - 0.75)) # Prefer filling around 75%

            # Heuristic 2: Penalize small waste (but only when item fits)
            if waste > 0:
                priorities[i] +=  np.exp(-waste) #Smaller the waste larger priority

            #Heuristic 3: Encourage filling up empty space; empty bins get high priority.
            priorities[i] += 0.01 * cap  # slightly prefer less full bins, avoid putting things in bins nearly at capacity unless other options bad.

        else:
            priorities[i] = -np.inf  # Cannot add item to this bin

    return priorities
```
