```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, prioritize bins that can actually fit the item.
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
      #If no bins can fit item, return negative infinity for all.
      return np.full_like(bins_remain_cap, fill_value=-np.inf)

    # For bins that can fit the item, calculate a score based on remaining capacity.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    
    # Higher priority to bins where the remaining capacity is small
    # but not too small (avoiding near-empty bins unless necessary). We will award bins with smaller space remaining more priority and vice-versa
    priorities[valid_bins] = 1.0 / (remaining_after_fit + 0.0001)  # Add a small constant to avoid division by zero
    
    #Also include bin utilization by incorporating the size of the item relative to capacity
    priorities[valid_bins] += item / bins_remain_cap[valid_bins]

    # Optionally, add a small bias towards bins that are already somewhat full.
    #This might help consolidating items. However, we are mainly interested in
    # reducing bin numbers so lets give it very low importance
    filled_ratio = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[valid_bins] += 0.01 * filled_ratio[valid_bins]


    return priorities
```
