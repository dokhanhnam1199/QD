```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Perfect/Near Fit Reward: Exponential function for near fit, scaled by item size
    slack = bins_remain_cap - item
    near_fit_mask = slack >= 0
    if np.any(near_fit_mask):
      priorities[near_fit_mask] += item * np.exp(-5 * slack[near_fit_mask] / bin_capacity)


    # 2. Target Fill Level: Gaussian distribution around optimal fill level (e.g., 75%)
    target_fill = 0.75 * bin_capacity
    fill_level = bin_capacity - bins_remain_cap
    priorities += np.exp(-((fill_level - target_fill) ** 2) / (2 * (bin_capacity * 0.2) ** 2))

    # 3. Fragmentation Penalty: Sharp penalty for small remaining capacity
    remaining_capacity = bins_remain_cap - item
    frag_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * bin_capacity)
    priorities[frag_mask] -= 0.5 * item #Significant penalty. Item size based to adjust penalty.

    # 4. Controlled Randomness (Exploration): Add noise proportional to item size
    priorities[near_fit_mask] += 0.01 * item * np.random.randn(np.sum(near_fit_mask))


    # 5. Avoid placing items to bins that can't fit
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = -np.inf

    return priorities
```
