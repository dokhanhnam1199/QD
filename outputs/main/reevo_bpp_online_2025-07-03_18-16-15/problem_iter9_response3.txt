```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Heuristic 1: Perfect/Snug Fit - High Reward, scaled by item size
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        perfect_fit = np.isclose(slack, 0)
        priorities[fit_mask] = (item / max_cap) / (slack + 0.01 * max_cap) #Scale priority by item size. Avoid zero div
        priorities[fit_mask][perfect_fit] += 0.5 # Large bonus for perfect fit
    else:
        priorities[:] = -np.inf  # Cannot fit

    # Heuristic 2: Moderate Fill - Reward partial filling
    remaining_capacity = bins_remain_cap - item
    moderate_fill = np.logical_and(remaining_capacity >= 0, remaining_capacity <= 0.75 * max_cap)
    priorities[moderate_fill] += 0.2 * (1- remaining_capacity[moderate_fill]/max_cap) #Reward moderate fill

    # Heuristic 3: Fragmentation Penalty - Sharply penalize near full and near empty
    nearly_full = np.logical_and(remaining_capacity >= 0, remaining_capacity < 0.1 * max_cap)
    nearly_empty = np.logical_and(remaining_capacity >= 0, bins_remain_cap < 0.2 * max_cap)
    priorities[nearly_full] -= 0.4
    priorities[nearly_empty] -= 0.3 #Slightly less penalty for nearly empty than nearly full


    # Heuristic 4: Item Size Dependent Randomness (Cautious)
    if item > 0.5 * max_cap: #Larger items get less randomness
        randomness = 0.01 * np.random.rand(len(bins_remain_cap))
    else:
         randomness = 0.02 * np.random.rand(len(bins_remain_cap))
    priorities += randomness

    return priorities
```
