```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate how much space will be wasted if the item is placed in this bin
            waste = cap - item

            # Prioritize bins that can fit the item with minimal waste.
            # Use a combination of factors to define priority:
            #   - Inverse of waste: Smaller waste -> higher priority.  Add a small constant to avoid division by zero.
            #   - Remaining capacity: Bins with smaller remaining capacity should be prioritized slightly to keep bins balanced

            priorities[i] = 1 / (waste + 0.001) + (1 / (cap+0.001))

            #Potentially a power law can be used. Let us see if it improves
            #priorities[i] = (1/(waste+0.001))**0.5 + (1/ (cap +0.001))**0.5

        else:
            priorities[i] = -np.inf  # Bin cannot fit the item, so give it the lowest priority

    return priorities
```
