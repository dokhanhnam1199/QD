{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Perfect Fit\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    if np.any(perfect_fit):\n        priorities[perfect_fit] += 10  # High priority for perfect fit\n\n    # Heuristic 2: Snug Fit (prioritize bins where remaining capacity is slightly larger than the item)\n    snug_fit_mask = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.2)\n    if np.any(snug_fit_mask):\n        slack = bins_remain_cap[snug_fit_mask] - item\n        priorities[snug_fit_mask] += 5 / (slack + 0.001)  # Smaller slack, higher priority\n\n    # Heuristic 3: Moderate Fill (reward bins that, after placing the item, have a reasonable fill level)\n    remaining_capacity = bins_remain_cap - item\n    moderate_fill_mask = (remaining_capacity >= 0) & (remaining_capacity <= np.max(bins_remain_cap) * 0.75)\n    priorities[moderate_fill_mask] += 2\n\n    # Heuristic 4: Penalize Overflow (severely penalize bins that cannot fit the item)\n    overflow_mask = bins_remain_cap < item\n    priorities[overflow_mask] = -np.inf\n\n    # Heuristic 5: Penalize Fragmentation (penalize bins that, after placing the item, become almost empty)\n    fragmentation_mask = (remaining_capacity >= 0) & (remaining_capacity <= np.max(bins_remain_cap) * 0.1)\n    priorities[fragmentation_mask] -= 3\n\n    # Heuristic 6: Reward Partial Fills (give a small bonus to bins that are already partially filled)\n    occupied_ratio = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)\n    priorities += 0.5 * occupied_ratio\n\n    # Heuristic 7: Item-Size Dependent Adjustment\n    priorities[(bins_remain_cap >= item)] += 0.1 * (item / np.max(bins_remain_cap))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # 1. Fit Prioritization: Highest priority to bins that can accommodate the item.\n    fit_mask = bins_remain_cap >= item\n    if not np.any(fit_mask):\n        return -np.inf * np.ones_like(bins_remain_cap)  # Item doesn't fit in any bin\n    slack = bins_remain_cap[fit_mask] - item\n    priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack -> higher priority\n\n    # 2. Fragmentation Penalty: Penalize bins that would become nearly full.\n    remaining_capacity = bins_remain_cap - item\n    too_full = (remaining_capacity / max_cap) < 0.1\n    priorities[fit_mask & too_full] -= 0.25 # Reduce priority if almost full.\n\n    # 3. Fill Level Bonus: Reward bins that are already somewhat filled (but not too full).\n    occupied_ratio = (max_cap - bins_remain_cap) / max_cap\n    good_fill = (occupied_ratio > 0.2) & (occupied_ratio < 0.8)\n    priorities[good_fill] += 0.15 # Increased bonus\n\n    # 4. Moderate Capacity Bonus\n    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < max_cap * 0.75)\n    priorities[moderate_capacity] += 0.05\n\n    # 5. Item size adjustment: Prefer to put larger items in bins with available capacity\n    priorities[fit_mask] *= (1 + item / max_cap)\n\n    return priorities\n\n[Reflection]\nFocus on essential fit, fragmentation, and fill-level factors with adaptive scaling based on item size.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}