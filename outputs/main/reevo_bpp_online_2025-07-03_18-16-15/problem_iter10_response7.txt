```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility Mask
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    # 2. Scaled Near-Fit Reward
    slack = bins_remain_cap - item
    near_fit_reward = np.exp(-5 * np.abs(slack) / bin_capacity) * feasible_bins
    priorities[feasible_bins] += 0.7 * item * near_fit_reward[feasible_bins]

    # 3. Target Fill Level Reward (Gaussian)
    target_fill = 0.75 * bin_capacity
    fill_level = bin_capacity - bins_remain_cap
    fill_level_reward = np.exp(-((fill_level - target_fill) ** 2) / (2 * (bin_capacity * 0.2) ** 2)) * feasible_bins
    priorities[feasible_bins] += 0.3 * fill_level_reward[feasible_bins]

    # 4. Scaled Fragmentation Penalty
    remaining_capacity = bins_remain_cap - item
    frag_mask = (remaining_capacity > 0) & (remaining_capacity < 0.1 * bin_capacity) & feasible_bins
    priorities[frag_mask] -= 0.5 * item

    # 5. Controlled Randomness (Exploration)
    priorities[feasible_bins] += 0.01 * item * np.random.randn(np.sum(feasible_bins))

    return priorities
```
