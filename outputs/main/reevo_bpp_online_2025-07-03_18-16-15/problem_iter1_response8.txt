```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    # 2. Calculate remaining capacity after placing the item (only for feasible bins)
    remaining_capacity = bins_remain_cap - item
    
    # 3. Reward bins with smaller remaining capacity (First-Fit Decreasing-like)
    priorities[feasible_bins] = 1 / (remaining_capacity[feasible_bins] + 1e-9) # Add small constant to avoid division by zero
    
    # 4. Big reward for almost full bins if item fits.
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap < item + 0.2) # item+threshold
    priorities[almost_full] = 1000

    # 5. Negative reward for bins with capacity much larger than the item size,
    #    trying to avoid spreading items too thin.
    wasteful = (bins_remain_cap > item * 2) & feasible_bins  # threshold * item
    priorities[wasteful] = -1
    
    return priorities
```
