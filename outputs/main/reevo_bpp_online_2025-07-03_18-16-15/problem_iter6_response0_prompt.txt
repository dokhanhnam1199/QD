{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Perfect Fit - Highest priority for bins that fit perfectly.\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000.0\n\n    # Heuristic 2: Remaining Space - Prioritize bins with minimal remaining space after packing.\n    can_fit = bins_remain_cap >= item\n    if np.any(can_fit):\n        remaining_space = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = item / (remaining_space + 1e-6)  # Scale priority by item size\n\n    # Heuristic 3: Moderate Capacity - Encourage using bins with moderate capacity relative to item size.\n    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap <= (item * 3)) & (~perfect_fit)\n    priorities[moderate_capacity] += 10.0\n\n    # Heuristic 4: Large Capacity Penalty - Discourage using bins with significantly more capacity than needed.\n    large_capacity = (bins_remain_cap > item * 5) & can_fit\n    priorities[large_capacity] -= 1.0\n\n    # Heuristic 5: Infeasible Allocation Penalty: Massive negative priority.\n    priorities[bins_remain_cap < item] = -np.inf\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Perfect Fit: Big Reward\n    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6  # Tolerance for floating-point comparisons\n    if np.any(perfect_fit):\n        priorities[perfect_fit] += 100 * item  # Huge reward scaled by item size\n\n    # 2. Near Fit: Moderate Reward, scaled by item size and remaining capacity\n    near_fit = (bins_remain_cap >= item) & (~perfect_fit)\n    if np.any(near_fit):\n        slack = bins_remain_cap[near_fit] - item\n        priorities[near_fit] += (item / bin_capacity) * (1 / (slack + 1e-6))\n\n    # 3. Penalize Overflow: Very Harsh Penalty\n    overflow = bins_remain_cap < item\n    priorities[overflow] = -np.inf\n\n    # 4. Moderate Fills: Gaussian-like preference\n    remaining_ratio = bins_remain_cap / bin_capacity\n    preferred_ratio = 0.6  # Target fill ratio\n    gaussian_penalty = np.exp(-((remaining_ratio - preferred_ratio)**2) / (2 * 0.1**2))\n    priorities += gaussian_penalty * item\n\n    # 5. Fragmentation Penalty: Exponential decay\n    remaining_capacity = bins_remain_cap - item\n    fragmentation_penalty = np.exp(-5 * np.abs(remaining_capacity / bin_capacity)) * (remaining_capacity >= 0) #only if the item can fit in bin.\n    priorities -= fragmentation_penalty * item\n\n    # 6. Small Randomness\n    priorities += np.random.normal(0, 0.01, size=bins_remain_cap.shape) * item\n\n    return priorities\n\n[Reflection]\nScale rewards/penalties by item size. Employ Gaussian/exponential functions for nuanced preferences. Add small randomness for exploration.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}