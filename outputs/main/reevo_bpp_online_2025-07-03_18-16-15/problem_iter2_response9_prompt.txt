{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_add = bins_remain_cap - item\n\n    # Give high priority to bins where the item fits and the remaining capacity is minimized, but still positive.\n    # Avoid fragmentation as much as possible.\n\n    fit_mask = remaining_capacity_after_add >= 0\n    if np.any(fit_mask):\n        priorities[fit_mask] = 1 / (remaining_capacity_after_add[fit_mask] + 1e-9)  # Add a small constant to avoid division by zero\n\n        # Prioritize bins with higher initial capacity if multiple bins can fit the item.\n        priorities[fit_mask] += bins_remain_cap[fit_mask] / np.max(bins_remain_cap)  # Add fraction of max bin capacity\n\n    # Give low priority (negative) to bins that cannot fit the item.\n    priorities[~fit_mask] = -1\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # 1. Feasibility check: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Remaining capacity after placing the item: prefer bins where little space will be wasted.\n    remaining_after_placement = bins_remain_cap - item\n    remaining_after_placement[remaining_after_placement < 0] = np.inf # if bin cannot fit item, then inf remaining capacity.\n\n    # 3. A small amount of bias\n    epsilon = 1e-6\n\n    # 4. Priority Score assignment. The bin that can fit the item, and has smallest capacity left after placement will be picked.\n    priorities = np.where(feasible_bins, 1 / (remaining_after_placement + epsilon), 0) # Assign small amount of score so we pick this bin.\n    \n    # Alternative prioritzation strategy: favor bins with fill level closer to 75%\n    # fill_levels = (bins_remain_cap - item) / bins_remain_cap\n    # target_fill = 0.25 # 1-0.75\n    # priorities = np.where(feasible_bins, 1 - np.abs(fill_levels - target_fill), 0)\n\n    return priorities\n\n[Reflection]\nThe better code focuses on feasibility, minimizes wasted space, and avoids negative priorities for infeasible bins.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}