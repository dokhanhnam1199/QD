```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # 1. Feasibility Check
    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        return np.full_like(bins_remain_cap, -np.inf)  # No fit, no priority

    # 2. Tight Fit Priority
    slack = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1 / (slack + 1e-6)

    # 3. Fragmentation Penalty (Focus on bins nearing full)
    remaining_capacity = bins_remain_cap - item
    nearly_full = remaining_capacity < 0.1 * max_cap
    priorities[fit_mask & nearly_full] -= 0.5 #High penalty

    # 4. Occupancy Reward (Moderate Occupancy)
    occupied_ratio = (max_cap - bins_remain_cap) / max_cap
    moderate_occupancy = np.logical_and(occupied_ratio > 0.2, occupied_ratio < 0.8) #Target moderate occupancy, less sensitive
    priorities[moderate_occupancy & fit_mask] += 0.2

    # 5. Item Size Adjustment
    priorities[fit_mask] *= (1 + 0.2 * item / max_cap) #Smaller items preferred

    return priorities
```
