```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1:  Bins that can accommodate the item perfectly get highest priority
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000

    # Heuristic 2: Bins where item fits with least remaining space get higher priority.
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_space = bins_remain_cap[can_fit] - item
        priorities[can_fit] += 1.0 / (remaining_space + 0.00001)

    # Heuristic 3: Moderate capacity bins get higher priority if perfect fit isn't an option.
    max_cap = np.max(bins_remain_cap)
    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap < (max_cap * 0.75)) & (~perfect_fit)
    priorities[moderate_capacity] += 10

    # Heuristic 4: Give preference to bins that are already partially filled
    already_filled = (bins_remain_cap < max_cap) & (bins_remain_cap >= item)
    priorities[already_filled] += 5

    return priorities
```
