```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Perfect Fit Emphasis
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6
    if np.any(perfect_fit):
        priorities[perfect_fit] += 10 * item # Large reward for perfect fit

    # 2. Feasibility Mask
    fit_mask = bins_remain_cap >= item

    # If no bins can fit, return -inf for all bins, forcing a new bin.
    if not np.any(fit_mask):
        return np.full_like(bins_remain_cap, -np.inf)

    # 3. Remaining Capacity Scaling & Perfect Fit Bonus
    slack = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += item / (slack + 0.01 * bin_capacity) # Item size scaled reward for smaller slack

    # 4. Moderate Fills (Gaussian-like)
    remaining_capacity = bins_remain_cap - item
    fill_ratio = remaining_capacity / bin_capacity
    gaussian_like = np.exp(-((fill_ratio - 0.5)**2) / 0.08) * (remaining_capacity >=0) #Target 50% fill
    priorities[fit_mask] += gaussian_like[fit_mask] * item

    # 5. Fragmentation Penalty
    fragmentation_penalty = -np.exp(5 * (1-(bins_remain_cap / bin_capacity))) * (remaining_capacity>=0) #Large value with high fill
    priorities[fit_mask] += fragmentation_penalty[fit_mask] * item

    # 6. Random Exploration (Optional)
    #priorities[fit_mask] += np.random.normal(0, 0.01, size=np.sum(fit_mask)) * item #Small exploration

    return priorities
```
