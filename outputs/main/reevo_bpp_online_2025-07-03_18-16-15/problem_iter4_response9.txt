```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: identify bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit the item, return very negative priorities
        return priorities - np.inf

    # Heuristic 1: Snug Fit - prioritize bins where the item fits snugly
    slack = bins_remain_cap - item
    priorities[feasible_bins] += 1 / (slack[feasible_bins] + 1e-6)

    # Heuristic 2: Fragmentation Penalty - Penalize bins that will become too empty or too full
    remaining_capacity = bins_remain_cap - item
    max_capacity = np.max(bins_remain_cap)

    # Penalize bins becoming too full (high remaining capacity ratio)
    too_full = remaining_capacity < 0.1 * max_capacity
    priorities[feasible_bins & too_full] -= 0.2

    # Penalize bins becoming too empty (low remaining capacity ratio but still feasible)
    too_empty = (remaining_capacity > 0.75 * max_capacity) & feasible_bins
    priorities[too_empty] -= 0.1

    # Heuristic 3: Occupancy Bonus - Reward bins that are already somewhat occupied
    occupancy = max_capacity - bins_remain_cap
    normalized_occupancy = occupancy / max_capacity
    priorities += 0.1 * normalized_occupancy

    # Heuristic 4: Item Size Influence - Give higher priority to bins that can accommodate larger items,
    # to pack smaller ones together and reduce fragmentation
    priorities[feasible_bins] += 0.05 * (item / max_capacity)

    # Heuristic 5: moderate fill bonus
    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < max_capacity * 0.75)
    priorities[moderate_capacity] += 0.03

    return priorities
```
