```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            priorities[i] = (cap * item) / (waste + 0.000001) # Favor bins where item fits, and prefer those with less waste relative to remaining capacity * item
            #priorities[i] =  1/(waste+0.0001) # Try to minize the remaining waste
            #priorities[i] = cap - item # Minimize waste is equvalent to minimize remaining space
        else:
            priorities[i] = -100000 # Very low priority if item doesn't fit

    return priorities
```
