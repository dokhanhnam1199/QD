```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # 1. Essential Fit Prioritization: Highest priority to bins that can accommodate the item.
    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        return -np.inf * np.ones_like(bins_remain_cap)  # Item doesn't fit in any bin

    slack = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] = 1.0 / (slack + 1e-6)  # Smaller slack -> higher priority, crucial scaling

    # 2. Fragmentation Penalty: Penalize bins that would become too empty after placing item.
    remaining_capacity = bins_remain_cap - item
    frag_mask = (remaining_capacity > 0) & (remaining_capacity / max_cap < 0.2)
    priorities[frag_mask] -= 0.2 * (1 - remaining_capacity[frag_mask] / (0.2 * max_cap)) # Scale penalty based on level of fragmentation.

    # 3. Fill Level Bonus: Reward bins that are already reasonably filled.
    occupied_ratio = (max_cap - bins_remain_cap) / max_cap
    good_fill = (occupied_ratio > 0.1) & (occupied_ratio < 0.9) # Adjust fill range
    priorities[good_fill] += 0.1 * occupied_ratio[good_fill]  #Scale bonus by occupied ratio

    # 4. Item Size Adaptive Scaling: Adjust based on the proportion of item size to bin capacity.
    priorities[fit_mask] *= (1 + 0.5 * (item / max_cap)) # Stronger scaling for larger items.

    return priorities
```
