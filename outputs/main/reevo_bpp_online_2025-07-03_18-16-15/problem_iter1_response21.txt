```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic inspiration
    # Prioritize bins that can fit the item best (least wasted space)
    
    can_fit = bins_remain_cap >= item
    
    if not np.any(can_fit):
        # if no bin can fit, give minimal priority, avoiding it, but still allowing filling if must create new bin
        return priorities - 1e-9

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # mark bins that cannot fit
    
    # Assign high priority to bins that result in smallest waste.
    priorities[can_fit] = -waste[can_fit]
    
    # Additional bias to fill already filled bins. Higher utilization.
    bin_utilization = 1 - bins_remain_cap / np.max(bins_remain_cap) # Scaling capacity to a max bin size will influence bin utlization
    priorities = priorities + bin_utilization * can_fit
    
    # A small randomness to avoid deterministic behavior for identical items
    priorities = priorities + np.random.rand(len(bins_remain_cap))*0.001 * can_fit

    return priorities
```
