```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: First-Fit Decreasing-like behavior. Prioritize bins that can fit the item snugly.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority
    else:
        priorities[:] = -np.inf  # item cannot fit in the bins, force new bins to open up

    # Heuristic 2: Penalize bins that become too full after insertion to avoid fragmentation
    fullness = (bins_remain_cap - item) / np.max(bins_remain_cap)
    fullness[fullness < 0] = -np.inf  # Cannot fit
    penalty = np.exp(-10 * fullness)  # Exponential penalty as bins get fuller
    priorities = priorities - penalty

    # Heuristic 3: Bonus for bins that are already somewhat filled (reduces number of partially-filled bins)
    occupied_ratio = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)
    bonus = 0.1 * occupied_ratio
    priorities = priorities + bonus

    return priorities
```
