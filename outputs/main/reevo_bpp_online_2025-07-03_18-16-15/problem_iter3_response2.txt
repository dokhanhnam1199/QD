```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Heuristic 1: Tight Fit - Prioritize bins where the item fits snugly.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] += 10 / (slack + 0.01 * bin_capacity)  # Higher priority for tighter fits
    else:
        priorities[:] = -np.inf  # Item cannot fit

    # Heuristic 2: Moderate Capacity - Prefer bins that are neither too full nor too empty.
    current_fill = (bin_capacity - bins_remain_cap) / bin_capacity
    future_fill = (bin_capacity - (bins_remain_cap - item)) / bin_capacity
    future_fill[~fit_mask] = -1 # Mark bins that cannot fit

    # Penalize near-empty or near-full bins AFTER placing item
    penalty_empty = np.exp(-5 * future_fill) * fit_mask
    penalty_full = np.exp(5 * (future_fill - 0.9)) * fit_mask
    priorities -= penalty_empty + penalty_full

    # Heuristic 3: Reward Partially Filled Bins
    priorities += 2 * current_fill

    # Heuristic 4: Item Size Adjustment - Adjust penalties based on item size
    item_ratio = item / bin_capacity
    if item_ratio > 0.5:  # Large item
        priorities -= 5 * np.exp(-10 * future_fill) * fit_mask # Stronger penalty for nearly full
    elif item_ratio < 0.1:  # Small Item
        priorities +=  3 * np.exp(-10 * (1 - current_fill)) # Reward almost empty

    # Heuristic 5: inverse capacity - if multiple options are valid, favor the larger remaining capacity (more space for future)
    priorities += bins_remain_cap / bin_capacity

    return priorities
```
