{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 1.0  # Avoid division by zero if bins_remain_cap is empty\n\n    # Heuristic 1: Perfect Fit - Highest priority for bins that fit perfectly.\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000.0 * item\n\n    # Heuristic 2: Remaining Space - Prioritize bins with minimal remaining space after packing, scaled by item size.\n    can_fit = bins_remain_cap >= item\n    if np.any(can_fit):\n        remaining_space = bins_remain_cap[can_fit] - item\n        priorities[can_fit] += item / (remaining_space + 1e-6)\n\n    # Heuristic 3: Moderate Capacity - Encourage using bins with moderate capacity relative to item size.\n    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap <= (item * 3)) & (~perfect_fit) & can_fit\n    priorities[moderate_capacity] += 10.0 * item\n\n    # Heuristic 4: Large Capacity Penalty - Discourage using bins with significantly more capacity than needed, scaled by item size.\n    large_capacity = (bins_remain_cap > item * 5) & can_fit\n    priorities[large_capacity] -= item * 0.2  # Penalty scaled by item size\n\n    # Heuristic 5: Infeasible Allocation Penalty: Massive negative priority.\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -np.inf\n\n    # Heuristic 6: Prioritize more filled bins.\n    fill_level = (max_cap - bins_remain_cap) / max_cap\n    priorities[can_fit] += 5 * fill_level[can_fit] * item\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # 1. Essential Fit Prioritization: Highest priority to bins that can accommodate the item.\n    fit_mask = bins_remain_cap >= item\n    if not np.any(fit_mask):\n        return -np.inf * np.ones_like(bins_remain_cap)  # Item doesn't fit in any bin\n\n    slack = bins_remain_cap[fit_mask] - item\n    priorities[fit_mask] = 1.0 / (slack + 1e-6)  # Smaller slack -> higher priority, crucial scaling\n\n    # 2. Fragmentation Penalty: Penalize bins that would become too empty after placing item.\n    remaining_capacity = bins_remain_cap - item\n    frag_mask = (remaining_capacity > 0) & (remaining_capacity / max_cap < 0.2)\n    priorities[frag_mask] -= 0.2 * (1 - remaining_capacity[frag_mask] / (0.2 * max_cap)) # Scale penalty based on level of fragmentation.\n\n    # 3. Fill Level Bonus: Reward bins that are already reasonably filled.\n    occupied_ratio = (max_cap - bins_remain_cap) / max_cap\n    good_fill = (occupied_ratio > 0.1) & (occupied_ratio < 0.9) # Adjust fill range\n    priorities[good_fill] += 0.1 * occupied_ratio[good_fill]  #Scale bonus by occupied ratio\n\n    # 4. Item Size Adaptive Scaling: Adjust based on the proportion of item size to bin capacity.\n    priorities[fit_mask] *= (1 + 0.5 * (item / max_cap)) # Stronger scaling for larger items.\n\n    return priorities\n\n[Reflection]\nFocus on feasibility, slack minimization, fragmentation control, adaptive scaling, and good fill levels.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}