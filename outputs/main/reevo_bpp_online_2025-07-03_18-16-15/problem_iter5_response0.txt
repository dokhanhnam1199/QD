```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Perfect Fit: Huge reward for perfect fits
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6
    priorities[perfect_fit] += 1000 * item  # Scale by item size

    # 2. Near Fit: Reward close fits, scaled by item size and remaining capacity.
    almost_fit = (bins_remain_cap >= item)
    slack = bins_remain_cap - item
    priorities[almost_fit] += (item / bin_capacity) * (1 / (slack[almost_fit] + 1e-6))

    # 3. Moderate Fill: Gaussian-like function to favor moderate fills.
    remaining_after_fill = bins_remain_cap - item
    moderate_fill = np.exp(-((remaining_after_fill - (bin_capacity / 3)) ** 2) / (2 * (bin_capacity / 6) ** 2)) * (remaining_after_fill >= 0)
    priorities += moderate_fill

    # 4. Fragmentation Penalty: Sharply penalize small remaining capacities.
    small_remaining = remaining_after_fill > 0
    fragmentation_penalty = -100 * (remaining_after_fill[small_remaining] / bin_capacity)**0.5
    priorities[small_remaining] += fragmentation_penalty

    # 5. Impossible Fit: Very negative priority if the item doesn't fit.
    no_fit = bins_remain_cap < item
    priorities[no_fit] = -1000

    # 6. Randomness: Introduce small amount of randomness to explore different options.
    priorities += np.random.normal(0, 0.01, size=bins_remain_cap.shape)

    return priorities
```
