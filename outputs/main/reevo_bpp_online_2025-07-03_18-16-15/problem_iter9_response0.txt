```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Heuristic 1: Perfect/Snug Fit: Huge reward for perfect fit, good reward for snug fit
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        perfect_fit = np.isclose(slack, 0)
        priorities[fit_mask] = 0.0
        priorities[fit_mask][perfect_fit] = 10.0  # Huge reward for perfect fit
        priorities[fit_mask][~perfect_fit] = 5.0 / (slack[~perfect_fit] + 0.01)  # Smaller slack, higher priority

    else:
        priorities[:] = -np.inf  # item cannot fit in the bins, force new bins to open up

    # Heuristic 2: Moderate Fill: Reward bins with remaining capacity in moderate range AFTER insertion
    remaining_capacity = bins_remain_cap - item
    moderate_fill = np.logical_and(remaining_capacity >= 0, remaining_capacity <= 0.75 * max_cap)
    priorities[moderate_fill] += 2.0

    # Heuristic 3: Fragmentation Penalty: Sharply penalize bins leading to very small remaining capacity.
    fragmentation_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    small_remaining = np.logical_and(remaining_capacity >= 0, remaining_capacity <= 0.1 * max_cap)
    fragmentation_penalty[small_remaining] = -5.0 #Strong Penalty for small remaining bins
    priorities += fragmentation_penalty

    # Heuristic 4: Overflow Penalty: Ensure never put items in bins with too little capacity
    overflow = remaining_capacity < 0
    priorities[overflow] = -np.inf

    # Heuristic 5: Item Size Dependent Adjustment: Promote insertion into moderately filled bins when item is large
    if item > 0.5 * max_cap:
        moderate_bins = np.logical_and(bins_remain_cap >= item, bins_remain_cap <= 0.9 * max_cap)
        priorities[moderate_bins] += 1.0

    return priorities
```
