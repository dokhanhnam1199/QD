{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # Heuristic 1: Tight Fit Prioritization\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] += 10 / (slack + 0.01)  # Higher priority for tighter fits\n    else:\n        priorities[:] = -np.inf  # Cannot fit, assign lowest priority\n\n    # Heuristic 2: Filling Bins - Reward bins that are already somewhat filled\n    filled_ratio = (bin_capacity - bins_remain_cap) / bin_capacity\n    priorities += 5 * filled_ratio\n\n    # Heuristic 3: Moderate Capacity - Prefer bins with moderate remaining capacity\n    capacity_ratio = bins_remain_cap / bin_capacity\n    priorities += 2 * np.exp(-((capacity_ratio - 0.5) ** 2) / 0.08) # Gaussian-like bonus\n\n    # Heuristic 4: Penalty for Near-Full Bins (Avoid Excessive Fragmentation)\n    near_full_threshold = 0.1 * bin_capacity\n    near_full_mask = (bins_remain_cap - item) < near_full_threshold\n    priorities[near_full_mask] -= 8  # Substantial penalty for bins becoming near full\n\n    # Heuristic 5: Penalty for Near-Empty Bins (Avoid Spreading Items Too Thinly)\n    near_empty_threshold = 0.9 * bin_capacity\n    near_empty_mask = bins_remain_cap > near_empty_threshold\n    priorities[near_empty_mask] -= 3\n\n    # Heuristic 6: Item Size Adaptation\n    item_size_ratio = item / bin_capacity\n    if item_size_ratio > 0.5:  # Large item, prioritize partially filled bins more\n        priorities += 3 * filled_ratio\n    elif item_size_ratio < 0.2:  # Small item, penalize almost full bins\n        near_full_mask = (bins_remain_cap - item) < 0.2 * bin_capacity\n        priorities[near_full_mask] -= 5\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: identify bins that can accommodate the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        # If no bin can fit the item, return all zeros, indicating no priority.\n        return priorities\n\n    # Calculate remaining capacity after placing the item in feasible bins\n    remaining_capacity_after_add = bins_remain_cap[feasible_bins] - item\n\n    # Assign priorities based on remaining capacity: lower remaining capacity gets higher priority.\n    # Use inverse of remaining capacity to prioritize bins with minimal waste\n    priorities[feasible_bins] = 1 / (remaining_capacity_after_add + 1e-9)\n\n    # Normalize priorities to make them more comparable\n    priorities[feasible_bins] /= np.sum(priorities[feasible_bins])\n\n    return priorities\n\n[Reflection]\nFocus on feasibility, minimizing waste, normalization, and avoid complex, hand-tuned heuristics.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}