{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # Heuristic 1: Tight Fit - Prioritize bins where the item fits snugly.\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] += 1 / (slack + 1e-6)  # Smaller slack, higher priority\n    else:\n        return -np.inf * np.ones_like(priorities)\n\n\n    # Heuristic 2: Fill Bins - Reward bins that are already partially full.\n    occupancy = (bin_capacity - bins_remain_cap) / bin_capacity\n    priorities += 0.2 * occupancy\n\n    # Heuristic 3: Moderate Capacity - Prioritize bins with moderate remaining capacity. More Aggressive\n    moderate_mask = (bins_remain_cap > 0.3 * bin_capacity) & (bins_remain_cap < 0.7 * bin_capacity)\n    priorities[moderate_mask] += 0.4\n\n    # Heuristic 4: Penalize Near-Full - Heavily penalize bins that will become nearly full after adding the item. Sharper\n    remaining_after_add = bins_remain_cap - item\n    near_full_penalty = np.exp(-100 * (0.05 - remaining_after_add/bin_capacity)) # high penalty if remaining is less than 5%\n    near_full_penalty[remaining_after_add > 0.05 * bin_capacity] = 0\n    priorities -= near_full_penalty\n\n    # Heuristic 5: Penalize Near-Empty - Penalize bins that are almost empty. Sharper\n    near_empty_penalty = np.exp(-100 * (bins_remain_cap/bin_capacity - 0.95))\n    near_empty_penalty[bins_remain_cap/bin_capacity < 0.95] = 0\n    priorities -= near_empty_penalty\n\n    # Heuristic 6: Item Size Adaptation - Adjust penalties based on item size. More Aggressive\n    item_ratio = item / bin_capacity\n    if item_ratio > 0.5: # for big item, we want to fill any bin to reduce overall number of bins.\n        priorities += 0.2\n    elif item_ratio < 0.2: # smaller items, use tight fit more\n        priorities[fit_mask] += 0.2 / (slack + 1e-6)\n\n    # Heuristic 7: Inverse Capacity - Use inverse of remaining capacity as a finer selection mechanism.\n    priorities += 0.05 / (bins_remain_cap + 1e-6)\n\n    # Heuristic 8: Balance occupancy for larger items.\n    if item_ratio > 0.3:\n        occupancy_penalty = np.abs(occupancy - np.mean(occupancy))\n        priorities -= 0.1 * occupancy_penalty\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Perfect Fit: Huge reward, scaled by item size.\n    perfect_fit_mask = np.isclose(bins_remain_cap, item)\n    if np.any(perfect_fit_mask):\n        priorities[perfect_fit_mask] += 10 * item/bin_capacity  #Substantially increase the reward of perfect fit.\n\n    # 2. Near Fit: Moderate reward, scaled by remaining capacity after placement.\n    near_fit_mask = (bins_remain_cap > item) & (bins_remain_cap <= item + 0.1 * bin_capacity)\n    if np.any(near_fit_mask):\n        slack = bins_remain_cap[near_fit_mask] - item\n        priorities[near_fit_mask] += 2 * (1 - slack/(0.1 * bin_capacity)) * item/bin_capacity\n\n    # 3. Gaussian-like reward for moderate fills (peaks at 60% full after placement).\n    remaining_capacity = bins_remain_cap - item\n    fill_level = (bin_capacity - remaining_capacity) / bin_capacity #Ratio of fill level.\n    gaussian_center = 0.6 #Favor bins that will be 60% full.\n    gaussian_width = 0.3 #Standard deviation of gaussian\n    gaussian_reward = np.exp(-((fill_level - gaussian_center)**2) / (2 * gaussian_width**2)) * item/bin_capacity\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += gaussian_reward[fit_mask]\n\n    # 4. Fragmentation penalty: Sharp penalty if remaining capacity is small but non-zero.  Scaled by item size.\n    fragmentation_threshold = 0.1 * bin_capacity # Small remaining capacity.\n    fragmentation_mask = (remaining_capacity > 0) & (remaining_capacity < fragmentation_threshold)\n    priorities[fragmentation_mask] -= 5 * item/bin_capacity\n\n    # 5. Impossible fit: Large negative priority.\n    no_fit_mask = bins_remain_cap < item\n    priorities[no_fit_mask] = -np.inf\n\n    # 6. Moderate Capacity Bonus: Small bonus for bins that are moderately filled before adding an item\n    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < bin_capacity * 0.75)\n    priorities[moderate_capacity] += 0.01\n\n    # 7. Random Exploration: Small chance to pick any feasible bin.\n    # if np.random.rand() < 0.01 and np.any(fit_mask):\n    #     eligible_bins = np.where(fit_mask)[0]\n    #     random_bin = np.random.choice(eligible_bins)\n    #     priorities[random_bin] += 0.1\n\n    return priorities\n\n[Reflection]\nPrioritize perfect/near fits. Use Gaussian rewards for target fill levels. Penalize fragmentation sharply.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}