{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_add = bins_remain_cap - item\n\n    # Give high priority to bins where the item fits and the remaining capacity is minimized, but still positive.\n    # Avoid fragmentation as much as possible.\n\n    fit_mask = remaining_capacity_after_add >= 0\n    if np.any(fit_mask):\n        priorities[fit_mask] = 1 / (remaining_capacity_after_add[fit_mask] + 1e-9)  # Add a small constant to avoid division by zero\n\n        # Prioritize bins with higher initial capacity if multiple bins can fit the item.\n        priorities[fit_mask] += bins_remain_cap[fit_mask] / np.max(bins_remain_cap)  # Add fraction of max bin capacity\n\n    # Give low priority (negative) to bins that cannot fit the item.\n    priorities[~fit_mask] = -1\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First Fit Decreasing heuristic component: prefer bins that can fit the item\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += 1  # Give a base priority to bins that can fit\n\n    # Best Fit heuristic component: prioritize bins with smallest remaining space *after* adding the item.\n    remaining_space_after_fit = bins_remain_cap[fit_mask] - item\n    # If no bins can fit, the next part is skipped, priorities remain zero\n\n    if remaining_space_after_fit.size > 0:\n        best_fit_priority = 1 / (remaining_space_after_fit + 1e-9) # avoid division by zero.  Inverse of space, higher value == smaller space left after adding.\n        indices_fit = np.where(fit_mask)[0]  #get indices to update\n        priorities[indices_fit] += best_fit_priority  # add the best_fit priority to appropriate bins\n\n    # Introduce a \"nearly full\" bonus - prioritizes filling bins that are mostly full *before* addition.\n    nearly_full_threshold = 0.9 # Threshold as a fraction of total bin size, tuning parameter.\n\n    nearly_full_mask = bins_remain_cap > 0 # bins must exist to calculate ratio\n    ratio = (bins_remain_cap[nearly_full_mask] / (bins_remain_cap[nearly_full_mask] + item)) # capacity remaining/total capacity if packed.  Prioritize bigger changes\n    near_full_bonus = (ratio > nearly_full_threshold)\n    indices_nearly_full = np.where(nearly_full_mask)[0]\n\n    priorities[indices_nearly_full] += near_full_bonus * 2   #arbitrary magnitude 2, tuned\n\n    # Penalize bins where item is significantly larger than the available space if no suitable bin can fit\n    if not np.any(fit_mask):\n        priority_unfit = -(item - bins_remain_cap)\n        priority_unfit[bins_remain_cap == 0] = -np.inf #never select empty bins when no fit is available\n        priorities = priority_unfit\n\n    return priorities\n\n[Reflection]\nCombine best-fit, first-fit, and nearly-full bin prioritization with adaptive penalties for unfit items.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}