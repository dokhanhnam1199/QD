```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Perfect Fit: Huge Reward, scaled by item size
    perfect_fit = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit):
        priorities[perfect_fit] += 1000 * item

    # 2. Near Fit: Moderate Reward, scaled by item size and inverse slack
    near_fit = (bins_remain_cap >= item) & (~perfect_fit)
    if np.any(near_fit):
        slack = bins_remain_cap[near_fit] - item
        priorities[near_fit] += (item**2 / (slack + 1e-6))

    # 3. Overflow Penalty: Very harsh penalty
    overflow = bins_remain_cap < item
    priorities[overflow] = -np.inf

    # 4. Target Fill Ratio: Gaussian preference
    fill_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    target_ratio = 0.7  # Encourage bins to be around 70% full
    gaussian_preference = np.exp(-((fill_ratio - target_ratio)**2) / (2 * 0.15**2))
    priorities += gaussian_preference * item * 0.2

    # 5. Fragmentation Penalty: Exponential decay based on remaining capacity
    remaining_capacity = bins_remain_cap - item
    can_fit = bins_remain_cap >= item
    fragmentation_penalty = np.exp(-5 * (remaining_capacity / bin_capacity)) * can_fit
    priorities -= fragmentation_penalty * item * 0.1

    # 6. Capacity usage reward: the more capacity used, the better
    capacity_used_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    priorities += capacity_used_ratio * item * 0.05

    # 7. Small Randomness
    priorities += np.random.normal(0, 0.005 * item, size=bins_remain_cap.shape)

    # 8. Prioritize bins with higher remaining capacity (Encourage to use empty bin quickly)
    priorities += bins_remain_cap / bin_capacity * item * 0.01

    return priorities
```
