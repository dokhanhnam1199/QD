```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Perfect Fit - Highest priority for bins that fit perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000.0

    # Heuristic 2: Remaining Space - Prioritize bins with minimal remaining space after packing.
    can_fit = bins_remain_cap >= item
    if np.any(can_fit):
        remaining_space = bins_remain_cap[can_fit] - item
        priorities[can_fit] = item / (remaining_space + 1e-6)  # Scale priority by item size

    # Heuristic 3: Moderate Capacity - Encourage using bins with moderate capacity relative to item size.
    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap <= (item * 3)) & (~perfect_fit)
    priorities[moderate_capacity] += 10.0

    # Heuristic 4: Large Capacity Penalty - Discourage using bins with significantly more capacity than needed.
    large_capacity = (bins_remain_cap > item * 5) & can_fit
    priorities[large_capacity] -= 1.0

    # Heuristic 5: Infeasible Allocation Penalty: Massive negative priority.
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
