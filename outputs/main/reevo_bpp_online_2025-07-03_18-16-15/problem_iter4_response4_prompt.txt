{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n\n    # If no bin can fit the item, return a very low priority for all bins.\n    if not np.any(feasible_bins):\n        return np.full_like(bins_remain_cap, -np.inf)\n\n    # 2. Calculate remaining capacity after placing the item (only for feasible bins)\n    remaining_capacity = bins_remain_cap - item\n\n    # 3. Reward bins with smaller remaining capacity (First-Fit Decreasing-like), but only if feasible\n    priorities[feasible_bins] = 1 / (remaining_capacity[feasible_bins] + 1e-9)  # Add small constant to avoid division by zero\n\n    # 4. Big reward for almost full bins if item fits. Make threshold relative to item size.\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= item + item * 0.2)  # item+threshold, relative threshold\n    priorities[almost_full] = 1000\n\n    # 5. Negative reward for bins with capacity much larger than the item size,\n    #    trying to avoid spreading items too thin. Threshold also relative to item size.\n    wasteful = (bins_remain_cap > item * 2) & feasible_bins  # threshold * item, relative threshold\n    priorities[wasteful] = -1\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Heuristic 1:  Bins that can accommodate the item perfectly get highest priority\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000  # Arbitrarily high value for perfect fit\n\n    # Heuristic 2: Bins where item fits with least remaining space get higher priority.\n    # But only consider those bins where the item can fit.\n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):  # Avoid division by zero\n      remaining_space = bins_remain_cap[can_fit] - item\n      # Use a more nuanced scoring based on remaining space.  Scale by item size.\n      priorities[can_fit] = item / (remaining_space + 0.00001)  # Smaller remainders get higher scores, scaled by item size.\n\n    # Heuristic 3: Moderate capacity bins get higher priority if perfect fit isn't an option.\n    # This is a bit of exploration: avoid filling very small and large capacity bins.\n    # Mod capacity defined relative to the item size, not the absolute max bin size.\n    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap < (item * 3)) & (~perfect_fit)\n    priorities[moderate_capacity] += 10  # Add a moderate amount to moderate capacity bins.\n\n    #Heuristic 4: Slightly penalize bins with *much* more capacity than needed.  This encourages filling bins more fully.\n    large_capacity = (bins_remain_cap > item * 5) & can_fit\n    priorities[large_capacity] -= 1 #Small penalty.\n    \n    return priorities\n\n[Reflection]\nPrioritize perfect fits. Scale rewards by item size. Penalize large waste. Encourage moderate fill.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}