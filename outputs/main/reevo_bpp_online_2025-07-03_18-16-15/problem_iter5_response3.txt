```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Perfect Fit Emphasis: Big Reward, scaled by item size.
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6  # Use tolerance for floating-point comparison
    if np.any(perfect_fit):
        priorities[perfect_fit] += 10 * item  # Significant reward for perfect fit


    # 2. Reward snug fits (small slack), scaled by item size and remaining capacity.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] += (item / bin_capacity) / (slack + 0.001)  # Scaled reward

    else:
        priorities[:] = -np.inf  # Cannot fit, so strongly discourage

    # 3. Gaussian-like function for moderate fills (penalize extreme fills).
    #    Favor bins that, *after* adding the item, will be around 50-75% full.
    remaining_capacity = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_capacity) / bin_capacity
    moderate_fill_bonus = np.exp(-((fill_level - 0.625) ** 2) / (2 * 0.1 ** 2)) * (remaining_capacity >= 0) # Gaussian curve centered at 0.625
    priorities += moderate_fill_bonus * 0.5 # Small bonus


    # 4. Fragmentation Penalty: Sharp penalty for small remaining space, even smaller than the item.
    frag_penalty_mask = np.logical_and(remaining_capacity > 0, remaining_capacity < 0.1 * bin_capacity)
    priorities[frag_penalty_mask] -= 2.0 # Significant penalty


    # 5. Item Size Adjustment: Slightly prefer using larger bins for larger items (helps pack better overall).
    priorities[fit_mask] *= (1 + 0.1 * item / bin_capacity) # Boost by relative item size

    return priorities
```
