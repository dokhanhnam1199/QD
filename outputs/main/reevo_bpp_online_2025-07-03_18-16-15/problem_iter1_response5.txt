```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    # 2. Remaining Capacity Optimization:
    #   - Reward bins with tighter fit (minimize wasted space)
    #   - Avoid bins that result in very small remaining capacity.
    remaining_after_fit = bins_remain_cap - item
    
    #   Scale priorities based on the ratio of item size to remaining capacity.
    #   Larger values mean a better fit. A higher value is good if its almost filled
    priorities[feasible_bins] = item / (bins_remain_cap[feasible_bins] + 1e-9) # Add small value to avoid division by zero
    
    #   Penalize bins where very little capacity is remaining
    very_small_threshold = 0.1  # Can be adjusted
    priorities[feasible_bins] -= 10 * (remaining_after_fit[feasible_bins] < very_small_threshold)  # Large penalty
    
    # 3. Prioritize almost full bins
    almost_full_threshold = 0.9 #Threshold can be changed
    almost_full = bins_remain_cap / np.max(bins_remain_cap) > almost_full_threshold
    
    priorities[almost_full] += 5  #A small priority for almost full bins, could avoid spreading the items around if they could actually fit on the almost-full bins.
    
    return priorities
```
