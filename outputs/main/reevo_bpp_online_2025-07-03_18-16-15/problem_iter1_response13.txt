```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins where the item fits.
    fits = bins_remain_cap >= item
    priorities[fits] += 1

    # Heuristic 2: Fill bins as much as possible without exceeding capacity.
    fill_ratios = np.zeros_like(bins_remain_cap, dtype=float)
    fill_ratios[fits] = item / bins_remain_cap[fits]
    priorities[fits] += fill_ratios[fits]

    # Heuristic 3: Smallest remaining capacity after adding the item. Avoid creating almost empty bins
    remaining_capacity_after_addition = bins_remain_cap - item
    almost_empty = (remaining_capacity_after_addition >= 0) & (remaining_capacity_after_addition <= 0.1)
    priorities[almost_empty] -= 0.5  # Penalize making bins almost empty

    # Heuristic 4: If the item doesn't fit in any bin, prioritize bins with maximum remaining cap
    if not np.any(fits):
        max_cap_index = np.argmax(bins_remain_cap)
        priorities[max_cap_index] += 0.2
    return priorities
```
