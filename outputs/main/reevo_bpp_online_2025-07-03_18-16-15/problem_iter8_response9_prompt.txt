{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # Heuristic 1: Perfect/Near Fit Reward (scaled by item size)\n    slack = bins_remain_cap - item\n    perfect_fit_bonus = np.exp(-np.abs(slack) / (0.1 * bin_capacity)) * (slack >= 0) * item\n    priorities += 10 * perfect_fit_bonus\n\n    # Heuristic 2: Target Fill Level (Gaussian)\n    target_fill = 0.75 * bin_capacity  # Aim for 75% fill\n    fill_level = bin_capacity - bins_remain_cap\n    gaussian_reward = np.exp(-((fill_level - target_fill) ** 2) / (2 * (0.2 * bin_capacity) ** 2))\n    priorities += gaussian_reward\n\n    # Heuristic 3: Fragmentation Penalty (sharp)\n    remaining_capacity = bins_remain_cap - item\n    fragmentation_penalty = -100 * (remaining_capacity < 0.1 * bin_capacity) * (remaining_capacity >= 0)\n    priorities += fragmentation_penalty\n\n    # Heuristic 4: Controlled Randomness (proportional to item size)\n    randomness = np.random.rand(len(bins_remain_cap)) * 0.01 * item\n    priorities += randomness\n\n    # Heuristic 5: First-Fit consideration (avoid many almost empty bins)\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        priorities[~fit_mask] = -np.inf\n    else:\n        priorities[:] = -np.inf\n\n    # Heuristic 6: Prioritize item fitting if bin is below a threshold\n    threshold = bin_capacity * 0.25\n    priorities[bins_remain_cap < threshold] += 5.0\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Perfect Fit: Huge Reward, scaled by item size\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    if np.any(perfect_fit):\n        priorities[perfect_fit] += 100 * item\n\n    # 2. Near Fit: Moderate Reward, scaled by item size and inverse slack\n    near_fit = (bins_remain_cap >= item) & (~perfect_fit)\n    if np.any(near_fit):\n        slack = bins_remain_cap[near_fit] - item\n        priorities[near_fit] += (item / (slack + 1e-6))\n\n    # 3. Overflow Penalty: Very harsh penalty\n    overflow = bins_remain_cap < item\n    priorities[overflow] = -np.inf\n\n    # 4. Target Fill Ratio: Gaussian preference\n    fill_ratio = (bin_capacity - bins_remain_cap) / bin_capacity\n    target_ratio = 0.7  # Encourage bins to be around 70% full\n    gaussian_preference = np.exp(-((fill_ratio - target_ratio)**2) / (2 * 0.15**2)) # wider std\n    priorities += gaussian_preference * item * 0.5 #reduced magnitude\n\n    # 5. Fragmentation Penalty: Exponential decay based on remaining capacity\n    remaining_capacity = bins_remain_cap - item\n    can_fit = bins_remain_cap >= item\n    fragmentation_penalty = np.exp(-5 * (remaining_capacity / bin_capacity)) * can_fit #only if the item can fit in bin.\n    priorities -= fragmentation_penalty * item * 0.2 #reduced magnitude\n\n    # 6. Capacity usage reward: the more capacity used, the better\n    capacity_used_ratio = (bin_capacity - bins_remain_cap) / bin_capacity\n    priorities += capacity_used_ratio * item * 0.1 #small magnitude\n\n    # 7. Small Randomness\n    priorities += np.random.normal(0, 0.01 * item, size=bins_remain_cap.shape)\n\n    return priorities\n\n[Reflection]\nPrioritize perfect fits, scale rewards by item size, and penalize overflow harshly. Refine penalties, and add randomness cautiously.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}