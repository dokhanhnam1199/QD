```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired heuristic: Prioritize bins that can fit the item almost perfectly.
    # Try to avoid creating too much wasted space.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        waste = bins_remain_cap[fit_mask] - item
        # Prioritize bins with smallest waste
        priorities[fit_mask] = 1.0 / (1e-6 + waste) #add small number to avoid division by zero
    else:
        # If the item doesn't fit in any bin, assign a low priority to all existing bins to promote new bins to be opened
        priorities[:] = -1e9

    # Boost the priority of bins that are already somewhat full, so we consolidate
    # and open fewer bins in total
    priorities += bins_remain_cap.max() - bins_remain_cap

    return priorities
```
