```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 1.0

    # 1. Feasibility Check and Slack Minimization:
    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        return -np.inf * np.ones_like(bins_remain_cap)

    slack = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] = 10.0 / (slack + 1e-6)  # Higher priority for smaller slack

    # 2. Fragmentation Control: Penalize excessive remaining capacity
    remaining_capacity = bins_remain_cap - item
    frag_mask = (remaining_capacity > 0) & (remaining_capacity > 0.7 * max_cap)
    priorities[frag_mask] -= 0.5 * (remaining_capacity[frag_mask] / max_cap) # Scale penalty by fragmentation level

    # 3. Fill Level Optimization: Reward bins with good fill levels
    occupied_ratio = (max_cap - bins_remain_cap) / max_cap
    good_fill = (occupied_ratio > 0.2) & (occupied_ratio < 0.8)
    priorities[good_fill] += 0.3 * occupied_ratio[good_fill] # Scale bonus by fill level

    # 4. Adaptive Scaling based on Item Size Ratio:
    item_ratio = item / max_cap
    priorities[fit_mask] *= (1 + 0.7 * item_ratio)  # Stronger scaling for larger items relative to bin size

    # 5. Near Perfect Fit Bonus:
    near_perfect_fit = np.isclose(bins_remain_cap, item, rtol=1e-05, atol=0.01 * max_cap) & fit_mask #tolerate upto 1% of max_cap difference
    priorities[near_perfect_fit] += 5.0

    return priorities
```
