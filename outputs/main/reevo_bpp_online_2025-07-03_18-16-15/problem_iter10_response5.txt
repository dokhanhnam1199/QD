```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Tight Fit Priority with Scaling
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        # Inverse slack, scaled by item size and bin capacity
        priorities[fit_mask] = (item / bin_capacity) / (slack + 1e-6)

        # Encourage use of bins which are already filled to some extent
        filled_amount = bin_capacity - bins_remain_cap[fit_mask]
        priorities[fit_mask] += 0.1 * (filled_amount / bin_capacity)

    else:
        priorities[:] = -np.inf  # Item cannot fit; force new bin

    # 2. Penalize Extreme Fill Levels with Exponential Decay
    remaining_capacity = bins_remain_cap - item
    too_full_penalty = np.exp(10 * (remaining_capacity[fit_mask] / bin_capacity)) if np.any(fit_mask) else 0
    too_empty_penalty = np.exp(-5 * (bins_remain_cap / bin_capacity))

    if np.any(fit_mask):
        priorities[fit_mask] -= 0.1 * too_full_penalty # Reduce value if it leads to almost full state
    priorities[fit_mask] -= 0.01* too_empty_penalty[fit_mask] if np.any(fit_mask) else 0

    # 3. Moderate Fill Bonus (Scaled)
    occupied_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    priorities += 0.05 * occupied_ratio # Previously 0.1 - scaled down

    return priorities
```
