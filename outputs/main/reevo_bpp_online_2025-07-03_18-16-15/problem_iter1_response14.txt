```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Bins that can fit the item get a base priority.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1.0

    # Rule 2: Prioritize bins with smaller remaining capacity after placing the item (First Fit Decreasing heuristic idea).
    remaining_capacity_after_fit = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1.0 / (remaining_capacity_after_fit + 0.00001) # Avoid division by zero

    # Rule 3: Give a higher priority to bins which are already somewhat filled. Avoid opening new bins when possible
    priorities[fit_mask] += (1 - bins_remain_cap[fit_mask]/np.max(bins_remain_cap))
    # If there are no bins with enough capacity, return a flat priority array so the first available will be chosen
    if np.sum(fit_mask) == 0:
        return np.ones_like(bins_remain_cap)
    return priorities
```
