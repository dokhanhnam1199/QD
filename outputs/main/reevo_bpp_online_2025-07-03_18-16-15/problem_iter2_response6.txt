```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Identify bins that can fit the item.
    fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, assign equal priority to all to allow placement in a new bin.
    if not np.any(fit_mask):
        return np.ones_like(bins_remain_cap)

    # Rule 2: Base priority for bins that can fit the item.
    priorities[fit_mask] = 1.0

    # Rule 3: Prioritize bins that are already somewhat full. Higher fill level gets higher priority.
    # This encourages using existing bins rather than opening new ones.
    priorities[fit_mask] += (1 - bins_remain_cap[fit_mask] / np.max(bins_remain_cap))

    # Rule 4: Penalize wasted space. Bins with remaining capacity close to the item size are preferred.
    # This is similar to Best Fit, but implemented as a priority boost.
    remaining_capacity_after_fit = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1.0 / (remaining_capacity_after_fit + 0.00001)  # Avoid division by zero

    # Rule 5: Further boost priority of bins that have been used before
    used_mask = bins_remain_cap < np.max(bins_remain_cap)  # Assuming max capacity is the initial capacity
    priorities[fit_mask & used_mask] += 0.5  # A small boost for used bins

    return priorities
```
