```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prioritize perfect fits
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000

    # Heuristic 2: Reward bins where item fits with the least waste, scaled by item size
    can_fit = bins_remain_cap >= item
    if np.any(can_fit):
        remaining_space = bins_remain_cap[can_fit] - item
        priorities[can_fit] += item / (remaining_space + 1e-6)  # Add a small constant to avoid division by zero

    # Heuristic 3: Encourage filling bins moderately (relative to item size)
    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap < (3 * item)) & can_fit & (~perfect_fit)
    priorities[moderate_capacity] += 10

    # Heuristic 4: Penalize large waste
    large_waste = (bins_remain_cap > 5 * item) & can_fit
    priorities[large_waste] -= 5  # Moderate penalty

    #Heuristic 5: Slightly reward bins that are close to being full after adding the item
    almost_full = can_fit & (bins_remain_cap - item > 0) & (bins_remain_cap - item <= item * 0.2)
    priorities[almost_full] += 20

    return priorities
```
