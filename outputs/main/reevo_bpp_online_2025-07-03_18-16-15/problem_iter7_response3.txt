```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) #Assuming all bins have same capacity

    # 1. Perfect/Near Fit Reward (Scaled by item size)
    slack = bins_remain_cap - item
    perfect_fit_bonus = np.exp(- (slack**2) / (2 * (0.05 * bin_capacity)**2)) * (slack >= 0) * item #Gaussian around 0, scaled by item size
    priorities += perfect_fit_bonus

    # 2. Target Fill Level (Gaussian Penalty) - avoid half empty bins
    target_fill = 0.75 * bin_capacity # Fill bins until around 75%
    remaining_after_fill = bins_remain_cap - item
    fill_penalty = -np.exp(- ((target_fill - (bin_capacity - remaining_after_fill))**2) / (2 * (0.2 * bin_capacity)**2)) * (remaining_after_fill >= 0)
    priorities += fill_penalty

    # 3. Fragmentation Penalty (Sharp Penalty if remaining is less than some threshold)
    frag_threshold = 0.1 * bin_capacity
    fragmentation_penalty = -10 * (remaining_after_fill < frag_threshold) * (remaining_after_fill >=0) * item #Sharp penalty, scaled by item size

    priorities += fragmentation_penalty

    # 4. Controlled Randomness (Exploration)
    randomness = np.random.normal(0, 0.01 * item, size=bins_remain_cap.shape)  # Small noise, scaled by item size
    priorities += randomness

    # 5. Infeasibility Mask
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
