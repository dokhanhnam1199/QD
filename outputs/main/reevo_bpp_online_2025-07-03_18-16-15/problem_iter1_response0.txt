```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing inspired approach: prioritize bins that can fit the item snugly.
    fit_mask = bins_remain_cap >= item

    # Avoid bins that are too big, give some bonus to bins that fit reasonably well
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask] # Smaller remaining space is better. Value range [0, 1]

    # Give higher priority if a bin has enough space.
    priorities[fit_mask] = 1 - priorities[fit_mask] # Invert to favor smaller remaining spaces

    # Bonus to nearly full bins to maximize bin usage
    nearly_full_mask = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.2)
    priorities[nearly_full_mask] += 0.5

    # Slightly penalize bins if the item is too small.
    small_item_mask = bins_remain_cap >= (item * 5)
    priorities[small_item_mask] -= 0.2

    #Very small penalize bins nearing overfill
    almost_full = (bins_remain_cap - item) <= 0.1
    priorities[almost_full] -= 1

    return priorities
```
