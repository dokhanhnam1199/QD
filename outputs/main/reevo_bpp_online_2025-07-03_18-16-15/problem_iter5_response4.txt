```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Perfect Fit: Big Reward
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6  # Tolerance for floating-point comparisons
    if np.any(perfect_fit):
        priorities[perfect_fit] += 100 * item  # Huge reward scaled by item size

    # 2. Near Fit: Moderate Reward, scaled by item size and remaining capacity
    near_fit = (bins_remain_cap >= item) & (~perfect_fit)
    if np.any(near_fit):
        slack = bins_remain_cap[near_fit] - item
        priorities[near_fit] += (item / bin_capacity) * (1 / (slack + 1e-6))

    # 3. Penalize Overflow: Very Harsh Penalty
    overflow = bins_remain_cap < item
    priorities[overflow] = -np.inf

    # 4. Moderate Fills: Gaussian-like preference
    remaining_ratio = bins_remain_cap / bin_capacity
    preferred_ratio = 0.6  # Target fill ratio
    gaussian_penalty = np.exp(-((remaining_ratio - preferred_ratio)**2) / (2 * 0.1**2))
    priorities += gaussian_penalty * item

    # 5. Fragmentation Penalty: Exponential decay
    remaining_capacity = bins_remain_cap - item
    fragmentation_penalty = np.exp(-5 * np.abs(remaining_capacity / bin_capacity)) * (remaining_capacity >= 0) #only if the item can fit in bin.
    priorities -= fragmentation_penalty * item

    # 6. Small Randomness
    priorities += np.random.normal(0, 0.01, size=bins_remain_cap.shape) * item

    return priorities
```
