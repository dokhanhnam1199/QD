{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility Check\n    fit_mask = bins_remain_cap >= item\n    if not np.any(fit_mask):\n        return -np.inf * np.ones_like(bins_remain_cap)\n\n    # Snug Fit Reward\n    slack = bins_remain_cap[fit_mask] - item\n    priorities[fit_mask] += 1.0 / (slack + 0.001)  # Inverse slack, avoid division by zero\n\n    # Fragmentation Penalty (Exponential)\n    remaining_capacity = bins_remain_cap - item\n    frac_penalty_mask = remaining_capacity >= 0\n    remaining_capacity_norm = remaining_capacity[frac_penalty_mask] / np.max(bins_remain_cap)\n    priorities[frac_penalty_mask] -= np.exp(-50 * remaining_capacity_norm) # exponential penalty for small remaining cap\n    #Extreme Fill Penalty\n    almost_full = np.logical_and(remaining_capacity >=0, remaining_capacity <= 0.1 * np.max(bins_remain_cap)) #extremely high fill levels\n    priorities[almost_full] -= 5\n\n\n    # Moderate Fill Bonus\n    occupied_space = np.max(bins_remain_cap) - bins_remain_cap\n    occupied_ratio = occupied_space / np.max(bins_remain_cap)\n\n    moderate_fill_mask = np.logical_and(occupied_ratio > 0.2, occupied_ratio < 0.8) & fit_mask #Only give bonus to bins where item can fit and are moderately filled\n    priorities[moderate_fill_mask] += 0.5\n\n\n    # Item Size Scaling\n    priorities[fit_mask] *= (1 + 0.5 * (item / np.max(bins_remain_cap))) #scale priorities with item size\n\n\n    # Remaining capacity bonus\n    bonus_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap< 0.75 * np.max(bins_remain_cap)) #bins which can hold item and is less than 75% full\n    priorities[bonus_capacity] += 0.1\n\n\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First-Fit Decreasing-like behavior. Prioritize bins that can fit the item snugly.\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority\n\n        # Scale snug fit reward based on item size\n        priorities[fit_mask] *= (1 + item)\n\n    else:\n        priorities[:] = -np.inf  # item cannot fit in the bins, force new bins to open up\n\n    # Heuristic 2: Penalize bins that become too full or too empty after insertion to avoid fragmentation\n    remaining_capacity = bins_remain_cap - item\n    bin_capacity = np.max(bins_remain_cap)\n    \n    # Sharply Penalize Fragmentation exponentially\n    too_full_penalty = np.exp(5 * (remaining_capacity / bin_capacity - 1)) * (remaining_capacity >= 0) # increased impact\n    too_empty_penalty = np.exp(-5 * (bins_remain_cap / bin_capacity)) * (remaining_capacity >= 0) * (bins_remain_cap<bin_capacity/2) # increased impact\n\n    priorities = priorities - too_full_penalty - too_empty_penalty\n\n    # Heuristic 3: Bonus for bins that are already somewhat filled (reduces number of partially-filled bins)\n    occupied_ratio = (bin_capacity - bins_remain_cap) / bin_capacity\n    bonus = 0.1 * occupied_ratio\n    priorities = priorities + bonus\n\n    #Heuristic 4: Moderate Capacity Bonus\n    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < bin_capacity*0.75)\n    priorities[moderate_capacity] += 0.05\n\n    #Heuristic 5: Near Full Bin Penalty (Dynamic Scaling)\n    near_full = np.logical_and(remaining_capacity > 0 , remaining_capacity < bin_capacity * 0.1)\n    if np.any(near_full):\n         near_full_penalty = np.exp(10*(remaining_capacity[near_full]/bin_capacity - 0.1 ))\n         priorities[near_full] -= near_full_penalty\n\n    return priorities\n\n[Reflection]\nPrioritize snug fits, sharply penalize fragmentation, and dynamically scale penalties based on bin capacity.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}