```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Highest priority to bins where item fits best (smallest waste).
    waste = bins_remain_cap - item
    
    # Smallest waste, but only if it fits
    valid_waste = np.where(waste >= 0, waste, np.inf)
    
    # Inverse of valid waste becomes the priority. Add a small constant to avoid division by zero
    priorities = 1.0 / (valid_waste + 1e-9)
    
    # Rule 2: Apply penalty if the waste is very high (to prevent large waste bins)
    large_waste_threshold = np.mean(bins_remain_cap) * 0.8
    waste_penalty = np.where(bins_remain_cap > item + large_waste_threshold, (bins_remain_cap - item - large_waste_threshold) / large_waste_threshold, 0.0)
    
    priorities -= waste_penalty
    
    # Rule 3: Slight boost to bins close to being full (minimize #bins)
    full_threshold = np.mean(bins_remain_cap) * 0.2
    full_boost = np.where((bins_remain_cap > item) & (bins_remain_cap - item < full_threshold), 1 - (bins_remain_cap - item) / full_threshold, 0)
    
    priorities += full_boost
    
    return priorities
```
