```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Heuristic 1: Snug Fit - Prioritize bins that can fit the item snugly.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = np.exp(-5 * slack / bin_capacity) # Exponential reward for small slack
    else:
        priorities[:] = -np.inf  # item cannot fit in the bins, force new bins to open up

    # Heuristic 2: Fragmentation Penalty - Sharply penalize bins that become too full or too empty after insertion
    remaining_capacity = bins_remain_cap - item
    
    # Penalty for bins that become nearly full (exponential penalty)
    too_full_mask = np.logical_and(remaining_capacity >= 0, remaining_capacity / bin_capacity < 0.1)
    priorities[too_full_mask] -= 5 * np.exp(10 * (remaining_capacity[too_full_mask] / bin_capacity - 0.1))

    # Penalty for bins that become mostly empty (exponential penalty)
    too_empty_mask = np.logical_and(remaining_capacity >= 0, (bins_remain_cap / bin_capacity) > 0.75)
    priorities[too_empty_mask] -= np.exp(-5*(bins_remain_cap[too_empty_mask]- item)/bin_capacity)*item/bin_capacity


    # Heuristic 3: Moderate Fill Reward - Reward bins that are moderately filled.
    moderate_fill_mask = np.logical_and(remaining_capacity >= 0, remaining_capacity / bin_capacity >= 0.2, remaining_capacity/bin_capacity <= 0.6)
    priorities[moderate_fill_mask] += 0.5 * (1-np.abs(remaining_capacity[moderate_fill_mask]/bin_capacity-0.4)/0.2)

    # Heuristic 4: Item Size Adjustment - Scale priorities based on item size.
    priorities[fit_mask] *= (1 + 0.5* item / bin_capacity)
    

    return priorities
```
