```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Heuristic 1: Snug Fit Priority
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority
        priorities[fit_mask] *= (1 + item / bin_capacity) #item size bonus
    else:
        priorities[:] = -np.inf  # item cannot fit in the bins

    # Heuristic 2: Fragmentation Penalty (Exponential)
    remaining_capacity = bins_remain_cap - item
    too_full = (remaining_capacity >= 0) & (remaining_capacity < 0.1 * bin_capacity)
    too_empty = (remaining_capacity >= 0) & (bins_remain_cap < 0.2 * bin_capacity)  # Adjust threshold as needed
    
    priorities[too_full] -= np.exp(5 * (remaining_capacity[too_full] / bin_capacity - 0.1)) #More aggressive penalty
    priorities[too_empty] -= np.exp(5 * (bins_remain_cap[too_empty] / bin_capacity - 0.2)) #More aggressive penalty

    # Heuristic 3: Reward Partially Filled Bins
    fill_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    partially_filled = (fill_ratio > 0) & (bins_remain_cap >= item) # Only reward for bins where the item fits
    priorities[partially_filled] += 0.1 * fill_ratio[partially_filled]

    # Heuristic 4: Moderate Capacity Bonus
    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap < 0.75 * bin_capacity)
    priorities[moderate_capacity] += 0.05

    return priorities
```
