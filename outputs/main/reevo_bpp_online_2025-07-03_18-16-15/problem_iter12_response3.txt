```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Heuristic 1: First-Fit Decreasing-like behavior. Prioritize bins that can fit the item snugly.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority
        priorities[fit_mask] *= (1 + item / bin_capacity)  # Item size scaling
    else:
        priorities[:] = -np.inf  # item cannot fit in the bins, force new bins to open up

    # Heuristic 2: Penalize bins that become too full or too empty after insertion to avoid fragmentation
    remaining_capacity = bins_remain_cap - item
    too_full_penalty = np.exp(10 * (remaining_capacity[remaining_capacity>=0] / bin_capacity - 0.1))
    priorities[remaining_capacity>=0] -= too_full_penalty # Penalize nearly full
    too_empty_penalty = np.exp(-5 * (bins_remain_cap / bin_capacity)) * (remaining_capacity >= 0) * (bins_remain_cap<bin_capacity/2) #penalize low fill


    priorities[remaining_capacity>=0] -= too_empty_penalty


    # Heuristic 3: Bonus for bins that are already somewhat filled (reduces number of partially-filled bins)
    occupied_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    bonus = 0.1 * occupied_ratio
    priorities = priorities + bonus

    # Heuristic 4: Moderate Capacity Bonus
    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < bin_capacity * 0.75)
    priorities[moderate_capacity] += 0.05

    return priorities
```
