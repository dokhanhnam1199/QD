```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Reward bins that can fit the item.
            remaining = cap - item
            priorities[i] = (item / cap)  # Fill ratio
            priorities[i] += (1 / (remaining + 0.0001)) #try to reduce fragmentation. avoid division by zero
        else:
            # Penalize bins that can't fit the item (but not too much).
            priorities[i] = -100  # A negative score so as not to choose these.

    return priorities
```
