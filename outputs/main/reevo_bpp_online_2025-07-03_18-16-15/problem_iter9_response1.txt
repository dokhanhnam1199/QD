```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Heuristic 1: Perfect/Snug Fit
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        perfect_fit_mask = slack == 0
        if np.any(perfect_fit_mask):
            priorities[fit_mask][perfect_fit_mask] = 10  # High priority for perfect fit
        else:
            priorities[fit_mask] = 5 / (slack + 0.01)  # High priority for snug fit, scaled.
    else:
        priorities[:] = -np.inf  # Cannot fit.

    # Heuristic 2: Moderate Fill (Avoid Fragmentation)
    remaining_capacity = bins_remain_cap - item
    valid_fill = remaining_capacity >= 0
    moderate_fill_mask = np.logical_and(remaining_capacity >= 0.2 * max_cap, remaining_capacity <= 0.8 * max_cap)
    priorities[moderate_fill_mask] += 2

    # Heuristic 3: Penalize Overflow and Near-Full
    overflow_penalty = -100 * (remaining_capacity < 0)
    near_full_penalty = -5 * np.exp(-10 * remaining_capacity / max_cap) * valid_fill
    priorities += overflow_penalty + near_full_penalty

    # Heuristic 4: Bonus for Partially Filled Bins (Reduce Empty Bins)
    occupied_ratio = (max_cap - bins_remain_cap) / max_cap
    partially_filled_bonus = 0.5 * occupied_ratio * valid_fill #only reward if valid

    priorities += partially_filled_bonus
    return priorities
```
