```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very high priority if the item fits perfectly
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # A large value for high priority

    # High priority if the item fits with minimal waste
    almost_fit = (bins_remain_cap > item) & (bins_remain_cap <= item * 1.1) # Waste <= 10% of item size
    priorities[almost_fit] = 500

    # Moderate priority if the item fits reasonably well
    reasonable_fit = (bins_remain_cap > item) & (bins_remain_cap <= item * 1.5)  # Waste <= 50% of item size
    priorities[reasonable_fit] = 100

    # Low priority based on remaining capacity, but only if it fits
    fits = bins_remain_cap >= item
    priorities[fits] += bins_remain_cap[fits] - item

    # Very low priority (or negative) if item does not fit
    does_not_fit = bins_remain_cap < item
    priorities[does_not_fit] = -1000 # Negative score discourage from ever using this bin

    return priorities
```
