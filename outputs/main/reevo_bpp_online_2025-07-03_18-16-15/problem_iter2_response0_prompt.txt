{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First Fit Decreasing heuristic inspiration\n    # Prioritize bins that can fit the item best (least wasted space)\n    \n    can_fit = bins_remain_cap >= item\n    \n    if not np.any(can_fit):\n        # if no bin can fit, give minimal priority, avoiding it, but still allowing filling if must create new bin\n        return priorities - 1e-9\n\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf  # mark bins that cannot fit\n    \n    # Assign high priority to bins that result in smallest waste.\n    priorities[can_fit] = -waste[can_fit]\n    \n    # Additional bias to fill already filled bins. Higher utilization.\n    bin_utilization = 1 - bins_remain_cap / np.max(bins_remain_cap) # Scaling capacity to a max bin size will influence bin utlization\n    priorities = priorities + bin_utilization * can_fit\n    \n    # A small randomness to avoid deterministic behavior for identical items\n    priorities = priorities + np.random.rand(len(bins_remain_cap))*0.001 * can_fit\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: First-Fit Decreasing-like behavior. Prioritize bins that can fit the item snugly.\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority\n    else:\n        priorities[:] = -np.inf  # item cannot fit in the bins, force new bins to open up\n\n    # Heuristic 2: Penalize bins that become too full after insertion to avoid fragmentation\n    fullness = (bins_remain_cap - item) / np.max(bins_remain_cap)\n    fullness[fullness < 0] = -np.inf  # Cannot fit\n    penalty = np.exp(-10 * fullness)  # Exponential penalty as bins get fuller\n    priorities = priorities - penalty\n\n    # Heuristic 3: Bonus for bins that are already somewhat filled (reduces number of partially-filled bins)\n    occupied_ratio = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)\n    bonus = 0.1 * occupied_ratio\n    priorities = priorities + bonus\n\n    return priorities\n\n[Reflection]\nPrioritize snug fits, penalize near-full bins, and reward already occupied bins to reduce fragmentation.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}