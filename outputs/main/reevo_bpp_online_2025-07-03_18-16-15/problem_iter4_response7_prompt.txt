{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_capacity = np.max(bins_remain_cap)  # Assuming all bins have the same max capacity\n\n    # Heuristic 1: First-Fit Decreasing-like behavior with a slight modification.\n    # Prioritize bins that can fit the item relatively snugly, but avoid overly tight fits.\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        # Prioritize based on slack, but dampen the effect for very small slacks\n        priorities[fit_mask] = 1 / (slack + 0.01 * max_capacity)  # Adds a bit of tolerance\n    else:\n        priorities[:] = -np.inf  # Item cannot fit, force new bin opening\n\n    # Heuristic 2: Fragmentation avoidance using a sigmoid function.  Penalize bins\n    # that lead to small remaining capacity, but allow some small capacity remaining.\n    remaining_ratio = (bins_remain_cap - item) / max_capacity\n    remaining_ratio[remaining_ratio < 0] = -np.inf # can not fit\n\n    # sigmoid penalty\n    penalty = 1 / (1 + np.exp(-10 * (remaining_ratio - 0.1))) # try to make remaining ratio around 0.1\n\n    priorities = priorities - penalty\n\n\n    # Heuristic 3: Occupancy bonus.  Reward bins that are already partially full.\n    occupancy_ratio = (max_capacity - bins_remain_cap) / max_capacity\n    bonus = 0.2 * occupancy_ratio * (occupancy_ratio > 0) # only gives bonus for partially filled bins\n    priorities = priorities + bonus\n\n\n    # Heuristic 4: Introduce a small random factor to break ties and explore different bin assignments.\n    priorities = priorities + 0.01 * np.random.rand(len(bins_remain_cap))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Combines best-fit, first-fit, and nearly-full bin prioritization with adaptive penalties for unfit items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First Fit Decreasing heuristic component: prefer bins that can fit the item\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += 1  # Give a base priority to bins that can fit\n\n    # Best Fit heuristic component: prioritize bins with smallest remaining space *after* adding the item.\n    remaining_space_after_fit = bins_remain_cap[fit_mask] - item\n\n    if remaining_space_after_fit.size > 0:\n        best_fit_priority = 1 / (remaining_space_after_fit + 1e-9)  # avoid division by zero.  Inverse of space, higher value == smaller space left after adding.\n        indices_fit = np.where(fit_mask)[0]  # get indices to update\n        priorities[indices_fit] += best_fit_priority\n\n    # Introduce a \"nearly full\" bonus - prioritizes filling bins that are mostly full *before* addition.\n    nearly_full_threshold = 0.75  # Threshold as a fraction of total bin size\n    nearly_full_mask = bins_remain_cap > 0\n    ratio = bins_remain_cap / (bins_remain_cap + item)\n    near_full_bonus = (ratio > nearly_full_threshold) * fit_mask #Only consider nearly full if item fits\n    priorities += near_full_bonus * 2 # Arbitrary magnitude 2, tuned. Added only if item can fit.\n\n    #Adaptive penalty for unfit items\n    if not np.any(fit_mask):\n        #Penalize based on how much the item exceeds capacity, but favor bins with some capacity\n        penalty = -(item - bins_remain_cap)\n        penalty[bins_remain_cap <= 0] = -np.inf  # Avoid empty bins unless absolutely necessary\n        priorities = penalty\n\n    return priorities\n\n[Reflection]\nPrioritize fitting, minimize wasted space, reward nearly-full bins, and adapt penalties based on item size.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}