```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Perfect Fit: Huge reward, scaled by item size.
    perfect_fit_mask = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit_mask):
        priorities[perfect_fit_mask] += 10 * item/bin_capacity  #Substantially increase the reward of perfect fit.

    # 2. Near Fit: Moderate reward, scaled by remaining capacity after placement.
    near_fit_mask = (bins_remain_cap > item) & (bins_remain_cap <= item + 0.1 * bin_capacity)
    if np.any(near_fit_mask):
        slack = bins_remain_cap[near_fit_mask] - item
        priorities[near_fit_mask] += 2 * (1 - slack/(0.1 * bin_capacity)) * item/bin_capacity

    # 3. Gaussian-like reward for moderate fills (peaks at 60% full after placement).
    remaining_capacity = bins_remain_cap - item
    fill_level = (bin_capacity - remaining_capacity) / bin_capacity #Ratio of fill level.
    gaussian_center = 0.6 #Favor bins that will be 60% full.
    gaussian_width = 0.3 #Standard deviation of gaussian
    gaussian_reward = np.exp(-((fill_level - gaussian_center)**2) / (2 * gaussian_width**2)) * item/bin_capacity
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += gaussian_reward[fit_mask]

    # 4. Fragmentation penalty: Sharp penalty if remaining capacity is small but non-zero.  Scaled by item size.
    fragmentation_threshold = 0.1 * bin_capacity # Small remaining capacity.
    fragmentation_mask = (remaining_capacity > 0) & (remaining_capacity < fragmentation_threshold)
    priorities[fragmentation_mask] -= 5 * item/bin_capacity

    # 5. Impossible fit: Large negative priority.
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -np.inf

    # 6. Moderate Capacity Bonus: Small bonus for bins that are moderately filled before adding an item
    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < bin_capacity * 0.75)
    priorities[moderate_capacity] += 0.01

    # 7. Random Exploration: Small chance to pick any feasible bin.
    # if np.random.rand() < 0.01 and np.any(fit_mask):
    #     eligible_bins = np.where(fit_mask)[0]
    #     random_bin = np.random.choice(eligible_bins)
    #     priorities[random_bin] += 0.1

    return priorities
```
