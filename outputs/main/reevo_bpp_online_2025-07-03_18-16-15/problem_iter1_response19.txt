```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_capacity_after_add = bins_remain_cap - item

    # Give high priority to bins where the item fits and the remaining capacity is minimized, but still positive.
    # Avoid fragmentation as much as possible.

    fit_mask = remaining_capacity_after_add >= 0
    if np.any(fit_mask):
        priorities[fit_mask] = 1 / (remaining_capacity_after_add[fit_mask] + 1e-9)  # Add a small constant to avoid division by zero

        # Prioritize bins with higher initial capacity if multiple bins can fit the item.
        priorities[fit_mask] += bins_remain_cap[fit_mask] / np.max(bins_remain_cap)  # Add fraction of max bin capacity

    # Give low priority (negative) to bins that cannot fit the item.
    priorities[~fit_mask] = -1

    return priorities
```
