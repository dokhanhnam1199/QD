```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Snug Fit Priority: Prioritize bins with minimal slack.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority
    else:
        priorities[:] = -np.inf  # Cannot fit, so strongly discourage

    # 2. Penalize Extreme Fills: Discourage bins that become nearly full or nearly empty.
    remaining_capacity = bins_remain_cap - item
    nearly_full_penalty = np.exp(-5 * (remaining_capacity / bin_capacity)) * (remaining_capacity >= 0)  # Strong penalty for nearly full
    nearly_empty_penalty = np.exp(-5 * (bins_remain_cap / bin_capacity)) * (remaining_capacity >= 0) * (bins_remain_cap < bin_capacity / 3)  # Moderate penalty for low fill
    priorities -= nearly_full_penalty + nearly_empty_penalty

    # 3. Reward Partially Filled Bins: Encourage filling bins that are already partially used.
    occupied_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    bonus = 0.15 * occupied_ratio
    priorities += bonus

    # 4. Item Size Adjustment: Preferentially use larger bins for larger items (helps packing better overall).
    priorities[fit_mask] *= (1 + 0.2 * item / bin_capacity)

    # 5. Moderate Capacity Bonus: slight preference to bins between 0.25 and 0.75 fill
    moderate_capacity = np.logical_and(remaining_capacity/bin_capacity > 0.25, remaining_capacity/bin_capacity < 0.75) & (remaining_capacity >= 0)
    priorities[moderate_capacity] += 0.05

    #6. Adjust snug fit priority based on item size. larger item gets higher priority for snug fit
    if np.any(fit_mask):
        priorities[fit_mask] += 0.1 * item / bin_capacity
        
    return priorities
```
