{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Large bins that can fit the item have higher priority.\n    valid_bins = bins_remain_cap >= item\n    priorities[valid_bins] = bins_remain_cap[valid_bins] - item  # Remaining capacity after packing (higher is better). This favors bins that aren't filled too much\n\n    # If no bins can fit the item, penalize heavily.\n    if not np.any(valid_bins):\n        priorities = np.full_like(bins_remain_cap, -np.inf)\n\n    # Prioritize bins with remaining capacity close to item size, but only if there are valid bins\n    if np.any(valid_bins):\n        diffs = np.abs(bins_remain_cap - item)\n        normalized_diffs = diffs / np.max(bins_remain_cap) # Normalized to bin size\n        priorities[valid_bins] += (1 - normalized_diffs[valid_bins])*10 #Add a value based on how close it is, scale by 10 so it outweighs base remaining capacity, make only valid_bins affect values.\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First, prioritize bins that can actually fit the item.\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n      #If no bins can fit item, return negative infinity for all.\n      return np.full_like(bins_remain_cap, fill_value=-np.inf)\n\n    # For bins that can fit the item, calculate a score based on remaining capacity.\n    remaining_after_fit = bins_remain_cap[valid_bins] - item\n    \n    # Higher priority to bins where the remaining capacity is small\n    # but not too small (avoiding near-empty bins unless necessary). We will award bins with smaller space remaining more priority and vice-versa\n    priorities[valid_bins] = 1.0 / (remaining_after_fit + 0.0001)  # Add a small constant to avoid division by zero\n    \n    #Also include bin utilization by incorporating the size of the item relative to capacity\n    priorities[valid_bins] += item / bins_remain_cap[valid_bins]\n\n    # Optionally, add a small bias towards bins that are already somewhat full.\n    #This might help consolidating items. However, we are mainly interested in\n    # reducing bin numbers so lets give it very low importance\n    filled_ratio = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    priorities[valid_bins] += 0.01 * filled_ratio[valid_bins]\n\n\n    return priorities\n\n[Reflection]\nThe better code prioritizes bin utilization and avoids near-empty bins, improving packing efficiency.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}