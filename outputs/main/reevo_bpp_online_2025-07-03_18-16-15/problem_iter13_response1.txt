```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Heuristic 1: Near-perfect fit bonus
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        # Exponential bonus, higher when slack is small relative to bin size
        priorities[fit_mask] += 10 * np.exp(-5 * slack / bin_capacity)
    else:
        priorities[:] = -np.inf  # item cannot fit in the bins

    # Heuristic 2: Moderate fill reward
    remaining_capacity = bins_remain_cap - item
    moderate_fill = np.logical_and(remaining_capacity >= 0, remaining_capacity <= 0.75 * bin_capacity) # was bin_remain_cap before. corrected.
    priorities[moderate_fill] += 5 # Flat reward for moderate fill

    # Heuristic 3: Exponential penalty for extreme fills (nearly full or nearly empty after placement)
    # Scale exponent based on item size.  Larger items, harsher penalties
    scale_factor = 1 + (item / bin_capacity)

    nearly_full = remaining_capacity / bin_capacity < 0.1
    priorities[nearly_full & (remaining_capacity >= 0)] -= 2 * scale_factor * np.exp(5 * ((remaining_capacity[nearly_full & (remaining_capacity >= 0)] / bin_capacity) - 0.1))

    nearly_empty = remaining_capacity / bin_capacity > 0.9
    priorities[nearly_empty & (remaining_capacity >= 0)] -= scale_factor * np.exp(5 * (0.9 - (remaining_capacity[nearly_empty & (remaining_capacity >= 0)] / bin_capacity)))

    # Heuristic 4: Occupancy ratio bonus.
    occupancy_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    priorities += 2 * occupancy_ratio # Scale and add
    # Heuristic 5: Prioritize bins that are only slightly bigger than the item, so the item fits best.
    slightly_bigger = np.logical_and(bins_remain_cap >= item, bins_remain_cap <= item*1.2)
    priorities[slightly_bigger] += 1
    return priorities
```
