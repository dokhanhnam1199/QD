{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Perfect Fit: Huge reward for perfect fits\n    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6\n    priorities[perfect_fit] += 1000 * item  # Scale by item size\n\n    # 2. Near Fit: Reward close fits, scaled by item size and remaining capacity.\n    almost_fit = (bins_remain_cap >= item)\n    slack = bins_remain_cap - item\n    priorities[almost_fit] += (item / bin_capacity) * (1 / (slack[almost_fit] + 1e-6))\n\n    # 3. Moderate Fill: Gaussian-like function to favor moderate fills.\n    remaining_after_fill = bins_remain_cap - item\n    moderate_fill = np.exp(-((remaining_after_fill - (bin_capacity / 3)) ** 2) / (2 * (bin_capacity / 6) ** 2)) * (remaining_after_fill >= 0)\n    priorities += moderate_fill\n\n    # 4. Fragmentation Penalty: Sharply penalize small remaining capacities.\n    small_remaining = remaining_after_fill > 0\n    fragmentation_penalty = -100 * (remaining_after_fill[small_remaining] / bin_capacity)**0.5\n    priorities[small_remaining] += fragmentation_penalty\n\n    # 5. Impossible Fit: Very negative priority if the item doesn't fit.\n    no_fit = bins_remain_cap < item\n    priorities[no_fit] = -1000\n\n    # 6. Randomness: Introduce small amount of randomness to explore different options.\n    priorities += np.random.normal(0, 0.01, size=bins_remain_cap.shape)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # Heuristic 1: Tight Fit Prioritization\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] += 20 / (slack + 0.001)  # Higher priority for tighter fits - SHARPENED\n    else:\n        priorities[:] = -np.inf  # Cannot fit, assign lowest priority\n\n    # Heuristic 2: Filling Bins - Reward bins that are already somewhat filled\n    filled_ratio = (bin_capacity - bins_remain_cap) / bin_capacity\n    priorities += 7 * filled_ratio # SHARPENED\n\n    # Heuristic 3: Moderate Capacity - Prefer bins with moderate remaining capacity\n    capacity_ratio = bins_remain_cap / bin_capacity\n    priorities += 5 * np.exp(-((capacity_ratio - 0.5) ** 2) / 0.05) # Gaussian-like bonus - ADJUSTED WIDTH\n\n    # Heuristic 4: Penalty for Near-Full Bins (Avoid Excessive Fragmentation)\n    near_full_threshold = 0.15 * bin_capacity # Slightly increased threshold\n    near_full_mask = (bins_remain_cap - item) < near_full_threshold\n    priorities[near_full_mask] -= 12  # Substantial penalty for bins becoming near full - SHARPENED\n\n    # Heuristic 5: Penalty for Near-Empty Bins (Avoid Spreading Items Too Thinly)\n    near_empty_threshold = 0.85 * bin_capacity #Slightly decreased threshold\n    near_empty_mask = bins_remain_cap > near_empty_threshold\n    priorities[near_empty_mask] -= 5 # SHARPENED\n\n    # Heuristic 6: Item Size Adaptation\n    item_size_ratio = item / bin_capacity\n    if item_size_ratio > 0.6:  # Large item, prioritize partially filled bins more - ADJUSTED THRESHOLD\n        priorities += 6 * filled_ratio # SHARPENED\n    elif item_size_ratio < 0.15:  # Small item, penalize almost full bins - ADJUSTED THRESHOLD\n        near_full_mask = (bins_remain_cap - item) < 0.2 * bin_capacity\n        priorities[near_full_mask] -= 8 # SHARPENED\n    elif item_size_ratio > 0.3 and item_size_ratio <= 0.6: # Moderate Item, favor moderate capacity bins\n        priorities += 4 * np.exp(-((capacity_ratio - 0.5) ** 2) / 0.05)\n\n\n    return priorities\n\n[Reflection]\nSharpen focus: tailor rewards/penalties. Prioritize tight fits, consider bin fill levels, adapt to item size.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}