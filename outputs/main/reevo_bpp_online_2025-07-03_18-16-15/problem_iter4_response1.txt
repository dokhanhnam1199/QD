```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Heuristic 1: Tight Fit Priority
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority
    else:
        priorities[:] = -np.inf  # If it doesn't fit, don't consider the bin

    # Heuristic 2: Fragmentation Penalty
    remaining_capacity = bins_remain_cap - item
    too_full_penalty = np.exp(-10 * (remaining_capacity / max_cap)) * (remaining_capacity >= 0)  # Penalize bins that are nearly full after insertion
    too_empty_penalty = np.exp(-10 * (bins_remain_cap / max_cap)) * (remaining_capacity >= 0) * (bins_remain_cap < max_cap / 2)  # Penalize bins with low fill

    priorities -= too_full_penalty
    priorities -= too_empty_penalty

    # Heuristic 3: Reward Partially Filled Bins
    occupied_ratio = (max_cap - bins_remain_cap) / max_cap
    bonus = 0.1 * occupied_ratio
    priorities += bonus

    # Heuristic 4: Item Size Adjustment (favor using smaller items in partially filled bins)
    priorities[fit_mask] *= (1 + 0.5*item / max_cap)

    #Heuristic 5: Moderate Capacity Bonus
    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < max_cap*0.75)
    priorities[moderate_capacity] += 0.05

    return priorities
```
