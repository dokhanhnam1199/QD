```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Heuristic 1: Perfect Fit
    perfect_fit = np.isclose(bins_remain_cap, item)
    if np.any(perfect_fit):
        priorities[perfect_fit] += 10  # High priority for perfect fit

    # Heuristic 2: Snug Fit (prioritize bins where remaining capacity is slightly larger than the item)
    snug_fit_mask = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.1)
    if np.any(snug_fit_mask):
        slack = bins_remain_cap[snug_fit_mask] - item
        priorities[snug_fit_mask] += 5 / (slack + 0.001)  # Smaller slack, higher priority

    # Heuristic 3: Moderate Fill (reward bins that, after placing the item, have a reasonable fill level)
    remaining_capacity = bins_remain_cap - item
    moderate_fill_mask = (remaining_capacity >= 0) & (remaining_capacity <= max_cap * 0.75)
    priorities[moderate_fill_mask] += 2

    # Heuristic 4: Penalize Overflow (severely penalize bins that cannot fit the item)
    overflow_mask = bins_remain_cap < item
    priorities[overflow_mask] = -np.inf

    # Heuristic 5: Penalize Fragmentation (penalize bins that, after placing the item, become almost empty)
    fragmentation_mask = (remaining_capacity >= 0) & (remaining_capacity <= max_cap * 0.1)
    priorities[fragmentation_mask] -= 3

    # Heuristic 6: Reward Partial Fills (give a small bonus to bins that are already partially filled)
    occupied_ratio = (max_cap - bins_remain_cap) / max_cap
    priorities += 0.5 * occupied_ratio

    # Heuristic 7: Item-Size Dependent Adjustment: Favor bins closer to item size
    # The larger the item, the more we want a snug fit.
    item_ratio = item / max_cap
    priorities[(bins_remain_cap >= item)] += 2 * item_ratio * (1 - ((bins_remain_cap[(bins_remain_cap >= item)] - item) / max_cap))

    return priorities
```
