{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # Heuristic 1: Perfect/Snug Fit\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        perfect_fit_mask = slack == 0\n        if np.any(perfect_fit_mask):\n            priorities[fit_mask][perfect_fit_mask] = 10  # High priority for perfect fit\n        else:\n            priorities[fit_mask] = 5 / (slack + 0.01)  # High priority for snug fit, scaled.\n    else:\n        priorities[:] = -np.inf  # Cannot fit.\n\n    # Heuristic 2: Moderate Fill (Avoid Fragmentation)\n    remaining_capacity = bins_remain_cap - item\n    valid_fill = remaining_capacity >= 0\n    moderate_fill_mask = np.logical_and(remaining_capacity >= 0.2 * max_cap, remaining_capacity <= 0.8 * max_cap)\n    priorities[moderate_fill_mask] += 2\n\n    # Heuristic 3: Penalize Overflow and Near-Full\n    overflow_penalty = -100 * (remaining_capacity < 0)\n    near_full_penalty = -5 * np.exp(-10 * remaining_capacity / max_cap) * valid_fill\n    priorities += overflow_penalty + near_full_penalty\n\n    # Heuristic 4: Bonus for Partially Filled Bins (Reduce Empty Bins)\n    occupied_ratio = (max_cap - bins_remain_cap) / max_cap\n    partially_filled_bonus = 0.5 * occupied_ratio * valid_fill #only reward if valid\n\n    priorities += partially_filled_bonus\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Snug Fit Priority: Prioritize bins with minimal slack.\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority\n    else:\n        priorities[:] = -np.inf  # Cannot fit, so strongly discourage\n\n    # 2. Penalize Extreme Fills: Discourage bins that become nearly full or nearly empty.\n    remaining_capacity = bins_remain_cap - item\n    nearly_full_penalty = np.exp(-5 * (remaining_capacity / bin_capacity)) * (remaining_capacity >= 0)  # Strong penalty for nearly full\n    nearly_empty_penalty = np.exp(-5 * (bins_remain_cap / bin_capacity)) * (remaining_capacity >= 0) * (bins_remain_cap < bin_capacity / 3)  # Moderate penalty for low fill\n    priorities -= nearly_full_penalty + nearly_empty_penalty\n\n    # 3. Reward Partially Filled Bins: Encourage filling bins that are already partially used.\n    occupied_ratio = (bin_capacity - bins_remain_cap) / bin_capacity\n    bonus = 0.15 * occupied_ratio\n    priorities += bonus\n\n    # 4. Item Size Adjustment: Preferentially use larger bins for larger items (helps packing better overall).\n    priorities[fit_mask] *= (1 + 0.2 * item / bin_capacity)\n\n    # 5. Moderate Capacity Bonus: slight preference to bins between 0.25 and 0.75 fill\n    moderate_capacity = np.logical_and(remaining_capacity/bin_capacity > 0.25, remaining_capacity/bin_capacity < 0.75) & (remaining_capacity >= 0)\n    priorities[moderate_capacity] += 0.05\n\n    #6. Adjust snug fit priority based on item size. larger item gets higher priority for snug fit\n    if np.any(fit_mask):\n        priorities[fit_mask] += 0.1 * item / bin_capacity\n        \n    return priorities\n\n[Reflection]\nPrioritize snug fits with item size, penalize extreme fills, and reward moderate occupancy for better packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}