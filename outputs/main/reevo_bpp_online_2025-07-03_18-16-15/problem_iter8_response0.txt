```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Perfect Fit: Highest priority if the bin fits perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000.0

    # 2. First Fit: Give a base priority to all bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # 3. Best Fit: Prioritize bins with the least remaining space after packing.
    if np.any(can_fit):
        remaining_space = bins_remain_cap[can_fit] - item
        min_remaining_space_mask = remaining_space == np.min(remaining_space)
        priorities[can_fit][min_remaining_space_mask] += 50.0

    # 4. Moderate Waste: Add a bonus if the remaining capacity is not too large relative to the item.
    moderate_waste = can_fit & (bins_remain_cap <= 2 * item)
    priorities[moderate_waste] += 20.0

    # 5. Avoid Overfilling: Heavily penalize bins that cannot fit the item.
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # 6. Prioritize Occupied Bins: Add priority based on how full the bin is.
    max_capacity = np.max(bins_remain_cap)
    fill_ratio = (max_capacity - bins_remain_cap) / max_capacity
    priorities[can_fit] += 10 * fill_ratio[can_fit]

    return priorities
```
