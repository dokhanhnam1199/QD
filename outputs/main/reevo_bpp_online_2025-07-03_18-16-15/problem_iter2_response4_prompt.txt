{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Very high priority if the item fits perfectly\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000  # A large value for high priority\n\n    # High priority if the item fits with minimal waste\n    almost_fit = (bins_remain_cap > item) & (bins_remain_cap <= item * 1.1) # Waste <= 10% of item size\n    priorities[almost_fit] = 500\n\n    # Moderate priority if the item fits reasonably well\n    reasonable_fit = (bins_remain_cap > item) & (bins_remain_cap <= item * 1.5)  # Waste <= 50% of item size\n    priorities[reasonable_fit] = 100\n\n    # Low priority based on remaining capacity, but only if it fits\n    fits = bins_remain_cap >= item\n    priorities[fits] += bins_remain_cap[fits] - item\n\n    # Very low priority (or negative) if item does not fit\n    does_not_fit = bins_remain_cap < item\n    priorities[does_not_fit] = -1000 # Negative score discourage from ever using this bin\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Heuristic 1:  Bins that can accommodate the item perfectly get highest priority\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000  # Arbitrarily high value for perfect fit\n\n    # Heuristic 2: Bins where item fits with least remaining space get higher priority.\n    # But only consider those bins where the item can fit.\n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):  # Avoid division by zero\n      remaining_space = bins_remain_cap[can_fit] - item\n      priorities[can_fit] = 1.0 / (remaining_space + 0.00001)  # Add small constant to prevent div by 0, avoids inf values. Reciprocal gives priority to bins with small remainders\n\n    # Heuristic 3: Moderate capacity bins get higher priority if perfect fit isn't an option.\n    # This is a bit of exploration: avoid filling very small and large capacity bins.\n    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap < (np.max(bins_remain_cap) * 0.75)) & (~perfect_fit)\n    priorities[moderate_capacity] += 10  # Add a moderate amount to moderate capacity bins.\n\n    return priorities\n\n[Reflection]\nPrioritize minimal waste using reciprocals. Explore moderate capacity bins. Avoid negative priorities.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}