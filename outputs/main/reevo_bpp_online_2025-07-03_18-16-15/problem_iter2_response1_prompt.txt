{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Large bins that can fit the item have higher priority.\n    valid_bins = bins_remain_cap >= item\n    priorities[valid_bins] = bins_remain_cap[valid_bins] - item  # Remaining capacity after packing (higher is better). This favors bins that aren't filled too much\n\n    # If no bins can fit the item, penalize heavily.\n    if not np.any(valid_bins):\n        priorities = np.full_like(bins_remain_cap, -np.inf)\n\n    # Prioritize bins with remaining capacity close to item size, but only if there are valid bins\n    if np.any(valid_bins):\n        diffs = np.abs(bins_remain_cap - item)\n        normalized_diffs = diffs / np.max(bins_remain_cap) # Normalized to bin size\n        priorities[valid_bins] += (1 - normalized_diffs[valid_bins])*10 #Add a value based on how close it is, scale by 10 so it outweighs base remaining capacity, make only valid_bins affect values.\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility check: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n    \n    # 2. Calculate remaining capacity after placing the item (only for feasible bins)\n    remaining_capacity = bins_remain_cap - item\n    \n    # 3. Reward bins with smaller remaining capacity (First-Fit Decreasing-like)\n    priorities[feasible_bins] = 1 / (remaining_capacity[feasible_bins] + 1e-9) # Add small constant to avoid division by zero\n    \n    # 4. Big reward for almost full bins if item fits.\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap < item + 0.2) # item+threshold\n    priorities[almost_full] = 1000\n\n    # 5. Negative reward for bins with capacity much larger than the item size,\n    #    trying to avoid spreading items too thin.\n    wasteful = (bins_remain_cap > item * 2) & feasible_bins  # threshold * item\n    priorities[wasteful] = -1\n    \n    return priorities\n\n[Reflection]\nPrioritize near-full bins. Penalize wasteful allocations. Use inverse remaining capacity for finer-grained selection among feasible bins.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}