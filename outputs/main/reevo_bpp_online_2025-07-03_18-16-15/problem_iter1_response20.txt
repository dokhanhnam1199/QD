```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority for infeasible bins

    # 2. Remaining capacity: Prioritize bins with smaller remaining capacity
    #    after placing the item, but only if the item fits.
    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[~feasible_bins] = np.inf

    priorities[feasible_bins] = -remaining_capacity_after_placement[feasible_bins]

    # 3. Try to avoid bins that are almost full or almost empty after the placement.

    almost_full = (remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement < 0.1) #tune threshold of 0.1

    # Try to reduce number of bins with smaller capacity
    almost_empty = (remaining_capacity_after_placement / np.max(bins_remain_cap) > 0.9)  #Tune this threshold

    priorities[almost_full] -= 0.5 #de-prioritize
    priorities[almost_empty] -= 0.3  #de-prioritize less compared to almost full

    # 4. If there are several bins with the exact same fill, pick the earlier one

    return priorities
```
