```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Perfect Fit: Huge Reward
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6  # Tolerance for floating-point comparisons
    if np.any(perfect_fit):
        priorities[perfect_fit] += 1000 * item  # Huge reward scaled by item size

    # 2. Near Fit: Moderate Reward, scaled by item size and remaining capacity
    near_fit = (bins_remain_cap >= item) & (~perfect_fit)
    if np.any(near_fit):
        slack = bins_remain_cap[near_fit] - item
        priorities[near_fit] += (item / bin_capacity) * (10 / (slack + 1e-6)) # Scale reward by slack

    # 3. Penalize Overflow: Very Harsh Penalty
    overflow = bins_remain_cap < item
    priorities[overflow] = -np.inf

    # 4. Target Fill Level: Reward bins closest to a target fill
    target_fill_ratio = 0.75
    current_fill_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    potential_fill_ratio = (bin_capacity - (bins_remain_cap - item)) / bin_capacity
    
    # Only apply if the item fits
    can_fit = bins_remain_cap >= item
    
    # distance to target fill
    dist_before = np.abs(current_fill_ratio - target_fill_ratio)
    dist_after  = np.abs(potential_fill_ratio - target_fill_ratio)
    
    # Prioritize bins that bring fill ratio closer to target
    improvement = dist_before - dist_after
    priorities[can_fit] += 10 * improvement[can_fit] * item  # Scale reward by improvement and item size

    # 5. Fragmentation Penalty: Exponential decay
    remaining_capacity = bins_remain_cap - item
    fragmentation_penalty = np.exp(-10 * np.abs(remaining_capacity / bin_capacity)) * (remaining_capacity >= 0) #only if the item can fit in bin.
    priorities -= fragmentation_penalty * item * 0.3 # Increased Impact

    # 6. Small Randomness
    priorities += np.random.normal(0, 0.001, size=bins_remain_cap.shape) * item # Smaller randomness
    
    return priorities
```
