```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Snug Fit Reward: Prioritize bins where the item fits snugly
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        # Reward smaller slack, scaled by item size and bin capacity
        priorities[fit_mask] += (item / np.max(bins_remain_cap)) / (slack + 1e-6)  # Adjust scaling
    else:
        priorities[:] = -np.inf  # Cannot fit

    # 2. Fragmentation Penalty: Sharply penalize bins leading to extreme fill levels
    remaining_capacity = bins_remain_cap - item
    
    # Penalize near-full bins exponentially, scaling by item size and remaining cap
    too_full_mask = remaining_capacity >= 0
    if np.any(too_full_mask):
         fill_ratio = remaining_capacity[too_full_mask] / np.max(bins_remain_cap)
         penalty_full = np.exp(5 * (fill_ratio - 1)) * (item / np.max(bins_remain_cap)) #adjust constant here
         priorities[too_full_mask] -= penalty_full

    #Penalize nearly empty bins
    too_empty_mask = remaining_capacity >= 0
    if np.any(too_empty_mask):
        empty_ratio = bins_remain_cap[too_empty_mask] / np.max(bins_remain_cap)
        penalty_empty = np.exp(-5* empty_ratio) * (item / np.max(bins_remain_cap))
        priorities[too_empty_mask] -= penalty_empty

    # 3. Moderate Fill Bonus: Reward bins with moderate occupancy after insertion
    moderate_mask = np.logical_and(remaining_capacity >= 0, remaining_capacity <= 0.75 * np.max(bins_remain_cap))
    priorities[moderate_mask] += 0.05 * (item / np.max(bins_remain_cap))  # Adjust reward

    # 4. Item size adjustment
    priorities[fit_mask] *= (1 + item / np.max(bins_remain_cap))

    return priorities
```
