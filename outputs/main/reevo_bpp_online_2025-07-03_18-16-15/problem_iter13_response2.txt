```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Near-Perfect Fit Bonus
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        # Exponential bonus for near-perfect fit, scaled by item size
        fit_bonus = np.exp(-10 * slack / item)
        priorities[fit_mask] += fit_bonus

    else:
        priorities[:] = -np.inf  # item cannot fit in the bins, force new bins to open up

    # 2. Moderate Fill Level Bonus
    moderate_fill_mask = np.logical_and(bins_remain_cap > item, bins_remain_cap <= 0.75 * bin_capacity)
    priorities[moderate_fill_mask] += 0.2  # Increased moderate fill bonus

    # 3. Adaptive Occupancy Ratio Optimization
    occupancy_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    priorities += 0.1 * occupancy_ratio

    # 4. Exponential Penalties for Extreme Fill Levels
    remaining_capacity = bins_remain_cap - item
    too_full_penalty = np.exp(5 * (remaining_capacity / bin_capacity)) * (remaining_capacity < 0.1 * bin_capacity) * (remaining_capacity >= 0) #Penalize nearly full bin
    too_empty_penalty = np.exp(-5 * ((bin_capacity - bins_remain_cap) / bin_capacity)) * (bins_remain_cap > 0.9* bin_capacity)*(remaining_capacity >= 0)  # Penalize nearly empty after insertion
    priorities -= too_full_penalty + too_empty_penalty

    # 5. Item Size Adjustment
    priorities[fit_mask] *= (1 + item / bin_capacity)

    return priorities
```
