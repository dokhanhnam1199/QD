{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Perfect Fit Emphasis\n    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6\n    if np.any(perfect_fit):\n        priorities[perfect_fit] += 10 * item # Large reward for perfect fit\n\n    # 2. Feasibility Mask\n    fit_mask = bins_remain_cap >= item\n\n    # If no bins can fit, return -inf for all bins, forcing a new bin.\n    if not np.any(fit_mask):\n        return np.full_like(bins_remain_cap, -np.inf)\n\n    # 3. Remaining Capacity Scaling & Perfect Fit Bonus\n    slack = bins_remain_cap[fit_mask] - item\n    priorities[fit_mask] += item / (slack + 0.01 * bin_capacity) # Item size scaled reward for smaller slack\n\n    # 4. Moderate Fills (Gaussian-like)\n    remaining_capacity = bins_remain_cap - item\n    fill_ratio = remaining_capacity / bin_capacity\n    gaussian_like = np.exp(-((fill_ratio - 0.5)**2) / 0.08) * (remaining_capacity >=0) #Target 50% fill\n    priorities[fit_mask] += gaussian_like[fit_mask] * item\n\n    # 5. Fragmentation Penalty\n    fragmentation_penalty = -np.exp(5 * (1-(bins_remain_cap / bin_capacity))) * (remaining_capacity>=0) #Large value with high fill\n    priorities[fit_mask] += fragmentation_penalty[fit_mask] * item\n\n    # 6. Random Exploration (Optional)\n    #priorities[fit_mask] += np.random.normal(0, 0.01, size=np.sum(fit_mask)) * item #Small exploration\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # Heuristic 1: Tight Fit Priority\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = 1 / (slack + 1e-6)  # Smaller slack, higher priority\n    else:\n        priorities[:] = -np.inf  # If it doesn't fit, don't consider the bin\n\n    # Heuristic 2: Fragmentation Penalty\n    remaining_capacity = bins_remain_cap - item\n    too_full_penalty = np.exp(-10 * (remaining_capacity / max_cap)) * (remaining_capacity >= 0)  # Penalize bins that are nearly full after insertion\n    too_empty_penalty = np.exp(-10 * (bins_remain_cap / max_cap)) * (remaining_capacity >= 0) * (bins_remain_cap < max_cap / 2)  # Penalize bins with low fill\n\n    priorities -= too_full_penalty\n    priorities -= too_empty_penalty\n\n    # Heuristic 3: Reward Partially Filled Bins\n    occupied_ratio = (max_cap - bins_remain_cap) / max_cap\n    bonus = 0.1 * occupied_ratio\n    priorities += bonus\n\n    # Heuristic 4: Item Size Adjustment (favor using smaller items in partially filled bins)\n    priorities[fit_mask] *= (1 + 0.5*item / max_cap)\n\n    #Heuristic 5: Moderate Capacity Bonus\n    moderate_capacity = np.logical_and(bins_remain_cap > item, bins_remain_cap < max_cap*0.75)\n    priorities[moderate_capacity] += 0.05\n\n    return priorities\n\n[Reflection]\nFocus on tight fit, fragmentation, occupancy, and item size adjustments with simpler formulations.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}