```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Heuristic 1: Tight Fit Prioritization
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] += 10 / (slack + 0.01)  # Higher priority for tighter fits
    else:
        priorities[:] = -np.inf  # Cannot fit, assign lowest priority

    # Heuristic 2: Filling Bins - Reward bins that are already somewhat filled
    filled_ratio = (bin_capacity - bins_remain_cap) / bin_capacity
    priorities += 5 * filled_ratio

    # Heuristic 3: Moderate Capacity - Prefer bins with moderate remaining capacity
    capacity_ratio = bins_remain_cap / bin_capacity
    priorities += 2 * np.exp(-((capacity_ratio - 0.5) ** 2) / 0.08) # Gaussian-like bonus

    # Heuristic 4: Penalty for Near-Full Bins (Avoid Excessive Fragmentation)
    near_full_threshold = 0.1 * bin_capacity
    near_full_mask = (bins_remain_cap - item) < near_full_threshold
    priorities[near_full_mask] -= 8  # Substantial penalty for bins becoming near full

    # Heuristic 5: Penalty for Near-Empty Bins (Avoid Spreading Items Too Thinly)
    near_empty_threshold = 0.9 * bin_capacity
    near_empty_mask = bins_remain_cap > near_empty_threshold
    priorities[near_empty_mask] -= 3

    # Heuristic 6: Item Size Adaptation
    item_size_ratio = item / bin_capacity
    if item_size_ratio > 0.5:  # Large item, prioritize partially filled bins more
        priorities += 3 * filled_ratio
    elif item_size_ratio < 0.2:  # Small item, penalize almost full bins
        near_full_mask = (bins_remain_cap - item) < 0.2 * bin_capacity
        priorities[near_full_mask] -= 5

    return priorities
```
