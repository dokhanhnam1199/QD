```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Higher priority means we want to add the item to that bin *more*.
    This priority function balances bin utilization and number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, consider only bins that can actually hold the item.
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bins can fit the item, prioritize bins with most remaining capacity
        # in the hopes a smaller future item can fit alongside.  Avoids creating many nearly empty bins.
        priorities = bins_remain_cap
    else:
        # Prioritize bins with smaller remaining capacity, but still enough to fit the item.
        # This favors using bins that are already somewhat full, preventing fragmentation.

        # Give valid bins an initial priority based on how well the item "fits"
        # Prioritize bins where item fills the most space (smallest remaining space)
        priorities[valid_bins] = (bins_remain_cap[valid_bins] - item)

        # Invert so that SMALLER differences are higher priority (better fit)
        priorities[valid_bins] = -priorities[valid_bins]

        #Scale so min value is 0
        min_valid_prio = np.min(priorities[valid_bins])
        priorities[valid_bins] -= min_valid_prio
        # Also slightly boost the priority of emptier bins (within valid options) to encourage their use
        # if fit is very similar on others

        priorities[valid_bins] += 0.0000001 * bins_remain_cap[valid_bins]


    return priorities
```
