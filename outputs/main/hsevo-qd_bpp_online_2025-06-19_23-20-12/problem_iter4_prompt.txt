{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Tesla's Resonance Cascade: A harmonic approach to bin selection.\n    # We seek to resonate with the bin that minimizes waste and maximizes efficiency.\n\n    potential_bins = bins_remain_cap >= item #feasible bins\n    if not np.any(potential_bins):\n        return np.zeros_like(bins_remain_cap) #No Feasible Bin\n\n    waste = bins_remain_cap - item # calculate waste if item is put into bins\n    waste[waste < 0] = np.inf # ignore cases when item does not fit\n    waste_normalized = waste/np.max(bins_remain_cap) # normalized waste\n\n    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap # How full will this bin be if packed\n\n    priorities = np.where(potential_bins,fill_ratio - waste_normalized, -np.inf) # favor bins with less waste.\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}