```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item,
    favoring those with tighter fits to reduce fragmentation.
    Bins that cannot fit the item receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Calculate the remaining capacity AFTER placing the item in each suitable bin.
        remaining_after_fit = bins_remain_cap[can_fit] - item

        # Prioritize bins with smaller remaining capacity after fitting.
        # Smaller remaining capacity means a tighter fit and less fragmentation.
        priorities[can_fit] = 1.0 / (remaining_after_fit + 1e-9)  # Adding a small constant to avoid division by zero.

        # Optionally scale the priorities to ensure they dominate the other values.
        priorities[can_fit] *= 100 # Scale to boost priorities.

    # Assign a very small negative priority to bins that can't fit the item.
    priorities[~can_fit] = -1e9

    return priorities
```
