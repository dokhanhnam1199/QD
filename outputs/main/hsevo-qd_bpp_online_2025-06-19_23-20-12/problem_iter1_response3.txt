```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers several factors:

    1.  **Feasibility:**  Bins that cannot accommodate the item receive a very low priority.
    2.  **Waste Minimization:**  Bins that result in less wasted space are favored. A waste ratio is calculated (remaining space after placing the item / bin capacity), and lower ratios are better. We favor bins where the item nearly fills them.
    3.  **Number of Empty Bins Consideration:** To try to open up empty bins and save on total bin numbers used, apply a minor preference when an item is very small compared to available empty bins.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a very low priority
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # Waste minimization for feasible bins
    feasible_mask = ~infeasible_mask
    remaining_after_fit = bins_remain_cap[feasible_mask] - item
    waste_ratio = remaining_after_fit / bins_remain_cap[feasible_mask]
    priorities[feasible_mask] = -waste_ratio  # Lower waste_ratio is higher priority

    # Empty bin consideration - Add a small boost if there are available empty bins
    #   and the current item is small enough relative to them
    empty_bins_count = np.sum(bins_remain_cap == np.max(bins_remain_cap)) # assume initial cap is the max value available
    if empty_bins_count > 0 and item < (np.max(bins_remain_cap) / 4):  # If empty bins exist and the item is not too big

        priorities[bins_remain_cap == np.max(bins_remain_cap)] += 0.1   # Boost to empty bins
    # Avoid placing very small items into bins nearly full.
    near_full_mask = (bins_remain_cap - item) < (0.1 * np.max(bins_remain_cap)) # Bins after fitting has small capacity remaining
    if np.any(near_full_mask):
          priorities[near_full_mask] += (item / np.max(bins_remain_cap)) * 0.3 # Scale and add minor boost to pack

    return priorities
```
