```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    potential_bins = bins_remain_cap >= item
    if not np.any(potential_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    waste_normalized = waste / np.max(bins_remain_cap[bins_remain_cap != np.inf]) if np.any(bins_remain_cap != np.inf) else np.zeros_like(waste) # normalized waste
    # normalized waste against maximum capacity to get relative measure

    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    fill_ratio[np.isnan(fill_ratio)] = 0  # Handle potential division by zero if bins_remain_cap is zero

    # Introduce a bin utilization score, penalizing bins that are already almost full.
    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))

    # Define weights for each factor
    weight_fill_ratio = 0.5
    weight_waste = 0.3
    weight_utilization = 0.2

    # Combine the factors into a single priority score
    priorities = np.where(potential_bins,
                         weight_fill_ratio * fill_ratio - weight_waste * waste_normalized + weight_utilization * bin_utilization,
                         -np.inf)
    # High fill ratio, low waste, and low pre-existing utilization are favored.
    return priorities
```
