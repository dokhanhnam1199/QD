```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by feasibility, fill ratio, and remaining waste, using a dynamic approach."""

    potential_bins = bins_remain_cap >= item
    if not np.any(potential_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    waste_normalized = waste / np.max(bins_remain_cap)

    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap

    # Dynamic weights based on item size relative to bin capacity
    item_ratio = item / np.max(bins_remain_cap)
    weight_fill = 0.6 + 0.4 * item_ratio  # Favor fill for smaller items
    weight_waste = 0.4 - 0.4 * item_ratio  # Penalize waste more for larger items, smaller item less.
    weight_fill = np.clip(weight_fill, 0.1, 0.9) # Added clipping to prevent weight_fill from being too extreme.
    weight_waste = np.clip(weight_waste, 0.1, 0.9) # Added clipping to prevent weight_waste from being too extreme.

    priorities = np.where(potential_bins, weight_fill * fill_ratio - weight_waste * waste_normalized, -np.inf)

    return priorities
```
