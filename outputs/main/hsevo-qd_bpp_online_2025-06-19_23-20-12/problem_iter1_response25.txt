```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Inspired by the heavens, larger celestial bodies exert a stronger pull!

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # 1. Bins that cannot fit the item get a very low priority. Like a geocentric view, it's simply wrong.
    priorities = np.where(bins_remain_cap < item, -np.inf, 0.0)

    # 2. For bins that *can* fit, prioritize bins with less wasted space.
    #    A tight fit means we're using space efficiently, aligning with cosmic economy!
    waste = bins_remain_cap - item
    # Avoid division by zero which is like encountering a singularity...
    safe_waste = np.where(waste <= 0, 1e-9, waste)
    priorities = np.where(bins_remain_cap >= item, 1 / safe_waste, priorities) # Larger number == higher priority
    
    # 3. Modify prioritization based on how "full" a bin already is.  Partially filled bins are better candidates than nearly empty ones.
    # Like observing the planets' influence depending on their configuration!
    initial_capacity = bins_remain_cap + waste
    fullness_ratio = (initial_capacity - bins_remain_cap) / initial_capacity # Amount used / Total
    priorities = np.where(bins_remain_cap >= item, priorities * (1 + fullness_ratio), priorities)
    

    # 4. Slightly favour using partially filled bins earlier. Think of seeding a field, best to start early and tend it!
    priorities = np.where(bins_remain_cap >= item, priorities + 0.001 * fullness_ratio, priorities)
    
    return priorities
```
