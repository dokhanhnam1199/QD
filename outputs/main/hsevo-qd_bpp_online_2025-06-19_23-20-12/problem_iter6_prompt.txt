{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Tesla's Resonance Cascade: A harmonic approach to bin selection.\n    # We seek to resonate with the bin that minimizes waste and maximizes efficiency.\n\n    potential_bins = bins_remain_cap >= item #feasible bins\n    if not np.any(potential_bins):\n        return np.zeros_like(bins_remain_cap) #No Feasible Bin\n\n    waste = bins_remain_cap - item # calculate waste if item is put into bins\n    waste[waste < 0] = np.inf # ignore cases when item does not fit\n    waste_normalized = waste/np.max(bins_remain_cap) # normalized waste\n\n    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap # How full will this bin be if packed\n\n    priorities = np.where(potential_bins,fill_ratio - waste_normalized, -np.inf) # favor bins with less waste.\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine self-reflection for designing better bin packing heuristics, focusing on actionable insights and avoiding generic advice.\n\n*   **Keywords:** Feasibility Handling, Priority Scoring, Weighted Combinations, Adaptive Strategies.\n*   **Advice:** Systematically explore strategies to repair infeasible solutions. Design priority scores based on dynamic bin/item characteristics.\n*   **Avoid:** Simply \"considering\" factors or vaguely mentioning \"waste minimization.\"\n*   **Explanation:** Move from abstract considerations to concrete actions involving feasibility management and dynamic adjustments of priority.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}