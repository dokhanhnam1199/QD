{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on fill ratio and waste, with a weighted approach.\"\"\"\n\n    potential_bins = bins_remain_cap >= item\n    if not np.any(potential_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    waste_normalized = waste / np.max(bins_remain_cap)\n\n    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap\n\n    # Weighted combination of fill ratio and waste normalization.  Experiment with weights.\n    weight_fill = 0.7\n    weight_waste = 0.3\n\n    priorities = np.where(potential_bins, weight_fill * fill_ratio - weight_waste * waste_normalized, -np.inf)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic uses a combination of fill ratio and normalized waste to determine bin priority, while the worst uses only the negative logarithm of the ratio of item size to bin capacity. Heuristics 1st through 10th are identical, as are heuristics 11th through 20th. Comparing (1st) vs (11th), the former explicitly handles infeasible bins (where the item doesn't fit), and the latter doesn't. The better performing heuristics (1st-10th) incorporate a waste calculation which can lead to better overall bin packing by penalizing bins that would leave too much unused space, promoting better fill.\nThe use of `np.where` in the better heuristics ensures that only feasible bins are considered when calculating priorities, and assigns a negative infinity priority to infeasible bins, effectively excluding them. The other heuristics do not consider feasibility. The better heuristics also normalizes waste by the maximum bin capacity. The weight fill and waste is also better. Overall: The better heuristics (1st-10th) combine fill ratio and waste normalization, handling infeasible bins correctly, using np.where, and weighting the fill and waste to optimize bin usage.\n- \nOkay, let's refine self-reflection for designing better bin packing heuristics, focusing on actionable insights and avoiding generic advice.\n\n*   **Keywords:** Feasibility Handling, Priority Scoring, Weighted Combinations, Adaptive Strategies.\n*   **Advice:** Systematically explore strategies to repair infeasible solutions. Design priority scores based on dynamic bin/item characteristics.\n*   **Avoid:** Simply \"considering\" factors or vaguely mentioning \"waste minimization.\"\n*   **Explanation:** Move from abstract considerations to concrete actions involving feasibility management and dynamic adjustments of priority.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}