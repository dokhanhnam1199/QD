```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by statistical mechanics and "energy levels". Lower energy
    (less wasted space) is more desirable. Boltzmann distribution
    gives probability of a state given its energy and temperature.
    Here, "temperature" scales the exploration/exploitation tradeoff.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    temperature = 0.5  # Tune this parameter - higher is more exploration
    energy = np.abs(bins_remain_cap - item) # energy is wasted space

    # Filter out invalid bins (bins with capacity < item) before calculating priorities
    valid_bins = bins_remain_cap >= item
    energy[~valid_bins] = np.inf # infinite energy if invalid

    priorities = np.exp(-energy / temperature) # Boltzmann distribution
    priorities[~valid_bins] = 0 # zero priority if invalid

    return priorities
```
