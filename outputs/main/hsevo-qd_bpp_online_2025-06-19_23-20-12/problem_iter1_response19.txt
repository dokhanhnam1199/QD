```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item snugly (First Fit Decreasing principle with a twist).
    It also discourages bins from becoming too empty.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if the item is placed in each bin.
    wasted_space = bins_remain_cap - item
    # Large number to penalize bins that can't fit.
    large_negative = -1e9

    # Assign priority scores
    for i, waste in enumerate(wasted_space):
        if waste < 0:
            priorities[i] = large_negative  # Bin cannot fit item
        else:
            # Calculate "snugness" - how well the item fills the bin. Higher is better, approaching 1.
            snugness = 1 - (waste / bins_remain_cap[i])

            # A bonus for bins that are nearly full. A penalty if the bin becomes too empty.

            if waste > 0.5:
                emptiness_penalty = - waste # slight penalty if too empty
            else:
                emptiness_penalty = 0 # default to zero when appropriate

            # Adjust snugness factor.
            priorities[i] = snugness + emptiness_penalty

    return priorities
```
