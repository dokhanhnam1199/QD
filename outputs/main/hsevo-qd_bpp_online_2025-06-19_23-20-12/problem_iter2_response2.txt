```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio and waste reduction with a slight logarithmic scaling."""
    potential_bins = bins_remain_cap >= item
    if not np.any(potential_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    waste_normalized = waste / np.max(bins_remain_cap)
    
    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    
    # Combine fill ratio and waste, add a log scaling factor to item size ratio.
    item_ratio = item / bins_remain_cap
    log_item_ratio = np.log(item_ratio, out=np.zeros_like(item_ratio), where=(item_ratio > 0)) # Handle log(0)
    
    priorities = np.where(potential_bins, fill_ratio - waste_normalized - 0.1 * log_item_ratio, -np.inf)
    
    return priorities
```
