```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    potential_bins = bins_remain_cap >= item
    if not np.any(potential_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    waste_normalized = waste / np.max(bins_remain_cap)

    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    
    # Capacity Utilization: Bins with higher remaining capacity get a boost, but not excessively.
    capacity_utilization = bins_remain_cap / np.max(bins_remain_cap) #normalize bin capacity
    
    # Balance fill ratio with capacity utilization to avoid overfilling very small bins and underutilizing larger ones.
    # Weighting factors to tune the impact of each component. These could be optimized with more advanced techniques.
    fill_weight = 0.6
    capacity_weight = 0.3
    waste_weight = 0.1
    
    priorities = np.where(potential_bins,
                         fill_weight * fill_ratio + capacity_weight * capacity_utilization - waste_weight * waste_normalized,
                         -np.inf)
    
    return priorities
```
