```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    potential_bins = bins_remain_cap >= item
    if not np.any(potential_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    waste_normalized = waste / np.max(bins_remain_cap)

    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    
    # Introduce a waste-based priority boost for bins with smallest waste
    waste_priority = 1 - waste_normalized # Inverted normalized waste (higher is better)
    
    # Combine fill ratio and waste priority with weights
    fill_weight = 0.6
    waste_weight = 0.4  # Adjust weights as needed
    
    priorities = np.where(potential_bins, fill_weight * fill_ratio + waste_weight * waste_priority, -np.inf)
    
    # Small tweak: very full bins get a tiny boost if there's little waste
    very_full_threshold = 0.95  # If a bin is at least 95% full after packing
    priorities = np.where((fill_ratio > very_full_threshold) & potential_bins, priorities + 0.05 * waste_priority, priorities)

    return priorities
```
