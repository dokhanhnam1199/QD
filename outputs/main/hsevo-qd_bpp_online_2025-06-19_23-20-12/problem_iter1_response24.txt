```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    A harmonic-inspired approach with capacity consideration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign a high priority to bins where the item fits comfortably.
    # Adjust thresholds to control "comfort".
    fit_threshold = 0.9  # Item size relative to remaining capacity
    comfort_bonus = 10  # Significantly boost priority for comfortable fits

    # Penalize bins that are too full after adding the item.
    overfill_penalty = -100  # Heavily penalize overfilled bins

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            ratio = item / cap

            # First Fit Decreasing Inspired approach.
            priorities[i] += 1/(cap + 1e-6) #avoids division by zero

            # Boost for "comfortable" fits
            if ratio <= fit_threshold:
                priorities[i] += comfort_bonus * (1 - ratio) #more comfortable = more bonus

        else:
            # The item doesn't fit. Penalize harshly (or set to -inf)
            priorities[i] = overfill_penalty

    return priorities
```
