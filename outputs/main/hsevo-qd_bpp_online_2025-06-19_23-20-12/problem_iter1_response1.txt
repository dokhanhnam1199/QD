```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item with minimal wasted space,
    while also considering the overall fullness of the bin.  It incorporates concepts of
    fitting the item with least relative waste and penalizes nearly full bins to encourage
    more even distribution. Inspired by the idea that a better 'fit' reduces the overall
    'energy' (bins used) in the system, similar to minimizing energy in physics.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Initialize a small constant to prevent division by zero
    epsilon = 1e-9

    for i, remaining_cap in enumerate(bins_remain_cap):
        if item <= remaining_cap:
            # Calculate relative waste if item is placed in the bin
            relative_waste = (remaining_cap - item) / (remaining_cap + epsilon)

            # Calculate the "fullness" of the bin after placing the item.
            # A higher fullness score (closer to 1) indicates the bin will be nearly full.
            fullness = (1 - (remaining_cap - item) / (1 + epsilon))

            # Define a composite priority: minimize relative waste and avoid nearly full bins.
            # The 1/(fullness + epsilon) factor penalizes bins that are becoming too full.
            # The np.exp(-relative_waste) rewards bins with small relative waste (good fit).
            priorities[i] = np.exp(-relative_waste) / (fullness + epsilon)  # Exponential to scale down the relative waste impact and avoid large wastes being too heavily penalized
            #A better approach could involve exploring how different types of items could affect the "energy" in the system as well as more dynamic weightings in the loss.

        else:
            priorities[i] = -np.inf  # Impossible to place item in this bin

    return priorities
```
