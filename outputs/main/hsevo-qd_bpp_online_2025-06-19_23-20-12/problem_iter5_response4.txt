```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, waste, and feasibility,
    with adaptive weighting and repair strategies."""

    potential_bins = bins_remain_cap >= item
    if not np.any(potential_bins):
        #If no feasible bin, prioritize the least-filled bin (repair strategy)
        return bins_remain_cap / np.max(bins_remain_cap)


    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  #Mark infeasible bins
    waste_normalized = waste / np.max(bins_remain_cap)

    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap


    # Adaptive weighting based on item size and bin availability
    avg_cap = np.mean(bins_remain_cap[potential_bins]) if np.any(potential_bins) else 0
    if item > avg_cap*0.8: # Large item. Focus on minimizing waste.
      weight_fill = 0.3
      weight_waste = 0.7
    else: # Smaller item. Prioritize fill.
      weight_fill = 0.7
      weight_waste = 0.3


    priorities = np.where(potential_bins, weight_fill * fill_ratio - weight_waste * waste_normalized, -np.inf)


    return priorities
```
