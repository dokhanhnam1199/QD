```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate bin priorities considering feasibility, fill ratio, and waste."""

    potential_bins = bins_remain_cap >= item
    if not np.any(potential_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    waste_normalized = waste / np.max(bins_remain_cap)

    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    # Add log ratio with a small coefficient to encourage putting items to bins where item size is big compared to bin capacity
    ratios = item / bins_remain_cap
    log_ratios = np.log(ratios)
    log_ratios_scaled = 0.01 * log_ratios # scaled log ratio

    priorities = np.where(potential_bins, fill_ratio - waste_normalized + log_ratios_scaled, -np.inf)

    return priorities
```
