```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a small value to avoid -inf logs later
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - 1e9

    # Bins that can accommodate the item
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):  # Only calculate priorities if there are valid bins
        remaining_capacity = bins_remain_cap[valid_bins] - item  # Capacity if the item is placed
        capacity_ratio = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] = (1 / (1 + capacity_ratio)) + np.exp(-remaining_capacity) # 1/capacity_ratio = how bad this bin fits and small bins gives high reward

    return priorities
```
