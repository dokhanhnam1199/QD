{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Tesla's Resonance Cascade: A harmonic approach to bin selection.\n    # We seek to resonate with the bin that minimizes waste and maximizes efficiency.\n\n    potential_bins = bins_remain_cap >= item #feasible bins\n    if not np.any(potential_bins):\n        return np.zeros_like(bins_remain_cap) #No Feasible Bin\n\n    waste = bins_remain_cap - item # calculate waste if item is put into bins\n    waste[waste < 0] = np.inf # ignore cases when item does not fit\n    waste_normalized = waste/np.max(bins_remain_cap) # normalized waste\n\n    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap # How full will this bin be if packed\n\n    priorities = np.where(potential_bins,fill_ratio - waste_normalized, -np.inf) # favor bins with less waste.\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (11th), we see that the first heuristic considers both fill ratio and waste, while the eleventh focuses solely on the ratio of item size to remaining capacity and uses logarithms. (2nd) vs (12th) ...; Comparing (1st) vs (2nd), we see the functions are identical. (11th) vs (12th) ...; Comparing (20th) vs (11th), we see the functions are also identical. Overall: The top 10 heuristics are identical and the last 10 heuristics are identical, suggesting a significant performance difference between the two versions. The first version uses a complex calculation involving waste normalization and fill ratio, while the second uses log ratios. The first one seems to try to reduce waste.\n- \nOkay, let's refine \"Current Self-Reflection\" for better heuristic design, keeping in mind what to avoid in \"Ineffective Self-Reflection\" (which is currently empty, so we're starting fresh).\n\nHere's a redefined approach:\n\n*   **Keywords:** Multifaceted Evaluation, Weighted Factors, Waste Reduction, Empirical Validation.\n*   **Advice:** Design heuristics by weighting diverse, relevant factors based on their impact and considering waste reduction strategies.\n*   **Avoid:** Over-simplification via single ratios, neglecting waste streams, premature implementation without testing various factor weightings.\n*   **Explanation:** Effective heuristics require a holistic view. Combine weighted factors (including waste) validated through rigorous testing and comparison of different parameter settings.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}