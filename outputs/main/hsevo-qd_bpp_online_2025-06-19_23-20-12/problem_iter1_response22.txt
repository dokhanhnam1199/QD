```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate wasted space if the item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # A bin is feasible only if wasted space is non-negative
    feasible_bins = wasted_space >= 0
    
    # Give infeasible bins a very low priority
    priorities = np.where(feasible_bins, 0.0, -np.inf)

    # For feasible bins, prioritize those that leave less wasted space
    # A small amount is added to avoid dividing by zero
    priorities[feasible_bins] = 1.0 / (wasted_space[feasible_bins] + 1e-6)
    
    # Further boost priority for bins that the item fills relatively well
    fill_ratios = item / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] += fill_ratios
    
    # Moderate preference for bins that are more empty, since it allows more placement in the future.
    # Moderate compared to the two others.
    # The bins with very small capacities are dealt with using the inverse of the wasted space.
    cap_ratio = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)
    priorities[feasible_bins] += 0.1 * cap_ratio
    
    return priorities
```
