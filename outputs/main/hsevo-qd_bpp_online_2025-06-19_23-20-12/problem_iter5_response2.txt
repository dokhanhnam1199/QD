```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio and waste, adapting weights based on item size."""

    potential_bins = bins_remain_cap >= item
    if not np.any(potential_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    waste_normalized = waste / np.max(bins_remain_cap)

    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap

    # Adapt weights based on item size. Larger items prioritize waste.
    item_size_ratio = item / np.max(bins_remain_cap)
    weight_fill = 1 - item_size_ratio
    weight_waste = item_size_ratio

    priorities = np.where(potential_bins, weight_fill * fill_ratio - weight_waste * waste_normalized, -np.inf)

    return priorities
```
