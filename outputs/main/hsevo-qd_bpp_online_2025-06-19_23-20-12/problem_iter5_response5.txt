```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, waste, and feasibility using soft constraints."""

    potential_bins = bins_remain_cap >= item
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Mark infeasible bins with infinite waste
    waste_normalized = waste / np.max(bins_remain_cap)

    # Fill ratio for feasible bins
    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    fill_ratio[waste == np.inf] = 0  # Zero fill for infeasible bins

    # Soft constraint using remaining capacity ratio
    remain_cap_ratio = bins_remain_cap / np.max(bins_remain_cap)
    remain_cap_ratio[waste == np.inf] = 0
    
    weight_fill = 0.6
    weight_waste = 0.3
    weight_remain = 0.1  # Added weight for remaining capacity ratio

    priorities = weight_fill * fill_ratio - weight_waste * waste_normalized + weight_remain * remain_cap_ratio
    
    # Apply a stronger penalty for infeasible bins without using np.where for simpler calculations
    priorities[waste == np.inf] = -np.inf

    return priorities
```
