```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, prioritize bins that can fit the item
    fit_indices = np.where(bins_remain_cap >= item)[0]
    if len(fit_indices) > 0:
        # Prioritize bins with smallest remaining capacity AFTER adding the item.
        remaining_after_fit = bins_remain_cap[fit_indices] - item
        priorities[fit_indices] = 1 / (remaining_after_fit + 0.00001) # avoid zero division

    # Then, add penalty (negative priority) if it doesn't fit
    no_fit_indices = np.where(bins_remain_cap < item)[0]
    priorities[no_fit_indices] = -1000  # Massive negative priority

    return priorities
```
