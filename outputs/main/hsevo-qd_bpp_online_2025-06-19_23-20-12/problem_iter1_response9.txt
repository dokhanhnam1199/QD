```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing Inspired
            # Try to find a close fit.  Prioritize bins that, after the item
            # is placed, will have relatively little space remaining, but not too little!
            remaining = cap - item
            fit_ratio = item / cap # What proportion of bin is filled

            # A good fit will have a high fit ratio.
            # But prefer it only if we leave a non-trivial ammount of room behind

            if remaining > 0.01:
              priorities[i] = fit_ratio * (1- np.exp(-remaining * 10)) #High fit with reasonable amount of space
            else:
              priorities[i] = -1  # very low priority so we choose something with reasonable remainding cap
        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority.
    return priorities
```
