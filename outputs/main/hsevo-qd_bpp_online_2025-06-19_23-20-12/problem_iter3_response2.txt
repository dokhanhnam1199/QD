```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    potential_bins = bins_remain_cap >= item
    if not np.any(potential_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    waste_normalized = waste / np.max(bins_remain_cap)

    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    
    # Introduce a capacity utilization factor - prioritize bins that are already somewhat full
    initial_utilization = (bins_remain_cap / np.max(bins_remain_cap))
    
    # Introduce weights to balance fill_ratio, waste and initial bin utilization
    weight_fill_ratio = 0.5
    weight_waste = 0.3
    weight_utilization = 0.2

    priorities = np.where(
        potential_bins,
        weight_fill_ratio * fill_ratio - weight_waste * waste_normalized + weight_utilization * initial_utilization,
        -np.inf
    )

    return priorities
```
