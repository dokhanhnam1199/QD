```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function incorporates several factors inspired by physics and optimization.
    - Inverse Capacity Difference: Prioritizes bins where the item fits relatively snugly.
    - Remaining Capacity Penalty: Deters filling bins too early by penalizing low remaining capacity.  Applies a quadratic penalty.
    - Minimum Capacity Threshold: Sets a very negative priority (effectively disallowing) if the item doesn't fit, or if remaining space is too low.
    - Random Perturbation: Introduces a small random perturbation to break ties and explore different configurations.  This is akin to thermal fluctuations in physical systems.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    min_capacity_threshold = 0.1  # Prevents from filling up too early

    for i, cap in enumerate(bins_remain_cap):
        if item > cap or cap < min_capacity_threshold:
            priorities[i] = -np.inf  # Very low priority: don't put it here!
        else:
            capacity_difference = cap - item
            inverse_capacity_difference = 1 / (capacity_difference + 1e-9)  # Avoid division by zero

            remaining_capacity_penalty = -(1 - (cap / (1 + np.max(bins_remain_cap))))**2  # quadratic penalty

            priorities[i] = inverse_capacity_difference + remaining_capacity_penalty + np.random.normal(0, 0.01) # randomness acts like thermal fluctuations

    return priorities
```
