```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors:
    1. Remaining capacity: Bins with remaining capacity closer to the item size are preferred.
    2. Waste minimization: Smaller remaining capacity after placing the item is better (first-fit decreasing principle)
    3. Avoidance of small fragments: Penalize bins that would leave very small unused capacity

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            # Encourage bins that can fit the item
            remaining_after_fit = capacity - item

            #Prioritize bins with a good fit (capacity close to item size), penalize near empty bins
            priorities[i] = (
                    10 / (1 + abs(capacity - item))  #Encourage near perfect fit
                    + (1/(1+remaining_after_fit)) #Minimize wasted space. Inverse is a good enough function here
                    - 5 * (remaining_after_fit < 0.1) #Avoid tiny fragments. This will penalize any bin leaving <0.1 space
            )

        else:
            priorities[i] = -1000  # Very low priority if the item doesn't fit

    return priorities
```
