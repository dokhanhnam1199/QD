```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Return bin priorities. Favor bins with good fill ratio, penalize waste, handle infeasibility."""
    potential_bins = bins_remain_cap >= item
    if not np.any(potential_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    waste_normalized = waste / np.max(bins_remain_cap)
    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    
    # Adaptive adjustment: Modulate impact of waste based on item size.
    waste_penalty = waste_normalized * (1 + item)  # Larger items penalize waste more.
    
    priorities = np.where(potential_bins, fill_ratio - waste_penalty, -np.inf)
    return priorities
```
