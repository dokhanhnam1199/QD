```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap)

    if np.any(valid_bins):
        # Focus on bins that can actually fit the item
        remaining_space = bins_remain_cap[valid_bins] - item
        # Give higher priority to bins that have minimal remaining space after packing
        priorities[valid_bins] = -remaining_space
        # Boost the priority of bins that are almost full *after* packing.
        priorities[valid_bins] += 1.0 / (remaining_space + 0.001) #Adding small value to avoid division by zero
        # Prioritize bins that were nearly full BEFORE packing, to fully utilize partially filled bins
        priorities[valid_bins] += 1.0/(bins_remain_cap[valid_bins] + 0.001) # Add small value to avoid division by zero
    else:
        #If no bin can fit the item, assign low priority to all
        priorities[:] = -1e9 # a very negative number
        #Or alternatively, assign equal priority to all to open a new bin randomly
        #priorities[:] = 0
        #Or try packing to a nearly full bin by bin. Add priority of adding item to those bins which are the least short.
        bins_remain_cap_copy = np.copy(bins_remain_cap)
        priorities = item - bins_remain_cap_copy
        priorities = np.maximum(0,priorities) # ensure we never penalize by having less space


    return priorities
```
