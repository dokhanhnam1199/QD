```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers:
    1. Whether the item fits (essential)
    2. How much space is wasted if the item is placed (minimize waste)
    3. A slight preference for filling bins already partially full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Item must fit. If it doesn't, priority is -infinity
    fits = item <= bins_remain_cap
    priorities[~fits] = -np.inf  # Never choose bins that don't fit

    # Rule 2: Minimize waste. Smaller waste is better.
    waste = bins_remain_cap - item
    waste[~fits] = np.inf  # Ensure waste calculation only on fitting bins. Replace -inf earlier introduced.

    # Higher priority for bins with minimal waste. Invert to prioritize lower waste
    priorities[fits] = -waste[fits]

    # Rule 3: Slight preference for filling already-partially-full bins.
    # This prevents bins from staying very partially full for too long. This promotes more complete bin filling in general
    # Adding a small offset to the priority based on current fill level. Add a constant for smooth tradeoff between waste and current bin occupancy
    fill_ratios = (1 - bins_remain_cap / np.max(bins_remain_cap))
    priorities[fits] += 0.1 * fill_ratios[fits]

    return priorities
```
