```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Tesla's Resonance Cascade: A harmonic approach to bin selection.
    # We seek to resonate with the bin that minimizes waste and maximizes efficiency.

    potential_bins = bins_remain_cap >= item #feasible bins
    if not np.any(potential_bins):
        return np.zeros_like(bins_remain_cap) #No Feasible Bin

    waste = bins_remain_cap - item # calculate waste if item is put into bins
    waste[waste < 0] = np.inf # ignore cases when item does not fit
    waste_normalized = waste/np.max(bins_remain_cap) # normalized waste

    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap # How full will this bin be if packed

    priorities = np.where(potential_bins,fill_ratio - waste_normalized, -np.inf) # favor bins with less waste.

    return priorities
```
