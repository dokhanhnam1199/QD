```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    potential_bins = bins_remain_cap >= item
    if not np.any(potential_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    waste_normalized = waste / np.max(bins_remain_cap)

    fill_ratio = (bins_remain_cap - waste) / bins_remain_cap
    fill_ratio[~potential_bins] = 0  # Ensure fill_ratio is 0 for infeasible bins

    # Introduce weighted factors for a more nuanced priority:
    waste_weight = 0.6  # Weight for normalized waste (higher = more emphasis on minimizing waste)
    fill_weight = 0.4  # Weight for fill ratio (higher = more emphasis on filling bins well)
    capacity_weight = 0.1

    # Capacity consideration: slight preference for bins with larger remaining capacity.
    capacity_normalized = bins_remain_cap / np.max(bins_remain_cap)
    capacity_normalized[~potential_bins] = 0

    priorities = np.where(potential_bins,
                         (fill_weight * fill_ratio) - (waste_weight * waste_normalized) + (capacity_weight*capacity_normalized),
                         -np.inf)


    return priorities
```
