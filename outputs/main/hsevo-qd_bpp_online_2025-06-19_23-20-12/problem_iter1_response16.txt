```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Consider bins that can actually fit the item
    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        # If no bin can fit, consider the emptiest one to start a new bin (gravitational collapse?)
        priorities = bins_remain_cap # Assign remaining capcity as priority to choose the emptiest bin, to create a new bin as late as possible
        return priorities


    # Heuristic 2: Best-fit decreasing (modified for online) - want to minimize wasted space
    waste = bins_remain_cap - item
    waste[~fit_mask] = np.inf # Ignore bins that can't fit
    priorities = -waste

    # Heuristic 3: A dash of randomness - simulating quantum fluctuations? To avoid getting stuck.
    priorities += np.random.normal(0, 0.01, size=bins_remain_cap.shape)

    # Heuristic 4: Slightly prefer bins that are almost full after packing.
    # This encourages "completing" partially filled bins.
    almost_full = np.where(np.logical_and(fit_mask, (bins_remain_cap - item) / bins_remain_cap < 0.2)) #remaining ratio less than 0.2.
    priorities[almost_full] += 0.1  # Small bonus for almost full

    #Heuristic 5: Penalize bins that become nearly empty if the item is placed in them. Helps consolidate space and avoid bin fragmentation.
    nearly_empty = np.where(np.logical_and(fit_mask, (bins_remain_cap - item) / bins_remain_cap > 0.8)) #if remaining space ratio greater than 0.8, penalize.
    priorities[nearly_empty] -= 0.05 #apply slight penalty to encourage better space utilization.
    return priorities
```
