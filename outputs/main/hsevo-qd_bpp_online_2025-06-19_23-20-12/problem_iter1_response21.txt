```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # A bin must have enough capacity
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities  # No bin can accommodate the item

    # First priority: How much empty space will be left. Smaller space -> higher priority, encourage fullness.
    remaining_space = bins_remain_cap - item
    remaining_space[~valid_bins] = np.inf  # Disqualify invalid bins.

    priorities = 1.0 / (remaining_space + 1e-9) # adding small number to avoid dividing by zero. Large remaining space -> low priority

    # Second priority: Encourage using bins with more remaining space *if* multiple bins can fit item. (avoid very small pieces being added early)
    # Only apply if we actually *have* choices
    if np.sum(valid_bins) > 1:
        normalized_capacities = bins_remain_cap / np.max(bins_remain_cap)
        priorities = priorities + 0.1 * normalized_capacities

    return priorities
```
