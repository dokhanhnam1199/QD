```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_CAPACITY: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation combines a "Best Fit" strategy with a "Consolidation Bonus".
    It aims to improve upon the pure Best Fit by also encouraging the use of
    existing partially-filled bins, promoting better bin utilization and
    potentially reducing the total number of bins opened.

    Priorities are calculated based on two components for bins where the item fits:
    1.  **Best Fit Component**: Prioritizes bins that, after the item is placed,
        will have the smallest remaining capacity. This encourages tight packing.
        (Score: -(remaining_capacity_after_item)).
    2.  **Consolidation Bonus**: A simple, linear bonus applied to bins that are
        already partially filled. This encourages consolidating items into
        already-in-use bins rather than starting new ones. The bonus is
        proportional to the current fill level of the bin.

    Infeasible bins (where the item does not fit) are explicitly assigned a
    priority of -infinity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.
        BIN_CAPACITY: The total capacity of a single bin. Default is 1.0,
                      common for normalized bin packing problems.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Define a weight for the consolidation bonus.
    # This parameter controls how much emphasis is placed on consolidating items
    # into existing bins versus achieving a perfect "best fit".
    # A value of 0.0 makes it pure Best Fit (like priority_v1).
    # A positive value encourages consolidation. Tuning this value (e.g., 0.1 to 1.0)
    # can significantly impact performance.
    CONSOLIDATION_WEIGHT = 0.5 # Example value, can be tuned

    # Find bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        # No bin can fit the item, all priorities remain -inf.
        # The solver using this function would typically then open a new bin.
        return priorities

    # --- 1. Best Fit Component ---
    # We want to maximize the negative of the potential remaining capacity.
    # A smaller remaining capacity after placing the item results in a higher score.
    # potential_remaining_cap = bins_remain_cap[can_fit_mask] - item
    # best_fit_component = -potential_remaining_cap
    best_fit_component = -(bins_remain_cap[can_fit_mask] - item)

    # --- 2. Consolidation Bonus ---
    # The bonus is proportional to how much the bin is *already* filled.
    # current_fill_level ranges from 0 (empty bin) to BIN_CAPACITY (full bin).
    current_fill_level = BIN_CAPACITY - bins_remain_cap[can_fit_mask]
    consolidation_bonus = CONSOLIDATION_WEIGHT * current_fill_level

    # --- Combine Components ---
    # The total priority for a fitting bin is the sum of its Best Fit score
    # and its Consolidation Bonus.
    priorities[can_fit_mask] = best_fit_component + consolidation_bonus

    return priorities
```
