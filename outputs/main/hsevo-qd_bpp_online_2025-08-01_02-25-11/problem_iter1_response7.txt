```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    As Richard Feynman might say, "The most elegant solution is often the one
    that minimizes wasted potential." This implementation embodies the 'Best Fit'
    heuristic, which aims to minimize the "empty space potential" remaining
    in a bin after an item is placed. We seek the bin that will be left
    with the smallest, non-negative gap, effectively "snugly" fitting the item
    to maximize bin utilization and minimize the number of bins required.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more desirable bin. Bins where the item
        does not fit receive a very low (negative infinity) score.
    """
    # Initialize scores. Bins where the item doesn't fit get a score of -infinity,
    # ensuring they are never chosen unless absolutely no other option exists
    # (which would typically lead to opening a new bin in the larger algorithm).
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # First, identify the bins where the item *can* actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item fits, we calculate the "tightness of fit".
    # The 'wasted potential' or 'gap' is (bin_capacity - item_size).
    # We want to MINIMIZE this gap.
    # To turn this into a priority score where HIGHER is better, we simply
    # take the negative of the gap.
    # A perfect fit (gap = 0) will yield the highest possible score (0).
    # A small gap (e.g., 0.1) will yield a score of -0.1.
    # A large gap (e.g., 10.0) will yield a score of -10.0.
    # This naturally prioritizes the bins with the tightest, positive fit.
    scores[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return scores
```
