```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes Best Fit with a weighted bonus for using existing,
    more-filled bins to encourage consolidation and reduce bin count.
    """
    # Small factor to scale the consolidation bonus, ensuring Best Fit remains dominant.
    BASE_CONSOLIDATION_BONUS_FACTOR = 0.001

    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if len(bins_remain_cap) == 0:
        return priorities

    # Infer the maximum capacity of an 'empty' bin from the input array.
    # This assumes that if a new bin is to be opened, its full capacity
    # is represented as the maximum value in `bins_remain_cap`.
    BIN_CAPACITY = np.max(bins_remain_cap)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities

    # Calculate base score: negative of potential remaining capacity (Best Fit).
    # Minimizing remaining capacity means maximizing this negative value.
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item
    base_scores = -potential_remaining_cap

    # Calculate consolidation bonus: proportional to the space already occupied in the bin.
    # This encourages packing into bins that are already significantly used,
    # making the bonus adaptive to the bin's current fill level.
    # Empty bins (bins_remain_cap == BIN_CAPACITY) will correctly receive a zero bonus.
    occupied_space = BIN_CAPACITY - bins_remain_cap[can_fit_mask]
    consolidation_bonuses = BASE_CONSOLIDATION_BONUS_FACTOR * (occupied_space / BIN_CAPACITY)

    # The total priority is the sum of the Best Fit score and the consolidation bonus.
    priorities[can_fit_mask] = base_scores + consolidation_bonuses

    return priorities
```
