```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.

    This heuristic, "Fragment-Aware Worst Fit (FAWF)", is designed to be more
    adaptive, holistic, and robust than traditional Best Fit. It dynamically
    evaluates the quality of the remaining space in a bin after placing an item,
    promoting diverse solution exploration by:

    1.  **Prioritizing Perfect Fits:** Giving the highest score to bins that will
        be exactly filled by the current item (leaving zero capacity). This is
        a highly efficient and desirable outcome.
    2.  **Penalizing Fragmentation:** Strongly de-prioritizing bins that, after
        placement, would be left with a very small, potentially unusable,
        "fragmented" capacity. This avoids creating slivers that are hard to fill
        later and can lead to wasted space or more open bins.
    3.  **Encouraging Openness (Worst Fit Tendency):** For bins that do not
        result in a perfect fit or fragmentation, it prefers those that would
        be left with *more* remaining capacity. This "Worst Fit" component
        helps keep bins open for larger future items, spreading items more
        evenly and potentially reducing the total number of bins used in the
        long run by maintaining flexibility.

    This approach moves beyond simple greedy choices by considering the
    strategic value of different bin states, aiming for better overall packing
    efficiency and adaptability in an online setting.

    Args:
        item: Size of the item to be added to a bin.
        bins_remain_cap: Array of current remaining capacities for each bin.
                         It is assumed that the original bin capacity is uniform
                         across all bins (e.g., 1.0) for the `FRAGMENTATION_THRESHOLD`
                         to be meaningful in a relative sense.

    Returns:
        Array of the same size as `bins_remain_cap` with the priority score
        for each bin. A higher score indicates a more preferred bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Heuristic parameters. These can be tuned based on problem characteristics
    # or made adaptive for even greater flexibility.
    # EPSILON: Tolerance for floating-point comparisons to zero remaining capacity.
    EPSILON = 1e-9
    # FRAGMENTATION_THRESHOLD: Defines what constitutes a "fragmented" remaining capacity.
    # E.g., if original bin capacity is 1.0, 0.1 means capacities between 0 and 0.1
    # are considered fragmented.
    FRAGMENTATION_THRESHOLD = 0.1

    # Define priority scores for different scenarios to guide selection.
    PERFECT_FIT_SCORE = 1000.0   # A large positive score for ideal fits.
    FRAGMENTATION_PENALTY = -500.0 # A strong negative score to deter fragmentation.

    # Identify all bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item
    fitting_bins_indices = np.where(can_fit_mask)[0]

    if fitting_bins_indices.size == 0:
        # If the item doesn't fit in any existing bin, all priorities remain -inf.
        # The calling logic should then typically open a new bin.
        return priorities

    # Calculate the remaining capacity for each fitting bin if the item were placed.
    potential_remaining_cap = bins_remain_cap[fitting_bins_indices] - item

    # Initialize priorities for all fitting bins with a default strategy,
    # which here is the "Worst Fit" component (preferring larger remaining capacity).
    # This acts as the baseline for bins not covered by perfect fit or fragmentation rules.
    priorities[fitting_bins_indices] = potential_remaining_cap

    # Apply specific priority rules based on the quality of the potential remaining capacity:

    # 1. Assign highest priority for perfect fits (remaining capacity is zero).
    perfect_fit_mask_in_subset = potential_remaining_cap < EPSILON
    priorities[fitting_bins_indices[perfect_fit_mask_in_subset]] = PERFECT_FIT_SCORE

    # 2. Apply strong penalty for creating fragmented space (small but non-zero remaining capacity).
    fragmented_fit_mask_in_subset = (potential_remaining_cap >= EPSILON) & \
                                     (potential_remaining_cap < FRAGMENTATION_THRESHOLD)
    priorities[fitting_bins_indices[fragmented_fit_mask_in_subset]] = FRAGMENTATION_PENALTY

    return priorities
```
