```python
import numpy as np

# Assuming a standard normalized bin capacity for the Online Bin Packing Problem.
# In most standard BPP formulations, bins are identical and have a capacity of 1.0
# (after normalizing item sizes to be between 0 and 1).
# If actual bin capacity varies or is not 1.0, this constant should be adjusted
# or passed as an argument to the function.
BIN_CAPACITY = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims for an "Adaptive Best Fit with Medium-Gap Avoidance" strategy.
    It extends the "Best Fit" principle (prioritizing smallest remaining capacity)
    by introducing a non-linear penalty. Specifically, it heavily penalizes bins that,
    after the item is placed, would result in a 'medium' remaining capacity.
    This adaptive approach attempts to prevent the creation of "awkwardly sized" gaps
    that are neither small enough to be easily filled by subsequent small items
    nor large enough to accommodate future large items, thereby reducing fragmentation
    and potentially leading to a more efficient overall packing.

    The heuristic is multi-objective: it seeks to minimize immediate waste (like Best Fit)
    while also shaping the future state of bins by discouraging sub-optimal intermediate
    fill levels.

    Args:
        item: Size of item to be added to the bin (assumed to be <= BIN_CAPACITY).
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority. Bins where the item cannot fit
        will have a priority of -np.inf.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # --- Hyperparameters for the non-linear adjustment ---
    # These parameters are crucial for the heuristic's performance and
    # may require tuning based on the specific distribution of item sizes
    # and desired packing characteristics.

    # 1. BAD_GAP_TARGET_RATIO:
    #    The target proportion of the bin capacity that is considered an
    #    "undesirable" remaining gap after placing an item.
    #    E.g., 0.3 means we want to avoid bins ending up with ~30% empty space.
    BAD_GAP_TARGET_RATIO = 0.3

    # 2. GAUSSIAN_PENALTY_STRENGTH:
    #    Controls how strong the penalty is for bins whose remaining capacity
    #    falls close to the BAD_GAP_TARGET_RATIO. A higher value means a
    #    steeper dip in priority.
    GAUSSIAN_PENALTY_STRENGTH = 2.5 # Increased from 2.0 to make the penalty more pronounced

    # 3. GAUSSIAN_WIDTH_SIGMA:
    #    Defines the spread (standard deviation) of the Gaussian penalty.
    #    A smaller sigma means the penalty is very narrow and only applies to
    #    remaining capacities very close to the target. A larger sigma means
    #    it penalizes a wider range of medium gaps.
    GAUSSIAN_WIDTH_SIGMA = 0.08 # Slightly reduced from 0.1 for a more focused penalty

    # Determine the absolute value for the "bad" remaining gap based on BIN_CAPACITY
    bad_gap_target_abs = BAD_GAP_TARGET_RATIO * BIN_CAPACITY

    # Find bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return the initialized priorities (-inf for all)
    if not np.any(can_fit_mask):
        return priorities

    # Calculate potential remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Base priority: Traditional Best Fit
    # We want to maximize this value. Smaller 'potential_remaining_cap' means a larger
    # (less negative) base_priority, thus a tighter fit.
    base_priorities = -potential_remaining_cap

    # Non-linear adjustment: Apply a Gaussian (normal distribution) penalty
    # This term calculates a penalty that is highest when 'potential_remaining_cap'
    # is exactly equal to 'bad_gap_target_abs', and decreases rapidly as it moves
    # away from this target.
    # The term is subtracted from the base priority, effectively creating a "dip"
    # in priority for the "bad" gap range.
    penalty_term = GAUSSIAN_PENALTY_STRENGTH * np.exp(
        -((potential_remaining_cap - bad_gap_target_abs)**2) / (2 * GAUSSIAN_WIDTH_SIGMA**2)
    )

    # Combine base priority with the non-linear penalty
    adjusted_priorities = base_priorities - penalty_term

    # Assign these adjusted priorities back to the original 'priorities' array
    # for only the bins where the item can fit.
    priorities[can_fit_mask] = adjusted_priorities

    return priorities
```
