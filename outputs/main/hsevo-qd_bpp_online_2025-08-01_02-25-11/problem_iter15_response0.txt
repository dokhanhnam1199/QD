```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation enhances the "Best Fit" strategy with an adaptive,
    non-linear penalty for remaining capacity, and a strong preference for
    perfect fits. It aims for a more nuanced and potentially more efficient
    online bin packing by dynamically adjusting its preference for bin tightness.

    Key features:
    1.  **Perfect Fit Bonus (Emergent/Hybrid):** Bins that can be filled exactly to capacity
        (i.e., `potential_remaining_cap` becomes 0 after placement) are given the highest
        possible priority (`np.inf`). This strongly encourages "closing" bins as tightly
        as possible, freeing up new bins for future use and minimizing wasted space.
        This often leads to fewer bins used overall.

    2.  **Adaptive Non-Linear Penalty (Adaptive/Non-linear):** For bins where the item fits
        but doesn't perfectly fill, the priority is calculated as:
        `-(remainder + remainder^2 * penalty_factor)`.
        -   The `remainder` term: This is the core "Best Fit" component, where a smaller
            remaining capacity generally leads to a higher (less negative) priority.
        -   The `remainder^2` term: This introduces a non-linear, quadratic penalty.
            It makes larger remaining capacities disproportionately less desirable
            compared to a linear Best Fit. This pushes the heuristic to strongly favor
            tighter fits even if not perfect.
        -   The `penalty_factor = 1.0 / (item + epsilon)`: This is the adaptive component.
            The strength of the quadratic penalty is inversely proportional to the size
            of the incoming `item`.
            -   If `item` is small: `penalty_factor` is large. This means leaving a large
                remainder is heavily discouraged, as it represents a significant amount
                of fragmented, potentially unusable space for a small item. The heuristic
                will try harder to find a very tight fit.
            -   If `item` is large: `penalty_factor` is smaller. The quadratic penalty
                is less dominant, and the priority calculation becomes closer to a pure Best Fit.
                This acknowledges that for large items, a perfect fit is less likely, and
                some larger remainder might be unavoidable or still represent efficient packing.

    This hybrid approach combines the traditional Best Fit with a dynamically adjusted
    non-linear preference, aiming for a more globally efficient packing solution that
    adapts to the characteristics of the incoming items.

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
        bins_remain_cap: A NumPy array of current remaining capacities for each bin.
                         Values must be non-negative floats.

    Return:
        A NumPy array of the same size as `bins_remain_cap` with the priority score
        of each bin. Bins where the item cannot fit will have a priority of `-np.inf`.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Filter capacities for bins that can accommodate the item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # If no bin can fit the item, return the initialized priorities (-inf for all)
    if fitting_bins_remain_cap.size == 0:
        return priorities

    # Calculate the remaining capacity for each fitting bin if the item were placed
    potential_remaining_cap = fitting_bins_remain_cap - item

    # 1. Apply Perfect Fit Bonus: Bins resulting in 0 remaining capacity get highest priority
    perfect_fit_mask = potential_remaining_cap == 0
    priorities[can_fit_mask][perfect_fit_mask] = np.inf

    # 2. Apply Adaptive Non-Linear Penalty for other fitting bins (where remaining_cap > 0)
    non_perfect_fit_mask = (potential_remaining_cap > 0)
    non_perfect_remaining_cap = potential_remaining_cap[non_perfect_fit_mask]

    if non_perfect_remaining_cap.size > 0:
        # Add a small epsilon to the item size to prevent division by zero
        # if 'item' happens to be zero, though typically item sizes are positive.
        epsilon = 1e-6 
        
        # Calculate the adaptive penalty factor
        penalty_factor = 1.0 / (item + epsilon)

        # Calculate priority using the non-linear formula: -(linear_term + quadratic_term * adaptive_factor)
        # The larger the remainder, the lower the priority.
        # The quadratic term (remainder^2) amplifies this penalty for larger remainders.
        # The adaptive_factor (1/item) makes this amplification stronger for smaller items.
        calculated_priorities = -(non_perfect_remaining_cap + non_perfect_remaining_cap**2 * penalty_factor)
        
        # Assign these calculated priorities back to the appropriate bins
        priorities[can_fit_mask][non_perfect_fit_mask] = calculated_priorities

    return priorities
```
