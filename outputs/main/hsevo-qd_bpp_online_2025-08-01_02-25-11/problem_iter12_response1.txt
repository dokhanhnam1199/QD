```python
import numpy as np

# Assuming a standard normalized bin capacity for heuristic parameters.
# In a real application, this could be passed as an argument or configured.
DEFAULT_BIN_CAPACITY = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation, "Adaptive and Fragment-Aware Fit," is designed to go
    beyond simple "Best Fit" by strategically managing bin capacities. It aims
    to minimize the number of bins while also preventing problematic fragmentation
    and encouraging the creation of 'useful' remaining space.

    Key principles:
    1.  **Prioritize Perfect Fit:** Assigns the highest possible priority to bins
        that can be completely filled by the current item, maximizing bin utilization.
    2.  **Adaptive Item Handling:** The strategy dynamically adjusts based on the
        size of the incoming item.
        -   **Large Items (e.g., > 50% of bin capacity):** For large items, a more
            direct Best Fit approach is preferred. The focus is on consolidating
            these items into existing bins to minimize the opening of new bins
            and reduce large, leftover fragments.
        -   **Small to Medium Items:** For these items, the heuristic becomes
            more nuanced. It actively discourages the creation of very small,
            'dust' fragments (e.g., < 5% of bin capacity) which are often unusable
            later. Instead, it rewards leaving a 'useful' amount of space (e.g.,
            15%-40% of bin capacity) that can accommodate future items.
    3.  **Fragment Avoidance:** Imposes significant penalties on placements that
        would result in extremely small, near-zero remaining capacities, which
        are detrimental to overall packing efficiency.
    4.  **Promote Useful Fragments:** Awards bonuses for placements that leave
        moderately sized capacities, which are more likely to be utilized by
        subsequent items, thus maintaining flexibility and potentially leading
        to a more compact overall packing.

    Args:
        item: Size of item to be added to the bin (assumed to be normalized, e.g., 0 to 1).
        bins_remain_cap: Array of remaining capacities for each bin (normalized).

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority of -inf.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can physically fit
    can_fit_mask = bins_remain_cap >= item
    fitting_bins_indices = np.where(can_fit_mask)[0]

    if not np.any(can_fit_mask):
        # If no bin can fit the item, all priorities remain -inf.
        # The higher-level logic should interpret this as a need to open a new bin.
        return priorities

    # Calculate the potential remaining capacity for each fitting bin
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # --- Heuristic Parameters (tunable based on problem characteristics) ---
    # Threshold to classify an item as "large" relative to bin capacity.
    LARGE_ITEM_THRESHOLD = 0.5 * DEFAULT_BIN_CAPACITY 
    
    # Threshold for remaining capacity below which it's considered "fragmentation dust".
    FRAG_ZONE_THRESHOLD = 0.05 * DEFAULT_BIN_CAPACITY 
    
    # Range for "useful" remaining capacity.
    USEFUL_ZONE_MIN = 0.15 * DEFAULT_BIN_CAPACITY
    USEFUL_ZONE_MAX = 0.40 * DEFAULT_BIN_CAPACITY

    # Scoring constants/weights
    PERFECT_FIT_BONUS = 1000.0  # High bonus for exact fits
    FRAGMENT_PENALTY_MAGNITUDE = 500.0 # Strength of penalty for small fragments
    USEFUL_FRAGMENT_BONUS_MAGNITUDE = 100.0 # Strength of bonus for useful fragments
    
    # Base score: analogous to Best Fit, where smaller remaining capacity is generally preferred.
    # This forms the foundation of the priority, which is then adjusted.
    base_scores = -potential_remaining_cap 

    # Iterate through only the bins that can fit the item
    for idx_in_mask, original_bin_idx in enumerate(fitting_bins_indices):
        r = potential_remaining_cap[idx_in_mask] # Current potential remaining capacity for this bin
        
        score = base_scores[idx_in_mask] # Start with the base Best Fit score for this bin

        # 1. Apply a significant bonus for a perfect fit (bin becomes completely full)
        if np.isclose(r, 0.0, atol=1e-9): # Use np.isclose for robust float comparison
            score += PERFECT_FIT_BONUS
        # 2. Adaptive strategy based on item size
        elif item > LARGE_ITEM_THRESHOLD:
            # For large items, we primarily stick to the Best Fit logic.
            # Large items consume a significant portion of the bin, so minimizing
            # the leftover space (i.e., making it as tight as possible) is generally
            # the best strategy to prevent large, unusable gaps. No additional
            # penalties or bonuses beyond base_scores are applied here.
            pass 
        else: # Item is small to medium
            # For small/medium items, we apply more strategic adjustments:
            if 0 < r < FRAG_ZONE_THRESHOLD:
                # This range represents "fragmentation dust" - very small, often unusable space.
                # Penalize this outcome strongly. The penalty increases as 'r' approaches zero.
                # The penalty factor scales from 0 (at FRAG_ZONE_THRESHOLD) to 1 (at 0).
                penalty_factor = (FRAG_ZONE_THRESHOLD - r) / FRAG_ZONE_THRESHOLD
                score -= FRAGMENT_PENALTY_MAGNITUDE * penalty_factor
            elif USEFUL_ZONE_MIN <= r <= USEFUL_ZONE_MAX:
                # This range represents a "useful" amount of remaining space.
                # Reward this outcome. The bonus is highest when 'r' is near the middle
                # of the useful zone, tapering off towards the edges.
                mid_useful_zone = (USEFUL_ZONE_MIN + USEFUL_ZONE_MAX) / 2
                # A quadratic bonus function centered at mid_useful_zone
                # bonus_factor ranges from 0 (at min/max) to 1 (at mid)
                range_span = USEFUL_ZONE_MAX - USEFUL_ZONE_MIN
                if range_span > 1e-9: # Avoid division by zero
                    bonus_factor = 1 - (abs(r - mid_useful_zone) / (range_span / 2))**2
                    score += USEFUL_FRAGMENT_BONUS_MAGNITUDE * max(0, bonus_factor)
                else: # Degenerate case where min and max are same, treat as perfect fit or specific point
                    score += USEFUL_FRAGMENT_BONUS_MAGNITUDE # Flat bonus
            # For other cases (r > USEFUL_ZONE_MAX, or r between FRAG_ZONE_THRESHOLD and USEFUL_ZONE_MIN),
            # the priority is primarily determined by the base_score (-r), promoting tighter fits
            # within a range that avoids severe fragmentation.

        # Assign the calculated score to the correct bin's position in the original priorities array
        priorities[original_bin_idx] = score

    return priorities
```
