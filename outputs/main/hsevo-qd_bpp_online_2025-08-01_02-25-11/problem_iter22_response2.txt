import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0,
                 consolidation_scaling_factor: float = 0.06463682540756159, is_close_atol: float = 0.000658742775023791) -> np.ndarray:
    """Combines Best Fit with an adaptive bonus for consolidating items into
    already partially filled bins, encouraging finishing off existing bins.
    """
    # This design prioritizes tight fits (Best Fit) and enhances consolidation.
    # It introduces an adaptive bonus for already used bins, scaled by their current
    # fill level, aiming to 'top off' existing bins and reduce the total bin count.

    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # 1. Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Only consider bins where the item fits
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    if fitting_bins_remain_cap.size == 0:
        return priorities # No bins can fit the item

    # 2. Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = fitting_bins_remain_cap - item

    # 3. Base priority: Best Fit strategy (minimize remaining capacity)
    # A smaller potential_remaining_cap (closer to 0) means a tighter fit,
    # which is preferred. By taking the negative, we convert minimization to maximization.
    base_priorities = -potential_remaining_cap

    # 4. Adaptive Consolidation Bonus:
    # Bonus for already partially filled bins, proportional to their current fill level.
    # This encourages 'topping off' bins that are already more full.

    # Identify bins that are not "fresh" (i.e., not entirely empty/unused).
    is_used_bin_mask = ~np.isclose(fitting_bins_remain_cap, bin_capacity, atol=is_close_atol)

    # Calculate the current "fill level" for fitting bins
    current_fill_level = bin_capacity - fitting_bins_remain_cap

    # Apply the adaptive bonus only to bins that can fit and are already used.
    adaptive_bonus = np.zeros_like(base_priorities)
    adaptive_bonus[is_used_bin_mask] = consolidation_scaling_factor * current_fill_level[is_used_bin_mask]

    # Combine base priority (Best Fit) and adaptive consolidation bonus
    priorities[can_fit_mask] = base_priorities + adaptive_bonus

    return priorities
