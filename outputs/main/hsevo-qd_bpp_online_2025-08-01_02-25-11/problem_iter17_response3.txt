```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_CAPACITY: float) -> np.ndarray:
    """Combines Best Fit with exact fit bonus, adaptive fragmentation penalty, and a 'strategic large remainder'
    penalty for small items. Aims for bin completion, avoids awkward fragmentation, and preserves large bins for
    bigger future items, enhancing overall space utilization.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit (capacity >= item size)
    can_fit_mask = bins_remain_cap >= item

    # Extract capacities for only the fitting bins
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # If no bin can fit the item, return priorities initialized to -inf
    if fitting_bins_remain_cap.size == 0:
        return priorities

    # Calculate potential remaining capacity if the item were placed
    potential_remaining_cap = fitting_bins_remain_cap - item

    # --- Core Priority Calculation (Best Fit component) ---
    # Prioritizes bins that result in the smallest remaining capacity.
    calculated_priorities = -potential_remaining_cap

    # --- Hybrid/Non-linear/Adaptive Components ---

    # Define thresholds and tunable parameters
    EXACT_FIT_THRESHOLD = 1e-9          # Tolerance for floating point comparisons to zero
    EXACT_FIT_BONUS = 1000.0            # Large bonus for perfect fits
    FRAGMENT_PENALTY_FACTOR = 5.0       # Strength of fragmentation penalty
    SMALL_ITEM_THRESHOLD_RATIO = 0.2    # Item is "small" if its size < BIN_CAPACITY * this ratio
    LARGE_REMAINDER_PENALTY_FACTOR = 0.75 # Strength of penalty for leaving very large remainders with small items

    # 1. Exact Fit Bonus: A strong, discrete bonus for perfect fits.
    # Encourages complete bin utilization and closure.
    exact_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EXACT_FIT_THRESHOLD)
    calculated_priorities[exact_fit_mask] += EXACT_FIT_BONUS

    # 2. Fragmentation Penalty: Penalize creating small, non-zero remnants.
    # Discourages awkward fragmented space that's hard to fill with items of similar scale.
    if item > EXACT_FIT_THRESHOLD:
        fragment_zone_mask = (potential_remaining_cap > EXACT_FIT_THRESHOLD) & \
                             (potential_remaining_cap <= item)

        if np.any(fragment_zone_mask):
            # Penalty scales with how close the remainder is to the item's size.
            normalized_fragment_rem = potential_remaining_cap[fragment_zone_mask] / item
            penalty = -FRAGMENT_PENALTY_FACTOR * normalized_fragment_rem
            calculated_priorities[fragment_zone_mask] += penalty

    # 3. Strategic Large Remainder Penalty for Small Items:
    # This component discourages placing a very small item into a bin that was largely empty,
    # as it might be more strategic to preserve such near-empty bins for larger items that
    # might arrive later. This introduces a "Worst Fit" like behavior for small items.
    if BIN_CAPACITY > EXACT_FIT_THRESHOLD and item < BIN_CAPACITY * SMALL_ITEM_THRESHOLD_RATIO:
        # Identify bins that would be left with a very large remaining capacity (e.g., > 60% of BIN_CAPACITY)
        # after placing a small item.
        large_remainder_mask = potential_remaining_cap > (0.6 * BIN_CAPACITY) # Tunable threshold

        if np.any(large_remainder_mask):
            # Normalize the remaining capacity by BIN_CAPACITY for these bins.
            # A higher normalized value (closer to 1.0) means the bin is more empty.
            normalized_large_rem = potential_remaining_cap[large_remainder_mask] / BIN_CAPACITY

            # Apply a penalty that increases as the normalized remainder approaches 1.0 (very empty bin).
            # This incentivizes using bins that are already more filled for very small items.
            penalty = -LARGE_REMAINDER_PENALTY_FACTOR * normalized_large_rem
            calculated_priorities[large_remainder_mask] += penalty

    # Assign the calculated priorities to the fitting bins in the main array
    priorities[can_fit_mask] = calculated_priorities

    return priorities
```
