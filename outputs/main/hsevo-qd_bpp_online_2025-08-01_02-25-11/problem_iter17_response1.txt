```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes Best Fit, with significant bonuses for exact fits and penalties for small,
    unusable remainders, and an adaptive bonus for consolidating into already-used bins.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if bins_remain_cap.size == 0:
        return priorities

    # Infer BIN_CAPACITY: Assumes at least one "fresh" bin (with full capacity) is or was available.
    # This is a common practical assumption in online BPP where new bins are full-capacity.
    # Default to 1.0 if all bins are currently empty (edge case, assumes item > 0 for relevance).
    BIN_CAPACITY = np.max(bins_remain_cap)
    if BIN_CAPACITY == 0 and item > 0:
        return priorities # No bin can fit a positive item if all are zero capacity

    # If all bins are 0 cap and item is 0, any bin is a perfect fit, but this is an edge case.
    # Assume BIN_CAPACITY is the known total capacity, or infer from current max.
    # For robustness, if inferred max is 0 (and item > 0), no fit possible.
    # If a problem defines a fixed BIN_CAPACITY, it should be used here.
    # For this exercise, we maintain the inference as in v1, but handle the zero case more explicitly.
    BIN_CAPACITY = BIN_CAPACITY if BIN_CAPACITY > 0 else 1.0 # Ensure it's not zero for calculations

    # 1. Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities # No bin can fit the item, all priorities remain -inf

    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    potential_remaining_cap = fitting_bins_remain_cap - item

    # 2. Base Priority: Best Fit (minimize remaining capacity)
    # A smaller potential_remaining_cap means a tighter fit. Maximize by taking the negative.
    base_priorities_fitting = -potential_remaining_cap

    # 3. Exact Fit Bonus: Significantly reward bins that become exactly full (remaining capacity is zero).
    # This directly incentivizes bin closure, which is critical for minimizing total bins.
    EXACT_FIT_TOLERANCE = 1e-6 # For floating point comparisons
    EXACT_FIT_BONUS_VALUE = 100.0 # A high value to strongly prioritize exact fits
    exact_fit_mask = np.isclose(potential_remaining_cap, 0, atol=EXACT_FIT_TOLERANCE)
    exact_fit_bonus = np.where(exact_fit_mask, EXACT_FIT_BONUS_VALUE, 0.0)

    # 4. Adaptive Fragmentation Penalty: Penalize leaving very small, potentially unusable spaces.
    # This avoids creating "junk" space that's too small for most future items.
    # Penalty applies if remaining capacity is positive but below a small fraction of the item size.
    FRAGMENTATION_THRESHOLD_RATIO = 0.05 # e.g., remaining space < 5% of the item's size
    FRAGMENTATION_PENALTY_VALUE = 50.0 # A significant penalty
    
    # Avoid division by zero if item is 0, though items in BPP are typically > 0
    fragmentation_limit = item * FRAGMENTATION_THRESHOLD_RATIO if item > 0 else 0 

    fragment_mask = (potential_remaining_cap > EXACT_FIT_TOLERANCE) & \
                    (potential_remaining_cap < fragmentation_limit)
    fragmentation_penalty = np.where(fragment_mask, -FRAGMENTATION_PENALTY_VALUE, 0.0)

    # 5. Adaptive Consolidation Bonus: Reward filling already used bins, especially when they are already quite full.
    # This bonus promotes consolidating items into existing, well-utilized bins, but only if they don't lead to fragmentation or exact fit (which has its own bonus).
    current_fullness_fitting = (BIN_CAPACITY - fitting_bins_remain_cap) / BIN_CAPACITY
    HIGH_FULLNESS_THRESHOLD = 0.75 # Only consider bins already at least 75% full
    CONSOLIDATION_BONUS_STRENGTH = 5.0 # A moderate bonus to encourage this behavior

    consolidation_mask = (current_fullness_fitting >= HIGH_FULLNESS_THRESHOLD) & \
                         ~exact_fit_mask & ~fragment_mask # Do not apply if exact fit or fragmented

    consolidation_bonus = np.where(consolidation_mask, 
                                   current_fullness_fitting * CONSOLIDATION_BONUS_STRENGTH, 
                                   0.0)

    # 6. Combine all priority components
    combined_priorities_fitting = base_priorities_fitting + \
                                  exact_fit_bonus + \
                                  fragmentation_penalty + \
                                  consolidation_bonus

    # 7. Assign calculated priorities back to the main priorities array
    priorities[can_fit_mask] = combined_priorities_fitting

    return priorities
```
