```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    bin_capacity: float,
    priority_no_fit: float = -7469923285.667422,
    weight_remaining_cap: float = -0.493607220196141,
    consolidation_bonus: float = 1e-6
) -> np.ndarray:
    """Returns priority for each bin, combining Best Fit with a small consolidation bonus.

    Prioritizes bins that result in the smallest remaining capacity (Best Fit).
    Additionally, a small bonus is applied to already partially-filled bins to encourage their reuse.
    """
    priorities = np.full_like(bins_remain_cap, priority_no_fit, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities # No bin can accommodate the item

    # Calculate the potential remaining capacity if the item is placed
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Apply weight for Best Fit: negative weight prioritizes smaller remaining capacities
    priorities[can_fit_mask] = weight_remaining_cap * potential_remaining_cap

    # Add a small consolidation bonus to bins that are already partially used.
    # A bin is considered "used" if its remaining capacity is less than the full bin capacity.
    # This encourages packing items into existing bins before opening new ones (empty bins).
    is_used_bin_mask = bins_remain_cap[can_fit_mask] < bin_capacity
    priorities[can_fit_mask][is_used_bin_mask] += consolidation_bonus

    return priorities
```
