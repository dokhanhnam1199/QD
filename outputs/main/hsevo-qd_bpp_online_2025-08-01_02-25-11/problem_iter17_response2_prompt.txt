{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation aims for a \"Best Fit\" strategy:\n    It prioritizes bins that, after the item is placed, will have the smallest\n    remaining capacity. This helps to 'tightly pack' items into existing bins,\n    leaving larger capacities open for larger items or reducing fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Find bins where the item can fit\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate remaining capacity if the item were placed in fitting bins\n    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item\n\n    # For fitting bins, we want to maximize the \"tightness\".\n    # A smaller remaining capacity means a tighter fit.\n    # To achieve this with argmax (which finds the maximum priority score),\n    # we can use the negative of the potential_remaining_cap.\n    # E.g., if remainders are [0.1, 0.5, 0.8], their negatives are [-0.1, -0.5, -0.8].\n    # The max of negatives is -0.1, which corresponds to the smallest positive remainder 0.1.\n    priorities[can_fit_mask] = -potential_remaining_cap\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which to add an item to each bin.\n\n    This implementation aims for a \"Target Remainder Fit\" strategy. It seeks to\n    assign an item to a bin such that the bin's remaining capacity after placement\n    is close to a predefined 'ideal' target value. This approach is more adaptive\n    and holistic than a simple Best Fit, as it manages the distribution of\n    remaining bin capacities, potentially leaving more \"useful\" space for\n    future items and promoting a more diverse set of bin states.\n\n    The 'ideal_remainder_ratio' parameter determines the target remaining capacity\n    as a fraction of the total bin capacity. A value of 0.0 would revert to a\n    pure Best Fit (minimizing remaining capacity). A value closer to 1.0 would\n    lean towards Worst Fit (maximizing remaining capacity). A moderate value\n    (e.g., 0.25) attempts to maintain a balanced bin state.\n\n    Assumptions:\n    1. The problem implies a fixed `BIN_CAPACITY` for all bins. Since it's not\n       an explicit argument, we infer it from `bins_remain_cap`. In online BPP,\n       new bins are typically added at full capacity. Therefore, `np.max(bins_remain_cap)`\n       is used as a reasonable proxy for `BIN_CAPACITY`, assuming at least one\n       bin is either empty (full capacity) or has the largest possible remaining capacity.\n       For extreme edge cases (e.g., all bins are almost full and no new empty bin has been opened yet),\n       this inference might be inaccurate, but it's a common practical approach.\n    2. `item` and `bins_remain_cap` values are in consistent units.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each bin.\n        ideal_remainder_ratio: A heuristic parameter (between 0.0 and 1.0)\n                               determining the target remaining capacity as a\n                               fraction of the total bin capacity.\n                               0.0 for Best Fit, ~0.2-0.3 for a more balanced \"middle-fit\".\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate higher priority.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Handle case where no bins are available or bins_remain_cap is empty\n    if bins_remain_cap.size == 0:\n        return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (6th), the best heuristic significantly improves upon a pure \"Best Fit\" by adding an \"Exact Fit Bonus\" and an \"Adaptive Fragmentation Penalty.\" This indicates that actively managing extreme outcomes (perfectly full bins or awkwardly fragmented ones) is more beneficial than just minimizing remaining capacity. The adaptive penalty, which scales with the current item's size, further refines this by making the penalty relevant to the context.\n\nComparing (1st) vs (4th), the 4th heuristic is a basic Best Fit scaled to produce positive scores. The superior performance of the 1st heuristic emphasizes that sophisticated, non-linear adjustments for specific bin states (like exact fits or near-full states) yield better results than merely transforming the linear Best Fit score.\n\nComparing (1st) vs (5th), both attempt consolidation. However, the 1st heuristic's \"Exact Fit Bonus\" and \"Fragmentation Penalty\" directly address the *outcome* of placing an item (filling exactly, or creating problematic remnants). The 5th's \"Consolidation Bonus\" scales with current fullness, but its small weight suggests it's a minor tie-breaker, less impactful than the targeted strategies in the 1st heuristic. This implies that managing final bin states is more critical than simply preferring already-used bins without considering the resulting space quality.\n\nComparing (6th) vs (7th/8th/10th), the simpler \"Best Fit\" (6th) surprisingly performs better than or equal to variants adding a tiny, fixed \"used bin bonus\" (7th/8th/10th). This suggests that a small, constant bonus for used bins isn't sufficiently impactful to consistently improve results beyond a solid Best Fit, or that the specific scenarios it helps with are less frequent or less critical than those addressed by the 1st heuristic.\n\nComparing (6th) vs (9th/11th), a pure \"Best Fit\" (6th) outperforms its slightly parameterized counterpart (9th/11th) which uses a `weight_remaining_cap` parameter. This indicates that merely parameterizing the linear component of Best Fit, or using a sub-optimal parameter value, does not necessarily improve performance over the standard Best Fit. The fixed `-1.0` implicit in pure Best Fit (6th) might already be near-optimal for this component.\n\nComparing (6th) vs (17th/18th/19th/20th), the basic \"Best Fit\" (6th) is significantly better than the \"Target Remainder Fit\" (17th-20th). This implies that, for general Bin Packing, aggressively minimizing the leftover space (Best Fit) is typically superior to trying to maintain a specific \"ideal\" non-zero remainder. The goal is usually to minimize the *number* of bins, which often means filling them as much as possible.\n\nComparing (12th/16th) vs all others, the worst heuristics assign zero priority to all fitting bins, essentially leading to an arbitrary or First Fit choice. This clearly demonstrates that *any* intelligent strategy for bin selection (even a simple Best Fit) is vastly superior to a non-strategic approach.\n- \n*   **Keywords:** Hybrid, Adaptive, Non-linear, State-aware, Space Quality, Bin Completion.\n*   **Advice:** Design heuristics by integrating robust baselines with **adaptive, non-linear rules** that intelligently respond to critical bin states (e.g., exact fits, problematic fragmentation). Strongly incentivize bin completion and focus on the *quality* of remaining space.\n*   **Avoid:** Limiting design to solely monotonic relationships or simple linear bonuses. Do not avoid non-linear transformations or dynamic weighting; embrace them to handle specific state-based challenges. Avoid static, hard-coded \"negative infinity\" penalties.\n*   **Explanation:** Superior heuristic performance arises from dynamic adaptation to problem states. Non-linear, state-dependent rules can capture complex interactions and objectives (like space quality or bin closure) that are missed by overly simplistic or rigidly linear approaches.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}