```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid Best Fit, promoting consolidation, heavily rewarding exact fits,
    and penalizing fragmented small remaining spaces.
    """
    # Heuristic parameters
    CONSOLIDATION_BONUS = 0.01  # Small bonus for using existing, partially filled bins
    PERFECT_FIT_BONUS = 1000.0  # Large bonus for exact or near-exact fits
    NEAR_PERFECT_EPSILON = 1e-6 # Tolerance for near-perfect fit (e.g., due to float precision)
    FRAGMENTATION_THRESHOLD_RATIO = 0.05 # Remainder below this (as % of bin capacity) is tiny
    FRAGMENTATION_PENALTY = 50.0  # Penalty for creating tiny, fragmented space

    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if len(bins_remain_cap) == 0:
        return priorities

    # Infer BIN_CAPACITY: Assumes max remaining capacity represents a full bin.
    # This is a common heuristic for online BPP where new bins are full capacity.
    BIN_CAPACITY = np.max(bins_remain_cap)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities

    # Calculate potential remaining capacity if the item were placed
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Base score: Best Fit - smaller remaining capacity is better (higher score)
    base_scores = -potential_remaining_cap

    # Initialize combined bonuses/penalties for fitting bins
    combined_bonuses_penalties = np.zeros_like(base_scores)

    # 1. Consolidation Bonus: Encourage using existing, partially filled bins
    # A bin is partially filled if its current remaining capacity is less than BIN_CAPACITY.
    is_partially_filled_mask = (bins_remain_cap[can_fit_mask] < BIN_CAPACITY - NEAR_PERFECT_EPSILON)
    combined_bonuses_penalties[is_partially_filled_mask] += CONSOLIDATION_BONUS

    # 2. Perfect/Near-Perfect Fit Bonus: Strongly encourage bin completion
    # Applied if the remaining capacity is 0 or very close to 0.
    is_perfect_fit_mask = (potential_remaining_cap <= NEAR_PERFECT_EPSILON)
    combined_bonuses_penalties[is_perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Fragmentation Penalty: Penalize creating very small, awkward remaining spaces
    # Applied if the remaining capacity is tiny but not zero (i.e., not a perfect fit).
    # Tiny means below a threshold (e.g., 5% of BIN_CAPACITY).
    is_fragmented_remainder_mask = (
        (potential_remaining_cap > NEAR_PERFECT_EPSILON) & # Not a perfect fit
        (potential_remaining_cap < BIN_CAPACITY * FRAGMENTATION_THRESHOLD_RATIO) # Remainder is very small
    )
    combined_bonuses_penalties[is_fragmented_remainder_mask] -= FRAGMENTATION_PENALTY

    # Apply all scores and bonuses/penalties to the fitting bins
    priorities[can_fit_mask] = base_scores + combined_bonuses_penalties

    return priorities
```
