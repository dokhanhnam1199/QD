```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Returns priority for adding item, combining Best Fit with a consolidation bonus.

    Prioritizes bins that result in the smallest remaining capacity (Best Fit).
    Adds a small bonus to already partially-filled bins to encourage consolidation.
    Infeasible bins receive a negative infinity priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The maximum capacity of a single bin. Default to 1.0.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Get remaining capacities for only the bins where the item fits
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # If no bins can fit the item, all priorities remain -inf
    if fitting_bins_remain_cap.size == 0:
        return priorities

    # Calculate potential remaining capacity (Best Fit component)
    potential_remaining_cap = fitting_bins_remain_cap - item

    # Base priority: Maximize the negative of remaining capacity (smaller remaining is better)
    base_priorities = -potential_remaining_cap

    # Consolidation Bonus: A small constant bonus for used bins
    # This encourages filling existing bins before opening new ones
    consolidation_bonus = 1e-6

    # Identify bins that are not "fresh" (i.e., not entirely empty/unused)
    # A bin is considered 'used' if its remaining capacity is strictly less than the full capacity.
    is_used_bin_mask = ~np.isclose(fitting_bins_remain_cap, bin_capacity)

    # Assign base priorities to all bins that can fit the item
    priorities[can_fit_mask] = base_priorities

    # Apply the consolidation bonus to the base priorities for bins that can fit AND are already used
    priorities[can_fit_mask][is_used_bin_mask] += consolidation_bonus

    return priorities
```
