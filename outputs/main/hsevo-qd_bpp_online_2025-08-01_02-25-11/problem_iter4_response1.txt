import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                priority_no_fit: float = -5650440221.755112,
                weight_remaining_cap: float = -2.5041354815876216) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims for a "Best Fit" strategy:
    It prioritizes bins that, after the item is placed, will have the smallest
    remaining capacity. This helps to 'tightly pack' items into existing bins,
    leaving larger capacities open for larger items or reducing fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        priority_no_fit: The priority assigned to bins where the item cannot fit.
                         Default is -np.inf, effectively excluding them.
        weight_remaining_cap: The weight applied to the potential remaining
                              capacity. A negative value (e.g., -1.0 for Best Fit)
                              prioritizes smaller remaining capacities. A positive
                              value would prioritize larger remaining capacities
                              (Worst Fit).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, priority_no_fit, dtype=float)

    # Find bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Apply the weight to the potential remaining capacity.
    # For Best Fit, weight_remaining_cap should be negative.
    priorities[can_fit_mask] = weight_remaining_cap * potential_remaining_cap

    return priorities
