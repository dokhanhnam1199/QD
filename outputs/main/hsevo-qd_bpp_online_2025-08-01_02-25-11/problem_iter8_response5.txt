```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes Best Fit, adding a bonus for partially filled bins to encourage consolidation.
    Assumes fixed-sized bins, typically normalized to a capacity of 1.0.
    """
    # Assuming a standard bin capacity of 1.0. This is typical for normalized BPP
    # and consistent with "fixed-sized bins" in the problem description.
    BIN_CAPACITY = 1.0
    # A consolidation bonus value (0.01) based on empirical analysis,
    # favoring use of existing bins without overriding the Best Fit principle too much.
    CONSOLIDATION_BONUS = 0.01

    # Initialize all priorities to an extremely low value. Bins that cannot fit
    # the item will retain this score and never be selected.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins that have sufficient remaining capacity for the item.
    fits_mask = bins_remain_cap >= item

    # Calculate the Best Fit score for bins where the item can be placed.
    # The score (2 * item - remaining_capacity) maximizes the effective filled
    # capacity. A perfect fit (remaining_capacity becomes 0) yields a score of `item`.
    # Tighter fits result in higher scores.
    priorities[fits_mask] = 2 * item - bins_remain_cap[fits_mask]

    # Identify bins among the fitting ones that are not completely empty (i.e., partially used).
    # These are bins whose current remaining capacity is less than the full bin capacity.
    # This encourages re-using existing bins rather than opening new ones.
    partially_used_mask = bins_remain_cap[fits_mask] < BIN_CAPACITY

    # Apply the consolidation bonus to the Best Fit scores of these partially used bins.
    # This subtly elevates their priority.
    priorities[fits_mask][partially_used_mask] += CONSOLIDATION_BONUS

    return priorities
```
