```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a "Best-Fit Decreasing" strategy by prioritizing
    bins that, after the item is placed, would have the smallest remaining capacity.
    This encourages tightly packed bins, preserving larger spaces for future larger items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher preference for the bin.
    """
    # Calculate the remaining space if the current item were placed in each bin.
    # For a Best-Fit approach, we aim to minimize this value for bins that can fit the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priorities. Bins where the item does not fit should have a very low priority.
    # Using -np.inf ensures these bins are never chosen if any valid option exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify bins where the item can actually fit (remaining capacity >= item size).
    can_fit_mask = potential_remaining_space >= 0

    # For bins where the item fits, the priority should be inversely related to the
    # potential remaining space. A smaller remaining space implies a tighter fit,
    # which is preferred. By taking the negative of the remaining space, a value of 0
    # (perfect fit) yields the highest priority (0), and larger remaining spaces
    # yield more negative (lower) priorities.
    priorities[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priorities
```
