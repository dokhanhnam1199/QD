```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority for each bin using Best Fit and a consolidation bonus.

    Prioritizes bins leaving minimal remaining capacity (Best Fit). Adds a
    bonus for existing partially-filled bins to encourage consolidation.
    Assigns a very low priority to bins where the item cannot fit.
    """
    priority_no_fit: float = -7469923285.667422  # A sufficiently low priority for unfitting bins
    used_bin_bonus: float = 1e-6                # Small bonus for partially-filled bins (as per analysis)
    
    # Initialize all priorities to a very low value, effectively disqualifying unfitting bins
    priorities = np.full_like(bins_remain_cap, priority_no_fit, dtype=float)

    # Identify bins where the item can physically fit
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item can fit, calculate the potential remaining capacity
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Apply the Best Fit principle: smaller remaining capacity yields a higher priority.
    # This is achieved by taking the negative of the potential remaining capacity.
    priorities[can_fit_mask] = -potential_remaining_cap

    # Identify bins that are currently "used" (i.e., not entirely empty/fresh).
    # We assume a bin is used if its remaining capacity is less than its initial total capacity.
    # A small epsilon is used for floating-point comparison robustness.
    is_used_bin_mask = bins_remain_cap < bin_capacity - 1e-9

    # Apply the consolidation bonus: if a bin can fit the item AND it's already used,
    # increase its priority slightly. This encourages filling existing bins before opening new ones.
    bonus_eligible_mask = can_fit_mask & is_used_bin_mask
    priorities[bonus_eligible_mask] += used_bin_bonus

    return priorities
```
