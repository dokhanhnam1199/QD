```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic embodies the principle of 'Best Fit', much like
    the cosmos finds the most fitting orbit for its celestial bodies.
    It prioritizes bins that will have the smallest remaining capacity
    after the item is placed, thus 'snugly' fitting items and
    preserving larger capacities for future celestial bodies.
    Bins that cannot accommodate the item are given an infinitely low priority,
    as they are not viable 'orbits' for the new 'planet'.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # We seek the bin that will be most 'filled' without overflowing.
    potential_remaining_capacity = bins_remain_cap - item

    # Initialize priority scores for all bins.
    # By default, all bins are deemed infinitely unsuitable until proven otherwise.
    priority_scores = np.full_like(bins_remain_cap, np.NINF, dtype=float)

    # A mask to identify only those bins where the item can actually fit
    # (i.e., where potential remaining capacity is non-negative).
    can_fit_mask = potential_remaining_capacity >= 0

    # For those bins where the item can be accommodated, we assign a priority.
    # The Best Fit strategy aims to minimize the remaining capacity after placement.
    # To convert this 'minimization' goal into a 'maximization' priority score,
    # we take the negative of the potential remaining capacity.
    # Thus, a smaller positive remaining capacity (e.g., 0.1) results in a larger
    # (less negative, closer to zero) priority score (e.g., -0.1), making it
    # the preferred choice when seeking the maximum priority.
    priority_scores[can_fit_mask] = -potential_remaining_capacity[can_fit_mask]

    return priority_scores
```
