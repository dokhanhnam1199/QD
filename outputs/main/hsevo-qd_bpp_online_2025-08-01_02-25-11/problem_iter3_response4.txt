```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation combines a "Best Fit" strategy with a "Worst Fit"
    tie-breaking rule to offer a nuanced selection process.

    Primary objective (Best Fit):
    It prioritizes bins that, after the item is placed, will have the smallest
    remaining capacity. This helps to 'tightly pack' items into existing bins,
    maximizing the utilization of individual bins. This is achieved by maximizing
    the negative of the potential remaining capacity.

    Secondary objective (Worst Fit Tie-breaker):
    If multiple bins yield the exact same minimal remaining capacity after
    placing the item (i.e., they are equally "Best Fit" candidates), this rule
    prefers the bin that had a *larger* remaining capacity before the item was
    placed. This effectively means that among equally good tight fits, the
    heuristic slightly favors using a bin that was "less full" (had more space).
    The rationale is to potentially keep smaller, already tighter bins available
    for future items that might fit them even more perfectly, or to spread items
    more evenly across bins that offer identical best-fit opportunities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with a priority score for each bin.
        The bin with the highest priority score will be selected.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # --- Primary Objective Score (Dominant) ---
    # We want to minimize potential_remaining_cap, so we maximize its negative.
    # A smaller remaining capacity results in a higher (less negative) primary score.
    primary_score = -potential_remaining_cap

    # --- Secondary Objective Score (Tie-breaker) ---
    # For bins that yield the same primary_score, we want to favor the one
    # that initially had a larger remaining capacity.
    # A small positive epsilon ensures this only acts as a tie-breaker,
    # without significantly altering the primary Best Fit order.
    epsilon = 1e-6  # A small positive constant. Make it smaller if needed for stricter dominance.
    secondary_score = bins_remain_cap[can_fit_mask] * epsilon

    # Combine scores: primary objective dominates, secondary breaks ties.
    # The sum ensures that if primary_score values are different, the secondary_score
    # is too small to change the order determined by the primary.
    # If primary_score values are identical, the secondary_score effectively ranks them.
    priorities[can_fit_mask] = primary_score + secondary_score

    return priorities
```
