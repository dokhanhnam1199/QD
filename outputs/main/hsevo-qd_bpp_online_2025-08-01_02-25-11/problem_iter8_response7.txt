```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with a consolidation bonus for partially filled bins.

    Prioritizes tight fits (Best Fit) and adds a bonus to existing, partially
    filled bins to reduce opening new ones.
    """
    # Initialize all priorities to an extremely low value, ensuring bins that cannot
    # accommodate the item are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # 1. Calculate Best Fit scores for all bins that can fit the item.
    # The scoring `2 * item - bins_remain_cap` inherently maximizes the filled
    # capacity relative to the item, acting as a Best Fit mechanism.
    fits_mask = bins_remain_cap >= item
    priorities[fits_mask] = 2 * item - bins_remain_cap[fits_mask]

    # 2. Add a Consolidation Bonus to partially filled, existing bins.
    # This encourages reusing bins and reducing the total number of bins opened.
    # The bonus magnitude (0.01) is chosen based on analysis showing its effectiveness.
    CONSOLIDATION_BONUS = 0.01

    # Infer the maximum possible bin capacity from the current bins_remain_cap array.
    # This assumes that if an empty bin (at its full capacity) is available, its
    # capacity is represented as the maximum value in the array.
    # This approach aligns with successful heuristics mentioned in the analysis.
    if bins_remain_cap.size > 0:
        inferred_max_bin_capacity = np.max(bins_remain_cap)
    else:
        # If no bins exist, no item can be placed; return the initialized empty priorities.
        return priorities

    # Identify "partially filled" bins. These are bins whose remaining capacity
    # is less than the inferred maximum capacity (meaning they've been used).
    # np.isclose is used for robust floating-point comparison.
    is_partially_filled_mask = ~np.isclose(bins_remain_cap, inferred_max_bin_capacity)

    # Apply the consolidation bonus to bins that both fit the item AND are
    # identified as partially filled. This boosts their priority slightly.
    bonus_eligible_mask = fits_mask & is_partially_filled_mask
    priorities[bonus_eligible_mask] += CONSOLIDATION_BONUS

    return priorities
```
