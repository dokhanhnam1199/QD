```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Returns priority for bin selection, combining Best Fit with a consolidation bonus.

    Prioritizes bins that offer the tightest fit, adding a small bonus for
    partially-filled bins to encourage consolidation and reduce new bin openings.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # 1. Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Get remaining capacities for only the bins that can fit the item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    if fitting_bins_remain_cap.size == 0:
        return priorities # No bin can fit the item, return all -inf priorities

    # 2. Calculate potential remaining capacity if item were placed in fitting bins
    potential_remaining_cap = fitting_bins_remain_cap - item

    # 3. Base priority: Best Fit strategy (minimize remaining capacity)
    # A smaller potential_remaining_cap (closer to 0) means a tighter fit,
    # which is preferred. By taking the negative, we convert minimization
    # to maximization for `np.argmax`. A perfect fit (0 remaining) gets a 0 score here.
    base_priorities_for_fitting_bins = -potential_remaining_cap

    # 4. Consolidation Bonus: Add a small bonus for choosing an already used bin.
    # This encourages filling existing bins before opening new ones, potentially saving bins.
    # The value (e.g., 1e-6) should be small enough not to override a significantly
    # better "Best Fit" (i.e., a much smaller potential_remaining_cap difference),
    # but large enough to break ties or influence decisions when Best Fit scores are very close.
    used_bin_bonus = 1e-6

    # Identify bins that are 'used' (i.e., not entirely empty/fresh).
    # A bin is considered 'used' if its remaining capacity is strictly less than the full bin_capacity.
    # Using np.isclose for robustness against floating-point inaccuracies when comparing to bin_capacity.
    is_used_bin_mask = ~np.isclose(fitting_bins_remain_cap, bin_capacity)

    # Apply the bonus only to bins that can fit the item AND are already used.
    # This modifies the base priorities for the subset of fitting bins.
    base_priorities_for_fitting_bins[is_used_bin_mask] += used_bin_bonus

    # Assign the calculated priorities back to the main priorities array for the fitting bins
    priorities[can_fit_mask] = base_priorities_for_fitting_bins

    return priorities
```
