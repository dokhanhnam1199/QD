```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Applies Best Fit heuristic, prioritizing bins with minimal remaining capacity after item placement.
    Ensures robustness by excluding infeasible bins with low priority, adhering to transparent and efficient design principles.
    """
    # Initialize priorities with an infinitely low value for all bins.
    # This robustly handles infeasibility, ensuring bins incapable of holding the item are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    # This step promotes efficiency by avoiding calculations for bins that are too small.
    can_fit_mask = bins_remain_cap >= item

    # For accessible bins, calculate the hypothetical remaining space.
    # This forms the basis for the Best Fit principle.
    potential_remaining_space = bins_remain_cap[can_fit_mask] - item

    # Prioritize based on the negative of the remaining space.
    # A smaller positive remaining space (tighter fit) results in a higher priority score,
    # adhering to a clear, monotonic objective function for optimal packing.
    priorities[can_fit_mask] = -potential_remaining_space

    return priorities
```
