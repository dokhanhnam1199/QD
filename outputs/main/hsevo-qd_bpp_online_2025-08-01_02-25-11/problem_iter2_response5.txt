```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for online Bin Packing using a robust Best Fit strategy.

    Prioritizes bins that will have the smallest remaining capacity after fitting
    the item, ensuring tight packing. Non-fitting bins receive the lowest priority.
    """
    # Initialize all priorities to negative infinity. This ensures that bins
    # where the item cannot fit are automatically given the lowest possible priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify only those bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the potential remaining capacity for the bins where the item fits.
    # This calculation is performed only on the relevant subset for efficiency and clarity,
    # avoiding calculations on bins that are already full or too small.
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # For fitting bins, assign priority based on the negative of the potential remaining capacity.
    # A smaller remaining capacity (tighter fit) results in a larger (less negative) priority score.
    # This method is preferred over inverse functions (e.g., 1/x) as it avoids epsilon issues
    # and provides a clear linear gradient for selection, aligning with "Best Fit".
    priorities[can_fit_mask] = -potential_remaining_cap

    return priorities
```
