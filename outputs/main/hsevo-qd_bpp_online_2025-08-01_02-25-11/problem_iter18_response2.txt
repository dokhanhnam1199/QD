```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic combines a robust "Best Fit" strategy with
    adaptive, non-linear components for "Bin Completion" and
    "Optimized Space Quality." It aims to minimize bin count by
    strongly incentivizing exact fits and by intelligently penalizing
    the creation of difficult-to-fill, fragmented spaces.

    The priority calculation is composed of:
    1.  **Best Fit Core:** Prioritizes bins that result in the smallest
        remaining capacity after the item is placed (`-potential_remaining_cap`).
        This is the foundational linear component.
    2.  **Exact Fit Bonus (Non-linear & Discrete):** Provides a substantial,
        discrete bonus for bins where the item fits perfectly, leading to zero
        remaining capacity. This aggressively promotes bin closure.
    3.  **Near-Exact Fit Boost (Non-linear & Adaptive):** A decaying bonus
        applied to very small, non-zero remaining capacities. This smooths
        the transition from exact fits and offers a secondary preference for
        bins that are almost perfectly filled, acknowledging that slightly-off
        fits are still highly valuable if the remainder is tiny. The decay
        rate ensures that this bonus quickly diminishes as the remainder grows.
    4.  **Strategic Fragmentation Penalty (Non-linear & Adaptive):** Applies a
        significant penalty to bins that, after placing the item, would be left
        with "awkward" remaining capacities. This penalty is most severe for
        remainders just above the "near-exact fit" zone and gradually decreases
        as the remainder size approaches the current `item`'s size (or a multiple thereof).
        The non-linear penalty curve (controlled by `FRAGMENT_PENALTY_POWER`) is
        designed to strongly discourage the creation of mid-sized, difficult-to-use
        fragments, prioritizing either near-perfect fits or large, versatile remaining spaces.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Tunable Constants
    EXACT_FIT_TOLERANCE = 1e-9  # Tolerance for floating point comparisons to zero
    EXACT_FIT_BONUS = 1000.0    # A large bonus to ensure exact fits are top priority

    # Parameters for Near-Exact Fit Boost
    NEAR_FIT_THRESHOLD_ABS = 0.02 # Absolute threshold for 'near exact fit' zone (e.g., 2% of bin capacity, or small abs value)
    NEAR_FIT_BONUS_FACTOR = 50.0  # Multiplier for the exponential bonus
    NEAR_FIT_DECAY_RATE = 200.0   # Controls how fast the near-fit bonus decays. Higher = faster decay.

    # Parameters for Strategic Fragmentation Penalty
    # This zone applies penalty when remainder is greater than NEAR_FIT_THRESHOLD_ABS
    # and up to FRAGMENT_ZONE_RELATIVE_MAX * item.
    FRAGMENT_ZONE_RELATIVE_MAX = 1.0 # Max remainder relative to current item's size for penalty (e.g., item * 1.0)
    FRAGMENT_PENALTY_FACTOR = 50.0   # Overall strength of the fragmentation penalty
    FRAGMENT_PENALTY_POWER = 2.0     # Exponent for non-linear fragmentation penalty (higher = steeper penalty near small fragments)

    # Mask for bins where the item can fit (capacity >= item size)
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return priorities initialized to -inf
    if not np.any(can_fit_mask):
        return priorities

    # Extract capacities for only the fitting bins
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate potential remaining capacity if the item were placed
    potential_remaining_cap = fitting_bins_remain_cap - item

    # --- Core Priority Calculation (Best Fit component) ---
    # We negate the potential remaining capacity so that a smaller remainder
    # results in a higher (less negative) priority score.
    base_scores = -potential_remaining_cap

    # --- Hybrid/Non-linear/Adaptive Components ---

    # 1. Exact Fit Bonus: A strong, discrete non-linear bonus for perfect fits.
    exact_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EXACT_FIT_TOLERANCE)
    base_scores[exact_fit_mask] += EXACT_FIT_BONUS

    # Apply additional scores/penalties for non-exact fits
    non_exact_mask = ~exact_fit_mask
    if np.any(non_exact_mask):
        non_exact_rem_cap = potential_remaining_cap[non_exact_mask]

        # 2. Near-Exact Fit Boost: Decaying bonus for very small non-zero remainders.
        # This smooths the transition from a perfect fit and incentivizes "almost perfect" fits.
        # The bonus decays rapidly as the remainder moves away from zero.
        near_fit_mask = (non_exact_rem_cap > EXACT_FIT_TOLERANCE) & \
                        (non_exact_rem_cap <= NEAR_FIT_THRESHOLD_ABS)
        if np.any(near_fit_mask):
            # The bonus decays exponentially as remainder increases from 0.
            # Using np.exp for a strong non-linear decay.
            near_fit_bonus = NEAR_FIT_BONUS_FACTOR * np.exp(-NEAR_FIT_DECAY_RATE * non_exact_rem_cap[near_fit_mask])
            base_scores[non_exact_mask][near_fit_mask] += near_fit_bonus

        # 3. Strategic Fragmentation Penalty: Penalize "awkward" non-zero remnants.
        # This aims to avoid spaces that are too small to be useful for large items
        # but too large to be considered an "exact fit" or "near fit."
        # The penalty zone extends up to a multiple of the current item's size.
        # Apply penalty only if the current item size is positive to avoid division by zero.
        if item > EXACT_FIT_TOLERANCE:
            fragment_zone_upper_bound = item * FRAGMENT_ZONE_RELATIVE_MAX
            # The fragmentation penalty applies to remainders that are:
            # - Greater than the near-fit threshold (not an "almost perfect" fit)
            # - And within the defined fragmentation zone relative to the item size
            fragment_mask = (non_exact_rem_cap > NEAR_FIT_THRESHOLD_ABS) & \
                            (non_exact_rem_cap <= fragment_zone_upper_bound)

            if np.any(fragment_mask):
                # Normalize the remainder within the fragment zone, clipping to [0,1] for robustness.
                # A smaller normalized value means the remainder is closer to 0 (more problematic in this zone).
                normalized_fragment_rem = np.clip(
                    non_exact_rem_cap[fragment_mask] / fragment_zone_upper_bound,
                    0.0, 1.0
                )

                # Apply a non-linear penalty. The (1 - normalized_fragment_rem)^POWER
                # makes the penalty strongest when normalized_fragment_rem is small (near 0,
                # i.e., remainder is just above near-fit threshold) and weakest as it approaches 1
                # (i.e., remainder is close to `item * FRAGMENT_ZONE_RELATIVE_MAX`).
                penalty = -FRAGMENT_PENALTY_FACTOR * (1.0 - normalized_fragment_rem) ** FRAGMENT_PENALTY_POWER
                base_scores[non_exact_mask][fragment_mask] += penalty

    # Assign the calculated priorities to the fitting bins in the main array
    priorities[can_fit_mask] = base_scores

    return priorities
```
