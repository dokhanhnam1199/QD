```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a Best Fit approach with a significant exact-fit bonus.

    Aims to fill bins as much as possible, strongly preferring exact fits to close bins.
    Avoids trying to maintain a specific non-zero target remainder, addressing analysis insights.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if bins_remain_cap.size == 0:
        return priorities

    # Mask for bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities # No bin can fit the item

    # Calculate potential remaining capacity if item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Base priority: Best Fit (minimize remaining capacity)
    # A smaller potential_remaining_cap results in a higher (less negative) score,
    # thus prioritizing bins that will be more full.
    base_scores = -potential_remaining_cap

    # Exact Fit Bonus: Add a large bonus for bins that would be exactly filled.
    # This strongly incentivizes closing bins, a key factor for good performance.
    EPSILON = 1e-6 # Tolerance for floating-point comparisons
    exact_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EPSILON)

    # Determine a robust bonus value. It should be large enough to ensure an exact fit
    # always yields a higher priority than any non-exact fit.
    # Inferring BIN_CAPACITY from max remaining cap is a common heuristic in online BPP.
    max_rem_cap_overall = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 0.0
    # The bonus must be greater than the maximum possible negative base_score (-BIN_CAPACITY)
    # to guarantee exact fits are chosen. A simple BIN_CAPACITY + 1 works.
    EXACT_FIT_BONUS = max_rem_cap_overall + 1.0 if max_rem_cap_overall > 0 else 1.0

    # Apply the exact fit bonus
    scores_for_fitting_bins = base_scores
    scores_for_fitting_bins[exact_fit_mask] += EXACT_FIT_BONUS

    # Assign calculated scores to the fitting bins
    priorities[can_fit_mask] = scores_for_fitting_bins

    return priorities
```
