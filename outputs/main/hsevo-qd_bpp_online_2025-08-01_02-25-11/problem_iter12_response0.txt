```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation introduces a "Dual-Goal Fit" strategy, aiming for a
    more adaptive and holistic bin packing approach compared to a pure Best Fit.
    It recognizes that efficient packing can involve two types of desirable bin states:
    1.  **Consolidated Bins:** Bins that are nearly full (leaving very little remaining capacity).
        This reduces the number of open bins and minimizes small, hard-to-fill gaps.
    2.  **Flexible Bins:** Bins that remain largely empty (leaving a substantial remaining capacity,
        ideally close to the original bin size). This preserves large contiguous space for future,
        potentially large, items, promoting flexibility and reducing fragmentation for mid-sized items.

    The heuristic assigns a high priority to bins that, after the item is placed,
    fall into either of these two categories, while implicitly penalizing bins that
    end up with a 'mid-range' remaining capacity, which can often lead to fragmentation
    and inefficient utilization. This approach encourages "exploration" of different
    bin states beyond just the immediately tightest fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities # No bins can fit the item

    # Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # --- Crucial Assumption: BIN_SIZE ---
    # For this strategy, knowing the total capacity of a bin (BIN_SIZE) is essential
    # to evaluate 'how empty' a bin is relative to its full capacity.
    # In many BPP contexts, items and bins are normalized such that BIN_SIZE = 1.0.
    # If not normalized, this value should ideally be passed as an argument.
    # As it's not in the function signature, we assume a common normalized value or
    # infer it from the largest initial bin capacity (if a fresh bin is always available).
    # For robustness, we assume a standard normalized BIN_SIZE.
    ASSUMED_BIN_SIZE = 1.0
    # A more dynamic (but potentially fragile) BIN_SIZE inference:
    # if bins_remain_cap.size > 0:
    #     # Assumes at least one bin is initially empty or fully available
    #     ASSUMED_BIN_SIZE = bins_remain_cap.max()
    # else:
    #     ASSUMED_BIN_SIZE = 1.0 # Default if no bins yet or cannot infer

    # Heuristic parameters (tuned for common scenarios; can be adjusted)
    # Alpha controls the steepness of the preference for consolidation (small remaining capacity).
    # A higher alpha means a stronger preference for very tight fits.
    alpha = 50.0

    # Beta controls the steepness of the preference for flexibility (large remaining capacity).
    # A higher beta means a stronger preference for leaving bins almost empty again.
    beta = 10.0

    # Component 1: Score for Consolidation (Best Fit aspect)
    # Rewards bins where potential_remaining_cap is very close to 0.
    # Uses an exponential decay: score is high when remaining capacity is small, drops quickly.
    score_consolidation = np.exp(-alpha * potential_remaining_cap)

    # Component 2: Score for Flexibility (Worst Fit / Open-Space aspect)
    # Rewards bins where potential_remaining_cap is very close to ASSUMED_BIN_SIZE.
    # This means the item fills a very small portion, leaving the bin largely open.
    # The term (ASSUMED_BIN_SIZE - potential_remaining_cap) is small when potential_remaining_cap is large.
    score_flexibility = np.exp(-beta * (ASSUMED_BIN_SIZE - potential_remaining_cap))

    # Combine the scores: The total priority is the sum of the consolidation and flexibility scores.
    # This allows a bin to be prioritized if it's good for EITHER consolidating OR providing flexibility.
    # This promotes a more diverse set of bin states.
    priorities[can_fit_mask] = score_consolidation + score_flexibility

    return priorities
```
