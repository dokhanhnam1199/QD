```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_CAPACITY: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims for a "Best Fit" strategy with adaptive, non-linear
    modifications, moving beyond a simple monotonic relationship. It incorporates:

    1.  **Base Best Fit:** Prioritizes bins that, after the item is placed, will have
        the smallest remaining capacity (core Best Fit principle, leading to tight packing).
    2.  **Perfect Fit Bonus (Non-linear Reward):** Provides a significant positive bonus
        if placing the item results in exactly 0 remaining capacity. This aggressively
        encourages the complete filling of bins, which is a highly desirable outcome in BPP.
        This introduces a sharp, non-linear jump in priority for perfect fits.
    3.  **Small Gap Penalty (Adaptive Discouragement):** Applies a penalty to bins that
        would be left with a very small, non-zero, potentially unusable remaining capacity
        (often referred to as "dead space"). This discourages creating fragments that are
        too small for most subsequent items, implicitly guiding the packing towards
        leaving larger, more useful gaps or fully utilizing bins. This is an adaptive
        component, reacting to the specific outcome of the placement.

    The parameters (bonuses, penalties, thresholds) are relative to `BIN_CAPACITY`
    to make the heuristic more robust across different scaling of item/bin sizes.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.
        BIN_CAPACITY: The total capacity of a single bin. Defaulting to 1.0,
                      as it's common practice to normalize item and bin sizes in BPP.
                      This parameter allows the heuristic to adapt its thresholds
                      and bonuses/penalties proportionally to the bin size.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins where the item cannot fit will have a priority of -inf.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return the default negative infinities.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate potential remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # --- Base Best Fit Priority ---
    # We want to maximize priority. A smaller remaining capacity means a tighter fit.
    # So, we use the negative of the remaining capacity.
    # Example: remaining [0.1, 0.5] -> priorities [-0.1, -0.5]. Max (-0.1) implies 0.1 remaining.
    priorities[can_fit_mask] = -potential_remaining_cap

    # Define constants for adaptive components, scaled by BIN_CAPACITY for robustness
    # A small epsilon for floating point comparisons to identify 'exact' zero.
    EPSILON = 1e-9 * BIN_CAPACITY

    # The bonus for a perfect fit. Should be significantly larger than typical
    # differences in remaining capacities to ensure perfect fits are highly preferred.
    PERFECT_FIT_BONUS = 2.0 * BIN_CAPACITY

    # Threshold for what constitutes a "small gap". E.g., 5% of bin capacity.
    # This value might need tuning based on the distribution of item sizes.
    SMALL_GAP_THRESHOLD_RATIO = 0.05
    SMALL_GAP_THRESHOLD = SMALL_GAP_THRESHOLD_RATIO * BIN_CAPACITY

    # The penalty for creating a small, potentially unusable gap.
    # Should be large enough to make these options less attractive than leaving
    # a larger, more useful gap, but not necessarily override a good Best Fit
    # if no perfect fit is available.
    SMALL_GAP_PENALTY = 0.5 * BIN_CAPACITY

    # --- Adaptive Component 1: Perfect Fit Bonus ---
    # Identify bins where placing the item results in an exact (or very close to) zero remainder.
    perfect_fit_mask = np.abs(potential_remaining_cap) < EPSILON
    priorities[can_fit_mask][perfect_fit_mask] += PERFECT_FIT_BONUS

    # --- Adaptive Component 2: Small Gap Penalty ---
    # Identify bins where placing the item results in a small, non-zero gap.
    # We exclude perfect fits (handled by `potential_remaining_cap > EPSILON`).
    small_gap_mask = (potential_remaining_cap > EPSILON) & \
                     (potential_remaining_cap < SMALL_GAP_THRESHOLD)
    priorities[can_fit_mask][small_gap_mask] -= SMALL_GAP_PENALTY

    return priorities
```
