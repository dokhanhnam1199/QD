import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                no_fit_priority: float = -389089019.301432,
                tightness_weight: float = 7.422140654004934) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims for a "Best Fit" strategy:
    It prioritizes bins that, after the item is placed, will have the smallest
    remaining capacity. This helps to 'tightly pack' items into existing bins,
    leaving larger capacities open for larger items or reducing fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        no_fit_priority: The priority score assigned to bins where the item cannot fit.
                         Should be a very low value to ensure these bins are not selected.
        tightness_weight: A weight applied to the remaining capacity to determine priority.
                          A negative value (e.g., -1.0) prioritizes smaller remaining capacity
                          (tighter fit). A positive value (e.g., 1.0) would prioritize larger
                          remaining capacity (looser fit). A value of 0 would give equal
                          priority to all fitting bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, no_fit_priority, dtype=float)

    # Find bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Apply the tightness_weight.
    # If tightness_weight is negative, smaller potential_remaining_cap yields higher priority.
    # If tightness_weight is positive, larger potential_remaining_cap yields higher priority.
    priorities[can_fit_mask] = tightness_weight * potential_remaining_cap

    return priorities
