```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims for a "Worst Fit" strategy:
    It prioritizes bins that, after the item is placed, will have the largest
    remaining capacity. This strategy deviates from Best Fit by attempting to
    keep some bins very 'open' or nearly empty, preserving large contiguous
    spaces for potentially larger items that may arrive later. Conversely, it
    tends to fill up a few bins completely and leave others largely untouched,
    rather than fragmenting space across many bins.

    This approach can be "better" in scenarios where the item stream contains
    a mix of small and large items, as it helps prevent large items from
    being forced into many partially filled bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can physically fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity for bins where the item could be placed
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # For fitting bins, the Worst Fit strategy assigns higher priority to bins
    # that would result in a larger amount of remaining capacity.
    # By directly using 'potential_remaining_cap' as the priority score,
    # np.argmax (which finds the maximum priority) will select the bin
    # that leaves the most space.
    priorities[can_fit_mask] = potential_remaining_cap

    return priorities
```
