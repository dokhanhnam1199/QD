```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Prioritizes bins that result in the smallest remaining capacity (Best Fit).
    Adds a small bonus to bins already partially filled to encourage consolidation.
    """
    # A very low priority for bins where the item does not fit.
    priority_no_fit: float = -7469923285.667422 
    # Small positive bonus to apply to bins that are already in use (not completely empty).
    used_bin_bonus: float = 1e-6

    # Initialize all priorities to a very low value, effectively excluding non-fitting bins.
    priorities = np.full_like(bins_remain_cap, priority_no_fit, dtype=float)

    # Mask to identify bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate potential remaining capacity if the item were placed.
    # This is the core of the Best Fit strategy.
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Assign base priority for fitting bins: smaller remaining capacity yields higher priority (less negative score).
    priorities[can_fit_mask] = -potential_remaining_cap

    # Mask to identify bins that are already partially filled (i.e., not at their full capacity).
    is_partially_filled_mask = bins_remain_cap < bin_capacity

    # Combine masks: apply the bonus only to bins that can fit the item AND are already partially filled.
    consolidation_mask = can_fit_mask & is_partially_filled_mask
    
    # Add the bonus to encourage reusing existing bins.
    priorities[consolidation_mask] += used_bin_bonus

    return priorities
```
