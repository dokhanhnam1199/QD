```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for 'Best Fit' by maximizing the effective filled capacity.

    Prioritizes bins that achieve the highest fill level after placing the item,
    yielding positive scores for valid fits and penalizing impossible ones.
    """
    # Initialize all priorities to an extremely low value, ensuring bins that cannot
    # accommodate the item are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify which bins possess sufficient remaining capacity for the item.
    fits_mask = bins_remain_cap >= item

    # For bins where the item demonstrably fits, calculate a priority score.
    # This score, 2 * item - bins_remain_cap[fits_mask], maximizes the resulting
    # effective filled capacity relative to the item's size. A perfect fit
    # (where the bin's remaining capacity becomes zero) yields the highest positive
    # score (equal to `item`), while less efficient fits yield lower positive scores.
    # This combines the efficiency of masking first with a positive-scaled Best Fit score.
    priorities[fits_mask] = 2 * item - bins_remain_cap[fits_mask]

    return priorities
```
