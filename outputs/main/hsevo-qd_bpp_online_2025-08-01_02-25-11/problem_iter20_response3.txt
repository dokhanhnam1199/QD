```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using Best Fit, strong exact-fit bonus,
    Gaussian fragmentation penalty, large space bonus, and consolidation.
    """

    # Heuristic parameters (tuned based on 'Analyze & experience' insights)
    # 1. Exact/Near-Exact Fit Bonus: Aggressively incentivizes nearly filling a bin.
    EXACT_FIT_MAGNITUDE = 5000.0
    EXACT_FIT_DECAY = 50.0  # Controls how sharply the bonus drops with increasing remainder
    EXACT_FIT_THRESHOLD_RATIO = 0.05 # Max new_remainder / item size for bonus consideration

    # 2. Fragmentation Penalty (Gaussian 'Valley of Despair'): Penalizes leaving awkward-sized gaps.
    FRAG_MAGNITUDE = 1000.0
    FRAG_TARGET_RATIO = 0.4  # Target new_remainder / item size for peak penalty
    FRAG_SIGMA_RATIO = 0.1   # Controls the width of the penalty valley

    # 3. Quality of Large Remaining Space Bonus: Encourages leaving large, useful empty spaces.
    LARGE_SPACE_BONUS_FACTOR = 0.1
    LARGE_SPACE_THRESHOLD_RATIO = 0.6 # Min new_remainder / item size for bonus consideration

    # 4. Consolidation Bonus: A small incentive to prefer existing, partially filled bins.
    # Assumes np.max(bins_remain_cap) represents the full capacity of an empty bin if one exists.
    CONSOLIDATION_BONUS = 0.01

    # Initialize all priorities to an extremely low value, ensuring bins that cannot
    # accommodate the item are never selected. Use float64 for numerical stability.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Identify which bins possess sufficient remaining capacity for the item.
    fits_mask = bins_remain_cap >= item

    if not np.any(fits_mask):
        # If no bin can accommodate the item, return the initialized priorities (all -inf).
        return priorities

    # Get remaining capacities for bins where the item fits
    fitting_bins_remain_cap = bins_remain_cap[fits_mask]

    # Calculate the remaining capacity in the bin after placing the item
    new_remainder = fitting_bins_remain_cap - item

    # 1. Base Best Fit score: Prioritizes bins that result in the smallest remaining capacity.
    # This is equivalent to `2 * item - fitting_bins_remain_cap` as in `priority_v0`.
    base_score = item - new_remainder

    # Initialize component scores for fitting bins to zero
    exact_fit_bonus = np.zeros_like(new_remainder)
    fragmentation_penalty = np.zeros_like(new_remainder)
    large_space_bonus = np.zeros_like(new_remainder)
    consolidation_bonus = np.zeros_like(new_remainder)

    # 2. Apply Exact/Near-Exact Fit Bonus
    # A strong exponential bonus if the new remainder is very small, encouraging bin closure.
    is_near_exact = (new_remainder <= item * EXACT_FIT_THRESHOLD_RATIO) & (new_remainder >= 0)
    exact_fit_bonus[is_near_exact] = EXACT_FIT_MAGNITUDE * np.exp(-EXACT_FIT_DECAY * new_remainder[is_near_exact])

    # 3. Apply Fragmentation Penalty (Gaussian 'Valley of Despair')
    # Penalizes leaving an 'awkward' amount of space, peaking at `FRAG_TARGET_RATIO * item`.
    frag_target = FRAG_TARGET_RATIO * item
    frag_sigma = FRAG_SIGMA_RATIO * item
    # Avoid division by zero if item or sigma is zero.
    if frag_sigma > 1e-9:
        fragmentation_penalty = -FRAG_MAGNITUDE * np.exp(-((new_remainder - frag_target)**2) / (2 * frag_sigma**2))

    # 4. Apply Quality of Large Remaining Space Bonus
    # Rewards leaving large, useful empty space. Uses linear scaling based on item size.
    is_large_space = (new_remainder >= item * LARGE_SPACE_THRESHOLD_RATIO)
    # Ensure item is not zero to prevent division by zero for the bonus calculation.
    if item > 1e-9:
        large_space_bonus[is_large_space] = LARGE_SPACE_BONUS_FACTOR * (new_remainder[is_large_space] / item)

    # 5. Apply Consolidation Bonus
    # Gives a small constant bonus to bins that are already partially filled, encouraging reuse.
    if bins_remain_cap.size > 0: # Ensure there are bins to check max capacity
        # Assume the maximum value in `bins_remain_cap` represents the full capacity of an empty bin.
        max_possible_capacity = np.max(bins_remain_cap)
        # Apply bonus if the bin's current remaining capacity is less than the max possible (i.e., it's not empty).
        is_not_empty = (fitting_bins_remain_cap < max_possible_capacity)
        consolidation_bonus[is_not_empty] = CONSOLIDATION_BONUS

    # Combine all scores to get the final priority for fitting bins.
    combined_scores = base_score + exact_fit_bonus + fragmentation_penalty + large_space_bonus + consolidation_bonus

    # Assign combined scores to the appropriate bins in the full priorities array.
    priorities[fits_mask] = combined_scores

    return priorities
```
