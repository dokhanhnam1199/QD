```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                total_bin_capacity: float = 1.0,
                priority_no_fit: float = -np.inf,
                used_bin_bonus: float = 1e-6) -> np.ndarray:
    """Combines Best Fit with a consolidation bonus for online Bin Packing.

    Prioritizes bins that result in smallest remaining capacity (Best Fit) and
    adds a bonus for bins that are already partially filled, encouraging reuse.
    Infeasible bins receive a very low priority.
    """
    # Initialize all priorities to a very low value, effectively excluding bins where the item cannot fit.
    priorities = np.full_like(bins_remain_cap, priority_no_fit, dtype=float)

    # Identify bins where the item can physically fit
    can_fit_mask = bins_remain_cap >= item

    # Get the indices of these fitting bins for efficient vectorized operations
    fitting_indices = np.where(can_fit_mask)[0]

    # Only proceed if there are any bins where the item can fit
    if fitting_indices.size > 0:
        # Calculate the capacity that would remain in each fitting bin after placing the item
        potential_remaining_cap = bins_remain_cap[fitting_indices] - item

        # Best Fit component: Prioritize bins with smaller remaining capacity.
        # This is achieved by taking the negative of the remaining capacity,
        # so smaller remaining capacity results in a larger (less negative) score.
        best_fit_scores = -potential_remaining_cap

        # Consolidation Bonus: Apply a bonus to 'used' bins to encourage filling existing bins.
        # A bin is considered 'used' if its current remaining capacity is less than its total capacity,
        # indicating it's not a brand new, empty bin.
        is_used_bin = bins_remain_cap[fitting_indices] < total_bin_capacity
        best_fit_scores[is_used_bin] += used_bin_bonus

        # Assign the calculated priority scores back to the correct positions
        # in the main priorities array for the bins that can fit the item.
        priorities[fitting_indices] = best_fit_scores

    return priorities
```
