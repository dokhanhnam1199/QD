```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    "Gravitational Collapse" Heuristic for Online Bin Packing.

    Drawing inspiration from the relentless pull of gravity that compacts matter
    into the densest possible states, this heuristic prioritizes bins that, upon
    accommodating the given item, would have the smallest remaining capacity.

    This strategy encourages "tight fits," aiming to fill bins as completely as
    possible before their internal 'volume' reaches a critical point of collapse
    (i.e., minimal remaining space). A bin achieving a 'perfect fit' (remaining
    capacity exactly zero) is given the ultimate priority, akin to a final,
    irreversible gravitational collapse.

    Bins that are too small to contain the item are deemed outside the event
    horizon and are given the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score for each bin.
        Higher scores indicate a stronger gravitational pull towards selection.
    """
    # Initialize all priorities to a state of infinite repulsion (negative infinity)
    # for bins that cannot even theoretically contain the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the 'regions of space-time' (bins) that can physically
    # accommodate the incoming 'matter' (item).
    can_fit_mask = bins_remain_cap >= item

    # For those eligible regions, we calculate the remaining 'vacuum' (empty space)
    # after the item is placed.
    # A tiny epsilon ensures we don't divide by zero in the case of a 'perfect fit'
    # where the remaining space is exactly zero, giving it the highest possible density score.
    epsilon = np.finfo(float).eps

    remaining_space_after_fit = bins_remain_cap[can_fit_mask] - item
    
    # The 'gravitational pull' (priority) is inversely proportional to the
    # remaining 'vacuum'. A smaller remaining space implies a denser state
    # and thus a stronger pull for the item.
    priorities[can_fit_mask] = 1.0 / (remaining_space_after_fit + epsilon)

    return priorities
```
