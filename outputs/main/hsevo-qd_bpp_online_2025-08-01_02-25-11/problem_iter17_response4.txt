```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Prioritizes bins using Best Fit, with strong bonuses for exact fits and penalties for fragmented space.
    This hybrid approach aims to minimize bins by promoting closure and avoiding awkward remainders.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # 1. Identify bins where the item can fit (allowing for minor floating-point inaccuracies)
    can_fit_mask = bins_remain_cap >= item - np.finfo(float).eps * 10

    # Exit early if no bins can fit the item
    if not np.any(can_fit_mask):
        return priorities

    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # 2. Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = fitting_bins_remain_cap - item

    # 3. Base priority: Best Fit strategy (minimize remaining capacity)
    # A smaller potential_remaining_cap (closer to 0) means a tighter fit, which is preferred.
    # By taking the negative, we convert minimization to maximization for argmax.
    base_priorities = -potential_remaining_cap

    # 4. Define heuristic parameters for bonuses and penalties
    EXACT_FIT_THRESHOLD = np.finfo(float).eps * 10  # A small value to consider a near-zero remainder as an exact fit
    EXACT_FIT_BONUS = bin_capacity * 100.0          # Large bonus to strongly favor exact fits, scaled by capacity

    # Fragmentation penalty parameters: Discourage creating very small, "unusable" remainders.
    # This threshold defines the upper bound of what is considered a "fragmented" space (e.g., < 10% of bin_capacity).
    FRAGMENTATION_THRESHOLD_RATIO = 0.1             # e.g., 10% of total bin capacity
    FRAGMENTATION_THRESHOLD = FRAGMENTATION_THRESHOLD_RATIO * bin_capacity
    FRAGMENTATION_PENALTY = -bin_capacity * 50.0    # Significant negative penalty

    # 5. Apply bonuses and penalties to the base priorities for fitting bins
    current_fitting_priorities = base_priorities

    # Apply Exact Fit Bonus: If the remaining capacity is very close to zero
    is_exact_fit_mask = potential_remaining_cap <= EXACT_FIT_THRESHOLD
    current_fitting_priorities[is_exact_fit_mask] += EXACT_FIT_BONUS

    # Apply Fragmentation Penalty: If the remaining capacity is small but not an exact fit
    # This targets remainders between (EXACT_FIT_THRESHOLD, FRAGMENTATION_THRESHOLD]
    is_fragmented_mask = (potential_remaining_cap > EXACT_FIT_THRESHOLD) & \
                         (potential_remaining_cap <= FRAGMENTATION_THRESHOLD)
    current_fitting_priorities[is_fragmented_mask] += FRAGMENTATION_PENALTY

    # 6. Assign the calculated priorities back to the main priorities array
    priorities[can_fit_mask] = current_fitting_priorities

    return priorities
```
