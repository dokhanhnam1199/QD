{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic combines \"Best Fit\" with a \"Bin Consolidation\" and\n    \"Fragmentation Avoidance\" strategy. It aims to achieve global efficacy\n    through local, non-linear interactions, adapting to the current item's size.\n\n    The priority calculation is composed of:\n    1.  **Best Fit Core:** Prioritizes bins that result in the smallest\n        remaining capacity after the item is placed. This is the foundational\n        linear component.\n    2.  **Exact Fit Bonus (Non-linear):** Provides a significant, discrete\n        bonus for bins where the item fits perfectly, leading to zero\n        remaining capacity. This encourages complete bin utilization and closure.\n    3.  **Fragmentation Penalty (Non-linear & Adaptive):** Applies a penalty\n        to bins that, after placing the item, would be left with a small,\n        non-zero remaining capacity. This penalty is particularly harsh if the\n        remaining capacity is less than or equal to the current `item`'s size,\n        discouraging the creation of fragmented space that might be difficult\n        to fill with future items of similar scale. The penalty scales with\n        how close the remainder is to the `item`'s size, pushing towards\n        either very small remainders or sufficiently large (useful) ones.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Mask for bins where the item can fit (capacity >= item size)\n    can_fit_mask = bins_remain_cap >= item\n\n    # Extract capacities for only the fitting bins\n    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]\n\n    # If no bin can fit the item, return priorities initialized to -inf\n    if fitting_bins_remain_cap.size == 0:\n        return priorities\n\n    # Calculate potential remaining capacity if the item were placed\n    potential_remaining_cap = fitting_bins_remain_cap - item\n\n    # --- Core Priority Calculation (Best Fit component) ---\n    # We negate the potential remaining capacity so that a smaller remainder\n    # results in a higher (less negative) priority score.\n    # Example: remaining 0.1 -> score -0.1; remaining 0.5 -> score -0.5.\n    calculated_priorities = -potential_remaining_cap\n\n    # --- Hybrid/Non-linear/Adaptive Components ---\n\n    # 1. Exact Fit Bonus: A strong, discrete non-linear bonus for perfect fits.\n    # This highly prioritizes bins that can be perfectly filled.\n    EXACT_FIT_THRESHOLD = 1e-9  # Tolerance for floating point comparisons to zero\n    EXACT_FIT_BONUS = 1000.0    # A large bonus to ensure exact fits are top priority\n\n    exact_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EXACT_FIT_THRESHOLD)\n    calculated_priorities[exact_fit_mask] += EXACT_FIT_BONUS\n\n    # 2. Fragmentation Penalty: Penalize creating small, non-zero remnants.\n    # This aims to avoid \"awkward\" remaining capacities that are too small\n    # to be easily useful for typical future items, especially if they are\n    # a significant fraction of the current item's size.\n    \n    # Apply penalty only if the item size is positive to avoid division by zero.\n    # Item sizes in BPP are typically positive.\n    if item > EXACT_FIT_THRESHOLD:\n        # Define the \"fragmentation zone\": remaining capacities that are\n        # non-zero but less than or equal to the current item's size.\n        # This range is problematic as it's not an exact fit, but also not\n        # large enough to easily accommodate another item of the same size.\n        fragment_zone_mask = (potential_remaining_cap > EXACT_FIT_THRESHOLD) & \\\n                             (potential_remaining_cap <= item)\n\n        if np.any(fragment_zone_mask):\n            # Normalize the remaining capacity within this zone by the item's size.\n            # This makes the penalty adaptive to the scale of the current item.\n            normalized_fragment_rem = potential_remaining_cap[fragment_zone_mask] / item\n\n            # Apply a penalty that increases as the normalized remainder\n            # approaches 1 (i.e., remaining capacity is close to item's size).\n            # This strongly discourages leaving a bin with a capacity just\n            # slightly less than the item, effectively making it a \"dead space\".\n            # PENALTY_FACTOR is a tunable parameter controlling the penalty's strength.\n            PENALTY_FACTOR = 5.0 # Example: A factor of 5.0\n\n            penalty = -PENALTY_FACTOR * normalized_fragment_rem\n            calculated_priorities[fragment_zone_mask] += penalty\n\n    # Assign the calculated priorities to the fitting bins in the main array\n    priorities[can_fit_mask] = calculated_priorities\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n### Analyze & experience\n- Comparing (1st) vs (4th), we see a significant jump in heuristic sophistication. The top-ranked (1st) introduces an \"aggressively incentivized\" exponential exact-fit bonus (magnitude 5000.0, decay 50.0), a \"Valley of Despair\" fragmentation penalty shaped like a negative Gaussian curve (peaking at 40% of item size), and a \"Quality of Large Remaining Space Bonus\" (logarithmic). In contrast, (4th) uses a discrete exact fit bonus (1000.0) and a simpler linear fragmentation penalty (proportional to normalized remainder, up to item size). The non-linear, adaptive components in (1st) provide far more nuanced control over bin states, encouraging aggressive bin closure and intelligent space management beyond simple minimization.\n\nComparing (4th) vs (8th), the fragmentation penalty shifts from a linearly scaled penalty based on `normalized_fragment_rem` (in 4th) to a fixed `TINY_REMAINDER_PENALTY` applied if the remainder is below `TINY_REMAINDER_THRESHOLD` (in 8th). The exact fit bonus is discrete and high in both (1000.0). The explicit threshold-based penalty in (8th) is simpler but less adaptive than the item-size-normalized linear penalty in (4th), which is itself less sophisticated than the Gaussian penalty in (1st). The higher performance of (4th) suggests its fragmentation handling, though linear, is more effective than a simple \"tiny remainder\" threshold.\n\nComparing (8th) vs (9th), (8th) employs a \"Hybrid Fit\" with a \"Perfect/Near-Perfect Fit Bonus\" and a \"Tiny Remainder Penalty\", while (9th) is a pure \"Best Fit\" strategy, prioritizing only the smallest remaining capacity. The clear improvement from (9th) to (8th) highlights the critical importance of explicitly incentivizing bin completion and penalizing awkward fragment creation.\n\nComparing (9th) vs (13th), both start with a \"Best Fit\" core. (13th) adds a small `used_bin_bonus` (1e-6) to prefer existing, partially filled bins over new ones. This subtle consolidation preference in (13th) leads to better performance than plain Best Fit (9th), indicating that even a minor bias towards existing bins can be beneficial for reducing the total bin count.\n\nComparing (13th) vs (14th), both aim for \"Best Fit\" plus a \"Consolidation Bonus\". (13th) explicitly takes `bin_capacity` as an argument and uses a very small `used_bin_bonus` of 1e-6. (14th) infers `BIN_CAPACITY` from `np.max(bins_remain_cap)` and uses a larger `CONSOLIDATION_BONUS` of 0.01. The stronger consolidation bias and adaptive `BIN_CAPACITY` inference in (14th) likely contribute to its better performance.\n\nComparing (14th) vs (20th), (14th) utilizes Best Fit plus a consolidation bonus, whereas (20th) implements a \"Target Remainder Fit\", aiming to leave a specific `ideal_remainder_ratio` (hardcoded 0.25) of the bin capacity. The higher ranking of (14th) suggests that a combination of Best Fit and consolidation is generally more robust and effective than solely targeting an ideal remainder, which might lead to suboptimal packing if the chosen target isn't universally beneficial across different item sizes.\n\nComparing (20th) vs (16th), (20th) attempts a \"Target Remainder Fit\" by minimizing the absolute difference from a target remaining capacity. In stark contrast, (16th) simply returns `np.zeros_like`, assigning equal priority to all fitting bins, which is equivalent to an arbitrary selection (e.g., First Fit). The functional strategy in (20th), despite its specific approach, vastly outperforms the null strategy of (16th).\n\nComparing (1st/2nd/3rd) with each other, they are identical code snippets. The same applies to (4th/5th/6th), (7th/10th), (8th/11th), (9th/12th), (14th/15th), (16th/17th), and (18th/19th). This suggests that the ranking differences within these identical groups are negligible or due to external factors not present in the code.\n\nOverall: The best heuristics employ a multi-faceted approach, balancing immediate best fit with future bin state management. This includes strong incentives for bin completion, nuanced penalties for fragmentation, and strategies for maintaining useful large spaces. Non-linear, adaptive functions are crucial for expressing these complex preferences. Simple Best Fit is a good baseline, but more sophisticated additions consistently improve performance. Purely arbitrary choices are the worst.\n- \n*   **Keywords:** Adaptive, Non-linear, Hybrid, State-aware, Quality-of-space.\n*   **Advice:** Design hybrid heuristics with adaptive, non-linear rules targeting critical bin states (completion, fragmentation). Use functions like exponential/Gaussian/logarithmic for specific incentives. Prioritize remaining space *quality* via tunable parameters.\n*   **Avoid:** Sole reliance on monotonic/linear relationships, simple additive bonuses, or shying away from non-linear complexity. Do not over-emphasize basic greedy without state awareness of bin characteristics.\n*   **Explanation:** Non-linear, state-aware functions capture nuanced problem dynamics, providing precise incentives/penalties (e.g., sharp fragmentation costs, strong completion bonuses) that linear or overly simplistic approaches miss, yielding superior solutions.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}