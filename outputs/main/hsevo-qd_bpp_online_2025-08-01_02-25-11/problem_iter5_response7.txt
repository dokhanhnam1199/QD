```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes Best Fit, adding a bonus for partially-filled bins to encourage consolidation.

    Maximizes effective filled capacity while strongly biasing towards reusing existing
    bins, penalizing impossible fits with negative infinity.
    """
    # Initialize all priorities to an extremely low value, ensuring bins that cannot
    # accommodate the item are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify which bins possess sufficient remaining capacity for the item.
    fits_mask = bins_remain_cap >= item

    # Base Best Fit score: Maximizes the resulting effective filled capacity.
    # A perfect fit (where bin's remaining capacity becomes zero) yields the highest positive
    # score (equal to `item`), consistent with Best Fit.
    priorities[fits_mask] = 2 * item - bins_remain_cap[fits_mask]

    # --- Consolidation Bonus ---
    # Determine a reference for a 'fresh' (empty) bin's capacity.
    # This assumes at least one fully empty bin is present in the `bins_remain_cap` array,
    # or takes the maximum capacity as the reference if all bins are partially filled.
    if bins_remain_cap.size > 0:
        bin_capacity_reference = np.max(bins_remain_cap)
    else:
        # If no bins exist, this scenario should ideally not be reached, but handles empty array.
        return priorities # No bins to score

    # Define a small positive bonus to encourage filling existing (partially used) bins.
    # This bonus is small enough not to overturn a significantly better Best Fit score.
    used_bin_bonus = 1e-6

    # Create a mask for bins that are partially filled AND can fit the current item.
    # Partially filled bins are those whose remaining capacity is less than the 'fresh' bin reference.
    partially_used_and_fits_mask = (bins_remain_cap < bin_capacity_reference) & fits_mask

    # Add the consolidation bonus to the priority of these specific bins.
    priorities[partially_used_and_fits_mask] += used_bin_bonus

    return priorities
```
