```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Synthesizes "Best Fit" with non-linear "Bin Completion" (exponential),
    "Fragmentation Avoidance" (Gaussian penalty), and "Large Space Quality" (logarithmic)
    bonuses, leveraging insights for robust online bin packing.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Tolerance for floating point comparisons to avoid issues with near-zero values
    TOLERANCE_EPS = 1e-9

    # Mask for bins where the item can fit (capacity >= item size, with a small tolerance)
    can_fit_mask = bins_remain_cap >= item - TOLERANCE_EPS

    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # If no bin can fit the item, return priorities initialized to -inf
    if fitting_bins_remain_cap.size == 0:
        return priorities

    # Calculate potential remaining capacity if the item were placed
    potential_remaining_cap = fitting_bins_remain_cap - item
    # Ensure no negative remainders due to floating point inaccuracies when item == capacity
    potential_remaining_cap[potential_remaining_cap < 0] = 0.0

    # --- Core Priority Calculation (Best Fit Principle) ---
    # This component aligns with the fundamental Best Fit strategy present in both v0 and v1.
    calculated_priorities = -potential_remaining_cap

    # --- Combined Non-linear & Adaptive Components ---

    # 1. Aggressive Bin Completion Bonus (Exponential):
    # This component provides a strong, non-linear incentive for near-perfect fits,
    # extending 'v1's discrete perfect fit bonus with 'v0's exponential sophistication.
    BIN_COMPLETION_BONUS_MAGNITUDE = 5000.0  # High magnitude for dominance
    BIN_COMPLETION_DECAY_RATE = 50.0         # High decay rate for sharp peak at 0
    
    bin_completion_bonus = BIN_COMPLETION_BONUS_MAGNITUDE * np.exp(-BIN_COMPLETION_DECAY_RATE * potential_remaining_cap)
    calculated_priorities += bin_completion_bonus

    # 2. Fragmentation Penalty ("Valley of Despair" - Gaussian):
    # Introduces a nuanced, adaptive penalty for "awkward" non-zero remaining capacities.
    # This is a significant improvement over 'v1's simple threshold-based penalty.
    if item > TOLERANCE_EPS:
        fragment_consideration_mask = (potential_remaining_cap > TOLERANCE_EPS) & \
                                      (potential_remaining_cap <= 1.5 * item)

        if np.any(fragment_consideration_mask):
            normalized_fragment_rem = potential_remaining_cap[fragment_consideration_mask] / item

            FRAGMENT_PENALTY_PEAK_RATIO = 0.4 # Peak penalty when remaining capacity is 40% of item size
            FRAGMENT_PENALTY_STD_DEV = 0.2    # Controls the width of the penalty zone
            FRAGMENTATION_PENALTY_STRENGTH = 100.0 # Maximum strength of the penalty

            penalty = -FRAGMENTATION_PENALTY_STRENGTH * np.exp(
                -((normalized_fragment_rem - FRAGMENT_PENALTY_PEAK_RATIO)**2) / (2 * FRAGMENT_PENALTY_STD_DEV**2)
            )
            calculated_priorities[fragment_consideration_mask] += penalty

    # 3. Quality of Large Remaining Space Bonus (Logarithmic):
    # This component, inherited from 'v0', encourages maintaining bins with substantial
    # useful free capacity, a strategy not present in 'v1'.
    if item > TOLERANCE_EPS:
        LARGE_REM_THRESHOLD_MULTIPLE = 2.0 # Threshold for "large" remaining space relative to item size
        
        large_rem_mask = potential_remaining_cap > (LARGE_REM_THRESHOLD_MULTIPLE * item)

        if np.any(large_rem_mask):
            LARGE_SPACE_BONUS_FACTOR = 20.0 # Strength of the bonus

            scaled_log_arg = potential_remaining_cap[large_rem_mask] / (item * LARGE_REM_THRESHOLD_MULTIPLE)
            log_bonus_amount = LARGE_SPACE_BONUS_FACTOR * np.log1p(np.minimum(scaled_log_arg, 100.0)) # Cap argument for stability

            calculated_priorities[large_rem_mask] += log_bonus_amount

    # Assign the calculated priorities back to the original array for fitting bins
    priorities[can_fit_mask] = calculated_priorities

    return priorities
```
