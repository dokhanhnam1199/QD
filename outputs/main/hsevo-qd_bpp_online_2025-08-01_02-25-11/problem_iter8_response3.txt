```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Combines a Best Fit strategy with a consolidation bonus for partially filled bins,
    prioritizing tight fits while encouraging the reuse of existing bins.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # 1. Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity if the item were placed in fitting bins.
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # 2. Best Fit scoring: A tighter fit (smaller remaining capacity) gets a higher priority score.
    # We use the negative of potential_remaining_cap so that a smaller positive remainder
    # results in a larger negative value (e.g., -0.1 is better than -0.5), which is then maximized.
    priorities[can_fit_mask] = -potential_remaining_cap

    # Determine the maximum possible bin capacity. This assumes that if new bins are
    # available, at least one bin will have its original full capacity.
    # This value is crucial for identifying 'partially filled' bins.
    if bins_remain_cap.size == 0:
        return priorities # No bins to process

    # Handle cases where all bins are already partially filled. Use the maximum remaining cap
    # as the reference point for what an 'empty' bin would look like.
    BIN_CAPACITY_REFERENCE = np.max(bins_remain_cap)
    
    # 3. Consolidation Bonus: Encourage filling up existing (partially used) bins.
    # A substantial bonus (0.01) is chosen as per analysis, favoring reuse over opening new bins.
    CONSOLIDATION_BONUS = 0.01

    # A bin is considered 'partially filled' (or already in use) if its current remaining
    # capacity is less than the inferred full bin capacity. This excludes completely empty/new bins.
    is_partially_filled_mask = bins_remain_cap < BIN_CAPACITY_REFERENCE

    # Apply the consolidation bonus to bins where the item can fit AND are already partially filled.
    consolidation_eligible_mask = can_fit_mask & is_partially_filled_mask

    priorities[consolidation_eligible_mask] += CONSOLIDATION_BONUS

    return priorities
```
