```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation introduces a "Multi-Objective Adaptive Fit" strategy.
    It extends the "Best Fit" principle by:
    1.  Applying a non-linear scoring function to the remaining capacity,
        giving a much higher priority to very small remaining capacities
        compared to the linear scaling in priority_v1. This makes the
        heuristic more sensitive to 'tightness'.
    2.  Introducing a significant bonus for bins that are perfectly filled
        (remaining capacity becomes exactly zero). This explicitly promotes
        closing bins, a key objective in bin packing.

    The combination aims to dynamically prioritize efficient space utilization
    while strongly encouraging the completion of bins, addressing the
    multi-objective nature of bin packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # --- Tunable Parameters ---
    # EPSILON: A small value added to the denominator to prevent division by zero
    # and to slightly smooth the priority curve when remaining capacity is very close to zero.
    EPSILON = 1e-6

    # PERFECT_FIT_BONUS: A substantial constant bonus applied when a bin
    # becomes perfectly full (remaining capacity is effectively zero).
    # This ensures that perfect fits are almost always preferred over
    # any non-perfect fit, regardless of how small the non-zero remaining gap is.
    PERFECT_FIT_BONUS = 100.0
    # --------------------------

    # 1. Base Score (Non-linear Best Fit):
    # We use the reciprocal (1 / x) to create a non-linear priority.
    # Smaller `potential_remaining_cap` values will result in disproportionately
    # higher scores. For example, a remaining capacity of 0.01 will score
    # much higher than 0.1, reflecting a strong preference for tighter fits.
    # `EPSILON` is added to avoid division by zero if `potential_remaining_cap` is exactly 0.
    base_scores = 1.0 / (potential_remaining_cap + EPSILON)

    # 2. Perfect Fit Bonus:
    # Identify bins where the item fits perfectly, leaving zero remaining capacity.
    # `np.isclose` is used for robust floating-point comparison.
    perfect_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EPSILON)

    # Add the substantial bonus to bins identified as perfect fits.
    base_scores[perfect_fit_mask] += PERFECT_FIT_BONUS

    # Assign the calculated scores to the respective fitting bins in the
    # main priorities array.
    priorities[can_fit_mask] = base_scores

    return priorities
```
