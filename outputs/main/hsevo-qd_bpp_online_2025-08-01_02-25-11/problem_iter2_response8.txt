```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using Best-Fit by selecting the bin that minimizes remaining capacity.
    Handles non-fitting bins with minimum priority, calculating only for feasible bins.
    """
    # Initialize all priorities to negative infinity, ensuring unfillable bins are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can physically fit (remaining capacity >= item size).
    # This mask is applied before calculating potential remaining space to optimize operations.
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item fits, calculate the remaining space after placement.
    # This operation is only performed on the subset of fitting bins for efficiency.
    potential_remaining_space_for_fit_bins = bins_remain_cap[can_fit_mask] - item

    # Assign priority: the negative of the potential remaining space.
    # A smaller remaining space (tighter fit) results in a value closer to zero (higher priority).
    priorities[can_fit_mask] = -potential_remaining_space_for_fit_bins

    return priorities
```
