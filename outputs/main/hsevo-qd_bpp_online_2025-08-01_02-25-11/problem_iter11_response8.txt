```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid Fit strategy: Prioritizes perfect fits and best fits while actively
    penalizing bins left with tiny, unusable fragmented spaces. Balances bin
    consolidation with efficient packing by using relative scoring.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        # No bin can fit the item, all priorities remain -inf
        return priorities

    # Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # --- Tunable Parameters for the Hybrid Fit Heuristic ---
    # These parameters are scaled to be less disruptive than absolute large values,
    # making them more robust across different bin capacities (e.g., if capacity is 1.0).
    # They influence the balance between Best Fit, consolidation, and fragmentation avoidance.

    # EPSILON_PERFECT_FIT: Small tolerance for "perfect" fit (remaining capacity near zero).
    EPSILON_PERFECT_FIT = 1e-9

    # TINY_REMAINDER_THRESHOLD: Upper bound for "tiny" remaining capacity that incurs a penalty.
    # Typically a small fraction of the bin's total capacity (e.g., 5% if capacity is 1.0).
    TINY_REMAINDER_THRESHOLD = 0.05

    # PERFECT_FIT_BONUS: Bonus applied for perfect/near-perfect fits. Should be large enough
    # to make a perfect fit the top priority, but not excessively so.
    PERFECT_FIT_BONUS = 1.5

    # TINY_REMAINDER_PENALTY: Penalty applied for creating tiny, fragmented spaces.
    # Should be significant enough to deter such placements.
    TINY_REMAINDER_PENALTY = 1.0

    # --- Apply the scoring logic ---
    # 1. Base Score: Best Fit (minimize remaining capacity)
    #    A smaller positive remaining capacity results in a larger (less negative) base score.
    current_priorities = -potential_remaining_cap

    # 2. Perfect/Near-Perfect Fit Bonus
    #    Identify bins where remaining capacity is very close to zero.
    perfect_fit_mask = potential_remaining_cap <= EPSILON_PERFECT_FIT
    current_priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Tiny Remainder Penalty
    #    Identify bins where remaining capacity is small but not zero (a "dead zone").
    #    Ensure these are not already marked as perfect fits.
    tiny_remainder_mask = (potential_remaining_cap > EPSILON_PERFECT_FIT) & \
                          (potential_remaining_cap < TINY_REMAINDER_THRESHOLD)
    current_priorities[tiny_remainder_mask] -= TINY_REMAINDER_PENALTY

    # Assign the calculated priorities back to the main priorities array
    priorities[can_fit_mask] = current_priorities

    return priorities
```
