```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for each bin using a Best-Fit strategy.
    Prioritizes bins that minimize remaining capacity after placing the item,
    assigning negative infinity to bins where the item does not fit.
    """
    # Initialize all priorities to negative infinity, meaning no bin is preferred by default,
    # and bins that cannot fit the item will retain this lowest priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify only the bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item fits, calculate the priority.
    # The Best-Fit strategy prioritizes the bin that leaves the smallest remaining capacity.
    # By taking the negative of (remaining capacity - item), a smaller remaining space
    # (closer to zero) results in a larger (less negative or zero) priority score.
    # This approach calculates the potential remaining space only for the fitting bins,
    # potentially optimizing temporary array creation for very large inputs.
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
