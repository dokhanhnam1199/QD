```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Combines Best Fit with a progressive consolidation bonus.
    Prioritizes tighter fits but slightly favors bins that are already more filled,
    encouraging consolidation and balanced bin usage.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # 1. Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities # No bin can fit the item

    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # 2. Base priority: Best Fit (minimize remaining capacity)
    # A smaller potential_remaining_cap (closer to 0) means a tighter fit, which is preferred.
    # By taking the negative, we convert minimization to maximization.
    potential_remaining_cap = fitting_bins_remain_cap - item
    base_priorities_fitting = -potential_remaining_cap

    # 3. Consolidation Bonus: Encourage filling already used bins, scaled by their current fullness.
    # This adapts the bonus based on how much a bin is already committed, promoting consolidation.
    current_fullness_fitting = (bin_capacity - fitting_bins_remain_cap) / bin_capacity

    # A small, controlled weight ensures this bonus doesn't override significantly better Best Fits.
    consolidation_bonus_weight = 1e-4 # This parameter can be tuned for specific problem instances.

    # The bonus is proportional to the bin's current fullness. Empty bins (fullness 0) get 0 bonus.
    consolidation_bonus_fitting = current_fullness_fitting * consolidation_bonus_weight

    # 4. Combine base Best Fit priority with the adaptive consolidation bonus
    combined_priorities_fitting = base_priorities_fitting + consolidation_bonus_fitting

    # 5. Assign calculated priorities back to the main priorities array
    priorities[can_fit_mask] = combined_priorities_fitting

    return priorities
```
