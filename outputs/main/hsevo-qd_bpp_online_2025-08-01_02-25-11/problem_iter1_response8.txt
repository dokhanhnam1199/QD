```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function implements a 'Best Fit' heuristic.
    It prioritizes bins that will have the smallest remaining capacity
    after the item is placed, thereby encouraging tighter packing.
    Bins that cannot fit the item are given an extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more desirable bin.
    """
    # Calculate the remaining capacity if the current item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_capacity = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (negative infinity).
    # This ensures that bins where the item does not fit will never be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining capacity >= 0).
    can_fit_mask = potential_remaining_capacity >= 0

    # For bins where the item can fit, the priority is the negative of the
    # potential remaining capacity. This means:
    # - A smaller (closer to zero) positive remaining capacity will result in a
    #   larger (closer to zero, i.e., less negative) priority score.
    # - A larger remaining capacity will result in a smaller (more negative) priority score.
    # This effectively makes the bin that becomes "fullest" (least remaining space)
    # after placing the item the most preferred.
    priorities[can_fit_mask] = -potential_remaining_capacity[can_fit_mask]

    return priorities
```
