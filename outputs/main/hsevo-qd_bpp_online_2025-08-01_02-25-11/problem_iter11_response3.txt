```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority score for each bin using Best Fit, adaptive consolidation, and perfect fit bonus.

    Prioritizes bins that minimize remaining capacity, encourages filling
    existing, fuller bins, and gives a bonus for perfect fits.
    """
    # A base bonus for perfect fits, encouraging exact utilization.
    PERFECT_FIT_BONUS = 0.05

    # A weight for the adaptive consolidation bonus. This will be scaled
    # by the current fullness of the bin, promoting heavily used bins.
    CONSOLIDATION_WEIGHT = 0.01

    # Initialize priorities for all bins to negative infinity.
    # This ensures that bins where the item cannot fit will not be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Handle the edge case where there are no bins to consider.
    if len(bins_remain_cap) == 0:
        return priorities

    # Infer the maximum capacity of an 'empty' bin from the input array.
    # This assumes that if a new bin is to be opened, its capacity
    # (or equivalent to a fresh bin's capacity) is present in `bins_remain_cap`.
    BIN_CAPACITY = np.max(bins_remain_cap)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the priorities array with -np.inf.
    if not np.any(can_fit_mask):
        return priorities

    # --- Core Best Fit Calculation ---
    # Calculate the remaining capacity if the item were placed in each fitting bin.
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Base score: Maximize the negative of the remaining capacity (Best Fit).
    base_scores = -potential_remaining_cap

    # --- Adaptive Consolidation Bonus ---
    # Determine which of the fitting bins are "partially filled" (not completely empty).
    # This identifies bins that are already in use.
    is_partially_filled_mask = (bins_remain_cap[can_fit_mask] < BIN_CAPACITY)

    # Calculate current fullness for fitting bins.
    current_fullness = BIN_CAPACITY - bins_remain_cap[can_fit_mask]
    # Normalize current fullness (0 to 1). Handle potential division by zero.
    normalized_fullness = np.zeros_like(current_fullness, dtype=float)
    if BIN_CAPACITY > 0:
        normalized_fullness = current_fullness / BIN_CAPACITY

    consolidation_bonuses = np.zeros_like(base_scores)
    # Apply scaled consolidation bonus only to partially filled bins.
    # The bonus is higher for bins that are already more full, promoting deeper consolidation.
    consolidation_bonuses[is_partially_filled_mask] = CONSOLIDATION_WEIGHT * normalized_fullness[is_partially_filled_mask]

    # --- Perfect Fit Bonus ---
    # Identify bins where the item perfectly fills the remaining space.
    perfect_fit_mask = (potential_remaining_cap == 0)
    perfect_fit_bonuses = np.zeros_like(base_scores)
    # Apply a distinct bonus for perfect fits, encouraging optimal space utilization.
    perfect_fit_bonuses[perfect_fit_mask] = PERFECT_FIT_BONUS

    # --- Combine Scores ---
    # The total priority for fitting bins is the sum of the base Best Fit score,
    # the adaptive consolidation bonus, and the perfect fit bonus.
    priorities[can_fit_mask] = base_scores + consolidation_bonuses + perfect_fit_bonuses

    return priorities
```
