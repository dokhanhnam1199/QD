```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using a highly adaptive, non-linear, and state-aware heuristic.
    It combines best fit, multi-stage completion incentives, a sophisticated
    fragmentation avoidance mechanism, and nuanced useful space preservation.
    Aims to manage bin states for overall efficiency and minimal bin usage.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit (capacity >= item size)
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return priorities initialized to -inf
    if not np.any(can_fit_mask):
        return priorities

    # Extract capacities for only the fitting bins
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate potential remaining capacity if the item were placed
    potential_remaining_cap = fitting_bins_remain_cap - item

    # Tolerance for floating point comparisons to zero
    EXACT_FIT_THRESHOLD = 1e-9

    # --- Core Priority Calculation (Best Fit component) ---
    # We negate the potential remaining capacity so that a smaller remainder
    # results in a higher (less negative) priority score.
    # This acts as the baseline for all other considerations.
    calculated_priorities = -potential_remaining_cap

    # --- Hybrid/Non-linear/Adaptive Components ---

    # 1. Perfect Fit Priority: Infinitely prefer exact fits.
    # This is critical and overrides all other calculations for perfect matches.
    perfect_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EXACT_FIT_THRESHOLD)
    # Perfect fits will be set to np.inf at the very end to ensure absolute highest priority.

    # 2. Advanced Completion Incentive (Multi-stage Exponential Decay):
    # Provides strong, rapidly decaying bonuses for small remainders,
    # encouraging the completion of bins. Differentiates between very tiny vs. small remainders.
    # Normalizing decay by 'item' makes the heuristic adaptive to item size.

    # Stage 1: Ultra-tight fits (very small remainder relative to item size)
    ULTRA_TIGHT_FIT_BONUS_MAGNITUDE = 10000.0 # Extremely high bonus
    ULTRA_TIGHT_FIT_DECAY_RATE = 200.0        # Very steep decay, ensures rapid drop-off

    ultra_tight_mask = (potential_remaining_cap > EXACT_FIT_THRESHOLD) & \
                       (potential_remaining_cap < 0.02 * item) # Less than 2% of item size remaining
    
    if np.any(ultra_tight_mask):
        # Bonus is higher for smaller remainders, rapidly decreases
        bonus = ULTRA_TIGHT_FIT_BONUS_MAGNITUDE * np.exp(-ULTRA_TIGHT_FIT_DECAY_RATE * potential_remaining_cap[ultra_tight_mask] / item)
        calculated_priorities[ultra_tight_mask] += bonus

    # Stage 2: Near-completion (slightly larger, but still small remainder relative to item size)
    NEAR_COMPLETE_BONUS_MAGNITUDE = 5000.0 # High bonus
    NEAR_COMPLETE_DECAY_RATE = 50.0       # Steep decay, but less aggressive than ultra-tight

    near_complete_mask = (potential_remaining_cap >= 0.02 * item) & \
                         (potential_remaining_cap < 0.15 * item) # Between 2% and 15% of item size
    
    if np.any(near_complete_mask):
        # Provides incentive to finish bins, even if not perfectly
        bonus = NEAR_COMPLETE_BONUS_MAGNITUDE * np.exp(-NEAR_COMPLETE_DECAY_RATE * potential_remaining_cap[near_complete_mask] / item)
        calculated_priorities[near_complete_mask] += bonus

    # 3. Sophisticated Fragmentation Penalty ("Desert of Despair"):
    # Aims to avoid creating medium-sized, difficult-to-fill fragments.
    # Uses a composite function to penalize a wider range of awkward remainders,
    # specifically targeting regions that are neither "near-complete" nor "useful large space".
    if item > EXACT_FIT_THRESHOLD:
        FRAGMENT_PENALTY_AMPLITUDE_1 = 300.0 # Strength for first awkward region
        FRAGMENT_PENALTY_AMPLITUDE_2 = 150.0 # Strength for second awkward region

        # This range defines where fragmentation penalties are active,
        # avoiding overlap with completion bonuses and useful space bonuses.
        fragment_zone_mask = (potential_remaining_cap >= 0.15 * item) & \
                             (potential_remaining_cap < 1.0 * item) # Consider up to just below item's size

        if np.any(fragment_zone_mask):
            current_remainders_in_zone = potential_remaining_cap[fragment_zone_mask]
            
            # Sub-component 3a: Linear ramp-up penalty for very small, non-useful fragments
            # This covers the gap between the near-completion bonus and the main Gaussian penalties.
            SMALL_FRAG_RAMP_MAGNITUDE = 100.0
            small_frag_ramp_mask = (current_remainders_in_zone >= 0.15 * item) & (current_remainders_in_zone < 0.25 * item)
            if np.any(small_frag_ramp_mask):
                # Penalty linearly increases as remainder goes from 0.15*item to 0.25*item
                ramp_penalty = -SMALL_FRAG_RAMP_MAGNITUDE * (current_remainders_in_zone[small_frag_ramp_mask] - 0.15 * item) / (0.10 * item + EXACT_FIT_THRESHOLD)
                calculated_priorities[fragment_zone_mask][small_frag_ramp_mask] += ramp_penalty

            # Sub-component 3b: Two Gaussian penalties targeting specific "awkward" sizes.
            # This creates a broader "valley" of undesirable remainders.

            # Gaussian 1: Targets smaller, awkward fragments (e.g., 30-50% of item size)
            GAUSSIAN1_CENTER_RATIO = 0.40 # Center of the first valley
            GAUSSIAN1_SPREAD_RATIO = 0.10 # Width of the first valley relative to item size

            # Gaussian 2: Targets larger, awkward fragments (e.g., 60-80% of item size)
            GAUSSIAN2_CENTER_RATIO = 0.70 # Center of the second valley
            GAUSSIAN2_SPREAD_RATIO = 0.15 # Wider width for the second valley

            penalty_g1 = -FRAGMENT_PENALTY_AMPLITUDE_1 * \
                         np.exp(-((current_remainders_in_zone - GAUSSIAN1_CENTER_RATIO * item)**2) / \
                                (2 * (GAUSSIAN1_SPREAD_RATIO * item + EXACT_FIT_THRESHOLD)**2))

            penalty_g2 = -FRAGMENT_PENALTY_AMPLITUDE_2 * \
                         np.exp(-((current_remainders_in_zone - GAUSSIAN2_CENTER_RATIO * item)**2) / \
                                (2 * (GAUSSIAN2_SPREAD_RATIO * item + EXACT_FIT_THRESHOLD)**2))
            
            calculated_priorities[fragment_zone_mask] += penalty_g1 + penalty_g2

    # 4. Reinforced Useful Large Space Bonus (Logarithmic and Linear):
    # Incentivizes leaving flexible bins that can accommodate future items,
    # distinguishing between generally useful space and exceptionally large, empty-like space.
    
    # Base useful space bonus (logarithmic, similar to v1 but normalized by item size)
    USEFUL_SPACE_BONUS_FACTOR = 15.0 # Increased magnitude
    
    # Mask for remainders that are at least the item size, or larger
    base_useful_mask = potential_remaining_cap >= 1.0 * item

    if np.any(base_useful_mask):
        # Logarithmic bonus: provides diminishing returns for larger spaces.
        # Normalizing by 'item' makes the curve scale appropriately.
        bonus = USEFUL_SPACE_BONUS_FACTOR * np.log1p(potential_remaining_cap[base_useful_mask] / item)
        calculated_priorities[base_useful_mask] += bonus

        # Additional bonus for exceptionally large remaining capacities (e.g., > 1.5 * item)
        # This subtly encourages keeping some bins 'mostly empty' for very large future items.
        VERY_LARGE_SPACE_BONUS_FACTOR = 50.0 # Significant additional bonus magnitude
        very_large_space_mask = potential_remaining_cap[base_useful_mask] >= 1.5 * item

        if np.any(very_large_space_mask):
            # A linear bonus for space exceeding 1.5 * item, making it increasingly attractive.
            additional_bonus = VERY_LARGE_SPACE_BONUS_FACTOR * (potential_remaining_cap[base_useful_mask][very_large_space_mask] - 1.5 * item) / item
            calculated_priorities[base_useful_mask][very_large_space_mask] += additional_bonus


    # Assign the calculated priorities to the fitting bins in the main array
    priorities[can_fit_mask] = calculated_priorities
    
    # Finally, re-apply np.inf for perfect fits to ensure they are the absolute highest priority.
    if np.any(perfect_fit_mask):
        priorities[can_fit_mask][perfect_fit_mask] = np.inf

    return priorities
```
