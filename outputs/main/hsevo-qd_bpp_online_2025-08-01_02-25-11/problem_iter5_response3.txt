```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Returns priority for bin selection, combining Best Fit with consolidation.

    Prioritizes tight fits (Best Fit) and adds a small bonus for already
    partially-filled bins to encourage consolidation and reduce new bin openings.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    if fitting_bins_remain_cap.size == 0:
        # No bin can fit the item, all priorities remain -inf.
        # The main algorithm should typically open a new bin if this happens.
        return priorities

    # Calculate base priority using the Best Fit strategy:
    # A tighter fit (smaller potential_remaining_cap) yields a higher priority.
    # We negate the potential remaining capacity to convert minimization to maximization.
    potential_remaining_cap = fitting_bins_remain_cap - item
    base_priorities_for_fitting_bins = -potential_remaining_cap

    # Apply the base priorities to the bins that can fit the item
    priorities[can_fit_mask] = base_priorities_for_fitting_bins

    # Add a small bonus for bins that are already partially filled (not entirely empty).
    # This encourages consolidating items into existing bins before opening new ones.
    used_bin_bonus = 1e-6

    # Identify "used" bins: those whose remaining capacity is less than the full bin capacity.
    # Using np.isclose for robustness with floating-point comparisons.
    is_used_bin_mask = ~np.isclose(fitting_bins_remain_cap, bin_capacity)

    # Apply the bonus to the base priorities of the fitting and used bins
    priorities[can_fit_mask][is_used_bin_mask] += used_bin_bonus

    return priorities
```
