```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins combining best fit, aggressive exponential near-fit bonuses,
    a nuanced Gaussian (valley of despair) fragmentation penalty, and a bonus for
    leaving large useful space. Aims for global efficacy by intelligently managing bin states.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit (capacity >= item size)
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return priorities initialized to -inf
    if not np.any(can_fit_mask):
        return priorities

    # Extract capacities for only the fitting bins
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate potential remaining capacity if the item were placed
    potential_remaining_cap = fitting_bins_remain_cap - item

    # --- Core Priority Calculation (Best Fit component) ---
    # We negate the potential remaining capacity so that a smaller remainder
    # results in a higher (less negative) priority score.
    calculated_priorities = -potential_remaining_cap

    # --- Hybrid/Non-linear/Adaptive Components ---

    # Tolerance for floating point comparisons to zero
    EXACT_FIT_THRESHOLD = 1e-9

    # 1. Aggressive Near-Exact Fit Bonus (Exponential Decay):
    # This provides a very strong, non-linear incentive for bins that can be
    # almost perfectly filled, with the bonus decaying rapidly as remainder grows.
    NEAR_EXACT_FIT_BONUS_MAGNITUDE = 5000.0  # Max bonus for perfect fit
    NEAR_EXACT_FIT_BONUS_DECAY = 50.0       # Steepness of the exponential decay

    # Apply this bonus for very small non-zero remainders (e.g., less than 10% of item size)
    near_exact_mask = (potential_remaining_cap > EXACT_FIT_THRESHOLD) & \
                      (potential_remaining_cap < 0.1 * item) # Or a fixed small absolute threshold

    if np.any(near_exact_mask):
        # Bonus: A * exp(-B * remainder)
        bonus = NEAR_EXACT_FIT_BONUS_MAGNITUDE * np.exp(-NEAR_EXACT_FIT_BONUS_DECAY * potential_remaining_cap[near_exact_mask])
        calculated_priorities[near_exact_mask] += bonus

    # For perfect fits (zero remainder), assign highest possible priority (infinity).
    # This ensures exact fits are always chosen first.
    perfect_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EXACT_FIT_THRESHOLD)
    if np.any(perfect_fit_mask):
        calculated_priorities[perfect_fit_mask] = np.inf

    # 2. Gaussian Fragmentation Penalty ("Valley of Despair"):
    # Applies a strong, non-linear penalty for leaving "awkward" small-to-medium
    # remnants that are difficult to fill. The penalty peaks around a specific
    # problematic remainder size, creating a "valley of despair".
    if item > EXACT_FIT_THRESHOLD: # Penalty only relevant for positive item sizes
        GAUSSIAN_PENALTY_AMPLITUDE = 200.0  # Strength of the penalty
        # The remainder size (as a ratio of item size) that is most undesirable.
        GAUSSIAN_PENALTY_CENTER_RATIO = 0.4 # E.g., 40% of item's size
        # Standard deviation of the Gaussian, controls the "width" of the valley.
        GAUSSIAN_PENALTY_SPREAD = 0.1 * item # Adaptive to item size

        # Define the range where this penalty is relevant (non-zero up to 1.5 * item)
        penalty_zone_mask = (potential_remaining_cap > EXACT_FIT_THRESHOLD) & \
                            (potential_remaining_cap <= 1.5 * item)

        if np.any(penalty_zone_mask):
            # Calculate the "target" (undesirable) remainder size
            target_fragment_remainder = GAUSSIAN_PENALTY_CENTER_RATIO * item

            # Squared difference from the target fragment remainder
            diff_sq = (potential_remaining_cap[penalty_zone_mask] - target_fragment_remainder)**2

            # Apply a negative Gaussian penalty: -A * exp(-(x - mu)^2 / (2 * sigma^2))
            # Add a small epsilon to spread to avoid division by zero for extremely small items.
            penalty = -GAUSSIAN_PENALTY_AMPLITUDE * np.exp(-diff_sq / (2 * (GAUSSIAN_PENALTY_SPREAD + EXACT_FIT_THRESHOLD)**2))
            calculated_priorities[penalty_zone_mask] += penalty

    # 3. Useful Large Space Bonus (Logarithmic):
    # Incentivizes leaving a bin with a significantly large remaining capacity
    # (e.g., enough for another item of similar size). This encourages maintaining
    # flexible bins that can accommodate future larger items, with diminishing returns.
    USEFUL_SPACE_BONUS_FACTOR = 10.0 # Magnitude of this bonus
    MIN_USEFUL_SPACE_FOR_BONUS_RATIO = 1.0 # Remainder must be at least 'item' size

    # Mask for remaining capacities that are considered "large and useful"
    large_useful_mask = potential_remaining_cap >= MIN_USEFUL_SPACE_FOR_BONUS_RATIO * item

    if np.any(large_useful_mask):
        # Logarithmic bonus: scales with remaining capacity but with diminishing returns.
        # Use log1p (log(1+x)) for numerical stability.
        bonus = USEFUL_SPACE_BONUS_FACTOR * np.log1p(potential_remaining_cap[large_useful_mask])
        calculated_priorities[large_useful_mask] += bonus

    # Assign the calculated priorities to the fitting bins in the main array
    priorities[can_fit_mask] = calculated_priorities

    return priorities
```
