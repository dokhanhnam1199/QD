```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority, optimizing Best Fit by computing remaining capacity only for viable bins.
    Prioritizes bins that offer the tightest fit, assigning -inf to non-fitting bins.
    """
    # Initialize all priorities to negative infinity, ensuring bins where the item cannot fit
    # are never selected. This is a critical first step for robust constraint handling.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # First, identify all bins where the item can physically fit. This masks out
    # impossible candidates early, aligning with the principle of "calculating only for fitting bins".
    can_fit_mask = bins_remain_cap >= item

    # For the bins that can accommodate the item, calculate their priority.
    # The priority is the negative of the remaining capacity after placing the item.
    # This linear transformation ensures that bins with less remaining space (tighter fit)
    # receive a higher (less negative) priority, optimizing bin utilization.
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
