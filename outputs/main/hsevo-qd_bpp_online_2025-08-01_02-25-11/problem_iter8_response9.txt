```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Prioritizes Best Fit strategy, then adds a bonus for consolidating into partially-filled bins.

    This encourages tight packing and reduces the need for new bins by reusing existing ones.
    """
    # Constant for bins where the item cannot fit, effectively excluding them.
    PRIORITY_NO_FIT: float = -np.inf

    # Weight for remaining capacity: negative for Best Fit (smaller remaining capacity = higher priority).
    WEIGHT_REMAINING_CAP: float = -1.0

    # Bonus applied to non-empty bins that can fit the item, encouraging consolidation.
    CONSOLIDATION_BONUS: float = 0.01

    priorities = np.full_like(bins_remain_cap, PRIORITY_NO_FIT, dtype=float)

    # 1. Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # 2. Calculate initial Best Fit scores for fitting bins
    # Score is based on the potential remaining capacity after placing the item.
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = WEIGHT_REMAINING_CAP * potential_remaining_cap

    # 3. Apply consolidation bonus to non-empty bins that can fit the item
    # A bin is considered 'not empty' if its current remaining capacity is less than the total bin capacity.
    # Using np.isclose for robust floating-point comparison to check for "empty" (full capacity) bins.
    is_not_empty_mask = ~np.isclose(bins_remain_cap, bin_capacity, atol=1e-9)

    # Combine masks: item must fit AND bin must not be empty
    consolidate_mask = can_fit_mask & is_not_empty_mask

    priorities[consolidate_mask] += CONSOLIDATION_BONUS

    return priorities
```
