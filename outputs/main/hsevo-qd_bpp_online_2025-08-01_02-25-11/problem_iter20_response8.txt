```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with strong exact-fit/near-closure bonuses, a nuanced
    fragmentation penalty (Gaussian), and a consolidation bonus to manage bin states
    effectively for online BPP.
    """
    # --- Heuristic Configuration Parameters ---
    # 1. Exact/Near-Fit Bonus: Aggressively incentivizes closing bins (leaving ~0 capacity).
    EXACT_FIT_MAGNITUDE = 5000.0  # Max bonus for a perfect fit.
    EXACT_FIT_DECAY = 50.0        # Rate at which the bonus diminishes as remaining capacity increases.

    # 2. Fragmentation Penalty (Valley of Despair): Penalizes creating awkward, small remainders.
    FRAG_PENALTY_MAGNITUDE = 50.0 # Max penalty for a highly fragmented bin.
    FRAG_PEAK_RATIO = 0.4         # Target remaining capacity ratio (relative to item size) for peak penalty.
    FRAG_STD_DEV_RATIO = 0.1      # Standard deviation for the Gaussian penalty (relative to item size).
                                  # Controls the "width" of the fragmentation valley.

    # 3. Consolidation Bonus: Encourages using existing, partially filled bins.
    CONSOLIDATION_BONUS = 0.01    # Small bonus for bins that are not completely empty.

    # Initialize priorities for all bins to negative infinity.
    # This ensures bins where the item cannot fit will not be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Handle the edge case where there are no bins to consider.
    if bins_remain_cap.size == 0:
        return priorities

    # Infer the maximum capacity of an 'empty' bin. This assumes that
    # if a new bin can be opened, its capacity is present in `bins_remain_cap`,
    # or at least a reference maximum capacity is present.
    # Add a small epsilon to prevent issues if all bins are full (max cap is 0).
    BIN_CAPACITY = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1.0

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the priorities array with -np.inf.
    if not np.any(can_fit_mask):
        return priorities

    # Extract current capacities for bins where the item can fit
    fitting_bins_current_cap = bins_remain_cap[can_fit_mask]

    # Calculate the remaining capacity if the item were placed in each fitting bin.
    potential_remaining_cap = fitting_bins_current_cap - item

    # --- 1. Base Best Fit Score ---
    # The goal is to minimize the remaining capacity, which means maximizing
    # the negative of the remaining capacity.
    base_scores = -potential_remaining_cap

    # --- 2. Exact/Near-Fit Bonus ---
    # Apply a high bonus that decays exponentially as remaining capacity increases from zero.
    # This strongly prioritizes bins that will be almost full or perfectly filled.
    exact_fit_bonuses = EXACT_FIT_MAGNITUDE * np.exp(-EXACT_FIT_DECAY * potential_remaining_cap)

    # --- 3. Fragmentation Penalty (Gaussian "Valley of Despair") ---
    # Penalize specific "awkward" remaining capacities that are too small to be generally useful.
    # This penalty is strongest when the remaining capacity is near `FRAG_PEAK_RATIO * item`.
    fragmentation_penalties = np.zeros_like(potential_remaining_cap)
    if item > 0: # Ensure item size is positive to avoid division by zero or degenerate calculations
        target_frag_remainder = FRAG_PEAK_RATIO * item
        # Standard deviation for the Gaussian, with a minimum to prevent a zero or too-narrow peak.
        std_dev = max(FRAG_STD_DEV_RATIO * item, 1e-6 * BIN_CAPACITY) 
        
        # The penalty is a negative value, peaking at the target_frag_remainder.
        fragmentation_penalties = -FRAG_PENALTY_MAGNITUDE * np.exp(
            -((potential_remaining_cap - target_frag_remainder)**2) / (2 * std_dev**2)
        )

    # --- 4. Consolidation Bonus ---
    # Apply a small linear bonus to bins that are already partially filled
    # (i.e., not completely empty), to encourage using existing bins and avoid
    # opening new ones prematurely.
    consolidation_bonuses = np.zeros_like(potential_remaining_cap)
    # A bin is considered partially filled if its current capacity is less than the inferred full capacity.
    is_partially_filled_mask = (fitting_bins_current_cap < BIN_CAPACITY)
    consolidation_bonuses[is_partially_filled_mask] = CONSOLIDATION_BONUS

    # --- Combine all scores ---
    # The total priority for fitting bins is the sum of all calculated components.
    total_scores = base_scores + exact_fit_bonuses + fragmentation_penalties + consolidation_bonuses
    
    # Assign the calculated scores back to the relevant positions in the main priorities array.
    priorities[can_fit_mask] = total_scores

    return priorities
```
