```python
import numpy as np

# BIN_CAPACITY needs to be known for the consolidation bonus.
# In a real application, this would typically be a parameter
# of the bin packing problem instance itself.
# Assuming a normalized capacity of 1.0, which is common in BPP literature.
# If items and remaining capacities are on a different scale (e.g., integers out of 100),
# this constant should be adjusted to match that scale (e.g., BIN_CAPACITY = 100).
BIN_CAPACITY = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation combines the "Best Fit" strategy with a "Consolidation Bonus".
    It extends `priority_v1` by giving preference to bins that are already partially filled,
    encouraging better consolidation of items.

    1.  **Best Fit Component:** Prioritizes bins that, after placing the item,
        will have the smallest remaining capacity (i.e., a tight fit).
        This is achieved by maximizing the negative of the potential remaining capacity.
    2.  **Consolidation Bonus Component:** Adds a simple, linear bonus to bins that are already
        partially filled. This encourages filling existing bins before opening new ones.
        The bonus is proportional to the current content of the bin (BIN_CAPACITY - remaining_capacity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         Assumes these capacities are relative to a fixed BIN_CAPACITY.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to negative infinity. Bins that cannot fit the item
    # or are not considered will retain this score, making them ineligible.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, all priorities remain -np.inf.
    # This implicitly signals that a new bin must be opened (handled by the caller).
    if not np.any(can_fit_mask):
        return priorities

    # Extract remaining capacities for only the bins that can accommodate the item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Best Fit Component ---
    # Calculate the remaining capacity if the item were placed in each fitting bin.
    # To prioritize the smallest remaining capacity (tightest fit) using argmax,
    # we take the negative of this value.
    potential_remaining_cap = fitting_bins_remain_cap - item
    best_fit_scores = -potential_remaining_cap

    # --- Consolidation Bonus Component ---
    # This constant determines the strength of the consolidation preference.
    # A value of 0.0 makes this strategy identical to Best Fit (`priority_v1`).
    # A higher positive value gives more preference to filling existing bins.
    # This parameter can be tuned for optimal performance.
    CONSOLIDATION_WEIGHT = 0.5 

    # 'Current content' of a bin is how much it's already filled.
    # (BIN_CAPACITY - bins_remain_cap) gives the space already occupied.
    # A higher current content indicates a more "used" bin, which is preferred for consolidation.
    current_bin_content = BIN_CAPACITY - fitting_bins_remain_cap
    
    # The consolidation bonus is linearly proportional to the current content.
    consolidation_bonus = CONSOLIDATION_WEIGHT * current_bin_content

    # The total priority for fitting bins is the sum of the Best Fit score
    # and the Consolidation bonus. This strategy balances tight packing with
    # the goal of reducing the number of partially empty bins.
    priorities[can_fit_mask] = best_fit_scores + consolidation_bonus

    return priorities
```
