```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic combines "Best Fit" with a multi-layered "Space Quality"
    and "Bin Completion" strategy, adapting to the current item's size.
    It aims to optimize global bin utilization by intelligently managing
    remaining capacities.

    The priority calculation is composed of:
    1.  **Best Fit Core:** The foundational component, where bins that result in
        the smallest remaining capacity after the item is placed receive a higher
        (less negative) base priority. This promotes efficient local packing.
    2.  **Exact Fit Bonus (Strong Non-linear):** A significant, discrete bonus
        is awarded for bins where the item perfectly fills the bin, encouraging
        complete bin closure and maximizing density. This is a primary objective.
    3.  **Tiered Fragmentation Penalty (Adaptive & Non-linear):** This is the
        main enhancement, replacing a single penalty zone with two distinct,
        adaptively-scaled penalty zones to discourage problematic remaining spaces:
        *   **Tiny Fragment Penalty:** Applied to very small, non-zero remaining capacities
            (e.g., less than 10% of the current item's size). These are generally
            considered highly undesirable as they are too small to be easily utilized
            by typical future items. The penalty is steepest for remainders closest to zero.
        *   **Awkward Fragment Penalty:** Applied to remaining capacities that are
            larger than 'tiny' but still less than or equal to the current item's size.
            This discourages leaving "awkward" gaps that are too small for another
            item of similar scale, but not small enough to be negligible. The penalty
            increases as the remainder approaches the item's size, strongly penalizing
            spaces just below the current item's size.
    4.  **Useful Remaining Space:** For capacities larger than the item, the Best
        Fit core naturally prioritizes those with smaller remainders, effectively
        managing bins that can accommodate multiple items while still promoting
        compactness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score for each bin.
    """
    # Initialize priorities with negative infinity for bins where the item cannot fit.
    # This ensures these bins are never selected unless no other option exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit (remaining capacity >= item size).
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return the initialized priorities.
    if not np.any(can_fit_mask):
        return priorities

    # Get the remaining capacities for only the bins where the item can fit.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate the potential remaining capacity if the item were placed in each fitting bin.
    potential_remaining_cap = fitting_bins_remain_cap - item

    # --- Core Priority Calculation (Best Fit principle) ---
    # Prioritize bins that result in the smallest remaining capacity.
    # We negate the remaining capacity so that smaller (closer to zero) values result
    # in higher (less negative) priority scores.
    calculated_priorities_for_fitting_bins = -potential_remaining_cap

    # --- Adaptive & Non-linear Enhancements ---

    # Constants for various thresholds and penalty magnitudes.
    EXACT_FIT_THRESHOLD = 1e-9  # Tolerance for floating point comparisons to zero.
    EXACT_FIT_BONUS = 1000.0    # Substantial bonus for perfect fits, making them top priority.

    TINY_FRAGMENT_MAX_RATIO = 0.1 # Defines the upper limit (as a ratio of `item` size) for "tiny" fragments.
    TINY_FRAGMENT_PENALTY_MAGNITUDE = 15.0 # Controls the maximum severity of the tiny fragment penalty.

    AWKWARD_FRAGMENT_MAX_RATIO = 1.0 # Defines the upper limit (as a ratio of `item` size) for "awkward" fragments.
    AWKWARD_PENALTY_FACTOR = 5.0    # Controls the severity of the awkward fragment penalty.

    # 1. Exact Fit Bonus:
    # Identify bins that would be perfectly filled (or very close to it) by the current item.
    exact_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EXACT_FIT_THRESHOLD)
    calculated_priorities_for_fitting_bins[exact_fit_mask] += EXACT_FIT_BONUS

    # 2. Tiered Fragmentation Penalties:
    # These penalties are only applied if the item has a meaningful size, as it's used for normalization.
    if item > EXACT_FIT_THRESHOLD:
        # Create a mask for bins that are NOT an exact fit within the `fitting_bins` context.
        non_exact_mask = ~exact_fit_mask
        
        # Only proceed with fragmentation analysis if there are any non-exact fits.
        if np.any(non_exact_mask): 
            # Get the potential remaining capacities for these non-exact bins.
            non_exact_rem_caps = potential_remaining_cap[non_exact_mask]
            
            # Normalize these remaining capacities by the item size.
            # This makes the penalties adaptive to the scale of the current item.
            normalized_rem = non_exact_rem_caps / item

            # --- Zone A: Tiny Fragments Penalty ---
            # These are very small, non-zero remainders (e.g., 0 < remainder <= 0.1 * item).
            # Such spaces are typically too small to be useful for future items.
            tiny_fragment_mask = (non_exact_rem_caps > EXACT_FIT_THRESHOLD) & \
                                 (normalized_rem <= TINY_FRAGMENT_MAX_RATIO)

            if np.any(tiny_fragment_mask):
                # Apply a penalty that is stronger as `normalized_rem` approaches 0 within this zone.
                # The penalty scales linearly from `TINY_FRAGMENT_PENALTY_MAGNITUDE` (at normalized_rem=0)
                # to `0` (at normalized_rem=TINY_FRAGMENT_MAX_RATIO).
                penalty_tiny = -TINY_FRAGMENT_PENALTY_MAGNITUDE * \
                               ((TINY_FRAGMENT_MAX_RATIO - normalized_rem[tiny_fragment_mask]) / TINY_FRAGMENT_MAX_RATIO)
                
                # Apply the calculated penalty to the relevant priorities.
                # `calculated_priorities_for_fitting_bins[non_exact_mask]` is a view of the non-exact fitting bins' priorities.
                # `[tiny_fragment_mask]` then selects the tiny fragments from that view.
                calculated_priorities_for_fitting_bins[non_exact_mask][tiny_fragment_mask] += penalty_tiny

            # --- Zone B: Awkward Fragments Penalty ---
            # These are remainders larger than "tiny" but still less than or equal to the item's size.
            # (e.g., 0.1 * item < remainder <= 1.0 * item).
            # These spaces are "awkward" because they are too small for another item of similar scale.
            awkward_fragment_mask = (normalized_rem > TINY_FRAGMENT_MAX_RATIO) & \
                                    (normalized_rem <= AWKWARD_FRAGMENT_MAX_RATIO)
            
            if np.any(awkward_fragment_mask):
                # Apply a penalty that is stronger as `normalized_rem` approaches `AWKWARD_FRAGMENT_MAX_RATIO` (i.e., `item` size).
                # This explicitly discourages leaving a bin with capacity just under the `item`'s size.
                penalty_awkward = -AWKWARD_PENALTY_FACTOR * normalized_rem[awkward_fragment_mask]
                
                # Apply the calculated penalty.
                calculated_priorities_for_fitting_bins[non_exact_mask][awkward_fragment_mask] += penalty_awkward

    # Assign the final calculated priorities to the corresponding bins in the main `priorities` array.
    # Only bins that could initially fit the item will have their priorities updated from -inf.
    priorities[can_fit_mask] = calculated_priorities_for_fitting_bins

    return priorities
```
