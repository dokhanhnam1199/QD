```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims for a "Best Fit Ratio" strategy.
    It prioritizes bins that, when the item is placed, result in the highest
    proportion of their *initial remaining capacity* being filled by the item.
    In other words, it maximizes the ratio `item / current_bin_remaining_capacity`.

    This approach encourages filling existing bins as much as possible *proportionally*.
    For example, if an item of size 0.1 can go into a bin with 0.2 capacity remaining
    (filling 50% of the available space) or a bin with 0.5 capacity remaining
    (filling 20% of the available space), this heuristic will favor the 0.2 capacity bin.

    Compared to `priority_v1` (Best Fit), which prioritizes the smallest absolute
    remaining capacity, `priority_v2` focuses on the relative 'tightness' of the fit.
    This can be particularly effective when there are many bins with different
    remaining capacities, and we want to consolidate items into bins that are
    proportionally 'closest' to being filled.

    Args:
        item: Size of item to be added to the bin. Assumed to be non-negative.
        bins_remain_cap: Array of current remaining capacities for each bin.
                         Assumed to be non-negative.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins where the item cannot fit will have a priority of -np.inf.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    # If item is positive, then bins_remain_cap must also be positive for item to fit.
    # If item is 0, it fits into any bin (even empty ones), but BPP typically deals with positive items.
    can_fit_mask = bins_remain_cap >= item

    # Get the remaining capacities for bins where the item can fit
    fitting_bins_cap = bins_remain_cap[can_fit_mask]

    # Calculate priority for fitting bins
    # The priority is the ratio of the item size to the bin's current remaining capacity.
    # A higher ratio indicates a "tighter" proportional fit, and thus a higher priority.
    # If item == fitting_bins_cap, the ratio is 1.0 (perfect fit), which is the maximum possible.
    # As item > 0 and fitting_bins_cap >= item, fitting_bins_cap will always be > 0,
    # preventing division by zero.
    priorities[can_fit_mask] = item / fitting_bins_cap

    return priorities
```
