```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with a consolidation bonus for partially filled bins.

    Prioritizes bins that offer the tightest fit while also applying a bonus
    to existing bins that are not completely empty, encouraging their use.
    """
    # Initialize all priorities to an extremely low value, ensuring bins that cannot
    # accommodate the item are never selected. Use float64 for numerical precision.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Identify which bins possess sufficient remaining capacity for the item.
    fits_mask = bins_remain_cap >= item

    # Best Fit component: Calculate a priority score for fitting bins.
    # This score, 2 * item - bins_remain_cap[fits_mask], maximizes the resulting
    # effective filled capacity relative to the item's size, as seen in priority_v0.
    priorities[fits_mask] = 2 * item - bins_remain_cap[fits_mask]

    # Consolidation Bonus component:
    # This bonus encourages using bins that are already partially filled,
    # thus minimizing the need to open new bins.
    CONSOLIDATION_BONUS = 0.01 # A more substantial bonus as suggested by analysis

    # Apply bonus only if there are bins to consider and the item size is positive
    if bins_remain_cap.size > 0 and item > 0:
        # Determine the full bin capacity by finding the maximum remaining capacity among all bins.
        # This assumes at least one 'empty' bin (with full capacity) is typically present,
        # or that this max value represents the standard bin capacity.
        full_bin_capacity = np.max(bins_remain_cap)

        # Identify bins that are NOT completely empty (i.e., their current capacity
        # is less than the inferred full capacity). Using `np.isclose` for robustness
        # with floating-point comparisons.
        EPSILON = 1e-9 # Tolerance for floating-point comparison
        not_empty_mask = ~np.isclose(bins_remain_cap, full_bin_capacity, atol=EPSILON)

        # Apply the consolidation bonus to bins that can fit the item AND are not empty.
        bonus_application_mask = fits_mask & not_empty_mask
        priorities[bonus_application_mask] += CONSOLIDATION_BONUS

    return priorities
```
