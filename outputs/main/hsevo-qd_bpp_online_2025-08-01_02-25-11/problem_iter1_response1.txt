```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin,
    guided by the principle of minimizing 'spatiotemporal curvature' or
    'residual energy' within the bins, analogous to seeking a minimal
    potential energy state (Best Fit).

    This heuristic prioritizes bins that, after accommodating the item,
    will leave the least amount of remaining capacity. This effectively
    maximizes the 'packing density' for existing bins, aiming to reduce
    the total number of required 'dimensional receptacles'. Bins that
    cannot physically contain the item are assigned an infinitely low
    priority, as they represent an 'inaccessible' state for the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score for each bin.
        A higher score indicates a more favorable bin.
    """
    # Calculate the hypothetical remaining space if the item were placed in each bin.
    # This represents the 'residual void' or 'unfilled potential' after insertion.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priorities with an infinitely low value for all bins.
    # This ensures that bins incapable of holding the item are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the 'accessible dimensions' â€“ bins where the item can actually fit.
    can_fit_mask = potential_remaining_space >= 0

    # For accessible bins, we apply the 'Best Fit' principle.
    # We desire to minimize the 'potential_remaining_space', which translates
    # to maximizing the *negative* of this value. A smaller positive remaining
    # space (closer to a perfect fit) will result in a higher priority score.
    # This steers the system towards the 'tightest' possible configuration,
    # thereby consolidating items and minimizing the need for new bins.
    priorities[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priorities
```
