```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with a bonus for existing partially-filled bins.

    Prioritizes bins that result in the smallest remaining capacity (Best Fit).
    Adds a small bonus to bins already in use, encouraging consolidation.
    Infeasible bins (item too large) receive a negative infinity priority.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Assume a standard bin capacity for identifying 'used' bins.
    # In many Bin Packing Problem formulations, item sizes and bin capacities
    # are normalized such that the full bin capacity is 1.0.
    # If your problem uses a different capacity, this value should be adjusted.
    BIN_CAPACITY = 1.0 
    
    # 1. Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # 2. Calculate potential remaining capacity for fitting bins (Best Fit core)
    # This value is positive if the item fits.
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Best Fit strategy: We want to minimize the remaining capacity,
    # so a smaller potential_remaining_cap should yield a higher priority.
    # By taking the negative, we transform this into a maximization problem.
    # (e.g., -0.1 is higher priority than -0.5)
    priorities[can_fit_mask] = -potential_remaining_cap

    # 3. Apply a bonus for bins that are already partially filled.
    # This encourages consolidating items into existing bins rather than opening new ones,
    # as observed in the top-performing heuristics.
    # The bonus is small (e.g., 1e-6) to ensure Best Fit is still the primary sorting factor,
    # only acting as a tie-breaker or a slight nudge.
    used_bin_bonus = 1e-6 
    
    # A bin is considered 'used' or 'partially filled' if its remaining capacity
    # is less than the full bin capacity.
    # This assumes that 'empty' bins in bins_remain_cap would have capacity equal to BIN_CAPACITY.
    is_used_mask = bins_remain_cap < BIN_CAPACITY 
    
    # Apply the bonus only to bins where the item can actually be placed AND are already used.
    used_and_can_fit_mask = can_fit_mask & is_used_mask
    
    priorities[used_and_can_fit_mask] += used_bin_bonus

    return priorities
```
