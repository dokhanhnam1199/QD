```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority for bin selection, combining Best Fit, a consolidation bonus,
    and a subtle preference for less-full used bins to enhance adaptation and robustness.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # 1. Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Get remaining capacities for only the bins that can fit the item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    if fitting_bins_remain_cap.size == 0:
        return priorities # No bin can fit the item, return all -inf priorities

    # 2. Base priority: Best Fit strategy (minimize remaining capacity)
    # A smaller potential_remaining_cap (closer to 0) means a tighter fit,
    # which is preferred. By taking the negative, we convert minimization to maximization.
    # A perfect fit (0 remaining) gets a 0 score here.
    potential_remaining_cap = fitting_bins_remain_cap - item
    base_priorities_for_fitting_bins = -potential_remaining_cap

    # 3. Consolidation Bonus: Add a small bonus for choosing an already used bin.
    # This encourages filling existing bins before opening new ones.
    # The value (e.g., 1e-6) should be small enough not to override a significantly
    # better "Best Fit", but large enough to break ties or influence decisions
    # when Best Fit scores are very close.
    consolidation_bonus = 1e-6

    # Identify bins that are 'used' (i.e., not entirely empty/fresh).
    # Using np.isclose for robustness against floating-point inaccuracies when comparing to bin_capacity.
    is_used_bin_mask = ~np.isclose(fitting_bins_remain_cap, bin_capacity)

    # Apply the bonus only to bins that can fit the item AND are already used.
    base_priorities_for_fitting_bins[is_used_bin_mask] += consolidation_bonus

    # 4. Adaptive Tie-breaker for Used Bins: Among used bins with identical
    # Best Fit scores (and thus identical scores after consolidation bonus),
    # subtly prefer the one with *more* remaining capacity (i.e., less full).
    # This helps in maintaining a more balanced distribution of capacities among used bins,
    # keeping larger contiguous spaces available for future items if best-fit scores are tied.
    # This weight must be significantly smaller than the consolidation_bonus to act as a tie-breaker.
    adaptive_tie_breaker_for_less_full_used_bin = 1e-9

    base_priorities_for_fitting_bins[is_used_bin_mask] += \
        adaptive_tie_breaker_for_less_full_used_bin * fitting_bins_remain_cap[is_used_bin_mask]

    # Assign the calculated priorities back to the main priorities array for the fitting bins
    priorities[can_fit_mask] = base_priorities_for_fitting_bins

    return priorities
```
