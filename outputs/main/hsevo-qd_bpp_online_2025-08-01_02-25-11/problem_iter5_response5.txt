```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes Best Fit with a bonus for reusing partially filled bins.

    Aims to minimize wasted space per bin while encouraging consolidation
    into existing, non-empty bins to reduce the total number of bins. This
    heuristic implicitly assumes the highest value in `bins_remain_cap`
    represents the capacity of an 'empty/fresh' bin.
    """
    priority_no_fit: float = -np.inf # Default priority for bins where item cannot fit
    used_bin_bonus: float = 1e-6    # Small bonus to encourage reusing non-empty bins

    priorities = np.full_like(bins_remain_cap, priority_no_fit, dtype=float)

    # 1. Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Filter to only consider fitting bins for further calculations
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    if fitting_bins_remain_cap.size == 0:
        return priorities # No bins can fit the item

    # 2. Calculate potential remaining capacity (for Best Fit)
    # Smaller remaining capacity results in a higher (less negative) priority score.
    potential_remaining_cap = fitting_bins_remain_cap - item
    base_scores = -potential_remaining_cap

    # 3. Apply bonus for 'used' (partially filled, not empty/fresh) bins
    # We assume that the maximum value currently present in `bins_remain_cap`
    # represents the capacity of a fully empty/fresh bin. Bins with remaining
    # capacity less than this maximum (but greater than 0) are considered 'used'.
    # This encourages packing into existing bins before opening truly 'fresh' ones.
    max_possible_capacity = np.max(bins_remain_cap)
    
    # Identify bins that are partially filled (0 < capacity < max_possible_capacity)
    is_partially_filled_mask_relative = (fitting_bins_remain_cap > 0) & \
                                        (fitting_bins_remain_cap < max_possible_capacity)

    # Add bonus only to fitting bins identified as partially filled
    bonus_term = np.zeros_like(base_scores)
    bonus_term[is_partially_filled_mask_relative] = used_bin_bonus

    # Combine Best Fit score with the consolidation bonus
    priorities[can_fit_mask] = base_scores + bonus_term

    return priorities
```
