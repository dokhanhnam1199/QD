```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Returns priority for bin selection, combining Best Fit, Exact Fit,
    Fragmentation Avoidance, and a New Bin Penalty to encourage consolidation.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit (capacity >= item size)
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return priorities initialized to -inf
    if not np.any(can_fit_mask):
        return priorities

    # Extract capacities for only the fitting bins
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate potential remaining capacity if the item were placed
    potential_remaining_cap = fitting_bins_remain_cap - item

    # --- Core Priority Calculation (Best Fit component) ---
    # Negate potential remaining capacity: smaller remainder -> higher score.
    calculated_priorities = -potential_remaining_cap

    # --- Hybrid/Non-linear/Adaptive Components ---
    EXACT_FIT_THRESHOLD = 1e-9  # Tolerance for floating point comparisons to zero
    EXACT_FIT_BONUS = 1000.0    # Significant bonus for perfect fits
    FRAGMENTATION_PENALTY_FACTOR = 5.0 # Strength of penalty for awkward remnants
    NEW_BIN_PENALTY = 50.0      # Penalty for choosing a completely empty bin if not an exact fit

    # 1. New Bin Penalty: Penalize using a completely empty bin (full capacity)
    # unless it results in an exact fit. This encourages using existing, partially filled bins.
    is_new_bin_mask_global = np.isclose(bins_remain_cap, bin_capacity)
    # This mask applies to the 'fitting_bins_remain_cap' subset
    new_bin_and_not_exact_fit_mask = is_new_bin_mask_global[can_fit_mask] & \
                                     (potential_remaining_cap > EXACT_FIT_THRESHOLD)
    calculated_priorities[new_bin_and_not_exact_fit_mask] -= NEW_BIN_PENALTY

    # 2. Exact Fit Bonus: A strong, discrete bonus for perfect fits.
    exact_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EXACT_FIT_THRESHOLD)
    calculated_priorities[exact_fit_mask] += EXACT_FIT_BONUS

    # 3. Fragmentation Penalty: Penalize creating small, non-zero remnants.
    # Applicable only if the item size is positive.
    if item > EXACT_FIT_THRESHOLD:
        fragment_zone_mask = (potential_remaining_cap > EXACT_FIT_THRESHOLD) & \
                             (potential_remaining_cap <= item)

        if np.any(fragment_zone_mask):
            # Normalize remainder by item's size for adaptive penalty.
            normalized_fragment_rem = potential_remaining_cap[fragment_zone_mask] / item
            penalty = -FRAGMENTATION_PENALTY_FACTOR * normalized_fragment_rem
            calculated_priorities[fragment_zone_mask] += penalty

    # Assign the calculated priorities to the fitting bins in the main array
    priorities[can_fit_mask] = calculated_priorities

    return priorities
```
