```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for bin placement based on Best Fit, favoring
    perfect fits and consolidating items into already-used bins.
    Avoids aggressive penalties for robustness.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Assumed maximum initial capacity for a bin. This is crucial for
    # the consolidation bonus to distinguish between empty and partially-filled bins.
    # In many normalized Bin Packing Problems, total bin capacity is 1.0.
    BIN_CAPACITY = 1.0

    # Tunable parameters for the hybrid fit heuristic.
    # These values are chosen to balance strong incentives without being overly aggressive,
    # reflecting lessons from the analysis of previous heuristics.
    EPSILON_PERFECT_FIT = 1e-9  # Tolerance for a remaining capacity to be considered zero.
    PERFECT_FIT_BONUS = 100.0   # Significant bonus for bins that become perfectly full.
    CONSOLIDATION_BONUS = 1.0   # Small bonus for bins that are already partially filled,
                                # encouraging reuse of existing bins over new ones.

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        # No bin can fit the item, return -inf for all.
        # External logic typically handles opening a new bin in this case.
        return priorities

    # Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # --- Apply the scoring logic ---
    # 1. Base Score: Best Fit (minimize remaining capacity)
    # A smaller positive remaining capacity results in a larger (less negative) base score.
    current_priorities = -potential_remaining_cap

    # 2. Perfect/Near-Perfect Fit Bonus
    # Apply a large bonus if the bin would be perfectly or near-perfectly filled.
    perfect_fit_mask = potential_remaining_cap <= EPSILON_PERFECT_FIT
    current_priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Consolidation Bonus
    # Apply a small bonus to bins that are already in use (i.e., not completely empty).
    # This slightly biases the algorithm towards filling existing bins,
    # as suggested by the performance of the top-ranked heuristics.
    # A bin is considered "already used" if its current remaining capacity is less than the full bin capacity.
    already_used_mask = bins_remain_cap[can_fit_mask] < BIN_CAPACITY
    current_priorities[already_used_mask] += CONSOLIDATION_BONUS

    # Assign the calculated priorities back to the main priorities array
    priorities[can_fit_mask] = current_priorities

    return priorities
```
