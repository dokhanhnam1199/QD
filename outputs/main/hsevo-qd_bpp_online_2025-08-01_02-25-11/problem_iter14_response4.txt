```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                bin_capacity: float,
                priority_no_fit: float = -np.inf,
                weight_remaining_cap: float = -1.0,
                used_bin_bonus: float = 0.001) -> np.ndarray:
    """Combines Best Fit with a subtle bonus for partially filled bins.

    Prioritizes bins offering the tightest fit, while slightly favoring
    already opened bins to encourage consolidation and reduce overall bin usage.
    """
    priorities = np.full_like(bins_remain_cap, priority_no_fit, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate the base priority using a "Best Fit" strategy:
    # A negative weight prioritizes bins that, after placing the item,
    # will have the smallest remaining capacity (i.e., tighter fit).
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = weight_remaining_cap * potential_remaining_cap

    # Apply a small bonus to bins that are already partially filled and can fit the item.
    # This encourages filling existing bins before opening new ones (those at full capacity).
    # A bin is considered 'partially filled' if its current remaining capacity is less than the bin's full capacity.
    partially_filled_mask = (bins_remain_cap[can_fit_mask] < bin_capacity)

    # Add the bonus to the scores of those bins that are both fitting AND partially filled.
    priorities[can_fit_mask][partially_filled_mask] += used_bin_bonus

    return priorities
```
