```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using Best Fit, with a significant bonus for exact fits and a penalty for creating tiny, unusable fragments.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if bins_remain_cap.size == 0:
        return priorities

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item
    # Calculate potential remaining capacity if item were placed
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Heuristic parameters (tuned for performance based on typical Bin Packing scenarios)
    EPSILON = 1e-9  # Tolerance for floating point comparisons (e.g., for exact zero)
    # Defines a 'tiny' fragment: a remaining capacity smaller than this (but non-zero) is penalized.
    # It's adaptive, as it's a fraction of the current item's size.
    TINY_FRAGMENT_THRESHOLD_FACTOR = 0.1 
    # A large positive bonus applied to exact fits to ensure they are always chosen first.
    EXACT_FIT_BONUS = 100.0  
    # A penalty applied to bins that would result in tiny, potentially unusable, remaining space.
    FRAGMENT_PENALTY = 0.5   

    # 1. Base Best Fit Strategy:
    # Prioritize bins that leave the smallest remaining capacity.
    # We negate the remaining capacity, so smaller (closer to zero) actual remainders
    # get a higher (less negative) priority score.
    priorities[can_fit_mask] = -potential_remaining_cap

    # 2. Apply Exact Fit Bonus:
    # Strongly favor bins that can be filled completely (remaining capacity near zero).
    # np.isclose is used to handle floating point inaccuracies when checking for exact zero.
    exact_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EPSILON)
    if np.any(exact_fit_mask):
        priorities[can_fit_mask][exact_fit_mask] += EXACT_FIT_BONUS

    # 3. Apply Adaptive Fragmentation Penalty:
    # Discourage creating very small, non-zero fragments that are likely too small
    # to be useful for future items (e.g., smaller than 10% of the current item's size).
    tiny_fragment_mask = (potential_remaining_cap > EPSILON) & \
                         (potential_remaining_cap < item * TINY_FRAGMENT_THRESHOLD_FACTOR)
    if np.any(tiny_fragment_mask):
        # Subtract the penalty from the base score, making these options less attractive.
        # This makes bins resulting in tiny fragments less preferred than those leaving
        # more substantial (or exact zero) remaining capacity.
        priorities[can_fit_mask][tiny_fragment_mask] -= FRAGMENT_PENALTY

    return priorities
```
