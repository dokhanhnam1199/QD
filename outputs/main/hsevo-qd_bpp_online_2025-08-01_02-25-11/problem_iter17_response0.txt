```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with a strong, adaptive bonus for exact fits, incentivizing bin completion.

    Prioritizes bins that achieve high fill levels, with a significant, item-scaled boost for perfect fits.
    """
    # Initialize all priorities to an extremely low value, ensuring bins that cannot
    # accommodate the item are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify which bins possess sufficient remaining capacity for the item.
    fits_mask = bins_remain_cap >= item

    # Calculate Best Fit base score for fitting bins.
    # This score, (2 * item - bins_remain_cap[fits_mask]), naturally maximizes the
    # effective filled capacity relative to the item's size, where smaller remainders
    # yield higher scores. An exact fit will receive a score equal to `item`.
    priorities[fits_mask] = 2 * item - bins_remain_cap[fits_mask]

    # Apply an explicit, strong, and adaptive bonus for exact fits.
    # This non-linear adjustment significantly elevates perfect fits, strongly incentivizing
    # bin completion and promoting high-quality space utilization as advised by the analysis.
    exact_fit_mask = bins_remain_cap[fits_mask] == item
    # The bonus is scaled by the item size to remain relevant across different item scales.
    # A multiplier (e.g., 1.5) ensures this bonus is substantial enough to make exact fits
    # the top priority over near-perfect fits that leave a small remainder.
    priorities[fits_mask][exact_fit_mask] += item * 1.5 # Adaptive Exact Fit Bonus

    return priorities
```
