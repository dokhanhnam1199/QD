```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims for a "Best Fit" strategy:
    It prioritizes bins that, after the item is placed, will have the smallest
    remaining capacity. This helps to 'tightly pack' items into existing bins,
    leaving larger capacities open for larger items or reducing fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # For fitting bins, we want to maximize the "tightness".
    # A smaller remaining capacity means a tighter fit.
    # To achieve this with argmax (which finds the maximum priority score),
    # we can use the negative of the potential_remaining_cap.
    # E.g., if remainders are [0.1, 0.5, 0.8], their negatives are [-0.1, -0.5, -0.8].
    # The max of negatives is -0.1, which corresponds to the smallest positive remainder 0.1.
    priorities[can_fit_mask] = -potential_remaining_cap

    return priorities
```
