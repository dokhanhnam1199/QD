```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid Fit prioritizing perfect fits and avoiding tiny remnants, with refined parameter scaling."""

    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        # No bin can fit the item, return -inf for all
        return priorities

    # Calculate remaining capacity if the item were placed
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # --- Refined Tunable Parameters ---
    # These parameters are scaled to be more robust, avoiding the overly aggressive
    # values identified as problematic in previous heuristics.

    # EPSILON_PERFECT_FIT: Tolerance for considering a bin "perfectly" filled.
    EPSILON_PERFECT_FIT = 1e-9

    # TINY_REMAINDER_THRESHOLD: Upper bound for "awkwardly" small remaining capacity.
    # If remaining capacity falls between EPSILON_PERFECT_FIT and this, a penalty applies.
    TINY_REMAINDER_THRESHOLD = 0.05

    # PERFECT_FIT_BONUS: Positive bonus for near-perfect fits.
    # Scaled to be significant (e.g., > 1.0 if bin capacity is 1.0) but not
    # disproportionately large compared to the base scores.
    PERFECT_FIT_BONUS = 1.5

    # TINY_REMAINDER_PENALTY: Negative penalty for tiny, fragmented remainders.
    # Scaled to be noticeable but not completely rejective.
    TINY_REMAINDER_PENALTY = 0.5

    # --- Apply the scoring logic ---
    # 1. Base Score: Best Fit (minimize remaining capacity)
    #    A smaller positive remaining capacity results in a larger (less negative) base score.
    current_priorities = -potential_remaining_cap

    # 2. Apply Perfect/Near-Perfect Fit Bonus
    perfect_fit_mask = potential_remaining_cap <= EPSILON_PERFECT_FIT
    current_priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Apply Tiny Remainder Penalty
    #    Avoid creating very small, likely unusable, empty space.
    tiny_remainder_mask = (potential_remaining_cap > EPSILON_PERFECT_FIT) & \
                          (potential_remaining_cap < TINY_REMAINDER_THRESHOLD)
    current_priorities[tiny_remainder_mask] -= TINY_REMAINDER_PENALTY

    # Assign calculated priorities back to the main priorities array
    priorities[can_fit_mask] = current_priorities

    return priorities
```
