```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with a consolidation bonus for partially filled bins.

    This heuristic promotes tighter packing by minimizing remaining capacity
    while encouraging reuse of existing bins to reduce fragmentation.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Assume a standard bin capacity, typically 1.0 for normalized problems.
    # This assumption aligns with common BPP setups and the analysis feedback
    # regarding robustly identifying 'used' bins.
    BIN_CAPACITY = 1.0
    CONSOLIDATION_BONUS = 1e-6 # A small, controlled bonus as per analysis

    # 1. Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return the default priorities (-inf)
    if not np.any(can_fit_mask):
        return priorities

    # 2. Base Priority: Best Fit (minimize remaining capacity)
    # A smaller potential_remaining_cap means a tighter fit.
    # We use negation so that argmax selects the smallest positive remainder.
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = -potential_remaining_cap

    # 3. Consolidation Bonus: Apply a small bonus to bins that are already
    # partially filled (i.e., not empty). This encourages filling existing
    # bins before opening new ones, promoting better bin utilization.
    is_not_empty_mask = bins_remain_cap < BIN_CAPACITY

    # Apply the bonus only to bins that can fit the item AND are not empty
    bonus_eligible_mask = can_fit_mask & is_not_empty_mask
    priorities[bonus_eligible_mask] += CONSOLIDATION_BONUS

    return priorities
```
