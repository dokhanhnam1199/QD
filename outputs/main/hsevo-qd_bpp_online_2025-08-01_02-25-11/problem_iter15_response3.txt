```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_total_capacity: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation introduces a hybrid strategy by combining a "Best Fit"
    approach with a "Fullness Preference" that uses a non-linear bonus.
    The goal is to not only find a bin where the item fits tightly (minimizing
    remaining capacity) but also to strongly prioritize bins that become
    very full or completely full after the item is placed. This encourages
    "closing" bins more effectively, aiming to reduce the total number of
    bins used by preventing many bins from being left with small, unusable
    residual capacities.

    The non-linear bonus term is designed to create an emergent property:
    a significant surge in priority for bins approaching full capacity.
    This moves beyond the simple linear or monotonic relationship of traditional
    Best Fit and integrates a more adaptive, context-aware decision-making
    process based on the resulting bin state.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_total_capacity: The maximum capacity of a single bin. This is crucial
                            for calculating the fill ratio. A default of 1.0 is
                            common if item sizes are normalized (e.g., between 0 and 1).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # 1. Identify bins where the item can physically fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity in these bins after placing the item
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # 2. Base Priority (Best Fit Component)
    # Smaller potential_remaining_cap (tighter fit) gets a higher priority.
    # We negate it because np.argmax will select the maximum priority score.
    base_priorities = -potential_remaining_cap

    # 3. Non-linear Fullness Bonus Component
    # This component adds a significant bonus when a bin approaches its total capacity
    # after the item is placed.
    
    # Calculate the amount of space filled in the bin after placing the item
    # This is (original_total_capacity - potential_remaining_cap)
    filled_amount_after = bin_total_capacity - potential_remaining_cap
    
    # Calculate the fill ratio (percentage of bin capacity filled) after placing the item
    # Use np.divide to safely handle potential division by zero if bin_total_capacity is 0
    # (though in BPP, bin_total_capacity should always be positive).
    fill_ratio_after = np.divide(filled_amount_after, bin_total_capacity,
                                 out=np.zeros_like(filled_amount_after, dtype=float),
                                 where=bin_total_capacity != 0)
    
    # Define parameters for the non-linear bonus. These can be tuned for performance.
    # K: Scaling factor for the bonus. A higher K makes the bonus more influential.
    # P: Exponent for the fill ratio. A higher P makes the bonus sharply increase
    #    only when fill_ratio_after is very close to 1. This creates a strong
    #    non-linear effect, rewarding near-perfect fills heavily.
    K = 100.0  # Emphasizes the fullness bonus significantly
    P = 4.0    # Creates a steep curve, strongly favoring bins that are almost full

    # Calculate the non-linear bonus
    fullness_bonus = K * (fill_ratio_after ** P)

    # 4. Combine Base Priority with Non-linear Fullness Bonus
    # The total priority for a fitting bin is its Best Fit score plus the fullness bonus.
    # This hybrid approach allows the heuristic to prefer tight fits, but also
    # strategically "complete" bins when an item can make them very full, even if
    # it's not the absolute tightest fit.
    priorities[can_fit_mask] = base_priorities + fullness_bonus

    return priorities
```
