```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority for bin selection, combining Best Fit, consolidation, and remainder utility.

    Prioritizes tight fits, encourages consolidation, rewards perfect fits, and discourages unusable small remainders.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    if fitting_bins_remain_cap.size == 0:
        return priorities # No bin can fit the item, return all -inf priorities

    # Calculate potential remaining capacity if item were placed in fitting bins
    potential_remaining_cap = fitting_bins_remain_cap - item

    # Base priority: Best Fit strategy (minimize remaining capacity)
    # Smaller remaining capacity (closer to 0) means a tighter fit, which is preferred.
    base_priorities_for_fitting_bins = -potential_remaining_cap

    # Heuristic parameters for nuanced prioritization
    # These values are chosen to be small, acting as tie-breakers or slight nudges,
    # without overriding the primary Best Fit strategy.
    USED_BIN_BONUS = 1e-6      # Bonus for filling an already opened bin (consolidation)
    PERFECT_FIT_BONUS = 2e-6   # Additional bonus for an exact fit, rewarding optimal packing
    DUST_THRESHOLD = 0.01 * bin_capacity # Threshold for very small, potentially unusable remainders
    DUST_PENALTY = -5e-7       # Penalty for leaving "dust" (tiny, hard-to-fill) gaps

    # Apply consolidation bonus to already used bins
    # A bin is 'used' if its remaining capacity is less than the full bin_capacity.
    is_used_bin_mask = ~np.isclose(fitting_bins_remain_cap, bin_capacity)
    base_priorities_for_fitting_bins[is_used_bin_mask] += USED_BIN_BONUS

    # Apply perfect fit bonus
    # Rewards bins where the item fills the bin completely (or very nearly).
    is_perfect_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=1e-9)
    base_priorities_for_fitting_bins[is_perfect_fit_mask] += PERFECT_FIT_BONUS

    # Apply dust remainder penalty
    # Penalizes bins that would be left with a very small, often unusable, amount of space.
    # This addresses a weakness of pure Best Fit that might create many "dust" bins.
    is_dust_remainder_mask = (potential_remaining_cap > 1e-9) & (potential_remaining_cap < DUST_THRESHOLD)
    base_priorities_for_fitting_bins[is_dust_remainder_mask] += DUST_PENALTY

    # Assign the calculated priorities back to the main priorities array for the fitting bins
    priorities[can_fit_mask] = base_priorities_for_fitting_bins

    return priorities
```
