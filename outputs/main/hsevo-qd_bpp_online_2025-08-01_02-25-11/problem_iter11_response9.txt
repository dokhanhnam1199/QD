```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with balanced incentives for perfect fills and fragment avoidance.

    Prioritizes filling bins completely, then minimizing remaining space,
    while gently penalizing "awkward" small remainders for robust packing.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        # No bin can fit the item, return -inf for all. External logic handles new bin creation.
        return priorities

    # Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # --- Refined Tunable Parameters for the Hybrid Fit Heuristic ---
    # These parameters are adjusted based on the analysis to be less aggressively
    # scaled, aiming for a more robust and generally applicable performance.
    # The goal is to provide clear preference without dominating the core Best Fit logic.

    # EPSILON_PERFECT_FIT: Tolerance for a "perfect" fit (remaining capacity very close to zero).
    EPSILON_PERFECT_FIT = 1e-9

    # TINY_REMAINDER_THRESHOLD: Upper bound for a "tiny" or "awkward" remaining capacity.
    # If remaining capacity falls between EPSILON_PERFECT_FIT and this, a penalty is applied.
    # Typically a small fraction of the bin's total capacity (e.g., 5%).
    TINY_REMAINDER_THRESHOLD = 0.05

    # PERFECT_FIT_BONUS: A moderate positive bonus for perfect/near-perfect fits.
    # Ensures perfect fits are highly preferred without overly distorting the best-fit continuum.
    # A value of 2.0 means a perfect fit (base score 0) becomes 2.0, making it clearly superior
    # to typical best-fit scores (which are usually between -1.0 and 0.0).
    PERFECT_FIT_BONUS = 2.0

    # TINY_REMAINDER_PENALTY: A moderate negative penalty for creating tiny, potentially unusable gaps.
    # This discourages fragmentation but doesn't make such bins entirely unselectable
    # if no significantly better options exist. A penalty of 2.0 means a tiny remainder
    # (e.g., base score -0.04) becomes -2.04, pushing it below most other options.
    TINY_REMAINDER_PENALTY = 2.0

    # --- Apply the scoring logic ---
    # 1. Base Score: Best Fit principle (minimize remaining capacity)
    #    A smaller positive remaining capacity results in a larger (less negative) base score.
    current_priorities = -potential_remaining_cap

    # 2. Perfect/Near-Perfect Fit Bonus
    #    Apply bonus to bins where remaining capacity is very close to zero.
    perfect_fit_mask = potential_remaining_cap <= EPSILON_PERFECT_FIT
    current_priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Tiny Remainder Penalty
    #    Apply penalty to bins that would be left with a small but non-zero, awkward space.
    #    Ensure these are not already considered perfect fits.
    tiny_remainder_mask = (potential_remaining_cap > EPSILON_PERFECT_FIT) & \
                          (potential_remaining_cap < TINY_REMAINDER_THRESHOLD)
    current_priorities[tiny_remainder_mask] -= TINY_REMAINDER_PENALTY

    # Assign the calculated priorities back to the main priorities array for fitting bins
    priorities[can_fit_mask] = current_priorities

    return priorities
```
