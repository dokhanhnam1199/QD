```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Combines Best Fit with a dynamic bonus for existing, more-filled bins.

    This heuristic prioritizes tight fits while adaptively encouraging the
    consolidation of items into bins that are already partially filled,
    promoting overall bin reduction.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # 1. Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Get remaining capacities for bins that can fit the item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # If no bins can fit, return the default -inf priorities
    if fitting_bins_remain_cap.size == 0:
        return priorities

    # 2. Base priority: Best Fit strategy (minimize remaining capacity)
    # A smaller potential_remaining_cap (closer to 0) means a tighter fit,
    # which is preferred. By taking the negative, we convert minimization to maximization.
    potential_remaining_cap = fitting_bins_remain_cap - item
    base_priorities = -potential_remaining_cap

    # 3. Dynamic Consolidation Bonus:
    # Reward using bins that are already somewhat filled. The bonus scales
    # with how much capacity is already used in the bin. This encourages
    # finishing off bins and is "adaptive" to the current state of the bin.
    # A small scaling factor ensures Best Fit remains the primary determinant.
    used_bin_scaling_factor = 1e-5

    # Calculate current filled amount for fitting bins
    current_filled_amount = bin_capacity - fitting_bins_remain_cap

    # Identify "used" bins: those with some content, robustly checking for near-zero filled amount.
    is_used_bin_mask = current_filled_amount > np.finfo(float).eps * 10
    
    # Calculate bonus: scales with how much is already filled in the bin, applied only to used bins.
    dynamic_bonus = np.zeros_like(fitting_bins_remain_cap)
    dynamic_bonus[is_used_bin_mask] = used_bin_scaling_factor * current_filled_amount[is_used_bin_mask]
    
    # Combine base priorities (Best Fit) with the dynamic consolidation bonus
    priorities[can_fit_mask] = base_priorities + dynamic_bonus

    return priorities
```
