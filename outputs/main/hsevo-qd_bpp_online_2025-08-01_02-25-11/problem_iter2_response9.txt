```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for bin packing using Best Fit.
    Prioritizes bins that offer the tightest fit (smallest remaining capacity)
    for the item. Bins where the item does not fit are assigned the lowest priority.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # First, identify bins where the item can fit. This avoids unnecessary calculations.
    can_fit_mask = bins_remain_cap >= item

    # If there are any bins where the item fits, calculate their specific priorities.
    if np.any(can_fit_mask):
        # Calculate potential remaining capacity only for the bins that can fit the item.
        potential_remaining_cap_for_fit = bins_remain_cap[can_fit_mask] - item
        
        # Assign priority as the negation of remaining capacity for a 'tightest fit'.
        # Smaller remaining capacity results in a higher (less negative) priority.
        priorities[can_fit_mask] = -potential_remaining_cap_for_fit

    return priorities
```
