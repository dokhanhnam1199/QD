```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using Best Fit by minimizing remaining capacity. It first identifies
    valid bins to optimize calculations, then maximizes the negative of this residual space,
    assigning -inf to non-fitting bins.
    """
    # Initialize priorities to negative infinity, effectively marking all bins as
    # initially unsuitable until proven otherwise.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to efficiently identify only those bins where the item
    # can physically fit. This avoids unnecessary calculations for impossible placements.
    can_fit_mask = bins_remain_cap >= item

    # For the bins identified as capable of fitting the item, calculate the
    # hypothetical remaining space. This represents the 'tightness' of the fit.
    remaining_space_for_fitting_bins = bins_remain_cap[can_fit_mask] - item

    # Apply the Best Fit heuristic: a smaller remaining space is more desirable.
    # By taking the negative of the remaining space, we transform the 'minimize'
    # objective into a 'maximize' objective for priority scoring.
    priorities[can_fit_mask] = -remaining_space_for_fitting_bins

    return priorities
```
