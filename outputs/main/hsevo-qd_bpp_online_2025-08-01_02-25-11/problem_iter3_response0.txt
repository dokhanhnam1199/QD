```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims for a "Worst Fit" strategy.
    It prioritizes bins that, after the item is placed, will have the largest
    remaining capacity. This differs from "Best Fit" by not trying to fill
    bins as tightly as possible. Instead, it attempts to keep bin capacities
    more balanced, potentially leaving larger gaps in existing bins for future,
    larger items, or distributing items more evenly across the bins. This can
    be beneficial in scenarios where item sizes are highly varied or when
    avoiding fragmentation is a priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # For fitting bins, we want to maximize the "openness".
    # A larger potential_remaining_cap means a higher priority.
    # This directly implements the "Worst Fit" logic.
    priorities[can_fit_mask] = potential_remaining_cap

    return priorities
```
