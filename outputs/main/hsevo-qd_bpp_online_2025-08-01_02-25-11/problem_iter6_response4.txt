```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation combines a "Best Fit" strategy with a strong
    "Consolidation" bonus. It aims to fill existing, partially-used bins
    before opening new ones or using currently empty bins.

    Specifically, it prioritizes:
    1. Bins that are *already partially filled* (i.e., their remaining capacity
       is less than the maximum observed remaining capacity among all bins,
       implying they've already received some items).
    2. Among partially-filled bins, it selects the one that results in the
       smallest remaining capacity (Best Fit).
    3. Among "empty" bins (those with the maximum observed remaining capacity),
       it selects the one that results in the smallest remaining capacity (Best Fit).

    The consolidation bonus encourages filling up existing bins before opening
    new ones, which is a common heuristic for minimizing the total number of bins
    in online bin packing problems.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    if len(bins_remain_cap) == 0:
        return np.array([], dtype=float)

    # Determine a proxy for the 'full' or 'max available' capacity among the current bins.
    # This value is used to distinguish "empty" (or maximally available) bins from
    # "partially-filled" (or less than maximally available) bins.
    # In an online BPP, new bins would typically start with a fixed 'full' capacity.
    # Assuming `np.max(bins_remain_cap)` represents this 'full' capacity (e.g., if new empty
    # bins are always present or have just been created with maximum capacity),
    # allows for adaptive categorization.
    BIN_CAPACITY_PROXY = np.max(bins_remain_cap)

    # The consolidation bonus ensures that any "partially-filled" bin (one whose
    # remaining capacity is less than BIN_CAPACITY_PROXY) receives a higher score
    # than any "empty" bin (one whose remaining capacity is BIN_CAPACITY_PROXY).
    # The magnitude of base scores (from Best Fit) is at most BIN_CAPACITY_PROXY.
    # Adding a bonus slightly larger than BIN_CAPACITY_PROXY guarantees this preference.
    CONSOLIDATION_BONUS = BIN_CAPACITY_PROXY + 0.01

    # Initialize all priorities to negative infinity. This ensures that any bin
    # where the item cannot fit will have the lowest possible priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # 1. Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return the initialized priorities (-inf for all).
    if not np.any(can_fit_mask):
        return priorities

    # Filter remaining capacities for only those bins where the item can fit
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate the potential remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = fitting_bins_remain_cap - item

    # Base priority: Best Fit.
    # We want to minimize the remaining capacity, so a smaller remaining capacity
    # should result in a higher priority score. By taking the negative, `np.argmax`
    # will correctly select the bin that results in the smallest positive remainder.
    base_scores = -potential_remaining_cap

    # 2. Add consolidation bonus for "partially-filled" bins
    # A bin is considered partially-filled if its current remaining capacity is
    # strictly less than the `BIN_CAPACITY_PROXY`. These are the bins we want
    # to prioritize filling further.
    is_partially_filled_mask = fitting_bins_remain_cap < BIN_CAPACITY_PROXY

    # Create a temporary array to apply bonuses. This is necessary because
    # `base_scores` only contains scores for fitting bins, corresponding to
    # a subset of the original `bins_remain_cap`.
    temp_scores = np.copy(base_scores)
    temp_scores[is_partially_filled_mask] += CONSOLIDATION_BONUS

    # Assign the calculated scores back to the main priorities array for the fitting bins.
    priorities[can_fit_mask] = temp_scores

    return priorities
```
