```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority based on a hybrid strategy: primarily Best Fit,
    with a consolidation bonus for used bins, and a minor preference
    for balanced remaining capacities.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if bins_remain_cap.size == 0:
        return priorities

    # Infer BIN_CAPACITY: Assumes the maximum remaining capacity represents a full bin.
    # This is a common heuristic in online BPP when true BIN_CAPACITY is not an input.
    BIN_CAPACITY = np.max(bins_remain_cap)
    if BIN_CAPACITY <= 0 and item > 0: # If all bins appear full or invalid for positive items.
        return priorities

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item
    if not np.any(can_fit_mask):
        return priorities # No bin can accommodate the item.

    # Extract relevant data for fitting bins.
    fitting_bins_current_cap = bins_remain_cap[can_fit_mask]
    potential_remaining_cap = fitting_bins_current_cap - item

    # Component 1: Best Fit (primary driver)
    # Prioritizes bins that result in the smallest remaining capacity.
    # Scores are negative so that `argmax` selects the smallest positive remainder.
    best_fit_scores = -potential_remaining_cap

    # Component 2: Consolidation Bonus (from analysis of top heuristic)
    # Adds a small bonus to bins that are already partially filled. This encourages
    # filling existing bins before opening new ones, promoting consolidation.
    is_used_fitting_bin_mask = (fitting_bins_current_cap < BIN_CAPACITY)
    used_bin_bonus_value = 0.001 # A small, positive bonus.
    best_fit_scores[is_used_fitting_bin_mask] += used_bin_bonus_value

    # Component 3: Target Remainder Influence (from 'worse' heuristic, but re-weighted)
    # Aims to subtly bias towards bins that leave a 'useful' or 'balanced' amount of space
    # after the item is placed. This component is given a very low weight.
    ideal_remainder_ratio = 0.25 # A typical ratio for target remainder (can be tuned).
    target_remainder_value = BIN_CAPACITY * ideal_remainder_ratio
    # Score is negative absolute difference, so values closer to target get higher scores.
    target_remainder_scores = -np.abs(potential_remaining_cap - target_remainder_value)

    # Combine components: Best Fit is dominant, Target Remainder is a minor fine-tuner.
    weight_best_fit = 1.0
    weight_target_remainder = 0.0001 # Very small weight to prevent it from overriding Best Fit.

    final_scores_for_fitting_bins = \
        (weight_best_fit * best_fit_scores) + \
        (weight_target_remainder * target_remainder_scores)

    # Assign calculated scores back to the original `priorities` array using the mask.
    priorities[can_fit_mask] = final_scores_for_fitting_bins

    return priorities
```
