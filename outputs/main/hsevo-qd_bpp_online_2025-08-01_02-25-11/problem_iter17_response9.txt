```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with Non-linear Bonuses/Penalties for improved bin consolidation and fragmentation avoidance.
    Prioritizes exact fits and penalizes creating awkward, hard-to-fill remaining capacities, especially relative to item size."""

    # Initialize priorities to a very low value (-inf) for bins where the item cannot fit.
    # This ensures only valid bins are considered for selection, effectively implementing a 'no-fit' penalty.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can physically fit (remaining capacity >= item size).
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return the initialized priorities (all -inf).
    if not np.any(can_fit_mask):
        return priorities

    # Extract remaining capacities for only the fitting bins.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate potential remaining capacity if the item were placed in these bins.
    potential_remaining_cap = fitting_bins_remain_cap - item

    # --- Core Priority: Best Fit Component (Combines Best Fit from v0 and v1's core idea) ---
    # We negate the potential remaining capacity. This means smaller remaining capacities
    # (closer to zero) result in higher (less negative) priority scores.
    # This effectively uses a weight of -1.0 for remaining capacity, which was empirically
    # found to be effective (outperforming parameterized weights in analysis).
    calculated_priorities = -potential_remaining_cap

    # --- Non-linear Bonuses and Penalties (from v0, refined based on analysis) ---

    # Define thresholds and constants for non-linear adjustments.
    EXACT_FIT_TOLERANCE = 1e-9  # Small tolerance for float comparisons to zero.
    EXACT_FIT_BONUS = 1000.0    # A large bonus to ensure perfect fits are top priority.
    FRAGMENTATION_PENALTY_FACTOR = 5.0 # Strength of the penalty for creating fragmented space.

    # 1. Exact Fit Bonus: A significant, discrete bonus for perfect fits.
    # This strongly encourages complete bin utilization and closure, minimizing new bins.
    exact_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EXACT_FIT_TOLERANCE)
    calculated_priorities[exact_fit_mask] += EXACT_FIT_BONUS

    # 2. Fragmentation Penalty: Penalizes creating small, non-zero remnants.
    # This is adaptive: the penalty scales with how close the remainder is to the current item's size.
    # It discourages leaving "awkward" space that is difficult to fill later, especially
    # space smaller than or similar to the item just placed.
    if item > EXACT_FIT_TOLERANCE: # Ensure item size is positive to avoid division by zero.
        # Define the "fragmentation zone": non-zero remainders less than or equal to the item's size.
        fragment_zone_mask = (potential_remaining_cap > EXACT_FIT_TOLERANCE) & \
                             (potential_remaining_cap <= item)

        if np.any(fragment_zone_mask):
            # Normalize the remaining capacity within this zone by the item's size.
            # This makes the penalty adaptive to the scale of the current item.
            normalized_fragment_rem = potential_remaining_cap[fragment_zone_mask] / item

            # Apply a penalty that increases (becomes more negative) as the normalized remainder
            # approaches 1. This strongly discourages leaving space just under the current item's size.
            penalty = -FRAGMENTATION_PENALTY_FACTOR * normalized_fragment_rem
            calculated_priorities[fragment_zone_mask] += penalty

    # Assign the calculated priorities to the fitting bins in the main array.
    priorities[can_fit_mask] = calculated_priorities

    return priorities
```
