```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Best Fit Heuristic: Prioritizes bins that will have the smallest remaining capacity
    after accommodating the item. Infeasible bins are given the lowest priority.
    """
    # Initialize all priorities to negative infinity, representing an
    # impossible or undesirable fit by default.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that can physically contain the item.
    can_fit_mask = bins_remain_cap >= item

    # For these eligible bins, calculate the capacity that would remain
    # if the item were placed in them.
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Assign priority based on the negative of the remaining capacity.
    # A smaller remaining capacity results in a less negative (higher) priority score,
    # effectively favoring the "tightest" fits.
    priorities[can_fit_mask] = -potential_remaining_cap

    return priorities
```
