```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes Best Fit, adding a small bonus for partially-filled bins.
    This encourages consolidating items into existing bins, delaying new bin opening,
    and promoting a compact overall packing."""

    # Initialize priorities to negative infinity, meaning no bin is initially preferred.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Handle the edge case where no bins are provided or the array is empty.
    if bins_remain_cap.size == 0:
        return priorities

    # Infer the total BIN_CAPACITY from the maximum remaining capacity observed.
    # This assumes at least one bin is (or was) at full capacity, providing a reference.
    BIN_CAPACITY = np.max(bins_remain_cap)
    # If BIN_CAPACITY is inferred as 0, it means all bins are full or non-existent, so no item can fit.
    if BIN_CAPACITY == 0:
        return priorities

    # Define a small, fixed bonus for bins that are already partially used.
    # This value is critical: it's small enough not to drastically change the Best Fit order,
    # but large enough to break ties and slightly favor existing bins over new (empty) ones.
    CONSOLIDATION_BONUS = 0.001

    # Create a boolean mask for bins where the current item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity for all bins that can fit the item,
    # *if* the item were placed in them.
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Apply the core "Best Fit" strategy: prioritize bins that will have the smallest
    # remaining capacity after the item is placed. This is achieved by taking the
    # negative of `potential_remaining_cap`, as `np.argmax` will then select the
    # value closest to zero (i.e., the smallest positive remainder).
    priorities[can_fit_mask] = -potential_remaining_cap

    # Apply the "consolidation bonus":
    # Identify bins that are currently partially filled (i.e., their remaining capacity
    # is less than the full BIN_CAPACITY) AND can fit the item.
    partially_filled_mask = (bins_remain_cap < BIN_CAPACITY) & can_fit_mask
    
    # Add the small bonus to the priorities of these partially-filled bins.
    # This subtly encourages filling up existing bins before opening new ones (which
    # would typically have a remaining capacity equal to BIN_CAPACITY).
    priorities[partially_filled_mask] += CONSOLIDATION_BONUS

    return priorities
```
