```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, max_bin_capacity: float) -> np.ndarray:
    """Prioritizes bins combining best fit, strong completion incentives,
    multi-layered fragmentation penalties (exact, problematic, and awkward mid-range),
    and a strategic bonus for leaving highly useful, large remaining space.
    Emphasizes state-aware management of bin characteristics by considering
    the bin's initial fill level and its remaining capacity relative to the
    maximum bin capacity.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit (capacity >= item size)
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return priorities initialized to -inf
    if not np.any(can_fit_mask):
        return priorities

    # Extract capacities for only the fitting bins
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate potential remaining capacity if the item were placed
    potential_remaining_cap = fitting_bins_remain_cap - item

    # Calculate the initial fill level of the bins before placing the item.
    # This provides 'state-awareness' about how full a bin already is.
    initial_bin_fill = max_bin_capacity - fitting_bins_remain_cap

    # --- Core Priority Calculation (Best Fit component) ---
    # We negate the potential remaining capacity so that a smaller remainder
    # results in a higher (less negative) priority score.
    calculated_priorities = -potential_remaining_cap

    # --- Hybrid/Non-linear/Adaptive Components ---

    # Tolerance for floating point comparisons to zero
    EXACT_FIT_THRESHOLD = 1e-9

    # For perfect fits (zero remainder), assign highest possible priority (infinity).
    # This ensures exact fits are always chosen first.
    perfect_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EXACT_FIT_THRESHOLD)
    if np.any(perfect_fit_mask):
        calculated_priorities[perfect_fit_mask] = np.inf

    # 1. Aggressive Near-Exact Fit Bonus (Exponential Decay):
    # This provides a very strong, non-linear incentive for bins that can be
    # almost perfectly filled, with the bonus decaying rapidly as remainder grows.
    # This specifically targets small, positive remainders.
    NEAR_EXACT_FIT_BONUS_MAGNITUDE = 5000.0  # Max bonus for very close fit
    NEAR_EXACT_FIT_BONUS_DECAY = 50.0       # Steepness of the exponential decay

    # Apply this bonus for very small non-zero remainders (e.g., less than 10% of item size)
    # Ensure potential_remaining_cap > EXACT_FIT_THRESHOLD to exclude perfect fits (handled above)
    near_exact_mask = (potential_remaining_cap > EXACT_FIT_THRESHOLD) & \
                      (potential_remaining_cap < 0.1 * item) # Or a fixed small absolute threshold

    if np.any(near_exact_mask):
        # Bonus: A * exp(-B * remainder)
        bonus = NEAR_EXACT_FIT_BONUS_MAGNITUDE * np.exp(-NEAR_EXACT_FIT_BONUS_DECAY * potential_remaining_cap[near_exact_mask])
        calculated_priorities[near_exact_mask] += bonus

    # 2. Bin Completion Bonus (State-Aware):
    # Rewards using a bin that is already significantly full AND placing the item
    # results in a very small remainder, effectively "closing" a highly-filled bin.
    # This complements the near-exact fit bonus by considering the bin's initial state
    # (i.e., it was already nearly full).
    BIN_COMPLETION_BONUS_MAGNITUDE = 2000.0
    MIN_INITIAL_FILL_RATIO = 0.7  # Bin must be at least 70% full initially
    MAX_FINAL_REMAINDER_FOR_COMPLETION = 0.05 * max_bin_capacity # Final remainder must be small (e.g., <= 5% of bin capacity)

    completion_candidate_mask = (initial_bin_fill / max_bin_capacity >= MIN_INITIAL_FILL_RATIO) & \
                                (potential_remaining_cap <= MAX_FINAL_REMAINDER_FOR_COMPLETION) & \
                                (potential_remaining_cap > EXACT_FIT_THRESHOLD) # Exclude perfect fits as they get infinity

    if np.any(completion_candidate_mask):
        calculated_priorities[completion_candidate_mask] += BIN_COMPLETION_BONUS_MAGNITUDE

    # 3. Gaussian Fragmentation Penalty ("Valley of Despair"):
    # Applies a strong, non-linear penalty for leaving "awkward" small-to-medium
    # remnants that are difficult to fill, peaking around a specific problematic
    # remainder size (e.g., 40% of the item's size).
    if item > EXACT_FIT_THRESHOLD: # Penalty only relevant for positive item sizes
        GAUSSIAN_PENALTY_AMPLITUDE = 200.0  # Strength of the penalty
        GAUSSIAN_PENALTY_CENTER_RATIO = 0.4 # E.g., 40% of item's size
        GAUSSIAN_PENALTY_SPREAD = 0.1 * item # Standard deviation, adaptive to item size

        # Define the range where this penalty is relevant (non-zero up to 1.5 * item)
        penalty_zone_mask = (potential_remaining_cap > EXACT_FIT_THRESHOLD) & \
                            (potential_remaining_cap <= 1.5 * item)

        if np.any(penalty_zone_mask):
            target_fragment_remainder = GAUSSIAN_PENALTY_CENTER_RATIO * item
            diff_sq = (potential_remaining_cap[penalty_zone_mask] - target_fragment_remainder)**2
            # Apply a negative Gaussian penalty: -A * exp(-(x - mu)^2 / (2 * sigma^2))
            penalty = -GAUSSIAN_PENALTY_AMPLITUDE * np.exp(-diff_sq / (2 * (GAUSSIAN_PENALTY_SPREAD + EXACT_FIT_THRESHOLD)**2))
            calculated_priorities[penalty_zone_mask] += penalty

    # 4. Mid-Range "Awkward Space" Penalty (Quadratic/Triangular-like):
    # This targets a broader range of "awkward" remainders that are too large to be
    # simple fragments but too small to be easily useful for another large item.
    # It discourages leaving a bin with a remaining capacity that is a significant,
    # hard-to-utilize fraction of the *total bin capacity*.
    AWKWARD_PENALTY_AMPLITUDE = 150.0
    AWKWARD_PENALTY_CENTER_RATIO = 0.5 # Penalty peaks when remainder is around 50% of bin capacity
    AWKWARD_PENALTY_SPREAD_RATIO = 0.3 # Defines the "width" of the awkward zone around the center

    # Convert potential_remaining_cap to a ratio of max_bin_capacity
    remainder_ratio = potential_remaining_cap / max_bin_capacity

    # Mask for the awkward zone (e.g., between 20% and 80% of bin capacity)
    # This range can be adjusted, for example, based on AWKWARD_PENALTY_CENTER_RATIO +/- AWKWARD_PENALTY_SPREAD_RATIO
    awkward_zone_mask = (remainder_ratio > 0.20) & (remainder_ratio < 0.80)

    if np.any(awkward_zone_mask):
        # Calculate a penalty based on distance from the center of the awkward zone.
        # Max penalty at center, linearly decreasing to zero at edges defined by spread.
        distances = np.abs(remainder_ratio[awkward_zone_mask] - AWKWARD_PENALTY_CENTER_RATIO)
        # Ensure penalty is only applied within the defined spread, and is negative.
        penalty_factor = 1 - (distances / (AWKWARD_PENALTY_SPREAD_RATIO + EXACT_FIT_THRESHOLD))
        penalty = -AWKWARD_PENALTY_AMPLITUDE * np.maximum(0, penalty_factor)
        calculated_priorities[awkward_zone_mask] += penalty

    # 5. Useful Large Space Bonus (Logarithmic):
    # Incentivizes leaving a bin with a significantly large remaining capacity
    # (e.g., enough for another item of similar size or a substantial portion of bin capacity).
    # This encourages maintaining flexible bins that can accommodate future larger items,
    # with diminishing returns for increasingly large space.
    USEFUL_SPACE_BONUS_FACTOR = 10.0 # Magnitude of this bonus
    # Threshold for what's considered "useful large space", relative to max_bin_capacity.
    MIN_USEFUL_SPACE_FOR_BONUS_RATIO = 0.70 # Remainder must be at least 70% of max bin capacity

    large_useful_mask = potential_remaining_cap >= MIN_USEFUL_SPACE_FOR_BONUS_RATIO * max_bin_capacity

    if np.any(large_useful_mask):
        # Logarithmic bonus: scales with remaining capacity but with diminishing returns.
        # Use log1p (log(1+x)) for numerical stability, to handle small values gracefully.
        bonus = USEFUL_SPACE_BONUS_FACTOR * np.log1p(potential_remaining_cap[large_useful_mask])
        calculated_priorities[large_useful_mask] += bonus

    # Assign the calculated priorities to the fitting bins in the main array
    priorities[can_fit_mask] = calculated_priorities

    return priorities
```
