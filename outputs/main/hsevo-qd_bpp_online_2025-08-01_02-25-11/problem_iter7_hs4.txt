import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                 unfit_bin_priority: float = -9.327025043014011e+17,
                 tightness_factor: float = -0.9397946317833825) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims for a "Best Fit" strategy:
    It prioritizes bins that, after the item is placed, will have the smallest
    remaining capacity. This helps to 'tightly pack' items into existing bins,
    leaving larger capacities open for larger items or reducing fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        unfit_bin_priority: The priority score assigned to bins where the item cannot fit.
                            Defaults to -np.inf, ensuring these bins are never chosen.
        tightness_factor: A factor applied to the potential remaining capacity.
                          - A negative value (e.g., -1.0 for Best Fit) prioritizes
                            bins with smaller remaining capacity.
                          - A positive value (e.g., 1.0 for Worst Fit) prioritizes
                            bins with larger remaining capacity.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, unfit_bin_priority, dtype=float)

    # Find bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Apply the tightness factor to prioritize according to the strategy
    # A negative tightness_factor (e.g., -1.0) makes smaller remaining capacities
    # result in larger (less negative) priority scores, thus prioritizing them.
    # A positive tightness_factor (e.g., 1.0) makes larger remaining capacities
    # result in larger priority scores.
    priorities[can_fit_mask] = tightness_factor * potential_remaining_cap

    return priorities
