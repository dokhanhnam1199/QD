```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with exact fit bonus, a non-linear "valley of despair"
    fragmentation penalty, and a consolidation bonus for partially filled bins.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit (capacity >= item size)
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return priorities initialized to -inf
    if not np.any(can_fit_mask):
        return priorities

    # Extract capacities for only the fitting bins
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate potential remaining capacity if the item were placed
    potential_remaining_cap = fitting_bins_remain_cap - item

    # --- Core Priority Calculation (Best Fit component) ---
    # Negate potential remaining capacity: smaller remainder -> higher score.
    calculated_priorities = -potential_remaining_cap

    # --- Hybrid/Non-linear/Adaptive Components ---

    # 1. Exact Fit Bonus: Strong, discrete bonus for perfect fits.
    EXACT_FIT_THRESHOLD = 1e-9  # Tolerance for floating point comparisons to zero
    EXACT_FIT_BONUS = 1000.0    # Large bonus ensures exact fits are top priority

    exact_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EXACT_FIT_THRESHOLD)
    calculated_priorities[exact_fit_mask] += EXACT_FIT_BONUS

    # 2. Fragmentation Penalty: Non-linear penalty to discourage "awkward" remainders.
    # Applies a negative Gaussian-like penalty, peaking at a specific problematic
    # remaining capacity (e.g., 40% of item size), creating a "valley of despair".
    if item > EXACT_FIT_THRESHOLD: # Apply only for positive item sizes
        FRAGMENT_PEAK_RATIO = 0.4 # Peak penalty when remaining capacity is 40% of item size
        FRAGMENT_PENALTY_MAGNITUDE = -50.0 # How strong the penalty is at its peak (more negative = worse)
        FRAGMENT_PENALTY_WIDTH_FACTOR = 0.2 # Controls the width/spread of the penalty curve relative to item size

        # Define the target remainder size for the peak penalty
        peak_remainder_size = FRAGMENT_PEAK_RATIO * item

        # Apply penalty to non-zero remainders, extending slightly beyond the item size
        # to capture the tails of the Gaussian penalty function.
        fragment_zone_mask = (potential_remaining_cap > EXACT_FIT_THRESHOLD) & \
                             (potential_remaining_cap <= 1.5 * item)

        if np.any(fragment_zone_mask):
            fragment_rem_caps = potential_remaining_cap[fragment_zone_mask]

            # Calculate sigma for the Gaussian. Use a small floor to prevent division by zero.
            sigma = item * FRAGMENT_PENALTY_WIDTH_FACTOR
            sigma_sq = max(sigma**2, EXACT_FIT_THRESHOLD) # Ensure sigma_sq is never zero

            # Penalty shaped like a negative Gaussian curve
            penalty = FRAGMENT_PENALTY_MAGNITUDE * np.exp(
                - (fragment_rem_caps - peak_remainder_size)**2 / (2 * sigma_sq)
            )
            calculated_priorities[fragment_zone_mask] += penalty

    # 3. Consolidation Bonus: Incentivize filling existing, partially used bins
    # to reduce the total number of bins opened.
    CONSOLIDATION_BONUS = 5.0 # A moderate bonus

    # Infer BIN_CAPACITY: Use the maximum remaining capacity if there's an "empty" bin,
    # otherwise default to 1.0 (common normalized bin size).
    # This heuristic assumes all new bins start with the same capacity.
    BIN_CAPACITY = np.max(bins_remain_cap) if np.any(bins_remain_cap > EXACT_FIT_THRESHOLD) else 1.0

    # A bin is "used" (partially filled) if its current capacity is less than the full bin capacity.
    # Exclude exact fits, as they receive a much higher, dedicated bonus.
    is_used_bin_mask_for_fitting = (fitting_bins_remain_cap < BIN_CAPACITY - EXACT_FIT_THRESHOLD) & ~exact_fit_mask
    calculated_priorities[is_used_bin_mask_for_fitting] += CONSOLIDATION_BONUS

    # Assign the calculated priorities back to the main array for fitting bins
    priorities[can_fit_mask] = calculated_priorities

    return priorities
```
