```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by the 'Best Fit' approach, we prioritize bins that, upon
    receiving the item, will have the smallest remaining capacity,
    thus ensuring a 'tightest fit' for our precious particles and
    minimizing wasted space, much like finding the precise energy levels
    for electrons in an atom. We assign a very low priority to bins
    where the item simply does not fit, as they are not viable candidates.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item were hypothetically placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities. By default, all bins are given a very low priority
    # (negative infinity) to ensure bins where the item does not fit are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the bins where the item can actually fit.
    can_fit_mask = potential_remaining_cap >= 0

    # For bins where the item fits, assign a priority based on the negation of the
    # potential remaining capacity. This way, a smaller positive remaining capacity
    # (indicating a tighter fit) results in a larger (less negative) priority score.
    # The bin with the highest priority will be the one leaving the least free space,
    # ensuring the most efficient use of our bin "matter."
    priorities[can_fit_mask] = -potential_remaining_cap[can_fit_mask]

    return priorities
```
