```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with a consolidation bias and adaptive remainder nudge.

    Prioritizes tight fits (Best Fit) while slightly favoring existing, partially-filled
    bins over new ones, and subtly nudging towards 'useful' remaining space.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if bins_remain_cap.size == 0:
        return priorities

    # Infer BIN_CAPACITY from the maximum remaining capacity among current bins.
    # This is crucial for distinguishing 'new' vs 'used' bins and scaling heuristics.
    # It assumes at least one "fresh" bin (with full capacity) is or was available.
    BIN_CAPACITY = np.max(bins_remain_cap)
    if BIN_CAPACITY == 0:
        return priorities # No item can fit anywhere if all bins have 0 capacity

    # Identify which bins have sufficient remaining capacity for the item.
    fits_mask = bins_remain_cap >= item

    # Calculate the base Best Fit score (from priority_v0)
    # This maximizes the effective filled capacity by minimizing the remainder.
    base_scores = 2 * item - bins_remain_cap[fits_mask]

    # --- Hybrid elements based on analysis and "Current self-reflection" ---

    # 1. Consolidation Bonus (derived from analysis of v0's effectiveness)
    # This subtly favors already-opened, partially-filled bins over a perfectly fresh (full) bin,
    # encouraging consolidation and delaying the opening of new bins.
    # A small fixed value ensures it acts as a tie-breaker or minor preference.
    EXISTING_BIN_BONUS = 0.001 # Small constant value to nudge, not dominate.

    # Apply bonus if the bin's current capacity is less than the maximum (BIN_CAPACITY),
    # implying it's an existing, partially used bin.
    is_existing_bin = (bins_remain_cap[fits_mask] < BIN_CAPACITY)
    consolidation_bonus = np.zeros_like(base_scores)
    consolidation_bonus[is_existing_bin] = EXISTING_BIN_BONUS

    # 2. Adaptive Remainder Nudge (inspired by priority_v1's target remainder idea, but more subtle)
    # Calculate the remaining capacity if the item were placed.
    potential_remaining_cap = bins_remain_cap[fits_mask] - item

    # Introduce a small penalty for creating "tiny" remainders (e.g., < 5% of BIN_CAPACITY)
    # that might be difficult to use for subsequent items, unless it's a perfect fit (remainder 0).
    TINY_REMAINDER_THRESHOLD = 0.05 * BIN_CAPACITY
    TINY_REMAINDER_PENALTY = 0.0005 # Even smaller constant value for fine-tuning.

    # Apply penalty if the potential remaining capacity is tiny (but not zero, which is ideal)
    is_tiny_remainder = (potential_remaining_cap > 0) & (potential_remaining_cap < TINY_REMAINDER_THRESHOLD)
    remainder_nudge = np.zeros_like(base_scores)
    remainder_nudge[is_tiny_remainder] = -TINY_REMAINDER_PENALTY

    # Combine all scoring components
    priorities[fits_mask] = base_scores + consolidation_bonus + remainder_nudge

    return priorities
```
