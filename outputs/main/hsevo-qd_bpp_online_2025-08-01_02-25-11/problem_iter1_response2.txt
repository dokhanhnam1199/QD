```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    
    As Isaac Newton, I postulate that efficiency is paramount. We must strive
    to achieve the most complete filling of each bin, thereby minimizing the
    number of receptacles required. This method, which I term 'Best Fit',
    prioritizes the bin that, after receiving the item, will have the smallest
    remaining capacity. This ensures a tighter packing and leaves less
    undesirable void.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more desirable bin. Bins where the item
        does not fit are assigned a very low (negative infinity) priority.
    """
    # Initialize all priorities to a state of utter undesirability (negative infinity).
    # This ensures that any bin where the item cannot fit will not be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Ascertain which bins possess the capacity to accommodate the item.
    fits_mask = bins_remain_cap >= item

    # For those bins where the item demonstrably fits, calculate the theoretical
    # remaining capacity should the item be placed within.
    potential_remaining_cap = bins_remain_cap[fits_mask] - item

    # To embody the 'Best Fit' principle, we desire to minimize this
    # 'potential_remaining_cap'. A smaller positive remainder is superior.
    # Therefore, we assign priority as the negation of this remainder.
    # A perfect fit (remainder = 0) yields a priority of 0, which is the
    # highest possible score for a valid placement. Larger remainders result
    # in more negative scores, thus lower priority.
    priorities[fits_mask] = -potential_remaining_cap

    return priorities
```
