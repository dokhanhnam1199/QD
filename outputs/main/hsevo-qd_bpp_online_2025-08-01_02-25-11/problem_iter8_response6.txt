```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                bin_capacity: float = 1.0, # Default for typical BPP, assumes items are scaled
                priority_no_fit: float = -7469923285.667422, # Tuned parameter from high-performing heuristic
                weight_remaining_cap: float = -0.493607220196141, # Tuned parameter for Best Fit from high-performing heuristic
                consolidation_bonus_value: float = 0.01 # Magnitude of bonus based on analysis (0.01 was effective)
               ) -> np.ndarray:
    """Combines Best Fit with a consolidation bonus to favor existing, partially filled bins.
    Uses tuned parameters for Best Fit weighting from a high-performing heuristic.
    """
    # Initialize priorities, setting a very low score for bins where the item cannot fit
    priorities = np.full_like(bins_remain_cap, priority_no_fit, dtype=float)

    # Create a mask for bins where the item can physically fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate the "Best Fit" score for eligible bins:
    # This prioritizes bins that will have the smallest remaining capacity after the item is placed.
    # A negative `weight_remaining_cap` ensures smaller remaining capacities result in higher (less negative) scores.
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = weight_remaining_cap * potential_remaining_cap

    # Apply a "consolidation bonus" to favor already-used bins:
    # Identify bins that are currently in use (their remaining capacity is less than the full bin capacity)
    # AND can fit the current item. This encourages filling existing bins before opening new ones,
    # especially when Best Fit scores are otherwise very similar.
    is_used_mask = ~np.isclose(bins_remain_cap, bin_capacity, atol=1e-9) # True for bins that are not completely empty

    # Combine masks: must be able to fit AND be an already-used bin
    consolidate_mask = can_fit_mask & is_used_mask
    priorities[consolidate_mask] += consolidation_bonus_value

    return priorities
```
