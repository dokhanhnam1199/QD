```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                priority_no_fit: float = -np.inf,
                weight_remaining_cap: float = -1.0,
                exact_fit_bonus: float = 1000.0,
                fragment_threshold_ratio: float = 0.1,
                fragment_penalty: float = 50.0) -> np.ndarray:
    """Prioritizes exact fits, penalizes adaptive fragmentation, and otherwise applies Best Fit.

    This heuristic rewards perfect bin fills, discourages tiny remaining spaces,
    and defaults to minimizing leftover capacity for general packing efficiency.
    """
    priorities = np.full_like(bins_remain_cap, priority_no_fit, dtype=float)

    can_fit_mask = bins_remain_cap >= item

    # Return default priorities if no bins can fit the item
    if not np.any(can_fit_mask):
        return priorities

    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    potential_remaining_cap = fitting_bins_remain_cap - item

    # Base Best Fit: Smaller remaining capacity (less negative score) is preferred.
    priorities[can_fit_mask] = weight_remaining_cap * potential_remaining_cap

    # Exact Fit Bonus: Strongly prioritize bins that will be perfectly filled.
    exact_fit_mask = (potential_remaining_cap == 0)
    if np.any(exact_fit_mask):
        priorities[can_fit_mask][exact_fit_mask] += exact_fit_bonus

    # Adaptive Fragmentation Penalty: Penalize small, positive remainders.
    # Threshold scales with the item's size.
    if item > 0:
        fragment_threshold = fragment_threshold_ratio * item
        fragment_mask = (potential_remaining_cap > 0) & (potential_remaining_cap < fragment_threshold)
        if np.any(fragment_mask):
            priorities[can_fit_mask][fragment_mask] -= fragment_penalty

    return priorities
```
