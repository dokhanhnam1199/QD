```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation aims for a "Hybrid Fit" strategy, building upon Best Fit
    by incorporating multi-objective considerations and non-linear scoring.
    It prioritizes:
    1.  **Perfect or Near-Perfect Fits:** Maximizing the chance of completely filling a bin
        to reduce the total number of active bins and eliminate fragmentation.
    2.  **Best Fit:** After perfect fits, it reverts to the standard Best Fit strategy
        of minimizing the remaining capacity.
    3.  **Fragment Avoidance:** It penalizes bins that, after placement, would be left
        with a very small, "awkward" amount of space that is unlikely to be useful
        for subsequent items (e.g., too small for most items, but not zero).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.
                         Assumes capacities and item sizes are normalized or
                         consistent in their units.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        # No bin can fit the item, return -inf for all (or new bin logic handled externally)
        return priorities

    # Calculate remaining capacity if the item were placed in fitting bins
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # --- Tunable Parameters for the Hybrid Fit Heuristic ---
    # These parameters are crucial for balancing the different objectives.
    # They might require tuning based on the specific distribution of item sizes
    # and bin capacity in your problem instance.

    # EPSILON_PERFECT_FIT: A small tolerance for floating point comparisons to
    # consider a bin "perfectly" filled. If remaining capacity is within this,
    # it's considered a perfect fit.
    EPSILON_PERFECT_FIT = 1e-9

    # TINY_REMAINDER_THRESHOLD: The upper bound for what is considered a "tiny"
    # or "awkward" remaining capacity. If a bin's remaining capacity falls
    # between EPSILON_PERFECT_FIT and this threshold, it incurs a penalty.
    # This value typically corresponds to a small fraction of the bin's total capacity.
    # For example, if bin capacity is 1.0, 0.05 means 5% of capacity.
    TINY_REMAINDER_THRESHOLD = 0.05

    # PERFECT_FIT_BONUS: A large positive bonus applied to bins that achieve
    # a perfect or near-perfect fit. This should be high enough to make perfect
    # fits almost always the top priority.
    PERFECT_FIT_BONUS = 1000.0

    # TINY_REMAINDER_PENALTY: A significant negative penalty applied to bins
    # that are left with a tiny, potentially unusable remainder. This pushes
    # the algorithm away from creating such fragmented bins.
    TINY_REMAINDER_PENALTY = 500.0

    # --- Apply the scoring logic ---
    # 1. Base Score: Best Fit (minimize remaining capacity)
    #    A smaller positive remaining capacity results in a larger (less negative) base score.
    current_priorities = -potential_remaining_cap

    # 2. Perfect/Near-Perfect Fit Bonus
    #    Identify bins where remaining capacity is very close to zero.
    perfect_fit_mask = potential_remaining_cap <= EPSILON_PERFECT_FIT
    current_priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Tiny Remainder Penalty
    #    Identify bins where remaining capacity is small but not zero (a "dead zone").
    #    Ensure these are not already marked as perfect fits.
    tiny_remainder_mask = (potential_remaining_cap > EPSILON_PERFECT_FIT) & \
                          (potential_remaining_cap < TINY_REMAINDER_THRESHOLD)
    current_priorities[tiny_remainder_mask] -= TINY_REMAINDER_PENALTY

    # Assign the calculated priorities back to the main priorities array
    priorities[can_fit_mask] = current_priorities

    return priorities
```
