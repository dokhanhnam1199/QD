```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation extends "Best Fit" with a "Consolidation Bonus".
    It prioritizes bins that, after the item is placed, will have the smallest
    remaining capacity (Best Fit). Additionally, it gives a linear bonus
    to bins that are already partially filled (i.e., not completely empty),
    to encourage consolidation and avoid opening new bins prematurely.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.
                         This array typically includes capacities of active bins
                         and potentially one or more 'empty' bins representing
                         new bins that can be opened.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # A small positive constant bonus to encourage consolidation into existing bins.
    # This value should be carefully chosen. It should be small enough to
    # generally not override the primary "Best Fit" principle, but large enough
    # to consistently break ties or influence choices when potential remaining
    # capacities are very close.
    CONSOLIDATION_BONUS = 0.01

    # Initialize priorities for all bins to negative infinity.
    # This ensures that bins where the item cannot fit will not be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Handle the edge case where there are no bins to consider.
    if len(bins_remain_cap) == 0:
        return priorities

    # Infer the maximum capacity of an 'empty' bin from the input array.
    # This assumes that if a new bin is to be opened, its capacity
    # (or equivalent to a fresh bin's capacity) is present in `bins_remain_cap`.
    # If all bins are already partially filled, this will consider the least
    # filled bin as the 'reference empty' for bonus purposes, promoting consolidation
    # into the most-filled (least remaining capacity) bins among the current set.
    BIN_CAPACITY = np.max(bins_remain_cap)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the priorities array with -np.inf.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate the remaining capacity if the item were placed in each fitting bin.
    # This is the core of the "Best Fit" strategy.
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Base score: The goal is to minimize the remaining capacity, which means
    # maximizing the negative of the remaining capacity. This creates a monotonic
    # scoring where a smaller positive remainder yields a higher priority score.
    base_scores = -potential_remaining_cap

    # Determine which of the fitting bins are "partially filled" (not completely empty).
    # A bin is considered partially filled if its current remaining capacity
    # is less than the inferred full bin capacity (BIN_CAPACITY).
    is_partially_filled_mask = (bins_remain_cap[can_fit_mask] < BIN_CAPACITY)

    # Initialize bonuses for fitting bins to zero.
    consolidation_bonuses = np.zeros_like(base_scores)

    # Apply the consolidation bonus only to the fitting bins that are partially filled.
    # This encourages using existing, non-empty bins before opening new ones.
    consolidation_bonuses[is_partially_filled_mask] = CONSOLIDATION_BONUS

    # The total priority for fitting bins is the sum of the base Best Fit score
    # and the consolidation bonus.
    priorities[can_fit_mask] = base_scores + consolidation_bonuses

    return priorities
```
