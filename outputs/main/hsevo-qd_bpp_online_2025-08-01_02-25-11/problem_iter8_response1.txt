```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using Best Fit, with a non-linear bonus for existing
    bins based on their current fill level to encourage consolidation.
    """
    # Base constant for the consolidation bonus. This value scales based on bin fill level.
    # It should be small enough not to completely override Best Fit, but large enough
    # to significantly influence choices among similar Best Fit candidates.
    CONSOLIDATION_BASE_BONUS = 0.02

    # Initialize priorities for all bins to negative infinity.
    # This ensures that bins where the item cannot fit will not be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Handle the edge case where there are no bins to consider.
    if len(bins_remain_cap) == 0:
        return priorities

    # Infer the maximum capacity of a 'fresh' bin from the input array.
    # This assumes that `bins_remain_cap` includes at least one entry representing
    # a completely empty bin (i.e., its full capacity).
    # If all bins are already partially filled, this will consider the largest
    # remaining capacity as the reference for full capacity.
    BIN_CAPACITY = np.max(bins_remain_cap)
    if BIN_CAPACITY == 0: # Avoid division by zero if all bins are reported as full
        return priorities

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the priorities array with -np.inf.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate the remaining capacity if the item were placed in each fitting bin.
    # This is the core of the "Best Fit" strategy: minimize the remaining space.
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # Base score: We want to maximize the negative of the remaining capacity.
    # A smaller positive remainder yields a higher priority score (closer to 0 or positive).
    base_scores = -potential_remaining_cap

    # Calculate the current fill level for the fitting bins.
    # This is the amount of space *already occupied* in the bin before placing the item.
    current_fill_level = BIN_CAPACITY - bins_remain_cap[can_fit_mask]

    # Normalize the fill level to a value between 0 and 1 (inclusive).
    # 0 means the bin is completely empty, 1 means it's completely full.
    normalized_fill_level = current_fill_level / BIN_CAPACITY

    # Apply a non-linear consolidation bonus.
    # The bonus is proportional to the bin's current fill level.
    # This encourages packing into bins that are already more utilized,
    # as they are closer to being "finished" or "closed off", promoting consolidation.
    # Completely empty bins will have a normalized_fill_level of 0 and thus receive no bonus.
    consolidation_bonuses = CONSOLIDATION_BASE_BONUS * normalized_fill_level

    # The total priority for fitting bins is the sum of the Best Fit score
    # and the dynamically scaled consolidation bonus.
    priorities[can_fit_mask] = base_scores + consolidation_bonuses

    return priorities
```
