```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes 'Best Fit' by minimizing remaining capacity, with a bonus for
    existing partially-filled bins to encourage consolidation and delay new bin opening.
    Infeasible bins are assigned negative infinity priority.
    """
    # Assume a standard bin capacity (e.g., 1.0 for normalized item sizes).
    # This value is crucial for distinguishing 'empty/fresh' bins from 'used' bins.
    BIN_CAPACITY = 1.0
    CONSOLIDATION_BONUS = 1e-6 # A small bonus to prioritize existing bins

    # Initialize all priorities to negative infinity; this ensures bins that
    # cannot accommodate the item are never considered.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Identify which bins have sufficient remaining capacity for the item.
    fits_mask = bins_remain_cap >= item

    # Calculate the Best Fit score for feasible bins.
    # The score is defined as the negative of the potential remaining capacity.
    # This way, minimizing remaining capacity translates to maximizing this score.
    # Example: If item=0.3, bin_cap=0.5 -> potential_rem_cap=0.2 -> score=-0.2
    # If item=0.3, bin_cap=1.0 -> potential_rem_cap=0.7 -> score=-0.7
    # -0.2 is greater than -0.7, correctly prioritizing the tighter fit.
    priorities[fits_mask] = -(bins_remain_cap[fits_mask] - item)

    # Apply a consolidation bonus to bins that are already partially filled
    # and can fit the item. This explicitly biases selection towards reusing
    # existing bins over opening new ones (represented by bins with full capacity).
    # A bin is 'used' if its remaining capacity is less than the full bin capacity.
    used_bins_mask = bins_remain_cap < BIN_CAPACITY

    # The bonus applies only to bins that are both feasible for the current item
    # AND have already been partially filled.
    bonus_mask = fits_mask & used_bins_mask

    priorities[bonus_mask] += CONSOLIDATION_BONUS

    return priorities
```
