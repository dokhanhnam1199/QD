```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns a priority score for each bin, guiding item placement in an online
    Bin Packing Problem. This heuristic builds upon the "Best Fit" strategy
    by incorporating non-linear bonuses and penalties based on the resulting
    bin fullness, aiming to achieve a more globally efficient packing.

    Key improvements and "outside-the-box" elements:
    1.  **Non-linear "Perfect Fit" Bonus:** Provides a significantly amplified
        priority for bins that become perfectly or almost perfectly full
        after placing the item. This moves beyond a linear preference for
        smaller remainders.
    2.  **"Small Fragment" Penalty:** Introduces a penalty for creating very
        small, non-zero remaining capacities (i.e., "awkward fragments").
        This is a non-monotonic preference, as it prefers a perfectly full
        bin (remainder 0) over a bin with a tiny remainder, and might even
        prefer a bin with a moderately larger, more useful remainder over
        one with a tiny, unusable remainder. This aims to reduce fragmentation.
    3.  **Hybrid Approach:** Combines the core principle of Best Fit
        (minimizing remaining capacity) with additional "meta-rules"
        that reflect a more nuanced understanding of desirable bin states.

    Args:
        item: Size of the item to be added to a bin.
        bins_remain_cap: A NumPy array containing the current remaining capacity
                         of each bin. Assumes all bins have a uniform total
                         capacity (e.g., 1.0) for relative calculations.

    Return:
        A NumPy array of the same size as `bins_remain_cap`, where each
        element is the priority score for the corresponding bin. The bin with
        the highest score will be selected. Bins where the item does not fit
        will have a score of -inf.
    """
    # Assuming a standard bin capacity for calculating relative fullness/fragments.
    # In most BPPs, this is implicitly 1.0 or explicitly defined.
    BIN_CAPACITY = 1.0 

    # --- Heuristic Tuning Parameters (Can be adjusted for specific problem instances) ---

    # Threshold for what is considered a "perfect" or "near-perfect" fit.
    # If remaining capacity is <= this value, the perfect fit bonus is applied.
    PERFECT_FIT_TOLERANCE = 1e-6 # Very small value to catch exact or near-exact fits

    # Magnitude of the bonus applied for a perfect/near-perfect fit.
    # A large value ensures these bins are highly preferred.
    PERFECT_FIT_BONUS_MAGNITUDE = 100.0

    # Upper bound for what is considered a "small fragment" remainder.
    # If remaining capacity is > PERFECT_FIT_TOLERANCE and < SMALL_FRAGMENT_THRESHOLD,
    # the small fragment penalty is applied.
    SMALL_FRAGMENT_THRESHOLD = 0.1 # e.g., 10% of bin capacity

    # Magnitude of the penalty for creating a "small fragment".
    # This value is scaled by how 'tiny' the fragment is within the threshold.
    SMALL_FRAGMENT_PENALTY_FACTOR = 0.5

    # -------------------------------------------------------------------------

    # Initialize priorities. Bins that cannot fit the item will remain -inf.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can physically fit
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the initialized priorities (all -inf for unfitting bins)
    if not np.any(can_fit_mask):
        return priorities

    # Calculate the remaining capacity if the item were placed in fitting bins
    # This will always be >= 0 due to `can_fit_mask`
    potential_remaining_cap = bins_remain_cap[can_fit_mask] - item

    # 1. Best Fit Core: Prioritize bins that result in the smallest remaining capacity.
    # This gives a baseline score where smaller remaining capacity means a higher (less negative) score.
    base_priorities = -potential_remaining_cap

    # 2. Non-linear "Perfect Fit" Bonus:
    # Identify bins where placing the item results in an almost perfectly full bin.
    # This is a strong, non-linear enhancement to the base priority.
    is_perfect_fit_mask = potential_remaining_cap <= PERFECT_FIT_TOLERANCE

    # Apply a fixed, large bonus to these highly desirable "perfect fit" scenarios.
    # This ensures they are selected over any other type of fit.
    base_priorities[is_perfect_fit_mask] += PERFECT_FIT_BONUS_MAGNITUDE

    # 3. "Small Fragment" Penalty:
    # Identify bins that, after placing the item, would be left with a very small
    # but non-zero remaining capacity. These "awkward fragments" are penalized
    # to discourage their creation, unless it's a perfect fit.
    is_small_fragment_mask = (potential_remaining_cap > PERFECT_FIT_TOLERANCE) & \
                             (potential_remaining_cap < SMALL_FRAGMENT_THRESHOLD)

    # Calculate the penalty. The penalty is larger for smaller fragments within the threshold.
    # This creates a non-monotonic priority: a bin with 0.05 remaining might be penalized
    # more than a bin with 0.15 remaining (outside the small fragment threshold),
    # even though Best Fit would normally prefer 0.05.
    if np.any(is_small_fragment_mask):
        # The penalty value decreases as potential_remaining_cap approaches SMALL_FRAGMENT_THRESHOLD
        # and increases as it approaches PERFECT_FIT_TOLERANCE.
        penalty_scale = (SMALL_FRAGMENT_THRESHOLD - potential_remaining_cap[is_small_fragment_mask]) / SMALL_FRAGMENT_THRESHOLD
        small_fragment_penalty = SMALL_FRAGMENT_PENALTY_FACTOR * penalty_scale
        base_priorities[is_small_fragment_mask] -= small_fragment_penalty

    # Assign the calculated priorities back to the full array, only for fitting bins.
    priorities[can_fit_mask] = base_priorities

    return priorities
```
