```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for each bin, combining Best Fit with a significant consolidation bonus.

    Prioritizes tight fits while strongly preferring partially filled bins over
    opening new ones to reduce the total bin count. Assumes a normalized bin capacity of 1.0.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return -inf for all
    if not np.any(can_fit_mask):
        return priorities

    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate remaining capacity if item were placed (Best Fit component)
    potential_remaining_cap = fitting_bins_remain_cap - item
    base_priorities_fitting = -potential_remaining_cap # Negative to convert minimization to maximization

    # Apply a consolidation bonus to encourage filling existing, partially used bins.
    # Based on empirical analysis, a more substantial bonus (e.g., 0.01) is more effective.
    # Assume a standard bin capacity of 1.0 for normalized Bin Packing Problems.
    BIN_CAPACITY = 1.0
    CONSOLIDATION_BONUS = 0.01

    # A bin is considered 'used' if its remaining capacity is not equal to the full capacity.
    # Use np.isclose for robust floating-point comparison.
    is_used_bin_mask = ~np.isclose(fitting_bins_remain_cap, BIN_CAPACITY)

    # Apply the bonus only to bins that can fit the item AND are already used.
    # We apply the bonus to the scores of the fitting bins.
    current_fitting_scores = base_priorities_fitting.copy()
    current_fitting_scores[is_used_bin_mask] += CONSOLIDATION_BONUS

    # Assign these calculated priorities back to the correct positions in the full priorities array
    priorities[can_fit_mask] = current_fitting_scores

    return priorities
```
