```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_CAPACITY: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic extends "priority_v1" by introducing a more sophisticated
    "Space Quality" assessment and adaptive non-linear components. It aims to:

    1.  **Enhanced Best Fit Core:** Prioritizes bins that result in the smallest
        remaining capacity. This is the foundational component, aiming for local
        minimization of wasted space.
    2.  **Bin Completion Reward (Exact Fit):** Provides a significant,
        item-size-scaled bonus for bins where the item fits perfectly, leading
        to zero remaining capacity. This strongly incentivizes closing bins,
        which is critical for efficient bin packing.
    3.  **Adaptive Space Quality Penalties:** Applies multiple layers of
        non-linear penalties to discourage the creation of "bad quality"
        remaining space:
        *   **Micro-fragmentation Penalty:** A mild, but adaptive, penalty for
            very tiny, non-zero remainders (e.g., less than 5% of bin capacity).
            These spaces are too small to be generally useful but prevent the
            bin from being perfectly closed. The penalty is harsher the closer
            the remainder is to zero (but not zero).
        *   **"Awkward Zone" Fragmentation Penalty:** A stronger, Gaussian-shaped
            penalty applied to bins that, after placing the item, would be left
            with a remaining capacity in an "awkward" range (e.g., 30-70% of
            the bin's total capacity). These spaces are problematic because they
            are often too large for small future items and too small for large
            future items, making them difficult to fill efficiently. The penalty
            is highest at a defined "awkward center" (e.g., 40% capacity).
        *   **Item-Relative Fragmentation Penalty:** A sharp, exponential
            penalty applied to bins where the remaining capacity is non-zero
            but very close to the current `item`'s size (e.g., if item is 0.5,
            and remainder is 0.48). This strongly discourages creating spaces
            that are just slightly too small to fit another instance of the
            current item, effectively rendering that space less useful for items
            of similar scale. The penalty intensifies as the remainder approaches
            the item's size.

    Args:
        item: Size of item to be added to the bin. Must be positive.
        bins_remain_cap: Array of remaining capacities for each bin.
        BIN_CAPACITY: The total capacity of a single bin. Default is 1.0 (standard
                      for normalized BPP). Used for relative fragmentation assessment.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit (capacity >= item size)
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return priorities initialized to -inf
    if not np.any(can_fit_mask):
        return priorities

    # Get remaining capacities for only the fitting bins
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate potential remaining capacity if the item were placed
    potential_remaining_cap = fitting_bins_remain_cap - item

    # --- Core Priority Calculation (Best Fit component) ---
    # We negate the potential remaining capacity so that a smaller remainder
    # results in a higher (less negative) priority score.
    core_priorities = -potential_remaining_cap

    # --- Hybrid/Non-linear/Adaptive Components ---

    # Constants for various penalty/bonus mechanisms
    EXACT_FIT_THRESHOLD = 1e-9  # Tolerance for floating point comparisons to zero
    EXACT_FIT_BONUS_FACTOR = 1000.0 # Large bonus, scaled by item size

    MICRO_FRAG_THRESHOLD_REL = 0.05 # Max relative size for micro-fragment
    MICRO_FRAG_PENALTY_MAGNITUDE = 50.0 # Strength of micro-fragment penalty

    AWKWARD_ZONE_CENTER_REL = 0.4 # Relative remainder at which awkward penalty peaks
    AWKWARD_ZONE_SPREAD_REL = 0.2 # Controls the width of the awkward penalty zone
    AWKWARD_PENALTY_MAX = 75.0 # Maximum strength of awkward penalty

    ITEM_FRAG_PENALTY_FACTOR = 100.0 # Strength of item-relative penalty
    ITEM_FRAG_EXPONENT = 3.0 # Exponential curve for item-relative penalty (sharper near 1)

    # 1. Exact Fit Bonus:
    exact_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EXACT_FIT_THRESHOLD)
    core_priorities[exact_fit_mask] += EXACT_FIT_BONUS_FACTOR * item

    # Apply remaining penalties only to non-exact fitting bins
    non_exact_mask = ~exact_fit_mask
    
    if np.any(non_exact_mask):
        rem_for_scoring = potential_remaining_cap[non_exact_mask]

        # 2. Micro-fragmentation Penalty: Penalize very small, non-zero remnants.
        micro_frag_mask = (rem_for_scoring > EXACT_FIT_THRESHOLD) & \
                          (rem_for_scoring < MICRO_FRAG_THRESHOLD_REL * BIN_CAPACITY)

        if np.any(micro_frag_mask):
            # Penalty increases as remainder approaches 0 (but not 0)
            normalized_micro_rem = rem_for_scoring[micro_frag_mask] / (MICRO_FRAG_THRESHOLD_REL * BIN_CAPACITY)
            penalty = -MICRO_FRAG_PENALTY_MAGNITUDE * (1 - normalized_micro_rem)
            core_priorities[non_exact_mask][micro_frag_mask] += penalty

        # 3. "Awkward Zone" Fragmentation Penalty: Penalize creating hard-to-fill spaces.
        # This uses a Gaussian-like function to penalize mid-range remainders.
        relative_rem_for_scoring = rem_for_scoring / BIN_CAPACITY

        awkward_penalty = -AWKWARD_PENALTY_MAX * np.exp(
            -((relative_rem_for_scoring - AWKWARD_ZONE_CENTER_REL)**2) / (2 * AWKWARD_ZONE_SPREAD_REL**2)
        )
        # Apply this penalty only to the relevant range, avoiding overlap with micro-fragments
        # or large, useful remainders.
        awkward_apply_mask = (relative_rem_for_scoring >= MICRO_FRAG_THRESHOLD_REL) & \
                             (relative_rem_for_scoring <= 0.95) # Up to 95% of bin capacity remaining

        if np.any(awkward_apply_mask):
            core_priorities[non_exact_mask][awkward_apply_mask] += awkward_penalty[awkward_apply_mask]
            
        # 4. Item-Relative Fragmentation Penalty: Penalize remainders just under item size.
        # This is particularly problematic as it's a "near miss" for another item of the same type.
        if item > EXACT_FIT_THRESHOLD: # Avoid division by zero if item is theoretically 0
            item_relative_frag_mask = (rem_for_scoring > EXACT_FIT_THRESHOLD) & \
                                      (rem_for_scoring < item) # Only if remainder is non-zero and less than item

            if np.any(item_relative_frag_mask):
                # Normalized remainder relative to the current item's size
                normalized_rem_to_item = rem_for_scoring[item_relative_frag_mask] / item
                
                # Penalty is stronger as normalized_rem_to_item approaches 1
                penalty = -ITEM_FRAG_PENALTY_FACTOR * np.power(normalized_rem_to_item, ITEM_FRAG_EXPONENT)
                core_priorities[non_exact_mask][item_relative_frag_mask] += penalty

    # Assign the calculated priorities to the fitting bins in the main array
    priorities[can_fit_mask] = core_priorities

    return priorities
```
