```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic combines "Best Fit" with a "Bin Consolidation" and
    "Fragmentation Avoidance" strategy. It aims to achieve global efficacy
    through local, non-linear interactions, adapting to the current item's size.

    The priority calculation is composed of:
    1.  **Best Fit Core:** Prioritizes bins that result in the smallest
        remaining capacity after the item is placed. This is the foundational
        linear component.
    2.  **Exact Fit Bonus (Non-linear):** Provides a significant, discrete
        bonus for bins where the item fits perfectly, leading to zero
        remaining capacity. This encourages complete bin utilization and closure.
    3.  **Fragmentation Penalty (Non-linear & Adaptive):** Applies a penalty
        to bins that, after placing the item, would be left with a small,
        non-zero remaining capacity. This penalty is particularly harsh if the
        remaining capacity is less than or equal to the current `item`'s size,
        discouraging the creation of fragmented space that might be difficult
        to fill with future items of similar scale. The penalty scales with
        how close the remainder is to the `item`'s size, pushing towards
        either very small remainders or sufficiently large (useful) ones.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit (capacity >= item size)
    can_fit_mask = bins_remain_cap >= item

    # Extract capacities for only the fitting bins
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # If no bin can fit the item, return priorities initialized to -inf
    if fitting_bins_remain_cap.size == 0:
        return priorities

    # Calculate potential remaining capacity if the item were placed
    potential_remaining_cap = fitting_bins_remain_cap - item

    # --- Core Priority Calculation (Best Fit component) ---
    # We negate the potential remaining capacity so that a smaller remainder
    # results in a higher (less negative) priority score.
    # Example: remaining 0.1 -> score -0.1; remaining 0.5 -> score -0.5.
    calculated_priorities = -potential_remaining_cap

    # --- Hybrid/Non-linear/Adaptive Components ---

    # 1. Exact Fit Bonus: A strong, discrete non-linear bonus for perfect fits.
    # This highly prioritizes bins that can be perfectly filled.
    EXACT_FIT_THRESHOLD = 1e-9  # Tolerance for floating point comparisons to zero
    EXACT_FIT_BONUS = 1000.0    # A large bonus to ensure exact fits are top priority

    exact_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EXACT_FIT_THRESHOLD)
    calculated_priorities[exact_fit_mask] += EXACT_FIT_BONUS

    # 2. Fragmentation Penalty: Penalize creating small, non-zero remnants.
    # This aims to avoid "awkward" remaining capacities that are too small
    # to be easily useful for typical future items, especially if they are
    # a significant fraction of the current item's size.
    
    # Apply penalty only if the item size is positive to avoid division by zero.
    # Item sizes in BPP are typically positive.
    if item > EXACT_FIT_THRESHOLD:
        # Define the "fragmentation zone": remaining capacities that are
        # non-zero but less than or equal to the current item's size.
        # This range is problematic as it's not an exact fit, but also not
        # large enough to easily accommodate another item of the same size.
        fragment_zone_mask = (potential_remaining_cap > EXACT_FIT_THRESHOLD) & \
                             (potential_remaining_cap <= item)

        if np.any(fragment_zone_mask):
            # Normalize the remaining capacity within this zone by the item's size.
            # This makes the penalty adaptive to the scale of the current item.
            normalized_fragment_rem = potential_remaining_cap[fragment_zone_mask] / item

            # Apply a penalty that increases as the normalized remainder
            # approaches 1 (i.e., remaining capacity is close to item's size).
            # This strongly discourages leaving a bin with a capacity just
            # slightly less than the item, effectively making it a "dead space".
            # PENALTY_FACTOR is a tunable parameter controlling the penalty's strength.
            PENALTY_FACTOR = 5.0 # Example: A factor of 5.0

            penalty = -PENALTY_FACTOR * normalized_fragment_rem
            calculated_priorities[fragment_zone_mask] += penalty

    # Assign the calculated priorities to the fitting bins in the main array
    priorities[can_fit_mask] = calculated_priorities

    return priorities
```
