```python
import numpy as np

# Assume a standard bin capacity of 1.0 for normalized items and capacities.
# In a real-world scenario, BIN_CAPACITY would be a known constant for the problem.
BIN_CAPACITY = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin, aiming to solve the Online Bin Packing Problem.

    This heuristic, "Variance Minimization Fit" (VMFit), takes a holistic approach
    to bin packing. Instead of solely prioritizing the "tightest fit" (as in Best Fit),
    it aims to minimize the variance of remaining capacities across *all* bins after
    an item is placed. The objective is to encourage a more uniform distribution of
    remaining capacities, promoting robustness and potentially better overall packing
    efficiency by avoiding extremes (e.g., too many bins with tiny, unusable fragments)
    and fostering a more balanced set of available spaces for future items.

    This approach moves beyond local optimality by considering the global state of all
    bins, dynamically adapting the choice based on how a placement affects the overall
    spread of capacities. It promotes exploration of solution paths that might not be
    greedily optimal for the current item but lead to a more stable and manageable
    bin configuration for subsequent items.

    Args:
        item: Size of the item to be added to a bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with a priority score for each bin.
        Higher scores indicate higher priority. Bins where the item cannot fit
        will have a priority of -inf.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, all priorities remain -inf,
    # signaling that a new bin might be needed or packing failed.
    if not np.any(can_fit_mask):
        return priorities

    # Create a temporary array representing the current state of all bin capacities.
    # This will be modified hypothetically for each potential placement.
    temp_bins_remain_cap_full = np.copy(bins_remain_cap)

    # Iterate through only the indices of bins where the item can fit.
    for i in np.where(can_fit_mask)[0]:
        # Store the original value of the current bin's capacity to revert later.
        original_bin_value = temp_bins_remain_cap_full[i]

        # Hypothetically place the item: update the bin's remaining capacity.
        temp_bins_remain_cap_full[i] -= item

        # Calculate the variance of all bin remaining capacities in this hypothetical state.
        # We want to minimize variance, so we maximize the negative of the variance.
        # This rewards bin placements that lead to a more uniform distribution of
        # remaining capacities across all bins.
        current_state_variance = np.var(temp_bins_remain_cap_full)
        priorities[i] = -current_state_variance

        # Revert the bin's capacity to its original state for the next iteration,
        # ensuring each calculation is independent and based on the true current state.
        temp_bins_remain_cap_full[i] = original_bin_value

    return priorities
```
