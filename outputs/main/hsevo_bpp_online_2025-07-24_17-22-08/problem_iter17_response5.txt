```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a penalty for large remaining capacity.
    Balances tight fitting and future capacity using a non-linear function.
    """
    # Non-linear prioritization for valid bins
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)
    # Normalize priority scores so that the bin with the smallest remaining capacity gets the highest priority
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        priority[valid_bins] = - (bins_remain_cap[valid_bins] - item)
        
    return priority
```
