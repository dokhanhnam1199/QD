import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                penalty_scale: float = 5.194032171654696, 
                tight_fit_threshold: float = 0.47812682147313496, 
                large_capacity_penalty_scale: float = 3.2372663888696587) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined penalty term for tighter fits and future capacity.
    Balances tight fit and future capacity using a simple yet effective formulation.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization with a penalty for large remaining capacity
    priority = np.where(valid_bins == 1, 
                         np.exp(-remain_cap_after_add / (item * penalty_scale)) * (1 / (1 + np.exp((remain_cap_after_add - item*tight_fit_threshold) / (item*large_capacity_penalty_scale)))),  
                         -np.inf)
    
    # Normalize priority scores for better adaptability
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    return priority
