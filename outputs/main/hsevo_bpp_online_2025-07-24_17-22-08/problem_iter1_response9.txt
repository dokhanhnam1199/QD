```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on the remaining capacity of each bin.
    The bin with the least remaining capacity that can still fit the item gets the highest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the item can fit into the bin
    valid_bins = bins_remain_cap >= item
    
    # Initialize priority scores with -inf for bins that cannot fit the item
    priority_scores = np.where(valid_bins, bins_remain_cap, -np.inf)
    
    # Calculate the priority score as the negative of the remaining capacity
    # so that the bin with the least remaining capacity gets the highest priority
    priority_scores = np.where(valid_bins, -priority_scores, priority_scores)
    
    # Normalize the priority scores to be between 0 and 1
    max_score = np.max(priority_scores)
    if max_score == -np.inf:  # No valid bins
        return np.zeros_like(bins_remain_cap)
    priority_scores = np.where(valid_bins, (priority_scores - np.min(priority_scores[valid_bins])) / (max_score - np.min(priority_scores[valid_bins])), 0)
    
    return priority_scores
```
