```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhances the priority function by introducing a dynamic penalty term that adjusts based on the item size relative to the bin capacity,
    and incorporates a more nuanced non-linear prioritization that considers both the tightness of fit and the remaining capacity.
    """
    # Calculate valid bins and remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Dynamic penalty term based on item size relative to bin capacity
    penalty_term = np.where(valid_bins == 1, 
                            1 - (item / bins_remain_cap),  # Encourages bins that are filled to a larger proportion
                            -np.inf)
    
    # Enhanced non-linear prioritization with adjusted penalty for balancing tight fit and future capacity
    priority = np.where(valid_bins == 1, 
                         np.exp(-remain_cap_after_add / (item + 1e-6)) * penalty_term,  # Adds a small value to avoid division by zero
                         -np.inf)
    
    # Normalize priority scores for better adaptability and to ensure scores are within a comparable range
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    return priority
```
