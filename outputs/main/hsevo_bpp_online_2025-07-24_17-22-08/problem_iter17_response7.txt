```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a penalty for large remaining capacity.
    Balances tight fitting and future capacity effectively.
    """
    # Identify bins that are too small for the item and give them a very low priority
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Non-linear priority with a penalty for large remaining capacity
    priority = np.where(valid_bins == 1, np.exp(-(bins_remain_cap - item)), -np.inf)
    
    # Adjust priority to balance between tight fitting and future capacity
    priority = np.where(valid_bins == 1, priority * (bins_remain_cap - item) / bins_remain_cap, priority)
    
    return priority
```
