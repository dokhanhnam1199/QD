{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for each bin based on a balance between tight fitting and future capacity.\n    \n    Combines non-linear functions to prioritize bins with remaining capacity just enough for the item.\n    \"\"\"\n    # Identify bins that are too small and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    # Balance tight fitting and future capacity\n    priority *= (1 + np.tanh(-(bins_remain_cap - item) / item))\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines non-linear prioritization with a trade-off between tight fit and future capacity.\n    Prioritizes bins with enough capacity and smaller remaining capacity after addition.\n    \"\"\"\n    # Calculate priority scores using a non-linear function that balances tight fit and remaining capacity\n    priority_scores = np.where(bins_remain_cap >= item, np.log(bins_remain_cap - item + 2), -np.inf)\n    \n    # Normalize valid priority scores to ensure a better distribution\n    valid_bins = priority_scores != -np.inf\n    if np.any(valid_bins):\n        max_score = np.max(priority_scores[valid_bins])\n        min_score = np.min(priority_scores[valid_bins])\n        priority_scores[valid_bins] = (priority_scores[valid_bins] - min_score) / (max_score - min_score + 1e-6)\n        \n    return priority_scores\n\n### Analyze & experience\n- Comparing the best heuristics (1st) with the worst (20th), we see that the top heuristics tend to use a non-linear function to balance between tight fitting and future capacity, such as `np.exp(-(bins_remain_cap - item) / item)`, while the worst ones use simpler or less effective non-linear functions. \nComparing (1st) vs (2nd), we see that dividing by `item` in the exponent makes a difference. \n(3rd) vs (4th) shows that using `bins_remain_cap` as the denominator in the exponent and adding a penalty term can be effective. \nComparing (second worst) vs (worst), we see that using `np.log(bins_remain_cap - item + 2)` is less effective than other non-linear functions. \nOverall, the top heuristics tend to use more sophisticated non-linear functions that balance tight fitting and future capacity.\n- \nTo redefine 'Current self-reflection' and come up with better ideas for designing heuristics, let's analyze the given information.\n\n### Analysis\n\nThe 'Current self-reflection' suggests using non-linear functions that balance tight fitting and future capacity and dividing by relevant variables to improve performance. However, 'Ineffective self-reflection' points out the need to avoid unnecessary complexity and normalization unless it significantly impacts performance.\n\n### Redefined Self-Reflection\n\nHere are the key takeaways in 4 bullet points:\n\n* **Keywords**: Simple, non-linear functions, balancing tight fitting and future capacity.\n* **Advice**: Use intuitive logic targeting the problem's objective, and consider non-linear functions that prioritize bins based on remaining capacity.\n* **Avoid**: Unnecessary normalization and complexity, penalty terms unless significantly impactful.\n* **Explanation**: The goal is to strike a balance between fitting items tightly and leaving room for future items, using simple yet effective logic to guide the heuristic design.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}