```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with dynamic penalty term for balanced bin selection.
    Balances tight fitting and future capacity using a nuanced formulation.
    """
    # Non-linear prioritization for bins with sufficient capacity
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)
    
    # Refined penalty term to balance tight fitting and future capacity
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        remain_cap_after_add = bins_remain_cap[valid_bins] - item
        # Dynamic penalty term considering both remaining capacity and item size
        balancing_term = 0.7 * np.exp(-remain_cap_after_add / (item + 1e-6)) + 0.3 * (remain_cap_after_add / (bins_remain_cap[valid_bins] + 1e-6))
        priority[valid_bins] *= balancing_term
        
    # Normalize priority scores for enhanced adaptability
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    return priority
```
