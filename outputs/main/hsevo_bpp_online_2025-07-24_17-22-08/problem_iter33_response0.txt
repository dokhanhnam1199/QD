```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function that combines non-linear prioritization with a dynamic penalty term,
    adapting to both tight fits and future capacity needs, while introducing a 'look-ahead' aspect.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization with a refined penalty term for balancing tight fit and future capacity
    # Introducing a dynamic penalty that adjusts based on the item size relative to the bin capacity
    priority = np.where(valid_bins == 1, 
                         np.exp(-remain_cap_after_add / (item + 1e-6)) - 0.05 * (remain_cap_after_add / (bins_remain_cap + 1e-6)),  
                         -np.inf)
    
    # Enhance differentiation among valid bins by applying a non-linear scaling
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = np.where(priority != -np.inf, (priority / max_priority) ** 2, -np.inf)  # Squaring to enhance differentiation
    
    return priority
```
