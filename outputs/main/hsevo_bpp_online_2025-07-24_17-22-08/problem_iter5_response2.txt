```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin. 
    Combines the benefits of both best-fit and tight-fitting heuristics.
    """
    # Identify bins that are too small for the item and give them a very low priority
    # Use a non-linear function (1 / (1 + abs)) to prioritize bins with remaining capacity closest to the item size
    priority = np.where(bins_remain_cap >= item, 1 / (1 + np.abs(bins_remain_cap - item)), -np.inf)
    
    # Normalize the priority scores by the remaining capacity to encourage tight-fitting
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        # Weigh the priority scores by the remaining capacity after addition
        priority[valid_bins] *= (1 - (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins])
    
    return priority
```
