```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with nuanced penalty terms, balancing tight fit and future capacity.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Calculate tight fit measure and dynamic penalty term
    tight_fit_measure = item / bins_remain_cap
    penalty_term = 1 - (item / bins_remain_cap)  # Encourages bins that are filled to a larger proportion
    
    # Non-linear prioritization with a refined penalty term
    priority = np.where(valid_bins == 1, 
                         np.exp(-remain_cap_after_add / (item + 1e-6)) * (1 + tight_fit_measure) * penalty_term,  
                         -np.inf)
    
    # Normalize priority scores and introduce a slight perturbation
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    priority += np.random.uniform(0, 1e-6, size=len(priority))
    
    return priority
```
