import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                penalty_weight: float = 0.08441352261181326, 
                perturbation_max: float = 5.062379219791397e-06,
                tight_fit_weight: float = 0.5358785365142961,
                future_capacity_weight: float = 0.48784404564204076,
                tight_fit_measure_scale: float = 1.6215769619045257,
                future_capacity_penalty_shift: float = 0.45480749213064403,
                epsilon: float = 7.654947804782722e-05) -> np.ndarray:
    """
    Combines non-linear prioritization with nuanced penalty terms and effective balancing,
    enhancing adaptability and robustness for online bin packing.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization focusing on tight fit
    tight_fit_score = np.exp(-remain_cap_after_add / (item + epsilon))
    tight_fit_measure = item / bins_remain_cap
    
    # Refined penalty term for future capacity and balancing
    future_capacity_penalty = (1 / (1 + np.exp((remain_cap_after_add - item*future_capacity_penalty_shift) / item)))
    
    # Combine scores with a weighted average, refined penalty term, 
    # and tight fit measure for enhanced prioritization and robustness
    priority = np.where(valid_bins == 1, 
                         tight_fit_weight * tight_fit_score * (1 + tight_fit_measure*tight_fit_measure_scale) + future_capacity_weight * future_capacity_penalty - penalty_weight * remain_cap_after_add, 
                         -np.inf)
    
    # Normalize priority scores for better adaptability
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    # Introduce a slight perturbation to avoid identical priorities for different bins
    priority += np.random.uniform(0, perturbation_max, size=len(priority))
    
    return priority
