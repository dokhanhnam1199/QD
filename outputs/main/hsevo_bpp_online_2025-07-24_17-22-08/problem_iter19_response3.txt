import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, penalty_weight: float = 0.8553504012519519) -> np.ndarray:
    """
    Combines non-linear prioritization with a penalty for large remaining capacity, 
    balancing tight fitting and future capacity effectively.
    """
    # Calculate remaining capacity after adding the item
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization with a penalty for large remaining capacity
    priority = np.where(bins_remain_cap >= item, 
                         np.exp(-remain_cap_after_add / item) - penalty_weight * bins_remain_cap, 
                         -np.inf)
    
    return priority
