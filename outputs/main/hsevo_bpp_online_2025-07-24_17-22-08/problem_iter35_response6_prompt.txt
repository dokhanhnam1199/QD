{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                penalty_weight: float = 0.015962034932029284, \n                perturbation_max: float = 8.082068759055226e-06) -> np.ndarray:\n    \"\"\"\n    Enhanced priority function that balances tight fit, future capacity, and bin utilization.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Calculate the ratio of item size to bin remaining capacity for a tight fit measure\n    tight_fit_measure = item / bins_remain_cap\n    \n    # Non-linear prioritization with a refined penalty term for balancing tight fit and future capacity\n    priority = np.where(valid_bins == 1, \n                         np.exp(-remain_cap_after_add / item) * (1 + tight_fit_measure) - penalty_weight * remain_cap_after_add,  \n                         -np.inf)\n    \n    # Normalize priority scores for better adaptability and robustness\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    # Introduce a slight perturbation to avoid identical priorities for different bins\n    priority += np.random.uniform(0, perturbation_max, size=len(priority))\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines non-linear prioritization with a nuanced penalty term, \n    balancing tight fit and future capacity effectively.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization focusing on tight fit\n    tight_fit_score = np.exp(-remain_cap_after_add / (item + 1e-6))\n    \n    # Refined penalty term for future capacity and balancing\n    future_capacity_penalty = (1 / (1 + np.exp((remain_cap_after_add - item/2) / item)))\n    \n    # Combine scores for better adaptability\n    priority = np.where(valid_bins == 1, \n                         0.7 * tight_fit_score + 0.3 * future_capacity_penalty, \n                         -np.inf)\n    \n    # Normalize priority scores\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    return priority\n\n### Analyze & experience\n- Comparing the top-ranked heuristics (1st) vs the lower-ranked ones (e.g., 20th), we see that the top heuristics tend to have more complex and nuanced priority calculations, often incorporating multiple factors such as tight fit, future capacity, and non-linear penalty terms. For instance, the 1st heuristic uses a combination of `np.exp(-remain_cap_after_add / item) * (1 + tight_fit_measure)` and a penalty term, whereas the 20th heuristic uses a simpler `-np.log1p(proportion_remain)`. Comparing (1st) vs (2nd), we see that they are nearly identical, suggesting that the top heuristics may have converged to a similar optimal solution. Comparing (3rd) vs (4th), we again see similar patterns. However, as we move down the list, we notice that the heuristics become simpler and less nuanced, with some (e.g., 20th) using a single penalty term without considering multiple factors. Overall, the top heuristics tend to be more sophisticated and adaptable, while the lower-ranked ones are simpler and less effective.\n- \nTo design better heuristics, let's analyze the given 'Current self-reflection' and 'Ineffective self-reflection'. Here are the key takeaways:\n\n* **Keywords**: non-linear prioritization, penalty terms, tight fitting, future capacity, balancing, simplicity.\n* **Advice**: Combine non-linear prioritization with nuanced penalty terms, balance tight fitting and future capacity, and consider simplicity and adaptability.\n* **Avoid**: Oversimplification, unnecessary complexity, redundant code, and excessive normalization.\n* **Explanation**: Effective heuristics require a balance between competing factors (tight fitting and future capacity) using non-linear prioritization and penalty terms, while maintaining simplicity and adaptability to optimize performance.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}