```python
def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                threshold_multiplier: float = 0.6146913810542726, 
                epsilon: float = 9.542102062488644e-05) -> np.ndarray:
    """
    Combines non-linear priority scoring with a balance between tight fitting and future capacity.
    """
    # Identify bins that are too small for the item
    priority = np.where(bins_remain_cap >= item, np.exp(-threshold_multiplier * (bins_remain_cap - item)), -np.inf)
    
    # Weigh the priority scores by the remaining capacity after addition to encourage tight-fitting
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        # Balance between tight fitting and future capacity using a non-linear function
        avg_remain_cap = np.mean(bins_remain_cap[valid_bins])
        priority[valid_bins] *= (1 + np.tanh(avg_remain_cap - bins_remain_cap[valid_bins]) / (avg_remain_cap + epsilon))
    
    return priority
```
