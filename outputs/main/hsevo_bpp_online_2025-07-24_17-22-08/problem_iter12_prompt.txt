{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item will have the highest priority.\n    A bin that is too small for the item will have a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Then, we normalize the priority scores so that the bin with the smallest remaining capacity \n    # that is still enough for the item gets the highest priority\n    priority = -priority\n    \n    # Return the priority scores\n    return priority\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nTo redefine 'Current self-reflection' and come up with better ideas for designing heuristics, let's analyze the given information.\n\n### Analysis\n\nThe 'Current self-reflection' suggests using non-linear functions that balance tight fitting and future capacity and dividing by relevant variables to improve performance. However, 'Ineffective self-reflection' points out the need to avoid unnecessary complexity and normalization unless it significantly impacts performance.\n\n### Redefined Self-Reflection\n\nHere are the key takeaways in 4 bullet points:\n\n* **Keywords**: Simple, non-linear functions, balancing tight fitting and future capacity.\n* **Advice**: Use intuitive logic targeting the problem's objective, and consider non-linear functions that prioritize bins based on remaining capacity.\n* **Avoid**: Unnecessary normalization and complexity, penalty terms unless significantly impactful.\n* **Explanation**: The goal is to strike a balance between fitting items tightly and leaving room for future items, using simple yet effective logic to guide the heuristic design.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}