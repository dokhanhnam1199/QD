{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                penalty_weight: float = 0.015962034932029284, \n                perturbation_max: float = 8.082068759055226e-06) -> np.ndarray:\n    \"\"\"\n    Enhanced priority function that balances tight fit, future capacity, and bin utilization.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Calculate the ratio of item size to bin remaining capacity for a tight fit measure\n    tight_fit_measure = item / bins_remain_cap\n    \n    # Non-linear prioritization with a refined penalty term for balancing tight fit and future capacity\n    priority = np.where(valid_bins == 1, \n                         np.exp(-remain_cap_after_add / item) * (1 + tight_fit_measure) - penalty_weight * remain_cap_after_add,  \n                         -np.inf)\n    \n    # Normalize priority scores for better adaptability and robustness\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    # Introduce a slight perturbation to avoid identical priorities for different bins\n    priority += np.random.uniform(0, perturbation_max, size=len(priority))\n    \n    return priority\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nTo design better heuristics, let's analyze the given 'Current self-reflection' and 'Ineffective self-reflection'. Here are the key takeaways:\n\n* **Keywords**: non-linear prioritization, penalty terms, tight fitting, future capacity, balancing, simplicity.\n* **Advice**: Combine non-linear prioritization with nuanced penalty terms, balance tight fitting and future capacity, and consider simplicity and adaptability.\n* **Avoid**: Oversimplification, unnecessary complexity, redundant code, and excessive normalization.\n* **Explanation**: Effective heuristics require a balance between competing factors (tight fitting and future capacity) using non-linear prioritization and penalty terms, while maintaining simplicity and adaptability to optimize performance.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}