import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                penalty_threshold: float = 8.427719519416462, 
                priority_scale: float = 7.459626884139699, 
                exp_base: float = 2.3367853086127277) -> np.ndarray:
    """
    Combines simple non-linear prioritization with a refined balancing term.
    Uses exp function and a penalty for large remaining capacity.
    """
    # Non-linear prioritization for valid bins
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / priority_scale), -np.inf)
    
    # Refined balancing term
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        # Normalize priority scores
        max_priority = np.max(priority[valid_bins])
        priority[valid_bins] /= max_priority
        
        # Apply penalty for large remaining capacity
        remaining_cap_after_addition = bins_remain_cap[valid_bins] - item
        priority[valid_bins] *= 1 / (1 + np.maximum(remaining_cap_after_addition, penalty_threshold))
        
    return priority
