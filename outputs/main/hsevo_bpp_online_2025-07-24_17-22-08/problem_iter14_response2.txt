```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a simple penalty for large remaining capacity.
    Balances tight fitting and future capacity using np.exp(-(bins_remain_cap - item) / item) and a bonus for larger bins_remain_cap.
    """
    # Calculate priority score using a non-linear function for valid bins
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)
    
    # Apply a bonus to prioritize bins with more remaining capacity among valid bins
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        priority[valid_bins] += 1e-6 * bins_remain_cap[valid_bins]
        
    return priority
```
