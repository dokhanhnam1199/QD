{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                penalty_weight: float = 0.015962034932029284, \n                perturbation_max: float = 8.082068759055226e-06) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with nuanced penalty terms, \n    balancing tight fit and future capacity effectively with slight perturbation.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization focusing on tight fit\n    tight_fit_score = np.exp(-remain_cap_after_add / (item + 1e-6))\n    tight_fit_measure = item / bins_remain_cap\n    \n    # Refined penalty term for future capacity and balancing\n    future_capacity_penalty = (1 / (1 + np.exp((remain_cap_after_add - item/2) / item)))\n    \n    # Combine scores with a refined penalty term for better adaptability and robustness\n    priority = np.where(valid_bins == 1, \n                         0.7 * tight_fit_score * (1 + tight_fit_measure) + 0.3 * future_capacity_penalty - penalty_weight * remain_cap_after_add, \n                         -np.inf)\n    \n    # Normalize priority scores\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    # Introduce a slight perturbation to avoid identical priorities for different bins\n    priority += np.random.uniform(0, perturbation_max, size=len(priority))\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                penalty_weight: float = 0.015962034932029284, \n                perturbation_max: float = 8.082068759055226e-06) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a refined penalty term, \n    balancing tight fit and future capacity for online bin packing.\n    \"\"\"\n    # Calculate valid bins and remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization focusing on tight fit and future capacity\n    tight_fit_score = np.exp(-remain_cap_after_add / (item + 1e-6))\n    tight_fit_measure = item / bins_remain_cap\n    \n    # Combine scores with a weighted average, apply a refined penalty term, \n    # and incorporate a tight fit measure for enhanced prioritization\n    priority = np.where(valid_bins == 1, \n                         (0.7 * tight_fit_score + 0.3 * (tight_fit_measure)) - penalty_weight * remain_cap_after_add, \n                         -np.inf)\n    \n    # Normalize priority scores for better adaptability and robustness\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    # Introduce a slight perturbation to avoid identical priorities for different bins\n    priority += np.random.uniform(0, perturbation_max, size=len(priority))\n    \n    return priority\n\n### Analyze & experience\n- Comparing the top-ranked heuristics (1st) with the lower-ranked ones (e.g., 10th, 20th), we observe that the top heuristics incorporate more nuanced penalty terms and non-linear prioritization. For instance, the 1st heuristic combines non-linear prioritization with a refined penalty term and introduces a slight perturbation. \nComparing (1st) vs (2nd), we see that the 1st heuristic has a more complex combination of scores with a refined penalty term, indicating a potential improvement. \n(3rd) vs (4th) shows identical implementations, suggesting a potential redundancy or overfitting in the ranking. \nComparing (second worst) vs (worst), we see that both (19th) and (20th) introduce different penalty terms and prioritization methods, but (20th) lacks the perturbation seen in higher-ranked heuristics. \nOverall, the top heuristics tend to have more sophisticated penalty terms, non-linear prioritization, and perturbations.\n- \nTo design better heuristics, let's redefine 'Current self-reflection' by avoiding the pitfalls in 'Ineffective self-reflection'. Here are the key takeaways:\n\n* **Keywords**: Non-linear prioritization, nuanced penalty terms, balancing tight fit and future capacity.\n* **Advice**: Focus on combining non-linear prioritization with refined penalty terms and effective balancing terms to optimize bin selection.\n* **Avoid**: Unnecessary complexity, oversimplification, redundant code, and unnecessary normalization or penalty terms.\n* **Explanation**: By striking a balance between competing factors and avoiding unnecessary complexity, we can create more effective heuristics that adapt to different scenarios.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}