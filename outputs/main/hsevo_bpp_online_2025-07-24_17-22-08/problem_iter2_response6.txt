```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority score based on remaining capacity after adding item and minimizing waste.
    
    Combines elements of top heuristics to prioritize bins where the item fits well.
    """
    # Calculate priority score: bins with remaining capacity closest to item size get highest priority
    priority = np.where(bins_remain_cap >= item, 1 - (bins_remain_cap - item) / np.maximum(bins_remain_cap, 1e-9), -1)
    # Normalize priority scores to be between 0 and 1
    priority = np.maximum(0, (priority - priority.min()) / (priority.max() - priority.min() + 1e-9))
    return priority
```
