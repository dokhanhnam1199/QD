```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is based on a non-linear function of the remaining capacity of the bin and the size of the item.
    A bin with a remaining capacity that is just enough for the item will have the highest priority.
    A bin that is too small for the item will have a priority of negative infinity.
    The function also considers the future capacity of the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # First, we identify bins that are too small for the item and give them a very low priority
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)
    
    # Then, we apply a balancing term to encourage using bins that are not too full or too empty
    # This term is based on the ratio of the remaining capacity to the total capacity (assuming it's 1)
    balancing_term = np.where(bins_remain_cap >= item, (bins_remain_cap - item) / bins_remain_cap, 0)
    priority *= balancing_term
    
    # Return the priority scores
    return priority
```
