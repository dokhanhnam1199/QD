```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin based on remaining capacity after adding the item.
    Prioritizes bins that fit the item well and minimizes waste.
    """
    # Check if item can fit into each bin
    can_fit = bins_remain_cap >= item
    
    # Calculate remaining capacity after adding the item
    remaining_cap_after_add = bins_remain_cap - item
    
    # Priority is inversely proportional to remaining capacity after addition, with a small epsilon to avoid division by zero
    epsilon = 1e-6
    priority = np.where(can_fit, 1 / (epsilon + remaining_cap_after_add), -1)
    
    # Normalize priority scores to be between 0 and 1 for bins that can hold the item
    valid_priority = priority[can_fit]
    if len(valid_priority) > 0:
        max_priority = np.max(valid_priority)
        min_priority = np.min(valid_priority)
        if max_priority != min_priority:
            valid_priority = (valid_priority - min_priority) / (max_priority - min_priority)
        else:
            valid_priority = np.ones_like(valid_priority)
        priority[can_fit] = valid_priority
    
    return priority
```
