```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined balancing term and penalty for large remaining capacity.
    Encourages tight fits while considering future capacity.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization with a balancing term and a penalty for large remaining capacity
    priority = np.where(valid_bins == 1, 
                         # Use exp to prioritize bins that are just enough for the item
                         np.exp(-remain_cap_after_add / item) * 
                         # Encourage tighter fits by penalizing bins with large remaining capacity
                         (1 - remain_cap_after_add / bins_remain_cap), 
                         -np.inf)
    
    return priority
```
