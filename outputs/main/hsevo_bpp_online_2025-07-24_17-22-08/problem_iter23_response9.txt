```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a penalty term for large remaining capacities.
    Uses np.exp for non-linear prioritization and a sigmoid-like function to penalize large capacities.
    """
    # Non-linear prioritization for valid bins
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)
    
    # Apply a penalty to bins that are too large for the item
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        priority[valid_bins] *= (1 / (1 + np.exp((bins_remain_cap[valid_bins] - item) / item)))
        
    return priority
```
