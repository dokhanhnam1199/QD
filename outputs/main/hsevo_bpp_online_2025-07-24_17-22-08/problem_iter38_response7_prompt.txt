{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines non-linear prioritization with a nuanced penalty term and a tight fit bonus.\n    Balances tight fitting and future capacity for effective bin packing.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization with a dynamic penalty term\n    proportion_remain = remain_cap_after_add / item\n    priority = np.where(valid_bins == 1, np.exp(-proportion_remain), -np.inf)\n    \n    # Refined penalty term to balance tight fitting and future capacity\n    valid_bins_idx = np.where(valid_bins == 1)[0]\n    if len(valid_bins_idx) > 0:\n        balancing_term = 1 / (1 + np.abs(bins_remain_cap[valid_bins_idx] - item))\n        priority[valid_bins_idx] *= balancing_term\n        \n    # Apply a bonus for bins with very tight fits to encourage efficient packing\n    tight_fit_bonus = np.where((remain_cap_after_add > 0) & (remain_cap_after_add < 0.1 * item), 0.1, 0)\n    priority += tight_fit_bonus\n    \n    # Normalize priority scores for adaptability\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    else:\n        priority = valid_bins - 1  # When all bins are invalid, return -1 for invalid bins\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                alpha: float = 0.7, beta: float = 0.3, \n                penalty_weight: float = 0.01, \n                perturbation_max: float = 1e-5) -> np.ndarray:\n    \"\"\"\n    Advanced priority function that adaptively balances tight fit and future capacity with nuanced non-linear prioritization.\n    \"\"\"\n    # Identify valid bins\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate tight fit measure and future capacity penalty\n    tight_fit_measure = np.exp(-(bins_remain_cap - item) / item)\n    future_capacity_penalty = np.where(bins_remain_cap - item > 0, \n                                        (bins_remain_cap - item) / bins_remain_cap, \n                                        1)\n    \n    # Non-linear prioritization balancing tight fit and future capacity\n    priority = np.where(valid_bins == 1, \n                         alpha * tight_fit_measure + beta * (1 - future_capacity_penalty) - penalty_weight * (bins_remain_cap - item), \n                         -np.inf)\n    \n    # Normalize priority scores for adaptability\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    # Introduce slight perturbation to avoid identical priorities\n    priority += np.random.uniform(0, perturbation_max, size=len(priority))\n    \n    return priority\n\n### Analyze & experience\n- Comparing the top-ranked heuristics (1st) with the lower-ranked ones (e.g., 10th, 20th), we observe that the top heuristics incorporate more nuanced penalty terms and non-linear prioritization. For instance, the 1st heuristic combines non-linear prioritization with a refined penalty term and introduces a slight perturbation. \nComparing (1st) vs (2nd), we see that the 1st heuristic has a more complex combination of scores with a refined penalty term, indicating a potential improvement. \n(3rd) vs (4th) shows identical implementations, suggesting a potential redundancy or overfitting in the ranking. \nComparing (second worst) vs (worst), we see that both (19th) and (20th) introduce different penalty terms and prioritization methods, but (20th) lacks the perturbation seen in higher-ranked heuristics. \nOverall, the top heuristics tend to have more sophisticated penalty terms, non-linear prioritization, and perturbations.\n- \nTo design better heuristics, let's redefine 'Current self-reflection' by avoiding the pitfalls in 'Ineffective self-reflection'. Here are the key takeaways:\n\n* **Keywords**: Non-linear prioritization, nuanced penalty terms, balancing tight fit and future capacity.\n* **Advice**: Focus on combining non-linear prioritization with refined penalty terms and effective balancing terms to optimize bin selection.\n* **Avoid**: Unnecessary complexity, oversimplification, redundant code, and unnecessary normalization or penalty terms.\n* **Explanation**: By striking a balance between competing factors and avoiding unnecessary complexity, we can create more effective heuristics that adapt to different scenarios.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}