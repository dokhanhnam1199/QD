{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, penalty_weight: float = 0.8952215992744905, tight_fitting_exponent_base: float = 2.718281828459045) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a penalty for large remaining capacity.\n    Balances tight fitting and future capacity by using bins_remain_cap in the exponent.\n    \"\"\"\n    # Check if item fits and calculate remaining capacity after addition\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Non-linear priority with a penalty term for large remaining capacity\n    # Divide by item in the exponent to balance tight fitting and future capacity\n    priority = np.where(valid_bins == 1, \n                        np.exp(-remaining_cap_after_addition / item) - penalty_weight * remaining_cap_after_addition / bins_remain_cap, \n                        0)\n    \n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear functions to prioritize bins with remaining capacity just enough for the item,\n    balancing tight fitting and future capacity, normalized for better distribution.\n    \"\"\"\n    # Identify bins that are too small and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    \n    # Normalize valid priority scores to ensure a better distribution\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_score = np.max(priority[valid_bins])\n        min_score = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_score) / (max_score - min_score + 1e-6)\n        \n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item will have the highest priority.\n    A bin that is too small for the item will have a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on a non-linear function that balances tight fitting and future capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item will have the highest priority.\n    A bin that is too small for the item will have a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, 1 / (1 + bins_remain_cap - item), -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a penalty for large remaining capacity.\n    Balances tight fitting and future capacity by using bins_remain_cap in the exponent.\n    \"\"\"\n    # Check if item fits and calculate remaining capacity after addition\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Non-linear priority with a penalty term for large remaining capacity\n    # Divide by item in the exponent to balance tight fitting and future capacity\n    priority = np.where(valid_bins == 1, np.exp(-remaining_cap_after_addition / item) - 0.01 * remaining_cap_after_addition / bins_remain_cap, 0)\n    \n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear function for tight fit with consideration for future capacity.\n    \n    Uses np.exp(-(bins_remain_cap - item) / item) to balance tight fitting and future capacity.\n    \"\"\"\n    # Calculate priority score using a non-linear function for valid bins\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    \n    # Add a small bonus to prioritize bins with more remaining capacity\n    priority = np.where(priority > -np.inf, priority + 1e-6 * bins_remain_cap, priority)\n    \n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear function for tight fit with consideration for future capacity.\n    \n    Uses np.exp(-(bins_remain_cap - item) / item) to balance tight fitting and future capacity.\n    \"\"\"\n    # Calculate priority score using a non-linear function for valid bins\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    \n    # Add a small bonus to prioritize bins with more remaining capacity\n    priority = np.where(priority > -np.inf, priority + 1e-6 * bins_remain_cap, priority)\n    \n    return priority\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.\n    Prioritizes bins with enough capacity and a good balance between tightness and remaining capacity.\n    \"\"\"\n    # Identify bins that are too small and assign them a very low priority\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to prioritize bins based on remaining capacity and item size\n                        np.exp(-(bins_remain_cap - item) / (bins_remain_cap + 1e-6)), \n                        -np.inf)\n    \n    # Apply an additional balancing term to prioritize bins that are not too full\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Normalize the priority scores for valid bins to ensure they are on the same scale\n        max_score = np.max(priority[valid_bins])\n        min_score = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_score) / (max_score - min_score + 1e-6)\n        # Apply the balancing term\n        priority[valid_bins] *= (1 - item / bins_remain_cap[valid_bins])\n        \n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.\n    Prioritizes bins with enough capacity and a good balance between tightness and remaining capacity.\n    \"\"\"\n    # Identify bins that are too small and assign them a very low priority\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to prioritize bins based on remaining capacity and item size\n                        np.exp(-(bins_remain_cap - item) / (bins_remain_cap + 1e-6)), \n                        -np.inf)\n    \n    # Apply an additional balancing term to prioritize bins that are not too full\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Normalize the priority scores for valid bins to ensure they are on the same scale\n        max_score = np.max(priority[valid_bins])\n        min_score = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_score) / (max_score - min_score + 1e-6)\n        # Apply the balancing term\n        priority[valid_bins] *= (1 - item / bins_remain_cap[valid_bins])\n        \n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.\n    Prioritizes bins with enough capacity and a good balance between tightness and remaining capacity.\n    \"\"\"\n    # Identify bins that are too small and assign them a very low priority\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to prioritize bins based on remaining capacity and item size\n                        np.exp(-(bins_remain_cap - item) / (bins_remain_cap + 1e-6)), \n                        -np.inf)\n    \n    # Apply an additional balancing term to prioritize bins that are not too full\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Normalize the priority scores for valid bins to ensure they are on the same scale\n        max_score = np.max(priority[valid_bins])\n        min_score = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_score) / (max_score - min_score + 1e-6)\n        # Apply the balancing term\n        priority[valid_bins] *= (1 - item / bins_remain_cap[valid_bins])\n        \n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.\n    Prioritizes bins with enough capacity and a good balance between tightness and remaining capacity.\n    \"\"\"\n    # Identify bins that are too small and assign them a very low priority\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to prioritize bins based on remaining capacity and item size\n                        np.exp(-(bins_remain_cap - item) / (bins_remain_cap + 1e-6)), \n                        -np.inf)\n    \n    # Apply an additional balancing term to prioritize bins that are not too full\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Normalize the priority scores for valid bins to ensure they are on the same scale\n        max_score = np.max(priority[valid_bins])\n        min_score = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_score) / (max_score - min_score + 1e-6)\n        # Apply the balancing term\n        priority[valid_bins] *= (1 - item / bins_remain_cap[valid_bins])\n        \n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balance between tight fitting and future capacity.\n    \"\"\"\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    \n    # Apply an additional term to balance tight fitting and future capacity\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        priority[valid_bins] = priority[valid_bins] * (1 - item / bins_remain_cap[valid_bins])\n        \n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit and tight-fitting heuristics with a non-linear priority score.\n    Balances tight fitting and future capacity using exp function and remaining capacity.\n    \"\"\"\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    \n    # Weigh the priority scores by a factor that considers the remaining capacity\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Use a non-linear function to further balance between tight fitting and future capacity\n        priority[valid_bins] *= (1 + np.tanh(bins_remain_cap[valid_bins] - np.mean(bins_remain_cap[valid_bins])))\n    \n    return priority\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit and tight-fitting heuristics with a non-linear priority score.\n    Balances tight fitting and future capacity using exp function and remaining capacity.\n    \"\"\"\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    \n    # Weigh the priority scores by a factor that considers the remaining capacity\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Use a non-linear function to further balance between tight fitting and future capacity\n        priority[valid_bins] *= (1 + np.tanh(bins_remain_cap[valid_bins] - np.mean(bins_remain_cap[valid_bins])))\n    \n    return priority\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit and tight-fitting heuristics with a non-linear priority score.\n    Balances tight fitting and future capacity using exp function and remaining capacity.\n    \"\"\"\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    \n    # Weigh the priority scores by a factor that considers the remaining capacity\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Use a non-linear function to further balance between tight fitting and future capacity\n        priority[valid_bins] *= (1 + np.tanh(bins_remain_cap[valid_bins] - np.mean(bins_remain_cap[valid_bins])))\n    \n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit and tight-fitting heuristics with a non-linear priority score.\n    Balances tight fitting and future capacity using exp function and remaining capacity.\n    \"\"\"\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    \n    # Weigh the priority scores by a factor that considers the remaining capacity\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Use a non-linear function to further balance between tight fitting and future capacity\n        priority[valid_bins] *= (1 + np.tanh(bins_remain_cap[valid_bins] - np.mean(bins_remain_cap[valid_bins])))\n    \n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item and has a larger remaining capacity after packing will have a higher priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item and has a larger remaining capacity after packing will have a higher priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item and has a larger remaining capacity after packing will have a higher priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, (bins_remain_cap - item) / bins_remain_cap, -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}