```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined penalty term for tighter fits and future capacity.
    """
    # Non-linear prioritization for valid bins and a refined penalty term to balance tight fitting and future capacity
    valid_bins = (bins_remain_cap >= item).astype(float)
    fit_ratio = item / bins_remain_cap  # Higher ratio indicates tighter fit
    penalty_term = np.exp(-(bins_remain_cap - item) / item)  # Non-linear prioritization
    priority = np.where(valid_bins == 1, fit_ratio * penalty_term, -np.inf)  # Combine fit ratio and penalty term
    
    return priority
```
