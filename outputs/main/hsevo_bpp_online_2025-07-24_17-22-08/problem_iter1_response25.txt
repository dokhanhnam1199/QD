```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the item can fit in the bin
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Prioritize bins that have just enough capacity for the item
    # The closer the remaining capacity to the item size, the higher the priority
    priority = np.where(valid_bins == 1, bins_remain_cap - item, -np.inf)
    
    # To avoid division by zero, we add a small epsilon to the denominator
    epsilon = 1e-6
    priority = - (priority + epsilon) ** -1
    
    # Normalize the priority scores to be between 0 and 1
    max_priority = np.max(priority)
    min_priority = np.min(priority)
    if max_priority != min_priority:
        priority = (priority - min_priority) / (max_priority - min_priority)
    else:
        priority = np.ones_like(priority)
    
    # Set priority to zero for bins that cannot hold the item
    priority = np.where(valid_bins == 1, priority, 0)
    
    return priority
```
