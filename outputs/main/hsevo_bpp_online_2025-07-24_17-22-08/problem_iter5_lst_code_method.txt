{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin based on remaining capacity and item size.\n    Prioritizes bins that have just enough remaining capacity to hold the item.\n    \"\"\"\n    # Calculate the priority score for each bin based on the remaining capacity and item size\n    valid_bins = bins_remain_cap >= item  # Check if the item can fit in each bin\n    # A bin with remaining capacity closer to the item size gets higher priority\n    priority_scores = np.where(valid_bins, np.exp(-(bins_remain_cap - item)), 0)\n    \n    return priority_scores\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Priority score for each bin based on remaining capacity after adding the item.\n    Higher score for bins with capacity closest to the item size.\n    \"\"\"\n    # Calculate the priority score for each bin\n    valid_bins = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    priority = np.where(valid_bins == 1, 1 - (bins_remain_cap - item) / bins_remain_cap, 0)\n    \n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is closest to the item size will have the highest priority.\n    A bin that is too small for the item will have a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, 1 / (1 + np.abs(bins_remain_cap - item)), -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item will have the highest priority.\n    A bin that is too small for the item will have a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Then, we normalize the priority scores so that the bin with the smallest remaining capacity \n    # that is still enough for the item gets the highest priority\n    priority = -priority\n    \n    # Return the priority scores\n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Priority score based on remaining capacity after adding item and First-Fit decreasing heuristic.\n    \"\"\"\n    # Calculate priority score as negative of remaining capacity after adding item\n    priority = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)\n    \n    # Apply First-Fit decreasing heuristic by adding a small bonus to bins with more remaining capacity\n    priority = np.where(priority > -np.inf, priority + 1e-6 * bins_remain_cap, priority)\n    \n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin based on remaining capacity after adding the item.\n    Prioritizes bins that fit the item well and minimizes waste.\n    \"\"\"\n    # Check if item can fit into each bin\n    can_fit = bins_remain_cap >= item\n    \n    # Calculate remaining capacity after adding the item\n    remaining_cap_after_add = bins_remain_cap - item\n    \n    # Priority is inversely proportional to remaining capacity after addition, with a small epsilon to avoid division by zero\n    epsilon = 1e-6\n    priority = np.where(can_fit, 1 / (epsilon + remaining_cap_after_add), -1)\n    \n    # Normalize priority scores to be between 0 and 1 for bins that can hold the item\n    valid_priority = priority[can_fit]\n    if len(valid_priority) > 0:\n        max_priority = np.max(valid_priority)\n        min_priority = np.min(valid_priority)\n        if max_priority != min_priority:\n            valid_priority = (valid_priority - min_priority) / (max_priority - min_priority)\n        else:\n            valid_priority = np.ones_like(valid_priority)\n        priority[can_fit] = valid_priority\n    \n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on remaining capacity after adding the item.\n    Combines elements of minimizing remaining capacity and simple logic.\n    \"\"\"\n    # Calculate priority score as the negative of the remaining capacity after adding the item\n    priority = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)\n    \n    # Normalize the priority scores to be between 0 and 1 for valid bins\n    valid_bins = priority > -np.inf\n    if np.any(valid_bins):\n        min_priority = np.min(priority[valid_bins])\n        max_priority = np.max(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority), 0)\n    \n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on remaining capacity after adding the item.\n    Combines elements of minimizing remaining capacity and simple logic.\n    \"\"\"\n    # Calculate priority score as the negative of the remaining capacity after adding the item\n    priority = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -np.inf)\n    \n    # Normalize the priority scores to be between 0 and 1 for valid bins\n    valid_bins = priority > -np.inf\n    if np.any(valid_bins):\n        min_priority = np.min(priority[valid_bins])\n        max_priority = np.max(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority), 0)\n    \n    return priority\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on remaining capacity after adding the item.\n    Prioritizes bins with a tighter fit for the item.\n    \"\"\"\n    # Calculate priority scores; higher for bins with enough capacity and smaller remaining capacity\n    priority_scores = np.where(bins_remain_cap >= item, 1 / (bins_remain_cap - item + 1e-6), -1.0)\n    \n    return priority_scores\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin based on remaining capacity and item size.\n    Prioritizes bins that have just enough remaining capacity to hold the item.\n    \"\"\"\n    # Calculate the priority score for each bin based on the remaining capacity and item size\n    valid_bins = bins_remain_cap >= item  # Check if the item can fit in each bin\n    # A bin with remaining capacity closer to the item size gets higher priority\n    priority_scores = np.where(valid_bins, np.exp(-(bins_remain_cap - item)), 0)\n    \n    return priority_scores\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin. \n    Prioritizes bins that can fit the item and have the least remaining capacity after addition.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Prioritize bins based on remaining capacity after addition\n    priority = np.where(\n        remaining_capacity_after_addition >= 0, \n        bins_remain_cap,  # First-Fit decreasing heuristic for valid bins\n        -np.inf  # Invalid bins get -inf priority\n    )\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_cap = np.max(priority[valid_bins])\n        min_cap = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_cap) / (max_cap - min_cap)\n    else:\n        priority = np.zeros_like(bins_remain_cap)\n        \n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin. \n    Prioritizes bins that can fit the item and have the least remaining capacity after addition.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Prioritize bins based on remaining capacity after addition\n    priority = np.where(\n        remaining_capacity_after_addition >= 0, \n        bins_remain_cap,  # First-Fit decreasing heuristic for valid bins\n        -np.inf  # Invalid bins get -inf priority\n    )\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_cap = np.max(priority[valid_bins])\n        min_cap = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_cap) / (max_cap - min_cap)\n    else:\n        priority = np.zeros_like(bins_remain_cap)\n        \n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin. \n    Prioritizes bins that can fit the item and have the least remaining capacity after addition.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Prioritize bins based on remaining capacity after addition\n    priority = np.where(\n        remaining_capacity_after_addition >= 0, \n        bins_remain_cap,  # First-Fit decreasing heuristic for valid bins\n        -np.inf  # Invalid bins get -inf priority\n    )\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_cap = np.max(priority[valid_bins])\n        min_cap = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_cap) / (max_cap - min_cap)\n    else:\n        priority = np.zeros_like(bins_remain_cap)\n        \n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin. \n    Prioritizes bins that can fit the item and have the least remaining capacity after addition.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Prioritize bins based on remaining capacity after addition\n    priority = np.where(\n        remaining_capacity_after_addition >= 0, \n        bins_remain_cap,  # First-Fit decreasing heuristic for valid bins\n        -np.inf  # Invalid bins get -inf priority\n    )\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_cap = np.max(priority[valid_bins])\n        min_cap = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_cap) / (max_cap - min_cap)\n    else:\n        priority = np.zeros_like(bins_remain_cap)\n        \n    return priority\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin. \n    Prioritizes bins that can fit the item and have the least remaining capacity after addition.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Prioritize bins based on remaining capacity after addition\n    priority = np.where(\n        remaining_capacity_after_addition >= 0, \n        bins_remain_cap,  # First-Fit decreasing heuristic for valid bins\n        -np.inf  # Invalid bins get -inf priority\n    )\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_cap = np.max(priority[valid_bins])\n        min_cap = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_cap) / (max_cap - min_cap)\n    else:\n        priority = np.zeros_like(bins_remain_cap)\n        \n    return priority\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin. \n    Prioritizes bins that can fit the item and have the least remaining capacity after addition.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Prioritize bins based on remaining capacity after addition\n    priority = np.where(\n        remaining_capacity_after_addition >= 0, \n        bins_remain_cap,  # First-Fit decreasing heuristic for valid bins\n        -np.inf  # Invalid bins get -inf priority\n    )\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_cap = np.max(priority[valid_bins])\n        min_cap = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_cap) / (max_cap - min_cap)\n    else:\n        priority = np.zeros_like(bins_remain_cap)\n        \n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin. \n    Prioritizes bins that can fit the item and have the least remaining capacity after addition.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Prioritize bins based on remaining capacity after addition\n    priority = np.where(\n        remaining_capacity_after_addition >= 0, \n        bins_remain_cap,  # First-Fit decreasing heuristic for valid bins\n        -np.inf  # Invalid bins get -inf priority\n    )\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_cap = np.max(priority[valid_bins])\n        min_cap = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_cap) / (max_cap - min_cap)\n    else:\n        priority = np.zeros_like(bins_remain_cap)\n        \n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin. \n    Prioritizes bins that can fit the item and have the least remaining capacity after addition.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Prioritize bins based on remaining capacity after addition\n    priority = np.where(\n        remaining_capacity_after_addition >= 0, \n        bins_remain_cap,  # First-Fit decreasing heuristic for valid bins\n        -np.inf  # Invalid bins get -inf priority\n    )\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_cap = np.max(priority[valid_bins])\n        min_cap = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_cap) / (max_cap - min_cap)\n    else:\n        priority = np.zeros_like(bins_remain_cap)\n        \n    return priority\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin. \n    Prioritizes bins that can fit the item and have the least remaining capacity after addition.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Prioritize bins based on remaining capacity after addition\n    priority = np.where(\n        remaining_capacity_after_addition >= 0, \n        bins_remain_cap,  # First-Fit decreasing heuristic for valid bins\n        -np.inf  # Invalid bins get -inf priority\n    )\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_cap = np.max(priority[valid_bins])\n        min_cap = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_cap) / (max_cap - min_cap)\n    else:\n        priority = np.zeros_like(bins_remain_cap)\n        \n    return priority\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin. \n    Prioritizes bins that can fit the item and have the least remaining capacity after addition.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Prioritize bins based on remaining capacity after addition\n    priority = np.where(\n        remaining_capacity_after_addition >= 0, \n        bins_remain_cap,  # First-Fit decreasing heuristic for valid bins\n        -np.inf  # Invalid bins get -inf priority\n    )\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_cap = np.max(priority[valid_bins])\n        min_cap = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_cap) / (max_cap - min_cap)\n    else:\n        priority = np.zeros_like(bins_remain_cap)\n        \n    return priority\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}