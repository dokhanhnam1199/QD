```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with normalization for tight fitting and future capacity.
    """
    # Identify bins that are too small and assign very low priority
    priority = np.where(bins_remain_cap >= item, 1 / (1 + np.abs(bins_remain_cap - item)), -np.inf)
    
    # Weigh priority scores by remaining capacity after addition for tighter packing
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        priority[valid_bins] *= (1 - (bins_remain_cap[valid_bins] - item) / (bins_remain_cap[valid_bins] + 1e-6))
    
    return priority
```
