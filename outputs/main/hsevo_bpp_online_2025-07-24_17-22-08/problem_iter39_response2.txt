```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                tight_fit_weight: float = 0.75, 
                future_capacity_weight: float = 0.25, 
                valid_bin_threshold: float = 0.1,
                epsilon: float = 1e-6) -> np.ndarray:
    """
    Combines non-linear prioritization with nuanced penalty terms, 
    focusing on tight fit and future capacity with simplified and effective balancing.
    """
    # Identify valid bins
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Calculate remaining capacity after adding the item
    remain_cap_after_add = bins_remain_cap - item
    
    # Tight fit score with non-linear prioritization
    tight_fit_score = np.exp(-remain_cap_after_add / (item + epsilon))
    
    # Future capacity penalty term
    future_capacity_penalty = 1 / (1 + np.exp(remain_cap_after_add / (item + epsilon)))
    
    # Combine scores with effective balancing
    priority = np.where(valid_bins == 1, 
                         tight_fit_weight * tight_fit_score + future_capacity_weight * future_capacity_penalty, 
                         -np.inf)
    
    # Introduce a slight perturbation to avoid identical priorities for different bins
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
        priority += np.random.uniform(0, 1e-6, size=len(priority))
    
    return priority
```
