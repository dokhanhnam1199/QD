{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on a non-linear function of the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item will have a relatively high priority.\n    A bin that is too small for the item will have a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on a non-linear function of the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item will have a relatively high priority.\n    A bin that is too small for the item will have a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to balance between tight fitting and leaving room for future items\n                        -((bins_remain_cap - item) / (bins_remain_cap + 1e-6))**2 + np.log(bins_remain_cap - item + 1), \n                        -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n### Analyze & experience\n- Comparing the best heuristics (1st) with the worst (20th), we see that the top heuristics use a combination of non-linear prioritization and balancing terms to effectively manage tight fitting and future capacity. The best heuristics (1st and 2nd) utilize `np.exp` functions with adjustments for remaining capacity, while the worst (18th, 19th, 20th) use a mix of squared terms and logarithmic functions. Comparing (1st) vs (2nd), we see both use non-linear prioritization but differ in normalization and penalty terms. (3rd) vs (4th) shows a progression towards more complex balancing terms. Overall, the top heuristics tend to use more refined non-linear functions and balancing terms.\n- \nTo design better heuristics, let's analyze the given 'Current self-reflection' and 'Ineffective self-reflection'. Here are the key takeaways:\n\n* **Keywords:** Non-linear prioritization, balancing terms, normalization, penalty strategies.\n* **Advice:** \n    - Refine non-linear prioritization to balance tight fitting and future capacity.\n    - Experiment with different normalization and penalty strategies.\n* **Avoid:** \n    - Unnecessary complexity.\n    - Overemphasis on simple, intuitive logic that doesn't consider the trade-offs.\n* **Explanation:** Redefining 'Current self-reflection' involves synthesizing the effective aspects from both sections, emphasizing the importance of non-linear prioritization and balancing terms while avoiding unnecessary complexity and focusing on strategies that significantly impact performance.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}