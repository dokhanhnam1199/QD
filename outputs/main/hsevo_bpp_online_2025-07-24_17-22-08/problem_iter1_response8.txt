```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot accommodate the item
    priority = np.where(remaining_cap_after_addition >= 0, remaining_cap_after_addition, -1e10)
    
    # Give higher priority to bins with less remaining capacity after addition (i.e., more full)
    # To achieve this, we subtract the remaining capacity from a large constant (max possible remaining capacity)
    # Here, we assume the maximum possible remaining capacity is 1 (since bins_remain_cap is normalized)
    # You can adjust this based on your actual bin capacity
    priority = np.where(remaining_cap_after_addition >= 0, 1 - remaining_cap_after_addition, priority)
    
    return priority
```
