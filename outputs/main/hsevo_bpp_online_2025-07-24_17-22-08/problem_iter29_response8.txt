```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined penalty term for better bin selection.
    Balances tight fitting and future capacity.
    """
    # Non-linear prioritization for bins with sufficient capacity
    priority = np.where(bins_remain_cap >= item, 1 / (1 + np.abs(bins_remain_cap - item)), -np.inf)
    
    # Refined penalty term to encourage tight fits and leave capacity for future items
    remain_cap_after_add = bins_remain_cap - item
    penalty_term = np.exp(-remain_cap_after_add / item) * (remain_cap_after_add / bins_remain_cap)
    priority *= penalty_term
    
    return priority
```
