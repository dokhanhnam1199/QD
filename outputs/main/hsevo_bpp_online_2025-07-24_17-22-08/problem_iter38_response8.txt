```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with nuanced penalty terms and a tight fit bonus.
    Balances tight fitting and future capacity for effective bin packing.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization with a dynamic penalty term
    proportion_remain = remain_cap_after_add / item
    tight_fit_measure = item / bins_remain_cap
    priority = np.where(valid_bins == 1, np.exp(-proportion_remain) * (1 + tight_fit_measure), -np.inf)
    
    # Refined penalty term to balance tight fitting and future capacity
    valid_bins_idx = np.where(valid_bins == 1)[0]
    if len(valid_bins_idx) > 0:
        balancing_term = 1 / (1 + np.abs(bins_remain_cap[valid_bins_idx] - item))
        priority[valid_bins_idx] *= balancing_term
        
    # Apply a bonus for bins with very tight fits to encourage efficient packing
    tight_fit_bonus = np.where((remain_cap_after_add > 0) & (remain_cap_after_add < 0.1 * item), 0.1, 0)
    priority += tight_fit_bonus
    
    # Normalize priority scores and introduce slight perturbation
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    priority += np.random.uniform(0, 1e-5, size=len(priority))
    
    return priority
```
