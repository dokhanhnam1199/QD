```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # For each bin, calculate the remaining capacity if the item is added
    remaining_cap_if_added = bins_remain_cap - item
    
    # Assign a very low priority (negative infinity) to bins that cannot hold the item
    priority = np.where(remaining_cap_if_added >= 0, -remaining_cap_if_added, -np.inf)
    
    # Normalize the priority scores so that the bin with the least remaining capacity (if the item is added) gets the highest priority
    return priority
```
