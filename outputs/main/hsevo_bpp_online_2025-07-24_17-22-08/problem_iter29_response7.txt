```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined penalty term for tighter fits and future capacity.
    Balances tight fitting and future capacity using a simple yet effective formula.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization with a penalty for large remaining capacity
    priority = np.where(valid_bins == 1, 
                         np.exp(-remain_cap_after_add / item),  # Encourage tight fits
                         -np.inf)
    
    # Refine priority with a balancing term to consider future capacity
    valid_bins_idx = priority != -np.inf
    if np.any(valid_bins_idx):
        balancing_term = 1 / (1 + np.exp(remain_cap_after_add[valid_bins_idx] / item))
        priority[valid_bins_idx] *= balancing_term
    
    # Normalize priority scores for better adaptability
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    return priority
```
