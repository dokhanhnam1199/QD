```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is based on a non-linear function of the remaining capacity of the bin and the size of the item.
    A bin with a remaining capacity that is just enough for the item and leaves some room for future items will have the highest priority.
    A bin that is too small for the item will have a priority of negative infinity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # First, we identify bins that are too small for the item and give them a very low priority
    priority = np.where(bins_remain_cap >= item, np.log(bins_remain_cap - item + 1), -np.inf)
    
    # Then, we add a penalty term to bins with very large remaining capacity to encourage tighter packing
    priority = np.where(bins_remain_cap >= item, priority - 0.1 * (bins_remain_cap - item) / (bins_remain_cap + 1e-6), priority)
    
    # Return the priority scores
    return priority
```
