```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines elements of minimizing remaining capacity and using a non-linear function.
    Prioritizes bins with remaining capacity closer to the item size using a reciprocal function and normalizes.
    """
    # Calculate priority score using a reciprocal function for valid bins
    priority = np.where(bins_remain_cap >= item, 1 / (bins_remain_cap - item + 1), -np.inf)
    
    # Apply a non-linear transformation to balance tight packing and future capacity
    priority = np.where(priority > -np.inf, -((bins_remain_cap - item) / bins_remain_cap) + priority, -np.inf)
    
    # Normalize the priority scores to be between 0 and 1 for valid bins
    valid_bins = priority > -np.inf
    if np.any(valid_bins):
        min_priority = np.min(priority[valid_bins])
        max_priority = np.max(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-8), 0)
    
    return priority
```
