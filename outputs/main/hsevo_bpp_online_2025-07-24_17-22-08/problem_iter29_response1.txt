```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined penalty term for better bin selection.
    Balances tight fitting and future capacity using a simple yet effective formulation.
    """
    # Non-linear prioritization for bins with sufficient capacity
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)
    
    # Refined penalty term to balance tight fitting and future capacity
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        # Use a term that considers both remaining capacity and item size
        balancing_term = 1 / (1 + np.abs(bins_remain_cap[valid_bins] - item))
        priority[valid_bins] *= balancing_term
        
    return priority
```
