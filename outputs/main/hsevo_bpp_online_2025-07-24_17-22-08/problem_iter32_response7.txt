```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined penalty term for better bin selection.
    Balances tight fitting and future capacity using a ratio-based penalty.
    """
    # Identify valid bins and calculate the ratio of item size to remaining capacity
    valid_bins = (bins_remain_cap >= item).astype(float)
    fit_ratio = item / bins_remain_cap
    
    # Non-linear prioritization for valid bins
    priority = np.where(valid_bins == 1, 1 / (1 + np.abs(bins_remain_cap - item)), -np.inf)
    
    # Refined penalty term to encourage tight fits and leave capacity for future items
    penalty_term = np.exp(-fit_ratio)  # Using fit_ratio for a simpler yet effective penalty
    
    # Combine prioritization and penalty term
    priority *= penalty_term
    
    return priority
```
