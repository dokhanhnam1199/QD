{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                penalty_weight: float = 0.01660808705558641, \n                perturbation_max: float = 4.89548400971689e-06,\n                tight_fit_weight: float = 0.5924168393009128,\n                future_capacity_weight: float = 0.4013177433345919,\n                valid_bin_threshold: float = 0.05689879444461243,\n                tight_fit_measure_divisor_epsilon: float = 8.003889652760938e-06,\n                future_capacity_penalty_shift: float = 0.41950163596811374) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with nuanced penalty terms, \n    balancing tight fit and future capacity effectively with slight perturbation.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization focusing on tight fit\n    tight_fit_score = np.exp(-remain_cap_after_add / (item + tight_fit_measure_divisor_epsilon))\n    tight_fit_measure = item / bins_remain_cap\n    \n    # Refined penalty term for future capacity and balancing\n    future_capacity_penalty = (1 / (1 + np.exp((remain_cap_after_add - item*future_capacity_penalty_shift) / item)))\n    \n    # Combine scores with a refined penalty term for better adaptability and robustness\n    priority = np.where(valid_bins == 1, \n                         tight_fit_weight * tight_fit_score * (1 + tight_fit_measure) + future_capacity_weight * future_capacity_penalty - penalty_weight * remain_cap_after_add, \n                         -np.inf)\n    \n    # Normalize priority scores\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    # Introduce a slight perturbation to avoid identical priorities for different bins\n    priority += np.random.uniform(0, perturbation_max, size=len(priority))\n    \n    return priority\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nTo design better heuristics, let's redefine 'Current self-reflection' by avoiding the pitfalls in 'Ineffective self-reflection'. Here are the key takeaways:\n\n* **Keywords**: Non-linear prioritization, nuanced penalty terms, balancing tight fit and future capacity.\n* **Advice**: Focus on combining non-linear prioritization with refined penalty terms and effective balancing terms to optimize bin selection.\n* **Avoid**: Unnecessary complexity, oversimplification, redundant code, and unnecessary normalization or penalty terms.\n* **Explanation**: By striking a balance between competing factors and avoiding unnecessary complexity, we can create more effective heuristics that adapt to different scenarios.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}