```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is based on the remaining capacity of the bin and the size of the item.
    A bin with a remaining capacity that is just enough for the item and leaves the least remaining capacity will have the highest priority.
    A bin that is too small for the item will have a priority of negative infinity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # First, we identify bins that are too small for the item and give them a very low priority
    priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)
    
    # We give higher priority to bins that will have less remaining capacity after the item is added
    # So, we directly use the negative of the remaining capacity after adding the item as the priority
    priority = - (bins_remain_cap - item)
    
    # To make the priority more intuitive and to avoid potential overflow when bins_remain_cap is large,
    # we can simply use the negative of the remaining capacity after the item is placed as the priority score.
    # However, to keep it simple and focused on the goal, we stick with a straightforward calculation.

    # Return the priority scores
    return priority
```
