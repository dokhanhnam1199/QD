{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # We want to prioritize bins that have enough capacity for the item\n    # and have the least remaining capacity after adding the item\n    # to minimize waste\n    priority = np.where(\n        remaining_capacity_after_addition >= 0, \n        -remaining_capacity_after_addition,  # Lower remaining capacity is better\n        -np.inf  # Bins that cannot hold the item get -inf priority\n    )\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    \n    This function implements the First-Fit decreasing heuristic. \n    The bin with the highest remaining capacity that can fit the item is given the highest priority.\n    If no bin can fit the item, the priority is 0 for all bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the item can fit in each bin\n    valid_bins = bins_remain_cap >= item\n    \n    # Initialize priority scores to negative infinity for bins that can't fit the item\n    priority_scores = np.where(valid_bins, bins_remain_cap, -np.inf)\n    \n    # Normalize the priority scores to be between 0 and 1\n    max_cap = np.max(priority_scores)\n    if max_cap == -np.inf:  # No bin can fit the item\n        return np.zeros_like(bins_remain_cap)\n    else:\n        priority_scores = np.where(valid_bins, (priority_scores - np.min(priority_scores[valid_bins])) / (max_cap - np.min(priority_scores[valid_bins])), 0)\n        \n    return priority_scores\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic prioritizes bins based on the remaining capacity after adding the item, while the worst heuristic implements a First-Fit decreasing heuristic with normalization. \nComparing (1st) vs (2nd), we see both prioritize bins based on remaining capacity, but (1st) directly uses the remaining capacity after addition, whereas (2nd) calculates the negative of the remaining capacity after addition.\n(3rd) vs (4th) shows similar logic with slight variations in calculation.\nComparing (second worst) vs (worst), both implement First-Fit decreasing heuristic.\nOverall: Top heuristics tend to prioritize bins based on how well the item fits, with a focus on minimizing remaining capacity.\n- \nTo come up with ideas to design better heuristics by redefining 'Current self-reflection', let's analyze and expand upon the given information.\n\n* **Keywords**: Simple logic, intuitive, problem's objective, minimizing waste, normalization.\n* **Advice**: Focus on creating heuristics with straightforward and understandable logic that directly addresses the problem's goal.\n* **Avoid**: Unnecessary complexity and normalization that doesn't significantly enhance performance.\n* **Explanation**: By keeping heuristics simple and targeted, we can improve their efficiency and effectiveness, leading to better solutions for complex problems.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}