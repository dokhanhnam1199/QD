```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.
    Uses np.exp(-(bins_remain_cap - item)) and a balancing term (bins_remain_cap - item) / bins_remain_cap for valid bins.
    """
    # Identify valid bins and assign a very low priority to invalid bins
    valid_bins = (bins_remain_cap >= item).astype(float)
    priority = np.where(valid_bins == 1, np.exp(-(bins_remain_cap - item)), -np.inf)
    
    # Apply a balancing term to valid bins
    priority = np.where(valid_bins == 1, priority * ((bins_remain_cap - item) / bins_remain_cap), priority)
    
    return priority
```
