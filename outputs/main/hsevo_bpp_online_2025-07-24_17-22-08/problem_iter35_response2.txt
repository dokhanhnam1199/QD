```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                penalty_weight: float = 0.01, 
                perturbation_max: float = 1e-5) -> np.ndarray:
    """
    Combines non-linear prioritization with nuanced penalty terms, 
    balancing tight fitting and future capacity.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Calculate tight fit measure and non-linear penalty term
    tight_fit_measure = item / bins_remain_cap
    penalty_term = -np.log1p(remain_cap_after_add / item)  # Non-linear penalty term
    
    # Combine non-linear prioritization with nuanced penalty terms
    priority = np.where(valid_bins == 1, 
                         np.exp(-remain_cap_after_add / item) * (1 + tight_fit_measure) + penalty_weight * penalty_term, 
                         -np.inf)
    
    # Normalize priority scores and introduce slight perturbation
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    priority += np.random.uniform(0, perturbation_max, size=len(priority))
    
    return priority
```
