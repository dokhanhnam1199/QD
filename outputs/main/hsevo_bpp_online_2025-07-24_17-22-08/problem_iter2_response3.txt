```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin. 
    Prioritizes bins that can fit the item and have the least remaining capacity after addition.
    """
    # Calculate remaining capacity after adding the item
    remaining_capacity_after_addition = bins_remain_cap - item
    
    # Prioritize bins based on remaining capacity after addition
    priority = np.where(
        remaining_capacity_after_addition >= 0, 
        bins_remain_cap,  # First-Fit decreasing heuristic for valid bins
        -np.inf  # Invalid bins get -inf priority
    )
    
    # Normalize priority scores for valid bins
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        max_cap = np.max(priority[valid_bins])
        min_cap = np.min(priority[valid_bins])
        priority[valid_bins] = (priority[valid_bins] - min_cap) / (max_cap - min_cap)
    else:
        priority = np.zeros_like(bins_remain_cap)
        
    return priority
```
