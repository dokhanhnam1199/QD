```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit and tight-fitting heuristics with a non-linear priority score.
    Balances tight fitting and future capacity using exp function and remaining capacity.
    """
    # Identify bins that are too small for the item and give them a very low priority
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)
    
    # Weigh the priority scores by a factor that considers the remaining capacity
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        # Use a non-linear function to further balance between tight fitting and future capacity
        priority[valid_bins] *= (1 + np.tanh(bins_remain_cap[valid_bins] - np.mean(bins_remain_cap[valid_bins])))
    
    return priority
```
