```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with adaptive penalty terms and slight perturbation for effective bin selection.
    Balances tight fit and future capacity using a ratio-based penalty and exponential decay.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization for valid bins with a penalty term for tight fits
    tight_fit_measure = np.exp(-(bins_remain_cap - item) / item)
    priority = np.where(valid_bins == 1, tight_fit_measure, -np.inf)
    
    # Dynamic penalty term based on the proportion of remaining capacity
    penalty_term = np.exp(-remain_cap_after_add / (item + 1e-6))  # Avoids division by zero
    
    # Combine prioritization and penalty term with adaptive weighting
    alpha = 0.7  # Weight for tight fit measure
    beta = 0.3   # Weight for penalty term
    priority = np.where(valid_bins == 1, alpha * priority - beta * (1 - penalty_term), -np.inf)
    
    # Normalize priority scores for better adaptability
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    # Introduce a slight perturbation to break ties
    perturbation_max = 1e-5
    priority += np.random.uniform(0, perturbation_max, size=len(priority))
    
    return priority
```
