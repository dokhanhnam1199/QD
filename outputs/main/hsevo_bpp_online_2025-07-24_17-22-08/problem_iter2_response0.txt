```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin based on remaining capacity after adding the item.
    Bins with remaining capacity just enough for the item get higher priority.
    """
    # Identify bins that are too small and give them a very low priority
    priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)
    
    # Normalize the priority scores using a simple and effective method
    valid_bins = (priority != -np.inf)
    if np.any(valid_bins):
        max_priority = np.max(-priority[valid_bins])  # max of -priority for valid bins
        min_priority = np.min(-priority[valid_bins])  # min of -priority for valid bins
        if max_priority != min_priority:
            priority[valid_bins] = (-priority[valid_bins] - min_priority) / (max_priority - min_priority)
        else:
            priority[valid_bins] = 1.0  # all valid bins get the same priority
    
    return priority
```
