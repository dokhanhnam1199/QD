```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined penalty term for tighter fits and future capacity.
    Uses np.exp for non-linear prioritization and a balancing term to encourage tighter fits.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization with a penalty term for large remaining capacities
    priority = np.where(valid_bins, 
                         np.exp(-remain_cap_after_add / item),  # Non-linear prioritization
                         -np.inf)
    
    # Refined penalty term to balance tight fitting and future capacity
    penalty_term = np.where(remain_cap_after_add > 0, 1 / (1 + np.exp((remain_cap_after_add - item/2) / item)), 1)
    priority *= penalty_term
    
    return priority
```
