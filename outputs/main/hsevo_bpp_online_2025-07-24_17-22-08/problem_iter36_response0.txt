```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                alpha: float = 0.7, beta: float = 0.3, 
                penalty_weight: float = 0.01, 
                perturbation_max: float = 1e-5) -> np.ndarray:
    """
    Advanced priority function that refines the balance between tight fit and future capacity,
    incorporating a more nuanced non-linear prioritization and adaptive penalty term.
    """
    # Identify valid bins
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Calculate the remaining capacity after adding the item and a tight fit measure
    remain_cap_after_add = bins_remain_cap - item
    tight_fit_measure = item / bins_remain_cap
    
    # Non-linear prioritization with an adaptive penalty term for balancing tight fit and future capacity
    priority = np.where(valid_bins == 1, 
                         alpha * np.exp(-remain_cap_after_add / item) + beta * tight_fit_measure - penalty_weight * (remain_cap_after_add / bins_remain_cap), 
                         -np.inf)
    
    # Scale priority scores for better differentiation
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    # Introduce a slight perturbation to avoid identical priorities for different bins
    priority += np.random.uniform(0, perturbation_max, size=len(priority))
    
    return priority
```
