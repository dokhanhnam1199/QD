```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines a reciprocal function for tight fit with a bonus for future capacity.
    """
    # Calculate priority score using a reciprocal function for valid bins
    priority = np.where(bins_remain_cap >= item, 1 / (bins_remain_cap - item + 1), -np.inf)
    
    # Add a bonus to prioritize bins with more remaining capacity
    priority = np.where(priority > -np.inf, priority + 1e-3 * bins_remain_cap / (item + 1e-6), priority)
    
    # Normalize the priority scores to be between 0 and 1 for valid bins
    valid_bins = priority > -np.inf
    if np.any(valid_bins):
        min_priority = np.min(priority[valid_bins])
        max_priority = np.max(priority[valid_bins])
        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority), 0)
    
    return priority
```
