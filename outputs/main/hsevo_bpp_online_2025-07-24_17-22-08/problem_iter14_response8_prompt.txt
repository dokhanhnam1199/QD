{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.\n    Prioritizes bins with enough capacity and a good balance between tightness and remaining capacity.\n    \"\"\"\n    # Identify bins that are too small and assign them a very low priority\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to prioritize bins based on remaining capacity and item size\n                        np.exp(-(bins_remain_cap - item) / (bins_remain_cap + 1e-6)), \n                        -np.inf)\n    \n    # Apply an additional balancing term to prioritize bins that are not too full\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Normalize the priority scores for valid bins to ensure they are on the same scale\n        max_score = np.max(priority[valid_bins])\n        min_score = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_score) / (max_score - min_score + 1e-6)\n        # Apply the balancing term\n        priority[valid_bins] *= (1 - item / bins_remain_cap[valid_bins])\n        \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines best-fit and tight-fitting heuristics with a non-linear priority score.\n    Balances tight fitting and future capacity using exp function and remaining capacity.\n    \"\"\"\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    \n    # Weigh the priority scores by a factor that considers the remaining capacity\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Use a non-linear function to further balance between tight fitting and future capacity\n        priority[valid_bins] *= (1 + np.tanh(bins_remain_cap[valid_bins] - np.mean(bins_remain_cap[valid_bins])))\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic combines non-linear prioritization with a penalty for large remaining capacity, using `np.exp(-remaining_cap_after_addition / item) - penalty_weight * remaining_cap_after_addition / bins_remain_cap`, while the worst uses a simple ratio `(bins_remain_cap - item) / bins_remain_cap`. The top heuristic balances tight fitting and future capacity more effectively. Comparing (1st) vs (2nd), we see that both use non-linear prioritization but the 1st includes a penalty term with a tuned weight. (3rd) vs (4th) are identical, suggesting a potential tie or redundancy in the ranking. (19th) vs (20th) are also identical, further indicating that the ranking may not always reflect a significant difference between adjacent heuristics. Overall, the top heuristics tend to use more complex, non-linear functions to balance tight fitting and future capacity, and some include normalization or additional balancing terms.\n- \nTo improve the heuristics design, let's analyze the given information.\n\n* Keywords: non-linear functions, balance, tight fitting, future capacity, normalization, penalty terms\n* Advice: Focus on simple and intuitive logic; use non-linear functions to prioritize bins based on remaining capacity; balance tight fitting and future capacity.\n* Avoid: Unnecessary normalization, unnecessary complexity, penalty terms unless significantly impactful.\n* Explanation: Redefining 'Current self-reflection' involves combining the effective aspects while avoiding the ineffective ones, resulting in using simple, non-linear functions that balance the trade-off between tight fitting and future capacity, with a focus on intuitive logic.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}