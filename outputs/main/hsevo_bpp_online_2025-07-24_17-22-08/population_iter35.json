[
  {
    "stdout_filepath": "problem_iter35_response0.txt_stdout.txt",
    "code_path": "problem_iter35_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, \n                penalty_weight: float = 0.015962034932029284, \n                perturbation_max: float = 8.082068759055226e-06) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a refined penalty term for tighter fits and future capacity.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Calculate the ratio of item size to bin remaining capacity for a tight fit measure\n    tight_fit_measure = item / bins_remain_cap\n    \n    # Non-linear prioritization for valid bins and a refined penalty term to balance tight fitting and future capacity\n    penalty_term = np.exp(-remain_cap_after_add / item)  # Non-linear prioritization\n    priority = np.where(valid_bins == 1, tight_fit_measure * penalty_term - penalty_weight * remain_cap_after_add, -np.inf)\n    \n    # Normalize priority scores for better adaptability and robustness\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    # Introduce a slight perturbation to avoid identical priorities for different bins\n    priority += np.random.uniform(0, perturbation_max, size=len(priority))\n    \n    return priority",
    "response_id": 0,
    "tryHS": false,
    "obj": 8.974870362983646,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 275.0,
    "mi": 86.7143664662741,
    "token_count": 166.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response1.txt_stdout.txt",
    "code_path": "problem_iter35_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a nuanced penalty term and a tight fit bonus.\n    Balances tight fitting and future capacity for effective bin packing.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization with a dynamic penalty term\n    proportion_remain = remain_cap_after_add / item\n    priority = np.where(valid_bins == 1, np.exp(-proportion_remain), -np.inf)\n    \n    # Refined penalty term to balance tight fitting and future capacity\n    valid_bins_idx = np.where(valid_bins == 1)[0]\n    if len(valid_bins_idx) > 0:\n        balancing_term = 1 / (1 + np.abs(bins_remain_cap[valid_bins_idx] - item))\n        priority[valid_bins_idx] *= balancing_term\n        \n    # Apply a bonus for bins with very tight fits to encourage efficient packing\n    tight_fit_bonus = np.where((remain_cap_after_add > 0) & (remain_cap_after_add < 0.1 * item), 0.1, 0)\n    priority += tight_fit_bonus\n    \n    # Normalize priority scores for adaptability\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    else:\n        priority = valid_bins - 1  # When all bins are invalid, return -1 for invalid bins\n    \n    return priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 275.0,
    "mi": 86.7143664662741,
    "token_count": 166.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response2.txt_stdout.txt",
    "code_path": "problem_iter35_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, \n                penalty_weight: float = 0.01, \n                perturbation_max: float = 1e-5) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with nuanced penalty terms, \n    balancing tight fitting and future capacity.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Calculate tight fit measure and non-linear penalty term\n    tight_fit_measure = item / bins_remain_cap\n    penalty_term = -np.log1p(remain_cap_after_add / item)  # Non-linear penalty term\n    \n    # Combine non-linear prioritization with nuanced penalty terms\n    priority = np.where(valid_bins == 1, \n                         np.exp(-remain_cap_after_add / item) * (1 + tight_fit_measure) + penalty_weight * penalty_term, \n                         -np.inf)\n    \n    # Normalize priority scores and introduce slight perturbation\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    priority += np.random.uniform(0, perturbation_max, size=len(priority))\n    \n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.058635819704831,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 275.0,
    "mi": 86.7143664662741,
    "token_count": 166.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response3.txt_stdout.txt",
    "code_path": "problem_iter35_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, \n                penalty_weight: float = 0.015962034932029284, \n                perturbation_max: float = 8.082068759055226e-06) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a refined penalty term, \n    balancing tight fit and future capacity for online bin packing.\n    \"\"\"\n    # Calculate valid bins and remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization focusing on tight fit and future capacity\n    tight_fit_score = np.exp(-remain_cap_after_add / (item + 1e-6))\n    tight_fit_measure = item / bins_remain_cap\n    \n    # Combine scores with a weighted average, apply a refined penalty term, \n    # and incorporate a tight fit measure for enhanced prioritization\n    priority = np.where(valid_bins == 1, \n                         (0.7 * tight_fit_score + 0.3 * (tight_fit_measure)) - penalty_weight * remain_cap_after_add, \n                         -np.inf)\n    \n    # Normalize priority scores for better adaptability and robustness\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    # Introduce a slight perturbation to avoid identical priorities for different bins\n    priority += np.random.uniform(0, perturbation_max, size=len(priority))\n    \n    return priority",
    "response_id": 3,
    "tryHS": false,
    "obj": 3.8990825688073536,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 275.0,
    "mi": 86.7143664662741,
    "token_count": 166.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response4.txt_stdout.txt",
    "code_path": "problem_iter35_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balanced penalty term, \n    balancing tight fit and future capacity effectively.\n    \"\"\"\n    # Calculate valid bins and remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization focusing on tight fit\n    tight_fit_score = np.exp(-remain_cap_after_add / (item + 1e-6))\n    \n    # Refined penalty term for future capacity and balancing\n    future_capacity_penalty = (1 / (1 + np.exp((remain_cap_after_add - item/2) / item)))\n    future_capacity_score = remain_cap_after_add / (bins_remain_cap + 1e-6)\n    penalty_term = np.where(valid_bins == 1, future_capacity_score, 1)\n    \n    # Combine scores for better adaptability\n    priority = np.where(valid_bins == 1, \n                         0.7 * tight_fit_score * penalty_term + 0.3 * future_capacity_penalty, \n                         -np.inf)\n    \n    # Normalize priority scores\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    return priority",
    "response_id": 4,
    "tryHS": false,
    "obj": 10.061826884722786,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 275.0,
    "mi": 86.7143664662741,
    "token_count": 166.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response5.txt_stdout.txt",
    "code_path": "problem_iter35_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, \n                penalty_weight: float = 0.015962034932029284, \n                perturbation_max: float = 8.082068759055226e-06) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a refined penalty term for tighter fits and future capacity.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Calculate the ratio of item size to bin remaining capacity for a tight fit measure\n    tight_fit_measure = item / bins_remain_cap\n    \n    # Non-linear prioritization for valid bins and a refined penalty term to balance tight fitting and future capacity\n    fit_ratio = tight_fit_measure  # Higher ratio indicates tighter fit\n    penalty_term = np.exp(-remain_cap_after_add / item)  # Non-linear prioritization\n    priority = np.where(valid_bins == 1, fit_ratio * penalty_term - penalty_weight * remain_cap_after_add, -np.inf)\n    \n    # Normalize priority scores for better adaptability and robustness\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    # Introduce a slight perturbation to avoid identical priorities for different bins\n    priority += np.random.uniform(0, perturbation_max, size=len(priority))\n    \n    return priority",
    "response_id": 5,
    "tryHS": false,
    "obj": 8.974870362983646,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 275.0,
    "mi": 86.7143664662741,
    "token_count": 166.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response6.txt_stdout.txt",
    "code_path": "problem_iter35_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, \n                penalty_weight: float = 0.015962034932029284, \n                perturbation_max: float = 8.082068759055226e-06) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with nuanced penalty terms, \n    balancing tight fit and future capacity effectively with slight perturbation.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization focusing on tight fit\n    tight_fit_score = np.exp(-remain_cap_after_add / (item + 1e-6))\n    tight_fit_measure = item / bins_remain_cap\n    \n    # Refined penalty term for future capacity and balancing\n    future_capacity_penalty = (1 / (1 + np.exp((remain_cap_after_add - item/2) / item)))\n    \n    # Combine scores with a refined penalty term for better adaptability and robustness\n    priority = np.where(valid_bins == 1, \n                         0.7 * tight_fit_score * (1 + tight_fit_measure) + 0.3 * future_capacity_penalty - penalty_weight * remain_cap_after_add, \n                         -np.inf)\n    \n    # Normalize priority scores\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    # Introduce a slight perturbation to avoid identical priorities for different bins\n    priority += np.random.uniform(0, perturbation_max, size=len(priority))\n    \n    return priority",
    "response_id": 6,
    "tryHS": false,
    "obj": 3.8591942560829726,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 275.0,
    "mi": 86.7143664662741,
    "token_count": 166.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response7.txt_stdout.txt",
    "code_path": "problem_iter35_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a dynamic penalty term for effective bin selection.\n    Balances tight fitting and future capacity using a ratio-based penalty and exponential decay.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization for valid bins with a penalty term for tight fits\n    priority = np.where(valid_bins == 1, 1 / (1 + np.abs(bins_remain_cap - item)), -np.inf)\n    \n    # Dynamic penalty term based on the proportion of remaining capacity\n    penalty_term = np.exp(-remain_cap_after_add / (item + 1e-6))  # Avoids division by zero\n    \n    # Combine prioritization and penalty term\n    priority *= penalty_term\n    \n    # Normalize priority scores for better adaptability\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    return priority",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 275.0,
    "mi": 86.7143664662741,
    "token_count": 166.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response8.txt_stdout.txt",
    "code_path": "problem_iter35_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with nuanced penalty terms, balancing tight fit and future capacity.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Calculate tight fit measure and dynamic penalty term\n    tight_fit_measure = item / bins_remain_cap\n    penalty_term = 1 - (item / bins_remain_cap)  # Encourages bins that are filled to a larger proportion\n    \n    # Non-linear prioritization with a refined penalty term\n    priority = np.where(valid_bins == 1, \n                         np.exp(-remain_cap_after_add / (item + 1e-6)) * (1 + tight_fit_measure) * penalty_term,  \n                         -np.inf)\n    \n    # Normalize priority scores and introduce a slight perturbation\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    priority += np.random.uniform(0, 1e-6, size=len(priority))\n    \n    return priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 13.731551655364981,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 275.0,
    "mi": 86.7143664662741,
    "token_count": 166.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response9.txt_stdout.txt",
    "code_path": "problem_iter35_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a dynamic penalty term, \n    balancing tight fit and future capacity effectively.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization focusing on tight fit\n    tight_fit_score = np.exp(-remain_cap_after_add / (item + 1e-6))\n    \n    # Dynamic penalty term for future capacity and balancing\n    future_capacity_penalty = 1 - (remain_cap_after_add / (bins_remain_cap + 1e-6))  # Simplified penalty term\n    \n    # Combine scores for better adaptability\n    priority = np.where(valid_bins == 1, \n                         0.7 * tight_fit_score + 0.3 * future_capacity_penalty, \n                         -np.inf)\n    \n    # Enhance differentiation among valid bins by applying a non-linear scaling\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = np.where(priority != -np.inf, (priority / max_priority) ** 1.5, -np.inf)  # Adjusted exponent for better differentiation\n    \n    return priority",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 275.0,
    "mi": 86.7143664662741,
    "token_count": 166.0,
    "exec_success": true
  }
]