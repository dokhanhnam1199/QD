```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined penalty term and 
    tight fit measure for enhanced online bin packing.
    """
    # Calculate valid bins and remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization focusing on tight fit and future capacity
    tight_fit_score = np.exp(-remain_cap_after_add / (item + 1e-6))
    tight_fit_measure = item / bins_remain_cap
    future_capacity_penalty = np.where(remain_cap_after_add > 0, 
                                        remain_cap_after_add / bins_remain_cap, 
                                        1)
    
    # Combine scores with a weighted average and apply a refined penalty term
    alpha, beta, gamma = 0.6, 0.2, 0.2  # weights for tight_fit_score, tight_fit_measure, and future_capacity_penalty
    penalty_weight = 0.015  # penalty weight for remaining capacity
    priority = np.where(valid_bins == 1, 
                         alpha * tight_fit_score + beta * tight_fit_measure + gamma * (1 - future_capacity_penalty) - penalty_weight * remain_cap_after_add, 
                         -np.inf)
    
    # Normalize priority scores for better adaptability
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    # Introduce a slight perturbation to avoid identical priorities
    perturbation_max = 1e-5
    priority += np.random.uniform(0, perturbation_max, size=len(priority))
    
    return priority
```
