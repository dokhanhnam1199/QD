```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a balance term for tight fitting and future capacity.
    Uses np.exp(-(bins_remain_cap - item) / item) and a balancing term for valid bins.
    """
    # Calculate priority score using a non-linear function for valid bins
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)
    
    # Apply a balancing term to valid bins to prioritize bins that are not too full
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        remaining_cap_after_addition = bins_remain_cap[valid_bins] - item
        # Balance between tight fitting and future capacity
        priority[valid_bins] *= (remaining_cap_after_addition / bins_remain_cap[valid_bins])
        
    return priority
```
