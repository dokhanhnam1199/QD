[
  {
    "stdout_filepath": "problem_iter8_response0.txt_stdout.txt",
    "code_path": "problem_iter8_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on a non-linear function of remaining capacity and item size.\n    Balances between tight fitting and leaving room for future items.\n    \"\"\"\n    # Identify bins that are too small for the item\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Balance between tight fitting and future capacity\n    avg_remain_cap = np.mean(bins_remain_cap[bins_remain_cap >= item])\n    priority = np.where(bins_remain_cap >= item, priority * (1 + (avg_remain_cap - bins_remain_cap) / (avg_remain_cap + 1e-6)), priority)\n    \n    return priority",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 136.16184010614157,
    "mi": 95.37917693949348,
    "token_count": 111.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response1.txt_stdout.txt",
    "code_path": "problem_iter8_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines elements of minimizing remaining capacity and using a non-linear function.\n    Prioritizes bins with remaining capacity closer to the item size using a reciprocal function and normalizes.\n    \"\"\"\n    # Calculate priority score using a reciprocal function for valid bins\n    priority = np.where(bins_remain_cap >= item, 1 / (bins_remain_cap - item + 1), -np.inf)\n    \n    # Apply a non-linear transformation to balance tight packing and future capacity\n    priority = np.where(priority > -np.inf, -((bins_remain_cap - item) / bins_remain_cap) + priority, -np.inf)\n    \n    # Normalize the priority scores to be between 0 and 1 for valid bins\n    valid_bins = priority > -np.inf\n    if np.any(valid_bins):\n        min_priority = np.min(priority[valid_bins])\n        max_priority = np.max(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority + 1e-8), 0)\n    \n    return priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 136.16184010614157,
    "mi": 95.37917693949348,
    "token_count": 111.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response2.txt_stdout.txt",
    "code_path": "problem_iter8_code2.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with normalization for tight fitting and future capacity.\n    \"\"\"\n    # Identify bins that are too small and assign very low priority\n    priority = np.where(bins_remain_cap >= item, 1 / (1 + np.abs(bins_remain_cap - item)), -np.inf)\n    \n    # Weigh priority scores by remaining capacity after addition for tighter packing\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        priority[valid_bins] *= (1 - (bins_remain_cap[valid_bins] - item) / (bins_remain_cap[valid_bins] + 1e-6))\n    \n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 136.16184010614157,
    "mi": 95.37917693949348,
    "token_count": 111.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response3.txt_stdout.txt",
    "code_path": "problem_iter8_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on a balance between tight fitting and future capacity.\n    \n    Combines non-linear functions to prioritize bins with remaining capacity just enough for the item.\n    \"\"\"\n    # Identify bins that are too small and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    # Balance tight fitting and future capacity\n    priority *= (1 + np.tanh(-(bins_remain_cap - item) / item))\n    return priority",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 136.16184010614157,
    "mi": 95.37917693949348,
    "token_count": 111.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response4.txt_stdout.txt",
    "code_path": "problem_iter8_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines a reciprocal function for tight fit with a bonus for future capacity.\n    \"\"\"\n    # Calculate priority score using a reciprocal function for valid bins\n    priority = np.where(bins_remain_cap >= item, 1 / (bins_remain_cap - item + 1), -np.inf)\n    \n    # Add a bonus to prioritize bins with more remaining capacity\n    priority = np.where(priority > -np.inf, priority + 1e-3 * bins_remain_cap / (item + 1e-6), priority)\n    \n    # Normalize the priority scores to be between 0 and 1 for valid bins\n    valid_bins = priority > -np.inf\n    if np.any(valid_bins):\n        min_priority = np.min(priority[valid_bins])\n        max_priority = np.max(priority[valid_bins])\n        priority = np.where(valid_bins, (priority - min_priority) / (max_priority - min_priority), 0)\n    \n    return priority",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.058635819704831,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 136.16184010614157,
    "mi": 95.37917693949348,
    "token_count": 111.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response5.txt_stdout.txt",
    "code_path": "problem_iter8_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a trade-off between tight fit and future capacity.\n    Prioritizes bins with enough capacity and smaller remaining capacity after addition.\n    \"\"\"\n    # Calculate priority scores using a non-linear function that balances tight fit and remaining capacity\n    priority_scores = np.where(bins_remain_cap >= item, np.log(bins_remain_cap - item + 2), -np.inf)\n    \n    # Normalize valid priority scores to ensure a better distribution\n    valid_bins = priority_scores != -np.inf\n    if np.any(valid_bins):\n        max_score = np.max(priority_scores[valid_bins])\n        min_score = np.min(priority_scores[valid_bins])\n        priority_scores[valid_bins] = (priority_scores[valid_bins] - min_score) / (max_score - min_score + 1e-6)\n        \n    return priority_scores",
    "response_id": 5,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 136.16184010614157,
    "mi": 95.37917693949348,
    "token_count": 111.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response6.txt_stdout.txt",
    "code_path": "problem_iter8_code6.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with normalization for a balanced bin selection.\n    Prioritizes bins with enough capacity and smaller remaining capacity after addition.\n    \"\"\"\n    # Calculate priority scores using a non-linear function\n    priority_scores = np.where(bins_remain_cap >= item, 1 / (bins_remain_cap - item + 1e-6), -1.0)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority_scores != -1.0\n    if np.any(valid_bins):\n        max_score = np.max(priority_scores[valid_bins])\n        min_score = np.min(priority_scores[valid_bins])\n        priority_scores[valid_bins] = (priority_scores[valid_bins] - min_score) / (max_score - min_score + 1e-6)\n        # Apply an additional non-linear term to balance tight fitting and future capacity\n        priority_scores[valid_bins] = priority_scores[valid_bins] * (1 - item / bins_remain_cap[valid_bins])\n        \n    return priority_scores",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.956122856003196,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 136.16184010614157,
    "mi": 95.37917693949348,
    "token_count": 111.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response7.txt_stdout.txt",
    "code_path": "problem_iter8_code7.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit and tight-fitting heuristics with a simple, non-linear priority score.\n    \"\"\"\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, 1 / (1 + np.abs(bins_remain_cap - item)), -np.inf)\n    \n    # Weigh the priority scores by the remaining capacity after addition to encourage tight-fitting\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Use a non-linear function to balance between tight fitting and future capacity\n        priority[valid_bins] *= (1 + np.tanh(bins_remain_cap[valid_bins] - item - np.mean(bins_remain_cap[valid_bins])))\n    \n    return priority",
    "response_id": 7,
    "tryHS": false,
    "obj": 6.920622257678509,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 136.16184010614157,
    "mi": 95.37917693949348,
    "token_count": 111.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response8.txt_stdout.txt",
    "code_path": "problem_iter8_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a penalty for large remaining capacity.\n    \"\"\"\n    # Check if item fits and calculate remaining capacity after addition\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Non-linear priority with a penalty term for large remaining capacity\n    priority = np.where(valid_bins == 1, np.exp(-remaining_cap_after_addition / bins_remain_cap) - 0.01 * remaining_cap_after_addition, 0)\n    \n    return priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 136.16184010614157,
    "mi": 95.37917693949348,
    "token_count": 111.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response9.txt_stdout.txt",
    "code_path": "problem_iter8_code9.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit and tight-fitting heuristics with a simple, non-linear priority score.\n    \"\"\"\n    # Identify bins that are too small for the item\n    priority = np.where(bins_remain_cap >= item, \n                        # Non-linear function to prioritize bins with remaining capacity closest to the item size\n                        1 / (1 + np.abs(bins_remain_cap - item)), \n                        -np.inf)\n    \n    # Weigh the priority scores by the remaining capacity after addition to encourage tight-fitting\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        priority[valid_bins] *= (1 - (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins])\n    \n    return priority",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 136.16184010614157,
    "mi": 95.37917693949348,
    "token_count": 111.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response0.txt_stdout.txt",
    "code_path": "problem_iter9_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on the remaining capacity of the bin and the size of the item.\n    It balances between tight fitting and leaving enough future capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Return the priority scores\n    return priority",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 28.07354922057604,
    "mi": 55.09065655282138,
    "token_count": 61.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response1.txt_stdout.txt",
    "code_path": "problem_iter9_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on a non-linear function that balances between \n    tight fitting and future capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to balance between tight fitting and future capacity\n                        np.exp(-(bins_remain_cap - item) / item), \n                        -np.inf)\n    \n    # Return the priority scores\n    return priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 28.07354922057604,
    "mi": 55.09065655282138,
    "token_count": 61.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response2.txt_stdout.txt",
    "code_path": "problem_iter9_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on a non-linear function that balances between tight fitting and future capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Return the priority scores\n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 28.07354922057604,
    "mi": 55.09065655282138,
    "token_count": 61.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response3.txt_stdout.txt",
    "code_path": "problem_iter9_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on a non-linear function that balances between tight fitting and future capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Return the priority scores\n    return priority",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 28.07354922057604,
    "mi": 55.09065655282138,
    "token_count": 61.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response4.txt_stdout.txt",
    "code_path": "problem_iter9_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on a non-linear function that balances between tight fitting and future capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Return the priority scores\n    return priority",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 28.07354922057604,
    "mi": 55.09065655282138,
    "token_count": 61.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response0.txt_stdout.txt",
    "code_path": "problem_iter10_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, \n                threshold_multiplier: float = 0.6146913810542726, \n                epsilon: float = 9.542102062488644e-05) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on a non-linear function of remaining capacity and item size.\n    Balances between tight fitting and leaving room for future items.\n    \"\"\"\n    # Identify bins that are too small for the item\n    priority = np.where(bins_remain_cap >= item, np.exp(-threshold_multiplier * (bins_remain_cap - item)), -np.inf)\n    \n    # Balance between tight fitting and future capacity\n    avg_remain_cap = np.mean(bins_remain_cap[bins_remain_cap >= item])\n    priority = np.where(bins_remain_cap >= item, priority * (1 + (avg_remain_cap - bins_remain_cap) / (avg_remain_cap + epsilon)), priority)\n    \n    return priority",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 146.94555522617034,
    "mi": 95.20773956932605,
    "token_count": 122.0,
    "exec_success": true
  }
]