```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a dynamic penalty term for effective bin selection.
    Balances tight fitting and future capacity using a ratio-based penalty and exponential decay.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization for valid bins with a penalty term for tight fits
    priority = np.where(valid_bins == 1, 1 / (1 + np.abs(bins_remain_cap - item)), -np.inf)
    
    # Dynamic penalty term based on the proportion of remaining capacity
    penalty_term = np.exp(-remain_cap_after_add / (item + 1e-6))  # Avoids division by zero
    
    # Combine prioritization and penalty term
    priority *= penalty_term
    
    # Normalize priority scores for better adaptability
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    return priority
```
