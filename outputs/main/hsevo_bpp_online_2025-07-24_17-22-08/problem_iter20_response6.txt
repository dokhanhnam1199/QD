```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined balancing term for tight fitting and future capacity.
    Uses exp function and considers remaining capacity after addition for balancing.
    """
    # Identify bins that are too small for the item and give them a very low priority
    valid_bins = (bins_remain_cap >= item).astype(float)
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Non-linear priority with a refined balance term for valid bins
    priority = np.where(valid_bins == 1, 
                         np.exp(-remaining_cap_after_addition / item) *  # Non-linear prioritization
                         (1 / (1 + remaining_cap_after_addition)) +     # Balancing term
                         1e-6 * remaining_cap_after_addition,           # Small bonus for remaining capacity
                         -np.inf)
    
    return priority
```
