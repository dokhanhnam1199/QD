```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined balancing term for tight fitting and future capacity.
    Utilizes np.exp for prioritization and a simple ratio for balancing.
    """
    # Non-linear prioritization for valid bins
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)
    
    # Refined balancing term: prioritize bins that are not too full
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        remaining_cap_after_addition = bins_remain_cap[valid_bins] - item
        # Balance between tight fitting and future capacity using a simple ratio and add a small bonus for remaining capacity
        priority[valid_bins] *= (1 - (remaining_cap_after_addition / bins_remain_cap[valid_bins])) + 1e-6 * remaining_cap_after_addition
        
    return priority
```
