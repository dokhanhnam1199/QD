```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.
    Prioritizes bins with enough capacity and a good balance between tightness and remaining capacity.
    """
    # Identify bins that are too small and assign them a very low priority
    remaining_cap_after_addition = bins_remain_cap - item
    priority = np.where(bins_remain_cap >= item, 
                        # Use a non-linear function to prioritize bins based on remaining capacity after addition
                        np.exp(-remaining_cap_after_addition / (bins_remain_cap + 1e-6)), 
                        -np.inf)
    
    # Apply a balancing term to prioritize bins that are not too full
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        # Apply the balancing term directly without normalization
        priority[valid_bins] *= (remaining_cap_after_addition[valid_bins] / bins_remain_cap[valid_bins])
        
    return priority
```
