import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                penalty_weight: float = 0.4531902739673638, 
                exp_scale_factor: float = 3.009175721505166) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined penalty term for tighter fits and future capacity.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization with a penalty for large remaining capacity
    priority = np.where(valid_bins == 1, 
                         np.exp(-remain_cap_after_add / (item * exp_scale_factor)) - penalty_weight * remain_cap_after_add,  
                         -np.inf)
    
    # Normalize priority scores for better adaptability
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    return priority
