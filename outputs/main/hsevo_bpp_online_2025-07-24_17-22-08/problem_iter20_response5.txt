```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined balancing term.
    Uses exp function and a penalty for large remaining capacity with a bonus for remaining capacity after addition.
    """
    # Non-linear prioritization for valid bins
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)
    
    # Refined balancing term
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        remaining_cap_after_addition = bins_remain_cap[valid_bins] - item
        # Combine penalty for large remaining capacity with a bonus for remaining capacity after addition
        priority[valid_bins] *= 1 / (1 + bins_remain_cap[valid_bins] - item)
        priority[valid_bins] += 1e-6 * remaining_cap_after_addition
        
    return priority
```
