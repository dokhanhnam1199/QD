```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                alpha: float = 0.7, beta: float = 0.3, 
                penalty_weight: float = 0.01, 
                perturbation_max: float = 1e-5) -> np.ndarray:
    """
    Advanced priority function that adaptively balances tight fit and future capacity with nuanced penalty terms.
    """
    # Identify valid bins
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Calculate tight fit measure and future capacity penalty
    tight_fit_measure = np.exp(-(bins_remain_cap - item) / item)
    future_capacity_penalty = penalty_weight * (bins_remain_cap - item) / bins_remain_cap
    
    # Combine tight fit and future capacity with adaptive weighting
    priority = np.where(valid_bins == 1, 
                         alpha * tight_fit_measure - beta * future_capacity_penalty, 
                         -np.inf)
    
    # Normalize priority scores while avoiding division by -inf
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    # Introduce a slight perturbation to break ties
    priority += np.random.uniform(0, perturbation_max, size=len(priority))
    
    return priority
```
