```python
def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                threshold_multiplier: float = 0.6146913810542726, 
                epsilon: float = 9.542102062488644e-05) -> np.ndarray:
    """
    Combines non-linear prioritization with a balance between tight fitting and future capacity.
    """
    # Identify bins that are too small for the item and calculate initial priority
    priority = np.where(bins_remain_cap >= item, np.exp(-threshold_multiplier * (bins_remain_cap - item)), -np.inf)
    
    # Calculate average remaining capacity for valid bins
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        avg_remain_cap = np.mean(bins_remain_cap[valid_bins])
        
        # Balance between tight fitting and future capacity
        priority[valid_bins] = priority[valid_bins] * (1 + (avg_remain_cap - bins_remain_cap[valid_bins]) / (avg_remain_cap + epsilon))
        
        # Normalize priority scores for valid bins to enhance differentiation
        max_score = np.max(priority[valid_bins])
        min_score = np.min(priority[valid_bins])
        if max_score != min_score:  # Avoid division by zero
            priority[valid_bins] = (priority[valid_bins] - min_score) / (max_score - min_score + 1e-6)
    
    return priority
```
