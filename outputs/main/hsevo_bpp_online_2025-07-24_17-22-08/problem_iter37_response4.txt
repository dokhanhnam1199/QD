import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                penalty_weight: float = 0.015318816607783135, 
                perturbation_max: float = 9.891351314306452e-06,
                tight_fit_weight: float = 0.7309847154296637,
                future_capacity_weight: float = 0.10657538302876263,
                valid_bin_threshold: float = 0.49920916971914864,
                tight_fit_measure_divisor_epsilon: float = 5.158057020420214e-06,
                future_capacity_penalty_shift: float = 0.4586416806672498) -> np.ndarray:
    """
    Combines non-linear prioritization with nuanced penalty terms, 
    balancing tight fit and future capacity effectively with slight perturbation.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization focusing on tight fit
    tight_fit_score = np.exp(-remain_cap_after_add / (item + tight_fit_measure_divisor_epsilon))
    tight_fit_measure = item / bins_remain_cap
    
    # Refined penalty term for future capacity and balancing
    future_capacity_penalty = (1 / (1 + np.exp((remain_cap_after_add - item*future_capacity_penalty_shift) / item)))
    
    # Combine scores with a refined penalty term for better adaptability and robustness
    priority = np.where(valid_bins == 1, 
                         tight_fit_weight * tight_fit_score * (1 + tight_fit_measure) + future_capacity_weight * future_capacity_penalty - penalty_weight * remain_cap_after_add, 
                         -np.inf)
    
    # Normalize priority scores
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    # Introduce a slight perturbation to avoid identical priorities for different bins
    priority += np.random.uniform(0, perturbation_max, size=len(priority))
    
    return priority
