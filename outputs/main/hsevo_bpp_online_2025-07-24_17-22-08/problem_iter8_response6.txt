```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with normalization for a balanced bin selection.
    Prioritizes bins with enough capacity and smaller remaining capacity after addition.
    """
    # Calculate priority scores using a non-linear function
    priority_scores = np.where(bins_remain_cap >= item, 1 / (bins_remain_cap - item + 1e-6), -1.0)
    
    # Normalize priority scores for valid bins
    valid_bins = priority_scores != -1.0
    if np.any(valid_bins):
        max_score = np.max(priority_scores[valid_bins])
        min_score = np.min(priority_scores[valid_bins])
        priority_scores[valid_bins] = (priority_scores[valid_bins] - min_score) / (max_score - min_score + 1e-6)
        # Apply an additional non-linear term to balance tight fitting and future capacity
        priority_scores[valid_bins] = priority_scores[valid_bins] * (1 - item / bins_remain_cap[valid_bins])
        
    return priority_scores
```
