```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                alpha: float = 0.7, beta: float = 0.3, 
                penalty_weight: float = 0.01, 
                perturbation_max: float = 1e-5) -> np.ndarray:
    """
    Combines non-linear prioritization with nuanced penalty terms and adaptive balancing.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Calculate tight fit measure and future capacity penalty
    tight_fit_measure = np.exp(-remain_cap_after_add / item)
    future_capacity_penalty = np.where(remain_cap_after_add > 0, 
                                       remain_cap_after_add / bins_remain_cap, 
                                       0)
    # Non-linear penalty term inspired by priority_v1
    penalty_term = -np.log1p(remain_cap_after_add / item)
    
    # Combine non-linear prioritization with nuanced penalty terms and adaptive balancing
    priority = np.where(valid_bins == 1, 
                         alpha * tight_fit_measure + beta * (1 - future_capacity_penalty) + penalty_weight * penalty_term, 
                         -np.inf)
    
    # Normalize priority scores for adaptability
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    # Introduce slight perturbation
    priority += np.random.uniform(0, perturbation_max, size=len(priority))
    
    return priority
```
