```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                tight_fit_weight: float = 0.7, 
                capacity_utilization_weight: float = 0.3, 
                valid_bin_threshold: float = 0.0, 
                epsilon: float = 1e-6) -> np.ndarray:
    """
    Combines tight fit and capacity utilization scores with a simple yet effective prioritization strategy.
    """
    # Identify valid bins
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Calculate tight fit score
    remain_cap_after_add = bins_remain_cap - item
    tight_fit_score = np.exp(-remain_cap_after_add / (item + epsilon))
    
    # Calculate capacity utilization score
    capacity_utilization_score = (bins_remain_cap - remain_cap_after_add) / bins_remain_cap
    
    # Combine scores
    priority = np.where(valid_bins == 1, 
                         tight_fit_weight * tight_fit_score + capacity_utilization_weight * capacity_utilization_score, 
                         -np.inf)
    
    # Introduce a slight perturbation to avoid identical priorities for different bins
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    priority += np.random.uniform(0, 1e-6, size=len(priority))
    
    return priority
```
