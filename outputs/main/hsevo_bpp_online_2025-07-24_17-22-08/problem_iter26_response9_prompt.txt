{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for each bin based on a balanced non-linear function.\n    Combines simplicity with a penalty term for better performance.\n    \"\"\"\n    # Calculate priority using a simple non-linear function with a penalty term\n    priority = np.where(bins_remain_cap >= item, \n                        np.exp(-(bins_remain_cap - item)),  # Simple non-linear prioritization\n                        -np.inf)\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        # Normalize the priority scores for better adaptability\n        priority = priority / max_priority\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a refined balancing term.\n    Uses np.exp for prioritization and a ratio for balancing, with a penalty for large remaining capacity.\n    \"\"\"\n    # Identify valid bins\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate remaining capacity after adding the item\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization with a balancing term and a penalty for large remaining capacity\n    priority = np.where(valid_bins == 1, \n                         np.exp(-remain_cap_after_add / item) * (remain_cap_after_add / bins_remain_cap) - 0.01 * remain_cap_after_add, \n                         -np.inf)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best (Heuristics 1st) and the worst (Heuristics 20th), we see that the top heuristic uses a combination of non-linear prioritization and a penalty term to encourage tighter fits, while the worst heuristic uses a similar approach but with redundant imports and less optimal balancing terms. \nComparing (1st) vs (2nd), we see both use non-linear prioritization but the first one applies a more refined penalty term. \n(3rd) vs (4th) are identical, indicating a potential redundancy in the list. \nComparing (second worst) vs (worst), we see they are identical, suggesting that the worst heuristics are repetitive. \nOverall, effective heuristics tend to balance non-linear prioritization with penalty terms for large remaining capacities and avoid unnecessary imports.\n- \nTo design better heuristics, let's redefine 'Current self-reflection' while avoiding 'Ineffective self-reflection'. Here's the analysis:\n\n* **Keywords**: Non-linear prioritization, balancing terms, simplicity, tight fitting, future capacity.\n* **Advice**: Focus on simple, effective non-linear prioritization that balances tight fitting and future capacity. Consider refining penalty terms and balancing strategies to optimize bin selection.\n* **Avoid**: Unnecessary complexity, redundant code, and ineffective normalization or penalty terms that don't significantly impact performance.\n* **Explanation**: By simplifying and refining non-linear prioritization, and balancing tight fitting with future capacity, we can create more effective heuristics that optimize the bin selection process.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}