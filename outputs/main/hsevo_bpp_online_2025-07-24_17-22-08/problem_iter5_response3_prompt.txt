{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item will have the highest priority.\n    A bin that is too small for the item will have a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Then, we normalize the priority scores so that the bin with the smallest remaining capacity \n    # that is still enough for the item gets the highest priority\n    priority = -priority\n    \n    # Return the priority scores\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority score for each bin. \n    Prioritizes bins that can fit the item and have the least remaining capacity after addition.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Prioritize bins based on remaining capacity after addition\n    priority = np.where(\n        remaining_capacity_after_addition >= 0, \n        bins_remain_cap,  # First-Fit decreasing heuristic for valid bins\n        -np.inf  # Invalid bins get -inf priority\n    )\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_cap = np.max(priority[valid_bins])\n        min_cap = np.min(priority[valid_bins])\n        priority[valid_bins] = (priority[valid_bins] - min_cap) / (max_cap - min_cap)\n    else:\n        priority = np.zeros_like(bins_remain_cap)\n        \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that both prioritize bins based on remaining capacity after adding the item, but the best uses an exponential function to prioritize bins with remaining capacity closer to the item size, while the worst uses a First-Fit decreasing heuristic. \nComparing (1st) vs (2nd), we see that the first uses an exponential function, while the second uses a linear function to prioritize bins. \n(3rd) vs (4th) shows that both use a similar approach, but the third uses a reciprocal function, while the fourth uses a simple subtraction. \nOverall, the better heuristics tend to use more sophisticated functions to prioritize bins, such as exponential or reciprocal functions.\n- \nTo design better heuristics, let's redefine 'Current self-reflection' by avoiding 'Ineffective self-reflection'. Here are the key takeaways:\n\n* **Keywords**: Non-linear functions, remaining capacity, trade-off, intuitive logic\n* **Advice**: Use complex prioritization and consider future implications\n* **Avoid**: Simple, tight-fitting logic and unnecessary normalization\n* **Explanation**: By using non-linear functions and considering the trade-off between fitting items tightly and leaving room for future items, we can create more effective heuristics that go beyond straightforward, intuitive logic.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}