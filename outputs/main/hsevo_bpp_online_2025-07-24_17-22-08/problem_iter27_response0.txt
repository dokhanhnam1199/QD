```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhances the priority function with a more refined balance between tight fitting and future capacity,
    incorporating a dynamic penalty term based on the item size relative to the bin capacity.
    """
    # Identify valid bins
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Calculate the remaining capacity after adding the item and its relative size
    remain_cap_after_add = bins_remain_cap - item
    relative_item_size = item / bins_remain_cap
    
    # Non-linear prioritization with a dynamic penalty term for balancing tight fit and future capacity
    priority = np.where(valid_bins == 1, 
                         np.exp(-remain_cap_after_add / (item + 1e-6)) * (1 - relative_item_size),  # Dynamic balancing
                         -np.inf)
    
    # Directly return priority scores without normalization to maintain the dynamic range
    return priority
```
