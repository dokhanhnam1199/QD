```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined penalty term for large remaining capacities.
    Balances tight fitting and future capacity using a simple yet effective formula.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization for valid bins, balancing tight fit and future capacity
    priority = np.where(valid_bins == 1, 
                         np.exp(-remain_cap_after_add / (item + 1e-6)),  # Encourage tight fits
                         -np.inf)
    
    # Refine priority with a balancing term for valid bins to consider future capacity
    valid_bin_indices = np.where(valid_bins == 1)[0]
    if len(valid_bin_indices) > 0:
        balancing_term = 1 / (1 + np.exp((bins_remain_cap[valid_bin_indices] - item) / item))
        priority[valid_bin_indices] *= balancing_term
        
    return priority
```
