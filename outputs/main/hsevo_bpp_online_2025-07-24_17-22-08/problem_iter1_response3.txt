```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    The priority is calculated based on the remaining capacity of each bin. 
    Bins with remaining capacity closer to the item size will have higher priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item will have negative remaining capacity
    # Assign a very low priority to such bins
    priority = np.where(remaining_after_addition >= 0, -remaining_after_addition, -np.inf)
    
    # Normalize the priority scores to be between 0 and 1
    # This is not necessary but can be helpful for some applications
    # max_priority = np.max(priority)
    # if max_priority != -np.inf:
    #     priority = priority / max_priority
    
    return priority
```
