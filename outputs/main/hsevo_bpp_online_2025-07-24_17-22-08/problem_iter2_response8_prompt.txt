{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    The priority is higher for bins that have enough capacity and are most full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the capacity remaining after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that do not have enough capacity for the item get a priority of -inf\n    # So they will not be chosen unless there are no other options\n    priority = np.where(remaining_after_addition >= 0, -remaining_after_addition, -np.inf)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin. \n    The bin with the least remaining capacity that can still fit the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin\n    # The bin with remaining capacity closest to the item size gets the highest priority\n    priority = np.where(bins_remain_cap >= item, bins_remain_cap.max() - bins_remain_cap, bins_remain_cap.max() + 1)\n    \n    # Normalize the priority scores to be between 0 and 1\n    priority = np.maximum(0, 1 - (priority - priority.min()) / (priority.max() - priority.min() + 1e-9))\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic prioritizes bins based on the remaining capacity after adding the item, while the worst heuristic implements a First-Fit decreasing heuristic with normalization. \nComparing (1st) vs (2nd), we see both prioritize bins based on remaining capacity, but (1st) directly uses the remaining capacity after addition, whereas (2nd) calculates the negative of the remaining capacity after addition.\n(3rd) vs (4th) shows similar logic with slight variations in calculation.\nComparing (second worst) vs (worst), both implement First-Fit decreasing heuristic.\nOverall: Top heuristics tend to prioritize bins based on how well the item fits, with a focus on minimizing remaining capacity.\n- \nTo come up with ideas to design better heuristics by redefining 'Current self-reflection', let's analyze and expand upon the given information.\n\n* **Keywords**: Simple logic, intuitive, problem's objective, minimizing waste, normalization.\n* **Advice**: Focus on creating heuristics with straightforward and understandable logic that directly addresses the problem's goal.\n* **Avoid**: Unnecessary complexity and normalization that doesn't significantly enhance performance.\n* **Explanation**: By keeping heuristics simple and targeted, we can improve their efficiency and effectiveness, leading to better solutions for complex problems.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}