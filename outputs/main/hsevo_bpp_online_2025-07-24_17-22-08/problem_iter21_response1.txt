```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is based on a non-linear combination of the remaining capacity of the bin and the size of the item.
    A bin with a remaining capacity that is just enough for the item will have a high priority, 
    while also considering the future capacity of the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # First, we identify bins that are too small for the item and give them a very low priority
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)
    
    # Then, we add a balancing term to the priority scores to consider the future capacity of the bin
    priority = np.where(bins_remain_cap >= item, priority * (bins_remain_cap / (bins_remain_cap - item + 1e-6)), priority)
    
    # Return the priority scores
    return priority
```
