```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a trade-off between tight fit and future capacity.
    Prioritizes bins with enough capacity and smaller remaining capacity after addition.
    """
    # Calculate priority scores using a non-linear function that balances tight fit and remaining capacity
    priority_scores = np.where(bins_remain_cap >= item, np.log(bins_remain_cap - item + 2), -np.inf)
    
    # Normalize valid priority scores to ensure a better distribution
    valid_bins = priority_scores != -np.inf
    if np.any(valid_bins):
        max_score = np.max(priority_scores[valid_bins])
        min_score = np.min(priority_scores[valid_bins])
        priority_scores[valid_bins] = (priority_scores[valid_bins] - min_score) / (max_score - min_score + 1e-6)
        
    return priority_scores
```
