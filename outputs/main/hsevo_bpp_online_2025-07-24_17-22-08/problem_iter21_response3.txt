```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is based on a non-linear combination of the remaining capacity of the bin and the size of the item.
    It balances between tight fitting and leaving sufficient future capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # First, we identify bins that are too small for the item and give them a very low priority
    too_small = bins_remain_cap < item
    
    # For bins that can fit the item, we calculate a priority score that balances between 
    # having just enough capacity (tight fitting) and having more capacity left for future items
    enough_capacity = ~too_small
    priority = np.zeros_like(bins_remain_cap)
    priority[enough_capacity] = -((bins_remain_cap[enough_capacity] - item) ** 2) + bins_remain_cap[enough_capacity] / (item + 1e-6)
    
    # Bins that are too small get a very low priority
    priority[too_small] = -np.inf
    
    # Return the priority scores
    return priority
```
