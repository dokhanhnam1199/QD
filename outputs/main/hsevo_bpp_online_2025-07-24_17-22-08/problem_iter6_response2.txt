```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is based on a non-linear function of the remaining capacity of the bin and the size of the item.
    It considers a trade-off between fitting the item tightly and leaving room for future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Identify bins that are too small for the item and give them a very low priority
    too_small = bins_remain_cap < item
    
    # Calculate a non-linear priority score based on the remaining capacity and the item size
    # The score is high when the remaining capacity is just enough for the item, and also when there's a good balance between tight fit and room for future items
    priority = np.where(~too_small, np.exp(-(bins_remain_cap - item) / item) * (bins_remain_cap - item), -np.inf)
    
    # Add a small random noise to the priority scores to avoid ties and encourage exploration
    priority += np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    
    # Return the priority scores
    return priority
```
