```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with normalization for better distribution, 
    balancing tight fitting and future capacity effectively.
    """
    # Calculate priority using a non-linear function
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)
    
    # Normalize valid priority scores
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        max_score = np.max(priority[valid_bins])
        min_score = np.min(priority[valid_bins])
        # Normalize to [0, 1] range for better distribution
        priority[valid_bins] = (priority[valid_bins] - min_score) / (max_score - min_score + 1e-6)
        
    return priority
```
