[
  {
    "stdout_filepath": "problem_iter26_response0.txt_stdout.txt",
    "code_path": "problem_iter26_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a refined balancing term and penalty for large remaining capacity.\n    Encourages tight fits while considering future capacity.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization with a balancing term and a penalty for large remaining capacity\n    priority = np.where(valid_bins == 1, \n                         # Use exp to prioritize bins that are just enough for the item\n                         np.exp(-remain_cap_after_add / item) * \n                         # Encourage tighter fits by penalizing bins with large remaining capacity\n                         (1 - remain_cap_after_add / bins_remain_cap), \n                         -np.inf)\n    \n    return priority",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 129.65784284662087,
    "mi": 92.97433782653759,
    "token_count": 114.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response1.txt_stdout.txt",
    "code_path": "problem_iter26_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a refined balancing term for optimal bin selection.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization with a penalty for large remaining capacity and a balancing term\n    priority = np.where(bins_remain_cap >= item, \n                         np.exp(-remain_cap_after_add / item) * (1 - remain_cap_after_add / bins_remain_cap), \n                         -np.inf)\n    \n    return priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 129.65784284662087,
    "mi": 92.97433782653759,
    "token_count": 114.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response2.txt_stdout.txt",
    "code_path": "problem_iter26_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a refined penalty term for large remaining capacities.\n    Uses np.exp for non-linear prioritization and a balancing term to encourage tighter fits.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization with a penalty term for large remaining capacities\n    priority = np.where(valid_bins, \n                         np.exp(-remain_cap_after_add / item) * (1 / (1 + np.exp((remain_cap_after_add - item/2) / item))), \n                         -np.inf)\n    \n    return priority",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 129.65784284662087,
    "mi": 92.97433782653759,
    "token_count": 114.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response3.txt_stdout.txt",
    "code_path": "problem_iter26_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a refined penalty term for large remaining capacities.\n    Uses np.exp(-(bins_remain_cap - item)) and a balancing term to encourage tighter fits and future capacity.\n    \"\"\"\n    # Non-linear prioritization for valid bins\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Refine penalty term to balance tight fitting and future capacity\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Combine the benefits of both v0 and v1 by using a term that considers both remaining capacity and item size\n        penalty_term = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]\n        balancing_term = 1 / (1 + np.exp((bins_remain_cap[valid_bins] - item) / item))\n        priority[valid_bins] *= penalty_term * balancing_term\n        \n    return priority",
    "response_id": 3,
    "tryHS": false,
    "obj": 5.195452732349436,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 129.65784284662087,
    "mi": 92.97433782653759,
    "token_count": 114.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response4.txt_stdout.txt",
    "code_path": "problem_iter26_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on remaining capacity and item size.\n    Combines non-linear prioritization with a refined penalty term for better bin selection.\n    \"\"\"\n    # Non-linear prioritization for bins with sufficient capacity\n    priority = np.where(bins_remain_cap >= item, 1 / (1 + np.abs(bins_remain_cap - item)), -np.inf)\n    \n    # Refined penalty term to balance tight fitting and future capacity\n    penalty_term = np.where(bins_remain_cap >= item, -((bins_remain_cap - item) / bins_remain_cap) + (item / bins_remain_cap), 0)\n    priority *= penalty_term\n    \n    return priority",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 129.65784284662087,
    "mi": 92.97433782653759,
    "token_count": 114.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response5.txt_stdout.txt",
    "code_path": "problem_iter26_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on non-linear prioritization and a refined penalty term.\n    \"\"\"\n    # Non-linear prioritization for bins with enough capacity\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    # Refined penalty term to balance tight fitting and future capacity\n    priority = np.where(bins_remain_cap >= item, priority * ((bins_remain_cap - item) / bins_remain_cap), priority)\n    return priority",
    "response_id": 5,
    "tryHS": false,
    "obj": 5.195452732349436,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 129.65784284662087,
    "mi": 92.97433782653759,
    "token_count": 114.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response6.txt_stdout.txt",
    "code_path": "problem_iter26_code6.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a refined balancing term for tight fitting and future capacity.\n    Uses np.exp for prioritization and a ratio for balancing.\n    \"\"\"\n    # Non-linear prioritization for valid bins\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Refined balancing term to encourage using bins that are not too full\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        remaining_cap_after_addition = bins_remain_cap[valid_bins] - item\n        # Balance between tight fitting and future capacity\n        priority[valid_bins] *= (remaining_cap_after_addition / bins_remain_cap[valid_bins]) ** 0.5 * (1 - (remaining_cap_after_addition / bins_remain_cap[valid_bins]))\n        \n    return priority",
    "response_id": 6,
    "tryHS": false,
    "obj": 5.195452732349436,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 129.65784284662087,
    "mi": 92.97433782653759,
    "token_count": 114.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response7.txt_stdout.txt",
    "code_path": "problem_iter26_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a refined penalty term for balance.\n    Encourages tight fits while leaving capacity for future items.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization with a refined penalty for large remaining capacity\n    priority = np.where(bins_remain_cap >= item, \n                         np.exp(-remain_cap_after_add / item) * (remain_cap_after_add / bins_remain_cap), \n                         -np.inf)\n    \n    return priority",
    "response_id": 7,
    "tryHS": false,
    "obj": 16.513761467889925,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 129.65784284662087,
    "mi": 92.97433782653759,
    "token_count": 114.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response8.txt_stdout.txt",
    "code_path": "problem_iter26_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a refined penalty term for tighter fits and future capacity.\n    \"\"\"\n    # Non-linear prioritization for bins that can fit the item\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    # Refined penalty term to balance tight fitting and future capacity\n    penalty_term = np.where(bins_remain_cap - item > 0, (bins_remain_cap - item) / bins_remain_cap, 0)\n    priority *= penalty_term\n    # Normalize priority scores for better adaptability\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    return priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 5.195452732349436,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 129.65784284662087,
    "mi": 92.97433782653759,
    "token_count": 114.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response9.txt_stdout.txt",
    "code_path": "problem_iter26_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a refined penalty term for tighter fits and future capacity.\n    \"\"\"\n    # Identify valid bins and calculate remaining capacity after adding the item\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization with a penalty for large remaining capacity\n    priority = np.where(valid_bins == 1, \n                         np.exp(-remain_cap_after_add / item) - 0.01 * remain_cap_after_add,  # Balance tight fit and future capacity\n                         -np.inf)\n    \n    # Normalize priority scores for better adaptability\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = priority / max_priority\n    \n    return priority",
    "response_id": 9,
    "tryHS": false,
    "obj": 3.8990825688073536,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 129.65784284662087,
    "mi": 92.97433782653759,
    "token_count": 114.0,
    "exec_success": true
  }
]