import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                penalty_weight: float = 0.015962034932029284, 
                perturbation_max: float = 8.082068759055226e-06) -> np.ndarray:
    """
    Enhanced priority function that balances tight fit, future capacity, and bin utilization.
    """
    # Identify valid bins and calculate remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Calculate the ratio of item size to bin remaining capacity for a tight fit measure
    tight_fit_measure = item / bins_remain_cap
    
    # Non-linear prioritization with a refined penalty term for balancing tight fit and future capacity
    priority = np.where(valid_bins == 1, 
                         np.exp(-remain_cap_after_add / item) * (1 + tight_fit_measure) - penalty_weight * remain_cap_after_add,  
                         -np.inf)
    
    # Normalize priority scores for better adaptability and robustness
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    # Introduce a slight perturbation to avoid identical priorities for different bins
    priority += np.random.uniform(0, perturbation_max, size=len(priority))
    
    return priority
