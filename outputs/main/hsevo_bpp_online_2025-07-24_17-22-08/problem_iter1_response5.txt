```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on the remaining capacity of each bin.
    A bin with remaining capacity closest to the item size gets the highest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the absolute difference between the item size and the remaining capacity of each bin
    diff = np.abs(bins_remain_cap - item)
    
    # Calculate the priority score as the negative of the difference (lower difference means higher priority)
    # Add a small value to avoid division by zero when bins_remain_cap equals item
    priority = -diff + 1e-6
    
    # Set the priority score to negative infinity for bins that cannot accommodate the item
    priority[bins_remain_cap < item] = -np.inf
    
    return priority
```
