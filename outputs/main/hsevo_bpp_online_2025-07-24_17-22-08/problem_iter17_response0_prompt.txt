{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.\n    Uses exp function to balance between tightness and remaining capacity.\n    \"\"\"\n    # Identify bins that are too small and assign them a very low priority\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to prioritize bins based on remaining capacity and item size\n                        np.exp(-(bins_remain_cap - item) / item), \n                        -np.inf)\n    \n    # Apply an additional balancing term to prioritize bins that are not too full\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Use a non-linear function to further balance between tight fitting and future capacity\n        priority[valid_bins] *= (1 - item / bins_remain_cap[valid_bins])\n        \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.\n    Prioritizes bins with enough capacity and a good balance between tightness and remaining capacity.\n    \"\"\"\n    # Identify bins that are too small and assign them a very low priority\n    remaining_cap_after_addition = bins_remain_cap - item\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to prioritize bins based on remaining capacity after addition\n                        np.exp(-remaining_cap_after_addition / (bins_remain_cap + 1e-6)), \n                        -np.inf)\n    \n    # Apply a balancing term to prioritize bins that are not too full\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Apply the balancing term directly without normalization\n        priority[valid_bins] *= (remaining_cap_after_addition[valid_bins] / bins_remain_cap[valid_bins])\n        \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic uses a non-linear function that balances tight fitting and future capacity effectively. The worst heuristic, on the other hand, applies multiple balancing terms and uses a simple, intuitive logic. \nComparing (1st) vs (2nd), we see that both use non-linear prioritization but the first one includes an additional penalty for large remaining capacity. \n(3rd) vs (4th) shows that the third heuristic balances between tight fitting and future capacity by considering remaining capacity in a non-linear way, whereas the fourth does not. \nComparing (second worst) vs (worst), we see that both apply multiple balancing terms but with different approaches. \nOverall, effective non-linear prioritization and balancing terms that consider both tight fitting and future capacity are key characteristics of better heuristics.\n- \nTo refine 'Current self-reflection' and design better heuristics, let's analyze the given texts.\n\n* Keywords: Non-linear prioritization, balance, tight fitting, future capacity, normalization, penalty terms.\n* Advice: Focus on creating a balance between fitting items tightly and leaving room for future items using non-linear functions.\n* Avoid: Unnecessary complexity, penalty terms, and normalization unless significantly impactful.\n* Explanation: The ineffective self-reflection points suggest that while non-linear prioritization is key, simplicity and direct targeting of the problem's objective are crucial. Thus, a balanced approach that avoids unnecessary complexity is ideal.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}