```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a balance between tight fitting and future capacity.
    Uses exp function and a penalty for large remaining capacity.
    """
    # Identify bins that are too small for the item and give them a very low priority
    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)
    
    # Balance between tight fitting and future capacity by considering remaining capacity
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        # Apply a bonus to prioritize bins with more remaining capacity among valid bins
        # but use a non-linear function to avoid overly favoring large remaining capacity
        priority[valid_bins] *= 1 / (1 + bins_remain_cap[valid_bins] - item)
        
    return priority
```
