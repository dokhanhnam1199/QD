```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                alpha: float = 0.7, beta: float = 0.3, 
                gamma: float = 0.01, perturbation_max: float = 1e-5) -> np.ndarray:
    """
    Mutated priority function that refines the balance between tight fit and future capacity,
    introduces a more nuanced penalty term, and simplifies the computation.
    """
    # Identify valid bins
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Calculate the tight fit measure and future capacity penalty
    tight_fit_measure = np.exp(-(bins_remain_cap - item) / item)
    future_capacity_penalty = gamma * bins_remain_cap
    
    # Compute priority scores with a refined balance between tight fit and future capacity
    priority = np.where(valid_bins == 1, 
                         alpha * tight_fit_measure - beta * future_capacity_penalty, 
                         -np.inf)
    
    # Simplify normalization by using a sigmoid-like function to scale priorities
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = 1 / (1 + np.exp(-(priority - max_priority)))
    
    # Introduce a slight perturbation to avoid identical priorities
    priority += np.random.uniform(0, perturbation_max, size=len(priority))
    
    return priority
```
