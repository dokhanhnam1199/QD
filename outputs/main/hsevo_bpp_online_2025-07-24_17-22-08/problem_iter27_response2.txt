```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Simplifies and refines the non-linear prioritization with a focus on balancing tight fits and future capacity.
    """
    # Identify valid bins
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Calculate the remaining capacity after adding the item
    remain_cap_after_add = bins_remain_cap - item
    
    # Simplified non-linear prioritization focusing on tight fit and future capacity
    priority = np.where(valid_bins == 1, 
                         np.exp(-remain_cap_after_add / (item + 1e-6)) + 0.1 * (remain_cap_after_add / (bins_remain_cap + 1e-6)),  
                         -np.inf)
    
    # Directly return priority scores without normalization to maintain distinction between tight and loose fits
    return priority
```
