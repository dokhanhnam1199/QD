```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a refined balancing term.
    Uses np.exp for prioritization and a ratio for balancing, with a penalty for large remaining capacity.
    """
    # Identify valid bins
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Calculate remaining capacity after adding the item
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization with a balancing term and a penalty for large remaining capacity
    priority = np.where(valid_bins == 1, 
                         np.exp(-remain_cap_after_add / item) * (remain_cap_after_add / bins_remain_cap) - 0.01 * remain_cap_after_add, 
                         -np.inf)
    
    return priority
```
