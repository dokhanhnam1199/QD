```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on the remaining capacity of each bin.
    The bin with the least remaining capacity that can still fit the item gets the highest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Create a mask to identify bins that have enough capacity for the item
    valid_bins = bins_remain_cap >= item
    
    # Initialize priority scores with negative infinity for bins that can't fit the item
    priority = np.where(valid_bins, bins_remain_cap, -np.inf)
    
    # Calculate the priority score as the negative of the remaining capacity
    # This way, the bin with the least remaining capacity gets the highest priority
    priority = np.where(valid_bins, -priority, priority)
    
    return priority
```
