```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a dynamic penalty term, balancing tight fit and future capacity.
    """
    # Calculate valid bins and remaining capacity after adding the item
    valid_bins = (bins_remain_cap >= item).astype(float)
    remain_cap_after_add = bins_remain_cap - item
    
    # Non-linear prioritization focusing on tight fit
    tight_fit_score = np.exp(-remain_cap_after_add / (item + 1e-6))
    
    # Dynamic penalty term for future capacity
    future_capacity_score = remain_cap_after_add / (bins_remain_cap + 1e-6)
    
    # Combine scores with a weighted average for better adaptability
    priority = np.where(valid_bins == 1, 
                         0.7 * tight_fit_score + 0.3 * future_capacity_score, 
                         -np.inf)
    
    # Normalize priority scores for enhanced adaptability
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    return priority
```
