import numpy as np
import random
import math
import scipy
import torch

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                threshold_multiplier: float = 0.6146913810542726, 
                epsilon: float = 9.542102062488644e-05) -> np.ndarray:
    """
    Returns priority scores for each bin based on a non-linear function of remaining capacity and item size.
    Balances between tight fitting and leaving room for future items.
    """
    # Identify bins that are too small for the item
    priority = np.where(bins_remain_cap >= item, np.exp(-threshold_multiplier * (bins_remain_cap - item)), -np.inf)
    
    # Balance between tight fitting and future capacity
    avg_remain_cap = np.mean(bins_remain_cap[bins_remain_cap >= item])
    priority = np.where(bins_remain_cap >= item, priority * (1 + (avg_remain_cap - bins_remain_cap) / (avg_remain_cap + epsilon)), priority)
    
    return priority
