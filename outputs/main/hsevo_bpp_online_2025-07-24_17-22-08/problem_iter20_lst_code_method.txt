{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a penalty for large remaining capacity.\n    Balances tight fitting and future capacity using a non-linear function.\n    \"\"\"\n    # Non-linear prioritization for valid bins\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    # Normalize priority scores so that the bin with the smallest remaining capacity gets the highest priority\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        priority[valid_bins] = - (bins_remain_cap[valid_bins] - item)\n        \n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a penalty for large remaining capacity, \n    balancing tight fitting and future capacity effectively.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization with a penalty for large remaining capacity\n    priority = np.where(bins_remain_cap >= item, \n                         np.exp(-remain_cap_after_add / item) - 0.01 * bins_remain_cap, \n                         -np.inf)\n    \n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on a non-linear function that balances between tight fitting and leaving room for future items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balance between tight fitting and future capacity.\n    Uses exp function and a penalty for large remaining capacity.\n    \"\"\"\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    \n    # Balance between tight fitting and future capacity by considering remaining capacity\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Apply a bonus to prioritize bins with more remaining capacity among valid bins\n        # but use a non-linear function to avoid overly favoring large remaining capacity\n        priority[valid_bins] *= 1 / (1 + bins_remain_cap[valid_bins] - item)\n        \n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balance between tight fitting and future capacity.\n    Uses exp function and considers remaining capacity after addition for balancing.\n    \"\"\"\n    # Identify bins that are too small for the item and give them a very low priority\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Non-linear priority with a balance term for valid bins\n    priority = np.where(valid_bins == 1, np.exp(-remaining_cap_after_addition / item) * (1 / (1 + remaining_cap_after_addition)), -np.inf)\n    \n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a penalty for large remaining capacity, \n    balancing tight fitting and future capacity effectively.\n    \"\"\"\n    # Calculate remaining capacity after adding the item\n    remain_cap_after_add = bins_remain_cap - item\n    \n    # Non-linear prioritization with a penalty for large remaining capacity\n    priority = np.where(bins_remain_cap >= item, \n                         np.exp(-remain_cap_after_add / item) - 0.01 * bins_remain_cap, \n                         -np.inf)\n    \n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on a non-linear function of the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item will have a relatively high priority.\n    A bin that is too small for the item will have a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on a non-linear function of the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item will have a relatively high priority.\n    A bin that is too small for the item will have a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # First, we identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.\n    Uses np.exp(-(bins_remain_cap - item) / item) and a bonus for remaining capacity after addition.\n    \"\"\"\n    # Calculate priority score using a non-linear function for valid bins\n    remaining_cap_after_addition = bins_remain_cap - item\n    priority = np.where(bins_remain_cap >= item, np.exp(-remaining_cap_after_addition / item), -np.inf)\n    \n    # Apply a bonus to prioritize bins based on remaining capacity after addition\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Add a small bonus based on the remaining capacity after addition to balance tightness and future capacity\n        priority[valid_bins] += 1e-6 * remaining_cap_after_addition[valid_bins]\n        \n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.\n    Uses np.exp(-(bins_remain_cap - item) / item) and a bonus for remaining capacity after addition.\n    \"\"\"\n    # Calculate priority score using a non-linear function for valid bins\n    remaining_cap_after_addition = bins_remain_cap - item\n    priority = np.where(bins_remain_cap >= item, np.exp(-remaining_cap_after_addition / item), -np.inf)\n    \n    # Apply a bonus to prioritize bins based on remaining capacity after addition\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Add a small bonus based on the remaining capacity after addition to balance tightness and future capacity\n        priority[valid_bins] += 1e-6 * remaining_cap_after_addition[valid_bins]\n        \n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.\n    Uses np.exp(-(bins_remain_cap - item) / item) and a bonus for remaining capacity after addition.\n    \"\"\"\n    # Calculate priority score using a non-linear function for valid bins\n    remaining_cap_after_addition = bins_remain_cap - item\n    priority = np.where(bins_remain_cap >= item, np.exp(-remaining_cap_after_addition / item), -np.inf)\n    \n    # Apply a bonus to prioritize bins based on remaining capacity after addition\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Add a small bonus based on the remaining capacity after addition to balance tightness and future capacity\n        priority[valid_bins] += 1e-6 * remaining_cap_after_addition[valid_bins]\n        \n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a penalty for large remaining capacity.\n    Balances tight fitting and future capacity effectively.\n    \"\"\"\n    # Identify bins that are too small for the item and give them a very low priority\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    \n    # Non-linear priority with a penalty for large remaining capacity\n    priority = np.where(valid_bins == 1, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Adjust priority to balance between tight fitting and future capacity\n    priority = np.where(valid_bins == 1, priority * (bins_remain_cap - item) / bins_remain_cap, priority)\n    \n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.\n    Balances between tightness and remaining capacity using exp function and a simple ratio.\n    \"\"\"\n    # Identify bins that are too small and assign them a very low priority\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to prioritize bins based on remaining capacity and item size\n                        np.exp(-(bins_remain_cap - item) / item), \n                        -np.inf)\n    \n    # Apply a balancing term to prioritize bins that are not too full\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        remaining_cap_after_addition = bins_remain_cap[valid_bins] - item\n        # Use a simple ratio to balance between tight fitting and future capacity\n        priority[valid_bins] *= (remaining_cap_after_addition / bins_remain_cap[valid_bins])\n        \n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balance term for tight fitting and future capacity.\n    Uses np.exp(-(bins_remain_cap - item) / item) and a balancing term for valid bins.\n    \"\"\"\n    # Calculate priority score using a non-linear function for valid bins\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    \n    # Apply a balancing term to valid bins to prioritize bins that are not too full\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        remaining_cap_after_addition = bins_remain_cap[valid_bins] - item\n        # Balance between tight fitting and future capacity\n        priority[valid_bins] *= (remaining_cap_after_addition / bins_remain_cap[valid_bins])\n        \n    return priority\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.\n    Balances between tightness and remaining capacity using exp function and a simple ratio.\n    \"\"\"\n    # Identify bins that are too small and assign them a very low priority\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to prioritize bins based on remaining capacity and item size\n                        np.exp(-(bins_remain_cap - item) / item), \n                        -np.inf)\n    \n    # Apply a balancing term to prioritize bins that are not too full\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        remaining_cap_after_addition = bins_remain_cap[valid_bins] - item\n        # Use a simple ratio to balance between tight fitting and future capacity\n        priority[valid_bins] *= (remaining_cap_after_addition / bins_remain_cap[valid_bins])\n        \n    return priority\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balance term for tight fitting and future capacity.\n    Uses np.exp(-(bins_remain_cap - item) / item) and a balancing term for valid bins.\n    \"\"\"\n    # Calculate priority score using a non-linear function for valid bins\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    \n    # Apply a balancing term to valid bins to prioritize bins that are not too full\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        remaining_cap_after_addition = bins_remain_cap[valid_bins] - item\n        # Balance between tight fitting and future capacity\n        priority[valid_bins] *= (remaining_cap_after_addition / bins_remain_cap[valid_bins])\n        \n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines non-linear prioritization with a balance between tight fitting and future capacity.\n    Uses a non-linear function and prioritizes bins with remaining capacity just enough for the item.\n    \"\"\"\n    # Calculate priority score using a non-linear function for valid bins\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Apply a small bonus to valid bins to balance tight fitting and future capacity\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        priority[valid_bins] += 1e-6 * bins_remain_cap[valid_bins]  # Bonus for more remaining capacity\n        \n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on a non-linear function of the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item will have a relatively high priority.\n    A bin that is too small for the item will have a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to balance between tight fitting and leaving room for future items\n                        -((bins_remain_cap - item) / (bins_remain_cap + 1e-6))**2 + np.log(bins_remain_cap - item + 1), \n                        -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on a non-linear function of the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item will have a relatively high priority.\n    A bin that is too small for the item will have a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to balance between tight fitting and leaving room for future items\n                        -((bins_remain_cap - item) / (bins_remain_cap + 1e-6))**2 + np.log(bins_remain_cap - item + 1), \n                        -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is based on a non-linear function of the remaining capacity of the bin and the size of the item.\n    A bin with a remaining capacity that is just enough for the item will have a relatively high priority.\n    A bin that is too small for the item will have a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Identify bins that are too small for the item and give them a very low priority\n    priority = np.where(bins_remain_cap >= item, \n                        # Use a non-linear function to balance between tight fitting and leaving room for future items\n                        -((bins_remain_cap - item) / (bins_remain_cap + 1e-6))**2 + np.log(bins_remain_cap - item + 1), \n                        -np.inf)\n    \n    # Return the priority scores\n    return priority\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}