```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a penalty for large remaining capacity.
    """
    # Check if item fits and calculate remaining capacity after addition
    valid_bins = (bins_remain_cap >= item).astype(float)
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Non-linear priority with a penalty term for large remaining capacity
    priority = np.where(valid_bins == 1, np.exp(-remaining_cap_after_addition / bins_remain_cap) - 0.01 * remaining_cap_after_addition, 0)
    
    return priority
```
