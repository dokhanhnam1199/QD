```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a balancing term for tight fitting and future capacity.
    Uses a simple, intuitive logic to prioritize bins based on remaining capacity and item size.
    """
    # Check if item fits and calculate remaining capacity after addition
    valid_bins = (bins_remain_cap >= item).astype(float)
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Non-linear priority with a balancing term for tight fitting and future capacity
    priority = np.where(valid_bins == 1, 
                        # Use a non-linear function to prioritize bins based on remaining capacity and item size
                        np.exp(-remaining_cap_after_addition / (bins_remain_cap + 1e-6)), 
                        0)
    
    # Apply an additional balancing term to prioritize bins that are not too full
    valid_bins = priority != 0
    if np.any(valid_bins):
        # Directly apply the balancing term without normalization
        priority[valid_bins] *= (1 - item / bins_remain_cap[valid_bins])
        
    return priority
```
