{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines non-linear prioritization with a refined balancing term for tight fitting and future capacity.\n    Utilizes np.exp for prioritization and a ratio for balancing, avoiding unnecessary complexity.\n    \"\"\"\n    # Non-linear prioritization for valid bins\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / item), -np.inf)\n    \n    # Refined balancing term: prioritize bins that are not too full\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        remaining_cap_after_addition = bins_remain_cap[valid_bins] - item\n        # Balance between tight fitting and future capacity using a simple ratio\n        priority[valid_bins] *= (1 - (remaining_cap_after_addition / bins_remain_cap[valid_bins]))\n        # Normalize to emphasize the importance of tight fitting\n        priority[valid_bins] = - (bins_remain_cap[valid_bins] - item)\n        \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines non-linear prioritization with a refined balance between tight fitting and future capacity.\n    Uses np.exp for non-linear prioritization and a bonus term for remaining capacity.\n    \"\"\"\n    # Non-linear prioritization for valid bins\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item) / (bins_remain_cap + 1e-6)), -np.inf)\n    \n    # Refined balancing term considering remaining capacity and a logarithmic adjustment\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        priority[valid_bins] += 1e-6 * bins_remain_cap[valid_bins] + np.log(bins_remain_cap[valid_bins] - item + 1)\n        \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic uses a simple yet effective non-linear prioritization based on the remaining capacity, while the worst heuristic complicates the prioritization with additional logarithmic adjustments. \nComparing (1st) vs (2nd), we see that both use non-linear prioritization, but (2nd) introduces a refined penalty term, suggesting that a balance between simplicity and penalty terms is crucial.\n(3rd) vs (4th) shows that applying additional penalties or adjustments can degrade performance if not done carefully, as (3rd) and (4th) are very similar but (4th) lacks an additional penalty.\nComparing (second worst) vs (worst), we see that (19th) and (20th) are identical, indicating that the worst heuristic might not be the worst if slightly modified.\nOverall, effective heuristics tend to strike a balance between non-linear prioritization and penalty terms or balancing factors, without overly complicating the calculations.\n- \nTo provide a redefined 'Current self-reflection' that avoids the pitfalls of 'Ineffective self-reflection', let's analyze the given information.\n\n### Redefined Current self-reflection\n- **Keywords**: Simple, non-linear prioritization, balance, penalty terms, normalization.\n- **Advice**: Focus on creating effective non-linear prioritization functions that consider both tight fitting and future capacity. Balance these functions with thoughtful penalty or balancing terms. \n- **Avoid**: Unnecessary complexity, ineffective normalization, and penalty terms that don't significantly impact performance. Avoid overly simplistic or rigid logic that doesn't adapt to the problem's nuances.\n- **Explanation**: By focusing on simple yet effective non-linear prioritization and balancing it with appropriate terms, we can design better heuristics. This approach avoids the pitfalls of unnecessary complexity and inefficiency by emphasizing adaptability and performance impact.\n\nLet's break it down into 4 bullet points as requested:\n* **Keywords**: Simple, non-linear, balance, normalization\n* **Advice**: Create non-linear prioritization functions that balance tight fitting and future capacity, and apply thoughtful balancing terms.\n* **Avoid**: Unnecessary complexity, ineffective normalization, and rigid logic.\n* **Explanation**: Emphasize adaptability and performance impact to design effective heuristics.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}