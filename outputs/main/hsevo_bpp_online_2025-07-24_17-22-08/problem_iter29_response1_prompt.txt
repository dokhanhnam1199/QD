{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for each bin based on remaining capacity and item size.\n    Combines non-linear prioritization with a refined penalty term for better bin selection.\n    \"\"\"\n    # Non-linear prioritization for bins with sufficient capacity\n    priority = np.where(bins_remain_cap >= item, 1 / (1 + np.abs(bins_remain_cap - item)), -np.inf)\n    \n    # Refined penalty term to balance tight fitting and future capacity\n    penalty_term = np.where(bins_remain_cap >= item, -((bins_remain_cap - item) / bins_remain_cap) + (item / bins_remain_cap), 0)\n    priority *= penalty_term\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines non-linear prioritization with a refined penalty term for large remaining capacities.\n    Uses np.exp(-(bins_remain_cap - item)) and a balancing term to encourage tighter fits and future capacity.\n    \"\"\"\n    # Non-linear prioritization for valid bins\n    priority = np.where(bins_remain_cap >= item, np.exp(-(bins_remain_cap - item)), -np.inf)\n    \n    # Refine penalty term to balance tight fitting and future capacity\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        # Combine the benefits of both v0 and v1 by using a term that considers both remaining capacity and item size\n        penalty_term = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]\n        balancing_term = 1 / (1 + np.exp((bins_remain_cap[valid_bins] - item) / item))\n        priority[valid_bins] *= penalty_term * balancing_term\n        \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristics (1st and 2nd) with the worst (19th and 20th), we see they share a similar structure but differ in parameter tuning and normalization. The top heuristics use a fixed penalty weight and scale factor, whereas the worst ones use tuned parameters. Comparing (1st) vs (2nd), we see identical implementations, suggesting a potential tie for the top spot. (3rd) vs (4th) shows a difference in penalty term formulation. Overall, top heuristics balance tight fits and future capacity using non-linear prioritization and refined penalty terms.\n- \nTo design better heuristics, let's analyze the given information.\n\n* **Keywords**: non-linear prioritization, balancing terms, tight fitting, future capacity, simplicity.\n* **Advice**: Focus on creating simple yet effective non-linear prioritization functions that balance tight fitting and future capacity, and consider thoughtful balancing terms.\n* **Avoid**: Unnecessary complexity, redundant code, unnecessary normalization, and ineffective penalty terms.\n* **Explanation**: By avoiding unnecessary complexity and focusing on simple, effective non-linear prioritization, we can create better heuristics that balance competing objectives like tight fitting and future capacity.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}