```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhances the priority function by introducing a more nuanced penalty term 
    that considers both the tightness of the fit and the remaining capacity in a non-linear fashion.
    """
    # Identify valid bins
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Calculate remaining capacity after adding the item and its proportion to the item size
    remain_cap_after_add = bins_remain_cap - item
    proportion_remain = remain_cap_after_add / item
    
    # Introduce a non-linear penalty term that decreases as the remaining capacity approaches zero
    # and increases as the remaining capacity becomes larger, but with diminishing returns
    penalty_term = -np.log1p(proportion_remain)  # Using log1p to avoid division by zero and to introduce non-linearity
    
    # Assign -inf priority to invalid bins
    priority = np.where(valid_bins == 1, penalty_term, -np.inf)
    
    # Normalize priority scores to ensure they are within a comparable range
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    return priority
```
