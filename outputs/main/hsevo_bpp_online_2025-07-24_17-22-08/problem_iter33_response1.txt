```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhances the priority function by introducing a more nuanced non-linear prioritization 
    and a dynamic penalty term that adapts based on the item size and bin capacity.
    """
    # Identify valid bins
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Calculate remaining capacity after adding the item and its proportion to the item size
    remain_cap_after_add = bins_remain_cap - item
    proportion_remain = remain_cap_after_add / item
    
    # Non-linear prioritization with a dynamic penalty term that considers the relative remaining capacity
    priority = np.where(valid_bins == 1, 
                         np.exp(-proportion_remain) - 0.05 * (proportion_remain ** 2),  # More nuanced penalty for larger remaining capacity relative to item size
                         -np.inf)
    
    # Apply a bonus for bins with very tight fits to encourage efficient packing
    tight_fit_bonus = np.where((remain_cap_after_add > 0) & (remain_cap_after_add < 0.1 * item), 0.1, 0)
    priority += tight_fit_bonus
    
    # Normalize priority scores for adaptability, handling the case where all priorities are -inf
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    else:
        priority = valid_bins - 1  # When all bins are invalid, return -1 for invalid bins
    
    return priority
```
