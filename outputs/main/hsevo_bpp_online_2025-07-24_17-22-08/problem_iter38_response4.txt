```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines non-linear prioritization with a dynamic penalty term, 
    balancing tight fit and future capacity effectively with slight perturbation.
    """
    # Identify valid bins
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Non-linear prioritization focusing on tight fit
    tight_fit_score = np.exp(-(bins_remain_cap - item) / (item + 1e-6))
    
    # Dynamic penalty term for future capacity
    future_capacity_penalty = np.where(bins_remain_cap - item > 0, 
                                       (bins_remain_cap - item) / bins_remain_cap, 
                                       0)
    
    # Combine scores for better adaptability with refined penalty term
    priority = np.where(valid_bins == 1, 
                         0.7 * tight_fit_score + 0.3 * (1 - future_capacity_penalty) - 0.01 * (bins_remain_cap - item), 
                         -np.inf)
    
    # Enhance differentiation among valid bins by normalization
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = priority / max_priority
    
    # Introduce slight perturbation for better exploration
    priority += np.random.uniform(0, 1e-5, size=len(priority))
    
    return priority
```
