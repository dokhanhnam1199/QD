```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on 
    the remaining capacity and a penalty for exceeding the capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Assign a very low priority (negative infinity) if the item doesn't fit
    priority = np.where(remaining_after_addition >= 0, remaining_after_addition, -np.inf)
    
    # Normalize the priority to be between 0 and 1 for valid bins
    max_remaining = np.max(remaining_after_addition[remaining_after_addition != -np.inf])
    min_remaining = np.min(remaining_after_addition[remaining_after_addition != -np.inf])
    
    if max_remaining == min_remaining:  # Avoid division by zero
        normalized_priority = np.where(remaining_after_addition != -np.inf, 1, -np.inf)
    else:
        normalized_priority = np.where(remaining_after_addition != -np.inf, 
                                       (max_remaining - remaining_after_addition) / (max_remaining - min_remaining), 
                                       -np.inf)
    
    # Invert the normalized priority so that the bin with the most remaining capacity has the highest priority
    priority = 1 - normalized_priority
    
    return priority
```
