```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Prioritize bins that have just enough capacity for the item
    # Higher priority for bins where the item fits and leaves less remaining capacity
    priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)
    # Convert to a maximization problem by taking the negative
    priority = -priority
    # Normalize to avoid potential overflow when taking exp
    priority = priority - np.max(priority)
    # Apply softmax to convert to a probability distribution
    priority = np.exp(priority) / np.sum(np.exp(priority))
    return priority
```
