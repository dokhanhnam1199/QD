{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines feasibility and waste minimization with a fragmentation penalty.\"\"\"\n    small_value = 0.000664\n    fragmentation_penalty = 0.1\n    priorities = np.where(bins_remain_cap >= item, 1.0 / (bins_remain_cap - item + small_value) - fragmentation_penalty * (1 - (bins_remain_cap - item) / bins_remain_cap), 0.0)\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's redefine \"Current Self-Reflection\" for superior heuristic design \u2013 aiming for that $999K! Here's a distilled guide, stepping away from the pitfalls identified:\n\n* **Keywords:** Feasibility-first, Stable Prioritization, Tunable Penalties, Simplicity.\n* **Advice:** Focus relentlessly on core \"best-fit feasible\" logic. Employ multiplicative fragmentation penalties; experiment with coefficients. Prioritize inverse waste *after* feasibility is guaranteed, and validate all constants rigorously.\n* **Avoid:** Explicit waste calculation beyond initial feasibility checks. Premature optimization. Complex normalization. Redundant code/functions.\n* **Explanation:** Complexity often obscures the essential: quickly finding *any* valid placement before optimizing. Stability (avoiding errors) and tunable penalties allow focused refinement without breaking fundamental function.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}