```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit inverse waste with a multiplicative fragmentation penalty."""
    small_value = 1e-6
    fragmentation_penalty = 0.05
    priorities = np.zeros_like(bins_remain_cap)
    suitable_bins = bins_remain_cap >= item
    if not np.any(suitable_bins):
        return priorities
    priorities[suitable_bins] = 1.0 / (bins_remain_cap[suitable_bins] - item + small_value) * (1 - fragmentation_penalty / bins_remain_cap[suitable_bins])
    return priorities
```
