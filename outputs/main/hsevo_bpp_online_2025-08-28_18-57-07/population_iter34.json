[
  {
    "stdout_filepath": "problem_iter32_response0.txt_stdout.txt",
    "code_path": "problem_iter32_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit inverse waste with a relative fragmentation penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    suitable_bins = bins_remain_cap >= item\n    if not np.any(suitable_bins):\n        return priorities\n\n    waste = bins_remain_cap[suitable_bins] - item\n    priorities[suitable_bins] = 1.0 / (waste + 1e-6)\n    fragmentation_penalty = 0.05 * (1 - (bins_remain_cap[suitable_bins] - item) / bins_remain_cap[suitable_bins])\n    priorities[suitable_bins] -= fragmentation_penalty\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 129.32351694048162,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter32_response1.txt_stdout.txt",
    "code_path": "problem_iter32_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit inverse waste with relative fragmentation penalty.\"\"\"\n    small_value = 0.000664\n    fragmentation_penalty = 0.1\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    suitable_bins = bins_remain_cap >= item\n    if not np.any(suitable_bins):\n        return priorities\n    waste = bins_remain_cap[suitable_bins] - item\n    fit_score = 1.0 / (waste + small_value)\n    priorities[suitable_bins] = fit_score - fragmentation_penalty * (1 - (waste / bins_remain_cap[suitable_bins]))\n    return priorities",
    "response_id": 1,
    "tryHS": true,
    "obj": 4.038691663342641,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 112.37013046707143,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter32_response2.txt_stdout.txt",
    "code_path": "problem_iter32_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit inverse waste with a relative fragmentation penalty for improved bin packing.\"\"\"\n    small_value = 0.000664\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] = 1.0 / (waste + small_value)\n        fragmentation_penalty = 0.1 * (1 - (waste) / bins_remain_cap[feasible_bins])\n        priorities[feasible_bins] -= fragmentation_penalty\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.038691663342641,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 100.07820003461549,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter32_response3.txt_stdout.txt",
    "code_path": "problem_iter32_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit inverse waste with a relative fragmentation penalty.\"\"\"\n    small_value = 0.000664\n    fragmentation_penalty = 0.1\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    suitable_bins = bins_remain_cap >= item\n    if not np.any(suitable_bins):\n        return priorities\n    waste = bins_remain_cap[suitable_bins] - item\n    fit_score = 1.0 / (waste + small_value)\n    priorities[suitable_bins] = fit_score - fragmentation_penalty * (1 - (waste / bins_remain_cap[suitable_bins]))\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.038691663342641,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 112.37013046707143,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter32_response4.txt_stdout.txt",
    "code_path": "problem_iter32_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on best-fit inverse waste with a fragmentation penalty.\"\"\"\n    small_value = 0.000664\n    fragmentation_penalty = 0.05\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] = 1.0 / (waste + small_value) * (1 - fragmentation_penalty * (1 - (waste) / bins_remain_cap[feasible_bins]))\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 114.6940428629768,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter32_response5.txt_stdout.txt",
    "code_path": "problem_iter32_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit inverse waste with relative fragmentation penalty for improved packing.\"\"\"\n    small_value = 0.000664\n    fragmentation_penalty = 0.1\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    suitable_bins = bins_remain_cap >= item\n    if not np.any(suitable_bins):\n        return priorities\n    waste = bins_remain_cap[suitable_bins] - item\n    fit_score = 1.0 / (waste + small_value)\n    priorities[suitable_bins] = fit_score - fragmentation_penalty * (1 - (waste / bins_remain_cap[suitable_bins]))\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.038691663342641,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 112.37013046707143,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter32_response6.txt_stdout.txt",
    "code_path": "problem_iter32_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit inverse waste with relative fragmentation penalty for stable bin prioritization.\"\"\"\n    small_value = 0.000664\n    fragmentation_penalty = 0.05\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        priorities[feasible_bins] = 1.0 / (bins_remain_cap[feasible_bins] - item + small_value)\n        priorities[feasible_bins] -= fragmentation_penalty * (1 - (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins])\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 116.69205856195879,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter32_response7.txt_stdout.txt",
    "code_path": "problem_iter32_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit inverse waste with a bin capacity-relative fragmentation penalty.\"\"\"\n    small_value = 0.000664\n    fragmentation_penalty = 0.1\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        priorities[feasible_bins] = 1.0 / (bins_remain_cap[feasible_bins] - item + small_value) \\\n                                   - fragmentation_penalty * (1 - ((bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]))\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.038691663342641,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 116.69205856195879,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter32_response8.txt_stdout.txt",
    "code_path": "problem_iter32_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit inverse waste with capacity-relative fragmentation.\"\"\"\n    small_value = 0.000664\n    fragmentation_penalty = 0.1\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] = 1.0 / (waste + small_value) \\\n                                   - fragmentation_penalty * (1 - (waste / bins_remain_cap[feasible_bins]))\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.038691663342641,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 100.07820003461549,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter32_response9.txt_stdout.txt",
    "code_path": "problem_iter32_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit inverse waste with a relative fragmentation penalty for improved packing.\"\"\"\n    small_value = 0.000664\n    fragmentation_penalty = 0.1\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    suitable_bins = bins_remain_cap >= item\n    if not np.any(suitable_bins):\n        return priorities\n    waste = bins_remain_cap[suitable_bins] - item\n    fit_score = 1.0 / (waste + small_value)\n    priorities[suitable_bins] = fit_score - fragmentation_penalty * (1 - (waste / bins_remain_cap[suitable_bins]))\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.038691663342641,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 112.37013046707143,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter33_response0.txt_stdout.txt",
    "code_path": "problem_iter33_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    small_value = 1e-6\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        remaining_capacities = bins_remain_cap[feasible_bins]\n        waste = remaining_capacities - item\n        fragmentation_penalty = 0.2 * (1 - waste / bins_remain_cap[feasible_bins])\n        priorities[feasible_bins] = 1.0 / (waste + small_value) - fragmentation_penalty\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.198244914240141,
    "SLOC": 10.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 100.07820003461549,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter33_response1.txt_stdout.txt",
    "code_path": "problem_iter33_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    small_value = 1e-6\n    fragmentation_penalty = 0.05\n    priorities = np.where(bins_remain_cap >= item, 1.0 / (bins_remain_cap - item + small_value) - fragmentation_penalty * (1 - (bins_remain_cap - item) / bins_remain_cap), 0.0)\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 110.36149671375918,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter33_response2.txt_stdout.txt",
    "code_path": "problem_iter33_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    small_value = 1e-6\n    fragmentation_penalty = 0.05\n    priorities = np.where(bins_remain_cap >= item,\n                           1.0 / (bins_remain_cap - item + small_value) -\n                           fragmentation_penalty * (1.0 - (bins_remain_cap - item) / bins_remain_cap),\n                           0.0)\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 110.36149671375918,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter33_response3.txt_stdout.txt",
    "code_path": "problem_iter33_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    small_value = 1e-6\n    fragmentation_penalty = 0.05\n    \n    feasible_bins = bins_remain_cap >= item\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    \n    if np.any(feasible_bins):\n        \n        priorities[feasible_bins] = 1.0 / (bins_remain_cap[feasible_bins] - item + small_value)\n        \n        fragmentation_factor = (1 - (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins])\n        priorities[feasible_bins] -= fragmentation_penalty * fragmentation_factor\n    \n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 16, in priority_v2\nnumpy._core._exceptions._UFuncOutputCastingError: Cannot cast ufunc 'subtract' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'\n10\n2\n116.69205856195879\n"
  },
  {
    "stdout_filepath": "problem_iter33_response4.txt_stdout.txt",
    "code_path": "problem_iter33_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    small_value = 0.000664\n    fragmentation_penalty = 0.05\n    priorities = np.where(bins_remain_cap >= item,\n                          1.0 / (bins_remain_cap - item + small_value) -\n                          fragmentation_penalty * (1 - (bins_remain_cap - item) / bins_remain_cap),\n                          0.0)\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 110.36149671375918,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter34_response0.txt_stdout.txt",
    "code_path": "problem_iter34_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, small_value: float = 0.00044228022093194535, fragmentation_penalty: float = 0.20831017278322764) -> np.ndarray:\n    \"\"\"Combines best-fit inverse waste with relative fragmentation penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    suitable_bins = bins_remain_cap >= item\n    if not np.any(suitable_bins):\n        return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.487435181491823,
    "SLOC": 5.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 11.60964047443681,
    "exec_success": true
  }
]