{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines inverse remaining capacity with a feasibility check.\"\"\"\n    priorities = np.where(bins_remain_cap >= item, 1.0 / (bins_remain_cap - item + 1e-6), 0.0)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines inverse remaining capacity with a feasibility check.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    if np.sum(feasible_bins) > 0:\n        priorities[feasible_bins] = 1.0 / (bins_remain_cap[feasible_bins] - item + 1e-6)\n    return priorities\n\n### Analyze & experience\n- Comparing the top-ranked heuristics (1st & 2nd) with the bottom (19th & 20th), a clear pattern emerges. The better heuristics prioritize bins based on minimizing waste *after* placing the item, employing `1.0 / (bins_remain_cap - item + 1e-6)` or similar. The poorer heuristics also use the inverse remaining capacity, but often fail to handle edge cases where no suitable bins exist effectively, or directly use `bins_remain_cap / item`, which doesn't prioritize minimizing waste as well. Comparing 1st vs 2nd, they are almost identical.  3rd vs 4th demonstrate the inclusion of unnecessary libraries (torch, scipy) without a corresponding performance benefit. 8th, 15th, and 17th are essentially duplicates, showing redundant code.  The consistent use of `1e-6` or `1e-9` avoids division by zero.  However, checking `np.sum(possible_bins) == 0` versus `np.any(valid_bins)` then returning priorities can vary slightly but is overall similar. Overall, the better heuristics focus on a core principle \u2013 minimizing remaining waste \u2013 and implement it robustly, while the worse ones are either simplistic, redundant, or less focused on this key goal.\n- \nOkay, let's dissect this and build a framework for *better* heuristic design, aiming for that $999K! Here's a refined \"Current Self-Reflection\" distilled into actionable advice:\n\n* **Keywords:** Stability, Vectorization, Edge-Case Handling, Focused Logic.\n* **Advice:** Rigorously test with diverse, extreme datasets. Prioritize numerical robustness *even* at slight computational cost. Exploit NumPy's broadcasting \u2013 it's your friend.\n* **Avoid:** Overly clever shortcuts; they often break on edge cases. Premature optimization *before* a stable baseline.\n* **Explanation:** Heuristics thrive on predictable behavior. Prioritizing stability and efficiency (via vectorization) builds a foundation; edge case handling ensures reliability. Simplicity aids understandability & maintainability.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}