```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines minimum waste with inverse remaining capacity for better prioritization."""
    priorities = np.zeros_like(bins_remain_cap)
    suitable_bins = bins_remain_cap >= item
    if not np.any(suitable_bins):
        return priorities

    min_waste = np.min(bins_remain_cap[suitable_bins] - item)
    indices = np.where(bins_remain_cap >= item)[0]

    for i in indices:
        if bins_remain_cap[i] - item == min_waste:
            priorities[i] = 1.0 / (bins_remain_cap[i] - item + 1e-9)
        else:
            priorities[i] = 0.0
    return priorities
```
