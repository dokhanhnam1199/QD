```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines feasibility with inverse waste and a small fragmentation penalty."""
    small_value = 1e-6
    priorities = np.where(bins_remain_cap >= item, 1.0 / (bins_remain_cap - item + small_value), 0.0)
    suitable_bins = bins_remain_cap >= item
    if not np.any(suitable_bins):
        return priorities
    waste = bins_remain_cap[suitable_bins] - item
    min_waste = np.min(waste)
    indices = np.where(suitable_bins)[0]
    for i in indices:
        if bins_remain_cap[i] - item == min_waste:
            priorities[i] += 0.1 * (1.0 / (min_waste + small_value))
    return priorities
```
