import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_value: float = 0.00031225903815310893, fragmentation_penalty: float = 0.08455161918504162) -> np.ndarray:
    """
    Calculates the priority of placing an item into bins based on remaining capacity and fragmentation penalty.

    Args:
        item (float): The size of the item to be placed.
        bins_remain_cap (np.ndarray): The remaining capacity of each bin.
        small_value (float, optional): A small value added to the denominator to avoid division by zero. Defaults to 0.000664.
        fragmentation_penalty (float, optional): A penalty applied to bins with high fragmentation. Defaults to 0.05.

    Returns:
        np.ndarray: An array of priorities for each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = 1.0 / (bins_remain_cap[feasible_bins] - item + small_value) * (1 - fragmentation_penalty * (1 - (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]))
    return priorities
