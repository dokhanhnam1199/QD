```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    suitable_bins = bins_remain_cap >= item
    if not np.any(suitable_bins):
        return priorities

    waste = bins_remain_cap[suitable_bins] - item
    min_waste = np.min(waste)
    best_bins = np.where(waste == min_waste)[0]

    if len(best_bins) == 1:
        priorities[suitable_bins] = 0.0
        priorities[np.where(bins_remain_cap >= item)[0][best_bins[0]]] = 1.0
    else:
        priorities[suitable_bins] = 0.0
        for bin_index in best_bins:
            bin_idx = np.where(bins_remain_cap >= item)[0][bin_index]
            priorities[bin_idx] = 1.0 / len(best_bins)

    return priorities
```
