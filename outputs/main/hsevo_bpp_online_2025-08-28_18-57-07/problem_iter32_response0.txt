```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit inverse waste with a relative fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    suitable_bins = bins_remain_cap >= item
    if not np.any(suitable_bins):
        return priorities

    waste = bins_remain_cap[suitable_bins] - item
    priorities[suitable_bins] = 1.0 / (waste + 1e-6)
    fragmentation_penalty = 0.05 * (1 - (bins_remain_cap[suitable_bins] - item) / bins_remain_cap[suitable_bins])
    priorities[suitable_bins] -= fragmentation_penalty
    return priorities
```
