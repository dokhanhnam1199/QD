```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    small_value = 0.0001
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return np.zeros_like(bins_remain_cap)
    
    best_fit_weight = 0.7
    first_fit_weight = 0.3
    
    best_fit_priorities = np.where(feasible_bins, 1.0 / (bins_remain_cap - item + small_value), 0.0)
    first_fit_priorities = np.where(feasible_bins, 1.0, 0.0)
    
    priorities = best_fit_weight * best_fit_priorities + first_fit_weight * first_fit_priorities
    
    waste_penalty = 0.1
    
    priorities = priorities - waste_penalty * (1 - (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins])

    priorities[~feasible_bins] = 0.0
    
    return priorities
```
