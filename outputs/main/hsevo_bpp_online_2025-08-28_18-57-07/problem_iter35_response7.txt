```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit inverse waste with a relative fragmentation penalty for stability."""
    small_value = 0.000664
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = 1.0 / (waste + small_value)
        fragmentation_penalty = 0.1 * (1 - (waste) / bins_remain_cap[feasible_bins])
        priorities[feasible_bins] -= fragmentation_penalty
    return priorities
```
