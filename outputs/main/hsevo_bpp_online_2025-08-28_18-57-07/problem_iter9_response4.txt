```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)
    suitable_bins = bins_remain_cap >= item

    if not np.any(suitable_bins):
        return priorities

    waste = bins_remain_cap[suitable_bins] - item
    
    best_bin_index = np.argmin(waste)
    best_bin_priority = 1.0
    
    for i in range(n_bins):
        if suitable_bins[i]:
            if i == np.where(suitable_bins)[0][best_bin_index]:
                priorities[i] = best_bin_priority
            else:
                priorities[i] = 0.5
    
    
    
    avg_remaining_cap = np.mean(bins_remain_cap[suitable_bins])
    
    
    for i in range(n_bins):
        if suitable_bins[i]:
            if bins_remain_cap[i] > avg_remaining_cap:
                priorities[i] += 0.2
            else:
                priorities[i] -= 0.1
    
    
    
    
    return priorities
```
