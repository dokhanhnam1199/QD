{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit inverse waste with a relative fragmentation penalty.\"\"\"\n    small_value = 0.000664\n    fragmentation_penalty = 0.1\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    suitable_bins = bins_remain_cap >= item\n    if not np.any(suitable_bins):\n        return priorities\n    waste = bins_remain_cap[suitable_bins] - item\n    fit_score = 1.0 / (waste + small_value)\n    priorities[suitable_bins] = fit_score - fragmentation_penalty * (1 - (waste / bins_remain_cap[suitable_bins]))\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit inverse waste with a relative fragmentation penalty.\"\"\"\n    small_value = 0.000664\n    fragmentation_penalty = 0.05\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        priorities[feasible_bins] = 1.0 / (bins_remain_cap[feasible_bins] - item + small_value)\n        priorities[feasible_bins] -= fragmentation_penalty * (1 - (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins])\n    return priorities\n\n### Analyze & experience\n- Comparing heuristics 1st vs 2nd, both calculate priority using inverse waste and fragmentation penalty, but 1st uses `waste = bins_remain_cap[suitable_bins] - item` directly within the priority calculation, while 2nd uses `1.0 / (bins_remain_cap - item + small_value)` which appears less focused on best-fit. Comparing 1st vs 3rd, they are identical.  1st vs 4th: identical. 1st vs 5th: The main difference is the direct use of the waste value vs. using `bins_remain_cap - item`.  1st vs 6th: Identical to 5th. Comparing 1st vs 7th: Identical. 1st vs 8th-11th: these appear to be very similar with differing `small_value` and fragmentation penalty values. Comparing 1st vs 12th: 12th multiplies the inverse waste by `(1 - fragmentation_penalty...)` which reduces the impact of the inverse waste. Comparing 1st vs 13th-17th: largely similar variations in penalty and small value. 1st vs 18th-20th: these include imports (random, math, scipy, torch) which are unused, suggesting extraneous code. The repetition of the code (18th-20th are identical) is a strong signal of diminishing returns or an error in the optimization process.\n\nOverall: The top heuristics (1st-7th) are very similar, focused on best-fit inverse waste with a fragmentation penalty.  The later heuristics introduce minor variations in parameters or unnecessary code.  The most consistent difference across all heuristics is in the fragmentation penalty calculation and the `small_value` used to prevent division by zero. The best heuristics minimize unnecessary calculations and directly incorporate the waste value into the priority scoring.\n- \nOkay, here's a refined strategy for designing bin-packing heuristics, distilling the \"Current\" & \"Ineffective\" reflections, geared towards maximizing performance and earning that $999K tip!\n\n* **Keywords:** Feasibility, Waste Minimization, Fragmentation Penalty, Numerical Stability.\n* **Advice:** Prioritize a core \"best-fit feasible\" logic. Employ a *relative* fragmentation penalty (to bin capacity) and tune it meticulously. Vectorize operations.\n* **Avoid:** Explicit waste calculations beyond initial feasibility checks. Complex prioritization schemes. Redundant code/functions. Premature optimization.\n* **Explanation:** Simplicity & numerical robustness consistently trump complexity. A small, well-tuned penalty addressing fragmentation *after* feasibility is key. Focus on concise, testable logic, avoiding over-engineering.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}