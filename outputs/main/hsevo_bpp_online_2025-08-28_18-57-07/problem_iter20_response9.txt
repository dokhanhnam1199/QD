```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines feasibility, inverse waste, and a small fragmentation penalty."""
    small_value = 1e-6
    fragmentation_penalty = 0.05
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities
    waste = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = 1.0 / (waste + small_value) * (1 - fragmentation_penalty * (1 - (waste / bins_remain_cap[feasible_bins])))
    return priorities
```
