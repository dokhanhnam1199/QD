```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes feasible bins by fit and minimal fragmentation."""
    small_value = 1e-6
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities
    waste = bins_remain_cap[feasible_bins] - item
    fit_score = 1.0 / (waste + small_value)
    fragmentation_penalty = 0.05 * (1.0 / (bins_remain_cap[feasible_bins] + small_value))
    priorities[feasible_bins] = fit_score * (1.0 - fragmentation_penalty)
    return priorities
```
