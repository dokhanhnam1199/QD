import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_value: float = 0.00035455583797194877, fragmentation_penalty: float = 0.10639616483044291) -> np.ndarray:
    """Combines best-fit with a fragmentation penalty to minimize waste."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        priorities[feasible_bins] = 1.0 / (bins_remain_cap[feasible_bins] - item + small_value) - fragmentation_penalty * (1 - (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins])
    return priorities
