{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines feasibility and waste minimization with a fragmentation penalty.\"\"\"\n    small_value = 0.000664\n    fragmentation_penalty = 0.1\n    priorities = np.where(bins_remain_cap >= item, 1.0 / (bins_remain_cap - item + small_value) - fragmentation_penalty * (1 - (bins_remain_cap - item) / bins_remain_cap), 0.0)\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine \"Current self-reflection\" into actionable design principles for superior heuristics, aiming for that $999K! Here's a breakdown:\n\n* **Keywords:** Feasibility-first, Tunable penalty, Consistent logic, Numerical stability.\n* **Advice:** Embrace a core \"best-fit feasible\" approach *always*. Experiment with a *small*, tunable penalty for fragmentation \u2013 treat it as a regularization term, not a core objective.\n* **Avoid:** Overly targeted early optimization (waste *before* feasibility). Complex scoring functions. Prematurely dismissing simpler approaches.\n* **Explanation:** The original reflection correctly identifies simplicity & stability. By prioritizing *consistent* feasible placement and using fragmentation as a subtle guide, we encourage exploration and avoid getting stuck in local optima.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}