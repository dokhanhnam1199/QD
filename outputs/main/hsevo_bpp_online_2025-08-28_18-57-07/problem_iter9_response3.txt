```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    suitable_bins = bins_remain_cap >= item
    if not np.any(suitable_bins):
        return priorities

    waste = bins_remain_cap[suitable_bins] - item
    
    fit_score = 1.0 / (waste + 1e-6)
    
    fragmentation_penalty = 1.0 / (bins_remain_cap[suitable_bins] + 1e-6)
    
    priorities[suitable_bins] = fit_score * (1.0 - 0.2 * fragmentation_penalty)
    
    return priorities
```
