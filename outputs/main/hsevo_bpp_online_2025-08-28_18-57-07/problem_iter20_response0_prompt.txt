{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    small_value = 0.000664\n    fragmentation_penalty = 0.05\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        priorities[feasible_bins] = 1.0 / (bins_remain_cap[feasible_bins] - item + small_value) * (1 - fragmentation_penalty * (1 - (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]))\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    small_value = 0.000664\n    fragmentation_penalty = 0.05\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        priorities[feasible_bins] = 1.0 / (bins_remain_cap[feasible_bins] - item + small_value) - fragmentation_penalty * (1 - (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins])\n    return priorities\n\n### Analyze & experience\n- Comparing the 1st and 2nd heuristics, they are identical. The 1st and 3rd are also identical. The 3rd and 4th heuristics are also identical. The 5th, 6th and 7th heuristics are identical, adding unnecessary imports. The 8th, 9th, and 10th are again identical. The 11th and 17th and 19th are identical. The 12th, 18th and 20th are identical. The 13th, 14th, 15th and 16th are identical.  The core logic for priority calculation \u2013 combining feasibility, inverse waste, and fragmentation penalty \u2013 is consistent across many implementations. The variations arise from redundancies in code, and minor differences in default values. The use of `small_value` to prevent division by zero is a good practice. The fragmentation penalty calculation `1 - fragmentation_penalty * (1 - (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins])` appears consistently, aiming to reduce fragmentation. The heuristics that include the unnecessary imports (5th, 6th, and 7th) are worse due to added complexity and potentially slower execution. The heuristics that do not explicitly handle the case where no suitable bins exist (returning an all-zero priority array) are more robust.\n- \nOkay, let's refine heuristic design based on this extensive self-reflection. Here's advice geared towards maximizing performance, aiming for that $999K tip!\n\n* **Keywords:** Feasibility, Simplicity, Stability, Prioritization.\n* **Advice:** Focus relentlessly on *feasible* bin selection first. Prioritize bins minimizing *immediate* waste (inverse remaining capacity is strong). Experiment with small, *multiplicative* fragmentation penalties. Leverage NumPy.\n* **Avoid:** Premature optimization, complex waste calculations, redundancy, unnecessary parameters, and over-reliance on normalization.\n* **Explanation:** Robustness (handling edge cases & numerical stability - `small_value`) and a clear, direct link to the objective (waste *after* feasibility) consistently outperform intricate logic. Simplicity aids maintainability & reveals core strengths.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}