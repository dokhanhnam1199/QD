```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    suitable_bins = bins_remain_cap >= item
    if np.any(suitable_bins):
        inverse_waste = 1.0 / (bins_remain_cap[suitable_bins] - item + 1e-6)
        max_inverse_waste = np.max(inverse_waste)
        indices = np.where(suitable_bins)[0]
        for i in indices:
            if abs(inverse_waste[np.where(indices == i)[0][0]] - max_inverse_waste) < 1e-6:
                priorities[i] = 1.0
            else:
                priorities[i] = inverse_waste[np.where(indices == i)[0][0]] / max_inverse_waste
    return priorities
```
