```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines minimum waste with inverse remaining capacity for robust prioritization."""
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        distances = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = 1.0 / (distances + 1e-6)
        min_waste = np.min(distances)
        indices = np.where(bins_remain_cap >= item)[0]
        for i in indices:
            if bins_remain_cap[i] - item == min_waste:
                priorities[i] += 1.0
    return priorities
```
