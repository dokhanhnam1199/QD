{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines feasibility and waste minimization with a fragmentation penalty.\"\"\"\n    small_value = 0.000664\n    fragmentation_penalty = 0.1\n    priorities = np.where(bins_remain_cap >= item, 1.0 / (bins_remain_cap - item + small_value) - fragmentation_penalty * (1 - (bins_remain_cap - item) / bins_remain_cap), 0.0)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit with a small fragmentation penalty for improved packing.\"\"\"\n    small_value = 1e-6\n    fragmentation_penalty = 0.1\n    priorities = np.zeros_like(bins_remain_cap)\n    suitable_bins = bins_remain_cap >= item\n    if not np.any(suitable_bins):\n        return priorities\n    waste = bins_remain_cap[suitable_bins] - item\n    priorities[suitable_bins] = 1.0 / (waste + small_value) - fragmentation_penalty * (1 - (waste / bins_remain_cap[suitable_bins]))\n    return priorities\n\n### Analyze & experience\n- Comparing the 1st and 2nd heuristics, which are identical, to the 3rd, also identical, reveals no differences. They all prioritize inverse waste minus a fragmentation penalty. Comparing the 1st/2nd/3rd to the 4th, we see the 4th explicitly calculates minimum waste and boosts priority based on it, adding complexity. The 5th-8th heuristics are all identical to the 4th, offering no improvement. Heuristics 6th and 9th attempt a simpler fragmentation penalty application, directly subtracting from priorities. They are less refined than the initial version. Heuristics 10th adds default values, which is good practice but doesn't impact the core logic.  The 11th, 12th, 13th, 14th, 15th, 16th, 17th, 18th, 19th, and 20th all explore variations of best-fit with fragmentation penalties, differing mainly in `small_value` and `fragmentation_penalty` constants.  The 14th & 15th show a nuanced fragmentation penalty multiplying the fit score, which is more mathematically sound than subtracting directly. However, the constant 0.05 feels arbitrary. Overall, the earlier heuristics (1st-3rd) show a clean and conceptually strong approach, while the later ones introduce complexity with limited demonstrable gain or rely on potentially arbitrary constant tuning. The core idea of balancing inverse waste and fragmentation is consistent throughout, but the implementation and tuning vary in effectiveness.\n- \nOkay, let's redefine \"Current Self-Reflection\" for superior heuristic design \u2013 aiming for that $999K! Here's a distilled guide, stepping away from the pitfalls identified:\n\n* **Keywords:** Feasibility-first, Stable Prioritization, Tunable Penalties, Simplicity.\n* **Advice:** Focus relentlessly on core \"best-fit feasible\" logic. Employ multiplicative fragmentation penalties; experiment with coefficients. Prioritize inverse waste *after* feasibility is guaranteed, and validate all constants rigorously.\n* **Avoid:** Explicit waste calculation beyond initial feasibility checks. Premature optimization. Complex normalization. Redundant code/functions.\n* **Explanation:** Complexity often obscures the essential: quickly finding *any* valid placement before optimizing. Stability (avoiding errors) and tunable penalties allow focused refinement without breaking fundamental function.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}