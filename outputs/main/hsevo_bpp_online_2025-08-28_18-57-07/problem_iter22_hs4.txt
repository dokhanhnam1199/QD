import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_value: float = 0.0006012973693889923, fragmentation_penalty: float = 0.00792834500262431) -> np.ndarray:
    """Prioritizes bins based on feasibility and remaining capacity, with a small fragmentation penalty to encourage better space utilization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        priorities[feasible_bins] = 1.0 / (bins_remain_cap[feasible_bins] - item + small_value) * (1 - fragmentation_penalty * (1 - (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]))
    return priorities
