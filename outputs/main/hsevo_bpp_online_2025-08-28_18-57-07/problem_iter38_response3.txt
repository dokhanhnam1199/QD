```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit inverse waste with a relative fragmentation penalty, 
    prioritizing feasibility and numerical robustness."""
    small_value = 0.000664
    fragmentation_penalty = 0.05
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    suitable_bins = bins_remain_cap >= item
    if not np.any(suitable_bins):
        return priorities
    waste = bins_remain_cap[suitable_bins] - item
    fit_score = 1.0 / (waste + small_value)
    priorities[suitable_bins] = fit_score - fragmentation_penalty * (1 - (waste / bins_remain_cap[suitable_bins]))
    return priorities
```
