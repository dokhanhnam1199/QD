{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    suitable_bins = bins_remain_cap >= item\n    \n    if np.any(suitable_bins):\n        \n        min_waste = np.min(bins_remain_cap[suitable_bins] - item)\n        \n        indices = np.where(bins_remain_cap >= item)[0]\n        \n        for i in indices:\n            if bins_remain_cap[i] - item == min_waste:\n                priorities[i] = 1.0\n            else:\n                priorities[i] = 0.0\n    \n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's dissect this and redefine \"Current self-reflection\" for superior heuristic design, aiming for that $999K! Here's a breakdown:\n\n* **Keywords:** Exploration, Targeted Prioritization, Robustness, Efficiency.\n* **Advice:** Focus on *diverse* prioritization signals *beyond* simple remaining capacity. Experiment with combinations (e.g., fit + future impact). Systematically explore the search space, not just greedy improvements.\n* **Avoid:** Premature simplicity. Dismissing complexity *before* rigorous testing. Over-reliance on normalization. Treating robustness as the primary goal.\n* **Explanation:** The prior reflection favored quick wins. This one advocates for **strategic complexity** \u2013 investing in mechanisms that unlock better solutions, accepting initial overhead for potentially exponential gains. Robustness is maintained, but *serves* the core logic, not defines it.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}