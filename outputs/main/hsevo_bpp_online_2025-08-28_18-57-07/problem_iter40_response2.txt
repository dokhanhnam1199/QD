import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_value: float = 0.0009738336279430144,
                fragmentation_penalty: float = 0.04815868393758758, best_fit_weight: float = 0.5755454072664108,
                first_fit_weight: float = 0.641903027194266) -> np.ndarray:
    """
    Calculates priorities for bin selection based on best-fit and first-fit strategies.

    Args:
        item: The size of the item to be placed.
        bins_remain_cap: An array representing the remaining capacity of each bin.
        small_value: A small value to avoid division by zero. Defaults to 0.0001.
        fragmentation_penalty: A penalty for fragmentation. Defaults to 0.05.
        best_fit_weight: The weight given to the best-fit priority. Defaults to 0.6.
        first_fit_weight: The weight given to the first-fit priority. Defaults to 0.4.

    Returns:
        An array of priorities for each bin.
    """
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return np.zeros_like(bins_remain_cap)
    best_fit_priorities = np.where(feasible_bins, 1.0 / (bins_remain_cap - item + small_value), 0.0)
    first_fit_priorities = np.where(feasible_bins, 1.0, 0.0)
    priorities = best_fit_weight * best_fit_priorities + first_fit_weight * first_fit_priorities
    priorities = priorities - fragmentation_penalty * (1 - (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins])
    priorities[~feasible_bins] = 0.0
    return priorities
