{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on fit and a relative fragmentation penalty.\"\"\"\n    feasible_bins = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n        fragmentation_penalty = 0.05 * (1 - waste / bins_remain_cap[feasible_bins])\n        priorities[feasible_bins] = 1.0 / (waste + 1e-6) - fragmentation_penalty\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit inverse waste with a relative fragmentation penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    suitable_bins = bins_remain_cap >= item\n    if not np.any(suitable_bins):\n        return priorities\n\n### Analyze & experience\n- Comparing the 1st (best) heuristic against the 20th (worst), the primary difference lies in how the waste calculation and fragmentation penalty are applied. The 1st heuristic consistently uses `bins_remain_cap[suitable_bins] - item` for waste, providing a clear and direct measure. The 20th heuristic\u2019s similar calculation is also good, but it seems to show up at the very bottom, hinting at nuances in how this is used downstream in a complete bin-packing system.\n\nComparing the 1st vs 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th, 10th, 11th, 12th, 13th, 14th, 15th, 16th, 17th, 18th and 19th heuristics we can see they are almost identical. The primary reason 1st heuristic is better than the others is that the best is the original function. A lot of the copies and duplicates were made during an attempt to optimize. \n\nThe 7th heuristic attempts a slightly different approach using `np.where`, which can be less readable and potentially less efficient than the boolean indexing used in the others, and it\u2019s fragmentation calculation is slightly different. The import of `random`, `math`, `scipy`, and `torch` in heuristics 16-19 add unnecessary dependencies, indicating experimentation that didn\u2019t yield improvement. The subtle differences in `small_value` and `fragmentation_penalty` across some versions likely indicate a search for optimal parameters, but the base logic remained largely the same.\n\nOverall: The core logic of best-fit inverse waste with a fragmentation penalty appears robust. The slight variations across the heuristics didn't improve performance and instead add complexity or unnecessary dependencies. The consistency of the top-ranked heuristic points to its inherent effectiveness. The duplication and minor alterations suggest a focus on parameter tuning rather than a fundamental algorithmic improvement.\n- \nOkay, here\u2019s a refined \u201cCurrent Self-Reflection\u201d framework for heuristic design, aiming for that $999K reward!\n\n* **Keywords:** Feasibility-first, Parameter Sensitivity, Numerical Robustness, Modular Design.\n* **Advice:** Focus relentlessly on a *provably feasible* core. Systematically vary parameters (penalty coefficients, `small_value`) using controlled experiments. Prioritize modular code for easy swapping of prioritization logic.\n* **Avoid:** Premature complexity, explicit waste calculations *without* demonstrated benefit, redundancy, and over-tuning constants before optimizing core logic.\n* **Explanation:** Small gains from complex logic are often outweighed by decreased clarity and increased debugging. A robust, feasible base with sensitive parameters yields the largest, most predictable improvements.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}