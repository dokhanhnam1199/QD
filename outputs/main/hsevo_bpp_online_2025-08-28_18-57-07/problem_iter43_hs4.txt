import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_value: float = 0.0004467967042922313,
                fragmentation_penalty: float = 0.07283503016218287, best_fit_weight: float = 0.5713428617919382,
                first_fit_weight: float = 0.3134941493707862) -> np.ndarray:
    """Combines best-fit and first-fit with a fragmentation penalty."""
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return np.zeros_like(bins_remain_cap)
    best_fit_priorities = np.where(feasible_bins, 1.0 / (bins_remain_cap - item + small_value), 0.0)
    first_fit_priorities = np.where(feasible_bins, 1.0, 0.0)
    priorities = best_fit_weight * best_fit_priorities + first_fit_weight * first_fit_priorities
    priorities = priorities - fragmentation_penalty * (1 - (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins])
    priorities[~feasible_bins] = 0.0
    return priorities
