```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines feasibility, inverse waste, and multiplicative fragmentation penalty."""
    small_value = 1e-6
    priorities = np.zeros_like(bins_remain_cap)
    suitable_bins = bins_remain_cap >= item
    if not np.any(suitable_bins):
        return priorities
    waste = bins_remain_cap[suitable_bins] - item
    fit_score = 1.0 / (waste + small_value)
    fragmentation_penalty = 0.05 * (1.0 / (bins_remain_cap[suitable_bins] + small_value))
    priorities[suitable_bins] = fit_score * (1.0 - fragmentation_penalty)
    return priorities
```
