{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    suitable_bins = bins_remain_cap >= item\n    \n    if np.any(suitable_bins):\n        \n        min_waste = np.min(bins_remain_cap[suitable_bins] - item)\n        \n        indices = np.where(bins_remain_cap >= item)[0]\n        \n        for i in indices:\n            if bins_remain_cap[i] - item == min_waste:\n                priorities[i] = 1.0\n            else:\n                priorities[i] = 0.0\n    \n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine \"Current Self-Reflection\" to truly unlock heuristic design improvements. Here's a breakdown, aiming for that $999K tip!\n\n* **Keywords:** Feasibility-first, Waste-focused, Vectorization, Numerical Robustness.\n* **Advice:** Rigorously benchmark *multiple* simple prioritization schemes (not just inverse remaining capacity) against each other *and* established heuristics. Focus on identifying patterns in failure cases.\n* **Avoid:** Premature optimization. Don't add complexity *before* profiling reveals bottlenecks. Resist re-implementing existing NumPy functions.\n* **Explanation:** The previous reflection focused too much on what *already* works. True improvement comes from exploring *alternative* simple strategies, systematically tested, and understanding *why* certain approaches fail, then vectorizing the winning strategy.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}