```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit inverse waste with fragmentation penalty and first-fit consideration."""
    small_value = 0.000664
    fragmentation_penalty = 0.1
    best_fit_weight = 0.6
    first_fit_weight = 0.4

    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap[feasible_bins] - item
    fit_score = 1.0 / (waste + small_value)
    fragmentation_term = (1 - (waste / bins_remain_cap[feasible_bins]))
    priorities = best_fit_weight * (fit_score - fragmentation_penalty * fragmentation_term) + \
                 first_fit_weight * (1.0 / (np.arange(len(bins_remain_cap))[feasible_bins] + 1))
    priorities[~feasible_bins] = 0.0
    return priorities
```
