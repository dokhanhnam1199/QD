```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" heuristic with a strategic enhancement
    to strongly prioritize perfect fits. It aims to minimize waste by preferring
    bins that, after the item is placed, would have the smallest remaining capacity.
    Bins where the item does not fit are given an extremely low priority.
    A significant bonus is awarded to bins that achieve a perfectly zero remaining
    capacity, reflecting a more aggressive strategy to "finish off" bins completely
    and optimally utilize space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # This effectively filters out bins where the item does not fit.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the base priority. This is the core "Best Fit" logic:
    # minimize the remaining capacity by using its negative as the priority.
    # A smaller positive remaining capacity (e.g., 1.0) results in a larger
    # (less negative) priority score (e.g., -1.0).
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # Strategic Mutation: Introduce a significant bonus for perfect fits.
    # This aligns with "Strategically evaluate choices" by explicitly valuing
    # maximal bin utilization. A perfect fit means potential_remaining_cap is exactly 0.
    # The bonus ensures that a bin achieving a perfect fit will always be preferred
    # over any bin that has a non-zero remaining capacity, no matter how small.
    # For example, if max possible remaining capacity is 100, then a general priority
    # could be -100. A perfect fit is 0. A bonus of 1.0 ensures 0 + 1.0 = 1.0 is
    # always greater than any negative priority resulting from a non-perfect fit.
    PERFECT_FIT_BONUS = 1.0

    # Identify bins where a perfect fit is achieved.
    # We use np.isclose for float comparisons to account for potential floating point inaccuracies,
    # though for typical BPP, exact zero might be common.
    perfect_fit_mask = np.isclose(potential_remaining_cap, 0.0)

    # Apply the bonus only to bins that achieve a perfect fit and also fit the item.
    # The `perfect_fit_mask` implicitly means `potential_remaining_cap` is 0, which implies it fits.
    priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    return priorities
```
