```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" like heuristic, similar to v1,
    but re-scales the priority scores to be non-negative, where a higher
    score indicates a better fit (i.e., less remaining capacity).

    It prioritizes bins that, after the item is placed, would have the
    smallest remaining capacity. Bins where the item does not fit are
    given an extremely low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the priority.
    # We want to minimize the remaining capacity (potential_remaining_cap).
    # To convert this into a positive score where higher is better:
    # We find the maximum possible remaining capacity among the bins where the item fits.
    # Then, we subtract the actual remaining capacity from this maximum.
    # This ensures that a perfect fit (remaining_cap = 0) gets the highest score,
    # and the "worst" fit among eligible bins (largest remaining_cap) gets a score of 0.
    if np.any(fitting_bins_mask):
        # Get remaining capacities for bins where the item fits
        fitting_rem_caps = potential_remaining_cap[fitting_bins_mask]

        # Find the maximum remaining capacity among these fitting bins.
        # This serves as a baseline for scaling the priorities.
        max_fitting_rem_cap = np.max(fitting_rem_caps)

        # Calculate priority scores for fitting bins:
        # A smaller `fitting_rem_caps` (tighter fit) results in a larger
        # `max_fitting_rem_cap - fitting_rem_caps` value (higher priority).
        # A perfect fit (fitting_rem_caps = 0) gets `max_fitting_rem_cap`.
        # The worst fitting bin among the valid ones gets `0`.
        priorities[fitting_bins_mask] = max_fitting_rem_cap - fitting_rem_caps

    return priorities
```
