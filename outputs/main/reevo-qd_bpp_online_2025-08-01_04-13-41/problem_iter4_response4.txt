```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements the classic "Best Fit" strategy for online bin packing.
    It prioritizes bins that, if the item is placed, will leave the smallest absolute
    amount of remaining capacity. This strategy directly aims to achieve "compact fits"
    by maximizing the immediate utilization of each bin, thereby minimizing the
    absolute wasted space within the selected bin. This approach is generally effective
    in reducing the total number of bins used.

    The priority score is calculated as `-(remaining_capacity_after_placement)`.

    - Bins where the item does not fit are assigned a very low (negative infinity) priority.
    - A perfect fit (remaining_capacity - item_size = 0) yields a score of 0,
      which is the highest possible score, indicating the most preferred option.
    - A snug fit (e.g., remaining_capacity - item_size = 0.1) yields a score of -0.1.
    - A loose fit (e.g., remaining_capacity - item_size = 1.0) yields a score of -1.0.

    Compared to `priority_v1`, which normalizes the remaining capacity by the item's size,
    `priority_v2` focuses on minimizing the absolute amount of empty space left in the bin.
    This provides a direct measure of "compactness" for the bin itself, which is a
    fundamental goal in bin packing to reduce the overall bin count.

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
              Typically, item sizes in Bin Packing are positive.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    # Initialize priorities. Bins that cannot fit the item will retain a very low priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find which bins the item can fit into
    fits_mask = bins_remain_cap >= item

    # Handle the edge case where item size is non-positive.
    # Typically, item sizes in BPP are positive.
    if item <= 0:
        if item == 0:
            # If item is zero, it occupies no space and creates no waste.
            # It can conceptually fit into any bin that has non-negative capacity.
            # Assign a perfect fit score (0) to all bins it "fits" into,
            # indicating no absolute waste.
            priorities[fits_mask] = 0.0
        # If item < 0, which is typically invalid for bin packing,
        # all priorities remain -np.inf, effectively preventing placement.
        return priorities

    # Calculate the remaining capacity after placing the item for fitting bins.
    # This value represents the 'absolute waste' if the item is placed in this bin.
    remainder_after_placement = bins_remain_cap[fits_mask] - item

    # For bins where the item fits, calculate the priority score.
    # We want to minimize 'remainder_after_placement' (to achieve a compact fit).
    # By taking the negative of this value, we convert the minimization
    # problem into a maximization problem for the priority score.
    # A smaller positive remainder results in a higher (less negative) score.
    # A perfect fit (remainder = 0) results in a score of 0, which is the highest.
    priorities[fits_mask] = -remainder_after_placement

    return priorities
```
