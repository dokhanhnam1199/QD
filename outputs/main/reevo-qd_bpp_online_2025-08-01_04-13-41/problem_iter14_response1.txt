```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns a priority score for each bin, implementing a sophisticated Best Fit strategy
    with deterministic tie-breaking for online Bin Packing.

    This heuristic aims to minimize wasted space by prioritizing bins that, after placement,
    will have the smallest amount of remaining capacity. It ensures consistent decision-making
    by resolving ties based on bin index.

    Heuristic Design Principles:

    1.  **Primary Goal: Best Fit (Minimize Remaining Capacity / Maximize Fill)**
        -   The core objective is to find a bin that, after placing the 'item', leaves the
            smallest positive amount of remaining capacity. This is a highly effective
            greedy strategy for Bin Packing, as it tends to 'fill up' bins more completely,
            leaving larger contiguous free spaces in other bins for future, larger items.
        -   A perfect fit (where `bins_remain_cap - item` equals 0) yields the highest
            possible primary score (0), indicating maximal preference.
        -   The primary score for a fitting bin is calculated as `-(bins_remain_cap - item)`.
            This mathematical transformation ensures that smaller positive remainders result
            in higher (less negative) priority scores, effectively ranking tighter fits higher.

    2.  **Secondary Goal: Deterministic Tie-Breaking (Prefer Lower Bin Index)**
        -   In scenarios where multiple bins yield the exact same primary "Best Fit" score
            (e.g., several perfect fit options, or multiple bins leading to identical minimal
            non-zero waste), a clear and deterministic tie-breaking rule is crucial to
            prevent arbitrary choices.
        -   Bins with a lower original index are given a slight preference. This is achieved
            by subtracting a very small, index-dependent penalty from the primary score.
            Specifically, `penalty = bin_index * EPSILON_FOR_TIE_BREAKING`. This ensures
            that among truly equally good primary options, the bin with the lowest index
            will receive a marginally higher overall priority score, leading to predictable selection.

    Robustness and Edge Cases:

    -   **Invalid Bins:** Bins that cannot physically accommodate the item (i.e., `bins_remain_cap < item`)
        are assigned an extremely low priority (`-np.inf`). This guarantees they are never
        selected unless no other valid bin exists (which implies the item cannot be packed).
    -   **Zero-Sized Items:** If `item` is 0, it is considered a perfect fit for any bin with
        non-negative capacity, receiving a perfect score of 0.0. Tie-breaking is implicitly
        handled by `np.argmax` which selects the lowest index in case of identical maximums.
    -   **Negative-Sized Items:** Items with negative size are considered invalid for bin packing,
        and all bins retain their default low priority (`-np.inf`).
    -   **Floating-Point Precision:** The `EPSILON_FOR_TIE_BREAKING` is chosen to be sufficiently
        small (e.g., 1e-12 for standard double precision floats) to avoid incorrectly altering
        the primary ordering due to minor floating-point inaccuracies, only acting on exact ties.

    Args:
        item: The size of the item to be packed. Must be a non-negative float.
        bins_remain_cap: A NumPy array containing the current remaining capacity of each bin.

    Returns:
        A NumPy array of the same shape as `bins_remain_cap`, where each element represents
        the calculated priority score for placing the item into that bin. The bin corresponding
        to the highest priority score should be selected.
    """
    # Initialize all priorities to negative infinity. This ensures bins that cannot fit
    # the item are effectively excluded from consideration, unless no valid option exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Handle edge cases for item size.
    if item < 0:
        # Invalid item size for bin packing; no bin can fit it.
        return priorities
    elif item == 0:
        # Zero-sized items are considered a 'perfect fit' for any bin with capacity.
        # Assign a perfect score (0.0) to all such bins. Tie-breaking is implicit
        # as np.argmax will pick the lowest index if multiple bins get 0.0.
        priorities[bins_remain_cap >= 0] = 0.0
        return priorities

    # Identify all bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can accommodate the item, return the array of -inf priorities.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate the remaining capacity for bins that can fit the item.
    # A smaller `remainder_after_placement` indicates a 'tighter' or 'better' fit.
    remainder_after_placement = bins_remain_cap[can_fit_mask] - item

    # Calculate the primary priority scores based on the 'Best Fit' principle.
    # By negating the remainder, a perfect fit (remainder 0) yields the highest score (0),
    # and smaller positive remainders yield scores closer to 0 (higher priority).
    primary_scores = -remainder_after_placement

    # Define a small epsilon for deterministic tie-breaking.
    # This value must be small enough to not override the primary scoring unless
    # primary scores are exactly identical.
    EPSILON_FOR_TIE_BREAKING = 1e-12

    # Get the original indices of the bins that can fit the item.
    # These indices are crucial for applying the deterministic tie-breaking rule.
    fitting_bin_indices = np.where(can_fit_mask)[0]

    # Calculate tie-breaking penalties.
    # Preferring lower indices means `bin_index * EPSILON` should be subtracted.
    # A smaller `bin_index` results in a smaller penalty, thus a slightly higher final score.
    tie_breaker_penalties = fitting_bin_indices * EPSILON_FOR_TIE_BREAKING

    # Combine the primary Best Fit scores with the secondary tie-breaking penalties.
    # The result is assigned back to the corresponding positions in the priorities array.
    priorities[can_fit_mask] = primary_scores - tie_breaker_penalties

    return priorities
```
