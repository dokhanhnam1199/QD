```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" like heuristic. It prioritizes
    bins that, after the item is placed, would have the smallest remaining
    capacity (i.e., leaving the least 'waste'). Bins where the item does
    not fit are given an extremely low priority.

    Compared to v1, this version scales the scores for fitting bins such that
    the "best" (tightest fit) bin receives the highest positive score,
    making the "higher is better" interpretation more direct and intuitive,
    while maintaining the Best-Fit objective of minimizing post-placement remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Only proceed to calculate specific priorities if there are any bins
    # where the item can fit.
    if np.any(fitting_bins_mask):
        # Get the potential remaining capacities only for the bins where the item fits.
        fitting_potential_remaining_cap = potential_remaining_cap[fitting_bins_mask]

        # Find the maximum remaining capacity among the bins where the item fits.
        # This maximum value is used as an offset to transform 'smaller remaining capacity'
        # into 'larger priority score'.
        # For example, if fitting_potential_remaining_cap is [5, 1, 10] (smaller is better)
        # then max_fit_remain_cap will be 10.
        # The scores will be [10-5, 10-1, 10-10] = [5, 9, 0].
        # Now, higher scores (9) correspond to the tighter fit (1 remaining).
        max_fit_remain_cap = np.max(fitting_potential_remaining_cap)

        # For fitting bins, set the priority.
        # We subtract the potential remaining capacity from the maximum.
        # This ensures that bins with less remaining capacity (i.e., tighter fits)
        # receive a higher priority score.
        priorities[fitting_bins_mask] = max_fit_remain_cap - fitting_potential_remaining_cap

    return priorities
```
