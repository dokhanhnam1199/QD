```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on a "Best Fit" strategy.

    This heuristic aims to place the item into the bin where it fits most tightly,
    i.e., the bin that would have the smallest non-negative remaining capacity after
    the item is placed. This strategy helps to leave larger contiguous spaces in
    other bins for potentially larger future items and efficiently consolidate
    items.

    Bins that cannot accommodate the item are assigned a very low (negative infinity)
    priority score, ensuring they are never chosen. For bins that can fit the item,
    the priority is calculated as the negative of the remaining capacity after
    the item is placed. A smaller positive remaining capacity (tighter fit) results
    in a larger negative number (closer to zero), which corresponds to a higher
    priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a very low value for bins that cannot fit the item.
    # This ensures they are not chosen. Using -np.inf makes them strictly the lowest.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Identify which bins can accommodate the current item.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item were placed in suitable bins.
    # This 'leftover' space is the key for the Best Fit heuristic.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Assign priorities for bins that can fit the item.
    # The Best Fit strategy selects the bin that results in the smallest leftover space.
    # To convert 'smallest leftover' to 'highest priority score', we take the negative
    # of the leftover space.
    # For example:
    # - If leftover is 0.1, priority is -0.1.
    # - If leftover is 0.5, priority is -0.5.
    # - If leftover is 0.0 (perfect fit), priority is 0.0 (highest possible for a fit).
    # Since 0.0 > -0.1 > -0.5, this correctly prioritizes tighter fits.
    priorities[can_fit_mask] = -remaining_after_fit

    return priorities
```
