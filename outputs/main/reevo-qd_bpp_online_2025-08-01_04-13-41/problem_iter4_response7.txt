```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" heuristic, prioritizing bins that,
    after the item is placed, would have the smallest remaining capacity.
    Bins where the item does not fit are given an extremely low (negative infinity) priority.
    Among fitting bins, a smaller remaining capacity yields a higher priority score
    by using the negative of the potential remaining capacity. This is a simpler
    and equally effective way to implement Best Fit compared to v1, ensuring
    that the bin leaving the least remaining capacity receives the highest score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value indicates the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item (in which case
    # all priorities would be -np.inf).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the priority.
    # The goal of "Best Fit" is to minimize the remaining capacity (potential_remaining_cap).
    # To convert this minimization problem into a maximization problem (for argmax selection),
    # we simply take the negative of the potential remaining capacity for bins where the item fits.
    # A perfect fit (potential_remaining_cap = 0) results in a score of 0.
    # A very loose fit (large potential_remaining_cap) results in a large negative score.
    # The argmax function will correctly identify the bin with the smallest positive
    # potential_remaining_cap (i.e., the one closest to 0 or a perfect fit) as having the highest priority.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    return priorities
```
