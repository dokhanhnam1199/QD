```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function extends the "Best Fit" heuristic from v1 by implementing
    the "Prior reflection" strategy:
    1.  **Filters invalid choices:** Bins where the item does not fit are given
        an extremely low priority (-np.inf).
    2.  **Prioritizes tight immediate fits, strongly rewarding perfect packing:**
        Bins that result in a perfectly filled bin (remaining capacity of 0)
        are given the absolute highest priority score.
    3.  **Crucially, penalizes choices creating awkward future gaps:** Bins that,
        after placing the item, would have a small but non-zero remaining capacity
        (an "awkward gap") are penalized. This makes them less desirable than bins
        that leave a larger, potentially more useful remaining capacity, or a
        perfectly filled bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The maximum capacity of a single bin. This is crucial
                      for defining "awkward" gaps relative to the total bin size.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax unless no bin fits.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate the remaining capacity if the item were placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Get the potential remaining capacities for only the fitting bins
    valid_potential_rem_cap = potential_remaining_cap[fitting_bins_mask]

    # Initialize a temporary array for priorities of fitting bins
    temp_priorities = np.zeros_like(valid_potential_rem_cap, dtype=float)

    # --- Define thresholds and scores for priority rules ---
    # A small epsilon for floating point comparisons to identify 'perfect' fits.
    PERFECT_FIT_EPSILON = 1e-9
    # A fraction of the bin_capacity that defines a small, potentially 'awkward' gap.
    # For example, if a bin has 100 capacity, and this is 0.2, then gaps 0 < gap <= 20
    # are considered awkward.
    AWKWARD_GAP_THRESHOLD_FRACTION = 0.2
    # The penalty applied to bins that result in an awkward gap. This value
    # should be chosen such that penalized scores are lower than "useful"
    # remaining capacities, but still higher than -np.inf.
    AWKWARD_GAP_PENALTY = 50.0
    # A high positive reward for perfect fits, ensuring they are always chosen first.
    PERFECT_FIT_REWARD = 1000.0

    # --- Apply priority rules based on the type of remaining capacity ---

    # Rule 1: Strongly reward perfect fits.
    # If the remaining capacity is effectively zero, give it the highest priority.
    perfect_fit_mask = valid_potential_rem_cap < PERFECT_FIT_EPSILON
    temp_priorities[perfect_fit_mask] = PERFECT_FIT_REWARD

    # Rule 2: Penalize "awkward" small non-zero gaps.
    # These are gaps that are positive but fall within the defined 'awkward' range
    # (e.g., from >0 up to AWKWARD_GAP_THRESHOLD_FRACTION * bin_capacity).
    # Their base priority is -remaining_capacity (Best Fit), with an additional penalty.
    awkward_gap_mask = (valid_potential_rem_cap >= PERFECT_FIT_EPSILON) & \
                       (valid_potential_rem_cap <= bin_capacity * AWKWARD_GAP_THRESHOLD_FRACTION)
    temp_priorities[awkward_gap_mask] = -valid_potential_rem_cap[awkward_gap_mask] - AWKWARD_GAP_PENALTY

    # Rule 3: For larger "useful" gaps, apply the standard Best Fit logic.
    # These are gaps greater than the awkward threshold. We still want to minimize
    # waste, so smaller remaining capacities are preferred within this category.
    useful_gap_mask = valid_potential_rem_cap > bin_capacity * AWKWARD_GAP_THRESHOLD_FRACTION
    temp_priorities[useful_gap_mask] = -valid_potential_rem_cap[useful_gap_mask]

    # Assign the calculated priorities back to the main priorities array,
    # ensuring only fitting bins get updated values.
    priorities[fitting_bins_mask] = temp_priorities

    return priorities
```
