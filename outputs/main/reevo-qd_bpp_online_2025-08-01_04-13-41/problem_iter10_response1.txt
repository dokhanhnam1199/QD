```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a refined "Best Fit" heuristic for online bin packing,
    emphasizing optimal space utilization and strongly preferring perfect fits.
    It assigns priority scores such that:
    1. Bins where the item does not fit are given an extremely low priority (-inf).
       This effectively filters out invalid choices.
    2. Bins that achieve a perfectly zero remaining capacity are given the
       highest possible distinct priority, ensuring perfect fits are always chosen.
    3. For bins where the item fits but is not a perfect fit, priority is inversely
       proportional to the remaining capacity after placement (Best Fit principle).
       This prioritizes options leading to high resource utilization by favoring
       bins that will have the least remaining space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Initialize priorities to a very low value. Bins where the item cannot fit
    # will retain this value, ensuring they are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate the remaining capacity if the item were placed in each bin.
    # A positive value indicates the item fits, a negative value means it does not.
    remaining_after_placement = bins_remain_cap - item

    # Create a boolean mask to identify bins where the item can actually fit
    # (i.e., where remaining capacity would be non-negative).
    can_fit_mask = remaining_after_placement >= 0

    # Define the distinct highest priority for perfect fits.
    # This value must be greater than the maximum possible priority achievable by
    # non-perfect fits (which approaches 1.0 as remaining_after_placement approaches 0).
    PERFECT_FIT_PRIORITY = 2.0

    # For bins that can fit the item, calculate their specific priority.
    # We use np.where to apply different scoring logic based on whether it's a perfect fit:
    # - If remaining_after_placement is approximately zero (perfect fit), assign PERFECT_FIT_PRIORITY.
    # - Otherwise (non-perfect fit), apply the Best Fit formula: 1.0 / (1.0 + remaining_capacity).
    #   This formula maps smaller positive remaining capacities to higher priority scores (closer to 1.0),
    #   and larger remaining capacities to lower scores (closer to 0.0).
    priorities[can_fit_mask] = np.where(
        np.isclose(remaining_after_placement[can_fit_mask], 0.0), # Condition: Is it a perfect fit?
        PERFECT_FIT_PRIORITY,                                    # Value if True (perfect fit)
        1.0 / (1.0 + remaining_after_placement[can_fit_mask])    # Value if False (non-perfect fit)
    )

    return priorities
```
