```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function extends the "Best Fit" heuristic by penalizing the creation
    of very small, potentially unusable (awkward) gaps within a bin, thereby
    aiming to reduce fragmentation and optimize long-term bin utilization.
    Bins where the item does not fit are given an extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # -np.inf ensures that bins where the item does not fit are never selected
    # unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # --- Heuristic Parameters (tuned based on problem specifics) ---
    # These values assume item sizes and capacities are scaled such that a
    # typical bin capacity is around 1.0. Adjust if your problem domain uses
    # different scales (e.g., if bin capacity is 1000, these thresholds
    # should be proportionally larger).
    SMALL_GAP_THRESHOLD = 0.05  # A remaining capacity (gap) less than this
                                # but greater than zero is considered 'awkward'.
                                # This prevents leaving slivers that are too
                                # small for subsequent items.
    SMALL_GAP_PENALTY = 100.0   # A large penalty applied to bins that would
                                # result in an awkward gap. This value ensures
                                # that leaving an awkward gap is significantly
                                # less desirable than leaving a larger,
                                # potentially more useful gap.
    # --- End Heuristic Parameters ---

    # Create a boolean mask for bins where the item actually fits
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the base priority using the Best Fit principle:
    # We want to minimize the remaining capacity, so we use its negative as the priority.
    # A smaller positive remaining capacity (e.g., 0.1) results in a larger
    # (less negative) priority score (e.g., -0.1). A perfect fit (0 remaining)
    # results in the highest base priority (0.0).
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # Identify "awkward gaps": remaining capacity is positive but falls
    # below the defined SMALL_GAP_THRESHOLD.
    # We exclude perfect fits (potential_remaining_cap == 0) from being penalized.
    awkward_gap_mask = (potential_remaining_cap > 0) & \
                       (potential_remaining_cap < SMALL_GAP_THRESHOLD)

    # Apply the additional penalty for awkward gaps to the priorities of
    # the bins that would create such gaps and where the item actually fits.
    # (The `fitting_bins_mask` ensures we only modify priorities of valid bins).
    penalized_bins_mask = fitting_bins_mask & awkward_gap_mask
    if np.any(penalized_bins_mask): # Only apply if there are such bins
        priorities[penalized_bins_mask] -= SMALL_GAP_PENALTY

    return priorities
```
