```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin for online Bin Packing.

    This function enhances a "Best Fit" like heuristic based on the provided reflection:
    1. Prioritizes perfect fits very strongly.
    2. Penalizes "awkward gaps" (small, non-zero remaining capacities) to discourage
       leaving very small, potentially unusable spaces, thereby minimizing fragmentation.
    3. For other valid fits, it follows a "Best Fit" strategy, preferring smaller remaining capacities.
    Bins where the item does not fit are given an extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # This ensures bins where the item does not fit will never be selected
    # unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Extract potential remaining capacities for only the fitting bins.
    fitting_pot_rem_cap = potential_remaining_cap[fitting_bins_mask]

    # Heuristic parameters for defining and penalizing "awkward gaps".
    # These values are chosen assuming item sizes and bin capacities are normalized,
    # for instance, to a 0-1 scale. Tuning might be necessary for specific problem instances.
    # AWKWARD_THRESHOLD: Any positive remaining capacity less than or equal to this
    # is considered an "awkward gap". This aims to identify very small, potentially
    # unusable leftover spaces.
    AWKWARD_THRESHOLD = 0.05

    # AWKWARD_PENALTY: A constant penalty applied to bins that result in an
    # "awkward gap". This penalty should be large enough to make a slightly
    # larger, non-awkward remaining capacity preferable to a smaller, awkward one.
    # For example, if a bin leaves 0.04 (awkward) and another leaves 0.06 (not awkward),
    # this penalty can make the 0.06 option better.
    AWKWARD_PENALTY = 0.1

    # 1. Perfect fits: Prioritize highest (np.inf)
    # This strongly rewards immediate optimal placement and perfectly utilized bins.
    perfect_fit_mask = (fitting_pot_rem_cap == 0)
    priorities[fitting_bins_mask][perfect_fit_mask] = np.inf

    # 2. Awkward gaps: Penalize
    # These are positive, but very small, remaining capacities (0 < rem_cap <= AWKWARD_THRESHOLD).
    # The score is -(remaining_capacity) - AWKWARD_PENALTY.
    # The penalty pushes down the priority of such bins, discouraging their selection
    # over bins that result in larger, more useful remaining capacities, or perfect fits.
    # Within this category, smaller remainders are still preferred (due to -rem_cap part).
    awkward_gap_mask = (fitting_pot_rem_cap > 0) & (fitting_pot_rem_cap <= AWKWARD_THRESHOLD)
    priorities[fitting_bins_mask][awkward_gap_mask] = -fitting_pot_rem_cap[awkward_gap_mask] - AWKWARD_PENALTY

    # 3. Other fits (non-awkward positive remaining capacity): Best Fit logic
    # These are remaining capacities greater than AWKWARD_THRESHOLD.
    # The score is simply -(remaining_capacity), which implements the Best Fit strategy
    # (minimizing the remaining capacity, thus maximizing the current bin fill).
    other_fit_mask = (fitting_pot_rem_cap > AWKWARD_THRESHOLD)
    priorities[fitting_bins_mask][other_fit_mask] = -fitting_pot_rem_cap[other_fit_mask]

    return priorities
```
