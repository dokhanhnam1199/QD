```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" heuristic, prioritizing bins
    that would result in the smallest remaining capacity after the item is placed.
    It directly translates the goal of minimizing "wasted space" (remaining capacity)
    into a priority score where a smaller remaining capacity yields a higher score.
    Bins where the item cannot fit are assigned an extremely low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value here means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the priority.
    # To minimize `potential_remaining_cap` (wasted space), we maximize its negative.
    # - A perfect fit (potential_remaining_cap = 0) will result in a priority of 0 (highest for fitting bins).
    # - A bin leaving a small amount of space (e.g., potential_remaining_cap = 0.1)
    #   will get a priority of -0.1.
    # - A bin leaving more space (e.g., potential_remaining_cap = 0.5)
    #   will get a priority of -0.5.
    # This naturally orders bins such that the "best fit" (smallest remaining capacity)
    # has the highest (least negative) priority score among the valid options.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    return priorities
```
