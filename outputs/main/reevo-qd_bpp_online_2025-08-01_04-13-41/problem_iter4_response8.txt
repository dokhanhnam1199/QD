```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements a "Best Fit by Proportion Utilized" strategy.
    It prioritizes bins where the item will consume the largest *proportion*
    of the bin's *current remaining capacity*. This directly focuses on
    maximizing the 'snugness' of the fit within the available space of each bin.

    The score is calculated as `item_size / bins_remain_cap`.

    - Bins where the item does not fit are assigned a very low (negative infinity) priority.
    - A perfect fit (bins_remain_cap == item) yields a score of 1.0, meaning
      the item utilizes 100% of the available space. This is the highest possible score.
    - A snug fit (e.g., item_size is 90% of bins_remain_cap) yields a score of 0.9.
    - A loose fit (e.g., item_size is 10% of bins_remain_cap) yields a score of 0.1.

    This approach is an improvement over `priority_v1` by offering a more direct
    and intuitive interpretation of "best fit" through bin utilization. While
    `priority_v1` minimizes fractional waste *relative to the item's size*,
    `priority_v2` maximizes the fractional utilization *of the bin's current
    remaining capacity*. Both strategies aim for "snug fits," but `priority_v2`
    provides scores that are bounded (0 to 1 for valid placements) and
    directly reflect the percentage of the available bin space that will be filled.
    This helps to "close off" bins more effectively and reduce overall fragmentation.

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
              Typically, item sizes in Bin Packing are positive.
        bins_remain_cap: Array of current remaining capacities for each bin.
                         Must be non-negative.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    # Initialize priorities. Bins that cannot fit the item will retain a very low priority.
    # Using negative infinity ensures these bins are never chosen unless no other option exists,
    # implicitly leading to opening a new bin by the higher-level packing algorithm.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Handle the edge case where item size is non-positive.
    # Typically, item sizes in BPP are positive.
    if item <= 0:
        if item == 0:
            # If item is zero, it occupies no space. It can conceptually fit into any bin
            # that has non-negative capacity. As it utilizes 0% of the space, its score is 0.0.
            priorities[bins_remain_cap >= item] = 0.0
        # If item < 0, it's an invalid input for BPP; priorities remain -np.inf.
        return priorities

    # Find which bins the item can fit into
    fits_mask = bins_remain_cap >= item

    # Calculate the proportion of the bin's remaining capacity that the item will fill.
    # We maximize this ratio.
    # For bins where the item fits (fits_mask is True) and item > 0,
    # bins_remain_cap will be at least 'item', thus ensuring it's positive and avoiding division by zero.
    priorities[fits_mask] = item / bins_remain_cap[fits_mask]

    return priorities
```
