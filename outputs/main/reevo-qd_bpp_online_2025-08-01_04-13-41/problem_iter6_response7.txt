```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" heuristic, leveraging bin capacities
    to minimize the remaining space after placing an item. It prioritizes
    placing the item into the bin that, after the item is placed, would have
    the smallest remaining capacity, thus improving packing density.

    The priority score is calculated such that a tighter fit (smaller
    remaining capacity) results in a higher score. Bins where the item
    does not fit are given an extremely low (negative infinity) priority.
    A perfect fit (remaining capacity of 0) will receive a score of 0,
    which is the highest possible score among valid bins, while imperfect
    fits receive negative scores proportional to their remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected (e.g., using np.argmax).
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value indicates the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities for all bins to a very low value.
    # This ensures that bins where the item cannot fit are never selected
    # unless no other bin can accommodate the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify bins where the item actually fits
    # (i.e., where potential_remaining_cap is non-negative).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For all bins where the item fits, assign a priority score.
    # To implement Best Fit (minimize remaining capacity) using a
    # "highest score wins" logic (e.g., with np.argmax), we negate
    # the potential remaining capacity.
    # - A perfect fit (remaining_cap = 0) gets a score of 0.
    # - A small positive remaining_cap (tight fit) gets a small negative score
    #   (e.g., -5 for 5 units remaining).
    # - A large positive remaining_cap (loose fit) gets a large negative score
    #   (e.g., -50 for 50 units remaining).
    # This way, 0 is the highest score, and less negative scores are preferred.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    return priorities
```
