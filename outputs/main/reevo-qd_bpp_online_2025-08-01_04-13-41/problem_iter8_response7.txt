```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" strategy, augmented with strategic
    penalties and rewards to optimize for future efficiency and minimize waste.
    It strongly prioritizes perfect fits or nearly full bins. It penalizes
    leaving awkwardly-sized 'medium' gaps and offers a slight reward for
    leaving very large remaining capacities that can still accommodate
    future large items, thus keeping certain bins "open" strategically.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The maximum capacity of a single bin. Defaults to 1.0,
                      assuming normalized item and bin sizes.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value indicates the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # -np.inf ensures that bins where the item does not fit are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0
    
    # Extract the potential remaining capacities only for the bins where the item fits.
    fitting_potential_remaining_cap = potential_remaining_cap[fitting_bins_mask]

    # --- Base Score: "Best Fit" Principle ---
    # We want to minimize the remaining capacity for the current item.
    # A smaller positive remaining capacity results in a larger (less negative) priority score.
    # A perfect fit (0 remaining capacity) receives a score of 0, which is the highest base score.
    base_scores = -fitting_potential_remaining_cap

    # --- Strategic Adjustments for Future Efficiency ---

    # Define thresholds for "medium" and "large" remaining capacities relative to bin_capacity.
    # These values are tunable parameters.
    medium_gap_lower_threshold = 0.15 * bin_capacity # e.g., 15% of bin capacity
    medium_gap_upper_threshold = 0.45 * bin_capacity # e.g., 45% of bin capacity
    large_gap_lower_threshold  = 0.60 * bin_capacity # e.g., > 60% of bin capacity

    # 1. Penalty for "Medium" Gaps:
    #    These are gaps that are too small for most large items but too large
    #    to be considered "nearly full". Such gaps can lead to inefficient
    #    space utilization later.
    penalty_value = bin_capacity * 0.75 # A significant penalty relative to bin_capacity.
                                        # This value should be large enough to make
                                        # a medium-gap option less attractive than
                                        # a slightly worse Best Fit option outside this range.

    medium_gap_mask = (fitting_potential_remaining_cap > medium_gap_lower_threshold) & \
                      (fitting_potential_remaining_cap < medium_gap_upper_threshold)
    
    base_scores[medium_gap_mask] -= penalty_value

    # 2. Reward for "Very Large" Gaps:
    #    Slightly prefer bins that would remain largely empty. This strategy aims
    #    to keep certain bins "open" to accommodate future larger items,
    #    potentially reducing the total number of bins used in the long run.
    #    This reward should be small enough that perfect/near-perfect fits (base scores close to 0)
    #    are still generally preferred over simply keeping a bin mostly empty.
    reward_value = bin_capacity * 0.10 # A small positive reward.

    large_gap_mask = fitting_potential_remaining_cap >= large_gap_lower_threshold

    # Apply the reward only if the large gap does NOT fall into the medium gap penalty zone.
    # This prevents conflicting adjustments if thresholds were to overlap.
    large_gap_and_not_medium_mask = large_gap_mask & ~medium_gap_mask
    base_scores[large_gap_and_not_medium_mask] += reward_value

    # Assign the calculated scores to the respective fitting bins in the main priorities array.
    priorities[fitting_bins_mask] = base_scores

    return priorities
```
