```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic, an evolution of "Best Fit Relative Waste", prioritizes bins
    based on how effectively the item "fills" the remaining space. It assigns
    a distinct, high positive score to perfect fits, a positive score for other
    snug fits, and a very low (negative infinity) score for bins where the item does not fit.

    The scoring logic is:
    1. For bins where the item does not fit: A very low priority (-np.inf).
    2. For bins where the item fits perfectly (remaining_capacity == item):
       A high, distinct priority score (e.g., 1.0), clearly indicating the best possible fit.
    3. For bins where the item fits but not perfectly:
       The score is `item / current_bin_remaining_capacity`. This "fullness ratio"
       aims to maximize the proportion of the bin's *currently available space*
       that the item would occupy. A higher ratio (closer to 1.0) indicates
       a "snugger" fit relative to the bin's current state.

    This approach explicitly values perfect fits above all else. For other
    fitting scenarios, it promotes placing items into bins where they constitute
    a significant portion of the remaining capacity, effectively working
    towards "finishing off" bins or maximizing the utility of existing free space.
    This helps to minimize the "relative waste" by making the item consume a
    large fraction of the bin it is placed into.

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
              Typically, item sizes in Bin Packing are positive.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    # Initialize priorities. Bins that cannot fit the item will retain a very low priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Handle the edge case where item size is non-positive.
    if item <= 0:
        if item == 0:
            # If item is zero, it occupies no space. It can "fit" into any bin
            # that has non-negative capacity. Assign a perfect utility score.
            priorities[bins_remain_cap >= 0] = 1.0
        # If item < 0, it's typically invalid for BPP, priorities remain -np.inf.
        return priorities

    # Mask for bins where the item fits
    fits_mask = bins_remain_cap >= item

    # Create a precise mask for perfect fits (considering float precision)
    # A small epsilon can be used if `item` and `bins_remain_cap` are results of calculations.
    # Here, `np.isclose` is generally preferred for float comparisons.
    perfect_fit_mask = np.isclose(bins_remain_cap, item)

    # 1. Assign priority for perfect fits
    # This ensures that perfect fits always receive the highest possible score.
    priorities[perfect_fit_mask] = 1.0

    # 2. Assign priority for non-perfect fits that still fit
    # Identify bins where the item fits, but not perfectly.
    non_perfect_fits_mask = fits_mask & (~perfect_fit_mask)

    if np.any(non_perfect_fits_mask):
        # Calculate the "fullness ratio": item size divided by the bin's current remaining capacity.
        # This metric quantifies how much of the bin's available space the item will consume.
        # A higher ratio indicates a "snugger" fit relative to the bin's current state.
        # Since item > 0 and these are non-perfect fits, bins_remain_cap[non_perfect_fits_mask] will be > item (and thus > 0).
        priorities[non_perfect_fits_mask] = item / bins_remain_cap[non_perfect_fits_mask]
        
        # Scores for non-perfect fits will be strictly between 0 and 1 (exclusive of 1).
        # This maintains the clear hierarchy where perfect fits (1.0) are top.

    return priorities
```
