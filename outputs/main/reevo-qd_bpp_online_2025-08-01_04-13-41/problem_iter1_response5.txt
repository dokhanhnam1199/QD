```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation uses a "Target Fit" heuristic. It aims to select
    a bin such that, after placing the item, the remaining capacity is
    as close as possible to a predefined 'target_remaining_capacity'.

    This approach is "creative" in that it generalizes Best Fit (when
    target_remaining_capacity is 0) and can be tuned to prefer leaving
    a specific amount of space, potentially to accommodate items of a
    certain size that might arrive later, or to avoid creating tiny,
    unusable fragments of space.

    Bins where the item does not fit are assigned a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, np.NINF, dtype=float)

    # Define the target remaining capacity. This is a crucial parameter for this heuristic.
    # It represents the ideal amount of space we want to leave in a bin after placing an item.
    # For example:
    # - If set to 0.0, this heuristic degenerates to a standard Best Fit.
    # - If set to a small positive value (e.g., 0.1), it aims to leave space for a typical small item.
    # - This value could ideally be determined by analyzing the distribution of item sizes,
    #   but here it is set as a fixed heuristic parameter.
    target_remaining_capacity = 0.1  # Example: aim to leave 0.1 units of space in a bin

    # Calculate the hypothetical remaining capacity if the item were placed in each bin
    hypothetical_remaining_after_placement = bins_remain_cap - item

    # Create a mask for bins where the item actually fits (remaining capacity must be non-negative)
    fits_mask = hypothetical_remaining_after_placement >= 0

    # For bins where the item fits, calculate the priority score.
    # We want to minimize the absolute difference between 'hypothetical_remaining_after_placement'
    # and our 'target_remaining_capacity'.
    # Therefore, the priority score is the negative of this absolute difference:
    # A score closer to 0 (i.e., less negative) indicates a better fit towards the target.
    # A perfect match to 'target_remaining_capacity' will yield a score of 0 (the highest possible).
    
    # Calculate scores only for bins where the item fits
    valid_remaining = hypothetical_remaining_after_placement[fits_mask]
    
    # Calculate the priority score: negative absolute difference to the target
    scores = -np.abs(valid_remaining - target_remaining_capacity)
    
    priorities[fits_mask] = scores

    return priorities
```
