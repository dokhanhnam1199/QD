{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function implements a \"Best Fit\" like heuristic, similar to v1,\n    but re-scales the priority scores to be non-negative, where a higher\n    score indicates a better fit (i.e., less remaining capacity).\n\n    It prioritizes bins that, after the item is placed, would have the\n    smallest remaining capacity. Bins where the item does not fit are\n    given an extremely low (negative infinity) priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        The bin with the highest score will be selected.\n    \"\"\"\n    # Calculate the remaining capacity if the item were placed in each bin.\n    # A negative value means the item does not fit.\n    potential_remaining_cap = bins_remain_cap - item\n\n    # Initialize priorities to a very low value for all bins.\n    # Using -np.inf ensures that bins where the item does not fit will never\n    # be selected by argmax, unless no bin can fit the item.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).\n    fitting_bins_mask = potential_remaining_cap >= 0\n\n    # For fitting bins, set the priority.\n    # We want to minimize the remaining capacity (potential_remaining_cap).\n    # To convert this into a positive score where higher is better:\n    # We find the maximum possible remaining capacity among the bins where the item fits.\n    # Then, we subtract the actual remaining capacity from this maximum.\n    # This ensures that a perfect fit (remaining_cap = 0) gets the highest score,\n    # and the \"worst\" fit among eligible bins (largest remaining_cap) gets a score of 0.\n    if np.any(fitting_bins_mask):\n        # Get remaining capacities for bins where the item fits\n        fitting_rem_caps = potential_remaining_cap[fitting_bins_mask]\n\n        # Find the maximum remaining capacity among these fitting bins.\n        # This serves as a baseline for scaling the priorities.\n        max_fitting_rem_cap = np.max(fitting_rem_caps)\n\n        # Calculate priority scores for fitting bins:\n        # A smaller `fitting_rem_caps` (tighter fit) results in a larger\n        # `max_fitting_rem_cap - fitting_rem_caps` value (higher priority).\n        # A perfect fit (fitting_rem_caps = 0) gets `max_fitting_rem_cap`.\n        # The worst fitting bin among the valid ones gets `0`.\n        priorities[fitting_bins_mask] = max_fitting_rem_cap - fitting_rem_caps\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits to minimize wasted space. Consider item size when selecting bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}