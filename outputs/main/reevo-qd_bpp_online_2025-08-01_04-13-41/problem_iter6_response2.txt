```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin for online Bin Packing.

    This function implements a refined "Best Fit" strategy, emphasizing tight fits
    while robustly penalizing "awkward" remaining capacities to minimize future waste.
    The goal is to encourage leaving either very small (nearly full) or very large
    (mostly empty) spaces, avoiding mid-range, hard-to-fill gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.
        bin_capacity: The total capacity of a single bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative) will be selected.
    """
    # Calculate the remaining capacity of each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities. Bins where the item does not fit get the lowest possible priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, assign an initial priority based on the "Best Fit" principle.
    # We want to minimize the remaining capacity, so we use its negative as the score.
    # A smaller positive remainder (e.g., 0.01) results in a higher (less negative)
    # priority score (-0.01). A perfect fit (0 remaining) gets a score of 0, which is
    # the highest possible initial score, reflecting the "prioritize tight fits" goal.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # --- Apply Penalty for "Awkward" Remaining Capacities ---
    # "Awkward" gaps are those that are too large to be considered a tight fit,
    # but too small to be useful for accommodating future larger items easily.
    # These thresholds are relative to the bin_capacity and can be tuned.
    # For example, avoid leaving 15% to 60% of the bin capacity remaining.
    awkward_gap_lower_threshold = 0.15 * bin_capacity
    awkward_gap_upper_threshold = 0.60 * bin_capacity

    # Define the magnitude of the penalty. It should be significant enough to
    # strongly deter selecting a bin that would result in an awkward gap.
    # Scaling the penalty with item size and a base from bin capacity makes it more robust.
    # For instance, a penalty could be 1.5 times the item size plus 10% of bin capacity.
    penalty_magnitude = (1.5 * item) + (0.1 * bin_capacity)

    # Identify bins that are fitting AND would result in an awkward remaining capacity.
    penalize_bins_mask = fitting_bins_mask & \
                         (potential_remaining_cap > awkward_gap_lower_threshold) & \
                         (potential_remaining_cap < awkward_gap_upper_threshold)

    # Subtract the penalty from the priorities of these "awkward" bins.
    priorities[penalize_bins_mask] -= penalty_magnitude

    return priorities
```
