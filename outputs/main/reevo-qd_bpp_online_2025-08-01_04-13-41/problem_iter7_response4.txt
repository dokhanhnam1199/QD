```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, incorporating
    best-fit, perfect fit bonuses, and awkward gap penalties.

    This function extends the "Best Fit" heuristic by:
    1. Strongly rewarding perfect fits (leaving exactly 0 remaining capacity).
    2. Penalizing very small, non-zero remaining capacities, which are deemed "awkward gaps"
       that are unlikely to be useful for future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins where the item doesn't fit.
    # Using -np.inf ensures that such bins are never selected unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (potential remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the base priority using a "Best Fit" approach.
    # We want to minimize the remaining capacity, so we use its negative as the priority score.
    # A smaller positive remaining capacity (e.g., 0.1) results in a larger (less negative) priority score (-0.1).
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # --- Introduce strategic adjustments for long-term packing efficiency ---

    # Define constants for bonuses and penalties. These values are heuristic parameters
    # and might need tuning based on specific problem instances.
    PERFECT_FIT_BONUS = 1000.0  # A large positive bonus to ensure perfect fits are top priority.
    # Define a threshold for what constitutes a "very small" awkward gap.
    # A small absolute value is used here, implying items and capacities are in a certain range.
    SMALL_GAP_THRESHOLD = 0.01
    # A penalty to make bins resulting in awkward gaps less desirable than pure Best-Fit suggests.
    SMALL_GAP_PENALTY = 50.0

    # Using a small epsilon for floating point comparisons to identify near-zero values.
    # This accounts for potential floating point inaccuracies when checking for perfect fits.
    epsilon = 1e-9

    # 1. Reward perfect fits:
    # Identify bins where the remaining capacity is effectively zero after placing the item.
    perfect_fit_mask = np.abs(potential_remaining_cap) < epsilon

    # Apply the perfect fit bonus only to bins that fit the item and result in a perfect fit.
    perfect_fitting_bins_mask = fitting_bins_mask & perfect_fit_mask
    priorities[perfect_fitting_bins_mask] += PERFECT_FIT_BONUS

    # 2. Penalize awkward small gaps:
    # Identify bins where the remaining capacity is positive but very small (awkward).
    # This means 0 < remaining capacity < SMALL_GAP_THRESHOLD.
    awkward_gap_mask = (potential_remaining_cap > epsilon) & (potential_remaining_cap < SMALL_GAP_THRESHOLD)

    # Apply the small gap penalty only to bins that fit the item and result in an awkward gap.
    awkward_fitting_bins_mask = fitting_bins_mask & awkward_gap_mask
    priorities[awkward_fitting_bins_mask] -= SMALL_GAP_PENALTY

    return priorities
```
