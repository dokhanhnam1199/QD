```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function extends the "Best Fit" heuristic (similar to v1) by
    explicitly aiming to minimize fragmentation and maximize bin utilization.
    It prioritizes bins based on a composite score:
    1.  **Primary Score (Best Fit):** Bins that result in the smallest remaining
        capacity after placing the item are given higher priority. This directly
        maximizes the utilization of the chosen bin. This is achieved by
        calculating `max_fitting_rem_cap - potential_remaining_cap`, where a
        smaller `potential_remaining_cap` yields a higher positive score.
    2.  **Secondary Score (Anti-Fragmentation Bias):** A small positive bonus
        is added to the score of bins that are *already partially filled*
        (i.e., not completely empty) and can accommodate the item. This encourages
        the system to fill existing bins before "opening" new ones (represented
        as completely empty bins in the `bins_remain_cap` array), thereby
        minimizing the number of partially filled bins and overall fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin. It is
                         assumed that if there are any completely empty bins
                         available, their capacity will be represented as the
                         maximum value in this array.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected. Bins where the item
        does not fit are assigned a score of -np.inf.
    """
    # Initialize priorities to a very low value for all bins.
    # This ensures that bins where the item does not fit will never be selected
    # unless no bin can fit the item at all.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value indicates the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    if np.any(fitting_bins_mask):
        # Extract the relevant remaining capacities for fitting bins.
        fitting_rem_caps = potential_remaining_cap[fitting_bins_mask]

        # Calculate the Best Fit component of the priority score.
        # This is similar to v1: maximize (max_rem_cap - current_rem_cap).
        # A smaller potential_remaining_cap leads to a higher score.
        max_fitting_rem_cap = np.max(fitting_rem_caps)
        best_fit_scores = max_fitting_rem_cap - fitting_rem_caps

        # Determine the maximum possible capacity of a bin. This is used to
        # identify if a bin is currently (before placing the item) completely empty.
        # This assumes that a truly empty bin's capacity is represented in the array
        # as the global maximum remaining capacity.
        MAX_BIN_CAPACITY = np.max(bins_remain_cap)

        # Identify which of the fitting bins are currently completely empty.
        is_empty_before_item = (bins_remain_cap[fitting_bins_mask] == MAX_BIN_CAPACITY)

        # Apply a small bonus to bins that are already partially filled.
        # This acts as an anti-fragmentation measure by discouraging the use of
        # new, empty bins when a suitable partially-filled bin exists,
        # especially if Best Fit scores are very close.
        # The bonus should be small enough not to override a significantly better
        # Best Fit from an empty bin. A value like 0.001 is typically safe,
        # as `best_fit_scores` can range up to `MAX_BIN_CAPACITY`.
        partial_fill_bonus = 0.001

        # Initialize bias scores to zero for all fitting bins.
        bias_scores = np.zeros_like(best_fit_scores)
        # Add the bonus to bins that are NOT empty before the item is placed.
        bias_scores[~is_empty_before_item] = partial_fill_bonus

        # Combine the Best Fit score with the anti-fragmentation bias.
        priorities[fitting_bins_mask] = best_fit_scores + bias_scores

    return priorities
```
