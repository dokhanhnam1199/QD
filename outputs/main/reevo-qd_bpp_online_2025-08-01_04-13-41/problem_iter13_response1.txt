```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function is an improvement over a basic "Best Fit" heuristic (like priority_v1).
    It aims to:
    1. Strongly reward perfect fits, ensuring they are always preferred.
    2. Generally prioritize snug fits (minimizing remaining capacity).
    3. Penalize "awkward" small, non-zero remaining capacities, which might be too
       small to be useful for future items and lead to fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value (-np.inf) for all bins.
    # Bins where the item does not fit will retain this priority,
    # ensuring they are never chosen unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # --- Define heuristic parameters ---
    # A large positive score to ensure perfect fits are always chosen first.
    MAX_PERFECT_FIT_SCORE = 1e9

    # Threshold for what constitutes a "small, awkward" non-zero gap.
    # This value might need tuning based on the typical range of item sizes
    # and bin capacities. For normalized sizes (0 to 1), 0.1 (10% of capacity)
    # is a reasonable starting point.
    SMALL_GAP_THRESHOLD = 0.1

    # Penalty applied to awkward small non-zero gaps. This value should be
    # significant enough to make a small awkward gap less desirable than a
    # slightly larger, non-awkward gap that standard Best Fit might rate lower.
    AWKWARD_GAP_PENALTY = 0.05 # E.g., penalizing a 0.05 remaining gap to be worse than a 0.10 one.

    # --- Apply priorities based on fit categories ---

    # Create masks for different categories of bins that can fit the item
    fits_mask = potential_remaining_cap >= 0
    perfect_fit_mask = (potential_remaining_cap == 0)
    non_perfect_fit_mask = (potential_remaining_cap > 0)

    # 1. Assign highest priority to perfect fits (remaining capacity == 0).
    # This mask combines `fits_mask` and `perfect_fit_mask` to ensure we only
    # target bins that actually fit the item perfectly.
    mask_perfect = fits_mask & perfect_fit_mask
    priorities[mask_perfect] = MAX_PERFECT_FIT_SCORE

    # 2. For non-perfect fits (remaining capacity > 0):
    mask_non_perfect = fits_mask & non_perfect_fit_mask

    if np.any(mask_non_perfect): # Only proceed if there are bins with non-perfect fits
        # Start with a standard "Best Fit" score for all non-perfect fitting bins:
        # Prioritize bins that leave less remaining capacity (smaller r means higher score, less negative).
        priorities[mask_non_perfect] = -potential_remaining_cap[mask_non_perfect]

        # Now, identify the subset of these non-perfect fits that result in "awkward" small gaps.
        # These are positive remaining capacities that are less than or equal to the threshold.
        mask_awkward_penalty = mask_non_perfect & (potential_remaining_cap > 0) & (potential_remaining_cap <= SMALL_GAP_THRESHOLD)

        # Apply the penalty to the scores of these "awkward" gaps.
        # By subtracting a positive penalty, we make the (negative) priority score
        # even more negative (i.e., less desirable).
        priorities[mask_awkward_penalty] -= AWKWARD_GAP_PENALTY

    return priorities
```
