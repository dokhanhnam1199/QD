```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an enhanced "Best Fit" heuristic for online Bin Packing,
    aiming to minimize the total number of bins used. It strategically evaluates
    choices by:
    1. Filtering out invalid options.
    2. Prioritizing bins that minimize remaining waste.
    3. Aggressively seeking perfect fits.
    4. Introducing a nuanced tie-breaking rule for non-perfect fits.

    Strategic Enhancements:
    - **Filter Invalid Choices**: Bins where the item size `item` exceeds the
      `bins_remain_cap` are assigned an extremely low priority (`-np.inf`),
      effectively disqualifying them from selection.
    - **Core Best Fit Logic**: For bins where the item fits, the base priority
      is derived from the negative of the `potential_remaining_cap` (i.e.,
      `bins_remain_cap - item`). This ensures that bins leaving the smallest
      amount of free space receive a higher (less negative) priority,
      aligning with the goal of compact bin utilization.
    - **Strong Perfect Fit Bonus**: A significant bonus (`PERFECT_FIT_BONUS`)
      is added to bins that achieve a perfectly zero `potential_remaining_cap`.
      This strongly encourages "finishing off" bins, as a perfect fit maximally
      utilizes space and reduces the need for new bins. This bonus is
      calibrated to always make a perfect fit the top priority over any
      non-perfect fit, regardless of its `potential_remaining_cap`.
    - **Worst Fit Tie-Breaking for Non-Perfect Fits**: When multiple non-perfect
      fitting bins result in the exact same best `potential_remaining_cap`
      (and thus the same base priority score), a very small positive perturbation
      is added based on the *original* `bins_remain_cap`. This subtly prefers
      bins that initially had more capacity among equally 'best-fitting' options.
      The rationale is to potentially keep bins with smaller initial capacities
      available for future smaller items if multiple optimal choices exist for
      the current item. This tie-breaking factor is set to be small enough
      not to override the primary Best Fit ordering or the Perfect Fit Bonus.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value. Bins where the item does not fit
    # will retain this value, making them unsuitable for selection.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the base priority according to Best Fit.
    # A smaller positive `potential_remaining_cap` (meaning a fuller bin) results
    # in a higher priority (less negative score).
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # --- Strategic Enhancement 1: Strong Perfect Fit Bonus ---
    # A bonus that ensures perfect fits are prioritized above all other fits.
    # It must be greater than the maximum possible negative score (which is
    # approximately -max_bin_capacity if all items fit).
    # A value like 1.0 is sufficient if remaining capacities are non-negative.
    PERFECT_FIT_BONUS = 1.0

    # Identify bins that achieve a perfect fit (remaining capacity is effectively zero).
    perfect_fit_mask = np.isclose(potential_remaining_cap, 0.0)

    # Apply the bonus only to bins that result in a perfect fit.
    priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # --- Strategic Enhancement 2: Worst Fit Tie-Breaking for Non-Perfect Fits ---
    # This factor is used to break ties among non-perfect best-fit candidates.
    # It's a very small value to ensure it only influences selection when primary
    # scores are identical.
    EPSILON_FOR_TIE_BREAKING = 1e-9

    # Identify bins that fit but are NOT perfect fits.
    non_perfect_fitting_bins_mask = fitting_bins_mask & (~perfect_fit_mask)

    # Among these non-perfect, fitting bins, add a small bias proportional to their
    # *original* remaining capacity. This means if two bins yield the exact same
    # 'best fit' score (same potential_remaining_cap), the one that started
    # with more room will be slightly preferred.
    priorities[non_perfect_fitting_bins_mask] += \
        EPSILON_FOR_TIE_BREAKING * bins_remain_cap[non_perfect_fitting_bins_mask]

    return priorities
```
