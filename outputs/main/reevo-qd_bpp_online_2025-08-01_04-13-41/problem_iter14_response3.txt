```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a refined "Best Fit" strategy, augmented to
    penalize placements that create "awkward" gaps (medium remaining capacity).
    The penalty is not a fixed value but varies, being strongest for gaps
    in the middle of the defined awkward range and tapering off towards its edges.
    This aims to minimize future waste and improve long-term bin utility by
    discouraging the creation of difficult-to-fill gaps that are neither
    nearly full nor large enough to easily accommodate new large items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.
        bin_capacity: The maximum capacity of a single bin. Defaults to 1.0,
                      suitable for normalized problems.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative) will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # -np.inf ensures that bins where the item does not fit are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the initial priority based on "Best Fit".
    # We want to minimize the remaining capacity, so we use its negative as the priority score.
    # A smaller positive remaining capacity (e.g., 0.05) will result in a
    # larger (less negative) priority score (e.g., -0.05). A perfect fit (0 remaining)
    # gets a score of 0, which is the highest.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # --- Augmentation: Penalize creating "awkward" gaps ---
    # Define thresholds for "awkward" gaps, relative to the BIN_CAPACITY.
    # These are tunable parameters. An awkward gap is neither very small (tight fit)
    # nor very large (leaving ample space for future items).
    awkward_gap_lower_threshold = 0.1 * bin_capacity
    awkward_gap_upper_threshold = 0.5 * bin_capacity

    # Identify fitting bins that would result in an "awkward" remaining capacity.
    # We apply the mask for fitting bins to avoid processing non-fitting ones.
    awkward_gap_mask = (potential_remaining_cap > awkward_gap_lower_threshold) & \
                       (potential_remaining_cap < awkward_gap_upper_threshold) & \
                       fitting_bins_mask

    # If no bins fall into the awkward gap range, no penalty is applied.
    if not np.any(awkward_gap_mask):
        return priorities

    # Calculate the midpoint of the awkward gap range.
    mid_awkward_gap = (awkward_gap_lower_threshold + awkward_gap_upper_threshold) / 2

    # Define the maximum penalty strength. This should be significant enough to
    # discourage awkward placements. It scales with the item size to maintain
    # proportionality across different item magnitudes.
    max_penalty_strength = item * 2.5 

    # Extract potential remaining capacities for bins falling into the awkward range.
    awkward_rem_caps = potential_remaining_cap[awkward_gap_mask]

    # Initialize a temporary array for penalties specific to the awkward bins.
    temp_penalties = np.zeros_like(awkward_rem_caps)

    # Calculate penalty for values below or at the midpoint of the awkward range.
    # The penalty increases linearly from 0 at lower_threshold to max_penalty_strength at midpoint.
    below_mid_mask = awkward_rem_caps <= mid_awkward_gap
    range_lower = mid_awkward_gap - awkward_gap_lower_threshold
    if range_lower > 0: # Avoid division by zero if thresholds are identical (unlikely for a range)
        temp_penalties[below_mid_mask] = \
            (awkward_rem_caps[below_mid_mask] - awkward_gap_lower_threshold) / range_lower

    # Calculate penalty for values above the midpoint of the awkward range.
    # The penalty decreases linearly from max_penalty_strength at midpoint to 0 at upper_threshold.
    above_mid_mask = awkward_rem_caps > mid_awkward_gap
    range_upper = awkward_gap_upper_threshold - mid_awkward_gap
    if range_upper > 0: # Avoid division by zero
        temp_penalties[above_mid_mask] = \
            (awkward_gap_upper_threshold - awkward_rem_caps[above_mid_mask]) / range_upper
    
    # Scale the calculated penalty factors by the maximum penalty strength.
    final_penalties = temp_penalties * max_penalty_strength

    # Apply the calculated penalty to the priorities of the bins within the awkward range.
    # This makes their priority score more negative, effectively making them less desirable.
    priorities[awkward_gap_mask] -= final_penalties

    return priorities
```
