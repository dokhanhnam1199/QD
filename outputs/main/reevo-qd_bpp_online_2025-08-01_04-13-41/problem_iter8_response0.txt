```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a refined "Best Fit" heuristic for online bin packing,
    emphasizing optimal space utilization and strongly preferring perfect fits.
    It assigns priority scores such that:
    1. Bins where the item does not fit are given an extremely low priority.
    2. For bins where the item fits, priority is inversely proportional to the
       remaining capacity after placement, meaning smaller remaining capacity
       yields higher priority (Best Fit principle). This maps priorities for
       non-perfect fits to a range between 0 (for very large remaining capacity)
       and 1 (for remaining capacity approaching zero).
    3. Bins that achieve a perfectly zero remaining capacity are given the
       highest possible distinct priority, ensuring they are always selected
       over any non-perfect fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Initialize priorities to a very low value. This effectively filters out
    # bins where the item cannot be placed, ensuring they are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate the remaining capacity if the item were placed in each bin.
    # A positive value means the item fits, a negative value means it doesn't.
    remaining_after_placement = bins_remain_cap - item

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    can_fit_mask = remaining_after_placement >= 0

    # Apply the core "Best Fit" logic for fitting bins:
    # Prioritize bins that leave the least remaining space.
    # Using 1.0 / (1.0 + x) maps smaller positive 'x' (remaining capacity) to
    # higher priority values (closer to 1.0), and larger 'x' to lower values
    # (closer to 0.0). This provides a positive and intuitive priority scale.
    # We only apply this to bins where the item can fit.
    priorities[can_fit_mask] = 1.0 / (1.0 + remaining_after_placement[can_fit_mask])

    # Strategic enhancement: Assign a distinctly higher priority for perfect fits.
    # This value must be greater than any priority achievable by non-perfect fits.
    # Since the maximum priority for a non-perfect fit (when remaining_after_placement
    # approaches 0) is 1.0, a value like 2.0 (or any value > 1.0) ensures this.
    PERFECT_FIT_PRIORITY = 2.0

    # Identify bins where a perfect fit is achieved.
    # We use np.isclose for float comparisons to account for potential floating point inaccuracies.
    perfect_fit_mask = np.isclose(remaining_after_placement, 0.0)

    # For perfect fits, override their priority with the distinct highest score.
    # This ensures that any bin resulting in a perfect fit will be chosen over
    # any non-perfect fit, regardless of its 'best fit' score from the previous step.
    # The `perfect_fit_mask` implicitly means `remaining_after_placement` is 0,
    # which satisfies `can_fit_mask`.
    priorities[perfect_fit_mask] = PERFECT_FIT_PRIORITY

    return priorities
```
