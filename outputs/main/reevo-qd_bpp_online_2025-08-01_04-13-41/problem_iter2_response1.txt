```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic extends the "Best Fit" strategy by prioritizing bins that,
    if the item is placed, will leave the smallest *fractional* amount of
    remaining capacity relative to the size of the item itself. This aims to
    minimize "relative waste" for each item placed, providing a more informed
    decision based on the item's own magnitude (part of the problem state).

    The score is calculated as `-(remaining_capacity_after_placement / item_size)`.

    - Bins where the item does not fit are assigned a very low (negative infinity) priority.
    - A perfect fit (remaining_capacity - item_size = 0) yields a score of 0,
      as (0 / item_size) is 0. This is the highest possible score.
    - A snug fit (e.g., remaining_capacity - item_size = 0.1 * item_size) yields
      a score of -0.1.
    - A loose fit (e.g., remaining_capacity - item_size = 1.0 * item_size) yields
      a score of -1.0.

    This approach is particularly effective when item sizes can vary significantly.
    It normalizes the "cost" of the remaining space by the item's own magnitude,
    making the heuristic more sensitive to waste proportions rather than just
    absolute waste amounts.

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
              Typically, item sizes in Bin Packing are positive.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    # Initialize priorities. Bins that cannot fit the item will retain a very low priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find which bins the item can fit into
    fits_mask = bins_remain_cap >= item

    # Handle the edge case where item size is non-positive.
    # Typically, item sizes in BPP are positive.
    if item <= 0:
        if item == 0:
            # If item is zero, it occupies no space and creates no waste.
            # It can conceptually fit into any bin that has non-negative capacity.
            # Assign a perfect fit score (0) to all bins it "fits" into,
            # indicating no relative waste.
            priorities[fits_mask] = 0.0
        else: # item < 0, which is typically invalid for bin packing
            # All priorities remain -np.inf, effectively preventing placement.
            pass
        return priorities

    # Calculate the remaining capacity after placing the item
    remainder_after_placement = bins_remain_cap[fits_mask] - item

    # For bins where the item fits, calculate the 'relative waste' score.
    # We want to minimize (remainder_after_placement / item).
    # By taking the negative of this ratio, we convert the minimization
    # problem into a maximization problem for the priority score.
    priorities[fits_mask] = -(remainder_after_placement / item)

    return priorities
```
