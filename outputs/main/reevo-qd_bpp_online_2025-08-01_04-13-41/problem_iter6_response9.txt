```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" heuristic by directly minimizing
    the remaining capacity in a bin after placing the item. It achieves
    this by assigning a higher priority score to bins that would have less
    remaining space.

    It directly leverages the item size and the current remaining capacity
    of each bin to calculate the potential fit. Bins where the item does
    not fit are given an extremely low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the priority.
    # We want to minimize the remaining capacity (potential_remaining_cap).
    # To convert this into a "highest score is best" system for argmax,
    # we negate the potential remaining capacity.
    #
    # Examples:
    # - If remaining capacity is 0 (perfect fit), priority is 0.
    # - If remaining capacity is 1, priority is -1.
    # - If remaining capacity is 10, priority is -10.
    # Since -1 > -10, this correctly prioritizes tighter fits (smaller remaining capacity).
    # A perfect fit (0 remaining) receives the highest possible priority score (0) among valid bins.
    if np.any(fitting_bins_mask):
        priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    return priorities
```
