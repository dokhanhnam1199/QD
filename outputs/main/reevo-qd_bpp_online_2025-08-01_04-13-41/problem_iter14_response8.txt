```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" heuristic for online bin packing,
    prioritizing bins that minimize wasted space and explicitly giving
    highest priority to perfect fits.

    The priority assignment strategy is:
    1. Bins where the item does not fit are assigned an extremely low priority (-inf).
    2. For bins where the item fits, the priority is calculated as the negative
       of the remaining capacity after placing the item. This means smaller
       remaining capacity (closer to zero) results in a higher (less negative) priority score.
       This directly implements the "Best Fit" principle by maximizing the "used space"
       or minimizing the "leftover space" within a bin.
    3. Bins that achieve a perfectly zero remaining capacity (perfect fit) are
       given a distinct, highest possible positive priority, ensuring they are
       always chosen over any non-perfect fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Initialize priorities to a very low value. This effectively filters out
    # bins where the item cannot be placed, ensuring they are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate the remaining capacity if the item were placed in each bin.
    # A positive value means the item fits, a negative value means it doesn't.
    remaining_after_placement = bins_remain_cap - item

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    can_fit_mask = remaining_after_placement >= 0

    # Apply the core "Best Fit" logic for fitting bins:
    # Prioritize bins that leave the least remaining space.
    # By taking the negative of the remaining_after_placement,
    # smaller positive remainders (e.g., 0.1) result in larger (less negative) scores (-0.1),
    # while larger remainders (e.g., 5.0) result in smaller (more negative) scores (-5.0).
    priorities[can_fit_mask] = -remaining_after_placement[can_fit_mask]

    # Strategic enhancement: Assign a distinctly higher priority for perfect fits.
    # This value must be greater than any priority achievable by non-perfect fits.
    # Since the highest non-perfect fit score (for `remaining_after_placement` just above 0)
    # is just below 0 (e.g., -0.001), a value like 1.0 (or any value > 0) ensures this.
    PERFECT_FIT_PRIORITY = 1.0

    # Identify bins where a perfect fit is achieved.
    # We use np.isclose for float comparisons to account for potential floating point inaccuracies.
    perfect_fit_mask = np.isclose(remaining_after_placement, 0.0)

    # For perfect fits, override their priority with the distinct highest score.
    # This ensures that any bin resulting in a perfect fit will be chosen over
    # any non-perfect fit, regardless of its 'best fit' score from the previous step.
    priorities[perfect_fit_mask] = PERFECT_FIT_PRIORITY

    return priorities
```
