{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic implements a variation of the \"Best Fit\" strategy for online bin packing.\n    It prioritizes bins that, if the item is placed, will leave the smallest amount of\n    remaining capacity (i.e., the item fits most \"snugly\"). Bins where the item does not\n    fit are assigned a very low (negative infinity) priority.\n\n    The score is calculated as `-(remaining_capacity - item_size)`.\n    A perfect fit (remaining_capacity - item_size = 0) yields a score of 0,\n    which is the highest possible score among bins that fit the item.\n    A looser fit (e.g., remaining_capacity - item_size = 5) yields a negative score (-5),\n    making it less preferred than a tighter fit (-2).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        The bin with the highest score is the most preferred.\n    \"\"\"\n    # Initialize priorities. Bins that cannot fit the item will retain a very low priority.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Find which bins the item can fit into\n    fits_mask = bins_remain_cap >= item\n\n    # For bins where the item fits, calculate the 'tightness' score.\n    # We want to minimize (bins_remain_cap - item) among fitting bins.\n    # By taking the negative of this difference, we convert the minimization\n    # problem into a maximization problem for the priority score.\n    # E.g., a perfect fit (diff=0) gets score 0.\n    # A tight fit (diff=2) gets score -2.\n    # A loose fit (diff=10) gets score -10.\n    # Maximize -> choose 0, then -2, then -10.\n    priorities[fits_mask] = -(bins_remain_cap[fits_mask] - item)\n\n    return priorities\n\n[Reflection]\nLeverage problem state to make informed decisions; prioritize snug fits to minimize waste.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}