```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an improved "Best Fit" like heuristic.
    It prioritizes bins that, after the item is placed, would have the
    smallest remaining capacity (i.e., leaving the least 'waste').
    Beyond this Best-Fit base, it strategically rewards perfect fits
    and applies a nuanced penalty for creating awkward, small, non-zero gaps.
    The penalty is scaled: smaller gaps within the 'small gap' range (closer to zero)
    are penalized less severely, while gaps closer to the 'small gap threshold'
    receive a proportionally higher penalty, as they are considered more 'awkward'
    or less useful for future items. This approach aims to prevent excessively
    penalizing nearly-perfect fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Define constants for strategic weighting. These values are heuristics
    # and may need tuning based on the typical range of item sizes and bin capacities.
    # A significant bonus for leaving exactly zero capacity, making it the highest priority.
    PERFECT_FIT_BONUS = 100.0
    # The maximum penalty to apply for creating an awkward small gap.
    # This value determines the 'strength' of the penalty.
    MAX_SMALL_GAP_PENALTY = -50.0
    # The threshold below which a non-zero remaining capacity is considered "small" and awkward.
    # For instance, if item/bin sizes are typically between 0 and 1, 0.1 represents 10% of capacity.
    SMALL_GAP_THRESHOLD = 0.1
    # A tiny epsilon to prevent division by zero or floating point issues when SMALL_GAP_THRESHOLD is zero.
    EPSILON = 1e-9

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Bins where the item does not fit will remain at -np.inf, ensuring they are not selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Extract potential remaining capacities only for the bins where the item fits.
    fitting_rem_cap = potential_remaining_cap[fitting_bins_mask]

    # 1. Base Best-Fit Score:
    # We want to minimize the remaining capacity (fitting_rem_cap),
    # so we use its negative as the priority score. A smaller positive
    # remaining capacity (e.g., 1.0) results in a larger (less negative)
    # priority score (e.g., -1.0).
    fitting_priorities = -fitting_rem_cap

    # 2. Apply Perfect Fit Bonus:
    # Identify bins where the item fits exactly, leaving zero remaining capacity.
    # These are highly rewarded to ensure they are picked over other "Best Fit" options.
    perfect_fit_mask = (fitting_rem_cap == 0)
    fitting_priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Apply Nuanced Small Gap Penalty:
    # Identify bins that would be left with a small, non-zero remaining capacity.
    # These gaps are penalized as they can be "awkward" or hard to utilize efficiently later.
    # The condition `fitting_rem_cap > 0` ensures perfect fits are not penalized here.
    small_gap_mask = (fitting_rem_cap > 0) & (fitting_rem_cap < SMALL_GAP_THRESHOLD)

    # Calculate a scaled penalty. Gaps closer to SMALL_GAP_THRESHOLD (i.e., larger within the 'small' range)
    # receive a proportionally higher penalty, making them less attractive.
    # This means a tiny gap (e.g., 0.001) is penalized much less than a gap near the threshold (e.g., 0.09).
    if SMALL_GAP_THRESHOLD > EPSILON:
        # Scale the penalty based on how close the gap is to the threshold.
        # A gap of 0.01 with a threshold of 0.1 gets (0.01/0.1) = 0.1 * MAX_SMALL_GAP_PENALTY
        # A gap of 0.09 with a threshold of 0.1 gets (0.09/0.1) = 0.9 * MAX_SMALL_GAP_PENALTY
        scaled_penalty_factor = (fitting_rem_cap[small_gap_mask] / (SMALL_GAP_THRESHOLD + EPSILON))
        fitting_priorities[small_gap_mask] += MAX_SMALL_GAP_PENALTY * scaled_penalty_factor
    else:
        # If threshold is effectively zero, any non-zero small gap gets the full penalty.
        fitting_priorities[small_gap_mask] += MAX_SMALL_GAP_PENALTY

    # Assign the calculated priorities back to the main priorities array for fitting bins.
    priorities[fitting_bins_mask] = fitting_priorities

    return priorities
```
