```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns a priority score for each bin based on a "future utility" strategy for online Bin Packing.

    This function extends the "Best Fit" heuristic by applying a nuanced scoring system
    that considers the future utility of the remaining bin capacity after placing an item.
    It aims to:
    1. Highly prioritize perfect or near-perfect fits to maximize bin utilization.
    2. Give good priority to "Best Fit" choices (tight fits) that leave small, but non-zero, remainders.
    3. Significantly penalize "medium" sized remaining gaps, as these are often hard to fill
       with subsequent items and can lead to wasted space.
    4. Provide a moderate bonus for placing small items into largely empty bins (akin to "Worst Fit"),
       preserving large contiguous spaces for future larger items and maintaining flexibility.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
        Bins where the item does not fit will have a score of -np.inf.
    """
    # In many Bin Packing Problems, the bin capacity is normalized to 1.0.
    # If your problem uses a different capacity (e.g., 100), define it here
    # or pass it as an explicit argument.
    BIN_CAPACITY = 1.0

    # Calculate the remaining capacity if the item were placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value. Bins where the item does not fit
    # (resulting in negative potential_remaining_cap) will retain this value and
    # thus will not be selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # If no bin fits the item, return the initialized priorities (all -inf for fitting bins).
    if not np.any(fitting_bins_mask):
        return priorities

    # Extract potential remaining capacities for only the bins where the item fits.
    fitting_potential_rem_cap = potential_remaining_cap[fitting_bins_mask]

    # --- Tunable Parameters for Prioritization ---
    # These values define the thresholds for different types of remaining capacities
    # and the scores associated with them. Adjust these to fine-tune the heuristic.

    # Threshold for what's considered a "perfect" or "near-perfect" fit.
    PERFECT_FIT_EPSILON = 1e-6 * BIN_CAPACITY

    # Thresholds for the "medium" awkward gap region. This range is discouraged.
    MEDIUM_GAP_START = 0.15 * BIN_CAPACITY
    MEDIUM_GAP_END = 0.45 * BIN_CAPACITY

    # Threshold for what's considered a "large" remaining capacity, indicating flexibility.
    # Placing small items here is encouraged to preserve large chunks of space.
    LARGE_GAP_START = 0.65 * BIN_CAPACITY

    # Score components (higher value means higher priority for selection)
    SCORE_PERFECT_FIT = 100.0          # Highest priority for exact fits
    SCORE_BEST_FIT_BASE = 50.0         # Base score for tight, non-perfect fits
    SCORE_BEST_FIT_GRADIENT = 10.0     # How much the score decreases as remaining cap grows in BF zone
    SCORE_WORST_FIT_BASE = 5.0         # Base score for large remaining capacity (flexibility)
    SCORE_WORST_FIT_GRADIENT = 5.0     # How much the score increases for very large remainders
    SCORE_MEDIUM_GAP_PENALTY = -50.0   # Strong penalty for "medium" awkward gaps
    SCORE_INTERMEDIATE_GAP_PENALTY = -25.0 # Moderate penalty for gaps between medium and large

    # Initialize scores for only the fitting bins.
    current_scores = np.zeros_like(fitting_potential_rem_cap)

    # --- Apply Scoring Logic Based on Remaining Capacity Zones ---

    # 1. Perfect Fit Zone: Very small remaining capacity (highly desired).
    perfect_mask = (fitting_potential_rem_cap <= PERFECT_FIT_EPSILON)
    current_scores[perfect_mask] = SCORE_PERFECT_FIT

    # 2. Best Fit Zone: Small non-zero remaining capacity (e.g., 5-15% of bin capacity).
    # Prioritize smaller remainders within this zone.
    best_fit_mask = (fitting_potential_rem_cap > PERFECT_FIT_EPSILON) & \
                    (fitting_potential_rem_cap < MEDIUM_GAP_START)
    # Score decreases as remaining capacity increases: `SCORE_BEST_FIT_BASE - (normalized_rem_cap * SCORE_BEST_FIT_GRADIENT)`
    current_scores[best_fit_mask] = SCORE_BEST_FIT_BASE - \
        (fitting_potential_rem_cap[best_fit_mask] / BIN_CAPACITY) * SCORE_BEST_FIT_GRADIENT

    # 3. Medium Gap Zone: Awkward remaining capacity (e.g., 15-45% of bin capacity).
    # Heavily penalized as these are typically hard to fill later.
    medium_gap_mask = (fitting_potential_rem_cap >= MEDIUM_GAP_START) & \
                      (fitting_potential_rem_cap < MEDIUM_GAP_END)
    current_scores[medium_gap_mask] = SCORE_MEDIUM_GAP_PENALTY

    # 4. Large Gap / Worst Fit Zone: Very large remaining capacity (e.g., 65-100% of bin capacity).
    # Encouraged for small items to maintain flexibility for larger future items.
    worst_fit_mask = (fitting_potential_rem_cap >= LARGE_GAP_START)
    # Score increases as remaining capacity increases (more flexibility is better).
    # Scale `(PRC - LARGE_GAP_START)` to `[0, 1]` for consistent gradient application.
    if (BIN_CAPACITY - LARGE_GAP_START) > 0: # Avoid division by zero if thresholds are too close
        scaled_rem_cap_wf = (fitting_potential_rem_cap[worst_fit_mask] - LARGE_GAP_START) / (BIN_CAPACITY - LARGE_GAP_START)
        current_scores[worst_fit_mask] = SCORE_WORST_FIT_BASE + scaled_rem_cap_wf * SCORE_WORST_FIT_GRADIENT
    else: # Fallback if large_gap_start is too close to BIN_CAPACITY
        current_scores[worst_fit_mask] = SCORE_WORST_FIT_BASE


    # 5. Intermediate Gap Zone: Remaining capacities between the medium and large gap zones.
    # These are neither tight nor large enough for clear flexibility. Treated as moderately undesirable.
    intermediate_gap_mask = (fitting_potential_rem_cap >= MEDIUM_GAP_END) & \
                            (fitting_potential_rem_cap < LARGE_GAP_START)
    current_scores[intermediate_gap_mask] = SCORE_INTERMEDIATE_GAP_PENALTY

    # Assign the calculated scores back to the main priorities array for fitting bins.
    priorities[fitting_bins_mask] = current_scores

    return priorities
```
