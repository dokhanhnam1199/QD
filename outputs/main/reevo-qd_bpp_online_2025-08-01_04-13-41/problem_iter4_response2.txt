```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function enhances the "Best Fit" heuristic by explicitly incorporating
    the item's size into the priority score. It continues to prioritize bins that,
    after the item is placed, would have the smallest remaining capacity (tightest fit).
    The improvement lies in scaling this tightness score by the item's size.
    This means that a tight fit for a larger item will yield a proportionally
    higher priority score than a tight fit for a smaller item. This reflects
    the intuition that effectively utilizing a larger portion of a bin's
    capacity (by placing a large item tightly) is often more desirable in
    minimizing the total number of bins.

    Bins where the item does not fit are assigned an extremely low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    # Also ensure the item size is non-negative to avoid issues with negative item sizes
    # or to make the scaling factor meaningful.
    fitting_bins_mask = (potential_remaining_cap >= 0) & (item >= 0)

    # For fitting bins, set the priority.
    if np.any(fitting_bins_mask):
        # Get remaining capacities for bins where the item fits
        fitting_rem_caps = potential_remaining_cap[fitting_bins_mask]

        # Find the maximum remaining capacity among these fitting bins.
        # This serves as a baseline for scaling the priorities.
        # If all fitting_rem_caps are identical (e.g., all are perfect fits),
        # this value will still be used to determine the relative scale of base_scores.
        max_fitting_rem_cap = np.max(fitting_rem_caps)

        # Calculate base priority scores for fitting bins:
        # A smaller `fitting_rem_caps` (tighter fit) results in a larger
        # `max_fitting_rem_cap - fitting_rem_caps` value (higher priority).
        # A perfect fit (fitting_rem_caps = 0) gets `max_fitting_rem_cap`.
        # The worst fitting bin among the valid ones gets `0`.
        base_scores = max_fitting_rem_cap - fitting_rem_caps

        # Enhance priority by considering the item size.
        # This multiplication makes the absolute score higher for tight fits
        # involving larger items. For a perfect fit, a larger item will yield
        # a proportionally higher score, making its selection more strongly preferred.
        # If item is 0, this will make all eligible scores 0, which is a sensible
        # outcome for a zero-sized item (any valid bin is equally "optimal").
        priorities[fitting_bins_mask] = base_scores * item

    return priorities
```
