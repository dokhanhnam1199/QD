```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" heuristic for online bin packing,
    focusing on tight fits by minimizing the remaining capacity.
    It filters out infeasible options by assigning a very low priority.

    The priority score is calculated as the negative of the potential
    remaining capacity for bins where the item fits. This ensures that
    minimizing remaining capacity translates to maximizing the priority score,
    as smaller positive remaining capacities (tighter fits) will result in
    larger (closer to zero) negative priority scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Assign priority scores using np.where for concise conditional logic:
    # - If the item fits (potential_remaining_cap >= 0), the priority is the
    #   negative of the remaining capacity. This way, a smaller remaining
    #   capacity results in a larger (closer to zero or positive) priority score.
    #   Example: 0 remaining capacity -> priority 0 (highest for valid fits)
    #            5 remaining capacity -> priority -5
    # - If the item does not fit (potential_remaining_cap < 0), the priority
    #   is set to negative infinity, ensuring these bins are never selected
    #   unless no other options exist.
    priorities = np.where(
        potential_remaining_cap >= 0,
        -potential_remaining_cap,
        -np.inf
    )

    return priorities
```
