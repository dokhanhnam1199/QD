```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function refines the "Best Fit" heuristic by employing a continuous
    penalty for "awkward" small remaining gaps, instead of a fixed one.
    This offers a more nuanced discouragement for leaving hard-to-fill spaces,
    aiming for improved long-term bin utilization. Perfect fits still receive
    a substantial bonus.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """

    # --- Heuristic Constants ---
    # A large bonus for perfect fits (remaining capacity is exactly zero)
    # This value should be large enough to make a perfect fit significantly
    # more desirable than any non-perfect fit.
    PERFECT_FIT_BONUS = 100.0

    # A threshold to define an "awkward" remaining gap.
    # If the remaining capacity after placing the item is positive but
    # falls within (0, AWKWARD_GAP_THRESHOLD], it's considered awkward.
    # This value is heuristic and might need tuning based on the expected
    # range of item sizes and bin capacities. For normalized capacities (e.g., 0-1), 0.1 is a reasonable start.
    AWKWARD_GAP_THRESHOLD = 0.1

    # The maximum penalty applied to the smallest "awkward" remaining gaps.
    # The penalty scales down linearly as the gap approaches AWKWARD_GAP_THRESHOLD.
    AWKWARD_GAP_MAX_PENALTY = 10.0

    # Epsilon for robust floating-point comparisons to zero (e.g., for perfect fit checks)
    EPSILON_FLOAT_COMP = 1e-9

    # Calculate the potential remaining capacity if the item were placed in each bin.
    # A negative value strictly means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to an extremely low value for all bins.
    # This ensures that bins where the item does not fit are never selected
    # unless no bin can accommodate the item (in which case a new bin should be opened externally).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item conceptually fits (remaining capacity is non-negative,
    # allowing for tiny negative values due to floating point inaccuracies if they are effectively zero).
    fitting_bins_mask = potential_remaining_cap >= -EPSILON_FLOAT_COMP

    # Apply the base "Best Fit" heuristic for fitting bins:
    # Prioritize bins that would leave the smallest remaining capacity (least waste).
    # Using the negative of potential_remaining_cap means smaller positive remainders yield
    # larger (less negative) priority scores.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # --- Reward Perfect Fits ---
    # Identify bins where the item fits perfectly (remaining capacity is effectively zero).
    # We use np.abs for robustness with floating point numbers (e.g., -1e-17 is considered zero).
    perfect_fit_mask = np.abs(potential_remaining_cap) < EPSILON_FLOAT_COMP
    # Ensure this bonus is only applied to bins that were determined to be fitting.
    perfect_fit_mask = perfect_fit_mask & fitting_bins_mask
    priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # --- Penalize Awkward Future Gaps with a continuous function ---
    # Identify bins where the item fits, and the resulting remaining capacity is positive
    # but falls within the defined "awkward" range (e.g., too small to be generally useful,
    # but not zero).
    awkward_gap_mask = (potential_remaining_cap > EPSILON_FLOAT_COMP) & \
                       (potential_remaining_cap <= AWKWARD_GAP_THRESHOLD)
    # Ensure this penalty is only applied to bins that were determined to be fitting.
    awkward_gap_mask = awkward_gap_mask & fitting_bins_mask

    if np.any(awkward_gap_mask):
        awkward_gaps_values = potential_remaining_cap[awkward_gap_mask]

        # Calculate the penalty factor:
        # It's 1.0 when the awkward gap is very close to 0, and 0.0 when it's at AWKWARD_GAP_THRESHOLD.
        # This means smaller awkward gaps get a higher penalty.
        penalty_factors = (AWKWARD_GAP_THRESHOLD - awkward_gaps_values) / AWKWARD_GAP_THRESHOLD
        
        # Calculate the actual penalty to apply
        penalties_to_apply = AWKWARD_GAP_MAX_PENALTY * penalty_factors
        
        priorities[awkward_gap_mask] -= penalties_to_apply

    return priorities
```
