```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements the classic "Best Fit" (BF) strategy,
    directly addressing the "fragmentation" aspect mentioned in the reflection.
    It prioritizes placing an item into the bin that, if the item is placed,
    will leave the smallest *absolute* amount of remaining capacity.
    The goal is to minimize the specific amount of unused space in any single bin
    after placement, thereby directly reducing fragmentation and aiming to
    "fill up" bins as completely as possible.

    The score is calculated as `-(remaining_capacity_after_placement)`.

    - Bins where the item does not fit are assigned a very low (negative infinity) priority.
    - A perfect fit (remaining_capacity - item = 0) yields a score of 0,
      which is the highest possible score, indicating a perfectly full or closed bin.
    - A snug fit (e.g., remaining_capacity - item = 5) yields a score of -5.
    - A loose fit (e.g., remaining_capacity - item = 50) yields a score of -50.

    This approach is particularly effective when the primary concern is to
    minimize the total number of bins used by ensuring that individual bins
    are filled as densely as possible. It focuses on the absolute volume of
    unoccupied space, in contrast to `priority_v1` which focuses on the
    proportion of waste relative to the item size. This can lead to different
    decisions, especially when items of various sizes leave similar absolute
    remainders but different relative ones.

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
              Typically, item sizes in Bin Packing are positive.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    # Initialize priorities. Bins that cannot fit the item will retain a very low priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find which bins the item can fit into
    fits_mask = bins_remain_cap >= item

    # Handle the edge case where item size is non-positive.
    # Typically, item sizes in BPP are positive.
    if item <= 0:
        if item == 0:
            # If item is zero, it occupies no space.
            # It can conceptually fit into any bin that has non-negative capacity.
            # Assign a perfect fit score (0) to all bins it "fits" into,
            # as it leaves no absolute waste.
            priorities[fits_mask] = 0.0
        else: # item < 0, which is typically invalid for bin packing
            # All priorities remain -np.inf, effectively preventing placement.
            pass
        return priorities

    # Calculate the remaining capacity after placing the item in bins where it fits
    remainder_after_placement = bins_remain_cap[fits_mask] - item

    # For bins where the item fits, calculate the 'absolute waste' score.
    # We want to minimize the absolute value of (remainder_after_placement).
    # By taking the negative of this value, we convert the minimization problem
    # into a maximization problem for the priority score.
    priorities[fits_mask] = -remainder_after_placement

    return priorities
```
