```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function enhances the "Best Fit" heuristic by introducing a penalty
    for creating "awkward" small remaining capacities. The goal is to minimize
    fragmentation and improve long-term bin utilization by discouraging fits
    that leave tiny, hard-to-use gaps. Perfect fits are still highly prioritized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score for each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Define parameters for penalizing awkward gaps. These values are heuristics
    # and might need tuning based on the typical item size distribution and
    # the bin capacity (assuming normalized capacity like 1.0).

    # AWKWARD_THRESHOLD: A remaining capacity below this value (but greater than 0)
    # is considered "awkward" or too small to be efficiently utilized by future items.
    # For a bin of capacity 1.0, 0.1 is a common initial guess for this threshold.
    AWKWARD_THRESHOLD = 0.1

    # PENALTY_AMOUNT: The score reduction applied to bins that result in an
    # awkward gap. This value should be large enough to make an awkward fit
    # less desirable than a fit that leaves a larger, more useful remaining capacity.
    # For example, if a Best Fit score for an awkward gap is -0.05, and for a useful
    # gap is -0.3, a penalty of 0.5 would make the awkward gap score -0.55,
    # pushing it lower than the useful gap score.
    PENALTY_AMOUNT = 0.5

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item (in which case
    # a new bin should typically be opened by the higher-level solver logic).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, initially set the priority based on Best Fit:
    # We want to minimize the remaining capacity, so we use its negative as the score.
    # A smaller remaining capacity results in a larger (less negative) score.
    # A perfect fit (0 remaining capacity) will result in the highest score (0.0).
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # Now, identify and penalize bins that would create an "awkward" small gap.
    # An awkward gap is defined as a remaining capacity that is greater than 0
    # but less than the pre-defined AWKWARD_THRESHOLD.
    awkward_gap_mask = (potential_remaining_cap > 0) & \
                       (potential_remaining_cap < AWKWARD_THRESHOLD)

    # Apply the penalty to the priorities of bins that fall into the awkward gap category.
    # This makes them less desirable than bins that leave a larger, potentially more useful, gap.
    priorities[awkward_gap_mask] -= PENALTY_AMOUNT

    return priorities
```
