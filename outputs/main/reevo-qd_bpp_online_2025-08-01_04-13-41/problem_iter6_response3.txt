```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function refines the "Best Fit" heuristic by applying a non-linear
    transformation (a power function) to emphasize smaller remaining capacities
    even more strongly. It ensures that bins resulting in minimal waste after
    placement receive disproportionately higher priority, thereby intensifying
    the "greedy choice" aspect towards optimal space utilization. Perfect fits
    are still given the absolute highest priority through a dedicated bonus.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value (-infinity) for all bins.
    # This effectively filters out bins where the item does not fit, ensuring
    # they are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Hyperparameter to control the emphasis on smaller remaining capacities.
    # A value of 1.0 behaves like the linear Best Fit in priority_v1.
    # A value > 1.0 (e.g., 2.0 for squaring) will make smaller positive remaining
    # capacities result in disproportionately higher priorities (less negative).
    # For example, if rem_cap is 0.1, score is -(0.1)^2 = -0.01. If rem_cap is 0.2, score is -(0.2)^2 = -0.04.
    # -0.01 is significantly better than -0.04, accentuating the "Best Fit" preference.
    POWER_FOR_BEST_FIT_EMPHASIS = 2.0

    # For fitting bins, calculate the base priority. We take the negative of
    # the potential remaining capacity raised to the chosen power.
    # This amplifies the reward for smaller remaining capacities.
    # We ensure to operate only on non-negative potential_remaining_cap values.
    priorities[fitting_bins_mask] = -(
        potential_remaining_cap[fitting_bins_mask] ** POWER_FOR_BEST_FIT_EMPHASIS
    )

    # Strategic Mutation: Introduce a significant bonus for perfect fits.
    # This is an "ideal outcome" and should always be prioritized.
    # The bonus must be large enough to ensure that a perfect fit (priority 0.0 before bonus)
    # always scores higher than any non-perfect fit (priority <= 0.0).
    PERFECT_FIT_BONUS = 1.0

    # Identify bins where a perfect fit is achieved. Using np.isclose is crucial
    # for floating-point comparisons to robustly detect exact zero remaining capacity.
    perfect_fit_mask = np.isclose(potential_remaining_cap, 0.0)

    # Apply the perfect fit bonus to the identified bins.
    priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    return priorities
```
