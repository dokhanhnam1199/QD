```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function improves upon the basic "Best Fit" heuristic (priority_v1) by:
    1.  Granting a significant bonus for "perfect fits" (leaving exactly 0 capacity).
    2.  Applying a smaller, but still meaningful, bonus for "very small"
        (but non-zero) remaining capacities. This strategy aims to encourage
        bins to be left nearly full, which are often easier to manage
        (i.e., less "awkward") than mid-range capacities for future items.
        Effectively, this penalizes mid-range gaps by making very small gaps
        comparatively more attractive.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # If no bin can fit the item, return the array with all -inf priorities.
    if not np.any(fitting_bins_mask):
        return priorities

    # Extract relevant remaining capacities for fitting bins
    r = potential_remaining_cap[fitting_bins_mask]

    # --- Parameters for bonuses ---
    # Epsilon for float comparisons to identify 'perfect' fits.
    EPSILON = 1e-9
    # Large bonus to ensure perfect fits are always the top choice.
    PERFECT_FIT_BONUS = 1000.0
    # Threshold for considering a non-zero remaining gap as 'very small'.
    # This value is heuristic and might need tuning based on problem scale/data.
    # For example, 0.05 could mean 5% of a normalized bin capacity (if bins are 1.0).
    SMALL_GAP_THRESHOLD = 0.05
    # Smaller bonus for very small non-zero gaps, making them more attractive than
    # mid-range gaps.
    SMALL_GAP_BONUS = 10.0

    # --- Calculate priorities for fitting bins ---
    # Start with the standard Best-Fit principle: minimize remaining capacity.
    # So, the base priority for a fitting bin is the negative of its remaining capacity.
    current_fitting_priorities = -r

    # Apply Perfect Fit Bonus:
    # Identify bins where the remaining capacity is effectively zero.
    perfect_fits_mask = (r >= 0) & (r < EPSILON)
    current_fitting_priorities[perfect_fits_mask] = PERFECT_FIT_BONUS

    # Apply Small Gap Bonus:
    # Identify bins where the remaining capacity is very small (but not zero).
    # This addresses "penalizing awkward future gaps" by making these very small
    # gaps more attractive, thus implicitly making larger (mid-range) gaps
    # comparatively less attractive without explicit negative penalties.
    small_non_perfect_gaps_mask = (r >= EPSILON) & (r <= SMALL_GAP_THRESHOLD)
    # Add the bonus to the existing Best-Fit score for these bins.
    current_fitting_priorities[small_non_perfect_gaps_mask] += SMALL_GAP_BONUS

    # Assign the calculated priorities back to the main priorities array,
    # only for the bins that were able to fit the item.
    priorities[fitting_bins_mask] = current_fitting_priorities

    return priorities
```
