```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" strategy, augmented to
    evaluate the 'impact' of the placement by applying a penalty if
    the placement would result in a "medium" amount of remaining capacity
    in the bin. This aims to minimize future waste by discouraging
    the creation of awkwardly sized gaps that might be difficult to fill.
    It prioritizes bins that would be nearly full (very small remainder)
    or those that would still have a large remaining capacity after the item
    is placed.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The total capacity of a single bin. Defaults to 1.0, common
                      for normalized bin packing problems.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative) will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # -np.inf ensures that bins where the item does not fit are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the initial priority based on "Best Fit".
    # We want to minimize the remaining capacity, so we use its negative as the priority score.
    # A smaller positive remaining capacity (e.g., 0.05) will result in a
    # larger (less negative) priority score (e.g., -0.05). A perfect fit (0 remaining)
    # gets a score of 0, which is the highest.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # --- Augmentation based on "Evaluate placement impact" and "minimizing future waste" ---
    # This part penalizes scenarios where placing the item leaves a 'medium' amount
    # of remaining capacity. Such gaps can be considered "waste" because they are
    # neither nearly full nor large enough to easily accommodate new large items.
    # The thresholds for "medium" are relative to the `bin_capacity` and can be tuned.
    # These define what constitutes an "awkward future gap".
    medium_gap_lower_threshold = 0.15 * bin_capacity
    medium_gap_upper_threshold = 0.45 * bin_capacity

    # Define a penalty value. This penalty should be significant enough to make a
    # "medium gap" option less attractive than a non-penalized alternative.
    # Using a penalty proportional to the `bin_capacity` ensures it has a consistent
    # impact relative to the scale of the problem, regardless of the item size.
    penalty_value = 0.75 * bin_capacity # This value can be tuned based on desired aggressiveness.

    # Identify fitting bins that would result in a "medium" remaining capacity
    medium_gap_mask = (potential_remaining_cap > medium_gap_lower_threshold) & \
                      (potential_remaining_cap < medium_gap_upper_threshold)

    # Apply the penalty to the priorities of bins that fall into the "medium gap" range
    # and where the item actually fits.
    penalize_bins = fitting_bins_mask & medium_gap_mask
    priorities[penalize_bins] -= penalty_value

    return priorities
```
