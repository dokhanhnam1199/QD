```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    incorporating a penalty for small, awkward remaining gaps and a bonus for perfect fits.

    This function extends the "Best Fit" heuristic by:
    1. Giving a significant bonus to bins that result in a perfect fit (0 remaining capacity).
    2. Applying a penalty to bins that result in a very small, non-zero remaining capacity,
       as such gaps might be "awkward" and difficult to utilize for future items, thus
       penalizing fragmentation that leads to unusable space.
    3. For all other fitting bins, it still prioritizes based on the smallest remaining capacity
       (standard Best Fit), minimizing immediate waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Bins where the item does not fit will have -np.inf priority, ensuring they are not selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Extract potential remaining capacities for only the fitting bins.
    fitting_rem_cap = potential_remaining_cap[fitting_bins_mask]

    # Base priority: Best-Fit principle.
    # We want to minimize the remaining capacity, so we use its negative as the score.
    # A smaller positive remaining capacity (e.g., 5) results in a larger score (-5).
    # A perfect fit (0 remaining) results in a score of 0.
    fitting_priorities = -fitting_rem_cap

    # --- Define constants for heuristic adjustments ---
    # Epsilon for floating-point comparisons to consider a value "zero".
    PERFECT_FIT_EPSILON = 1e-9

    # Threshold for defining an "awkwardly small" non-zero gap.
    # This value is problem-dependent and should ideally be based on the
    # typical smallest useful item size or a proportion of the bin capacity.
    # For a general float-based problem, a small absolute value is used.
    # Example: if smallest typical item is 0.1, anything between (0, 0.1) could be awkward.
    EPSILON_SMALL_GAP = 0.05 # Adjust this value based on problem context

    # Bonus applied to perfect fits to ensure they are always chosen over any non-perfect fit.
    # It must be sufficiently large to push a perfect fit (base score 0) above any
    # non-perfect fit (base score <= 0).
    PERFECT_FIT_BONUS = 1000.0 # Large enough to ensure perfect fit is always top priority

    # Penalty applied to awkward small non-zero gaps.
    # This penalty should be significant enough to make these bins less attractive than
    # bins with slightly larger, potentially more useful remaining capacities.
    AWKWARD_GAP_PENALTY = 50.0 # Adjust to control the severity of the penalty

    # --- Apply heuristic adjustments ---

    # 1. Identify perfect fits (remaining capacity is effectively zero).
    perfect_fit_mask = (fitting_rem_cap < PERFECT_FIT_EPSILON)

    # 2. Identify awkward small non-zero gaps.
    # These are gaps that are positive (i.e., not a perfect fit) but smaller than EPSILON_SMALL_GAP.
    awkward_gap_mask = (fitting_rem_cap >= PERFECT_FIT_EPSILON) & \
                       (fitting_rem_cap < EPSILON_SMALL_GAP)

    # Apply bonus for perfect fits
    fitting_priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # Apply penalty for awkward small non-zero gaps
    fitting_priorities[awkward_gap_mask] -= AWKWARD_GAP_PENALTY

    # Assign the refined priorities back to the main priorities array for fitting bins.
    priorities[fitting_bins_mask] = fitting_priorities

    return priorities
```
