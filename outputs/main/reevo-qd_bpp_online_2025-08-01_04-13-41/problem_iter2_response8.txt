```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements a "Best Percentage Fit" strategy for online bin packing.
    It prioritizes bins that, if the item is placed, will result in the highest
    proportion of the bin's *currently available capacity* being filled by the item.
    This emphasizes maximizing the efficiency of space utilization within the
    chosen bin, leading to tighter packing.

    Bins where the item does not fit are assigned a very low (negative infinity) priority.

    The score is calculated as `item_size / bins_remain_cap`.
    - A perfect fit (where `bins_remain_cap` is exactly equal to `item_size`)
      yields a score of 1.0, which is the highest possible score.
    - A tight fit where the item uses a large proportion of the bin's current
      remaining capacity (e.g., item=4, rem_cap=5 -> score 0.8) is preferred.
    - A looser fit where the item uses a smaller proportion of the bin's
      remaining capacity (e.g., item=4, rem_cap=10 -> score 0.4) is less preferred.

    This method aims to "fill up" bins by maximizing the density of the item
    within the selected bin's available space, contributing to better overall packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    # Initialize priorities. Bins that cannot fit the item will retain a very low priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find which bins the item can fit into
    fits_mask = bins_remain_cap >= item

    # For bins where the item fits, calculate the 'percentage fit' score.
    # This is the ratio of the item's size to the bin's current remaining capacity.
    # A higher ratio (closer to 1) means a "tighter" percentage fit.
    # We assume item > 0. If bins_remain_cap[fits_mask] is 0, it implies item is also 0 (which is trivial),
    # or an edge case not typical for BPP where item fits into 0 capacity.
    # In a valid BPP, if an item fits, bins_remain_cap will be >= item and thus > 0 if item > 0.
    fitting_bins_cap = bins_remain_cap[fits_mask]
    
    # Calculate the score for fitting bins
    # np.divide handles potential division by zero safely, resulting in inf or nan which will be filtered by priorities array type
    # However, in practical BPP, if fits_mask is true, fitting_bins_cap should be >= item, and if item > 0, then fitting_bins_cap > 0.
    # Thus, no division by zero is expected here for meaningful item sizes.
    priorities[fits_mask] = item / fitting_bins_cap

    return priorities
```
