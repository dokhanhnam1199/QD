```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version implements a Modified Best-Fit (MBF) inspired priority.
    It refines the Best-Fit approach by distinguishing between different
    types of remaining capacities after placing an item, aiming to minimize
    overall waste and improve long-term bin utilization.

    The prioritization strategy is as follows:
    1.  **Perfect Fit:** Bins where the item fits exactly, leaving zero remaining capacity,
        are given the highest possible priority. This is the ideal scenario for
        minimizing waste in that specific bin.
    2.  **Small Remnant Penalty:** Bins that, after accommodating the item, would have
        a very small positive remaining capacity (e.g., less than a predefined
        `epsilon_waste_threshold`). These are penalized with a low priority.
        The rationale is that such tiny remnants are often too small to accommodate
        future items and might lead to wasted space (fragmentation) if the bin
        cannot be completely filled later.
    3.  **Standard Best Fit:** For all other bins that can fit the item and leave
        a "useful" amount of remaining capacity (i.e., greater than `epsilon_waste_threshold`),
        the standard Best-Fit logic is applied. This means prioritizing bins that
        would have the smallest remaining capacity among these "good fit" options,
        thereby encouraging dense packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more desirable bin.
    """
    # Initialize priorities for all bins to a very low value (-infinity).
    # This ensures that any bin that can accommodate the item will have a
    # higher priority than those that cannot.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate remaining capacity after placing the item in each bin (hypothetically)
    remaining_after_placement = bins_remain_cap - item

    # Create a boolean mask for bins that can physically accommodate the item (remaining capacity >= 0)
    # Using a small tolerance for floating point comparisons to handle near-zero values.
    can_fit_mask = remaining_after_placement >= -1e-9 # Allow for tiny negative due to float precision

    # Define constants for priority scoring and thresholds
    PERFECT_FIT_SCORE = 1000.0  # A very high score for perfect fits
    SMALL_REMNANT_PENALTY = -100.0 # A low score to penalize small, likely wasted remnants
    # Threshold for what constitutes a "small" or "wasted" remnant.
    # This value might need tuning based on the typical range and distribution of item sizes.
    # For example, 0.01 might be 1% of a typical bin capacity or item size.
    epsilon_waste_threshold = 0.01
    tolerance_for_zero = 1e-9 # Standard tolerance for float comparisons to zero

    # Apply the Best-Fit scoring as a base for fittable bins.
    # The Best-Fit strategy aims to minimize the remaining space, meaning
    # we want to maximize `item - bins_remain_cap`. This results in
    # scores where 0 is the best (perfect fit), and increasingly negative
    # values for larger remaining capacities.
    priorities[can_fit_mask] = item - bins_remain_cap[can_fit_mask]

    # --- Apply Modified Best-Fit rules ---

    # 1. Perfect Fit prioritization:
    # Identify bins where the remaining capacity after placement is effectively zero.
    perfect_fit_mask_global_idx = can_fit_mask & np.isclose(remaining_after_placement, 0.0, atol=tolerance_for_zero)
    # Overwrite their base BF score with the highest priority score.
    priorities[perfect_fit_mask_global_idx] = PERFECT_FIT_SCORE

    # 2. Small Remnant Penalty:
    # Identify bins where the remaining capacity after placement is positive but very small.
    small_remnant_mask_global_idx = can_fit_mask & \
                                    (remaining_after_placement > tolerance_for_zero) & \
                                    (remaining_after_placement <= epsilon_waste_threshold)
    # Overwrite their base BF score with the penalty score.
    priorities[small_remnant_mask_global_idx] = SMALL_REMNANT_PENALTY

    # For other "good" fits (remaining capacity > epsilon_waste_threshold),
    # their priority remains the standard Best-Fit score calculated initially
    # (`item - bins_remain_cap`). These scores will be negative,
    # higher (closer to 0) for better fits, and will fall between
    # `PERFECT_FIT_SCORE` and `SMALL_REMNANT_PENALTY` in the overall ranking.

    return priorities
```
