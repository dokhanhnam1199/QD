```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function improves upon a standard Best Fit heuristic by:
    1. Strongly rewarding perfect packing (leaving 0 remaining capacity).
    2. Penalizing choices that create "awkward" small, non-zero remaining gaps,
       as these might be hard to fill effectively later.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Heuristic constants. These values are crucial and often require tuning
    # based on the specific problem instance (e.g., bin capacity, item size distribution).
    # Assuming a common bin capacity (e.g., 1.0 for normalized problems, or 100.0 for integer problems).
    # For a general online BPP, BIN_CAPACITY is a fixed parameter. We'll set it to 1.0,
    # assuming typical normalized inputs (items and capacities between 0 and 1).
    # Adjust this constant if your problem uses a different capacity scale (e.g., 100.0).
    BIN_CAPACITY = 1.0 

    # Bonus to make a perfect fit (0 remaining capacity) the absolute top priority.
    # This value should be significantly higher than any negative score that can result
    # from the base Best Fit component (which ranges from -BIN_CAPACITY to 0).
    BONUS_PERFECT_FIT = BIN_CAPACITY * 1.5 

    # Threshold for defining an "awkward" small non-zero gap.
    # Remaining capacities that are greater than 0 but less than or equal to this threshold
    # will be considered "awkward" and penalized.
    # Example: 10% of the bin's full capacity.
    THRESHOLD_AWKWARD_GAP = BIN_CAPACITY * 0.1 
    
    # Penalty applied to bins that result in an "awkward" small gap.
    # This penalty should be large enough to make such a choice less desirable
    # than a slightly larger, non-awkward gap, effectively "pushing" the choice
    # away from leaving small, hard-to-fill remnants.
    # Example: 20% of the bin's full capacity as a penalty.
    PENALTY_AWKWARD_GAP = BIN_CAPACITY * 0.2 

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities. Bins where the item does not fit are assigned an
    # extremely low priority (-np.inf) to ensure they are never selected
    # unless no bin can fit the item (in which case a new bin should be opened,
    # handled by logic external to this function).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Get the potential remaining capacities for only the bins where the item fits.
    prc_fitting = potential_remaining_cap[fitting_bins_mask]

    # Step 1: Apply a "Best Fit" like base score.
    # Prioritize bins that would have the smallest remaining capacity (least waste).
    # A smaller positive remaining capacity (e.g., 0.1) results in a larger
    # (less negative) score (e.g., -0.1). A larger remaining capacity (e.g., 0.7)
    # results in a smaller (more negative) score (e.g., -0.7).
    priorities[fitting_bins_mask] = -prc_fitting

    # Step 2: Strongly reward perfect packing (remaining capacity is exactly 0).
    # Identify bins that would result in a perfect fit.
    perfect_fit_mask = (prc_fitting == 0)
    # Add a substantial bonus to these bins' scores to make them highly preferred.
    priorities[fitting_bins_mask][perfect_fit_mask] += BONUS_PERFECT_FIT

    # Step 3: Penalize "awkward" small, non-zero remaining gaps.
    # Identify bins that result in a remaining capacity that is positive but
    # falls within the defined "awkward gap" threshold.
    awkward_gap_mask = np.logical_and(prc_fitting > 0, prc_fitting <= THRESHOLD_AWKWARD_GAP)
    # Subtract a penalty from these bins' scores to make them less desirable.
    priorities[fitting_bins_mask][awkward_gap_mask] -= PENALTY_AWKWARD_GAP

    return priorities
```
