```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" heuristic, which aligns with the goal
    of minimizing wasted space for better packing. It prioritizes bins that,
    after the item is placed, would have the smallest remaining capacity.

    Bins where the item does not fit are given an extremely low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the priority.
    # The goal is to minimize the positive potential_remaining_cap (wasted space).
    # To achieve this with a "highest priority wins" selection, we simply
    # negate the potential_remaining_cap for bins where the item fits.
    # A smaller positive remaining capacity (e.g., 0.1) becomes a larger
    # (less negative) priority score (e.g., -0.1), which correctly
    # assigns higher priority to tighter fits.
    # A perfect fit (0 remaining capacity) gets a score of 0, which is the highest.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    return priorities
```
