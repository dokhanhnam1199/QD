```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on a "Worst Fit" strategy.

    This heuristic aims to place the item into the bin where it would leave the *most*
    remaining capacity after the item is placed. The rationale is to keep bins as "open"
    as possible, reserving larger contiguous spaces for potentially larger future items
    and preventing bins from becoming too fragmented or nearly full too quickly.

    Bins that cannot accommodate the item are assigned a very low (negative infinity)
    priority score, ensuring they are never chosen. For bins that can fit the item,
    the priority is directly the remaining capacity after the item is placed. A larger
    positive remaining capacity results in a higher priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a very low value for bins that cannot fit the item.
    # This ensures they are not chosen. Using -np.inf makes them strictly the lowest.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Identify which bins can accommodate the current item.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item were placed in suitable bins.
    # This 'leftover' space is the key for the Worst Fit heuristic.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Assign priorities for bins that can fit the item.
    # The Worst Fit strategy selects the bin that results in the largest leftover space.
    # To achieve this, the priority is directly the leftover space.
    # For example:
    # - If leftover is 0.1, priority is 0.1.
    # - If leftover is 0.5, priority is 0.5.
    # Since 0.5 > 0.1, this correctly prioritizes looser fits.
    priorities[can_fit_mask] = remaining_after_fit

    return priorities
```
