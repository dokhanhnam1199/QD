```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic prioritizes bins where the item occupies the largest
    *proportion* of the bin's *current remaining capacity*. This strategy aims
    to utilize the available space in each bin as efficiently as possible,
    leading to "snug fits" by maximizing the percentage of the current
    free space that the item consumes.

    The score is calculated as `item_size / current_bin_remaining_capacity`.

    - Bins where the item does not fit (i.e., `item > current_bin_remaining_capacity`)
      are assigned a very low (negative infinity) priority.
    - A perfect fit (item_size == current_bin_remaining_capacity) yields a score of 1.0,
      as (item / item) is 1.0. This is the highest possible score.
    - A snug fit (e.g., item_size is 90% of current_bin_remaining_capacity) yields
      a score of 0.9.
    - A loose fit (e.g., item_size is 10% of current_bin_remaining_capacity) yields
      a score of 0.1.

    This approach is particularly effective at maximizing the utilization of
    *existing* bin capacities. It focuses on how "valuable" the placement is
    in terms of filling up the currently available space, dynamically reacting
    to the item's size relative to each bin's free space.

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
              Typically, item sizes in Bin Packing are positive.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    # Initialize priorities to negative infinity for bins where the item cannot fit.
    # This ensures these bins are never chosen unless no other option exists (which
    # should not happen if a new bin can always be opened).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Handle edge case: item size is non-positive.
    # In typical bin packing, item sizes are positive.
    if item <= 0:
        if item == 0:
            # A zero-sized item occupies no space. It can be considered a "perfect fit"
            # for any bin with non-negative remaining capacity, as it perfectly utilizes
            # its own "size" relative to any capacity it's placed in.
            # Assign the highest possible score (1.0) to all bins it "fits" into.
            priorities[bins_remain_cap >= 0] = 1.0
        else: # item < 0, which is typically invalid for bin packing and might represent an error or special condition.
            # All priorities remain -np.inf, effectively preventing placement.
            pass
        return priorities

    # Identify bins where the item can fit.
    # For item > 0, a bin can fit the item if its remaining capacity is greater than or equal to the item size.
    fits_mask = bins_remain_cap >= item

    # Calculate scores for bins where the item fits.
    # The score is the ratio of item_size to the bin's current remaining capacity.
    # This maximizes the proportion of the *currently available space* that the item fills.
    # For fitting bins, bins_remain_cap[fits_mask] will always be > 0 because item > 0.
    priorities[fits_mask] = item / bins_remain_cap[fits_mask]

    return priorities
```
