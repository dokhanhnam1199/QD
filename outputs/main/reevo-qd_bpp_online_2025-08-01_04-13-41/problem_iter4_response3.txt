```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic is designed for online Bin Packing, aiming to minimize the number of bins
    used by making strategic placement decisions. It extends the concept of "relative waste"
    from `priority_v1` by prioritizing based on the *fractional amount of the bin's current
    available capacity that will be "wasted"* after placing the item.

    The primary score is calculated as `-(remaining_capacity_after_placement / current_remaining_capacity_of_bin)`.

    This means:
    - Bins where the item does not fit are assigned a very low (negative infinity) priority.
    - A perfect fit (remaining_capacity - item_size = 0) yields the highest possible score (0).
      This is because (0 / current_remaining_capacity_of_bin) is 0.
    - A snug fit (e.g., leaving a small remainder) in a largely empty bin will yield a score
      closer to -1.0 (if the item filled most of the available space, e.g., remaining_after_placement / current_remaining_capacity_of_bin ~ 0.1, score ~ -0.1).
    - A loose fit (e.g., leaving a large remainder) in a bin where the item took only a small
      fraction of the available space will yield a score closer to 0.0 (e.g., if the item took
      only 10% of the bin's current capacity, leaving 90%, score is -0.9).

    Compared to `priority_v1` (which uses `remainder / item_size`), this approach aims to:
    1.  Maximize the *utilization percentage of the bin's currently available space* for the current item.
    2.  Provide a more stable and bounded penalty for "waste" (scores range from 0 to -1), as it's a
        fraction of the bin's capacity, unlike `v1` where very small items in large bins could lead
        to extremely large negative scores. This makes the heuristic less prone to disproportionate
        penalties and potentially more "strategic" by not overly penalizing loosely-fitting small
        items into large, open bins if no tighter "relative to item" fit exists.
    3.  Maintain a strong preference for perfect fits (score 0).

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    # Initialize priorities. Bins that cannot fit the item will retain a very low priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Handle edge cases for item size
    if item < 0:
        # Invalid item size for Bin Packing; no bin will be chosen.
        return priorities
    elif item == 0:
        # A zero-sized item fits into any bin with non-negative capacity without consuming space.
        # Assign a perfect fit score (0) to all bins it "fits" into (effectively all bins
        # with capacity >= 0). This indicates no relative waste.
        priorities[bins_remain_cap >= 0] = 0.0
        return priorities

    # Find which bins the item can fit into
    fits_mask = bins_remain_cap >= item

    # Calculate the remaining capacity after placing the item
    remainder_after_placement = bins_remain_cap[fits_mask] - item

    # Identify bins that are a perfect fit (remainder is 0)
    perfect_fit_mask = remainder_after_placement == 0
    non_perfect_fit_mask = ~perfect_fit_mask

    # Assign the highest possible score (0) for perfect fits.
    # Note: If item > 0 and bins_remain_cap[fits_mask] is also 0, this scenario won't occur
    # because `bins_remain_cap >= item` would be false.
    priorities[fits_mask][perfect_fit_mask] = 0.0

    # For non-perfect fits, calculate the score based on relative waste to the bin's current capacity.
    # We ensure that the denominator (current_remaining_capacity_of_bin) is always positive for calculation.
    # Since `fits_mask` implies `bins_remain_cap >= item` and `item > 0`, `bins_remain_cap` will be > 0.
    current_capacity_for_non_perfect_fits = bins_remain_cap[fits_mask][non_perfect_fit_mask]
    
    priorities[fits_mask][non_perfect_fit_mask] = -(
        remainder_after_placement[non_perfect_fit_mask] /
        current_capacity_for_non_perfect_fits
    )

    return priorities
```
