```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function enhances the "Best Fit" heuristic by considering post-placement
    states. It prioritizes bins that, after the item is placed, would have the
    smallest remaining capacity (Best-Fit principle). Additionally, it applies:
    - A strong bonus for perfect fits (leaving 0 remaining capacity), rewarding
      long-term efficiency by fully utilizing a bin.
    - A significant penalty for "awkwardly small" non-zero remaining capacities,
      which might be too small to be useful for future items and effectively
      become wasted space. Bins where the item does not fit are given an
      extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Define heuristic parameters. These values are chosen to ensure the
    # perfect fit bonus and awkward gap penalty significantly influence
    # the overall priority, dominating the base Best-Fit component.
    # Assuming item sizes and bin capacities are typically normalized (e.g., between 0 and 1).
    # If your items/bins are, for example, integers up to 100, these constants should be scaled.
    PERFECT_FIT_BONUS = 1000.0  # Large bonus for a perfect fit
    
    # This threshold defines what constitutes an "awkwardly small" non-zero gap.
    # For normalized capacities (0-1), 0.05 means gaps up to 5% of a full bin capacity.
    SMALL_GAP_THRESHOLD = 0.05
    
    AWKWARD_GAP_PENALTY = 500.0 # Significant penalty for creating an awkward gap

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item (in which case
    # an external mechanism for opening a new bin or handling failure is needed).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Step 1: Apply base Best-Fit priority for fitting bins.
    # We want to minimize the remaining capacity, so we use its negative as the priority score.
    # A smaller positive remaining capacity (e.g., 0.1) will result in a
    # larger (less negative) priority score (e.g., -0.1).
    # A larger positive remaining capacity (e.g., 0.5) will result in a
    # smaller (more negative) priority score (e.g., -0.5).
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # Step 2: Reward perfect fits.
    # Identify bins where placing the item results in exactly 0 remaining capacity.
    perfect_fit_mask = (potential_remaining_cap == 0) & fitting_bins_mask
    priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # Step 3: Penalize awkward future gaps.
    # Identify bins where placing the item results in a positive but
    # "awkwardly small" remaining capacity. These gaps are often too small
    # to be useful for many subsequent items.
    awkward_gap_mask = (potential_remaining_cap > 0) & \
                       (potential_remaining_cap <= SMALL_GAP_THRESHOLD) & \
                       fitting_bins_mask
    priorities[awkward_gap_mask] -= AWKWARD_GAP_PENALTY

    return priorities
```
