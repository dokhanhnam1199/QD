```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "First Fit" heuristic. It prioritizes the
    first bin (by array index) in the `bins_remain_cap` list where the item
    can fit. This heuristic aims to keep the number of open bins low by
    filling existing bins sequentially from the beginning of the list.
    Bins where the item does not fit are given an extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits.
    fitting_bins_mask = bins_remain_cap >= item

    # Get the indices of the bins where the item fits.
    fitting_indices = np.where(fitting_bins_mask)[0]

    # For fitting bins, assign priority based on their index.
    # We want to select the *first* fitting bin (lowest index).
    # To achieve this with argmax, we assign a higher score to bins with lower indices.
    # A simple way is to use `len(bins_remain_cap) - index`.
    # For example, if len=5, index 0 gets score 5, index 1 gets score 4, etc.
    # This correctly prioritizes lower indices with higher scores.
    if len(fitting_indices) > 0:
        # Calculate scores for fitting bins
        priorities[fitting_indices] = len(bins_remain_cap) - fitting_indices.astype(float)

    return priorities
```
