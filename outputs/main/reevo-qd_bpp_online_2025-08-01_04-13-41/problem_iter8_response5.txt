```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function extends the "Best Fit" heuristic by introducing a secondary
    tie-breaking mechanism. It prioritizes bins that, after the item is placed,
    would have the smallest remaining capacity (Best Fit principle).
    If multiple bins offer the same minimal remaining capacity, it then
    prioritizes the bin that was *already more full* (i.e., had less
    remaining capacity *before* the item was placed). This aims to "close"
    bins more quickly, contributing to maximizing overall bin utilization
    and reducing the number of open bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Define a small epsilon for the tie-breaking mechanism.
    # It must be small enough not to overturn the primary Best Fit decision,
    # but large enough to differentiate floating-point values in ties.
    EPSILON = 1e-6

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # -np.inf ensures that bins where the item does not fit will never be selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, calculate the primary priority based on "Best Fit".
    # We want to minimize potential_remaining_cap, so we use its negative as the score.
    # A smaller positive remaining capacity leads to a larger (less negative) priority.
    primary_scores = -potential_remaining_cap[fitting_bins_mask]

    # Calculate a secondary priority for tie-breaking.
    # For bins that offer the same minimal remaining capacity (primary score),
    # we prefer the one that was already more full (i.e., had a smaller original
    # bins_remain_cap). A smaller bins_remain_cap gives a larger (less negative)
    # secondary score, which is achieved by negating it.
    secondary_scores = -bins_remain_cap[fitting_bins_mask]

    # Combine primary and secondary scores. The primary score dominates.
    # EPSILON ensures the secondary score only influences ties in the primary score.
    priorities[fitting_bins_mask] = primary_scores + EPSILON * secondary_scores

    return priorities
```
