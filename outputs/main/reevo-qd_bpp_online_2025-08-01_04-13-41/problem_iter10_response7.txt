```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an improved "Best Fit" strategy that
    strategically evaluates bin remaining capacity. It prioritizes bins as follows:
    1. Perfect fits: Bins where the item exactly fills the remaining capacity
       (resulting in 0 remaining capacity) are given the highest possible priority (infinity).
    2. Tight fits (non-perfect): For bins where the item fits but leaves some
       remaining capacity (> 0), priority is inversely proportional to the
       amount of remaining capacity. A smaller remaining capacity results in a
       higher positive priority score.
    3. Non-fitting bins: Bins where the item does not fit (resulting in negative
       remaining capacity) are given an extremely low priority (-infinity)
       to ensure they are never selected.

    This hierarchy ensures that perfect fits are always preferred, followed by
    the tightest possible non-perfect fits, thereby minimizing wasted space
    and fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value indicates the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value (-inf) for all bins.
    # This ensures that bins where the item does not fit are effectively excluded.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    if np.any(fitting_bins_mask):
        # Step 1: Prioritize perfect fits with infinite priority.
        # This identifies bins where item.size == bins_remain_cap.
        perfect_fit_mask = potential_remaining_cap == 0
        if np.any(perfect_fit_mask):
            priorities[perfect_fit_mask] = np.inf

        # Step 2: For other fitting bins (remaining capacity > 0),
        # calculate priority as the inverse of the remaining capacity.
        # A smaller positive remaining capacity yields a higher priority score.
        non_perfect_fitting_mask = (potential_remaining_cap > 0) & fitting_bins_mask
        if np.any(non_perfect_fitting_mask):
            priorities[non_perfect_fitting_mask] = 1.0 / potential_remaining_cap[non_perfect_fitting_mask]

    return priorities
```
