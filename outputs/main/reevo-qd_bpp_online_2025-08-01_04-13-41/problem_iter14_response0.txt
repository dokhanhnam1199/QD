```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an enhanced "Best Fit" heuristic with a unified
    scoring mechanism. It prioritizes bins that, after the item is placed,
    would have the smallest remaining capacity. This is achieved by using an
    inverse relationship: 1 / (remaining_capacity + epsilon).
    This design naturally assigns an extremely high priority score to bins
    that achieve a perfectly zero remaining capacity (perfect fit), effectively
    incorporating a strategic bonus for optimal bin utilization without a
    separate constant. Bins where the item does not fit are effectively
    filtered out by being assigned an extremely low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Initialize priorities to a very low value for all bins.
    # This acts as a filter: bins where the item does not fit will retain this
    # -np.inf score, ensuring they are not chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    # A bin fits if its current remaining capacity is greater than or equal to the item size.
    fitting_bins_mask = bins_remain_cap >= item

    # Calculate the potential remaining capacity for the bins where the item fits.
    potential_remaining_cap = bins_remain_cap[fitting_bins_mask] - item

    # Define a small epsilon to prevent division by zero, especially when
    # potential_remaining_cap is exactly 0. This also naturally boosts the
    # priority for perfect fits (0 remaining capacity) to a very high value.
    EPSILON = 1e-9  # A small positive value.

    # For the fitting bins, calculate their priority score.
    # The score is inversely proportional to the potential remaining capacity.
    # A smaller remaining capacity results in a larger priority score.
    # Perfect fits (potential_remaining_cap ~ 0) will yield extremely high scores
    # due to division by a very small number (EPSILON).
    priorities[fitting_bins_mask] = 1.0 / (potential_remaining_cap + EPSILON)

    return priorities
```
