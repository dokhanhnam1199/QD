```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an improved "Best Fit" heuristic, prioritizing bins
    that, after the item is placed, would have the smallest remaining capacity
     (i.e., leaving the least 'waste'). It ensures that priority scores are
    positive, with a higher score indicating a better (tighter) fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value (-np.inf) for all bins.
    # This ensures that bins where the item does not fit are effectively
    # excluded from selection by argmax, unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Only proceed if there is at least one bin where the item fits.
    if np.any(fitting_bins_mask):
        # Extract the potential remaining capacities for only the fitting bins.
        fitting_potential_rem_cap = potential_remaining_cap[fitting_bins_mask]

        # Determine the maximum remaining capacity among the bins that can fit the item.
        # This value will be used as an offset to convert the remaining capacities
        # into positive priority scores, where a smaller remaining capacity
        # results in a higher (better) priority score.
        max_rem_cap_for_fitting_bins = np.max(fitting_potential_rem_cap)

        # Calculate the priority scores for fitting bins.
        # By subtracting the actual potential remaining capacity from the maximum
        # among fitting bins, we ensure:
        # 1. Smaller actual remaining capacities yield larger priority scores.
        # 2. All scores for fitting bins are non-negative.
        # Example: if max_rem=0.5 and actual_rem=0.1, score = 0.5 - 0.1 = 0.4 (good fit).
        #          if max_rem=0.5 and actual_rem=0.5, score = 0.5 - 0.5 = 0.0 (worst fit among fitting).
        priorities[fitting_bins_mask] = max_rem_cap_for_fitting_bins - fitting_potential_rem_cap

    return priorities
```
