```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" like heuristic, but with a crucial
    modification: it strongly rewards perfect packing and penalizes choices
    that result in "awkward" very small, non-zero remaining capacities.
    The aim is to optimize long-term bin utilization by avoiding hard-to-fill gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         It is assumed that bin capacities are on a similar scale
                         (e.g., normalized, typically to 1.0) for the constant
                         thresholds to be effective.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Define constants for the heuristic. These values may need tuning
    # depending on the typical scale of item sizes and bin capacities.
    # We assume bin capacities are normalized, for example, between 0 and 1.0.

    # This threshold defines what constitutes a "very small, awkward gap".
    # For a bin with capacity 1.0, 0.05 means any remaining capacity less than 5%
    # of the bin size (but greater than 0) will be penalized.
    # This value could also be made relative to the item size (e.g., 0.1 * item)
    # or the bin's total capacity if known.
    threshold_awkward_gap = 0.05

    # This is the additional penalty applied to bins that result in an
    # "awkward gap". It must be sufficiently large to make an awkward gap
    # less desirable than a slightly larger, non-awkward gap.
    # For example, if R_awkward = 0.01 and R_better = 0.06 (just above threshold),
    # we want score(-0.01 - penalty) < score(-0.06).
    # A penalty of 0.5 is a significant reduction.
    penalty_awkward_gap = 0.5

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # -np.inf ensures that bins where the item does not fit will never be selected,
    # and a new bin would typically be opened if no bin has a priority > -inf.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, calculate the base priority (Best Fit: minimize waste)
    # A smaller positive remaining capacity results in a larger (less negative) score.
    # The negative of potential_remaining_cap serves this purpose.
    base_scores = -potential_remaining_cap[fitting_bins_mask]

    # Identify bins with perfect fit (remaining capacity == 0).
    # These should have the highest possible priority.
    perfect_fit_mask = potential_remaining_cap[fitting_bins_mask] == 0
    base_scores[perfect_fit_mask] = np.finfo(float).max  # Effectively positive infinity

    # Identify bins that would result in a "very small, non-zero awkward gap".
    # These are gaps greater than 0 but less than the defined threshold.
    awkward_gap_mask = (potential_remaining_cap[fitting_bins_mask] > 0) & \
                       (potential_remaining_cap[fitting_bins_mask] < threshold_awkward_gap)

    # Apply the penalty to bins creating awkward gaps.
    base_scores[awkward_gap_mask] -= penalty_awkward_gap

    # Assign the calculated scores back to the main priorities array for fitting bins.
    priorities[fitting_bins_mask] = base_scores

    return priorities
```
