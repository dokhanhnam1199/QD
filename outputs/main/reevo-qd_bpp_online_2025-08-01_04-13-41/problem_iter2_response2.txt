```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements a refined Best-Fit strategy with a secondary
    consolidation objective, aiming to effectively minimize wasted space.

    The priority score is calculated in two main parts for bins where the item fits:

    1.  **Primary Component (Best-Fit):** Prioritize minimizing the remaining
        capacity in a bin *after* placing the item. This is the core Best-Fit
        principle, which aims to find the tightest fit and reduce fragmentation.
        A perfect fit (remaining capacity = 0) yields the highest score for this component (0).
        The score is `-(bins_remain_cap[i] - item)`.

    2.  **Secondary Component (Consolidation/Most-Full Preference):** Among bins
        that offer similar "Best-Fit" scores (i.e., would leave similar remaining
        space after placement), or to subtly encourage overall consolidation,
        a small penalty is applied based on the bin's *current* remaining capacity.
        This encourages selecting bins that are already more full (have smaller
        `bins_remain_cap`). This helps to consolidate items into fewer bins,
        potentially allowing other bins to be filled completely and "closed".
        The score is `-K * bins_remain_cap[i]`, where `K` is a small positive constant.
        `K` is chosen to be small enough (e.g., 1e-4) so that the primary Best-Fit
        component dominates the decision, and this secondary component primarily
        acts as a tie-breaker or a slight preference in very close scenarios.

    The total priority score for a feasible bin is the sum of these two components:
    `priority = -(bins_remain_cap[i] - item) - K * bins_remain_cap[i]`

    - For bins where the item does not fit (i.e., remaining_capacity < item):
        A very low negative priority (negative infinity) is assigned, ensuring
        these bins are effectively disqualified from selection.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the potential remaining capacity for each bin if the item were placed.
    # This value can be negative if the item does not fit.
    potential_remaining = bins_remain_cap - item

    # Initialize all priorities to a very low value (-infinity).
    # This ensures bins where the item does not fit are effectively "disqualified"
    # in an argmax operation, unless no other options exist.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Define a small tolerance for floating point comparisons to handle
    # cases where an item perfectly fits, but due to precision,
    # `potential_remaining` might be slightly negative (e.g., -1e-17).
    tolerance = 1e-9

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = potential_remaining >= -tolerance

    # --- Calculate priority components for bins where the item fits ---

    # Primary component: Best-Fit (minimize remaining space after placement).
    # A perfect fit (0 remaining) gives a score of 0, which is the highest.
    # Larger remaining spaces give more negative scores.
    best_fit_component = -potential_remaining[can_fit_mask]

    # Secondary component: Consolidation/Most-Full preference.
    # A small constant `K` to ensure this component only influences
    # the decision when Best-Fit scores are very close.
    # A larger `bins_remain_cap` means the bin is less full, so we add
    # a penalty by subtracting `K * bins_remain_cap`.
    # This biases towards bins that are already more full.
    K = 1e-4  # A small positive constant for the secondary objective.
    consolidation_component = -K * bins_remain_cap[can_fit_mask]

    # Combine the components for eligible bins.
    priorities[can_fit_mask] = best_fit_component + consolidation_component

    return priorities
```
