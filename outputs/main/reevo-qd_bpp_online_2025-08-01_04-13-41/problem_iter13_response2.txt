```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function refines the Best Fit heuristic by explicitly rewarding perfect fits
    and implicitly managing future gaps by prioritizing tight immediate fits.
    It calculates a priority score for each bin:
    - Bins where the item does not fit are given an extremely low priority (-inf).
    - Bins that result in a perfect fit receive a substantial bonus, making them
      the top priority.
    - For other fitting bins, the priority is based on minimizing the remaining
      capacity (Best Fit), aiming for snug fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # This ensures that bins where the item does not fit are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the base priority as the negative of the remaining capacity.
    # This implements the "Best Fit" logic: smaller remaining capacity means higher priority
    # (less negative score).
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # Reward perfect fits:
    # A perfect fit leaves zero remaining capacity. We use a small tolerance
    # for floating point comparisons to identify perfect fits.
    tolerance = 1e-9
    perfect_fit_mask = np.abs(potential_remaining_cap) < tolerance

    # Apply bonus only to bins that actually fit and are perfect fits.
    valid_perfect_fit_mask = fitting_bins_mask & perfect_fit_mask

    # Define a significant bonus for perfect fits. This bonus must be
    # large enough to ensure that any perfect fit is always preferred
    # over any non-perfect fit, regardless of how small the non-perfect gap is.
    # A bonus larger than the maximum possible negative score (which is roughly
    # the maximum bin capacity) guarantees this.
    # Assuming bin capacities are non-negative and items are non-negative.
    # If bins_remain_cap is empty, max() will raise an error, but problem implies it's not.
    perfect_fit_bonus = np.max(bins_remain_cap) + 1.0 if bins_remain_cap.size > 0 else 1.0

    # Apply the bonus to bins with a perfect fit.
    priorities[valid_perfect_fit_mask] += perfect_fit_bonus

    return priorities
```
