```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a "Weighted Best Fit" strategy, which is designed to
    further refine the concept of minimizing waste for online Bin Packing.

    This heuristic extends the "Best Fit" (BF) principle by considering
    not only the absolute tightness of the fit but also the item's
    relative size to the bin's *initial* capacity (implicitly 1.0 if not given).
    The goal is to prioritize a perfect fit, then a very tight fit, and for
    less tight fits, to prefer bins where the item still consumes a significant
    portion of the remaining capacity, effectively aiming to 'fill' bins more
    decisively or avoid leaving awkwardly small fragments.

    The score is calculated as a weighted sum:
    `score = w1 * (1 - (remaining_capacity_after_placement / BIN_MAX_CAP)) + w2 * (item / (BIN_MAX_CAP - remaining_capacity_after_placement))`
    Where `BIN_MAX_CAP` is the total capacity of a bin (assumed to be 1.0 if not provided,
    as typical in normalized BPP).

    A simpler form for a general priority function where `BIN_MAX_CAP` is not an input
    (and implicitly assumed constant or 1.0 for normalized problems) can focus on:
    1. Perfect Fit: Highest priority.
    2. How much the item 'completes' the bin: Higher for items that make the bin very full.
    3. The standard Best Fit (smallest absolute remainder): To ensure tight packing.

    This `v2` implementation combines these ideas:
    - **Primary Objective (Perfect Fit / Tight Fit):** Prioritize smallest absolute remainder (`-remainder`). This assigns `0` for a perfect fit, and negative values for others.
    - **Secondary Objective (Filling Progress):** Add a positive term related to how much of the bin's *original capacity* the item consumes. `item / BIN_MAX_CAP` (if BIN_MAX_CAP is assumed 1.0, this is just `item`). This encourages filling bins with larger items.

    This combines the direct waste minimization of Best Fit with an incentive to make
    bins as full as possible, particularly with larger items, which generally helps reduce
    the total number of bins.

    Score = `-(remaining_capacity_after_placement) + alpha * item`

    - Bins where the item does not fit are assigned a very low (negative infinity) priority.
    - A perfect fit (remainder = 0) yields `0 + alpha * item`. This is usually the highest score.
    - For non-perfect fits, the best fit (smallest remainder) is still preferred, but larger
      items (which contribute more to `alpha * item`) will slightly boost the priority
      of their respective bins, reflecting the desire to pack larger items more densely.
      This can help prevent a series of very small items from filling many bins with tiny
      fragments, by slightly preferring to place larger items where they fit.

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
              Typically, item sizes in Bin Packing are positive.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    # Initialize priorities. Bins that cannot fit the item will retain a very low priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find which bins the item can fit into
    fits_mask = bins_remain_cap >= item

    # Handle the edge case where item size is non-positive.
    # Typically, item sizes in BPP are positive.
    if item <= 0:
        if item == 0:
            # If item is zero, it occupies no space and creates no waste.
            # It can conceptually fit into any bin that has non-negative capacity.
            # Assign a very high score for a "perfect fit" for a zero-item.
            # For simplicity, we can assign 0 as it leaves no waste.
            priorities[fits_mask] = 0.0
        else: # item < 0, which is typically invalid for bin packing
            # All priorities remain -np.inf, effectively preventing placement.
            pass
        return priorities

    # Calculate the remaining capacity after placing the item
    remainder_after_placement = bins_remain_cap[fits_mask] - item

    # Alpha is a weighting factor. A small positive value ensures that
    # the primary Best Fit objective (minimizing remainder) still dominates,
    # but the secondary objective (filling with larger items) has a subtle influence.
    # A value of 0.1 means an item of size 1.0 adds 0.1 to the score,
    # making it slightly preferred over a perfectly similar remainder from a tiny item.
    alpha = 0.1 

    # For bins where the item fits, calculate the score.
    # The first term `-(remainder_after_placement)` is the standard Best Fit.
    # The second term `alpha * item` adds a bonus for placing larger items,
    # subtly preferring to fill bins with larger items when the remainder is similar.
    priorities[fits_mask] = -remainder_after_placement + alpha * item

    return priorities
```
