```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an improved Best Fit heuristic for online bin packing,
    directly addressing the reflection points:
    1.  **Filter invalid options:** Bins where the item does not fit are assigned an extremely low priority (-np.inf),
        ensuring they are never selected unless no other option exists (in which case a new bin should be opened).
    2.  **Reward optimal fits:** Bins that result in exactly zero remaining capacity (perfect fit)
        are given the highest possible priority score, ensuring they are always preferred.
    3.  **Minimize remaining capacity for other choices:** For bins where the item fits but is not a perfect fit,
        the priority is determined by the negative of the remaining capacity. This means bins
        leaving smaller positive remaining capacities receive higher (less negative) priority scores,
        effectively implementing the Best Fit principle among non-perfect fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value indicates the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize all priorities to a very low value. Bins that cannot fit the item
    # will retain this value, making them undesirable.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Define a sufficiently large positive bonus for perfect fits.
    # This value must be guaranteed to be greater than any possible score from a snug fit
    # (which will be negative or zero).
    PERFECT_FIT_BONUS = 1e9

    # Identify masks for different types of fitting bins:
    # 1. Bins where the item is a perfect fit (remaining capacity would be exactly 0).
    perfect_fit_mask = (potential_remaining_cap == 0)

    # 2. Bins where the item fits, but is not a perfect fit (leaves some positive capacity).
    snug_fit_mask = (potential_remaining_cap > 0)

    # Apply priorities based on the identified masks:
    # 1. Reward perfect fits with the highest priority score.
    priorities[perfect_fit_mask] = PERFECT_FIT_BONUS

    # 2. For snug fits, prioritize bins that leave the smallest positive remaining capacity.
    # This is achieved by using the negative of the remaining capacity as the score:
    # a smaller positive remainder (e.g., 1.0) results in a larger (less negative) priority (-1.0)
    # compared to a larger remainder (e.g., 10.0) which results in a smaller priority (-10.0).
    priorities[snug_fit_mask] = -potential_remaining_cap[snug_fit_mask]

    return priorities
```
