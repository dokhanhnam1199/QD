```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function implements a "Best Fit" like strategy:
    It prioritizes bins that will have the least remaining capacity after the item is placed.
    Bins that cannot fit the item are given a very low priority (negative infinity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Calculate the remaining capacity if the item were hypothetically placed in each bin
    potential_remainders = bins_remain_cap - item

    # Initialize priority scores
    # If a bin can fit the item (potential_remainders >= 0):
    #   The score is the negative of the potential remaining capacity.
    #   This makes bins with less remaining capacity (smaller positive potential_remainders)
    #   have higher (less negative or zero) scores, implementing a Best Fit strategy.
    # If a bin cannot fit the item (potential_remainders < 0):
    #   The score is set to negative infinity (np.NINF) to ensure it's never chosen
    #   unless no other viable bins exist (at which point a new bin would typically be opened).
    priorities = np.where(potential_remainders >= 0, -potential_remainders, np.NINF)

    return priorities
```
