```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function builds upon priority_v1 by incorporating an additional
    reward for utilizing bins that are already significantly filled, aiming
    to "close" bins more quickly when suitable options exist, thereby
    optimizing for future bin utility (i.e., reducing the number of partially
    filled bins).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """

    # --- Heuristic Constants ---
    # Assume a standard bin capacity for calculating fill level.
    # For problems where capacities are normalized (e.g., items and bins are
    # fractions of a standard unit), BIN_CAPACITY = 1.0 is appropriate.
    # If capacities are not normalized, this constant should reflect the
    # maximum initial capacity of a new bin.
    BIN_CAPACITY = 1.0

    # A large bonus for perfect fits (remaining capacity is exactly zero).
    # This value should be large enough to make a perfect fit significantly
    # more desirable than any non-perfect fit.
    PERFECT_FIT_BONUS = 100.0

    # A threshold to define an "awkward" remaining gap.
    # If the remaining capacity after placing the item is positive but
    # falls within (0, AWKWARD_GAP_THRESHOLD], it's considered awkward.
    # This value is heuristic and might need tuning based on the expected
    # range of item sizes and bin capacities.
    AWKWARD_GAP_THRESHOLD = 0.1

    # A penalty applied to bins that would result in an "awkward" remaining gap.
    # This penalty aims to discourage leaving small, hard-to-fill spaces.
    AWKWARD_GAP_PENALTY = 10.0

    # A bonus factor applied to bins based on their current fill level (before
    # adding the item). Bins that are already more full receive a higher bonus.
    # This encourages completing (closing) bins, reducing fragmentation and
    # the total number of open bins. This value should be small enough not
    # to override the "Best Fit" principle unless choices are very close.
    FILL_LEVEL_BONUS_FACTOR = 0.05 # e.g., 5% of the current fill level (0 to 1)

    # Epsilon for robust floating-point comparisons to zero (e.g., for perfect fit checks)
    EPSILON_FLOAT_COMP = 1e-9

    # Calculate the potential remaining capacity if the item were placed in each bin.
    # A negative value strictly means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to an extremely low value for all bins.
    # This ensures that bins where the item does not fit are never selected
    # (unless a new bin must be opened, which is an external decision).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item conceptually fits (remaining capacity is non-negative,
    # allowing for tiny negative values due to floating point inaccuracies if they are effectively zero).
    fitting_bins_mask = potential_remaining_cap >= -EPSILON_FLOAT_COMP

    # Apply the base "Best Fit" heuristic for fitting bins:
    # Prioritize bins that would leave the smallest remaining capacity (least waste).
    # Using the negative of potential_remaining_cap means smaller positive remainders yield
    # larger (less negative) priority scores.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # --- Reward Perfect Fits ---
    # Identify bins where the item fits perfectly (remaining capacity is effectively zero).
    perfect_fit_mask = np.abs(potential_remaining_cap) < EPSILON_FLOAT_COMP
    # Ensure this bonus is only applied to bins that were determined to be fitting.
    perfect_fit_mask = perfect_fit_mask & fitting_bins_mask
    priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # --- Penalize Awkward Future Gaps ---
    # Identify bins where the item fits, and the resulting remaining capacity is positive
    # but falls within the defined "awkward" range (e.g., too small to be generally useful,
    # but not zero).
    awkward_gap_mask = (potential_remaining_cap > EPSILON_FLOAT_COMP) & \
                       (potential_remaining_cap <= AWKWARD_GAP_THRESHOLD)
    # Ensure this penalty is only applied to bins that were determined to be fitting.
    awkward_gap_mask = awkward_gap_mask & fitting_bins_mask
    priorities[awkward_gap_mask] -= AWKWARD_GAP_PENALTY

    # --- New: Reward Already Fuller Bins for Future Utility ---
    # Calculate the current fill level for each fitting bin: (BIN_CAPACITY - current_remaining_capacity).
    # This encourages filling up bins that are already partially used, to reduce the number
    # of open bins, which aligns with optimizing for future bin utility.
    current_fill_levels = BIN_CAPACITY - bins_remain_cap[fitting_bins_mask]
    priorities[fitting_bins_mask] += FILL_LEVEL_BONUS_FACTOR * current_fill_levels

    return priorities
```
