```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" like heuristic, aiming to
    maximize bin utilization efficiently by favoring tighter fits and
    minimizing wasted space. It assigns higher positive scores to bins
    that, after the item is placed, would have the smallest remaining
    capacity. Bins where the item does not fit are given an extremely
    low (negative infinity) priority.

    Compared to priority_v1, this version computes a positive score where
    a higher score explicitly indicates a better fit (e.g., a perfect fit
    yields a very high positive score), which can be more intuitive for
    selection using `np.argmax`.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the priority.
    # We want to minimize the remaining capacity (potential_remaining_cap).
    # To achieve this with a positive score where higher is better, we use
    # the reciprocal of the remaining capacity. A small epsilon is added
    # to handle perfect fits (remaining_cap = 0) and avoid division by zero.
    # This makes perfect fits result in very high scores, and looser fits
    # result in progressively smaller positive scores.
    epsilon = 1e-9 # A small value to prevent division by zero for perfect fits (potential_remaining_cap == 0)
    priorities[fitting_bins_mask] = 1.0 / (potential_remaining_cap[fitting_bins_mask] + epsilon)

    return priorities
```
