```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements a sophisticated "Best Fit" strategy with a
    deterministic tie-breaking mechanism, adhering to the 'minimize waste'
    and 'avoid arbitrary choices' reflection.

    Primary Goal (Best Fit - Minimize Absolute Waste):
    - The main objective is to find a bin that, after placing the item,
      leaves the smallest *absolute* amount of remaining capacity. This is
      a classic and effective approach for Bin Packing.
    - The score for a fitting bin is calculated as `-(remaining_capacity - item_size)`.
      A perfect fit (where remaining_capacity - item_size = 0) yields a score of 0,
      which is the highest possible priority. A bin leaving 0.1 units of space
      gets a score of -0.1. This formulation naturally prioritizes tighter fits
      by maximizing the score.

    Secondary Goal (Tie-breaking - Prefer Lower Bin Index):
    - When multiple bins yield the exact same primary score (e.g., several perfect fits,
      or multiple bins leading to the same minimal non-zero waste), a deterministic
      tie-breaking rule is applied to ensure the selection is not arbitrary.
    - Bins with a lower index are slightly preferred. This is achieved by
      subtracting a very small, index-dependent value from the primary score.
      Specifically, `score_penalty = bin_index * EPSILON_FOR_TIE_BREAKING`.
      This ensures that among equally good primary options, the bin with the
      smallest index will receive a marginally higher overall priority score,
      making the selection predictable.

    This approach enhances the robustness and predictability of the online
    bin packing decision-making process by combining a strong waste-minimization
    strategy with a clear, non-arbitrary tie-breaking rule.

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    # Initialize priorities. Bins that cannot fit the item will have a very low priority.
    # Using -np.inf ensures they are never selected unless no other option exists (which
    # implies no item can be placed).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Handle the edge case where item size is non-positive.
    # Typically, item sizes in Bin Packing are positive.
    if item <= 0:
        if item == 0:
            # If the item size is 0, it conceptually fits into any bin with non-negative capacity.
            # It causes no waste, so assign a perfect fit score (0) to all such bins.
            # Tie-breaking isn't strictly necessary here as all fitting bins get the same score,
            # and `np.argmax` will naturally pick the lowest index in case of ties among these.
            priorities[bins_remain_cap >= 0] = 0.0
        else: # item < 0, which is an invalid scenario for bin packing
            # No bin can fit a negative item, so all priorities remain -np.inf.
            pass
        return priorities

    # Identify which bins the item can physically fit into.
    fits_mask = bins_remain_cap >= item

    # Calculate the remaining capacity for the bins where the item fits.
    remainder_after_placement = bins_remain_cap[fits_mask] - item

    # Primary priority: Best Fit (minimize absolute remainder).
    # We negate the remainder so that smaller remainders result in higher (less negative) scores.
    # A perfect fit (remainder 0) yields a score of 0.
    best_fit_scores = -remainder_after_placement

    # Secondary priority: Tie-breaking by preferring bins with lower original indices.
    # To implement this, we subtract a very small, index-dependent penalty from the score.
    # The `EPSILON_FOR_TIE_BREAKING` must be sufficiently small so it does not
    # alter the primary ordering based on `best_fit_scores` unless two or more
    # primary scores are exactly identical. A value like 1e-12 is generally
    # safe for typical float precision.
    EPSILON_FOR_TIE_BREAKING = 1e-12

    # Get the original indices of the bins that can fit the item.
    original_fitting_indices = np.where(fits_mask)[0]

    # Calculate the tie-breaking penalties: smaller index -> smaller penalty -> higher final score.
    tie_breaker_penalties = original_fitting_indices * EPSILON_FOR_TIE_BREAKING

    # Combine primary and secondary priorities.
    # The penalties are subtracted from the best_fit_scores.
    priorities[fits_mask] = best_fit_scores - tie_breaker_penalties

    return priorities
```
