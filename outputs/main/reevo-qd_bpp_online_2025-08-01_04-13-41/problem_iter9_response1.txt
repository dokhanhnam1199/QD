```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an improved "Best Fit" like heuristic.
    It prioritizes bins that, after the item is placed, would have the
    smallest remaining capacity, while also rewarding perfect fits and
    penalizing awkward small gaps for long-term efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Define constants for heuristic tuning
    # A large bonus for perfect fits, ensuring they are always preferred.
    PERFECT_FIT_BONUS = 1000.0

    # Threshold for what is considered an "awkwardly small" remaining gap.
    # A gap smaller than this proportion of the item's size is penalized.
    # This aims to avoid leaving tiny, potentially unusable fragments.
    AWKWARD_SMALL_GAP_RELATIVE_THRESHOLD = 0.05 # e.g., 5% of item size

    # The magnitude of penalty for an awkward small gap.
    # Proportional to the item size to scale with problem instance.
    AWKWARD_SMALL_GAP_PENALTY = item * 0.5 # A substantial penalty

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Bins where the item does not fit will have -np.inf priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Extract potential remaining capacities for only the fitting bins
    fitting_potential_rem = potential_remaining_cap[fitting_bins_mask]

    # Step 1: Base Best-Fit heuristic
    # Prioritize bins that leave the smallest remaining capacity.
    # A smaller positive remaining capacity (e.g., 1.0) results in a larger
    # (less negative) priority score (e.g., -1.0).
    base_scores = -fitting_potential_rem

    # Initialize adjustments for all fitting bins
    adjustments = np.zeros_like(base_scores)

    # Step 2: Reward perfect fits
    # If the remaining capacity is exactly 0, add a significant bonus.
    perfect_fit_mask = (fitting_potential_rem == 0)
    adjustments[perfect_fit_mask] += PERFECT_FIT_BONUS

    # Step 3: Penalize awkward small gaps
    # If the remaining capacity is positive but very small (below a threshold),
    # apply a penalty. This discourages creating fragments that are too small
    # to be useful for future items, promoting long-term efficiency.
    # Only apply if item is positive to avoid division by zero or nonsensical thresholds.
    if item > 0:
        awkward_small_gap_mask = (fitting_potential_rem > 0) & \
                                 (fitting_potential_rem < item * AWKWARD_SMALL_GAP_RELATIVE_THRESHOLD)
        adjustments[awkward_small_gap_mask] -= AWKWARD_SMALL_GAP_PENALTY

    # Combine base scores with adjustments
    priorities[fitting_bins_mask] = base_scores + adjustments

    return priorities
```
