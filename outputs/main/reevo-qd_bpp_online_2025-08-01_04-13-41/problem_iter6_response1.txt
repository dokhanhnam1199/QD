```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Weighted Best Fit" heuristic, refined based on the
    reflection. It aims to minimize waste by strongly prioritizing bins that,
    after the item is placed, would have the smallest remaining capacity.
    It strategically uses an inverse relationship to apply a continuous and
    exponentially increasing bonus as the remaining capacity approaches zero,
    effectively making perfect fits (zero remaining capacity) or very tight
    fits overwhelmingly preferred. Bins where the item does not fit are
    given an extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # This directly implements "Validate choices" by effectively filtering out
    # bins where the item does not fit.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, calculate priority using an inverse relationship.
    # This serves as the core "Optimize locally (Best Fit)" mechanism,
    # where a smaller positive remaining capacity yields a larger positive priority.
    # It also acts as the "Strategically reward ideal outcomes" component.
    # We add a small epsilon to the denominator to prevent division by zero for perfect fits
    # and to ensure a very high, but finite, score for perfect fits. This creates a
    # strong, continuous "bonus" where the priority rises sharply as remaining capacity approaches zero.
    # For example, a perfect fit (0 remaining) gets 1/EPSILON, a very tight fit (0.001 remaining) gets 1/0.001.
    EPSILON = 1e-9  # A very small number to handle potential_remaining_cap being 0

    # Apply the inverse function only to fitting bins.
    # This results in positive priorities for fitting bins, with higher values for better fits.
    priorities[fitting_bins_mask] = 1.0 / (potential_remaining_cap[fitting_bins_mask] + EPSILON)

    return priorities
```
