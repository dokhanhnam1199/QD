```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function refines the "Best Fit" heuristic with more granular rewards
    and penalties. It prioritizes bins that leave minimal waste, specifically
    rewarding perfect fits with a substantial bonus and applying a graduated
    penalty to very small, non-zero remaining capacities. The small gap
    threshold is dynamically calculated relative to the item size for improved
    robustness across various item scales.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Constants for strategic weighting. These values are heuristics and
    # may need tuning based on the typical range of item sizes and bin capacities.
    PERFECT_FIT_BONUS = 1000.0  # A very high bonus for leaving exactly zero capacity.
    SMALL_GAP_MAX_PENALTY = -200.0 # Maximum penalty for gaps just above zero.
    # The threshold below which a non-zero remaining capacity is considered "small" and awkward.
    # Set as a factor of the item size, allowing it to scale. E.g., a gap is "small"
    # if it's less than 20% of the item's size.
    SMALL_GAP_THRESHOLD_FACTOR = 0.2
    # A small epsilon for floating-point comparisons and to prevent division by zero,
    # especially when remaining capacity is very close to zero.
    EPSILON = 1e-9

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Bins where the item does not fit will remain at -np.inf, ensuring they are not selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= -EPSILON # Allow for very tiny negative due to float precision

    # Extract potential remaining capacities only for the bins where the item fits.
    fitting_rem_cap = potential_remaining_cap[fitting_bins_mask]

    # 1. Base Best-Fit Score:
    # We want to minimize the remaining capacity (fitting_rem_cap),
    # so we use its negative as the priority score. A smaller positive
    # remaining capacity (e.g., 1.0) results in a larger (less negative)
    # priority score (e.g., -1.0).
    fitting_priorities = -fitting_rem_cap

    # Calculate dynamic small gap threshold based on the item size.
    # Ensure item is not zero to prevent issues with threshold calculation.
    # If item is very small, threshold might be very small too, but it's relative.
    actual_small_gap_threshold = item * SMALL_GAP_THRESHOLD_FACTOR
    # Ensure threshold is not effectively zero to avoid division by zero later,
    # or if item itself is zero (though item size should be positive).
    actual_small_gap_threshold = max(actual_small_gap_threshold, EPSILON)

    # 2. Apply Perfect Fit Bonus:
    # Identify bins where the item fits exactly, leaving zero remaining capacity.
    # Use np.isclose for robust floating-point equality comparison.
    perfect_fit_mask = np.isclose(fitting_rem_cap, 0.0, atol=EPSILON)
    fitting_priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Apply Graduated Small Gap Penalty:
    # Identify bins that would be left with a small, non-zero remaining capacity.
    # These gaps are penalized on a sliding scale: the closer the gap is to zero
    # (but not zero), the stronger the penalty.
    # We ensure `fitting_rem_cap > EPSILON` to not penalize perfect fits.
    small_gap_mask = (fitting_rem_cap > EPSILON) & (fitting_rem_cap < actual_small_gap_threshold)

    # Calculate the penalty multiplier: it's 1 when rem_cap is near 0 and approaches 0
    # as rem_cap approaches actual_small_gap_threshold.
    # This linearly scales the penalty.
    # Ensure denominator is not zero. `actual_small_gap_threshold` is guaranteed > EPSILON.
    penalty_multiplier = (actual_small_gap_threshold - fitting_rem_cap[small_gap_mask]) / actual_small_gap_threshold
    
    # Apply the graduated penalty. SMALL_GAP_MAX_PENALTY is already negative.
    fitting_priorities[small_gap_mask] += SMALL_GAP_MAX_PENALTY * penalty_multiplier

    # Assign the calculated priorities back to the main priorities array for fitting bins.
    priorities[fitting_bins_mask] = fitting_priorities

    return priorities
```
