```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version implements a Best-Fit (BF) inspired priority.
    It prioritizes bins that, after accommodating the item, would have the
    smallest remaining capacity. This encourages filling bins as much as
    possible to leave larger empty bins for potentially larger future items.
    Bins that cannot fit the item receive a very low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more desirable bin.
    """
    # Initialize priorities for all bins to a very low value (-infinity).
    # This ensures that any bin that can accommodate the item will have a
    # higher priority than those that cannot.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins that can accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit, calculate their priority score.
    # The Best Fit strategy aims to minimize the remaining space after placement.
    # This means we want to maximize `-(bins_remain_cap - item)`.
    # Equivalently, we want to maximize `item - bins_remain_cap`.
    # A perfect fit (bins_remain_cap == item) would result in a score of 0,
    # which is the highest possible score. A score of -1 implies 1 unit of space
    # left, -2 implies 2 units, etc. Higher values (closer to 0) are preferred.
    fitting_bins_priorities = item - bins_remain_cap[can_fit_mask]

    # Assign the calculated priorities back to the `priorities` array
    # for the bins that can fit.
    priorities[can_fit_mask] = fitting_bins_priorities

    return priorities
```
