```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an enhanced Best-Fit strategy.

    This heuristic directly implements the Best-Fit objective: place the item into the bin that
    minimizes the remaining capacity after the item is placed. To represent this as a priority
    score (where higher is better), we maximize the negative of the remaining capacity
    (`-(bin_capacity - item)`). This ensures bins leaving less "slack" get higher priority.

    This approach implicitly handles tie-breaking for item = 0 by preferring bins that are already
    more full (have less remaining capacity).

    Args:
        item: Size of item to be added to the bin. Assumed to be non-negative.
        bins_remain_cap: Array of remaining capacities for each bin. Assumed to be non-negative.

    Return:
        Array of same size as bins_remain_cap with a priority score for each bin.
        Bins where the item does not fit receive a very low (negative infinity) priority.
    """
    # Initialize priorities with a very low value (-np.inf) for bins where the item cannot fit.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a mask for bins where the item can actually fit.
    # An item fits if its size is less than or equal to the bin's remaining capacity.
    can_fit_mask = (bins_remain_cap >= item)

    # For bins where the item fits, calculate the priority score.
    # The score is calculated as the negative of the remaining capacity after placing the item.
    # Maximizing this value means minimizing (capacity - item), which is the core of Best-Fit.
    if np.any(can_fit_mask):
        fitting_bins_capacities = bins_remain_cap[can_fit_mask]
        
        # Calculate `-(remaining_capacity_after_placement)`.
        # `remaining_capacity_after_placement` = `fitting_bins_capacities - item`.
        # So, `scores_for_fitting_bins` = `-(fitting_bins_capacities - item)`.
        # A smaller `(capacity - item)` (i.e., a tighter fit) results in a score closer to 0 (or positive).
        # A perfect fit (capacity == item) results in a score of 0.
        # This makes the score directly proportional to how little space is left in the bin.
        scores_for_fitting_bins = -(fitting_bins_capacities - item)
        
        priority_scores[can_fit_mask] = scores_for_fitting_bins

    return priority_scores
```
