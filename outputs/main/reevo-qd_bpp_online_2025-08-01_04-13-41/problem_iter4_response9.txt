```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a hybrid "Best Fit" and "Worst Fit" strategy
    to strategically optimize for efficiency. For items considered 'large'
    (above a certain fraction of the bin capacity), it prioritizes bins that,
    after the item is placed, would have the smallest remaining capacity
    (similar to Best Fit), aiming to fill bins as much as possible and close them.
    For items considered 'small', it prioritizes bins that leave the *largest*
    remaining capacity (similar to Worst Fit), aiming to keep tighter-fitting bins
    available for larger items and to spread small items across less-utilized bins.
    This aims to avoid creating many small, hard-to-fill gaps for tiny items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The total capacity of a single bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to an extremely low value for all bins.
    # This ensures that bins where the item does not fit will never be selected
    # (unless no bin can fit the item, in which case a new bin would typically be opened
    # by the higher-level bin packing algorithm).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Define a threshold for what constitutes a "small" item.
    # This is a heuristic parameter and might need tuning based on typical item distributions.
    # For example, if an item is less than 20% of the bin capacity, treat it as small.
    SMALL_ITEM_THRESHOLD_RATIO = 0.2
    small_item_threshold = SMALL_ITEM_THRESHOLD_RATIO * bin_capacity

    if item <= small_item_threshold:
        # Strategy for small items: "Worst Fit"
        # Prioritize bins that will have *more* remaining capacity after placing the item.
        # This spreads small items out and preserves tighter spaces for larger items.
        # A higher potential_remaining_cap (more space left) results in a higher priority score.
        priorities[fitting_bins_mask] = potential_remaining_cap[fitting_bins_mask]
    else:
        # Strategy for larger items: "Best Fit"
        # Prioritize bins that will have *less* remaining capacity after placing the item.
        # This aims to fill bins as much as possible and 'close them off' efficiently.
        # A smaller potential_remaining_cap (less space left) results in a higher priority score
        # (hence the negative sign to convert minimizing to maximizing).
        priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    return priorities
```
