```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic extends the "Best Fit" strategy, building upon priority_v1,
    by incorporating a secondary objective to "optimize future bin utilization."

    The primary score is `-(remaining_capacity_after_placement / item_size)`,
    which aims to minimize the fractional waste relative to the item's size
    (prioritizing snug fits).

    To "optimize future bin utilization" and encourage better packing efficiency
    over time, a small penalty proportional to the bin's current remaining
    capacity is added. This acts as a tie-breaker:
    - If two bins offer a very similar "best fit" (primary score), the one that
      is *already more full* (i.e., has less remaining capacity) will be
      slightly preferred.
    - This strategy helps consolidate items into existing, partially-filled
      bins, potentially allowing them to become full and "closed" faster,
      thus reducing the number of active bins and preserving larger chunks
      of space in other bins for future, larger items.

    The overall score is calculated as:
    `-(remaining_capacity_after_placement / item_size) - EPSILON * current_remaining_capacity`

    Where EPSILON is a very small positive constant, ensuring the primary
    "relative waste" objective dominates, and the secondary term only acts
    as a tie-breaker.

    - Bins where the item does not fit are assigned a very low (negative infinity) priority.
    - A perfect fit (remaining_capacity - item_size = 0) still yields the
      highest possible primary score (0), but will be slightly modulated by the
      tie-breaker.

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
              Typically, item sizes in Bin Packing are positive.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    # A very small constant for the tie-breaking penalty.
    # It must be small enough not to override the primary best-fit objective.
    EPSILON = 1e-9

    # Initialize priorities. Bins that cannot fit the item will retain a very low priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find which bins the item can fit into
    fits_mask = bins_remain_cap >= item

    # Handle the edge case where item size is non-positive.
    # Typically, item sizes in BPP are positive.
    if item <= 0:
        if item == 0:
            # If item is zero, it occupies no space and creates no waste.
            # It can conceptually fit into any bin that has non-negative capacity.
            # Assign a base score of 0.0 (no relative waste).
            # The tie-breaker then prefers bins that are currently more full (smaller bins_remain_cap).
            priorities[fits_mask] = 0.0 - EPSILON * bins_remain_cap[fits_mask]
        else: # item < 0, which is typically invalid for bin packing
            # All priorities remain -np.inf, effectively preventing placement.
            pass
        return priorities

    # Calculate the remaining capacity after placing the item
    remainder_after_placement = bins_remain_cap[fits_mask] - item

    # Calculate the primary 'relative waste' score (Best Fit principle).
    # We want to minimize (remainder_after_placement / item).
    # By taking the negative of this ratio, we convert it to a maximization problem.
    primary_score = -(remainder_after_placement / item)

    # Apply the tie-breaking penalty:
    # Subtract a small value proportional to the *current* remaining capacity.
    # This means bins that are currently more full (smaller bins_remain_cap)
    # will get a slightly higher score among candidates with similar primary scores.
    tie_breaker_penalty = EPSILON * bins_remain_cap[fits_mask]

    priorities[fits_mask] = primary_score - tie_breaker_penalty

    return priorities
```
