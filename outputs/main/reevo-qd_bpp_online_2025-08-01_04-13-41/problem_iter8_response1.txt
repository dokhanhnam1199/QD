```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function enhances the "Best Fit" strategy by giving an extremely high
    priority to bins that would result in a perfect fit (zero remaining capacity).
    For other fitting bins, it uses a score based on the negative of the remaining
    capacity, similar to standard Best Fit, to prioritize tighter fits. This approach
    explicitly aims to "fit items tightly" by making perfect fits the most desirable
    outcome, and smaller positive remaining capacities more desirable than larger ones.
    Bins where the item does not fit are given an extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # -np.inf ensures bins where the item does not fit will never be selected by argmax,
    # unless all bins are too small.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (potential_remaining_cap >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Identify bins that would result in a perfect fit (remaining capacity == 0).
    perfect_fit_mask = (potential_remaining_cap == 0) & fitting_bins_mask

    # Assign a distinctively high score for perfect fits.
    # This value (e.g., 1.0) ensures that a perfect fit is always prioritized over any
    # non-perfect fit, as other non-perfect fitting scores will be <= 0.
    PERFECT_FIT_SCORE = 1.0 
    priorities[perfect_fit_mask] = PERFECT_FIT_SCORE

    # For other fitting bins (those where the item fits but it's not a perfect fit),
    # use the negative of the potential_remaining_cap.
    # This prioritizes smaller positive remaining capacities (e.g., -0.1 is better than -0.5).
    non_perfect_fitting_mask = fitting_bins_mask & ~perfect_fit_mask
    priorities[non_perfect_fitting_mask] = -potential_remaining_cap[non_perfect_fitting_mask]

    return priorities
```
