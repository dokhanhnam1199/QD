```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function extends the "Best Fit" heuristic by:
    1. Strongly rewarding perfect packing (remaining capacity is zero).
    2. Crucially, penalizing "awkward" small gaps (remaining capacity is small but non-zero),
       as these might be hard to fill optimally in the future, thus improving long-term
       bin utilization.
    3. For other cases (normal-sized gaps), it applies the "Best Fit" logic
       (prioritizing bins that leave the smallest remaining capacity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Define constants for the priority function. These values are tunable hyperparameters.
    # EPSILON for floating point comparison to zero, to handle precision issues.
    EPSILON = 1e-9
    # Priority score for bins where the item fits perfectly (remaining capacity is zero).
    # This should be a very high positive value, ensuring perfect fits are always preferred.
    VERY_HIGH_PRIORITY = 100.0
    # Penalty score for bins that would result in a "small, awkward gap".
    # This should be a very low negative value, making these options highly undesirable.
    VERY_LOW_PENALTY = -100.0
    # Threshold defining what constitutes a "small, awkward gap".
    # For example, if bin capacities are normalized to 1.0, 0.2 means any remaining
    # capacity between 0 and 0.2 (exclusive of 0) is considered awkward.
    # This threshold can be adjusted based on the expected item size distribution.
    SMALL_GAP_THRESHOLD = 0.2

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value indicates the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities for all bins to a very low value (-infinity).
    # This ensures that bins where the item does not fit will never be selected
    # by argmax unless no bin can fit the item, which would require external
    # handling (e.g., opening a new bin).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item actually fits (remaining capacity is non-negative,
    # accounting for potential floating-point inaccuracies).
    fitting_bins_mask = potential_remaining_cap >= -EPSILON

    # Extract the potential remaining capacities for only the fitting bins.
    fitting_rem_caps = potential_remaining_cap[fitting_bins_mask]

    # Initialize a temporary array to store priorities for the fitting bins.
    temp_priorities = np.zeros_like(fitting_rem_caps)

    # Apply the priority rules based on the remaining capacity:

    # Rule 1: Perfect fit - remaining capacity is exactly zero (or very close to it).
    # This is given the highest priority.
    perfect_fit_mask = fitting_rem_caps < EPSILON
    temp_priorities[perfect_fit_mask] = VERY_HIGH_PRIORITY

    # Rule 2: Small, awkward gap - remaining capacity is small but not zero.
    # These are heavily penalized to avoid creating difficult-to-fill spaces.
    # This mask explicitly excludes perfect fits by checking `fitting_rem_caps >= EPSILON`.
    small_awkward_gap_mask = (fitting_rem_caps >= EPSILON) & (fitting_rem_caps <= SMALL_GAP_THRESHOLD)
    temp_priorities[small_awkward_gap_mask] = VERY_LOW_PENALTY

    # Rule 3: Normal gap - remaining capacity is larger than the small gap threshold.
    # For these, apply the "Best Fit" principle: prioritize bins that leave the
    # smallest remaining capacity (i.e., maximize -remaining_capacity).
    normal_gap_mask = fitting_rem_caps > SMALL_GAP_THRESHOLD
    temp_priorities[normal_gap_mask] = -fitting_rem_caps[normal_gap_mask]

    # Assign the calculated temporary priorities back to the main priorities array for the fitting bins.
    priorities[fitting_bins_mask] = temp_priorities

    return priorities
```
