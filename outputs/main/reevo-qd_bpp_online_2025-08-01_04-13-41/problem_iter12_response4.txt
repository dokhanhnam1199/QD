```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an enhanced "Best Fit" like heuristic focused on
    optimizing long-term bin utilization. It prioritizes perfect fits,
    strongly penalizes choices resulting in "awkward" very small non-zero
    remaining capacities, and generally prefers minimizing the remaining space
    in a bin for all other valid fits. This aims to keep bins either fully packed
    or with substantial remaining space for future, potentially larger items,
    avoiding "unfillable" small gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         It is assumed that bin capacities are on a similar scale
                         (e.g., normalized, typically to 1.0) for the constant
                         thresholds to be effective.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Define constants for the heuristic. These values may need tuning
    # depending on the typical scale of item sizes and bin capacities.
    # We assume bin capacities are normalized, for example, between 0 and 1.0.

    # Threshold for considering a remaining capacity as "effectively zero"
    # due to floating point inaccuracies. This helps identify true perfect fits.
    EPSILON_PERFECT_FIT = 1e-9

    # This threshold defines what constitutes a "very small, awkward gap".
    # For a bin with capacity 1.0, 0.05 means any remaining capacity less than 5%
    # of the bin size (but greater than EPSILON_PERFECT_FIT) will be penalized.
    # This value targets remaining capacities that are too small to be useful
    # for most future items, yet not zero.
    AWKWARD_GAP_THRESHOLD = 0.05

    # This is the additional penalty applied to bins that result in an
    # "awkward gap". It must be sufficiently large to make an awkward gap
    # significantly less desirable than a slightly larger, non-awkward gap.
    AWKWARD_GAP_PENALTY = 0.5  # A substantial reduction in priority

    # Score assigned to a perfect fit. This ensures perfect fits are always
    # the top priority. Using a high finite value is generally robust.
    PERFECT_FIT_SCORE = np.finfo(float).max

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # -np.inf ensures that bins where the item does not fit will never be selected.
    # If no bin has a priority greater than -inf, it typically means a new bin
    # should be opened.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item actually fits. We allow a small tolerance
    # (EPSILON_PERFECT_FIT) for floating point precision.
    fitting_bins_mask = potential_remaining_cap >= -EPSILON_PERFECT_FIT

    # Get the indices of bins where the item can be placed.
    fitting_indices = np.where(fitting_bins_mask)[0]

    # If no bin can accommodate the item, return the initialized priorities (all -inf).
    if len(fitting_indices) == 0:
        return priorities

    # For fitting bins, calculate the effective remaining capacity.
    # We use np.maximum(0.0, ...) to clamp any slightly negative values (due to epsilon) to zero,
    # ensuring they are treated as having no remaining capacity for scoring.
    effective_potential_remaining_cap = np.maximum(0.0, potential_remaining_cap[fitting_indices])

    # Calculate the base scores for fitting bins based on the Best Fit principle:
    # A smaller positive remaining capacity is better (less immediate waste).
    # The negative of effective_potential_remaining_cap serves this purpose.
    base_scores = -effective_potential_remaining_cap

    # Identify bins that result in a "perfect fit" (remaining capacity is effectively zero).
    # These bins receive the highest possible score.
    perfect_fit_mask = effective_potential_remaining_cap <= EPSILON_PERFECT_FIT
    base_scores[perfect_fit_mask] = PERFECT_FIT_SCORE

    # Identify bins that would result in an "awkward gap". These are non-zero gaps
    # that are smaller than the defined threshold.
    awkward_gap_mask = (effective_potential_remaining_cap > EPSILON_PERFECT_FIT) & \
                       (effective_potential_remaining_cap < AWKWARD_GAP_THRESHOLD)

    # Apply the penalty to bins creating awkward gaps. This reduces their priority
    # significantly, discouraging choices that lead to hard-to-fill, wasted space.
    base_scores[awkward_gap_mask] -= AWKWARD_GAP_PENALTY

    # Assign the calculated scores back to the main priorities array for the fitting bins.
    priorities[fitting_indices] = base_scores

    return priorities
```
