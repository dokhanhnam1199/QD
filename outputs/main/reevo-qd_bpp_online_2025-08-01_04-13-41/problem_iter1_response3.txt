```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements a variation of the "Best Fit" strategy for online bin packing.
    It prioritizes bins that, if the item is placed, will leave the smallest amount of
    remaining capacity (i.e., the item fits most "snugly"). Bins where the item does not
    fit are assigned a very low (negative infinity) priority.

    The score is calculated as `-(remaining_capacity - item_size)`.
    A perfect fit (remaining_capacity - item_size = 0) yields a score of 0,
    which is the highest possible score among bins that fit the item.
    A looser fit (e.g., remaining_capacity - item_size = 5) yields a negative score (-5),
    making it less preferred than a tighter fit (-2).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    # Initialize priorities. Bins that cannot fit the item will retain a very low priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find which bins the item can fit into
    fits_mask = bins_remain_cap >= item

    # For bins where the item fits, calculate the 'tightness' score.
    # We want to minimize (bins_remain_cap - item) among fitting bins.
    # By taking the negative of this difference, we convert the minimization
    # problem into a maximization problem for the priority score.
    # E.g., a perfect fit (diff=0) gets score 0.
    # A tight fit (diff=2) gets score -2.
    # A loose fit (diff=10) gets score -10.
    # Maximize -> choose 0, then -2, then -10.
    priorities[fits_mask] = -(bins_remain_cap[fits_mask] - item)

    return priorities
```
