```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an enhanced "Best Fit" heuristic designed to
    strategically select the optimal bin for an item in an online Bin Packing
    scenario. It rigorously applies the principles of evaluating impact,
    filtering infeasible options, and incentivizing optimal local solutions.

    1.  **Evaluate choices based on their impact**: The primary scoring mechanism
        is based on the remaining capacity of a bin *after* the item is placed.
        A smaller remaining capacity (meaning a fuller bin) yields a higher
        priority, directly reflecting a more positive impact on space utilization.

    2.  **Filter infeasible options**: Bins that cannot accommodate the current
        item are immediately disqualified by assigning them an extremely low
        priority (`-np.inf`), ensuring they are never chosen.

    3.  **Incentivize optimal local solutions**: A significant bonus is applied
        to bins that achieve a perfect fit, i.e., their remaining capacity becomes
        exactly zero after the item is placed. This strongly encourages the
        complete filling of bins, which is a crucial local optimization for
        minimizing the total number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin. This array should
                         represent all currently available bins, including
                         conceptually an "empty new bin" if the selection logic
                         can dynamically open new bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative) will be selected.
        In scenarios where multiple bins yield the same highest priority score,
        the first such bin encountered (i.e., the one with the lowest index)
        will be implicitly selected if `np.argmax` is used for selection.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value indicates that the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities. This step acts as the "filter infeasible options".
    # Bins where the item does not fit are given an infinitely low priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the bins where the item can actually be placed (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the base priority. This implements the "Best Fit"
    # aspect and "evaluates choices based on their impact". By negating the
    # potential remaining capacity, a smaller remaining capacity (better fit)
    # results in a higher (less negative) priority score.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # Strategic Enhancement: Introduce a bonus for "optimal local solutions"
    # specifically for perfect fits. A perfect fit (0 remaining capacity) is
    # highly desirable as it fully utilizes a bin.
    PERFECT_FIT_BONUS = 1.0

    # Identify bins where placing the item results in a perfect fit.
    # np.isclose is used for robust floating-point comparison with zero.
    perfect_fit_mask = np.isclose(potential_remaining_cap, 0.0)

    # Apply the significant bonus to bins that achieve a perfect fit.
    # This ensures that a perfect fit will always have a higher priority than
    # any non-perfect fit, regardless of how small the non-perfect remaining
    capacity is.
    priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    return priorities
```
