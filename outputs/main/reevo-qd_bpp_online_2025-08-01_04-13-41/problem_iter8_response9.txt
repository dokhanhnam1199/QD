```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function refines the "Best Fit" heuristic from v1 by applying a more
    nuanced and dynamically scaled penalty for creating small, awkward gaps.
    It strongly aims to minimize waste, provides a significant reward for
    perfect fits, and actively discourages the creation of small, hard-to-fill
    residual capacities in a continuous manner.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Define constants for strategic weighting. Tuning these values is crucial
    # and highly dependent on the typical scale of item sizes and bin capacities.
    # These values are chosen to significantly influence selection over the base Best-Fit score.
    
    # A very significant bonus for leaving exactly zero capacity, ensuring it's the top priority.
    # Increased from v1 to make it even more compelling.
    PERFECT_FIT_BONUS = 500.0  

    # The threshold below which a non-zero remaining capacity is considered "small" and awkward.
    # This should be an absolute value appropriate for the typical range of bin capacities.
    # For example, if bin capacities are typically 1.0, 0.15 represents 15% of capacity.
    # Slightly increased from v1 to capture a wider range of "awkward" gaps.
    SMALL_GAP_THRESHOLD = 0.15 

    # The maximum penalty applied to the smallest non-zero gaps (those just above zero).
    # The penalty smoothly decreases as the gap approaches SMALL_GAP_THRESHOLD.
    # Increased penalty from v1 to strongly discourage small gaps.
    MAX_SMALL_GAP_PENALTY = -200.0 

    # Epsilon for robust floating-point comparisons (e.g., checking for exact zero).
    EPSILON = 1e-9 
    
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Bins where the item does not fit will remain at -np.inf, ensuring they are not selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    # Using -EPSILON to handle potential precision issues where a perfect fit might result in a tiny negative number.
    fitting_bins_mask = potential_remaining_cap >= -EPSILON

    # Extract potential remaining capacities only for the bins where the item fits.
    fitting_rem_cap = potential_remaining_cap[fitting_bins_mask]

    # 1. Base Best-Fit Score:
    # We want to minimize the remaining capacity (`fitting_rem_cap`),
    # so we use its negative as the primary component of the priority score.
    # A smaller positive remaining capacity results in a larger (less negative) priority score.
    fitting_priorities = -fitting_rem_cap

    # 2. Apply Perfect Fit Bonus:
    # Identify bins where the item fits exactly, leaving approximately zero remaining capacity.
    # These are highly rewarded to ensure they are picked over other "Best Fit" options.
    perfect_fit_mask = np.abs(fitting_rem_cap) < EPSILON
    fitting_priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Apply Nuanced Small Gap Penalty:
    # This penalty applies to small, non-zero remaining capacities within a defined threshold.
    # The penalty is strongest for gaps just above zero and smoothly decreases to zero
    # as the gap approaches SMALL_GAP_THRESHOLD.
    
    # Identify bins that would be left with a small, non-zero remaining capacity.
    # Ensure we don't penalize perfect fits (which are handled by the bonus).
    # Use EPSILON to ensure we truly target small positive gaps.
    small_gap_region_mask = (fitting_rem_cap > EPSILON) & (fitting_rem_cap < SMALL_GAP_THRESHOLD)
    
    # Calculate penalty for these bins.
    # Ensure SMALL_GAP_THRESHOLD is positive to prevent division by zero or invalid scaling.
    if SMALL_GAP_THRESHOLD > EPSILON:
        # The penalty factor is 1 when rem_cap is very small (near EPSILON), and approaches 0
        # when rem_cap approaches SMALL_GAP_THRESHOLD.
        # This makes the penalty strongest for the smallest non-zero gaps.
        penalty_factors = 1 - (fitting_rem_cap[small_gap_region_mask] / SMALL_GAP_THRESHOLD)
        # Apply the max penalty scaled by the factor.
        fitting_priorities[small_gap_region_mask] += MAX_SMALL_GAP_PENALTY * penalty_factors
    # If SMALL_GAP_THRESHOLD is very small or zero, and there are still items in the 'small_gap_region',
    # apply the full penalty to them as they represent effectively unusable space.
    elif np.any(small_gap_region_mask): 
        fitting_priorities[small_gap_region_mask] += MAX_SMALL_GAP_PENALTY

    # Assign the calculated priorities back to the main priorities array for fitting bins.
    priorities[fitting_bins_mask] = fitting_priorities

    return priorities
```
