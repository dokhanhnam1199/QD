```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function refines the "Best Fit" heuristic by strategically predicting
    and penalizing awkward future gaps while significantly rewarding perfect fits.

    The prioritization is based on:
    1. A base Best-Fit score (minimizing immediate waste).
    2. A substantial bonus for bins where the item perfectly fills the remaining capacity (0 waste).
    3. A penalty for bins that would be left with a very small, "awkward" remaining capacity,
       which might be difficult to fill efficiently with future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Define constants for the heuristic
    # A significant bonus for perfect fits, ensuring they are always preferred
    # over any non-zero waste. This value should be much larger than typical
    # -(potential_remaining_cap) values.
    PERFECT_FIT_BONUS = 1000.0

    # Threshold for a "small" remaining gap, relative to the item size.
    # If remaining_cap > 0 and remaining_cap < SMALL_GAP_THRESHOLD_RATIO * item,
    # it's considered an awkward gap. A small item leaving a small gap is less
    # problematic than a large item leaving a small gap.
    SMALL_GAP_THRESHOLD_RATIO = 0.15 # e.g., 15% of the item size
    # A penalty for awkward gaps, discouraging their creation.
    # This value should also be significant enough to steer selection away
    # from creating such gaps.
    SMALL_GAP_PENALTY = 500.0

    # Calculate the remaining capacity if the item were placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Bins where the item does not fit will retain this value, ensuring they are not selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # 1. Base Best-Fit score: Prioritize bins that leave the smallest positive waste.
    # This is achieved by taking the negative of the potential remaining capacity.
    # A smaller positive remaining capacity (e.g., 0.1) results in a larger
    # (less negative, closer to 0) priority score (e.g., -0.1).
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # 2. Apply Perfect Fit Bonus: Reward bins that result in exactly 0 remaining capacity.
    # This makes a perfect fit the highest possible priority.
    perfect_fit_mask = (potential_remaining_cap == 0) & fitting_bins_mask
    priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Apply Small Gap Penalty: Penalize bins that would be left with an "awkward" gap.
    # An awkward gap is defined as a remaining capacity that is positive but very small
    # relative to the item size, making it potentially difficult to use efficiently later.
    small_gap_mask = (potential_remaining_cap > 0) & \
                     (potential_remaining_cap < SMALL_GAP_THRESHOLD_RATIO * item) & \
                     fitting_bins_mask
    priorities[small_gap_mask] -= SMALL_GAP_PENALTY

    return priorities
```
