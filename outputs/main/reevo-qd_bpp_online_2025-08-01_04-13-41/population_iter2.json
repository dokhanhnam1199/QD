[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)",
    "response_id": 0,
    "obj": 4.487435181491823,
    "SLOC": 2.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response1.txt_stdout.txt",
    "code_path": "problem_iter1_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function implements a \"Best Fit\" like heuristic. It prioritizes\n    bins that, after the item is placed, would have the smallest remaining\n    capacity (i.e., leaving the least 'waste'). Bins where the item does\n    not fit are given an extremely low priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        The bin with the highest score (least negative in this case) will be selected.\n    \"\"\"\n    # Calculate the remaining capacity if the item were placed in each bin.\n    # A negative value means the item does not fit.\n    potential_remaining_cap = bins_remain_cap - item\n\n    # Initialize priorities to a very low value for all bins.\n    # Using -np.inf ensures that bins where the item does not fit will never\n    # be selected by argmax, unless no bin can fit the item (in which case\n    # all priorities would be -np.inf, and the first bin would be chosen,\n    # or an error handling mechanism for opening a new bin would be needed elsewhere).\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).\n    fitting_bins_mask = potential_remaining_cap >= 0\n\n    # For fitting bins, set the priority.\n    # We want to minimize the remaining capacity (potential_remaining_cap),\n    # so we use its negative as the priority score.\n    # A smaller positive remaining capacity (e.g., 1.0) will result in a\n    # larger (less negative) priority score (e.g., -1.0).\n    # A larger positive remaining capacity (e.g., 10.0) will result in a\n    # smaller (more negative) priority score (e.g., -10.0).\n    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]\n\n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response1.txt_stdout.txt",
    "code_path": "problem_iter2_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic extends the \"Best Fit\" strategy by prioritizing bins that,\n    if the item is placed, will leave the smallest *fractional* amount of\n    remaining capacity relative to the size of the item itself. This aims to\n    minimize \"relative waste\" for each item placed, providing a more informed\n    decision based on the item's own magnitude (part of the problem state).\n\n    The score is calculated as `-(remaining_capacity_after_placement / item_size)`.\n\n    - Bins where the item does not fit are assigned a very low (negative infinity) priority.\n    - A perfect fit (remaining_capacity - item_size = 0) yields a score of 0,\n      as (0 / item_size) is 0. This is the highest possible score.\n    - A snug fit (e.g., remaining_capacity - item_size = 0.1 * item_size) yields\n      a score of -0.1.\n    - A loose fit (e.g., remaining_capacity - item_size = 1.0 * item_size) yields\n      a score of -1.0.\n\n    This approach is particularly effective when item sizes can vary significantly.\n    It normalizes the \"cost\" of the remaining space by the item's own magnitude,\n    making the heuristic more sensitive to waste proportions rather than just\n    absolute waste amounts.\n\n    Args:\n        item: Size of item to be added to the bin. Must be a non-negative float.\n              Typically, item sizes in Bin Packing are positive.\n        bins_remain_cap: Array of current remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        The bin with the highest score is the most preferred.\n    \"\"\"\n    # Initialize priorities. Bins that cannot fit the item will retain a very low priority.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Find which bins the item can fit into\n    fits_mask = bins_remain_cap >= item\n\n    # Handle the edge case where item size is non-positive.\n    # Typically, item sizes in BPP are positive.\n    if item <= 0:\n        if item == 0:\n            # If item is zero, it occupies no space and creates no waste.\n            # It can conceptually fit into any bin that has non-negative capacity.\n            # Assign a perfect fit score (0) to all bins it \"fits\" into,\n            # indicating no relative waste.\n            priorities[fits_mask] = 0.0\n        else: # item < 0, which is typically invalid for bin packing\n            # All priorities remain -np.inf, effectively preventing placement.\n            pass\n        return priorities\n\n    # Calculate the remaining capacity after placing the item\n    remainder_after_placement = bins_remain_cap[fits_mask] - item\n\n    # For bins where the item fits, calculate the 'relative waste' score.\n    # We want to minimize (remainder_after_placement / item).\n    # By taking the negative of this ratio, we convert the minimization\n    # problem into a maximization problem for the priority score.\n    priorities[fits_mask] = -(remainder_after_placement / item)\n\n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  }
]