```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an improved Best Fit like heuristic. It prioritizes:
    1. Perfect fits (remaining capacity of 0).
    2. Minimizing waste (Best Fit principle).
    3. Strategically avoiding "awkward" very small, non-zero remaining capacities
       by applying a variable penalty that is higher for smaller awkward gaps.
       This encourages leaving larger, more fillable gaps if a perfect fit
       or a generally larger, less awkward gap is not possible.

    The aim is to optimize long-term bin utilization by avoiding hard-to-fill gaps
    that might prematurely force the opening of new bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         It is assumed that bin capacities are on a similar scale
                         (e.g., normalized, typically to 1.0) for the constant
                         thresholds to be effective.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Define constants for the heuristic. These values may need tuning
    # depending on the typical scale of item sizes and bin capacities.
    # We assume bin capacities are normalized, for example, between 0 and 1.0.

    # This threshold defines what constitutes a "very small, awkward gap".
    # For a bin with capacity 1.0, 0.05 means any remaining capacity less than 5%
    # of the bin size (but greater than 0) will be penalized.
    threshold_awkward_gap = 0.05

    # This factor determines the severity of the penalty for awkward gaps.
    # The penalty is calculated as: penalty_factor * (threshold_awkward_gap - actual_remaining_cap).
    # A higher factor makes smaller awkward gaps significantly less desirable.
    # A value of > 2.0 ensures that any awkward gap is less preferred than
    # a remaining capacity just above the threshold.
    penalty_factor_awkward_gap = 3.0

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # -np.inf ensures that bins where the item does not fit will never be selected.
    # The calling logic typically opens a new bin if no existing bin has a score > -inf.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, calculate the base priority.
    # The "Best Fit" principle means we want to minimize the remaining capacity (waste).
    # A smaller positive remaining capacity results in a larger (less negative) score.
    fitting_rem_cap = potential_remaining_cap[fitting_bins_mask]
    base_scores = -fitting_rem_cap

    # Identify bins with perfect fit (remaining capacity == 0).
    # These should have the highest possible priority to ensure they are always chosen first.
    perfect_fit_mask_in_fitting = fitting_rem_cap == 0
    base_scores[perfect_fit_mask_in_fitting] = np.finfo(float).max  # Effectively positive infinity

    # Identify bins that would result in a "very small, non-zero awkward gap".
    # These are gaps greater than 0 but less than the defined threshold.
    awkward_gap_mask_in_fitting = (fitting_rem_cap > 0) & \
                                  (fitting_rem_cap < threshold_awkward_gap)

    # Apply a variable penalty to bins creating awkward gaps.
    # The penalty is larger for smaller awkward gaps, making them less desirable.
    # This pushes the system to leave larger, potentially more fillable gaps if a
    # perfect fit isn't available and an awkward small gap is the alternative.
    awkward_gaps_to_penalize = fitting_rem_cap[awkward_gap_mask_in_fitting]
    penalties = penalty_factor_awkward_gap * (threshold_awkward_gap - awkward_gaps_to_penalize)
    base_scores[awkward_gap_mask_in_fitting] -= penalties

    # Assign the calculated scores back to the main priorities array for fitting bins.
    priorities[fitting_bins_mask] = base_scores

    return priorities
```
