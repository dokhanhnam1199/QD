```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function extends the "Best Fit" heuristic with additional
    considerations for "perfect fits" and "awkward future gaps"
    to promote long-term efficiency, as suggested by the reflection.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """

    # Hyperparameters for the heuristic
    # A large bonus for a perfect fit (remaining capacity = 0), ensuring it's always preferred.
    # This value should be significantly larger than the maximum possible negative score
    # (-BIN_CAPACITY) to guarantee perfect fits have the highest priority.
    HUGE_BONUS = 1000.0

    # Threshold for what constitutes a "small" or "awkward" non-zero remaining gap.
    # If a bin's remaining capacity after placement is greater than 0 but less than
    # this threshold, it is considered an awkward gap and will be penalized.
    # A value of 5.0 means remaining capacities like 1, 2, 3, 4 will be penalized.
    THRESHOLD_AWKWARD_GAP = 5.0

    # The penalty applied for creating an "awkward" small gap.
    # This penalty should be significant enough to potentially make a bin with a
    # slightly larger, more usable remaining capacity preferred over one that
    # creates a very small, awkward gap.
    # E.g., a penalty of 10.0 might cause a bin leaving a capacity of 1 (score -1 - 10 = -11)
    # to be ranked lower than a bin leaving a capacity of 5 (score -5).
    SMALL_GAP_PENALTY = 10.0

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit into that bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can accommodate the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify only those bins where the item actually fits
    # (i.e., where potential_remaining_cap is non-negative).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Extract the potential remaining capacities for only the fitting bins.
    prc_fitting = potential_remaining_cap[fitting_bins_mask]

    # Initialize scores for the fitting bins based on the Best-Fit heuristic:
    # We want to minimize the remaining capacity, so we use its negative as the score.
    # A smaller positive remaining capacity (e.g., 1) results in a higher score (-1),
    # while a larger positive remaining capacity (e.g., 10) results in a lower score (-10).
    scores_fitting = -prc_fitting

    # Apply Perfect Fit Bonus:
    # Identify bins that would result in exactly 0 remaining capacity after placement.
    # These are highly desirable as they fully utilize a bin.
    perfect_fit_mask = (prc_fitting == 0)
    scores_fitting[perfect_fit_mask] += HUGE_BONUS

    # Apply Awkward Gap Penalty:
    # Identify bins that would result in a small, non-zero remaining capacity.
    # This range is defined as (0, THRESHOLD_AWKWARD_GAP).
    # These gaps are considered "awkward" because they might be too small to be useful
    # for many future items, potentially leading to fragmentation.
    awkward_gap_mask = (prc_fitting > 0) & (prc_fitting < THRESHOLD_AWKWARD_GAP)
    scores_fitting[awkward_gap_mask] -= SMALL_GAP_PENALTY

    # Assign the calculated scores back to the main priorities array for the fitting bins.
    priorities[fitting_bins_mask] = scores_fitting

    return priorities
```
