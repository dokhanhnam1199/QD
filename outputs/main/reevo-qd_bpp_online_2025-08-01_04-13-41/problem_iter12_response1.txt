```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" heuristic, prioritizing tight fits
    to minimize wasted space and improve bin utilization. It strategically uses
    the item size and bin remaining capacities to calculate scores.
    The bin that, after placing the item, would have the smallest remaining
    capacity (i.e., the tightest fit) receives the highest priority score.
    Bins where the item cannot fit are assigned an extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item at all.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits.
    # An item fits if its size is less than or equal to the bin's remaining capacity.
    fitting_bins_mask = bins_remain_cap >= item

    # For bins where the item fits, calculate their priority.
    # We want to minimize the remaining capacity (bins_remain_cap - item)
    # after placing the item. To achieve this with a "highest priority wins"
    # system (using np.argmax), we use the negative of the potential
    # remaining capacity.
    #
    # Example:
    #   If potential remaining capacity is 0.1 (tight fit), priority becomes -0.1.
    #   If potential remaining capacity is 0.5 (looser fit), priority becomes -0.5.
    # Since -0.1 > -0.5, the tighter fit gets a higher priority score.
    # A perfect fit (potential remaining capacity = 0) gets a priority of 0,
    # which is the highest possible score among valid fits.
    if np.any(fitting_bins_mask):
        # Calculate the remaining capacity for all bins if the item were placed.
        # This will be used only for the fitting bins.
        potential_remaining_cap = bins_remain_cap[fitting_bins_mask] - item
        
        # Assign priorities: smaller positive remaining capacity means larger (less negative) priority.
        priorities[fitting_bins_mask] = -potential_remaining_cap

    return priorities
```
