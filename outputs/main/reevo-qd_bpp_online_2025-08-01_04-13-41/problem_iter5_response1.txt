```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an enhanced "Best Fit" like heuristic.
    It primarily prioritizes bins that, after the item is placed, would have
    the smallest remaining capacity (i.e., leaving the least 'waste' - Best Fit principle).
    Additionally, it introduces a secondary strategic component: a small bonus
    is given to bins that are already more filled (have less remaining capacity
    before the item is placed). This aims to encourage consolidating items into
    existing, partially filled bins, thereby helping to close them faster and
    contributing to "optimal bin utilization" by minimizing the number of open bins.

    Bins where the item does not fit are given an extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.
                         It is assumed that the maximum capacity of any bin is 1.0
                         (standard normalization in Bin Packing Problem).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value indicates the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # If no bins fit, return the default -inf priorities for all.
    if not np.any(fitting_bins_mask):
        return priorities

    # --- Primary Objective: Best Fit ---
    # For fitting bins, the base priority is the negative of the potential remaining capacity.
    # A smaller positive remaining capacity (tighter fit) results in a larger (less negative) priority score.
    best_fit_score = -potential_remaining_cap[fitting_bins_mask]

    # --- Secondary Objective: Strategic Bin Closure ---
    # Add a small bonus for bins that are already more full.
    # This encourages packing into bins that are closer to being completely filled,
    # aiming to close them and reduce the total number of active bins.
    # We assume a normalized bin capacity of 1.0.
    # '1.0 - bins_remain_cap' represents the current fill level of the bin.
    fullness_bonus_weight = 0.01  # A small positive weight to bias towards fuller bins

    # Calculate current fullness for fitting bins. Ensure it's between 0 and 1.
    # (1.0 - bins_remain_cap) will be 0 if bin is full, 1.0 if bin is empty.
    # We want a higher bonus for fuller bins, so a bin with `bins_remain_cap` = 0.1
    # should get a higher bonus than `bins_remain_cap` = 0.5.
    # So `(1.0 - bins_remain_cap)` works as a fullness metric (higher value means fuller).
    current_fullness = (1.0 - bins_remain_cap[fitting_bins_mask])
    current_fullness = np.clip(current_fullness, 0.0, 1.0) # Ensure values are within expected range

    fullness_bonus = fullness_bonus_weight * current_fullness

    # Combine the Best Fit score with the strategic fullness bonus
    priorities[fitting_bins_mask] = best_fit_score + fullness_bonus

    return priorities
```
