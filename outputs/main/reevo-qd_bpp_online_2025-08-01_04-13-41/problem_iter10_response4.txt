```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function designs a priority score based on an augmented "Best Fit"
    strategy, aiming to optimize immediate packing while also considering
    the long-term utility of the bin's remaining capacity. It intelligently
    penalizes choices that lead to problematic future bin states.

    The prioritization combines:
    1.  **Best Fit Core**: Prioritizes bins that result in the smallest
        remaining capacity after placing the item (tightest fit).
    2.  **Perfect Fit Bonus**: Applies a significant positive bonus if the
        item perfectly fills a bin, maximizing bin utilization.
    3.  **Awkward Gap Penalty**: Applies a substantial negative penalty if
        placing the item would leave a "medium" or "awkward" amount of
        remaining capacity. Such gaps are often difficult to fill efficiently
        with subsequent items, leading to wasted space.
    4.  **Strategic Openness Incentive**: Provides a modest positive incentive
        for bins that would still have a very large remaining capacity after
        the item is placed. This encourages using largely empty bins, acting
        as a 'Worst Fit' flavor to keep bins maximally open for future large
        items, preventing fragmentation into many "awkward" states.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative) will be selected.
    """
    # In a general solution, BIN_CAPACITY should ideally be passed as an argument.
    # Following the pattern of priority_v1, we assume a normalized bin capacity of 1.0.
    BIN_CAPACITY = 1.0

    # Calculate the remaining capacity for each bin if the item were placed.
    # Negative values indicate that the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize all priorities to negative infinity. This ensures bins where
    # the item does not fit are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    fitting_bins_mask = potential_remaining_cap >= 0

    # --- Core Strategy: Best Fit Prioritization ---
    # For all fitting bins, the initial priority is set to the negative of the
    # potential remaining capacity. This means smaller remaining capacities
    # (tighter fits) yield higher (less negative) priority scores.
    # A perfect fit (0 remaining) gets an initial score of 0.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # --- Enhancement 1: Strong Bonus for Perfect Fits ---
    # Give a significant boost to bins where the item fits perfectly (or very close to it).
    # Using np.isclose for robust floating-point comparison.
    epsilon = 1e-6  # Tolerance for "close to zero"
    perfect_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=epsilon) & fitting_bins_mask
    PERFECT_FIT_BONUS = BIN_CAPACITY * 0.5  # A substantial bonus value
    priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # --- Enhancement 2: Penalty for 'Awkward' Remaining Gaps ---
    # Define thresholds for what constitutes an "awkward" remaining capacity.
    # These are gaps that are too small for large items but too large to be
    # easily filled by typical small items, potentially leading to fragmentation.
    awkward_gap_lower_threshold = 0.10 * BIN_CAPACITY
    awkward_gap_upper_threshold = 0.40 * BIN_CAPACITY # Adjusted to be slightly narrower than v1

    # Identify fitting bins that would result in an awkward remaining capacity.
    awkward_gap_mask = (potential_remaining_cap > awkward_gap_lower_threshold) & \
                       (potential_remaining_cap < awkward_gap_upper_threshold)
    
    # Apply a penalty. The penalty scales with the item size to maintain its relative impact.
    AWKWARD_GAP_PENALTY = item * 2.5 # A slightly higher penalty than in v1
    penalize_bins = fitting_bins_mask & awkward_gap_mask
    priorities[penalize_bins] -= AWKWARD_GAP_PENALTY

    # --- Enhancement 3: Incentive for Large Remaining Capacity (Strategic Openness) ---
    # If placing the item still leaves a very large amount of capacity (e.g., the bin is
    # still mostly empty), provide a small incentive. This encourages the use of
    # "new" or largely untouched bins, keeping them available for potentially larger
    # items later, thus avoiding premature creation of many "awkward" partial bins.
    large_remaining_threshold = 0.75 * BIN_CAPACITY # Bins with more than 75% capacity remaining

    large_rem_mask = (potential_remaining_cap >= large_remaining_threshold) & fitting_bins_mask

    # A modest bonus. It's less than a perfect fit, but helps prioritize these
    # over awkward or less-than-optimal "best fit" options.
    LARGE_GAP_INCENTIVE = item * 0.5
    priorities[large_rem_mask] += LARGE_GAP_INCENTIVE

    return priorities
```
