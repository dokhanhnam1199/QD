```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic is based on a "Best Fit" strategy, similar to v1, but uses an
    inverse relationship for priority scores for bins that can accommodate the item.
    This provides a positive priority scale where higher values indicate a better fit.

    The strategy prioritizes placing the item into the bin where it fits most tightly,
    leaving the smallest non-negative remaining capacity.

    - Bins that cannot accommodate the item are assigned a very low (negative infinity)
      priority score, ensuring they are never chosen.
    - For bins that can fit the item:
        - If it's a perfect fit (remaining capacity after placement is exactly 0),
          it receives an exceptionally high positive priority score, signifying an ideal placement.
        - For non-perfect fits, the priority is calculated as the inverse of the
          remaining capacity after placement. A smaller remaining capacity results
          in a larger (higher) priority score. A small epsilon is added to the
          denominator to prevent division by zero and to provide a continuous
          scale for very small positive remaining capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a very low value for bins that cannot fit the item.
    # This ensures they are not chosen when np.argmax is used.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Identify which bins can accommodate the current item.
    can_fit_mask = bins_remain_cap >= item
    
    # Get the indices of bins that can fit the item to update priorities selectively.
    fit_bins_indices = np.where(can_fit_mask)[0]

    if fit_bins_indices.size == 0:
        return priorities # No bin can fit the item, all priorities remain -inf

    # Calculate the remaining capacity if the item were placed in suitable bins.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # For numerical stability when dividing by potentially very small numbers,
    # use a small epsilon (machine epsilon for float64).
    epsilon = np.finfo(np.float64).eps

    # Identify perfect fits (where remaining capacity is approximately zero).
    perfect_fit_mask = np.isclose(remaining_after_fit, 0.0)

    # Assign a distinct, very high priority to perfect fits.
    # This ensures perfect fits are always chosen over any non-perfect fit.
    # The value 1e18 is an arbitrary large number, ensuring it dominates 1.0 / (x + epsilon).
    priorities[fit_bins_indices[perfect_fit_mask]] = 1e18

    # For non-perfect fits, priority is inversely proportional to remaining capacity.
    # A smaller remaining capacity results in a larger priority score.
    # Add epsilon to the denominator to prevent division by zero if remaining_after_fit is extremely small but not zero.
    non_perfect_fit_mask = ~perfect_fit_mask
    non_perfect_fit_indices = fit_bins_indices[non_perfect_fit_mask]
    
    # Calculate scores for non-perfect fits.
    # Example: If remaining_after_fit is 1.0, score is approx 1.0.
    # If remaining_after_fit is 0.1, score is approx 10.0.
    # If remaining_after_fit is 0.01, score is approx 100.0.
    priorities[non_perfect_fit_indices] = 1.0 / (remaining_after_fit[non_perfect_fit_mask] + epsilon)

    return priorities
```
