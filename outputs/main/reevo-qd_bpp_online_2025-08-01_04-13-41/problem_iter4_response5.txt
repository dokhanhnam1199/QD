```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements a "Best Fit" strategy with a strong emphasis
    on "Perfect Fits". It prioritizes bins that, if the item is placed,
    will leave the smallest *absolute* amount of remaining capacity.
    Crucially, any bin that allows for a perfect fit (leaving zero remaining capacity)
    is given the highest possible priority, overriding all other considerations.

    The score is primarily calculated as `-(remaining_capacity_after_placement)`.
    - Bins where the item does not fit are assigned a very low (negative infinity) priority.
    - A perfect fit (remaining_capacity - item_size = 0) yields the maximum possible float score,
      ensuring it is always chosen over any non-perfect fit.
    - For non-perfect fits, a snugger fit (smaller absolute remainder) yields a higher
      (less negative) score. For example, a remainder of 0.1 yields -0.1, while a remainder
      of 1.0 yields -1.0.

    This approach is particularly effective because it directly minimizes "wasted" space
    in the selected bin, and explicitly favors completely filling a bin when possible,
    which is a key strategy for minimizing the total number of bins used.
    It differs from `priority_v1` by focusing on absolute remaining capacity rather than
    normalized (relative to item size) remaining capacity, while enhancing the perfect fit
    preference.

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Handle the edge case where item size is non-positive.
    # Typically, item sizes in BPP are positive.
    if item <= 0:
        if item == 0:
            # If item is zero, it occupies no space. It can conceptually fit into any bin.
            # Assign a very high score (max float) indicating no cost and perfect placement
            # as it doesn't consume real capacity.
            priorities[bins_remain_cap >= 0] = np.finfo(float).max
        # If item < 0, priorities remain -np.inf, effectively preventing placement.
        return priorities

    # Find which bins the item can fit into
    fits_mask = bins_remain_cap >= item

    # Calculate the remaining capacity after placing the item for eligible bins
    remainder_after_placement = bins_remain_cap[fits_mask] - item

    # For bins where the item fits, calculate the 'Best Fit' score: negative of the remainder.
    # We want to minimize remainder_after_placement, so maximize -(remainder_after_placement).
    # A smaller positive remainder results in a higher (less negative) score.
    priorities[fits_mask] = -remainder_after_placement

    # Identify perfect fits (remainder is exactly zero or very close due to float precision).
    # Assign the highest possible float value to perfect fits to ensure they are always chosen first.
    perfect_fit_mask = np.isclose(remainder_after_placement, 0.0, atol=1e-9)
    # Use np.where(fits_mask)[0] to get original indices of fitting bins.
    # Then apply perfect_fit_mask to these indices.
    priorities[np.where(fits_mask)[0][perfect_fit_mask]] = np.finfo(float).max

    return priorities
```
