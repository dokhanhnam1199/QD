```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function refines the "Best Fit" heuristic from priority_v1 by
    implementing a continuous penalty for "awkward" remaining gaps.
    The penalty is highest for very small non-zero gaps and decreases as
    the gap approaches the awkward gap threshold. This aims to strongly discourage
    the creation of very tiny, hard-to-fill spaces, thereby promoting better
    overall bin utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """

    # --- Heuristic Constants ---
    # A large bonus for perfect fits (remaining capacity is exactly zero).
    # This value should be large enough to make a perfect fit significantly
    # more desirable than any non-perfect fit.
    PERFECT_FIT_BONUS = 100.0

    # A threshold to define an "awkward" remaining gap.
    # If the remaining capacity after placing the item is positive but
    # falls within (0, AWKWARD_GAP_THRESHOLD], it's considered awkward.
    # This value is heuristic and might need tuning based on the expected
    # range of item sizes and bin capacities.
    AWKWARD_GAP_THRESHOLD = 0.1

    # The maximum penalty applied to a bin that would result in an "awkward"
    # remaining gap. This penalty is applied for gaps very close to zero
    # and scales down to zero as the gap approaches AWKWARD_GAP_THRESHOLD.
    MAX_AWKWARD_GAP_PENALTY = 10.0

    # Epsilon for robust floating-point comparisons to zero (e.g., for perfect fit checks)
    EPSILON_FLOAT_COMP = 1e-9

    # Calculate the potential remaining capacity if the item were placed in each bin.
    # A negative value strictly means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to an extremely low value for all bins.
    # This ensures that bins where the item does not fit are never selected
    # unless no bin can accommodate the item (in which case a new bin should be opened externally).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item conceptually fits (remaining capacity is non-negative,
    # allowing for tiny negative values due to floating point inaccuracies if they are effectively zero).
    fitting_bins_mask = potential_remaining_cap >= -EPSILON_FLOAT_COMP

    # Apply the base "Best Fit" heuristic for fitting bins:
    # Prioritize bins that would leave the smallest remaining capacity (least waste).
    # Using the negative of potential_remaining_cap means smaller positive remainders yield
    # larger (less negative) priority scores.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # --- Reward Perfect Fits ---
    # Identify bins where the item fits perfectly (remaining capacity is effectively zero).
    # We use np.abs for robustness with floating point numbers (e.g., -1e-17 is considered zero).
    perfect_fit_mask = np.abs(potential_remaining_cap) < EPSILON_FLOAT_COMP
    # Ensure this bonus is only applied to bins that were determined to be fitting.
    perfect_fit_mask = perfect_fit_mask & fitting_bins_mask
    priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # --- Penalize Awkward Future Gaps (Continuous Penalty) ---
    # Identify bins where the item fits, and the resulting remaining capacity is positive
    # but falls within the defined "awkward" range (e.g., too small to be generally useful,
    # but not zero).
    awkward_gap_mask = (potential_remaining_cap > EPSILON_FLOAT_COMP) & \
                       (potential_remaining_cap <= AWKWARD_GAP_THRESHOLD)
    # Ensure this penalty is only applied to bins that were determined to be fitting.
    awkward_gap_mask = awkward_gap_mask & fitting_bins_mask

    if np.any(awkward_gap_mask):
        # Extract remaining capacities for the bins identified as creating awkward gaps.
        awkward_caps = potential_remaining_cap[awkward_gap_mask]

        # Calculate a continuous penalty based on the size of the awkward gap.
        # The penalty is highest when the gap is very small (approaching 0) and
        # decreases linearly as the gap approaches AWKWARD_GAP_THRESHOLD.
        # This makes very tiny, useless gaps receive the strongest penalty.
        # We ensure AWKWARD_GAP_THRESHOLD is not zero to prevent division by zero.
        if AWKWARD_GAP_THRESHOLD > EPSILON_FLOAT_COMP:
            # Normalize the awkward capacities relative to the threshold (scales from 0 to 1).
            # Subtracting from 1 inverts this, so smaller `awkward_caps` result in a larger `penalty_factor`.
            penalty_factor = 1.0 - (awkward_caps / AWKWARD_GAP_THRESHOLD)
            penalties_to_apply = MAX_AWKWARD_GAP_PENALTY * penalty_factor
            priorities[awkward_gap_mask] -= penalties_to_apply
        # If AWKWARD_GAP_THRESHOLD is effectively zero, no continuous penalty is applied,
        # as all "awkward" gaps would also be "perfect fits" or outside the threshold.

    return priorities
```
