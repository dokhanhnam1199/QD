```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic-like strategy.

    This heuristic prioritizes bins that, after accommodating the item, would
    have the smallest remaining capacity. The goal is to "snugly fit" the item
    and potentially fill up bins quickly, thus reducing the total number of bins used.

    Priority Logic:
    1. For bins where the item fits: The priority is calculated as the negative
       of the remaining capacity after placing the item. This means a smaller
       positive remaining capacity (a tighter fit) will result in a larger
       (closer to zero) priority score. A perfect fit will yield a priority of 0.
    2. For bins where the item does not fit: A very low priority (e.g., negative
       infinity) is assigned, effectively making these bins undesirable.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A negative value means the item does not fit.
    remaining_after_fit = bins_remain_cap - item

    # Initialize all priorities to a very low value. This ensures bins where the
    # item doesn't fit are not selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find the indices of bins where the item can actually fit (remaining capacity >= 0).
    can_fit_indices = np.where(remaining_after_fit >= 0)

    # For the bins where the item fits, calculate their priority.
    # We want to minimize 'remaining_after_fit' among positive values.
    # By taking the negative of 'remaining_after_fit', a smaller positive
    # value results in a priority closer to zero (which is higher than negative values).
    priorities[can_fit_indices] = -remaining_after_fit[can_fit_indices]

    return priorities
```
