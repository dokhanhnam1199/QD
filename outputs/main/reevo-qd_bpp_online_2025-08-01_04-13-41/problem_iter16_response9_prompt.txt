{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function implements an enhanced \"Best Fit\" heuristic with a unified\n    scoring mechanism. It prioritizes bins that, after the item is placed,\n    would have the smallest remaining capacity. This is achieved by using an\n    inverse relationship: 1 / (remaining_capacity + epsilon).\n    This design naturally assigns an extremely high priority score to bins\n    that achieve a perfectly zero remaining capacity (perfect fit), effectively\n    incorporating a strategic bonus for optimal bin utilization without a\n    separate constant. Bins where the item does not fit are effectively\n    filtered out by being assigned an extremely low (negative infinity) priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        The bin with the highest score will be selected.\n    \"\"\"\n    # Initialize priorities to a very low value for all bins.\n    # This acts as a filter: bins where the item does not fit will retain this\n    # -np.inf score, ensuring they are not chosen.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify bins where the item can actually fit.\n    # A bin fits if its current remaining capacity is greater than or equal to the item size.\n    fitting_bins_mask = bins_remain_cap >= item\n\n    # Calculate the potential remaining capacity for the bins where the item fits.\n    potential_remaining_cap = bins_remain_cap[fitting_bins_mask] - item\n\n    # Define a small epsilon to prevent division by zero, especially when\n    # potential_remaining_cap is exactly 0. This also naturally boosts the\n    # priority for perfect fits (0 remaining capacity) to a very high value.\n    EPSILON = 1e-9  # A small positive value.\n\n    # For the fitting bins, calculate their priority score.\n    # The score is inversely proportional to the potential remaining capacity.\n    # A smaller remaining capacity results in a larger priority score.\n    # Perfect fits (potential_remaining_cap ~ 0) will yield extremely high scores\n    # due to division by a very small number (EPSILON).\n    priorities[fitting_bins_mask] = 1.0 / (potential_remaining_cap + EPSILON)\n\n    return priorities\n\n[Reflection]\nPrioritize valid bins using item/capacity data. Prefer strategic fits like minimizing remaining space, enhancing perfect matches.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}