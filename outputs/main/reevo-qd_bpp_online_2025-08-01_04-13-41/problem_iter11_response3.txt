```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a Best Fit like heuristic with additional
    logic to strongly reward perfect fits and specifically penalize
    "awkward" gaps.

    Awkward gaps are defined as remaining capacities that are small
    but non-zero, potentially leading to inefficient long-term bin utilization
    because they might be too small for most subsequent items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         It is assumed that these capacities are relative
                         to a common, consistent bin size (e.g., normalized
                         to a BIN_SIZE of 1.0, or actual capacities of same-sized bins).

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Assumption for defining awkwardness: A common bin size.
    # If bins can have truly heterogeneous original sizes, AWKWARD_THRESHOLD
    # might need to be relative to each bin's original capacity.
    # For a typical BPP where bins are identical, assuming a reference BIN_SIZE is common.
    # We use the maximum current remaining capacity as a proxy for BIN_SIZE if all bins are empty,
    # or a common assumed value (e.g., 1.0 for normalized problems).
    # If bins are opened empty, their initial capacity is the BIN_SIZE.
    # A safe assumption is that BIN_SIZE is implicitly 1.0 if items are floats like 0.1-0.9.
    BIN_SIZE = 1.0 # This is a common assumption for normalized BPP problems

    # Define what constitutes an "awkward" remaining capacity.
    # For example, if a remaining gap is less than 20% of the bin size, it's awkward.
    AWKWARD_THRESHOLD_RATIO = 0.2
    AWKWARD_THRESHOLD = AWKWARD_THRESHOLD_RATIO * BIN_SIZE

    # Priority constants to create distinct tiers for scoring:
    # 1. Perfect Fit: Highest possible priority.
    # 2. Non-Awkward Gap: Prioritized by Best Fit (smaller remaining capacity is better).
    #    Scores will be in a range generally higher than awkward gaps.
    # 3. Awkward Gap: Prioritized by Best Fit within this category, but overall lowest priority
    #    among fitting bins.
    PERFECT_FIT_BONUS = 1000.0  # Ensure perfect fit is always chosen if available
    
    # Base score for non-awkward gaps. Scores will be BASE_SCORE_FOR_NON_AWKWARD - (gap value).
    # Smallest non-awkward gap: AWKWARD_THRESHOLD + epsilon. Max score close to 0.0.
    # Largest non-awkward gap (up to BIN_SIZE): Score close to -(BIN_SIZE - AWKWARD_THRESHOLD).
    # E.g., if BIN_SIZE=1.0, AWKWARD_THRESHOLD=0.2, scores will be roughly in [-0.8, 0.0).
    BASE_SCORE_FOR_NON_AWKWARD = 0.0

    # Base score for awkward gaps. Scores will be BASE_SCORE_FOR_AWKWARD - (gap value).
    # This must be significantly lower than any score from non-awkward gaps
    # to ensure non-awkward gaps are always preferred over awkward ones,
    # even if the awkward gap is numerically smaller (e.g., 0.1 vs 0.4).
    # E.g., if AWKWARD_THRESHOLD=0.2, scores will be roughly in [-500.2, -500.0).
    BASE_SCORE_FOR_AWKWARD = -500.0 

    # Calculate the remaining capacity if the item were placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins that cannot fit.
    # Using -np.inf ensures these bins are never selected unless no bin can fit.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Get the potential remaining capacities for only the fitting bins
    fitting_rem_cap = potential_remaining_cap[fitting_bins_mask]

    # Initialize scores for fitting bins to zeroes, then update based on categories
    current_scores = np.zeros_like(fitting_rem_cap)

    # 1. Handle Perfect Fits (remaining capacity == 0)
    perfect_fit_mask = (fitting_rem_cap == 0)
    current_scores[perfect_fit_mask] = PERFECT_FIT_BONUS

    # 2. Handle Non-Awkward Gaps (remaining capacity > AWKWARD_THRESHOLD)
    # These are preferred over awkward gaps. Within this category, Best Fit logic applies
    # (smaller remaining capacity leads to higher score, i.e., less negative).
    non_awkward_mask = (fitting_rem_cap > AWKWARD_THRESHOLD)
    current_scores[non_awkward_mask] = BASE_SCORE_FOR_NON_AWKWARD - fitting_rem_cap[non_awkward_mask]

    # 3. Handle Awkward Gaps (0 < remaining capacity <= AWKWARD_THRESHOLD)
    # These are penalized to be lower than any non-awkward gap.
    # Within this category, Best Fit logic still applies (smaller remaining capacity
    # is still better, but the overall score is much lower).
    awkward_mask = (fitting_rem_cap > 0) & (fitting_rem_cap <= AWKWARD_THRESHOLD)
    current_scores[awkward_mask] = BASE_SCORE_FOR_AWKWARD - fitting_rem_cap[awkward_mask]

    # Assign the calculated scores back to the main priorities array
    priorities[fitting_bins_mask] = current_scores

    return priorities
```
