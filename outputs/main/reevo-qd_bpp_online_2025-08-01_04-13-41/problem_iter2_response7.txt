```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an enhanced "Best Fit" heuristic, strongly
    prioritizing perfect utilization. It assigns the highest possible
    priority to bins where the item fits perfectly, resulting in zero
    remaining capacity. For bins where the item fits but leaves some
    remaining capacity, the priority is inversely proportional to that
    remaining capacity (waste), meaning smaller waste yields a significantly
    higher priority. Bins where the item does not fit are given an extremely low priority.

    This approach explicitly favors choices that maximize utilization by
    giving disproportionately high scores to bins that become very full,
    especially those that achieve a perfect fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value (-infinity) for all bins.
    # This ensures bins where the item does not fit will never be selected
    # unless no other option exists (which implies a new bin should be opened).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create masks for different fitting scenarios
    fitting_bins_mask = potential_remaining_cap >= 0
    perfect_fit_mask = potential_remaining_cap == 0

    # 1. Prioritize perfect fits (zero remaining capacity)
    # Assign positive infinity to ensure these bins are always selected if available.
    priorities[perfect_fit_mask] = np.inf

    # 2. Prioritize other fitting bins (positive remaining capacity)
    # We want to maximize utilization, so we minimize waste.
    # Using 1.0 / (waste + epsilon) ensures that smaller waste leads to a
    # disproportionately higher positive priority score.
    # Adding a small epsilon prevents division by zero if potential_remaining_cap
    # could theoretically be zero due to floating point inaccuracies (though
    # the perfect_fit_mask handles exact zeros).
    epsilon = 1e-9 
    
    # Mask for bins where the item fits, but not perfectly.
    non_perfect_fitting_mask = fitting_bins_mask & ~perfect_fit_mask

    priorities[non_perfect_fitting_mask] = 1.0 / (potential_remaining_cap[non_perfect_fitting_mask] + epsilon)

    return priorities
```
