```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" like heuristic. It prioritizes
    bins that, after the item is placed, would have the smallest remaining
    capacity (i.e., leaving the least 'waste'). Bins where the item does
    not fit are given an extremely low priority.

    Compared to priority_v1, this version uses an inverse scoring mechanism
    for fitting bins. This means smaller remaining capacities result in
    larger positive priority scores. Specifically, a perfect fit (0 remaining
    capacity) will yield a very high score, strongly prioritizing it over
    any other non-perfect fit. This aligns with favoring "tighter fits" by
    magnifying the preference for minimal waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax (unless all bins fail to fit).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Get the potential remaining capacities only for the bins where the item fits.
    valid_remaining_cap = potential_remaining_cap[fitting_bins_mask]

    # For fitting bins, set the priority using an inverse relationship.
    # We want to maximize the score for the smallest remaining capacity.
    # By taking 1 / (remaining_capacity + epsilon), a smaller remaining capacity
    # results in a larger priority score.
    # A perfect fit (0 remaining capacity) will result in a very large positive score.
    # np.finfo(float).eps is a small constant to prevent division by zero
    # when `valid_remaining_cap` is exactly 0 (perfect fit).
    epsilon = np.finfo(float).eps

    # Calculate the inverse of (remaining capacity + epsilon) for valid bins.
    priorities[fitting_bins_mask] = 1.0 / (valid_remaining_cap + epsilon)

    return priorities
```
