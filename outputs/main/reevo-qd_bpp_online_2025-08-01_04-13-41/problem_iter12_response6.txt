```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an improved "Best Fit" like heuristic for online Bin Packing.
    It prioritizes bins that, after the item is placed, would have the
    smallest remaining capacity (i.e., leaving the least 'waste').
    Beyond this Best-Fit base, it strategically rewards perfect fits (using
    floating-point safe comparison) and penalizes the creation of awkward,
    small, non-zero gaps. The definition of a "small gap" is now adaptive,
    relative to the size of the item being placed, aiming for better long-term
    packing efficiency across varying item scales.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Define constants for strategic weighting. These values are heuristics
    # and may need tuning based on the typical range of item sizes and bin capacities.
    # A significant bonus for leaving exactly zero capacity, making it the highest priority.
    PERFECT_FIT_BONUS = 100.0
    # A penalty for creating small, non-zero gaps that might be difficult to fill later.
    SMALL_GAP_PENALTY = -50.0
    # The threshold below which a non-zero remaining capacity is considered "small" and awkward.
    # This is now relative to the current item's size, making it adaptive.
    # For instance, 0.2 means if remaining capacity is less than 20% of the item's size.
    SMALL_GAP_THRESHOLD_FACTOR = 0.2
    SMALL_GAP_THRESHOLD = item * SMALL_GAP_THRESHOLD_FACTOR
    # A small epsilon for floating point comparisons, especially for 'perfect fit'.
    EPSILON = 1e-9

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Bins where the item does not fit will remain at -np.inf, ensuring they are not selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0 - EPSILON).
    # Using EPSILON here to be robust against tiny negative floats due to precision issues
    # when an item 'just fits' (e.g., 0.0 - 1e-10).
    fitting_bins_mask = potential_remaining_cap >= -EPSILON

    # Extract potential remaining capacities only for the bins where the item fits.
    fitting_rem_cap = potential_remaining_cap[fitting_bins_mask]

    # 1. Base Best-Fit Score:
    # We want to minimize the remaining capacity (fitting_rem_cap),
    # so we use its negative as the priority score. A smaller positive
    # remaining capacity (e.g., 1.0) results in a larger (less negative)
    # priority score (e.g., -1.0).
    fitting_priorities = -fitting_rem_cap

    # 2. Apply Perfect Fit Bonus:
    # Identify bins where the item fits exactly, leaving zero remaining capacity.
    # Use np.isclose for robust floating-point comparison with zero.
    perfect_fit_mask = np.isclose(fitting_rem_cap, 0, atol=EPSILON)
    fitting_priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Apply Small Gap Penalty:
    # Identify bins that would be left with a small, non-zero remaining capacity.
    # These gaps are penalized as they can be "awkward" or hard to utilize efficiently later.
    # The condition `fitting_rem_cap > EPSILON` ensures perfect fits are not penalized here.
    small_gap_mask = (fitting_rem_cap > EPSILON) & (fitting_rem_cap < SMALL_GAP_THRESHOLD)
    fitting_priorities[small_gap_mask] += SMALL_GAP_PENALTY

    # Assign the calculated priorities back to the main priorities array for fitting bins.
    priorities[fitting_bins_mask] = fitting_priorities

    return priorities
```
