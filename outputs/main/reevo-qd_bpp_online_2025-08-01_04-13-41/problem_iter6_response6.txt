```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic extends the "Best Relative Fit" strategy (from v1) by
    explicitly prioritizing perfect fits and then, for non-perfect fits,
    combining the concepts of "Best Relative Fit" and "Best Absolute Fit".
    It aims to minimize both fractional waste relative to the item size and
    absolute remaining capacity, thereby providing a more 'informed decision'
    that balances different aspects of bin utilization.

    The score is calculated as follows:
    1.  **No Fit**: Bins where the item does not fit are assigned a very low
        (negative infinity) priority.
    2.  **Perfect Fit**: Bins where placing the item results in zero remaining
        capacity (remaining_capacity - item_size = 0) are assigned a very high
        positive priority score (e.g., `1.0`). This ensures perfect fits are
        always the most preferred.
    3.  **Non-Perfect Fit**: For bins where the item fits but is not a perfect
        fit (remaining_capacity - item_size > 0), the score is derived from
        a weighted sum of two "waste" metrics:
        `score = -( (remaining_capacity_after_placement / item_size) + alpha * remaining_capacity_after_placement )`.
        - The first term `(remaining_capacity_after_placement / item_size)`
          represents the "relative waste" (as in v1), penalizing larger gaps
          proportionally to the item's size.
        - The second term `alpha * remaining_capacity_after_placement`
          represents the "absolute waste", adding a slight penalty for the
          total amount of remaining space.
        `alpha` is a small constant (e.g., 0.01) that allows tuning the balance
        between primarily prioritizing relative snugness and secondarily
        considering the absolute space left.

    This approach prioritizes clearing out bins with exact fits. Among other
    options, it primarily seeks the "snuggest" fit relative to the item's
    size, but also gently biases towards bins that result in overall smaller
    absolute remaining capacity, which can potentially reduce fragmentation.

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
              Typically, item sizes in Bin Packing are positive.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Define a high score for perfect fits to ensure they are always chosen first.
    PERFECT_FIT_SCORE = 1.0

    # Alpha constant for weighting the absolute remaining capacity in the score.
    # This value might need tuning based on the typical range of item sizes
    # and bin capacities in the specific Bin Packing problem instance.
    # A small value ensures relative fit remains the primary driver.
    ALPHA = 0.01

    # Handle edge cases for item size:
    if item <= 0:
        if item == 0:
            # If item size is 0, it consumes no space. It can "fit" into any bin
            # with non-negative remaining capacity without creating waste.
            # We assign a perfect fit score to all such bins.
            priorities[bins_remain_cap >= 0] = PERFECT_FIT_SCORE
        # If item < 0, it's typically invalid for bin packing. Priorities remain -np.inf.
        return priorities

    # Identify bins where the item can fit
    fits_mask = bins_remain_cap >= item

    # Calculate remaining capacity after placement for bins where the item fits
    remainder_after_placement = bins_remain_cap[fits_mask] - item

    # 1. Assign PERFECT_FIT_SCORE for exact fits
    perfect_fit_mask = (remainder_after_placement == 0)
    priorities[fits_mask][perfect_fit_mask] = PERFECT_FIT_SCORE

    # 2. Calculate scores for non-perfect fits (where remainder > 0)
    non_perfect_fit_mask = (remainder_after_placement > 0)

    # Only proceed if there are actual non-perfect fits to score
    if np.any(non_perfect_fit_mask):
        # Extract remainders only for non-perfect fits to avoid division by zero
        # and unnecessary calculations on perfect fits.
        remainder_for_scoring = remainder_after_placement[non_perfect_fit_mask]

        # Calculate the combined waste score for non-perfect fits:
        # It's a sum of relative waste and (alpha * absolute waste).
        # We take the negative because lower waste implies higher priority.
        combined_waste = (remainder_for_scoring / item) + (ALPHA * remainder_for_scoring)
        priorities[fits_mask][non_perfect_fit_mask] = -combined_waste

    return priorities
```
