```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" like heuristic, using an exponential
    scaling of the remaining capacity as the priority score. It prioritizes
    bins that, after the item is placed, would have the smallest remaining
    capacity (i.e., leaving the least 'waste'). A smaller positive remaining
    capacity yields a higher, more distinct positive priority score, emphasizing
    "tighter fits" more strongly than a linear scale.
    Bins where the item does not fit are given an extremely low (zero) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value (0.0) for all bins.
    # This ensures that bins where the item does not fit will not be selected
    # by argmax unless no bin can fit the item (in which case all priorities
    # would be 0.0, and the first bin would be chosen, or an external mechanism
    # for opening a new bin would be needed).
    priorities = np.full_like(bins_remain_cap, 0.0, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the priority using an exponential decay.
    # We want to minimize potential_remaining_cap. By taking exp(-x),
    # a smaller 'x' (better fit) results in a larger score closer to 1.
    # A perfect fit (potential_remaining_cap = 0) yields a score of exp(0) = 1.0.
    # Larger remaining capacities will quickly result in scores approaching 0.0.
    # This non-linear scaling provides a more discriminative score for "tighter fits".
    priorities[fitting_bins_mask] = np.exp(-potential_remaining_cap[fitting_bins_mask])

    return priorities
```
