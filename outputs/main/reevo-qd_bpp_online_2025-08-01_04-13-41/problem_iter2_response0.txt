```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin for online Bin Packing.

    This heuristic extends the "Best Fit" strategy (from priority_v1) with an
    intelligent adjustment to minimize "wasted space". It primarily prioritizes
    bins that, if the item is placed, will leave the smallest amount of remaining capacity
    (i.e., the item fits most "snugly").

    However, it introduces a penalty for creating "tiny gaps": if placing the item results
    in a very small, non-zero remaining capacity (a "sliver" of space that might be too
    small to be useful for subsequent items), that bin's priority is slightly reduced.
    This encourages the algorithm to prefer leaving either a perfect fit (gap = 0)
    or a sufficiently large, potentially useful gap, rather than many unfillable tiny slivers.

    The score is primarily `-(remaining_capacity - item_size)`.
    If `0 < (remaining_capacity - item_size) < TINY_GAP_THRESHOLD_RATIO * item_size`,
    a penalty is subtracted from the score. The penalty is set to make a tiny gap
    at least as undesirable as a gap equal to the tiny gap threshold.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    fits_mask = bins_remain_cap >= item

    # Calculate the remaining capacity after placing the item in fitting bins
    remaining_after_fit = bins_remain_cap[fits_mask] - item

    # Base Best Fit score: maximize -(remaining_after_fit).
    # A perfect fit (remaining_after_fit = 0) yields a score of 0.
    # Tighter fits (smaller positive remaining_after_fit) yield scores closer to 0.
    base_scores = -remaining_after_fit

    # --- Intelligent Adjustment: Penalty for Tiny Gaps ---

    # Define a threshold for what constitutes a "tiny gap".
    # A gap smaller than this ratio of the item's size is considered tiny.
    # For example, if item is 10 and ratio is 0.2, a gap < 2 is tiny.
    TINY_GAP_THRESHOLD_RATIO = 0.2

    # Define the penalty value for tiny gaps.
    # Setting it to be equal to the threshold effectively makes a tiny gap's score
    # equivalent to or worse than a gap at the threshold.
    PENALTY_FOR_TINY_GAP = TINY_GAP_THRESHOLD_RATIO * item

    # Identify tiny gaps: positive, but below the calculated threshold.
    # Use a small epsilon for floating point comparison with zero.
    is_tiny_gap = (remaining_after_fit > 1e-9) & \
                  (remaining_after_fit < (TINY_GAP_THRESHOLD_RATIO * item))

    # Initialize a penalty array for fitting bins; no penalty by default.
    penalties = np.zeros_like(base_scores)
    # Apply the penalty to bins that would result in a tiny gap.
    penalties[is_tiny_gap] = PENALTY_FOR_TINY_GAP

    # Final score: base_score minus penalty.
    # (Since PENALTY_FOR_TINY_GAP is positive, subtracting it reduces the score.)
    priorities[fits_mask] = base_scores - penalties

    return priorities
```
