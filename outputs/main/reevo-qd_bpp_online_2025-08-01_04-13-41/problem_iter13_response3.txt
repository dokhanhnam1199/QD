```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" like heuristic, refined based on the
    provided reflection. It explicitly:
    1. Filters invalid bins (where the item does not fit).
    2. Rewards perfect fits (remaining capacity is 0) with a very high score.
    3. Prioritizes snug, immediate fits (smaller positive remaining capacity).
    4. Penalizes "awkward future gaps" (very small, non-zero remaining capacities)
       by assigning them a significantly lower score. This aims to avoid creating
       leftover space that is too small to be useful for most future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # -np.inf ensures that bins where the item does not fit will never
    # be selected unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Get the potential remaining capacities for only the fitting bins.
    fitting_potential_remaining_cap = potential_remaining_cap[fitting_bins_mask]

    # --- Step 1: Reward perfect fits ---
    # Identify bins where the item fits exactly (remaining capacity is 0 or very close to 0).
    # Using a small epsilon for floating point comparison to handle potential precision issues.
    EPSILON = 1e-9
    perfect_fit_mask = np.isclose(fitting_potential_remaining_cap, 0.0, atol=EPSILON)
    PERFECT_FIT_SCORE = 1e6  # A very high score to ensure perfect fits are always preferred.
    priorities[fitting_bins_mask][perfect_fit_mask] = PERFECT_FIT_SCORE

    # --- Step 2 & 3: Prioritize snug fits and Penalize awkward future gaps ---
    # Process bins that fit but are not perfect fits (i.e., remaining capacity > 0).
    non_perfect_fit_mask = fitting_potential_remaining_cap > EPSILON
    non_perfect_remaining_cap = fitting_potential_remaining_cap[non_perfect_fit_mask]

    # Define a threshold for "awkward small gaps".
    # This threshold can be dynamic, e.g., a small percentage of the item size.
    # This makes the definition of "awkward" relative to the item being placed.
    # A minimum absolute threshold is also included for robustness with very small items.
    AWKWARD_GAP_THRESHOLD_RATIO = 0.05  # 5% of the item size
    MIN_AWKWARD_GAP_THRESHOLD = 0.01   # Minimum absolute threshold for awkward gap
    awkward_gap_threshold = max(MIN_AWKWARD_GAP_THRESHOLD, item * AWKWARD_GAP_THRESHOLD_RATIO)

    # Identify awkward gaps: positive remaining capacity that is less than the defined threshold.
    awkward_gap_mask = (non_perfect_remaining_cap > EPSILON) & \
                       (non_perfect_remaining_cap < awkward_gap_threshold)

    # Calculate base priorities for non-perfect fits.
    # A smaller positive remaining capacity should result in a higher (less negative) priority.
    # This is similar to the Best Fit heuristic.
    # We negate the remaining capacity, so 0 would be best, -1 is better than -10.
    base_priority_scores = -non_perfect_remaining_cap

    # Apply additional penalty for awkward small gaps.
    # This makes these options significantly less attractive than other non-perfect fits.
    AWKWARD_GAP_PENALTY = 1e3 # A substantial penalty to strongly deter awkward gaps.
    base_priority_scores[awkward_gap_mask] -= AWKWARD_GAP_PENALTY

    # Assign these calculated scores back to the original priorities array.
    priorities[fitting_bins_mask][non_perfect_fit_mask] = base_priority_scores

    return priorities
```
