```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements a Best-Fit-like strategy, aiming to leave
    the smallest possible positive remaining capacity in a bin after placing
    the item. This minimizes fragmentation and makes efficient use of bin space.

    The priority score is calculated as follows:
    - For bins where the item fits (i.e., remaining_capacity >= item):
        The priority is the negative of the remaining capacity after placing the item.
        (priority = -(bins_remain_cap[i] - item)).
        A perfect fit (remaining_capacity - item = 0) will yield a priority of 0,
        which is the highest possible priority for a feasible bin, indicating it's
        the 'best' fit. Larger positive remaining capacities will result in
        more negative priority scores.
    - For bins where the item does not fit (i.e., remaining_capacity < item):
        A very low negative priority (negative infinity) is assigned, ensuring
        these bins are never chosen unless no other bin is available.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    
    # Calculate the potential remaining capacity for each bin if the item were placed.
    # This value can be negative if the item does not fit.
    potential_remaining = bins_remain_cap - item
    
    # Initialize all priorities to a very low value (-infinity).
    # This ensures bins where the item does not fit are effectively "disqualified"
    # in an argmax operation.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    
    # Define a small tolerance for floating point comparisons to handle
    # cases where an item perfectly fits, but due to precision,
    # `bins_remain_cap - item` might be slightly negative (e.g., -1e-17).
    tolerance = 1e-9
    
    # Create a boolean mask for bins where the item can actually fit.
    # A bin fits if its potential remaining capacity is non-negative,
    # considering the small tolerance.
    can_fit_mask = potential_remaining >= -tolerance
    
    # For bins where the item fits, calculate the priority score.
    # We want to minimize the positive remaining space. By taking the negative
    # of the potential remaining space, a smaller positive remaining space
    # (e.g., 0.0 for a perfect fit) results in a larger priority score (0.0).
    # A larger positive remaining space (e.g., 0.5) results in a smaller
    # priority score (-0.5).
    priorities[can_fit_mask] = -potential_remaining[can_fit_mask]
    
    return priorities
```
