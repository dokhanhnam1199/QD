```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an improved "Best Fit" heuristic with a strong
    emphasis on minimizing wasted space and maximizing bin utilization,
    especially prioritizing perfect fits.

    The priority score for a fitting bin is calculated as:
    1.0 / (1.0 + (bin's remaining capacity after placing item)).
    This ensures that bins with smaller remaining capacities (i.e., less waste)
    receive higher scores, mapping remaining capacity from [0, MaxCapacity]
    to scores from [1.0, 1.0 / (1.0 + MaxCapacity)].

    Bins where the item does not fit are assigned an extremely low priority (-np.inf).

    A significant bonus is added to bins that achieve a perfectly zero
    remaining capacity. This ensures that such bins are always selected over
    any non-perfect fit, no matter how small the remaining capacity in other bins.
    This aggressively encourages "finishing off" bins completely.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # This effectively filters out bins where the item does not fit.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Define a small tolerance for floating-point comparisons.
    EPSILON = 1e-9

    # Create a boolean mask for bins where the item actually fits.
    # We allow for very small negative remaining capacities due to float precision.
    fitting_bins_mask = potential_remaining_cap >= -EPSILON

    # For fitting bins, calculate the base priority.
    # We use 1.0 / (1.0 + remaining_capacity) to ensure positive scores where
    # smaller remaining capacity yields higher priority.
    # A perfect fit (remaining_capacity=0) will yield a base score of 1.0.
    priorities[fitting_bins_mask] = 1.0 / (1.0 + potential_remaining_cap[fitting_bins_mask])

    # Strategic Mutation: Introduce a significant bonus for perfect fits.
    # This ensures that a perfect fit (potential_remaining_cap is effectively 0)
    # always yields the highest score. The bonus must be greater than the maximum
    # possible difference between a perfect fit's base score (1.0) and any
    # non-perfect fit's base score (which will be < 1.0).
    PERFECT_FIT_BONUS = 0.1

    # Identify bins where a perfect fit is achieved using a tolerance for floats.
    perfect_fit_mask = np.isclose(potential_remaining_cap, 0.0, atol=EPSILON)

    # Apply the bonus only to bins that achieve a perfect fit.
    priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    return priorities
```
