```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function extends the "Best Fit" heuristic by:
    1. Giving a significant bonus for perfect fits.
    2. Applying an additional bonus for very snug fits (leaving very small gaps).
    3. Applying a smaller bonus for very loose fits (leaving very large gaps),
       to encourage keeping some bins versatile for potentially larger future items.
    4. Implicitly penalizing "awkward" mid-range gaps by not giving them a bonus,
       thus making them relatively less attractive compared to very snug or very loose fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Define constants for scoring
    PERFECT_FIT_BONUS = 1000.0  # A very high positive value for perfect fits
    VERY_SNUG_BONUS = 50.0      # Bonus for leaving a very small remainder
    VERY_LOOSE_BONUS = 10.0     # Bonus for leaving a very large remainder

    # Define thresholds for 'very snug' and 'very loose' gaps, relative to the item size.
    # These factors determine what constitutes a "very small" or "very large" remaining gap.
    # For example, a "very snug" gap is less than 10% of the item size.
    # A "very loose" gap is more than 150% of the item size.
    # These values are illustrative and would ideally be tuned based on typical item
    # size distributions and bin capacities for a specific problem instance.
    SNUG_THRESHOLD_FACTOR = 0.1   # new_remaining_cap < item * SNUG_THRESHOLD_FACTOR
    LOOSE_THRESHOLD_FACTOR = 1.5  # new_remaining_cap > item * LOOSE_THRESHOLD_FACTOR

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value (-infinity) for all bins.
    # This ensures that bins where the item does not fit are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # Extract the new remaining capacities for only the fitting bins.
    current_new_remaining_caps = potential_remaining_cap[fitting_bins_mask]

    # Initialize base priorities for fitting bins using the "Best Fit" logic.
    # Best Fit prioritizes bins that leave the smallest remaining capacity,
    # so we use the negative of the remaining capacity as the base score.
    # A smaller positive remaining capacity (e.g., 1.0) results in a larger
    # (less negative) base priority score (e.g., -1.0).
    base_priorities = -current_new_remaining_caps

    # Apply bonus for perfect fits (remaining capacity is exactly 0).
    # This prioritizes fully utilizing a bin.
    perfect_fit_mask = current_new_remaining_caps == 0
    base_priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # Apply bonus for very snug fits (remaining capacity is small but not zero).
    # This further emphasizes filling bins as much as possible, beyond simple Best Fit.
    very_snug_mask = (current_new_remaining_caps > 0) & \
                     (current_new_remaining_caps < item * SNUG_THRESHOLD_FACTOR)
    base_priorities[very_snug_mask] += VERY_SNUG_BONUS

    # Apply bonus for very loose fits (remaining capacity is very large).
    # This encourages leaving a substantial amount of space in a bin, which might be
    # beneficial for placing larger items later, avoiding fragmentation into many
    # moderately filled bins. This is a "Worst Fit" aspect applied strategically.
    very_loose_mask = current_new_remaining_caps > item * LOOSE_THRESHOLD_FACTOR
    base_priorities[very_loose_mask] += VERY_LOOSE_BONUS
    
    # Assign the calculated base priorities (with bonuses) back to the main priorities array
    # for the bins that fit the item. Non-fitting bins retain their -np.inf priority.
    priorities[fitting_bins_mask] = base_priorities

    return priorities
```
