```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an improved "Best Fit" like heuristic by
    explicitly prioritizing bins that would be completely filled by the item.
    It aims for "better bin utilization" by strongly encouraging the complete
    filling of bins to avoid fragmentation and maximize space efficiency.

    The priority tiers are:
    1.  **Perfect Fit**: Bins that would be *exactly* full (zero remaining capacity)
        after placing the item receive an exceptionally high positive score.
    2.  **Best Fit**: Among other bins where the item fits (leaving a positive
        remaining capacity), priority is given to those that leave the smallest
        remaining capacity. These bins receive negative scores, where a value
        closer to zero (less negative) indicates higher priority.
    3.  **Infeasible**: Bins where the item does not fit are given an extremely
        low priority (-np.inf) to ensure they are never chosen unless no other
        option exists (implying a new bin would be needed).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # This ensures bins where the item does not fit are effectively ruled out.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Define a small tolerance for floating-point comparisons when checking for perfect fit.
    epsilon = 1e-9

    # --- Tier 1: Perfect Fit (zero waste) ---
    # Create a mask for bins where the item fits perfectly (remaining capacity is effectively zero).
    perfect_fit_bins_mask = (potential_remaining_cap >= 0) & (potential_remaining_cap < epsilon)

    # Assign a very high positive score to perfect fit bins.
    # This value must be significantly higher than any possible negative score from Tier 2.
    PERFECT_FIT_SCORE = 1e9
    priorities[perfect_fit_bins_mask] = PERFECT_FIT_SCORE

    # --- Tier 2: Best Fit (minimize positive waste) ---
    # Create a mask for bins where the item fits but is not a perfect fit.
    # This excludes bins that are already handled by the perfect fit mask.
    other_fitting_bins_mask = (potential_remaining_cap >= epsilon)

    # For these bins, set the priority based on the Best Fit principle:
    # We want to minimize potential_remaining_cap, so we use its negative as the priority score.
    # A smaller positive remaining capacity results in a larger (less negative) priority score.
    priorities[other_fitting_bins_mask] = -potential_remaining_cap[other_fitting_bins_mask]

    # --- Tier 3: Infeasible (item does not fit) ---
    # Bins where potential_remaining_cap is negative remain at their initial -np.inf priority,
    # ensuring they are not selected.

    return priorities
```
