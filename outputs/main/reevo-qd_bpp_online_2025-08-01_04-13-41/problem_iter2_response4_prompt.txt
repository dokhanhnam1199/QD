{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin based on a \"Best Fit\" strategy.\n\n    This heuristic aims to place the item into the bin where it fits most tightly,\n    i.e., the bin that would have the smallest non-negative remaining capacity after\n    the item is placed. This strategy helps to leave larger contiguous spaces in\n    other bins for potentially larger future items and efficiently consolidate\n    items.\n\n    Bins that cannot accommodate the item are assigned a very low (negative infinity)\n    priority score, ensuring they are never chosen. For bins that can fit the item,\n    the priority is calculated as the negative of the remaining capacity after\n    the item is placed. A smaller positive remaining capacity (tighter fit) results\n    in a larger negative number (closer to zero), which corresponds to a higher\n    priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities with a very low value for bins that cannot fit the item.\n    # This ensures they are not chosen. Using -np.inf makes them strictly the lowest.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n\n    # Identify which bins can accommodate the current item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the remaining capacity if the item were placed in suitable bins.\n    # This 'leftover' space is the key for the Best Fit heuristic.\n    remaining_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # Assign priorities for bins that can fit the item.\n    # The Best Fit strategy selects the bin that results in the smallest leftover space.\n    # To convert 'smallest leftover' to 'highest priority score', we take the negative\n    # of the leftover space.\n    # For example:\n    # - If leftover is 0.1, priority is -0.1.\n    # - If leftover is 0.5, priority is -0.5.\n    # - If leftover is 0.0 (perfect fit), priority is 0.0 (highest possible for a fit).\n    # Since 0.0 > -0.1 > -0.5, this correctly prioritizes tighter fits.\n    priorities[can_fit_mask] = -remaining_after_fit\n\n    return priorities\n\n[Reflection]\nEvaluate item-bin interaction: prioritize tighter fits and exclude impossible placements.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}