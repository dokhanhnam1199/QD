```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" like heuristic with an added tie-breaking
    mechanism. It primarily prioritizes bins that, after the item is placed,
    would have the smallest remaining capacity (i.e., leaving the least 'waste').
    In case of a tie in the remaining capacity after placement, it further
    prioritizes bins that were already fuller (i.e., had less remaining capacity
    before the item was placed). This aims to consolidate items into fewer bins.
    Bins where the item does not fit are given an extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # This ensures that bins where the item does not fit will never be selected
    # unless no bin can fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the primary priority based on "Best Fit".
    # We want to minimize the remaining capacity (potential_remaining_cap),
    # so we use its negative as the priority score. A smaller positive remaining
    # capacity will result in a larger (less negative) primary priority score.
    primary_priorities = -potential_remaining_cap[fitting_bins_mask]

    # For tie-breaking: If multiple bins yield the exact same best fit (same
    # primary_priority), we want to choose the bin that was already fuller
    # (i.e., had a smaller original bins_remain_cap). This helps in
    # consolidating items and maximizing bin utilization.
    # We add a small weighted term. A smaller bins_remain_cap means a larger
    # (less negative) value for -bins_remain_cap, slightly boosting the score.
    # EPSILON ensures the primary Best Fit objective dominates any tie-breaking.
    EPSILON = 1e-9  # A very small number to prioritize tie-breaking without altering primary order

    secondary_priorities = -bins_remain_cap[fitting_bins_mask] * EPSILON

    # Combine primary and secondary priorities for fitting bins.
    # The tie-breaking term is small enough not to affect choices where primary
    # priorities differ, but breaks ties where they are identical.
    priorities[fitting_bins_mask] = primary_priorities + secondary_priorities

    return priorities
```
