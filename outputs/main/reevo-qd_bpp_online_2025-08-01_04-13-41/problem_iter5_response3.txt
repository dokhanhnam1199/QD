```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an enhanced "Best Fit" like heuristic.
    It prioritizes bins that, after the item is placed, would have the
    smallest remaining capacity. To strategically emphasize tighter fits and
    further discourage larger waste, for any non-zero remaining capacity, a
    quadratic penalty is applied. This makes larger remaining capacities
    significantly less desirable. Bins where the item does not fit are given
    an extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item (in which case
    # an external mechanism for opening a new bin would be triggered).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the priority.
    # We want to minimize the remaining capacity (potential_remaining_cap).
    #
    # Mutation from v1:
    # Instead of simply `-(potential_remaining_cap)`, we use `-(potential_remaining_cap ** 2)`
    # for non-zero remaining capacities.
    #
    # - If `potential_remaining_cap` is 0 (perfect fit), `0**2` is 0, so priority is 0.
    # - If `potential_remaining_cap` is > 0, squaring the value before negating
    #   amplifies the penalty for larger remaining capacities. For example:
    #   - A remaining capacity of 1.0 results in a priority of -1.0.
    #   - A remaining capacity of 10.0 results in a priority of -100.0 (compared to -10.0 in v1).
    # This strategically pushes the heuristic to strongly favor bins that achieve very tight fits.
    
    fitting_rem_caps = potential_remaining_cap[fitting_bins_mask]
    
    # Calculate the squared negative value for the priority.
    # This inherently handles the perfect fit (0) case correctly as 0^2 = 0.
    priorities[fitting_bins_mask] = -(fitting_rem_caps ** 2)

    return priorities
```
