```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" like heuristic. It prioritizes
    bins that, after the item is placed, would have the smallest remaining
    capacity (i.e., leaving the least 'waste'). Bins where the item does
    not fit are given an extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item (in which case
    # all priorities would be -np.inf, and the first bin would be chosen,
    # or an error handling mechanism for opening a new bin would be needed elsewhere).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the priority.
    # We want to minimize the remaining capacity (potential_remaining_cap),
    # so we use its negative as the priority score.
    # A smaller positive remaining capacity (e.g., 1.0) will result in a
    # larger (less negative) priority score (e.g., -1.0).
    # A larger positive remaining capacity (e.g., 10.0) will result in a
    # smaller (more negative) priority score (e.g., -10.0).
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    return priorities
```
