{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function implements a \"Best Fit\" strategy, augmented to\n    evaluate the 'impact' of the placement by applying a penalty if\n    the placement would result in a \"medium\" amount of remaining capacity\n    in the bin. This aims to minimize future waste by discouraging\n    the creation of awkwardly sized gaps that might be difficult to fill.\n    It prioritizes bins that would be nearly full (very small remainder)\n    or those that would still have a large remaining capacity after the item\n    is placed.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        The bin with the highest score (least negative) will be selected.\n    \"\"\"\n    # In standard Bin Packing Problems, the bin capacity is fixed and known.\n    # If not provided as an explicit argument, a common approach is to assume 1.0\n    # for normalized problems, or infer it from the initial state if an empty bin\n    # (with full capacity) is guaranteed to be in bins_remain_cap.\n    # For a general solution, assuming 1.0 (typical for normalized problems) is reasonable.\n    # If item sizes are integers, BIN_CAPACITY would be an integer as well (e.g., 100).\n    BIN_CAPACITY = 1.0 # This should ideally be passed as an argument or global constant.\n                       # For demonstration, assuming a normalized bin capacity of 1.0.\n\n    # Calculate the remaining capacity if the item were placed in each bin.\n    # A negative value means the item does not fit.\n    potential_remaining_cap = bins_remain_cap - item\n\n    # Initialize priorities to a very low value for all bins.\n    # -np.inf ensures that bins where the item does not fit are never selected.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).\n    fitting_bins_mask = potential_remaining_cap >= 0\n\n    # For fitting bins, set the initial priority based on \"Best Fit\".\n    # We want to minimize the remaining capacity, so we use its negative as the priority score.\n    # A smaller positive remaining capacity (e.g., 0.05) will result in a\n    # larger (less negative) priority score (e.g., -0.05). A perfect fit (0 remaining)\n    # gets a score of 0, which is the highest.\n    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]\n\n    # --- Augmentation based on \"Evaluate placement impact\" and \"minimizing future waste\" ---\n    # This part penalizes scenarios where placing the item leaves a 'medium' amount\n    # of remaining capacity. Such gaps can be considered \"waste\" because they are\n    # neither nearly full nor large enough to easily accommodate new large items.\n    # The thresholds for \"medium\" are relative to the BIN_CAPACITY and can be tuned.\n    medium_gap_lower_threshold = 0.1 * BIN_CAPACITY  # e.g., 10% of bin capacity\n    medium_gap_upper_threshold = 0.5 * BIN_CAPACITY  # e.g., 50% of bin capacity\n\n    # Define a penalty value. This should be significant enough to make a\n    # \"medium gap\" option less attractive than a non-penalized, less \"Best Fit\" option.\n    # A penalty proportional to the item size or a fixed large value can be used.\n    penalty_value = item * 2.0  # Example: 2 times the item size as penalty.\n                                 # This ensures the penalty scales with item magnitudes.\n\n    # Identify fitting bins that would result in a \"medium\" remaining capacity\n    medium_gap_mask = (potential_remaining_cap > medium_gap_lower_threshold) & \\\n                      (potential_remaining_cap < medium_gap_upper_threshold)\n\n    # Apply the penalty to the priorities of bins that fall into the \"medium gap\" range\n    # and where the item actually fits.\n    penalize_bins = fitting_bins_mask & medium_gap_mask\n    priorities[penalize_bins] -= penalty_value\n\n    return priorities\n\n[Reflection]\nPrioritize fitting bins, use Best Fit, and anticipate future waste (e.g., avoid medium gaps).\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}