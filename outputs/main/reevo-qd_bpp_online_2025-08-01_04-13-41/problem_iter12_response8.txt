```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Best Fit" like heuristic, but with a crucial
    modification: it strongly rewards perfect packing and penalizes choices
    that result in "awkward" very small, non-zero remaining capacities.
    The aim is to optimize long-term bin utilization by avoiding hard-to-fill gaps.

    Improvements over v1:
    - The "awkward gap" threshold is now dynamically calculated relative to the
      current item's size, making the heuristic more adaptive to varying item scales.
    - Uses `np.isclose` for robust floating-point comparisons, especially for
      identifying perfect fits and non-zero awkward gaps.

    Args:
        item: Size of item to be added to the bin. Must be non-negative.
        bins_remain_cap: Array of remaining capacities for each bin.
                         It is assumed that bin capacities are on a similar scale
                         (e.g., normalized, typically to 1.0).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Define constants for the heuristic. These values may need tuning
    # depending on the typical scale of item sizes and bin capacities.

    # This factor defines what constitutes a "very small, awkward gap" relative
    # to the item's size. For example, 0.1 means any remaining capacity less than
    # 10% of the item's size (but greater than 0) will be penalized.
    relative_threshold_factor = 0.1

    # This is the additional penalty applied to bins that result in an
    # "awkward gap". It must be sufficiently large to make an awkward gap
    # less desirable than a slightly larger, non-awkward gap.
    penalty_awkward_gap = 0.5

    # Determine the dynamic threshold for awkward gaps.
    # If the item size is very small or zero, use a small absolute value to prevent
    # a zero or excessively small dynamic threshold.
    if item > 1e-9:  # Use a small epsilon to check if item is effectively positive
        threshold_awkward_gap = item * relative_threshold_factor
    else:
        threshold_awkward_gap = 0.001  # A default small absolute threshold

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # -np.inf ensures that bins where the item does not fit will never be selected.
    # In an online BPP, if no bin has a priority > -inf, a new bin would typically be opened.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, calculate the base priority.
    # A smaller positive remaining capacity results in a larger (less negative) score.
    # This implements the "Best Fit" part (minimizing waste).
    base_scores = -potential_remaining_cap[fitting_bins_mask]

    # Identify bins with perfect fit (remaining capacity == 0).
    # Use np.isclose for robust floating-point comparison with zero.
    perfect_fit_mask = np.isclose(potential_remaining_cap[fitting_bins_mask], 0, atol=1e-9)
    base_scores[perfect_fit_mask] = np.finfo(float).max  # Reward perfect fits maximally

    # Identify bins that would result in a "very small, non-zero awkward gap".
    # These are gaps that are positive (not perfectly zero) and less than the dynamic threshold.
    awkward_gap_mask = (~np.isclose(potential_remaining_cap[fitting_bins_mask], 0, atol=1e-9)) & \
                       (potential_remaining_cap[fitting_bins_mask] < threshold_awkward_gap)

    # Apply the penalty to bins creating awkward gaps.
    base_scores[awkward_gap_mask] -= penalty_awkward_gap

    # Assign the calculated scores back to the main priorities array for fitting bins.
    priorities[fitting_bins_mask] = base_scores

    return priorities
```
