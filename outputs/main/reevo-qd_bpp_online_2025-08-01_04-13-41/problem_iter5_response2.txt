```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a "Worst Fit" like heuristic. It prioritizes
    bins that, after the item is placed, would have the largest remaining
    capacity. This strategy aims to spread items out more evenly across bins
    rather than compacting them, potentially leaving larger contiguous spaces
    for future large items. Bins where the item does not fit are given an
    extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item (in which case
    # an external mechanism for opening a new bin would be needed).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the priority.
    # In Worst Fit, we want to maximize the remaining capacity (potential_remaining_cap).
    # Therefore, the priority score is directly the potential remaining capacity.
    # A larger positive remaining capacity (e.g., 0.8) will result in a
    # larger priority score (e.g., 0.8), making it preferred.
    priorities[fitting_bins_mask] = potential_remaining_cap[fitting_bins_mask]

    return priorities
```
