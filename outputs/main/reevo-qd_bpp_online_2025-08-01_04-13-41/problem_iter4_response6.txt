```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin for online Bin Packing.

    This function implements a "Best Fit" heuristic, directly prioritizing bins
    that, after the item is placed, would have the smallest remaining capacity.
    It leverages item and bin properties (item size and bin remaining capacity)
    to calculate a score that promotes efficient bin utilization.

    Bins where the item does not fit are given an extremely low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative) will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value for potential_remaining_cap means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities. By default, bins are given an extremely low score.
    # This ensures that bins where the item does not fit (or any bin not
    # explicitly assigned a valid score) will not be selected by argmax
    # unless no other option exists (which signifies a new bin is needed
    # by the higher-level bin packing algorithm).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, assign priority scores.
    # To minimize the remaining capacity while maximizing the priority score,
    # we use the negative of the potential remaining capacity.
    # - A perfect fit (potential_remaining_cap = 0) results in a priority of 0.
    # - A small positive remaining capacity (e.g., 5) results in a priority of -5.
    # - A larger positive remaining capacity (e.g., 20) results in a priority of -20.
    # This correctly ranks bins: smaller remaining capacities lead to higher (less negative) scores.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    return priorities
```
