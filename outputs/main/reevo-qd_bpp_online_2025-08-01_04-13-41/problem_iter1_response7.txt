```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best-Fit-like strategy.

    This heuristic aims to place the item into the bin where it fits "most tightly".
    The priority score is calculated as the ratio of the item size to the bin's remaining capacity.
    A higher ratio indicates a tighter fit (i.e., the bin's capacity is just slightly larger
    than the item size), which is preferred. Bins where the item does not fit receive
    a very low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin. Assumed to be non-negative.
        bins_remain_cap: Array of remaining capacities for each bin. Assumed to be non-negative.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a very low value (-np.inf) for bins where the item cannot fit.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a mask for bins where the item can actually fit.
    # An item fits if its size is less than or equal to the bin's remaining capacity.
    # We also ensure bins have positive capacity when calculating the ratio for the denominator.
    # If item is 0, it fits into any bin, and ratio will be 0/cap = 0, which is consistent.
    can_fit_mask = (bins_remain_cap >= item) & (bins_remain_cap > 0)

    # For bins where the item fits, calculate the priority score.
    # The score is item / bin_capacity. A value closer to 1 indicates a tighter fit.
    # This maximizes the "fullness" of the bin relative to the item size upon placement.
    if np.any(can_fit_mask):
        fitting_bins_capacities = bins_remain_cap[can_fit_mask]
        
        # Calculate the ratio for fitting bins.
        # A smaller remaining capacity (closer to item size) yields a ratio closer to 1.
        # This prioritizes bins that will be filled most completely by the current item.
        scores_for_fitting_bins = item / fitting_bins_capacities
        
        priority_scores[can_fit_mask] = scores_for_fitting_bins

    # Special handling for item = 0: if item is 0, it perfectly fits into any bin
    # and fills none. All fitting bins would have a priority of 0.
    # This is fine, as any fitting bin would be equally "best".
    if item == 0:
        # For item 0, it effectively "fits" into any bin with remaining capacity >= 0.
        # The ratio item/capacity would be 0.
        # So we update all bins that have non-negative capacity to priority 0.
        # (Technically, bins_remain_cap should always be >= 0)
        priority_scores[bins_remain_cap >= 0] = 0.0

    return priority_scores
```
