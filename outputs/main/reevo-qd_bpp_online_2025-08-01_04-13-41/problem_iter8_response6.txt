```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements a "Best Fit" strategy by prioritizing bins that,
    if the item is placed, will maximize the *fractional utilization* of that bin's
    *currently remaining capacity*. This approach directly leverages both the
    item size and the bin's available space to minimize the "fractional waste"
    of the space that the item is placed into.

    The score is calculated as `item_size / current_bin_remaining_capacity`.

    - Bins where the item does not fit are assigned a very low (negative infinity) priority.
    - A perfect fit (where `item_size == current_bin_remaining_capacity`) yields a score of 1.0,
      as (item / item) is 1.0. This represents 100% utilization of the available space,
      making it the highest possible score.
    - A snug fit (e.g., `item_size` is 0.5 times `current_bin_remaining_capacity`) yields a score of 0.5.
    - A loose fit (e.g., `item_size` is 0.1 times `current_bin_remaining_capacity`) yields a score of 0.1.

    This approach is effective in choosing bins where the item consumes a large
    proportion of the space that is currently available, thereby attempting to
    fill bins as much as possible with a single item or pushing them closer
    to full utilization.

    Args:
        item: Size of item to be added to the bin. Must be a non-negative float.
              Typically, item sizes in Bin Packing are positive.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score is the most preferred.
    """
    # Initialize priorities. Bins that cannot fit the item will retain a very low priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Find which bins the item can fit into
    fits_mask = bins_remain_cap >= item

    # Handle the edge case where item size is non-positive.
    # Typically, item sizes in BPP are positive.
    if item <= 0:
        if item == 0:
            # If item is zero, it occupies no space. It "fits" into any bin
            # that has non-negative remaining capacity. The "utilization" of
            # any capacity by a zero-sized item is 0.0.
            # We explicitly set this to 0.0 for applicable bins,
            # which also handles potential 0/0 cases if bins_remain_cap is 0.
            priorities[fits_mask] = 0.0
        else: # item < 0, which is typically invalid for bin packing
            # All priorities remain -np.inf, effectively preventing placement.
            pass
        return priorities

    # For bins where the item fits, calculate the 'fractional utilization' score.
    # We want to maximize (item / bins_remain_cap).
    # Since item > 0 and bins_remain_cap[fits_mask] >= item,
    # bins_remain_cap[fits_mask] will always be strictly positive, preventing division by zero.
    priorities[fits_mask] = item / bins_remain_cap[fits_mask]

    return priorities
```
