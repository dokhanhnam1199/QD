{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a Best-Fit-like strategy.\n\n    This heuristic aims to place the item into the bin where it fits \"most tightly\".\n    The priority score is calculated as the ratio of the item size to the bin's remaining capacity.\n    A higher ratio indicates a tighter fit (i.e., the bin's capacity is just slightly larger\n    than the item size), which is preferred. Bins where the item does not fit receive\n    a very low (negative infinity) priority.\n\n    Args:\n        item: Size of item to be added to the bin. Assumed to be non-negative.\n        bins_remain_cap: Array of remaining capacities for each bin. Assumed to be non-negative.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities with a very low value (-np.inf) for bins where the item cannot fit.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Create a mask for bins where the item can actually fit.\n    # An item fits if its size is less than or equal to the bin's remaining capacity.\n    # We also ensure bins have positive capacity when calculating the ratio for the denominator.\n    # If item is 0, it fits into any bin, and ratio will be 0/cap = 0, which is consistent.\n    can_fit_mask = (bins_remain_cap >= item) & (bins_remain_cap > 0)\n\n    # For bins where the item fits, calculate the priority score.\n    # The score is item / bin_capacity. A value closer to 1 indicates a tighter fit.\n    # This maximizes the \"fullness\" of the bin relative to the item size upon placement.\n    if np.any(can_fit_mask):\n        fitting_bins_capacities = bins_remain_cap[can_fit_mask]\n        \n        # Calculate the ratio for fitting bins.\n        # A smaller remaining capacity (closer to item size) yields a ratio closer to 1.\n        # This prioritizes bins that will be filled most completely by the current item.\n        scores_for_fitting_bins = item / fitting_bins_capacities\n        \n        priority_scores[can_fit_mask] = scores_for_fitting_bins\n\n    # Special handling for item = 0: if item is 0, it perfectly fits into any bin\n    # and fills none. All fitting bins would have a priority of 0.\n    # This is fine, as any fitting bin would be equally \"best\".\n    if item == 0:\n        # For item 0, it effectively \"fits\" into any bin with remaining capacity >= 0.\n        # The ratio item/capacity would be 0.\n        # So we update all bins that have non-negative capacity to priority 0.\n        # (Technically, bins_remain_cap should always be >= 0)\n        priority_scores[bins_remain_cap >= 0] = 0.0\n\n    return priority_scores\n\n[Reflection]\nEvaluate and prioritize bin choices based on item fit/utilization, avoiding arbitrary selections.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}