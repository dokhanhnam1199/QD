```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function extends the "Best Fit" heuristic by incorporating domain
    knowledge to penalize "awkward" remaining capacities. It aims to:
    1. Filter invalid placements (item doesn't fit).
    2. Prioritize snug/perfect fits.
    3. Penalize creating awkward small gaps (fragmentation) that are not zero,
       thereby optimizing for long-term bin utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score (least negative in this case) will be selected.
    """
    # Define parameters for penalizing awkward gaps.
    # These values might need tuning based on the typical range of item sizes and
    # the maximum capacity of a bin. For normalized capacities (e.g., bin capacity 1.0),
    # these are reasonable starting points.
    AWKWARD_THRESHOLD = 0.1  # Remaining capacity <= this (but > 0) is considered awkward.
                             # This represents a proportion of a typical bin's capacity.
    AWKWARD_PENALTY = -0.5   # Negative penalty applied to awkward remaining capacities.
                             # This value should be significant enough to make a bin
                             # with an awkward gap less attractive than a bin with a
                             # larger, non-awkward gap.

    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value indicates the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to a very low value for all bins.
    # -np.inf ensures that bins where the item does not fit will never be selected
    # by argmax, unless no bin can accommodate the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, set the base priority.
    # The base is -potential_remaining_cap, which implements a "Best Fit" strategy:
    # smaller remaining capacities (closer to a perfect fit) result in higher priorities
    # (closer to 0). A perfect fit (0 remaining) gets a priority of 0.0.
    priorities[fitting_bins_mask] = -potential_remaining_cap[fitting_bins_mask]

    # Identify and apply penalty to "awkward" remaining capacities.
    # An awkward gap is defined as a remaining capacity that is:
    # 1. Greater than zero (not a perfect fit).
    # 2. Less than or equal to the AWKWARD_THRESHOLD.
    # This helps minimize fragmentation by discouraging the creation of very small,
    # hard-to-fill gaps.
    awkward_gaps_mask = (potential_remaining_cap > 0) & \
                        (potential_remaining_cap <= AWKWARD_THRESHOLD) & \
                        fitting_bins_mask

    priorities[awkward_gaps_mask] += AWKWARD_PENALTY

    return priorities
```
