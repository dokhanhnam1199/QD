```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an improved "Best Fit" like heuristic by leveraging
    additional information about the bin's state. It makes informed, greedy,
    and waste-minimizing choices.

    It primarily prioritizes bins that, after the item is placed, would have
    the smallest remaining capacity (i.e., leaving the least 'waste').
    As a sophisticated tie-breaker, it further prioritizes bins that were
    already more full (i.e., had less initial remaining capacity). This
    encourages 'closing' bins faster by filling up partially used bins before
    starting new ones or leaving large gaps in existing bins.
    Bins where the item does not fit are given an extremely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest score will be selected.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priorities to an extremely low value for all bins.
    # Using -np.inf ensures that bins where the item does not fit will never
    # be selected by argmax, unless no bin can fit the item (in which case
    # an external mechanism for opening a new bin would be necessary).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (remaining capacity >= 0).
    fitting_bins_mask = potential_remaining_cap >= 0

    # For fitting bins, calculate the priority score.
    # We combine two criteria:
    # 1. Primary criterion (Best Fit): Minimize the potential_remaining_cap.
    #    A smaller positive potential_remaining_cap leads to a larger (less negative) score.
    # 2. Secondary criterion (Tie-breaker): Prefer bins that were initially more full.
    #    This means preferring bins with a smaller initial bins_remain_cap.
    #    This helps 'close' bins by filling up those that are already significantly used.
    #    We use a small epsilon to ensure the primary criterion dominates unless scores are tied.
    epsilon = 1e-6  # A small factor to make the secondary criterion a tie-breaker

    # Calculate the primary score for fitting bins: negative of potential_remaining_cap.
    # A smaller potential_remaining_cap (less waste) results in a larger (less negative) primary score.
    primary_scores = -potential_remaining_cap[fitting_bins_mask]

    # Calculate the secondary score for fitting bins: negative of initial bins_remain_cap.
    # A smaller initial bins_remain_cap (bin was more full) results in a larger (less negative) secondary score.
    secondary_scores = -bins_remain_cap[fitting_bins_mask]

    # Combine the scores. The primary score (Best Fit) drives the decision,
    # and the secondary score acts as a tie-breaker.
    priorities[fitting_bins_mask] = primary_scores + epsilon * secondary_scores

    return priorities
```
