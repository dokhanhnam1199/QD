```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on the remaining capacity of each bin.
    The bin with the least remaining capacity that can still hold the item gets the highest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Mask for bins that can hold the item
    valid_bins = bins_remain_cap >= item
    
    # Priority is inversely proportional to the remaining capacity for valid bins
    priority = np.where(valid_bins, 1 / (bins_remain_cap + 1e-6), 0)
    
    # Normalize the priority scores to be between 0 and 1
    max_priority = np.max(priority)
    if max_priority > 0:
        priority /= max_priority
    
    return priority
```
