```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item and 
    have a remaining capacity that is as close as possible to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to zero
    # This score is normalized between 0 and 1
    bin_fullness_score = np.where(has_enough_capacity, bins_remain_cap - item, np.inf)
    bin_fullness_score = 1 / (1 + np.minimum(bin_fullness_score, 1e6))  # to avoid division by zero and inf
    
    # Calculate a score that rewards bins where the remaining capacity is close to the item size
    remaining_cap_score = np.where(has_enough_capacity, 
                                   1 - np.abs(bins_remain_cap - item) / (item + 1e-6), 
                                   0)
    
    # Combine the two scores to get the final priority score
    # Here we simply use the product of the two scores to get a balanced score
    priority_scores = bin_fullness_score * remaining_cap_score
    
    return priority_scores
```
