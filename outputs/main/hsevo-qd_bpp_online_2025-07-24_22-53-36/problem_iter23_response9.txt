```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and item fit scores for effective bin prioritization.
    Uses tunable weights and normalization for robustness.
    """
    epsilon = 1e-6  # Small value to avoid division by zero
    bin_fullness_weight = 1.2  # Weight for bin fullness score
    fit_score_weight = 0.8  # Weight for fit score
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate bin fullness score, rewarding bins that are fuller
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), 
                                  -1)
    
    # Calculate fit score, prioritizing bins that fit the item tightly
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item) / (item + epsilon)), 
                         0)
    
    # Combine the two scores to get the final priority score with weights
    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score
    
    return priority_scores
```
