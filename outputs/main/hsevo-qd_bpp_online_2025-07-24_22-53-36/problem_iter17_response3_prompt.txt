{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                epsilon: float = 1e-6, \n                bin_fullness_weight: float = 1.0, \n                fit_score_weight: float = 0.5) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on bin fullness and item fit.\n    Combines elements of top heuristics for effective bin prioritization.\n    \"\"\"\n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = bins_remain_cap >= item\n    \n    # Calculate bin fullness score, rewarding bins that are fuller\n    bin_fullness_score = np.where(has_enough_capacity, \n                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), \n                                  -1)\n    \n    # Calculate fit score, prioritizing bins that fit the item tightly\n    fit_score = np.where(has_enough_capacity, \n                         1 / (1 + np.abs(bins_remain_cap - item - item) / (item + epsilon)), \n                         0)\n    \n    # Combine the two scores to get the final priority score with weights\n    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines bin fullness and item fit scores for effective bin prioritization.\n    Rewards bins that are fuller and fit the item tightly.\n    \"\"\"\n    # Check if the bin has enough capacity for the item with a small threshold\n    epsilon = 1e-6  # Small value to avoid division by zero\n    has_enough_capacity = bins_remain_cap >= item\n    \n    # Calculate bin fullness score, rewarding fuller bins\n    bin_fullness_score = np.where(has_enough_capacity, 1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), -1)\n    \n    # Calculate fit score, prioritizing tight fits\n    fit_score = np.where(has_enough_capacity, 1 / (1 + np.abs(bins_remain_cap - item)), 0)\n    \n    # Combine scores with equal weights for simplicity\n    priority_scores = 0.5 * bin_fullness_score + 0.5 * fit_score\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing the best heuristics (1st) vs the worst (20th), we see that the top heuristics use more sophisticated scoring systems, including multiple weighted components, whereas the worst ones tend to oversimplify or lack tuning. \n(1st) vs (2nd) shows identical code, indicating a potential issue with the ranking. \n(3rd) vs (4th) and (5th) vs (6th) again show similarities, with slight variations in parameters. \nComparing (19th) vs (20th), we see that (20th) has a more comprehensive scoring system, including item size similarity, which is lacking in (19th). \nOverall, the top heuristics tend to have more complex scoring systems, tunable parameters, and normalization.\n- \nTo design better heuristics, let's analyze the given information.\n\n* **Keywords**: multi-faceted scoring, tunable weights, normalization, bin prioritization, simplicity, clarity.\n* **Advice**: Develop scoring systems that incorporate multiple factors and are adaptable through tunable parameters. Consider normalization to enhance interpretability and robustness.\n* **Avoid**: Unnecessary complexity and redundant parameters. Ensure that the approaches are not repetitive by focusing on diverse implementations.\n* **Explanation**: By combining the essence of the current self-reflection (multi-faceted scoring, normalization) and avoiding the repetitive aspects of ineffective self-reflection (combining multiple factors, simplicity), we can create more effective heuristics that balance complexity and clarity.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}