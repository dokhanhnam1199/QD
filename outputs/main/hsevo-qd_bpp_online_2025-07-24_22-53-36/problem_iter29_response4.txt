```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and item fit scores with tunable weights and normalization.
    """
    # Tunable parameters
    epsilon: float = 1e-6
    bin_fullness_weight: float = 0.5
    fit_score_weight: float = 0.5
    
    # Check capacity and calculate scores
    has_enough_capacity = bins_remain_cap >= item
    bin_fullness_score = np.where(has_enough_capacity, 1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), -1)
    fit_score = np.where(has_enough_capacity, 1 / (1 + np.abs(bins_remain_cap - item)), 0)
    
    # Combine scores with weights
    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score
    
    # Normalize scores
    max_score = np.max(priority_scores)
    if max_score > 0:
        priority_scores = priority_scores / max_score
    
    return priority_scores
```
