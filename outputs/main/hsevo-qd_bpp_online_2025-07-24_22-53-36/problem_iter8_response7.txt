```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and tight fit scores with tunable weights for effective bin prioritization.
    """
    epsilon = 1e-6  # Avoid division by zero
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate bin fullness score and fit score
    bin_fullness_score = np.where(has_enough_capacity, 1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), -1)
    tight_fit_score = np.where(has_enough_capacity, 1 / (np.abs(bins_remain_cap - item) + epsilon), 0)
    
    # Combine scores with weights
    weights = [0.6, 0.4]  # Tunable weights for bin fullness and tight fit scores
    priority_scores = weights[0] * bin_fullness_score + weights[1] * tight_fit_score
    
    return priority_scores
```
