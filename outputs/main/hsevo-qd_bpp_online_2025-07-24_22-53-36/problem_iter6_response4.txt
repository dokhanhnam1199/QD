```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate a score that rewards bins where the remaining capacity is close to zero (i.e., the bin is full)
    # and penalizes bins where the remaining capacity is large compared to the item size
    bin_fullness_score = np.where(has_enough_capacity, 
                                  (bins_remain_cap - remaining_cap_after_addition) / (bins_remain_cap + 1e-6), 
                                  -1)
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to the item size
    waste_score = np.where(has_enough_capacity, 
                           1 - np.abs(remaining_cap_after_addition) / (item + 1e-6), 
                           0)
    
    # Introduce tunable parameters for flexibility
    alpha = 0.6  # weight for bin fullness score
    beta = 0.4   # weight for waste score
    
    # Combine the two scores to get the final priority score with tunable parameters
    priority_scores = alpha * bin_fullness_score + beta * waste_score
    
    # Normalize the priority scores to ensure stability
    max_score = np.max(priority_scores)
    min_score = np.min(priority_scores)
    if max_score != min_score:
        priority_scores = (priority_scores - min_score) / (max_score - min_score + 1e-6)
    else:
        priority_scores = np.where(has_enough_capacity, 1.0, 0.0)
    
    return priority_scores
```
