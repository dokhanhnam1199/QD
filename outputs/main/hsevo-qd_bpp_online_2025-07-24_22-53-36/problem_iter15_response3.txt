```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate a score that rewards bins where the remaining capacity after addition is minimal
    remaining_cap_after_addition = np.maximum(bins_remain_cap - item, 0)
    bin_fullness_score = np.where(has_enough_capacity, 
                                  bins_remain_cap - remaining_cap_after_addition, 
                                  -1)
    
    # Normalize the remaining capacity score to be between 0 and 1
    remaining_cap_score = np.where(has_enough_capacity, 
                                   np.exp(-remaining_cap_after_addition / (item + 1e-6)), 
                                   0)
    
    # Combine the two scores to get the final priority score
    priority_scores = bin_fullness_score + remaining_cap_score
    
    # Normalize the priority scores
    max_score = np.max(priority_scores)
    min_score = np.min(priority_scores)
    if max_score != min_score:
        priority_scores = (priority_scores - min_score) / (max_score - min_score)
    
    return priority_scores
```
