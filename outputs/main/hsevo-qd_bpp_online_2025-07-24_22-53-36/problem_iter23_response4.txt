```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to each bin, 
    combining bin fullness and tight fit with tunable weights.
    """
    # Check if bin has enough capacity
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate scores for bin fullness and tight fit
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / bins_remain_cap, 
                                  0)
    tight_fit_score = np.where(has_enough_capacity, 
                               1 - np.abs(bins_remain_cap - item) / (item + 1e-6), 
                               0)
    
    # Combine scores with tunable weights
    weights = np.array([0.7, 0.3])  # Weights for bin_fullness_score and tight_fit_score
    priority_scores = weights[0] * bin_fullness_score + weights[1] * tight_fit_score
    
    # Normalize priority scores for robustness
    priority_scores = (priority_scores - priority_scores.min()) / (priority_scores.max() - priority_scores.min() + 1e-6)
    
    return priority_scores
```
