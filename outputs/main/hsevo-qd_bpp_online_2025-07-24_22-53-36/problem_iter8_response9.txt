```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and remaining capacity scores with weights for priority calculation.
    Rewards bins that are full and have remaining capacity close to the item size.
    """
    # Check if bin has enough capacity
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate scores for bin fullness and remaining capacity after addition
    bin_fullness_score = np.where(has_enough_capacity, 1 - ((bins_remain_cap - item) / (bins_remain_cap + 1e-6)), -1)
    remaining_cap_score = 1 / (1 + np.abs(bins_remain_cap - item) / (item + 1e-6))  # Simplified score calculation
    
    # Combine scores with weights (0.7 for bin fullness and 0.3 for remaining capacity score)
    # Weights are tuned based on analysis of top heuristics
    priority_scores = np.where(has_enough_capacity, 0.7 * bin_fullness_score + 0.3 * remaining_cap_score, -1)
    
    return priority_scores
```
