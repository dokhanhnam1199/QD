{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    The priority is higher for bins that have enough capacity for the item, \n    are more full and have a remaining capacity that is as close as possible to the item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = remaining_cap_after_addition >= 0\n    \n    # Calculate a score that rewards bins where the remaining capacity is close to zero (i.e., the bin is full)\n    # and penalizes bins where the remaining capacity is large compared to the item size\n    bin_fullness_score = np.where(has_enough_capacity, \n                                  1 - (remaining_cap_after_addition / (bins_remain_cap + 1e-6)), \n                                  -1)\n    \n    # Calculate a score that rewards bins where the remaining capacity after addition is close to the item size\n    remaining_cap_score = np.where(has_enough_capacity, \n                                   1 / (1 + np.abs(remaining_cap_after_addition - item) / (item + 1e-6)), \n                                   0)\n    \n    # Combine the two scores to get the final priority score\n    priority_scores = bin_fullness_score + remaining_cap_score\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for each bin based on bin fullness and item fit.\n    Combines simplicity with effective bin prioritization.\n    \"\"\"\n    # Check if the bin has enough capacity for the item with a small threshold\n    has_enough_capacity = bins_remain_cap >= item\n    \n    # Calculate bin fullness score, rewarding bins that are fuller\n    bin_fullness_score = np.where(has_enough_capacity, \n                                  1 - (bins_remain_cap - item) / (bins_remain_cap + 1e-6), \n                                  -1)\n    \n    # Calculate fit score, prioritizing bins that fit the item tightly\n    fit_score = np.where(has_enough_capacity, \n                         1 / (1 + np.abs(bins_remain_cap - item) / (item + 1e-6)), \n                         0)\n    \n    # Combine the two scores to get the final priority score with equal weights\n    priority_scores = 0.5 * bin_fullness_score + 0.5 * fit_score\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing the best (1st) and the worst (20th) heuristics, we see that both use similar scoring mechanisms, but the best heuristic is more concise and directly calculates the priority scores. Comparing (1st) vs (2nd), we see that they are identical. (3rd) vs (4th) also shows identical code, indicating potential redundancy in the list. Comparing (1st) and (3rd), the top heuristic is simpler and doesn't use tunable parameters, whereas the 3rd heuristic introduces several parameters and additional complexity. Comparing (second worst) vs (worst), we see that (19th) and (20th) are identical, further indicating redundancy. Overall, the top heuristics tend to be simpler and more straightforward, while the lower-ranked ones introduce more complexity and parameters, sometimes with identical implementations.\n- \nTo design better heuristics, let's redefine the 'Current self-reflection' while avoiding the pitfalls of 'Ineffective self-reflection'. Here's a refined analysis:\n\n* **Keywords**: Simplicity, Clarity, Priority, Normalization\n* **Advice**: Focus on bin priority and item fit while ensuring diverse implementations.\n* **Avoid**: Unnecessary complexity, redundant parameters, and ineffective combinations of factors.\n* **Explanation**: By prioritizing simplicity and clarity, and focusing on effective factors like bin priority and item fit, we can design better heuristics that maximize potential for improvement while avoiding common pitfalls.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}