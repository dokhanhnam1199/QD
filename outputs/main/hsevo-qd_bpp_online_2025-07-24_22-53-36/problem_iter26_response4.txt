```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on bin fullness and tight fit.
    """
    # Check if bin has enough capacity
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate scores
    bin_fullness_score = np.where(has_enough_capacity, bins_remain_cap / (bins_remain_cap.max() + 1e-6), 0)
    tight_fit_score = np.where(has_enough_capacity, 1 - ((bins_remain_cap - item) / (item + 1e-6)), 0)
    
    # Combine scores with equal weights
    priority_scores = 0.5 * bin_fullness_score + 0.5 * tight_fit_score
    
    return priority_scores
```
