```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and item fit scores for effective bin prioritization.
    Rewards bins that are fuller and fit the item tightly.
    """
    # Check if the bin has enough capacity for the item with a small threshold
    epsilon = 1e-6  # Small value to avoid division by zero
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate bin fullness score, rewarding fuller bins
    bin_fullness_score = np.where(has_enough_capacity, 1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), -1)
    
    # Calculate fit score, prioritizing tight fits
    fit_score = np.where(has_enough_capacity, 1 / (1 + np.abs(bins_remain_cap - item)), 0)
    
    # Combine scores with equal weights for simplicity
    priority_scores = 0.5 * bin_fullness_score + 0.5 * fit_score
    
    return priority_scores
```
