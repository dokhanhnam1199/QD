```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is not too small after adding the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate a "fit score" for each bin, prioritizing bins where the item fits well
    # i.e., the remaining capacity after adding the item is not too small
    fit_score = np.where(has_enough_capacity, remaining_cap_after_addition / (bins_remain_cap + 1e-6), -1)
    fit_score = np.clip(fit_score, 0, 1)  # Normalize fit score to [0, 1] range
    
    # The priority score is higher for bins that are more full (i.e., have less remaining capacity)
    # and have enough capacity for the item
    fullness_score = 1 - (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6))  # Normalize fullness score to [0, 1] range
    
    # Combine fit score and fullness score to get the final priority score
    priority_scores = np.where(has_enough_capacity, 0.5 * fit_score + 0.5 * fullness_score, -1)
    
    return priority_scores
```
