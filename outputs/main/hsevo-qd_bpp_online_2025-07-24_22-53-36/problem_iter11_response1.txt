```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on bin fullness and item fit.
    Combines simplicity with effective bin prioritization.
    """
    # Check if the bin has enough capacity for the item with a threshold
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate bin fullness score, rewarding bins that are fuller
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - bins_remain_cap / (bins_remain_cap.max() + 1e-6), 
                                  -1)
    
    # Calculate fit score, prioritizing bins that fit the item tightly
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item) / (item + 1e-6)), 
                         0)
    
    # Combine the two scores to get the final priority score with equal weights
    priority_scores = 0.5 * bin_fullness_score + 0.5 * fit_score
    
    return priority_scores
```
