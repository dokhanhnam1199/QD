```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority score is based on how well the item fits into the bin.
    A higher score indicates a better fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot hold the item
    priority = np.where(remaining_cap_after_addition >= 0, 
                        # For bins that can hold the item, the priority is inversely proportional to the remaining capacity
                        # This encourages packing items tightly
                        1 / (1 + remaining_cap_after_addition), 
                        # For bins that cannot hold the item, the priority is negative infinity
                        -np.inf)
    
    return priority
```
