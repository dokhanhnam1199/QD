```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin based on remaining capacity after adding the item.
    Prioritizes bins that fit the item tightly and normalizes scores.
    """
    # Calculate remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Assign high priority to bins that can hold the item and have less remaining capacity
    priority = np.where(remaining_after_addition >= 0, 1 / (remaining_after_addition + 1e-6), 0)
    
    # Normalize priority scores to be between 0 and 1
    max_priority = np.max(priority)
    if max_priority > 0:
        priority = priority / max_priority
    
    return priority
```
