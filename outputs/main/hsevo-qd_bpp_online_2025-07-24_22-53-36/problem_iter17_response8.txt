```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on bin fullness and item fit.
    Combines weighted bin fullness and tight fit scores for effective bin prioritization.
    """
    epsilon: float = 1e-6  # Small value to avoid division by zero
    bin_fullness_weight: float = 0.6  # Weight for bin fullness score
    fit_score_weight: float = 0.4  # Weight for fit score
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate bin fullness score, rewarding bins that are fuller
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), 
                                  -1)
    
    # Calculate fit score, prioritizing bins that fit the item tightly
    fit_score = np.where(has_enough_capacity, 
                         1 - np.abs(bins_remain_cap - item) / (item + epsilon), 
                         0)
    
    # Combine the two scores to get the final priority score with weights
    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score
    
    # Normalize the priority scores to improve robustness
    priority_scores = (priority_scores - priority_scores.min()) / (priority_scores.max() - priority_scores.min() + epsilon)
    
    return priority_scores
```
