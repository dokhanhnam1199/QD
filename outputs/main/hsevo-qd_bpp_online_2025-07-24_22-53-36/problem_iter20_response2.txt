```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on bin fullness and item fit.
    Combines simplicity with effective bin prioritization.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate bin fullness score, rewarding bins that are fuller
    epsilon = 1e-6  # Small value to avoid division by zero
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), 
                                  -1)
    
    # Calculate fit score, prioritizing bins that fit the item tightly
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item) / (item + epsilon)), 
                         0)
    
    # Normalize the scores to be between 0 and 1
    max_bin_fullness_score = np.max(bin_fullness_score)
    min_bin_fullness_score = np.min(bin_fullness_score)
    normalized_bin_fullness_score = (bin_fullness_score - min_bin_fullness_score) / (max_bin_fullness_score - min_bin_fullness_score + epsilon)
    
    max_fit_score = np.max(fit_score)
    min_fit_score = np.min(fit_score)
    normalized_fit_score = (fit_score - min_fit_score) / (max_fit_score - min_fit_score + epsilon)
    
    # Combine the two normalized scores to get the final priority score with equal weights
    priority_scores = 0.5 * normalized_bin_fullness_score + 0.5 * normalized_fit_score
    
    return priority_scores
```
