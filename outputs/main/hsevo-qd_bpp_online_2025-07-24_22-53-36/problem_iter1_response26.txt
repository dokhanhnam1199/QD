```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin based on the remaining capacity
    # and the size of the item. A bin with a remaining capacity closest to the 
    # item size will be given the highest priority.
    priority = np.where(bins_remain_cap >= item, 
                        bins_remain_cap - item,  # Best fit strategy
                        -np.inf)  # Avoid bins that are too small
    
    # In case of a tie, prefer the bin with the smallest remaining capacity
    # to minimize the number of bins used.
    priority = np.where(np.isclose(priority - np.max(priority), 0), 
                        bins_remain_cap, priority)
    
    return priority
```
