```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on bin fullness and item fit.
    Combines simplicity with effective bin prioritization.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Reward bins that are fuller and fit the item tightly
    remaining_cap_after_addition = bins_remain_cap - item
    score = np.where(has_enough_capacity, 
                     (1 - remaining_cap_after_addition / bins_remain_cap) + 
                     (1 / (1 + np.abs(remaining_cap_after_addition) / item)), 
                     -1)
    
    # Normalize the score
    priority_scores = score / (np.max(score) + 1e-6) if np.max(score) != 0 else score
    
    return priority_scores
```
