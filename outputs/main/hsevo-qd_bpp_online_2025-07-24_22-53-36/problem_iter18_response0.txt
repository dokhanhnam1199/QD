```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to zero (i.e., the bin is full)
    bin_fullness_score = np.where(has_enough_capacity, bins_remain_cap - item, -1)
    bin_fullness_score = (bin_fullness_score - np.min(bin_fullness_score)) / (np.max(bin_fullness_score) - np.min(bin_fullness_score) + 1e-6)
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to the item size
    waste_score = np.where(has_enough_capacity, np.abs(bins_remain_cap - item - item), np.inf)
    waste_score = 1 / (1 + waste_score / (item + 1e-6))
    
    # Combine the two scores with tunable weights to get the final priority score
    weights = np.array([0.6, 0.4])  # Tunable weights for bin_fullness_score and waste_score respectively
    priority_scores = weights[0] * bin_fullness_score + weights[1] * waste_score
    
    # Penalize bins that do not have enough capacity
    priority_scores = np.where(has_enough_capacity, priority_scores, -1)
    
    return priority_scores
```
