```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to bins. 
    Combines simplicity with tunable parameters for effective bin selection.
    """
    # Tunable weights
    weights = np.array([0.6, 0.4])  
    
    # Calculate remaining capacity after adding item
    remaining_cap_after_addition = bins_remain_cap - item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Score bins based on fullness and item fit
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (remaining_cap_after_addition / (bins_remain_cap + 1e-6)), 
                                  -1)
    waste_score = np.where(has_enough_capacity, 
                           1 - np.abs(remaining_cap_after_addition) / (item + 1e-6), 
                           0)
    
    # Combine scores with tunable weights
    priority_scores = weights[0] * bin_fullness_score + weights[1] * waste_score
    
    # Normalize priority scores
    priority_scores = (priority_scores - priority_scores.min()) / (priority_scores.max() - priority_scores.min() + 1e-6)
    
    return priority_scores
```
