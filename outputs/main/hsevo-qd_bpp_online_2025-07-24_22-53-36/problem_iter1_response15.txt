```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prefers bins that have just enough capacity to hold the item.
    It discourages bins that are too empty or too full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot hold the item get a priority score of -inf
    priority = np.where(remaining_after_addition >= 0, remaining_after_addition, -np.inf)
    
    # Normalize the priority scores to be between 0 and 1
    # This is done to avoid numerical issues and make the scores more interpretable
    max_priority = np.max(priority)
    if max_priority != -np.inf:
        priority = np.where(priority != -np.inf, priority / max_priority, -np.inf)
    else:
        priority = np.zeros_like(priority)
    
    return priority
```
