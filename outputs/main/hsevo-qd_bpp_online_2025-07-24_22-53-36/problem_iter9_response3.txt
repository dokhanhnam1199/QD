```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to the item size.
    This version introduces tunable weights and normalization to improve robustness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate a score that rewards bins where the remaining capacity is close to zero (i.e., the bin is full)
    bin_fullness_score = np.where(has_enough_capacity, 
                                  bins_remain_cap / (np.max(bins_remain_cap) + 1e-6), 
                                  0)
    
    # Normalize bin_fullness_score to [0, 1] range
    bin_fullness_score = (bin_fullness_score - np.min(bin_fullness_score)) / (np.max(bin_fullness_score) - np.min(bin_fullness_score) + 1e-6)
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to the item size
    remaining_cap_score = np.where(has_enough_capacity, 
                                   1 / (1 + np.abs(remaining_cap_after_addition) / (item + 1e-6)), 
                                   0)
    
    # Introduce tunable weights for the two scores
    weight_fullness = 0.6
    weight_remaining_cap = 0.4
    
    # Combine the two scores with tunable weights to get the final priority score
    priority_scores = weight_fullness * bin_fullness_score + weight_remaining_cap * remaining_cap_score
    
    return priority_scores
```
