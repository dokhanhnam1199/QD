```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to zero after adding the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to zero
    remaining_cap_after_addition = bins_remain_cap - item
    score = np.where(has_enough_capacity, 
                     1 / (1 + remaining_cap_after_addition / (item + 1e-6)), 
                     0)
    
    # Normalize the score to be between 0 and 1
    max_score = np.max(score)
    if max_score > 0:
        score = score / max_score
    
    # Add a small random noise to the score to avoid ties and encourage diversity
    np.random.seed(0)  # For reproducibility
    score += np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    
    return score
```
