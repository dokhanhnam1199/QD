```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate a score that rewards bins where the bin is full
    bin_fullness_score = np.where(has_enough_capacity, bins_remain_cap / (bins_remain_cap.max() + 1e-6), 0)
    
    # Calculate a score that rewards bins where the item fits tightly
    tight_fit_score = np.where(has_enough_capacity, 1 / (1 + np.abs(remaining_cap_after_addition)), 0)
    
    # Combine the two scores with tunable weights to get the final priority score
    weights = np.array([0.6, 0.4])  # Tunable weights for bin fullness and tight fit
    priority_scores = weights[0] * bin_fullness_score + weights[1] * tight_fit_score
    
    # Normalize the priority scores to ensure robustness
    priority_scores = (priority_scores - priority_scores.min()) / (priority_scores.max() - priority_scores.min() + 1e-6)
    
    # Penalize bins that cannot fit the item
    priority_scores = np.where(has_enough_capacity, priority_scores, -1)
    
    return priority_scores
```
