{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin.\n    The bin with the least remaining capacity that can still hold the item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Mask for bins that can hold the item\n    valid_bins = bins_remain_cap >= item\n    \n    # Priority is inversely proportional to the remaining capacity for valid bins\n    priority = np.where(valid_bins, 1 / (bins_remain_cap + 1e-6), 0)\n    \n    # Normalize the priority scores to be between 0 and 1\n    max_priority = np.max(priority)\n    if max_priority > 0:\n        priority /= max_priority\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    The priority is calculated based on the remaining capacity of each bin.\n    A bin with a remaining capacity that is just enough to hold the item gets the highest priority.\n    A bin that cannot hold the item gets a priority of negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority for each bin\n    # If the bin cannot hold the item, set the priority to negative infinity\n    priority = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Normalize the priority to be between 0 and 1\n    max_priority = np.max(priority)\n    if max_priority == -np.inf:  # If all bins are too small\n        return np.zeros_like(bins_remain_cap)\n    else:\n        return priority / max_priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic prioritizes bins based on their remaining capacity after adding the item, encouraging a tight fit. In contrast, the worst heuristic also uses a similar strategy but lacks normalization and has less consideration for edge cases. Comparing (1st) vs (2nd), both prioritize bins that fit the item tightly, but (1st) uses a slightly different formula. (2nd) and (7th) are identical in logic, suggesting a strong strategy. (3rd) prioritizes bins with less remaining capacity, which is a simpler but effective strategy. Overall, top heuristics tend to prioritize bins that are just enough to hold the item or have the least remaining capacity after adding the item, and they often normalize the priority scores.\n- \nTo improve the design of heuristics, let's rethink the 'Current self-reflection'. Here are the key takeaways:\n\n* **Keywords**: prioritization, normalization, bin fitting\n* **Advice**: Explore alternative prioritization methods and normalization techniques to improve heuristic performance.\n* **Avoid**: Blindly following traditional prioritization methods without considering the specific problem context.\n* **Explanation**: By re-examining the approach to prioritization and normalization, we can identify potential improvements to the heuristic design, such as using more sophisticated bin fitting strategies or adaptive normalization techniques.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}