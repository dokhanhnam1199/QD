```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on bin fullness and item fit.
    Combines simplicity with effective bin prioritization using weighted scores.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate bin fullness score and fit score
    epsilon = 1e-6
    bin_fullness_score = np.where(has_enough_capacity, 1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), -1)
    fit_score = np.where(has_enough_capacity, 1 / (1 + np.abs(bins_remain_cap - item) / (item + epsilon)), 0)
    
    # Combine scores with weights, using a balance between simplicity and flexibility
    priority_scores = 0.8 * bin_fullness_score + 0.2 * fit_score  # Weighted scores
    
    return priority_scores
```
