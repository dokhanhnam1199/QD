```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority is inversely proportional to the remaining capacity after adding the item.
    Encourages a tight fit and normalizes priority scores between 0 and 1.
    """
    # Mask for bins that can hold the item
    valid_bins = bins_remain_cap >= item
    
    # Priority is inversely proportional to the remaining capacity after adding the item
    priority = np.where(valid_bins, 1 / (bins_remain_cap - item + 1e-6), 0)
    
    # Normalize the priority scores to be between 0 and 1
    max_priority = np.max(priority)
    if max_priority > 0:
        priority /= max_priority
    
    return priority
```
