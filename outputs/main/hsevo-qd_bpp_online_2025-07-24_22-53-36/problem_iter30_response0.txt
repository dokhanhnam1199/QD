```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    and have a remaining capacity that is as close as possible to zero after adding the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate the remaining capacity after adding the item, handling cases where the bin can't fit the item
    remaining_cap_after_addition = np.where(has_enough_capacity, bins_remain_cap - item, np.inf)
    
    # Normalize the remaining capacity after addition to get a score between 0 and 1
    # Lower remaining capacity gets a higher score
    normalized_remaining_cap_score = 1 / (1 + remaining_cap_after_addition / (item + 1e-6))
    
    # Bins that can't fit the item get a score of 0
    priority_scores = np.where(has_enough_capacity, normalized_remaining_cap_score, 0)
    
    return priority_scores
```
