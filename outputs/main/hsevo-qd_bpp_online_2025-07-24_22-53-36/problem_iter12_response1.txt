```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item and are more full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate the bin fullness score, normalized between 0 and 1
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap / (bins_remain_cap.max() + item)), 
                                  0)
    
    # Use the bin fullness score directly as the priority score
    priority_scores = bin_fullness_score
    
    return priority_scores
```
