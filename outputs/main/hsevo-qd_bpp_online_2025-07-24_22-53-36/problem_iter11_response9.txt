```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on bin fullness and item fit.
    Simplifies the calculation by focusing on key factors and normalizing scores.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate bin fullness score, rewarding bins that are fuller
    bin_fullness_score = np.where(has_enough_capacity, 
                                  bins_remain_cap / (bins_remain_cap + item), 
                                  -1)
    
    # Calculate fit score, prioritizing bins that fit the item tightly
    fit_score = np.where(has_enough_capacity, 
                         1 - np.abs(bins_remain_cap - item) / item, 
                         0)
    
    # Combine the two scores to get the final priority score
    priority_scores = 0.5 * bin_fullness_score + 0.5 * fit_score
    
    # Normalize priority scores using tanh to avoid numerical issues
    priority_scores = np.tanh(priority_scores)
    
    return priority_scores
```
