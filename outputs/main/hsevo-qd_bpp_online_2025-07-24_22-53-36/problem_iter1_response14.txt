```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on the remaining capacity of each bin.
    A bin with remaining capacity closest to the item size gets the highest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the absolute difference between the item size and the remaining capacity of each bin
    cap_diff = np.abs(bins_remain_cap - item)
    
    # If the item can fit into a bin, the priority is inversely proportional to the difference
    # between the remaining capacity and the item size. If it can't fit, the priority is 0 (or a very low value).
    priority = np.where(bins_remain_cap >= item, 1 / (1 + cap_diff), -1e9)
    
    return priority
```
