```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and tight fit scores with tunable weights and epsilon values.
    """
    # Parameters
    epsilon: float = 1e-6
    bin_fullness_weight: float = 0.6
    fit_score_weight: float = 0.4
    capacity_threshold: float = 0
    
    # Check if bin has enough capacity
    has_enough_capacity = bins_remain_cap >= (item + capacity_threshold)
    
    # Calculate bin fullness score
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), 
                                  -1)
    
    # Calculate tight fit score
    tight_fit_score = np.where(has_enough_capacity, 
                               1 / (1 + np.abs(bins_remain_cap - item)), 
                               0)
    
    # Normalize tight fit scores
    max_tight_fit = np.max(tight_fit_score)
    tight_fit_score = tight_fit_score / max_tight_fit if max_tight_fit > 0 else np.zeros_like(bins_remain_cap)
    
    # Combine scores with weights
    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * tight_fit_score
    
    return priority_scores
```
