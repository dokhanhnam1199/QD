```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on bin fullness and item fit.
    Combines elements of top heuristics for effective bin prioritization.
    """
    # Parameters
    epsilon: float = 0.0007172075845624779
    bin_fullness_weight: float = 0.6832967170748634
    fit_score_weight: float = 0.7408009259100935
    capacity_threshold: float = -0.8405607021260366
    tight_fit_epsilon: float = 9.703058604165807e-05
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= (item + capacity_threshold)
    
    # Calculate bin fullness score, rewarding bins that are fuller
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), 
                                  -1)
    
    # Calculate fit score, prioritizing bins that fit the item tightly
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item) / (item + tight_fit_epsilon)), 
                         0)
    
    # Introduce a bias towards bins with smaller indices to break ties
    index_bias = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap)
    
    # Combine the scores with tunable weights to get the final priority score
    priority_scores = (bin_fullness_weight * bin_fullness_score + 
                       fit_score_weight * fit_score + 
                       0.1 * index_bias)  # Using a smaller weight for index_bias
    
    # Normalize the priority scores
    priority_scores = np.tanh(priority_scores)
    
    return priority_scores
```
