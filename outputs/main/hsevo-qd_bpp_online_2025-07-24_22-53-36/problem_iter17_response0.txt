```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and item fit scores with tunable weights for effective bin prioritization.
    Rewards bins that are fuller and fit the item tightly.
    """
    # Tunable parameters
    epsilon = 1e-6
    bin_fullness_weight = 1.0
    fit_score_weight = 0.5
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate bin fullness score
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), 
                                  -1)
    
    # Calculate fit score, prioritizing bins that fit the item tightly
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item) / (item + epsilon)), 
                         0)
    
    # Combine the two scores with weights
    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score
    
    return priority_scores
```
