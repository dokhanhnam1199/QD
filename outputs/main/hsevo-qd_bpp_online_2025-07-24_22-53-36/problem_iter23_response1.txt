```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                alpha: float = 0.5, beta: float = 0.5, eps: float = 1e-6) -> np.ndarray:
    """
    Returns priority scores for adding an item to each bin, 
    combining bin fullness and item fit with tunable weights.
    """
    # Check if bin has enough capacity
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate bin fullness score
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - ((bins_remain_cap - item) / (bins_remain_cap + eps)), 
                                  -1)
    
    # Calculate item fit score (remaining capacity close to zero after addition)
    item_fit_score = np.where(has_enough_capacity, 
                              1 / (1 + np.abs(bins_remain_cap - item) / (item + eps)), 
                              0)
    
    # Combine scores with tunable weights
    priority_scores = alpha * bin_fullness_score + beta * item_fit_score
    
    return priority_scores
```
