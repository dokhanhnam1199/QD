```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and item fit scores with tunable weights and normalization for robustness.
    Rewards bins that are fuller and fit the item tightly.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate bin fullness score, rewarding fuller bins
    bin_fullness_score = np.where(has_enough_capacity, bins_remain_cap / (bins_remain_cap.max() + 1e-6), -1)
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to zero (tight fit)
    tight_fit_score = np.where(has_enough_capacity, 1 - np.abs(bins_remain_cap - item) / (item + 1e-6), 0)
    
    # Combine the two scores with tunable weights to get the final priority score
    weights = np.array([0.6, 0.4])  # Tunable weights for bin_fullness_score and tight_fit_score
    priority_scores = weights[0] * bin_fullness_score + weights[1] * tight_fit_score
    
    # Normalize the priority scores to improve robustness
    priority_scores = (priority_scores - priority_scores.min()) / (priority_scores.max() - priority_scores.min() + 1e-6)
    
    return priority_scores
```
