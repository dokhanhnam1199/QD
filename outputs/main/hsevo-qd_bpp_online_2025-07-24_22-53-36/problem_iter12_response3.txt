```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item and are more full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate a score based on bin fullness, normalized between 0 and 1
    bin_fullness_score = np.where(has_enough_capacity, 1 - bins_remain_cap / (item + bins_remain_cap), 0)
    
    # Assign a very low priority to bins that cannot fit the item
    priority_scores = np.where(has_enough_capacity, bin_fullness_score, -1)
    
    return priority_scores
```
