```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item and 
    have a remaining capacity that is as close as possible to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to zero
    waste_score = np.where(has_enough_capacity, 
                           1 - (bins_remain_cap - item) / (bins_remain_cap + 1e-6), 
                           0)
    
    # Normalize the waste score to enhance interpretability
    max_waste_score = np.max(waste_score)
    if max_waste_score > 0:
        waste_score /= max_waste_score
    
    # Penalize bins that cannot fit the item
    priority_scores = np.where(has_enough_capacity, waste_score, -1)
    
    return priority_scores
```
