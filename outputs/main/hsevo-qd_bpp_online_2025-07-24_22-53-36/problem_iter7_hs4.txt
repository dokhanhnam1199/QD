import numpy as np
import random
import math
import scipy
import torch

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                epsilon: float = 0.00014602068515323833, 
                bin_fullness_weight: float = 0.8069980971819188, 
                fit_score_weight: float = 0.5930716426546345,
                capacity_threshold: float = -0.4062023955988334,
                tight_fit_epsilon: float = 4.133989541801357e-05) -> np.ndarray:
    """
    Returns priority scores for each bin based on bin fullness and item fit.
    Combines elements of top heuristics for effective bin prioritization.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= (item + capacity_threshold)
    
    # Calculate bin fullness score, rewarding bins that are fuller
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), 
                                  -1)
    
    # Calculate fit score, prioritizing bins that fit the item tightly
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item - item) / (item + tight_fit_epsilon)), 
                         0)
    
    # Combine the two scores to get the final priority score with weights
    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score
    
    return priority_scores
