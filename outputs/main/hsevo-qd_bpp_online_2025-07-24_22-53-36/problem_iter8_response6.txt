```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and fit scores with tunable weights and normalization.
    """
    # Check if the bin has enough capacity for the item with a threshold
    epsilon = 1e-6
    capacity_threshold = -0.1  # tunable parameter
    has_enough_capacity = bins_remain_cap >= (item + capacity_threshold)
    
    # Calculate bin fullness score, rewarding bins that are fuller
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), 
                                  -1)
    
    # Calculate fit score, prioritizing bins that fit the item tightly
    tight_fit_epsilon = 1e-4  # tunable parameter
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item) / (item + tight_fit_epsilon)), 
                         0)
    
    # Introduce a bias towards bins with smaller indices to break ties
    index_bias = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap)
    
    # Combine the scores with tunable weights to get the final priority score
    bin_fullness_weight = 0.6  # tunable parameter
    fit_score_weight = 0.3  # tunable parameter
    index_bias_weight = 0.1  # tunable parameter
    priority_scores = (bin_fullness_weight * bin_fullness_score + 
                       fit_score_weight * fit_score + 
                       index_bias_weight * index_bias)
    
    # Normalize the priority scores to be between 0 and 1
    priority_scores = (priority_scores - np.min(priority_scores)) / (np.max(priority_scores) - np.min(priority_scores) + epsilon)
    
    # Set the priority score to 0 for bins that don't have enough capacity
    priority_scores = np.where(has_enough_capacity, priority_scores, 0)
    
    return priority_scores
```
