```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to each bin, 
    combining bin fullness and fit scores with a simple and effective strategy.
    """
    # Calculate remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate bin fullness score (rewarding full bins)
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (remaining_cap_after_addition / (bins_remain_cap + 1e-6)), 
                                  -1)
    
    # Calculate fit score (rewarding bins with remaining capacity close to the item size)
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(remaining_cap_after_addition) / (item + 1e-6)), 
                         0)
    
    # Introduce a bias towards bins with smaller indices to break ties
    index_bias = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap)
    
    # Combine scores with fixed weights
    priority_scores = 0.7 * bin_fullness_score + 0.2 * fit_score + 0.1 * index_bias
    
    # Normalize priority scores using tanh
    priority_scores = np.tanh(priority_scores)
    
    return priority_scores
```
