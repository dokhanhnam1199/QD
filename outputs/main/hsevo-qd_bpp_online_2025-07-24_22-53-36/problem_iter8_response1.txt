```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and tight fit scores with tunable weights.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate scores for bins with enough capacity
    remaining_cap_after_addition = bins_remain_cap - item
    bin_fullness_score = np.where(has_enough_capacity, 1 - (remaining_cap_after_addition / (bins_remain_cap + 1e-6)), -1)
    tight_fit_score = np.where(has_enough_capacity, 1 / (1 + np.abs(remaining_cap_after_addition - item) / (item + 1e-6)), 0)
    
    # Combine scores with weights
    priority_scores = 0.7 * bin_fullness_score + 0.3 * tight_fit_score
    
    return priority_scores
```
