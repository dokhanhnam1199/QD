{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                epsilon: float = 1e-6, \n                bin_fullness_weight: float = 1.0, \n                fit_score_weight: float = 0.5) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on bin fullness and item fit.\n    Combines elements of top heuristics for effective bin prioritization.\n    \"\"\"\n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = bins_remain_cap >= item\n    \n    # Calculate bin fullness score, rewarding bins that are fuller\n    bin_fullness_score = np.where(has_enough_capacity, \n                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), \n                                  -1)\n    \n    # Calculate fit score, prioritizing bins that fit the item tightly\n    fit_score = np.where(has_enough_capacity, \n                         1 / (1 + np.abs(bins_remain_cap - item - item) / (item + epsilon)), \n                         0)\n    \n    # Combine the two scores to get the final priority score with weights\n    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    The priority is higher for bins that have enough capacity for the item, \n    are more full and have a remaining capacity that is as close as possible to zero.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = bins_remain_cap >= item\n    \n    # Calculate a score that rewards bins where the remaining capacity after addition is close to zero\n    remaining_cap_score = np.where(has_enough_capacity, \n                                   1 - bins_remain_cap[item > 0] / (item + 1e-6) if item > 0 else 0, \n                                   -1)\n    remaining_cap_score = np.where(has_enough_capacity, \n                                   1 - (bins_remain_cap - item) / (bins_remain_cap + 1e-6), \n                                   -1)\n    \n    # Normalize the remaining capacity score to be between 0 and 1\n    max_score = np.max(remaining_cap_score)\n    min_score = np.min(remaining_cap_score)\n    normalized_score = (remaining_cap_score - min_score) / (max_score - min_score + 1e-6)\n    \n    # Calculate a score that rewards bins that are more full\n    bin_fullness_score = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Combine the two scores to get the final priority score\n    priority_scores = np.where(has_enough_capacity, normalized_score, 0)\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst heuristic (20th), we see that both use a combination of bin fullness and remaining capacity scores, but the best heuristic uses a more straightforward calculation for the scores and does not introduce additional tunable parameters. \nComparing the 1st and 2nd heuristics, we see that the 2nd heuristic introduces tunable weights, which may allow for more flexibility but also adds complexity. \nThe worst heuristics (19th and 20th) are identical and introduce additional scores and tunable parameters, making them more complex without clear benefits. \nOverall, simpler and more straightforward calculations tend to be more effective.\n- \nTo redesign 'Current self-reflection', let's analyze and contrast it with 'Ineffective self-reflection'. \nHere are the takeaways in 4 bullet points:\n\n* **Keywords**: Simplicity, clarity, bin prioritization, normalization.\n* **Advice**: Focus on simplicity and clarity, prioritize bins based on tight fit, and consider normalization.\n* **Avoid**: Unnecessary complexity, redundant or tunable parameters without clear benefits.\n* **Explanation**: By focusing on simplicity and clear prioritization strategies like tight fit, and avoiding unnecessary complexity, we can design more effective heuristics that are interpretable and robust.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}