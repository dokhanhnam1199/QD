{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    The priority is higher for bins that have enough capacity for the item and are more full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = remaining_cap_after_addition >= 0\n    \n    # The priority score is higher for bins that are more full (i.e., have less remaining capacity)\n    # and have enough capacity for the item\n    priority_scores = np.where(has_enough_capacity, 1 / (bins_remain_cap + 1e-6), -1)\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin based on the remaining capacity\n    # and the size of the item. A bin with a remaining capacity closest to the \n    # item size will be given the highest priority.\n    priority = np.where(bins_remain_cap >= item, \n                        bins_remain_cap - item,  # Best fit strategy\n                        -np.inf)  # Avoid bins that are too small\n    \n    # In case of a tie, prefer the bin with the smallest remaining capacity\n    # to minimize the number of bins used.\n    priority = np.where(np.isclose(priority - np.max(priority), 0), \n                        bins_remain_cap, priority)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic prioritizes bins based on their remaining capacity after adding the item, encouraging a tight fit. In contrast, the worst heuristic also uses a similar strategy but lacks normalization and has less consideration for edge cases. Comparing (1st) vs (2nd), both prioritize bins that fit the item tightly, but (1st) uses a slightly different formula. (2nd) and (7th) are identical in logic, suggesting a strong strategy. (3rd) prioritizes bins with less remaining capacity, which is a simpler but effective strategy. Overall, top heuristics tend to prioritize bins that are just enough to hold the item or have the least remaining capacity after adding the item, and they often normalize the priority scores.\n- \nTo improve the design of heuristics, let's rethink the 'Current self-reflection'. Here are the key takeaways:\n\n* **Keywords**: prioritization, normalization, bin fitting\n* **Advice**: Explore alternative prioritization methods and normalization techniques to improve heuristic performance.\n* **Avoid**: Blindly following traditional prioritization methods without considering the specific problem context.\n* **Explanation**: By re-examining the approach to prioritization and normalization, we can identify potential improvements to the heuristic design, such as using more sophisticated bin fitting strategies or adaptive normalization techniques.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}