```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    and have a remaining capacity that is as close as possible to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to zero (i.e., the bin is full)
    bin_fullness_score = np.where(has_enough_capacity, bins_remain_cap - item, -1e6)
    
    # Normalize the score to be between 0 and 1
    max_score = np.max(np.where(has_enough_capacity, bin_fullness_score, -1e6))
    min_score = np.min(bin_fullness_score)
    if max_score == min_score:
        normalized_bin_fullness_score = np.zeros_like(bin_fullness_score)
    else:
        normalized_bin_fullness_score = (bin_fullness_score - min_score) / (max_score - min_score + 1e-6)
        normalized_bin_fullness_score = np.where(has_enough_capacity, normalized_bin_fullness_score, 0)
    
    # Calculate a score that rewards bins where the remaining capacity is close to the item size
    item_fit_score = np.where(has_enough_capacity, 1 / (1 + np.abs(bins_remain_cap - item) / (item + 1e-6)), 0)
    
    # Combine the two scores to get the final priority score with a tunable weight
    priority_scores = 0.7 * normalized_bin_fullness_score + 0.3 * item_fit_score
    
    return priority_scores
```
