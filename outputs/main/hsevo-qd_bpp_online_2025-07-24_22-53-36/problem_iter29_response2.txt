```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and tight fit scores with tunable weights and normalization.
    Rewards bins that are fuller and fit the item tightly, with a bias towards smaller indices.
    """
    # Check if the bin has enough capacity
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Calculate bin fullness score
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (remaining_cap_after_addition / (bins_remain_cap + 1e-6)), 
                                  -1)
    
    # Calculate tight fit score
    tight_fit_score = np.where(has_enough_capacity, 
                               1 / (1 + np.abs(remaining_cap_after_addition) / (item + 1e-6)), 
                               0)
    
    # Introduce a bias towards bins with smaller indices
    index_bias = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap)
    
    # Combine scores with tunable weights
    weights = np.array([0.5, 0.4, 0.1])  # Weights for bin_fullness_score, tight_fit_score, and index_bias
    priority_scores = (weights[0] * bin_fullness_score + 
                       weights[1] * tight_fit_score + 
                       weights[2] * index_bias)
    
    # Normalize priority scores using tanh
    priority_scores = np.tanh(priority_scores)
    
    return priority_scores
```
