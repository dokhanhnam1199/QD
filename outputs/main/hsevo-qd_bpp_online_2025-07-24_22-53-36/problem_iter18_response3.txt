```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate the proportion of the bin that is full
    bin_fullness_proportion = 1 - (bins_remain_cap / (bins_remain_cap.max() + 1e-6))
    
    # Normalize the bin fullness proportion to be between 0 and 1
    normalized_bin_fullness = np.where(has_enough_capacity, bin_fullness_proportion / (bin_fullness_proportion.max() + 1e-6), 0)
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to the item size
    remaining_cap_score = np.where(has_enough_capacity, 1 / (1 + np.abs(bins_remain_cap - item) / (item + 1e-6)), 0)
    
    # Normalize the remaining capacity score to be between 0 and 1
    normalized_remaining_cap_score = remaining_cap_score / (remaining_cap_score.max() + 1e-6)
    
    # Combine the two scores with tunable weights to get the final priority score
    weights = np.array([0.6, 0.4])  # weights for bin fullness and remaining capacity scores
    priority_scores = weights[0] * normalized_bin_fullness + weights[1] * normalized_remaining_cap_score
    
    # penalize bins that don't have enough capacity
    priority_scores = np.where(has_enough_capacity, priority_scores, -1)
    
    return priority_scores
```
