```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and item fit scores with tunable weights and normalization for robustness.
    Rewards bins that are fuller and fit the item tightly, with a balance between simplicity and nuance.
    """
    # Parameters for tuning the heuristic
    epsilon: float = 1e-6
    bin_fullness_weight: float = 0.6
    fit_score_weight: float = 0.4
    capacity_threshold: float = 0
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= (item + capacity_threshold)
    
    # Calculate bin fullness score, rewarding fuller bins
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), 
                                  -1)
    
    # Normalize bin fullness score
    bin_fullness_score = (bin_fullness_score - bin_fullness_score.min()) / (bin_fullness_score.max() - bin_fullness_score.min() + epsilon)
    
    # Calculate fit score, prioritizing bins that fit the item tightly
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item) / (item + epsilon)), 
                         0)
    
    # Combine the two scores to get the final priority score with weights
    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score
    
    return priority_scores
```
