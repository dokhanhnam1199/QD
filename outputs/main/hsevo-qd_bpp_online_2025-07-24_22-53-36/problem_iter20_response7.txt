```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and item fit scores for effective bin prioritization.
    Rewards bins that are fuller and fit the item tightly with a simple scoring system.
    """
    # Check if the bin has enough capacity for the item with a small threshold
    epsilon = 1e-6  
    capacity_threshold = -0.1  # Introduce a capacity threshold similar to priority_v0
    has_enough_capacity = bins_remain_cap >= item + capacity_threshold
    
    # Calculate bin fullness score, rewarding fuller bins
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), 
                                  -1)
    
    # Calculate fit score, prioritizing tight fits with a weight similar to priority_v0
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item) / (item + epsilon)), 
                         0)
    
    # Combine scores with weights similar to priority_v0 for a balance between bin fullness and fit
    bin_fullness_weight = 1.3  
    fit_score_weight = 0.7  
    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score
    
    return priority_scores
```
