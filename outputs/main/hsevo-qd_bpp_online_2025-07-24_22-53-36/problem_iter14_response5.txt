```python
def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                bin_fullness_weight: float = 1.0, 
                fit_score_weight: float = 0.5) -> np.ndarray:
    """
    Combines bin fullness and item fit scores for effective bin prioritization.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate bin fullness and fit scores
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / (bins_remain_cap + 1e-6), 
                                  -1)
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item) / (item + 1e-6)), 
                         0)
    
    # Combine scores with weights
    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score
    
    # Normalize priority scores
    priority_scores = (priority_scores - np.min(priority_scores)) / (np.max(priority_scores) - np.min(priority_scores) + 1e-6)
    
    return priority_scores
```
