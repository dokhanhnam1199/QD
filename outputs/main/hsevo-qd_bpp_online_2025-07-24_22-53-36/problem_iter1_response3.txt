```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is calculated based on how well the item fits into the remaining capacity of each bin.
    A higher priority is given to bins where the item fits perfectly or leaves a large remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_add = bins_remain_cap - item
    
    # Give high priority to bins where the item fits (i.e., remaining capacity after adding is non-negative)
    # and penalize bins where the item doesn't fit
    priority = np.where(remaining_cap_after_add >= 0, remaining_cap_after_add, -np.inf)
    
    # To avoid division by zero, add a small value to the denominator
    epsilon = 1e-6
    
    # Give higher priority to bins with smaller remaining capacity after adding the item (i.e., a tighter fit)
    # This is done by taking the reciprocal of the remaining capacity after adding the item
    priority = np.where(remaining_cap_after_add >= 0, 1 / (remaining_cap_after_add + epsilon), priority)
    
    return priority
```
