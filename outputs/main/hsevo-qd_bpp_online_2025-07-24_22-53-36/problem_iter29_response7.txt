```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to each bin, 
    balancing bin fullness and tight fit with tunable weights.
    """
    # Check if bin has enough capacity
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate scores for bin fullness and waste
    bin_fullness_score = np.where(has_enough_capacity, 1 - bins_remain_cap / (bins_remain_cap.max() + 1e-6), -1)
    remaining_cap_after_addition = bins_remain_cap - item
    waste_score = np.where(has_enough_capacity, 1 - np.abs(remaining_cap_after_addition) / (item + 1e-6), 0)
    
    # Combine scores with tunable weights
    weights = np.array([0.7, 0.3])  # Tunable weights for bin_fullness_score and waste_score
    priority_scores = weights[0] * bin_fullness_score + weights[1] * waste_score
    
    # Normalize priority scores
    priority_scores = (priority_scores - priority_scores.min()) / (priority_scores.max() - priority_scores.min() + 1e-6)
    
    return priority_scores
```
