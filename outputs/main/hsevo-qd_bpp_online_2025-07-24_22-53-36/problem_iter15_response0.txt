```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to zero.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to zero
    remaining_cap_score = np.where(has_enough_capacity, 
                                   1 - bins_remain_cap[item > 0] / (item + 1e-6) if item > 0 else 0, 
                                   -1)
    remaining_cap_score = np.where(has_enough_capacity, 
                                   1 - (bins_remain_cap - item) / (bins_remain_cap + 1e-6), 
                                   -1)
    
    # Normalize the remaining capacity score to be between 0 and 1
    max_score = np.max(remaining_cap_score)
    min_score = np.min(remaining_cap_score)
    normalized_score = (remaining_cap_score - min_score) / (max_score - min_score + 1e-6)
    
    # Calculate a score that rewards bins that are more full
    bin_fullness_score = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)
    
    # Combine the two scores to get the final priority score
    priority_scores = np.where(has_enough_capacity, normalized_score, 0)
    
    return priority_scores
```
