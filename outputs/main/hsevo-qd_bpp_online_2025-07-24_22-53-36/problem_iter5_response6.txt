```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines 'best-fit' and 'fullness' scores for bin prioritization.
    Prioritizes bins that fit the item tightly and are fuller.
    """
    # Check if bin has enough capacity
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate 'best-fit' score
    remaining_cap_after_addition = bins_remain_cap - item
    best_fit_score = np.where(has_enough_capacity, 1 - (remaining_cap_after_addition / (bins_remain_cap + 1e-6)), 0)
    
    # Calculate 'fullness' score with bonus for fuller bins in case of a tie
    fullness_score = np.where(has_enough_capacity, (1 - (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6))), -1)
    priority = 0.5 * best_fit_score + 0.5 * fullness_score
    
    # Normalize priority scores
    max_priority = np.max(priority)
    if max_priority > -1:
        priority = (priority - (-1)) / (max_priority - (-1))
    
    return priority
```
