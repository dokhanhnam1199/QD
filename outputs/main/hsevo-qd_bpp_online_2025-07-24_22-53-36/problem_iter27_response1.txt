```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item and have a remaining capacity 
    that is as close as possible to the item size (tight fit).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate a score that rewards bins where the remaining capacity after addition is minimal (tight fit)
    tight_fit_score = np.where(has_enough_capacity, 
                               1 / (1 + np.abs(bins_remain_cap - item) / (item + 1e-6)), 
                               0)
    
    # The priority score is directly based on the tight fit score
    priority_scores = tight_fit_score
    
    return priority_scores
```
