```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and item fit scores for effective bin prioritization, 
    focusing on simplicity and normalization for interpretability.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate bin fullness score
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / (bins_remain_cap + 1e-6), 
                                  -1)  # Penalize bins without enough capacity
    
    # Simplified fit score, prioritizing bins that fit the item tightly
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item)), 
                         0)
    
    # Combine scores with equal weight, maintaining simplicity
    priority_scores = 0.5 * bin_fullness_score + 0.5 * fit_score
    
    return priority_scores
```
