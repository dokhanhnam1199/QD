{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                epsilon: float = 0.0008334094952061082, \n                bin_fullness_weight: float = 1.32867016711678, \n                fit_score_weight: float = 0.6646809873690805,\n                capacity_threshold: float = -0.5738018773006752) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on bin fullness and item fit.\n    Combines elements of top heuristics for effective bin prioritization.\n    \"\"\"\n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = bins_remain_cap >= item + capacity_threshold\n    \n    # Calculate bin fullness score, rewarding bins that are fuller\n    bin_fullness_score = np.where(has_enough_capacity, \n                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), \n                                  -1)\n    \n    # Calculate fit score, prioritizing bins that fit the item tightly\n    fit_score = np.where(has_enough_capacity, \n                         1 / (1 + np.abs(bins_remain_cap - item - item) / (item + epsilon)), \n                         0)\n    \n    # Combine the two scores to get the final priority score with weights\n    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    The priority is higher for bins that have enough capacity for the item, \n    are more full and have a remaining capacity that is as close as possible to zero.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = bins_remain_cap >= item\n    \n    # Calculate a score that rewards bins where the remaining capacity after addition is close to zero\n    remaining_cap_score = np.where(has_enough_capacity, \n                                   1 - bins_remain_cap[item > 0] / (item + 1e-6) if item > 0 else 0, \n                                   -1)\n    remaining_cap_score = np.where(has_enough_capacity, \n                                   1 - (bins_remain_cap - item) / (bins_remain_cap + 1e-6), \n                                   -1)\n    \n    # Normalize the remaining capacity score to be between 0 and 1\n    max_score = np.max(remaining_cap_score)\n    min_score = np.min(remaining_cap_score)\n    normalized_score = (remaining_cap_score - min_score) / (max_score - min_score + 1e-6)\n    \n    # Calculate a score that rewards bins that are more full\n    bin_fullness_score = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Combine the two scores to get the final priority score\n    priority_scores = np.where(has_enough_capacity, normalized_score, 0)\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic uses a simple yet effective scoring system, while the worst has more complexity with tunable parameters. \nComparing (1st) vs (2nd), we see that both use similar scoring systems, but (2nd) introduces tunable weights. \n(3rd) vs (4th) shows that (4th) has additional tunable parameters. \nOverall, simpler heuristics tend to be more effective, and the introduction of tunable parameters does not necessarily improve performance.\n- \nTo design better heuristics, let's redefine 'Current self-reflection' while avoiding 'Ineffective self-reflection'. Here's a breakdown of the key aspects:\n\n* **Keywords**: Simplicity, bin prioritization, normalization\n* **Advice**: Focus on straightforward bin prioritization methods and consider normalization to enhance interpretability.\n* **Avoid**: Unnecessary complexity, redundant tunable parameters, and overemphasis on multi-faceted scoring systems unless proven beneficial.\n* **Explanation**: By prioritizing simplicity and focusing on effective bin prioritization, we can create more efficient heuristics that avoid unnecessary complexity and tunable parameters, ultimately leading to more interpretable and robust solutions.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}