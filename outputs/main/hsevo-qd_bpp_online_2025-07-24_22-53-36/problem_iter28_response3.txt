import numpy as np
import random
import math
import scipy
import torch

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                epsilon: float = 1.680722170568163e-05, 
                bin_fullness_weight: float = 0.9745583510049753, 
                fit_score_weight: float = 0.6934189731912643,
                capacity_threshold: float = -0.904194032934478,
                tight_fit_epsilon: float = 5.708186372636064e-05,
                fullness_reward_value: float = 1.3229577534688761,
                insufficient_capacity_penalty: float = -1.3247131895779436,
                zero_fit_score_value: float = -0.03819866141990946) -> np.ndarray:
    """
    Returns priority scores for each bin based on bin fullness and item fit.
    Combines elements of top heuristics for effective bin prioritization.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= (item + capacity_threshold)
    
    # Calculate bin fullness score, rewarding bins that are fuller
    bin_fullness_score = np.where(has_enough_capacity, 
                                  fullness_reward_value - (bins_remain_cap - item) / (bins_remain_cap + epsilon), 
                                  insufficient_capacity_penalty)
    
    # Calculate fit score, prioritizing bins that fit the item tightly
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item - item) / (item + tight_fit_epsilon)), 
                         zero_fit_score_value)
    
    # Combine the two scores to get the final priority score with weights
    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score
    
    return priority_scores
