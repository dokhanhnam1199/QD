```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority score for each bin based on item fit and bin fullness.
    Rewards bins with enough capacity, high fullness, and remaining capacity close to zero.
    """
    # Calculate remaining capacity after adding item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if bin has enough capacity
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Score bins based on fullness and item fit
    score = np.where(has_enough_capacity, 
                     (1 - remaining_cap_after_addition / (bins_remain_cap + 1e-6)) + 
                     (1 / (1 + np.abs(remaining_cap_after_addition) / (item + 1e-6))), 
                     -1)
    
    # Normalize scores to improve robustness
    score = (score - score.min()) / (score.max() - score.min() + 1e-6)
    
    return score
```
