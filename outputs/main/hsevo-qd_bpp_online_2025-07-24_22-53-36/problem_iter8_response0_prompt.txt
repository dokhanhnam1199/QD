{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                epsilon: float = 0.0007172075845624779, \n                bin_fullness_weight: float = 0.6832967170748634, \n                fit_score_weight: float = 0.7408009259100935,\n                capacity_threshold: float = -0.8405607021260366,\n                tight_fit_epsilon: float = 9.703058604165807e-05) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on bin fullness and item fit.\n    Combines elements of top heuristics for effective bin prioritization.\n    \"\"\"\n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = bins_remain_cap >= (item + capacity_threshold)\n    \n    # Calculate bin fullness score, rewarding bins that are fuller\n    bin_fullness_score = np.where(has_enough_capacity, \n                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), \n                                  -1)\n    \n    # Calculate fit score, prioritizing bins that fit the item tightly\n    fit_score = np.where(has_enough_capacity, \n                         1 / (1 + np.abs(bins_remain_cap - item - item) / (item + tight_fit_epsilon)), \n                         0)\n    \n    # Combine the two scores to get the final priority score with weights\n    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines tight fit and fullness scores for bin prioritization.\n    \"\"\"\n    # Check if bin has enough capacity\n    has_enough_capacity = bins_remain_cap >= item\n    \n    # Calculate tight fit score (higher when bin capacity is closer to item size)\n    tight_fit_score = np.where(has_enough_capacity, 1 / (bins_remain_cap - item + 1e-6), 0)\n    \n    # Normalize tight fit scores\n    max_tight_fit = np.max(tight_fit_score)\n    tight_fit_score = tight_fit_score / max_tight_fit if max_tight_fit > 0 else np.zeros_like(bins_remain_cap)\n    \n    # Calculate fullness score (higher when bin is more full)\n    fullness_score = 1 - (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6))\n    \n    # Combine scores with equal weight\n    priority = np.where(has_enough_capacity, 0.5 * tight_fit_score + 0.5 * fullness_score, 0)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the top-ranked heuristics, we see that the best heuristics (1st to 5th) share similar structures and components, such as checking if a bin has enough capacity, calculating bin fullness scores, and combining scores with weights. \nThe top heuristics also use techniques like epsilon values to avoid division by zero and normalization to ensure scores are within a certain range. \nComparing (1st) vs (5th), we see that the top heuristic uses a simpler scoring system, while the 5th heuristic introduces more complex weights and parameters (epsilon, bin_fullness_weight, fit_score_weight, etc.). \nThe middle-ranked heuristics (10th to 15th) also use similar techniques but with varying weights and scoring systems. \nComparing (10th) vs (15th), we see that the 10th heuristic uses a more straightforward scoring system, while the 15th heuristic introduces an index bias to break ties. \nThe lower-ranked heuristics (16th to 20th) tend to use simpler scoring systems and fewer parameters. \nOverall, the top heuristics tend to use a combination of bin fullness scores, fit scores, and weights to determine priority, and often include techniques to handle edge cases and normalize scores.\n- \nTo refine 'Current self-reflection' and avoid 'Ineffective self-reflection', let's analyze and redefine it. Here's a redefined version in 4 bullet points:\n\n* **Keywords**: Tunable weights, normalization, epsilon values, priority scores.\n* **Advice**: Combine multiple scores with tunable weights and consider normalization to improve robustness and avoid numerical issues.\n* **Avoid**: Repetitive suggestions (e.g., \"tunable parameters\" is similar to \"tunable weights\"), and vague terms (e.g., \"ensure stability\" is too broad).\n* **Explanation**: The redefined self-reflection focuses on specific, actionable techniques like normalization and epsilon values, while avoiding vague or repetitive suggestions, to effectively design better heuristics.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}