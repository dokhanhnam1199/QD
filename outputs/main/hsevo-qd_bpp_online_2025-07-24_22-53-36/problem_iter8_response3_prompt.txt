{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    The priority is higher for bins that have enough capacity for the item, \n    are more full and have a remaining capacity that is as close as possible to the item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = remaining_cap_after_addition >= 0\n    \n    # Calculate a score that rewards bins where the remaining capacity is close to zero (i.e., the bin is full)\n    # and penalizes bins where the remaining capacity is large compared to the item size\n    bin_fullness_score = np.where(has_enough_capacity, \n                                  1 - (remaining_cap_after_addition / (bins_remain_cap + 1e-6)), \n                                  -1)\n    \n    # Calculate a score that rewards bins where the remaining capacity after addition is close to the item size\n    remaining_cap_score = np.where(has_enough_capacity, \n                                   1 / (1 + np.abs(remaining_cap_after_addition - item) / (item + 1e-6)), \n                                   0)\n    \n    # Combine the two scores to get the final priority score\n    priority_scores = bin_fullness_score + remaining_cap_score\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    The priority is higher for bins that have enough capacity for the item, \n    are more full, have a remaining capacity that is as close as possible to the item size,\n    and have a smaller index (to break ties in a more deterministic manner).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = remaining_cap_after_addition >= 0\n    \n    # Calculate a score that rewards bins where the remaining capacity is close to zero (i.e., the bin is full)\n    bin_fullness_score = np.where(has_enough_capacity, \n                                  1 - (remaining_cap_after_addition / (bins_remain_cap + 1e-6)), \n                                  -1)\n    \n    # Calculate a score that rewards bins where the remaining capacity after addition is close to the item size\n    remaining_cap_score = np.where(has_enough_capacity, \n                                   1 / (1 + np.abs(remaining_cap_after_addition) / (item + 1e-6)), \n                                   0)\n    \n    # Introduce a bias towards bins with smaller indices to break ties\n    index_bias = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap)\n    \n    # Combine the scores with tunable weights to get the final priority score\n    weights = np.array([0.5, 0.4, 0.1])  # Weights for bin_fullness_score, remaining_cap_score, and index_bias respectively\n    priority_scores = (weights[0] * bin_fullness_score + \n                       weights[1] * remaining_cap_score + \n                       weights[2] * index_bias)\n    \n    # Normalize the priority scores to be within a certain range\n    priority_scores = np.tanh(priority_scores)\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing the top-ranked heuristics, we see that the best heuristics (1st to 5th) share similar structures and components, such as checking if a bin has enough capacity, calculating bin fullness scores, and combining scores with weights. \nThe top heuristics also use techniques like epsilon values to avoid division by zero and normalization to ensure scores are within a certain range. \nComparing (1st) vs (5th), we see that the top heuristic uses a simpler scoring system, while the 5th heuristic introduces more complex weights and parameters (epsilon, bin_fullness_weight, fit_score_weight, etc.). \nThe middle-ranked heuristics (10th to 15th) also use similar techniques but with varying weights and scoring systems. \nComparing (10th) vs (15th), we see that the 10th heuristic uses a more straightforward scoring system, while the 15th heuristic introduces an index bias to break ties. \nThe lower-ranked heuristics (16th to 20th) tend to use simpler scoring systems and fewer parameters. \nOverall, the top heuristics tend to use a combination of bin fullness scores, fit scores, and weights to determine priority, and often include techniques to handle edge cases and normalize scores.\n- \nTo refine 'Current self-reflection' and avoid 'Ineffective self-reflection', let's analyze and redefine it. Here's a redefined version in 4 bullet points:\n\n* **Keywords**: Tunable weights, normalization, epsilon values, priority scores.\n* **Advice**: Combine multiple scores with tunable weights and consider normalization to improve robustness and avoid numerical issues.\n* **Avoid**: Repetitive suggestions (e.g., \"tunable parameters\" is similar to \"tunable weights\"), and vague terms (e.g., \"ensure stability\" is too broad).\n* **Explanation**: The redefined self-reflection focuses on specific, actionable techniques like normalization and epsilon values, while avoiding vague or repetitive suggestions, to effectively design better heuristics.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}