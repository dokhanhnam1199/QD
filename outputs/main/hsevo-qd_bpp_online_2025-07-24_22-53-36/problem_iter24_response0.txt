```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    have a tight fit, and are more full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate a score that rewards bins with a tight fit for the item
    tight_fit_score = np.where(has_enough_capacity, 
                               1 / (1 + np.abs(bins_remain_cap - item) / (item + 1e-6)), 
                               0)
    
    # Calculate a score that rewards bins that are more full
    bin_fullness_score = np.where(has_enough_capacity, 
                                  bins_remain_cap / (np.max(bins_remain_cap) + 1e-6), 
                                  0)
    
    # Normalize the scores to ensure they are on the same scale
    tight_fit_score = tight_fit_score / (np.max(tight_fit_score) + 1e-6)
    bin_fullness_score = bin_fullness_score / (np.max(bin_fullness_score) + 1e-6)
    
    # Combine the two scores with tunable weights to get the final priority score
    priority_scores = 0.6 * tight_fit_score + 0.4 * bin_fullness_score
    
    return priority_scores
```
