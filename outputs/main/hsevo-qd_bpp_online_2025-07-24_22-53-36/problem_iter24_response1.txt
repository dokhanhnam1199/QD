```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate a score that rewards bins where the remaining capacity is close to zero (i.e., the bin is full)
    bin_fullness_score = np.where(has_enough_capacity, 
                                  bins_remain_cap / (bins_remain_cap.max() + 1e-6), 
                                  0)
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to zero (tight fit)
    tight_fit_score = np.where(has_enough_capacity, 
                               np.exp(-remaining_cap_after_addition / (item + 1e-6)), 
                               0)
    
    # Combine the two scores with tunable weights to get the final priority score
    w1, w2 = 0.6, 0.4  # Tunable weights
    priority_scores = w1 * bin_fullness_score + w2 * tight_fit_score
    
    return priority_scores
```
