```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and item fit scores for effective bin prioritization.
    """
    # Check if bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate scores for bin fullness and item fit
    bin_fullness_score = np.where(has_enough_capacity, 1 - (bins_remain_cap - item) / (bins_remain_cap + 1e-6), -1)
    fit_score = 1 / (1 + np.abs(bins_remain_cap - item) / (item + 1e-6))
    fit_score = np.where(has_enough_capacity, fit_score, 0)  # Penalize bins without enough capacity
    
    # Combine the scores without unnecessary weights for simplicity
    priority_scores = bin_fullness_score + fit_score
    
    return priority_scores
```
