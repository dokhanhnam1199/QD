```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on remaining capacity and item size.
    Prioritizes bins that fit the item tightly and have smaller remaining capacity.
    """
    # Calculate the absolute difference between the remaining capacity and the item size
    diff = np.abs(bins_remain_cap - item)
    
    # Assign a very low priority to bins that cannot accommodate the item
    priority = np.where(bins_remain_cap >= item, -diff, -np.inf)
    
    # In case of a tie, prefer the bin with the smallest remaining capacity
    # by adding a small bonus based on the remaining capacity
    bonus = np.where(np.isclose(priority - np.max(priority), 0), -bins_remain_cap / np.max(bins_remain_cap[bins_remain_cap >= item]), 0)
    priority += bonus
    
    # Normalize the priority scores to be between 0 and 1
    max_priority = np.max(priority)
    if max_priority > -np.inf:
        priority = (priority - (-np.inf)) / (max_priority - (-np.inf))
    
    return priority
```
