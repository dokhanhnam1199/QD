```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to each bin, 
    balancing bin fullness and remaining capacity after addition.
    """
    # Calculate remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate scores for bins with enough capacity
    fullness_score = 1 - (bins_remain_cap / (bins_remain_cap + item))  # Score for bin fullness
    fit_score = 1 - (remaining_cap_after_addition / (bins_remain_cap + 1e-6))  # Score for item fit
    
    # Combine scores with tunable weights
    priority_scores_enough_cap = 0.6 * fullness_score + 0.4 * fit_score
    
    # Assign low priority to bins without enough capacity
    priority_scores_not_enough_cap = -1 * np.ones_like(bins_remain_cap)
    
    # Combine priority scores for bins with and without enough capacity
    priority_scores = np.where(has_enough_capacity, priority_scores_enough_cap, priority_scores_not_enough_cap)
    
    return priority_scores
```
