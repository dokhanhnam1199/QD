```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have the least remaining capacity after adding the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate the priority score based on the remaining capacity after adding the item
    # and the current remaining capacity
    # The priority score is higher for bins that are more full and have less remaining capacity after adding the item
    priority_scores = np.where(has_enough_capacity, 
                               (bins_remain_cap.max() - remaining_cap_after_addition) / (bins_remain_cap + 1e-6), 
                               -1)
    
    # Normalize the priority scores to be between 0 and 1
    max_priority = np.max(priority_scores)
    if max_priority > 0:
        priority_scores = np.where(priority_scores > 0, priority_scores / max_priority, priority_scores)
    
    return priority_scores
```
