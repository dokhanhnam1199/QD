```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item and provide a tight fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate a score that rewards bins where the item fits tightly
    tightness_score = np.where(has_enough_capacity, 
                               1 - (bins_remain_cap - item) / (bins_remain_cap + 1e-6), 
                               0)
    
    # Normalize the tightness score to be between 0 and 1
    max_tightness = np.max(tightness_score)
    if max_tightness > 0:
        tightness_score = tightness_score / max_tightness
    
    # Bins without enough capacity get a priority score of 0
    priority_scores = tightness_score
    
    return priority_scores
```
