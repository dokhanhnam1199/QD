```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to zero (i.e., the bin is full)
    # Normalize the score to be between 0 and 1
    bin_fullness_score = np.where(has_enough_capacity, 
                                  (bins_remain_cap - item) / bins_remain_cap, 
                                  -1)
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to the item size
    # Normalize the score to be between 0 and 1
    waste_score = np.where(has_enough_capacity, 
                           1 - np.abs(bins_remain_cap - item) / (np.maximum(bins_remain_cap, item) + 1e-6), 
                           0)
    
    # Tunable weights for the two scores
    w1, w2 = 0.6, 0.4
    
    # Combine the two scores to get the final priority score
    priority_scores = w1 * bin_fullness_score + w2 * waste_score
    
    return priority_scores
```
