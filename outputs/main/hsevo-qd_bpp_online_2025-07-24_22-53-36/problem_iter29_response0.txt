```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to each bin, 
    balancing bin fullness and fit with tunable weights.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate scores for bin fullness and item fit
    bin_fullness_score = np.where(has_enough_capacity, bins_remain_cap / (bins_remain_cap.max() + 1e-6), 0)
    fit_score = np.where(has_enough_capacity, 1 / (1 + np.abs(bins_remain_cap - item)), 0)
    
    # Combine scores with tunable weights
    alpha, beta = 0.7, 0.3  # Tunable weights
    priority_scores = alpha * bin_fullness_score + beta * fit_score
    
    # Normalize scores to enhance interpretability
    max_score = np.max(priority_scores)
    if max_score > 0:
        priority_scores = priority_scores / max_score
    
    return priority_scores
```
