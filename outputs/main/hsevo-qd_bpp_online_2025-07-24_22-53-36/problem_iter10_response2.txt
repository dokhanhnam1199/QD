import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                alpha: float = 1.1981782217261565, beta: float = 0.695722996508042, gamma: float = 1.9695883002220986, 
                eps: float = 0.0009046426625585082) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to the item size.
    This version introduces tunable parameters for flexibility and stability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        alpha: weight for bin fullness score.
        beta: weight for remaining capacity score.
        gamma: weight for item size similarity score.
        eps: small value to prevent division by zero.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate a score that rewards bins where the remaining capacity is close to zero (i.e., the bin is full)
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (remaining_cap_after_addition / (bins_remain_cap + eps)), 
                                  -1)
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to the item size
    remaining_cap_score = np.where(has_enough_capacity, 
                                   1 / (1 + np.abs(remaining_cap_after_addition) / (item + eps)), 
                                   0)
    
    # Calculate a score that rewards bins where the item size is similar to the remaining capacity
    item_size_similarity_score = np.where(has_enough_capacity, 
                                          1 / (1 + np.abs(bins_remain_cap - item) / (item + eps)), 
                                          0)
    
    # Combine the scores with tunable weights to get the final priority score
    priority_scores = alpha * bin_fullness_score + beta * remaining_cap_score + gamma * item_size_similarity_score
    
    # Normalize the priority scores
    priority_scores = (priority_scores - np.min(priority_scores)) / (np.max(priority_scores) - np.min(priority_scores) + eps)
    
    return priority_scores
