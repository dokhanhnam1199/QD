import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                epsilon: float = 0.0003672030002971974, 
                bin_fullness_weight: float = 0.0889812014222997, 
                remaining_cap_score_weight: float = 0.28081226459581354) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value to prevent division by zero.
        bin_fullness_weight: Weight for bin fullness score.
        remaining_cap_score_weight: Weight for remaining capacity score.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate a score that rewards bins where the remaining capacity is close to zero (i.e., the bin is full)
    # and penalizes bins where the remaining capacity is large compared to the item size
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (remaining_cap_after_addition / (bins_remain_cap + epsilon)), 
                                  -1)
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to the item size
    remaining_cap_score = np.where(has_enough_capacity, 
                                   1 / (1 + np.abs(remaining_cap_after_addition - item) / (item + epsilon)), 
                                   0)
    
    # Combine the two scores to get the final priority score
    priority_scores = bin_fullness_weight * bin_fullness_score + remaining_cap_score_weight * remaining_cap_score
    
    return priority_scores
