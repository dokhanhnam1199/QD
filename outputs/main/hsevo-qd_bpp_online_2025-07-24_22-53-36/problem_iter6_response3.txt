```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full, have a remaining capacity that is as close as possible to the item size,
    and have a smaller index (to break ties in favor of earlier bins).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate a score that rewards bins where the remaining capacity is close to zero (i.e., the bin is full)
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (remaining_cap_after_addition / (bins_remain_cap + 1e-6)), 
                                  -1)
    
    # Calculate a score that rewards bins where the remaining capacity after addition is close to the item size
    remaining_cap_score = np.where(has_enough_capacity, 
                                   1 / (1 + np.abs(remaining_cap_after_addition) / (item + 1e-6)), 
                                   0)
    
    # Calculate a score that rewards bins with smaller indices (to break ties in favor of earlier bins)
    bin_index_score = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap)
    
    # Combine the three scores to get the final priority score with tunable weights
    weights = np.array([0.5, 0.4, 0.1])  # weights for bin_fullness_score, remaining_cap_score, and bin_index_score respectively
    priority_scores = (weights[0] * bin_fullness_score + 
                       weights[1] * remaining_cap_score + 
                       weights[2] * bin_index_score)
    
    # Normalize the priority scores to be between 0 and 1
    priority_scores = (priority_scores - np.min(priority_scores)) / (np.max(priority_scores) - np.min(priority_scores) + 1e-6)
    
    # Set the priority score to 0 for bins that don't have enough capacity
    priority_scores = np.where(has_enough_capacity, priority_scores, 0)
    
    return priority_scores
```
