```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines tight fit and fullness scores for bin prioritization.
    """
    # Check if bin has enough capacity
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate tight fit score (higher when bin capacity is closer to item size)
    tight_fit_score = np.where(has_enough_capacity, 1 / (bins_remain_cap - item + 1e-6), 0)
    
    # Normalize tight fit scores
    max_tight_fit = np.max(tight_fit_score)
    tight_fit_score = tight_fit_score / max_tight_fit if max_tight_fit > 0 else np.zeros_like(bins_remain_cap)
    
    # Calculate fullness score (higher when bin is more full)
    fullness_score = 1 - (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6))
    
    # Combine scores with equal weight
    priority = np.where(has_enough_capacity, 0.5 * tight_fit_score + 0.5 * fullness_score, 0)
    
    return priority
```
