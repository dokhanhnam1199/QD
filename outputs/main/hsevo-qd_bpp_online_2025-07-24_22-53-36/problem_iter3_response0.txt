```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate a 'best-fit' score, where bins with remaining capacity closest to 0 are preferred
    best_fit_score = np.where(has_enough_capacity, 1 - (remaining_cap_after_addition / (bins_remain_cap + 1e-6)), 0)
    
    # The priority score is a combination of the 'best-fit' score and a term that prioritizes fuller bins
    priority_scores = np.where(has_enough_capacity, 0.5 * best_fit_score + 0.5 * (1 - (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6))), -1)
    
    return priority_scores
```
