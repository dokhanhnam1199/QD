{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version uses a heuristic that prioritizes bins that have just enough capacity for the item.\n    The priority is calculated as the negative of the absolute difference between the remaining capacity and the item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin as the negative of the absolute difference between the remaining capacity and the item size\n    priority = -np.abs(bins_remain_cap - item)\n    \n    # Set the priority score to negative infinity for bins that cannot hold the item\n    priority[bins_remain_cap < item] = -np.inf\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prefers bins that have just enough capacity to hold the item.\n    It discourages bins that are too empty or too full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Bins that cannot hold the item get a priority score of -inf\n    priority = np.where(remaining_after_addition >= 0, remaining_after_addition, -np.inf)\n    \n    # Normalize the priority scores to be between 0 and 1\n    # This is done to avoid numerical issues and make the scores more interpretable\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:\n        priority = np.where(priority != -np.inf, priority / max_priority, -np.inf)\n    else:\n        priority = np.zeros_like(priority)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic prioritizes bins based on their remaining capacity after adding the item, encouraging a tight fit. In contrast, the worst heuristic also uses a similar strategy but lacks normalization and has less consideration for edge cases. Comparing (1st) vs (2nd), both prioritize bins that fit the item tightly, but (1st) uses a slightly different formula. (2nd) and (7th) are identical in logic, suggesting a strong strategy. (3rd) prioritizes bins with less remaining capacity, which is a simpler but effective strategy. Overall, top heuristics tend to prioritize bins that are just enough to hold the item or have the least remaining capacity after adding the item, and they often normalize the priority scores.\n- \nTo improve the design of heuristics, let's rethink the 'Current self-reflection'. Here are the key takeaways:\n\n* **Keywords**: prioritization, normalization, bin fitting\n* **Advice**: Explore alternative prioritization methods and normalization techniques to improve heuristic performance.\n* **Avoid**: Blindly following traditional prioritization methods without considering the specific problem context.\n* **Explanation**: By re-examining the approach to prioritization and normalization, we can identify potential improvements to the heuristic design, such as using more sophisticated bin fitting strategies or adaptive normalization techniques.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}