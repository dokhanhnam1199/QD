```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines simplicity with effective bin prioritization.
    Rewards bins that are fuller and fit the item tightly.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Simple yet effective scoring system
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / bins_remain_cap.max(), 
                                  -1)
    
    # Fit score prioritizes bins that fit the item tightly
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item)), 
                         0)
    
    # Combine scores without tunable weights for simplicity
    priority_scores = 0.7 * bin_fullness_score + 0.3 * fit_score
    
    return priority_scores
```
