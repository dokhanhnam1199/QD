```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and item fit scores with tunable weights and normalization for robustness.
    """
    # Check if the bin has enough capacity for the item with a threshold
    capacity_threshold = -0.8405607021260366
    has_enough_capacity = bins_remain_cap >= (item + capacity_threshold)
    
    # Calculate bin fullness score, rewarding bins that are fuller
    epsilon = 0.0007172075845624779
    bin_fullness_score = np.where(has_enough_capacity, 
                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), 
                                  -1)
    
    # Calculate fit score, prioritizing bins that fit the item tightly
    tight_fit_epsilon = 9.703058604165807e-05
    fit_score = np.where(has_enough_capacity, 
                         1 / (1 + np.abs(bins_remain_cap - item) / (item + tight_fit_epsilon)), 
                         0)
    
    # Combine the two scores to get the final priority score with weights
    bin_fullness_weight = 0.6832967170748634
    fit_score_weight = 0.7408009259100935
    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score
    
    # Normalize the priority scores to improve robustness
    priority_scores = (priority_scores - priority_scores.min()) / (priority_scores.max() - priority_scores.min() + 1e-6)
    
    return priority_scores
```
