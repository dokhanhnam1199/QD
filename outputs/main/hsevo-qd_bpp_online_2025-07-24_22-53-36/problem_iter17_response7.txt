```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and remaining capacity similarity scores for bin prioritization.
    
    Rewards bins that are full and have remaining capacity close to the item size.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Calculate scores for bin fullness and remaining capacity similarity
    bin_fullness_score = np.where(has_enough_capacity, 1 - (remaining_cap_after_addition / bins_remain_cap), -1)
    remaining_cap_score = np.where(has_enough_capacity, 1 / (1 + np.abs(remaining_cap_after_addition) / (item + 1e-6)), 0)
    
    # Weighted sum of the two scores to get the final priority score
    priority_scores = 0.7 * bin_fullness_score + 0.3 * remaining_cap_score
    
    return priority_scores
```
