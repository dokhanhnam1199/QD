```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines elements of priority_v0 and priority_v1 to create a more effective heuristic.
    Prioritizes bins based on remaining capacity after addition, fullness, and fit.
    """
    # Calculate remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate priority score based on remaining capacity after addition and fullness
    priority_scores = np.where(has_enough_capacity, 
                               (bins_remain_cap.max() - remaining_cap_after_addition) / (bins_remain_cap + 1e-6), 
                               -1)
    
    # Introduce a bonus for bins that fit the item tightly
    diff = np.abs(bins_remain_cap - item)
    bonus = np.where(has_enough_capacity, -diff / (bins_remain_cap.max() + 1e-6), 0)
    priority_scores += bonus
    
    # Normalize the priority scores to be between 0 and 1
    max_priority = np.max(priority_scores)
    if max_priority > 0:
        priority_scores = np.where(priority_scores > 0, priority_scores / max_priority, priority_scores)
    
    return priority_scores
```
