```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have the least remaining capacity after adding the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Check if the bin has enough capacity for the item
    has_enough_capacity = remaining_cap_after_addition >= 0
    
    # Calculate the priority score for bins with enough capacity
    # The priority score is a combination of the bin's fullness and the remaining capacity after adding the item
    # We use a weighted sum to balance these two factors
    priority_scores_enough_cap = 0.7 * (1 - (bins_remain_cap / (item + bins_remain_cap))) + 0.3 * (1 - (remaining_cap_after_addition / bins_remain_cap))
    
    # Assign a low priority score to bins without enough capacity
    priority_scores_not_enough_cap = -1 * np.ones_like(bins_remain_cap)
    
    # Combine the priority scores for bins with and without enough capacity
    priority_scores = np.where(has_enough_capacity, priority_scores_enough_cap, priority_scores_not_enough_cap)
    
    return priority_scores
```
