```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is inversely proportional to the remaining capacity 
    after adding the item and directly proportional to the current 
    remaining capacity. This encourages using bins that are not too 
    empty and can still fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that cannot fit the item get a priority of negative infinity
    priority = np.where(remaining_after_addition >= 0, 
                        bins_remain_cap / (remaining_after_addition + 1e-9), 
                        -np.inf)
    
    return priority
```
