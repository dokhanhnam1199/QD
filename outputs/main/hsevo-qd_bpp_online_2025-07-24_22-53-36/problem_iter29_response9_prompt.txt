{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                epsilon: float = 1e-6, \n                bin_fullness_weight: float = 1.0, \n                fit_score_weight: float = 0.5) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin based on bin fullness and item fit.\n    Combines elements of top heuristics for effective bin prioritization.\n    \"\"\"\n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = bins_remain_cap >= item\n    \n    # Calculate bin fullness score, rewarding bins that are fuller\n    bin_fullness_score = np.where(has_enough_capacity, \n                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), \n                                  -1)\n    \n    # Calculate fit score, prioritizing bins that fit the item tightly\n    fit_score = np.where(has_enough_capacity, \n                         1 / (1 + np.abs(bins_remain_cap - item - item) / (item + epsilon)), \n                         0)\n    \n    # Combine the two scores to get the final priority score with weights\n    priority_scores = bin_fullness_weight * bin_fullness_score + fit_score_weight * fit_score\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                epsilon: float = 1e-6, \n                bin_fullness_weight: float = 1.0) -> np.ndarray:\n    \"\"\"\n    Combines bin fullness and item fit scores for effective bin prioritization.\n    \"\"\"\n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = bins_remain_cap >= item\n    \n    # Calculate bin fullness score, rewarding bins that are fuller\n    bin_fullness_score = np.where(has_enough_capacity, \n                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), \n                                  -1)\n    \n    # Simplify by using a straightforward fit score\n    fit_score = np.where(has_enough_capacity, 1 / (1 + np.abs(bins_remain_cap - item) / (item + epsilon)), 0)\n    \n    # Combine scores with a single tunable weight for simplicity\n    priority_scores = bin_fullness_weight * bin_fullness_score + (1 - bin_fullness_weight) * fit_score\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that both heuristics combine bin fullness and item fit scores, but the 1st heuristic uses more complex scoring systems and has more nuanced weighting. (2nd) vs (19th) shows that the top heuristics often include additional parameters for tuning. Comparing (1st) vs (2nd), we see that the 2nd has more parameters to potentially overfit. Overall, top heuristics balance complexity with nuanced scoring.\n- \nTo design better heuristics, we need to analyze the given 'Current self-reflection' and 'Ineffective self-reflection'. Here's a step-by-step analysis:\n\n* Keywords: simplicity, tunable parameters, normalization, bin fullness, item fit.\n* Advice: \n    - Balance complexity and nuance in scoring systems.\n    - Focus on prioritizing bins based on how tightly they can fit the item.\n    - Consider normalization to avoid numerical issues.\n    - Simplify scoring systems while incorporating relevant factors.\n* Avoid: unnecessary complexity, redundant parameters, ineffective use of tunable weights.\n* Explanation: Effective heuristics require a balance between simplicity and nuance, considering factors like bin fullness and item fit while avoiding unnecessary complexity.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}