{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    The priority is higher for bins that have enough capacity for the item, \n    are more full and have a remaining capacity that is as close as possible to the item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = remaining_cap_after_addition >= 0\n    \n    # Calculate a score that rewards bins where the remaining capacity is close to zero (i.e., the bin is full)\n    bin_fullness_score = np.where(has_enough_capacity, \n                                  bins_remain_cap / (bins_remain_cap.max() + 1e-6), \n                                  -1)\n    \n    # Calculate a score that rewards bins where the remaining capacity after addition is close to the item size\n    waste_score = np.where(has_enough_capacity, \n                           1 - np.abs(remaining_cap_after_addition) / (item + 1e-6), \n                           0)\n    \n    # Combine the two scores with tunable weights to get the final priority score\n    weights = np.array([0.6, 0.4])  # Tunable weights for bin_fullness_score and waste_score\n    priority_scores = weights[0] * bin_fullness_score + weights[1] * waste_score\n    \n    # Normalize the priority scores to improve robustness\n    priority_scores = (priority_scores - priority_scores.min()) / (priority_scores.max() - priority_scores.min() + 1e-6)\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                epsilon: float = 1e-6, \n                bin_fullness_weight: float = 1.0) -> np.ndarray:\n    \"\"\"\n    Combines bin fullness and item fit scores for effective bin prioritization.\n    \"\"\"\n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = bins_remain_cap >= item\n    \n    # Calculate bin fullness score, rewarding bins that are fuller\n    bin_fullness_score = np.where(has_enough_capacity, \n                                  1 - (bins_remain_cap - item) / (bins_remain_cap + epsilon), \n                                  -1)\n    \n    # Simplify by using a straightforward fit score\n    fit_score = np.where(has_enough_capacity, 1 / (1 + np.abs(bins_remain_cap - item) / (item + epsilon)), 0)\n    \n    # Combine scores with a single tunable weight for simplicity\n    priority_scores = bin_fullness_weight * bin_fullness_score + (1 - bin_fullness_weight) * fit_score\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic combines bin fullness and item fit scores effectively, while the worst only considers bin fullness. \nThe top heuristics (1st-5th) all have a similar structure, combining bin fullness and fit scores with varying weights and thresholds. \nIn contrast, the lower-ranked heuristics (15th-20th) tend to simplify or omit certain aspects, such as item fit or normalization.\n- \nTo design better heuristics, let's analyze the given 'Current self-reflection' and 'Ineffective self-reflection'. Here's a summary in 4 bullet points:\n\n* **Keywords**: Tunable weights, normalization, bin fullness, item fit, simplicity, robustness.\n* **Advice**: Combine multiple relevant factors with tunable weights and consider normalization for robustness; prioritize bins based on tight fit.\n* **Avoid**: Unnecessary complexity, redundant parameters, and lack of normalization or tunable weights unless simplicity is proven effective.\n* **Explanation**: By focusing on a balanced combination of relevant factors and avoiding ineffective approaches, we can design more robust and adaptable heuristics.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}