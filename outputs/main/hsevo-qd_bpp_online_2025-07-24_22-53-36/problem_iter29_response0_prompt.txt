{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    The priority is higher for bins that have enough capacity for the item, \n    are more full and have a remaining capacity that is as close as possible to the item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity for each bin after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = remaining_cap_after_addition >= 0\n    \n    # Calculate a score that rewards bins where the remaining capacity is close to zero (i.e., the bin is full)\n    bin_fullness_score = np.where(has_enough_capacity, \n                                  bins_remain_cap / (bins_remain_cap.max() + 1e-6), \n                                  0)\n    \n    # Calculate a score that rewards bins where the remaining capacity after addition is close to the item size\n    waste_score = np.where(has_enough_capacity, \n                           1 - np.abs(remaining_cap_after_addition) / (item + 1e-6), \n                           -1)\n    \n    # Tunable weights for the scores\n    alpha, beta = 0.6, 0.4\n    \n    # Combine the two scores to get the final priority score with tunable weights\n    priority_scores = alpha * bin_fullness_score + beta * waste_score\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n    The priority is higher for bins that have enough capacity for the item and \n    have a remaining capacity that is as close as possible to the item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check if the bin has enough capacity for the item\n    has_enough_capacity = bins_remain_cap >= item\n    \n    # Calculate a score that rewards bins where the remaining capacity after addition is close to zero\n    # Use a simple and effective scoring system\n    priority_scores = np.where(has_enough_capacity, \n                               1 / (1 + np.abs(bins_remain_cap - item)), \n                               0)\n    \n    # Normalize the scores to enhance interpretability\n    max_score = np.max(priority_scores)\n    if max_score > 0:\n        priority_scores = priority_scores / max_score\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that both heuristics combine bin fullness and item fit scores, but the 1st heuristic uses more complex scoring systems and has more nuanced weighting. (2nd) vs (19th) shows that the top heuristics often include additional parameters for tuning. Comparing (1st) vs (2nd), we see that the 2nd has more parameters to potentially overfit. Overall, top heuristics balance complexity with nuanced scoring.\n- \nTo design better heuristics, we need to analyze the given 'Current self-reflection' and 'Ineffective self-reflection'. Here's a step-by-step analysis:\n\n* Keywords: simplicity, tunable parameters, normalization, bin fullness, item fit.\n* Advice: \n    - Balance complexity and nuance in scoring systems.\n    - Focus on prioritizing bins based on how tightly they can fit the item.\n    - Consider normalization to avoid numerical issues.\n    - Simplify scoring systems while incorporating relevant factors.\n* Avoid: unnecessary complexity, redundant parameters, ineffective use of tunable weights.\n* Explanation: Effective heuristics require a balance between simplicity and nuance, considering factors like bin fullness and item fit while avoiding unnecessary complexity.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}