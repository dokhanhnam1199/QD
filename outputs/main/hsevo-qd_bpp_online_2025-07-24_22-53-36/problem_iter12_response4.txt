```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    The priority is higher for bins that have enough capacity for the item, 
    are more full and have a remaining capacity that is as close as possible to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the bin has enough capacity for the item
    has_enough_capacity = bins_remain_cap >= item
    
    # Calculate a score that rewards bins where the item fits well and the bin is full
    priority_scores = np.where(has_enough_capacity, 
                               (bins_remain_cap - item) / bins_remain_cap, 
                               -1)
    
    # Normalize the scores for bins that can hold the item to be between 0 and 1
    valid_scores = priority_scores[has_enough_capacity]
    if len(valid_scores) > 0:
        min_score = np.min(valid_scores)
        max_score = np.max(valid_scores)
        if max_score != min_score:
            priority_scores[has_enough_capacity] = (valid_scores - min_score) / (max_score - min_score)
        else:
            priority_scores[has_enough_capacity] = 1
    
    return priority_scores
```
