[
     {
          "algorithm": "This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs, weighting edges in shorter tours higher.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs, weighting edges in shorter tours higher.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n    num_trials = 50\n\n    def calculate_tour_length(tour):\n        length = 0\n        for i in range(n):\n            length += distance_matrix[tour[i], tour[(i + 1) % n]]\n        return length\n\n    def two_opt_swap(tour, i, k):\n        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]\n        return new_tour\n\n    def two_opt(tour):\n        best_tour = tour\n        best_length = calculate_tour_length(tour)\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, n - 1):\n                for k in range(i + 1, n):\n                    new_tour = two_opt_swap(best_tour, i, k)\n                    new_length = calculate_tour_length(new_tour)\n                    if new_length < best_length:\n                        best_tour = new_tour\n                        best_length = new_length\n                        improved = True\n        return best_tour, best_length\n\n    def nearest_neighbor_tour(start_node):\n        tour = [start_node]\n        unvisited_nodes = set(range(n))\n        unvisited_nodes.remove(start_node)\n        current_node = start_node\n\n        while unvisited_nodes:\n            nearest_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node, x])\n            tour.append(nearest_node)\n            unvisited_nodes.remove(nearest_node)\n            current_node = nearest_node\n        tour.append(start_node)\n        tour = tour[:-1]\n        return tour\n\n    for _ in range(num_trials):\n        # Generate a tour using nearest neighbor heuristic\n        start_node = np.random.randint(0, n)\n        initial_tour = nearest_neighbor_tour(start_node)\n\n        # Apply 2-opt to improve the tour\n        best_tour, best_length = two_opt(initial_tour)\n\n        # Update the heuristics matrix based on the edges in the improved tour, weighting by tour length\n        weight = 1.0 / best_length\n        for i in range(n):\n            node1 = best_tour[i]\n            node2 = best_tour[(i + 1) % n]\n            heuristics_matrix[node1, node2] += weight\n            heuristics_matrix[node2, node1] += weight\n\n    # Normalize the heuristics matrix\n    total_weight = np.sum(heuristics_matrix)\n    if total_weight > 0:\n        heuristics_matrix /= total_weight\n\n    return heuristics_matrix",
          "objective": 5.71614,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs, weighting edges in shorter tours using an exponential decay based on rank.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs, weighting edges in shorter tours using an exponential decay based on rank.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n    num_trials = 50\n\n    def calculate_tour_length(tour):\n        length = 0\n        for i in range(n):\n            length += distance_matrix[tour[i], tour[(i + 1) % n]]\n        return length\n\n    def two_opt_swap(tour, i, k):\n        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]\n        return new_tour\n\n    def two_opt(tour):\n        best_tour = tour\n        best_length = calculate_tour_length(tour)\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, n - 1):\n                for k in range(i + 1, n):\n                    new_tour = two_opt_swap(best_tour, i, k)\n                    new_length = calculate_tour_length(new_tour)\n                    if new_length < best_length:\n                        best_tour = new_tour\n                        best_length = new_length\n                        improved = True\n        return best_tour, best_length\n\n    def nearest_neighbor_tour(start_node):\n        tour = [start_node]\n        unvisited_nodes = set(range(n))\n        unvisited_nodes.remove(start_node)\n        current_node = start_node\n\n        while unvisited_nodes:\n            nearest_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node, x])\n            tour.append(nearest_node)\n            unvisited_nodes.remove(nearest_node)\n            current_node = nearest_node\n        tour.append(start_node)\n        tour = tour[:-1]\n        return tour\n\n    tour_lengths = []\n    tours = []\n    for _ in range(num_trials):\n        # Generate a tour using nearest neighbor heuristic\n        start_node = np.random.randint(0, n)\n        initial_tour = nearest_neighbor_tour(start_node)\n\n        # Apply 2-opt to improve the tour\n        best_tour, best_length = two_opt(initial_tour)\n\n        tour_lengths.append(best_length)\n        tours.append(best_tour)\n\n    # Sort tours by length\n    ranked_indices = np.argsort(tour_lengths)\n\n    # Update the heuristics matrix based on the edges in the improved tour, weighting by tour length\n    for rank, idx in enumerate(ranked_indices):\n        best_tour = tours[idx]\n        # Exponential decay based on rank\n        weight = np.exp(-rank / (num_trials / 5.0))  # Adjust decay rate as needed\n        for i in range(n):\n            node1 = best_tour[i]\n            node2 = best_tour[(i + 1) % n]\n            heuristics_matrix[node1, node2] += weight\n            heuristics_matrix[node2, node1] += weight\n\n    # Normalize the heuristics matrix\n    total_weight = np.sum(heuristics_matrix)\n    if total_weight > 0:\n        heuristics_matrix /= total_weight\n\n    return heuristics_matrix",
          "objective": 5.71889,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n    num_trials = 50\n\n    def calculate_tour_length(tour):\n        length = 0\n        for i in range(n):\n            length += distance_matrix[tour[i], tour[(i + 1) % n]]\n        return length\n\n    def two_opt_swap(tour, i, k):\n        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]\n        return new_tour\n\n    def two_opt(tour):\n        best_tour = tour\n        best_length = calculate_tour_length(tour)\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, n - 1):\n                for k in range(i + 1, n):\n                    new_tour = two_opt_swap(best_tour, i, k)\n                    new_length = calculate_tour_length(new_tour)\n                    if new_length < best_length:\n                        best_tour = new_tour\n                        best_length = new_length\n                        improved = True\n        return best_tour, best_length\n\n    def nearest_neighbor_tour(start_node):\n        tour = [start_node]\n        unvisited_nodes = set(range(n))\n        unvisited_nodes.remove(start_node)\n        current_node = start_node\n\n        while unvisited_nodes:\n            nearest_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node, x])\n            tour.append(nearest_node)\n            unvisited_nodes.remove(nearest_node)\n            current_node = nearest_node\n        tour.append(start_node)\n        tour = tour[:-1]\n        return tour\n\n    for _ in range(num_trials):\n        # Generate a tour using nearest neighbor heuristic\n        start_node = np.random.randint(0, n)\n        initial_tour = nearest_neighbor_tour(start_node)\n\n        # Apply 2-opt to improve the tour\n        best_tour, best_length = two_opt(initial_tour)\n\n        # Update the heuristics matrix based on the edges in the improved tour\n        for i in range(n):\n            node1 = best_tour[i]\n            node2 = best_tour[(i + 1) % n]\n            heuristics_matrix[node1, node2] += 1\n            heuristics_matrix[node2, node1] += 1\n\n    heuristics_matrix /= num_trials\n    return heuristics_matrix",
          "objective": 5.72254,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm estimates edge desirability for TSP by constructing tours using random edge selection with a bias towards shorter edges, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm estimates edge desirability for TSP by constructing tours using random edge selection with a bias towards shorter edges, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n    num_trials = 50\n\n    def calculate_tour_length(tour):\n        length = 0\n        for i in range(n):\n            length += distance_matrix[tour[i], tour[(i + 1) % n]]\n        return length\n\n    def two_opt_swap(tour, i, k):\n        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]\n        return new_tour\n\n    def two_opt(tour):\n        best_tour = tour\n        best_length = calculate_tour_length(tour)\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, n - 1):\n                for k in range(i + 1, n):\n                    new_tour = two_opt_swap(best_tour, i, k)\n                    new_length = calculate_tour_length(new_tour)\n                    if new_length < best_length:\n                        best_tour = new_tour\n                        best_length = new_length\n                        improved = True\n        return best_tour, best_length\n\n    def biased_random_tour(start_node):\n        tour = [start_node]\n        unvisited_nodes = set(range(n))\n        unvisited_nodes.remove(start_node)\n        current_node = start_node\n\n        while unvisited_nodes:\n            probabilities = np.array([1.0 / (distance_matrix[current_node, node] + 1e-6) for node in unvisited_nodes])\n            probabilities /= np.sum(probabilities)\n            \n            nearest_node = np.random.choice(list(unvisited_nodes), p=probabilities)\n            tour.append(nearest_node)\n            unvisited_nodes.remove(nearest_node)\n            current_node = nearest_node\n        tour.append(start_node)\n        tour = tour[:-1]\n        return tour\n\n    for _ in range(num_trials):\n        # Generate a tour using biased random edge selection\n        start_node = np.random.randint(0, n)\n        initial_tour = biased_random_tour(start_node)\n\n        # Apply 2-opt to improve the tour\n        best_tour, best_length = two_opt(initial_tour)\n\n        # Update the heuristics matrix based on the edges in the improved tour\n        for i in range(n):\n            node1 = best_tour[i]\n            node2 = best_tour[(i + 1) % n]\n            heuristics_matrix[node1, node2] += 1\n            heuristics_matrix[node2, node1] += 1\n\n    # Normalize the heuristics matrix\n    total_count = np.sum(heuristics_matrix)\n    if total_count > 0:\n        heuristics_matrix /= total_count\n\n    return heuristics_matrix",
          "objective": 5.73881,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach with a temperature-scaled probability-based selection of the next node, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach with a temperature-scaled probability-based selection of the next node, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n    num_trials = 50\n    temperature = 10.0\n\n    def calculate_tour_length(tour):\n        length = 0\n        for i in range(n):\n            length += distance_matrix[tour[i], tour[(i + 1) % n]]\n        return length\n\n    def two_opt_swap(tour, i, k):\n        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]\n        return new_tour\n\n    def two_opt(tour):\n        best_tour = tour\n        best_length = calculate_tour_length(tour)\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, n - 1):\n                for k in range(i + 1, n):\n                    new_tour = two_opt_swap(best_tour, i, k)\n                    new_length = calculate_tour_length(new_tour)\n                    if new_length < best_length:\n                        best_tour = new_tour\n                        best_length = new_length\n                        improved = True\n        return best_tour, best_length\n\n    def nearest_neighbor_tour_probabilistic(start_node):\n        tour = [start_node]\n        unvisited_nodes = set(range(n))\n        unvisited_nodes.remove(start_node)\n        current_node = start_node\n\n        while unvisited_nodes:\n            #Temperature-scaled probabilities\n            probabilities = np.array([np.exp(-distance_matrix[current_node, node]/temperature) for node in unvisited_nodes])\n            probabilities /= np.sum(probabilities)\n            nearest_node = np.random.choice(list(unvisited_nodes), p=probabilities)\n            tour.append(nearest_node)\n            unvisited_nodes.remove(nearest_node)\n            current_node = nearest_node\n        tour.append(start_node)\n        tour = tour[:-1]\n        return tour\n\n    for _ in range(num_trials):\n        # Generate a tour using nearest neighbor heuristic\n        start_node = np.random.randint(0, n)\n        initial_tour = nearest_neighbor_tour_probabilistic(start_node)\n\n        # Apply 2-opt to improve the tour\n        best_tour, best_length = two_opt(initial_tour)\n\n        # Update the heuristics matrix based on the edges in the improved tour\n        for i in range(n):\n            node1 = best_tour[i]\n            node2 = best_tour[(i + 1) % n]\n            heuristics_matrix[node1, node2] += 1\n            heuristics_matrix[node2, node1] += 1\n\n    heuristics_matrix /= num_trials\n    return heuristics_matrix",
          "objective": 5.74854,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm estimates edge desirability by iteratively constructing tours using a nearest neighbor approach, improving them with 2-opt swaps, and averaging the frequency of each edge across multiple trials.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm estimates edge desirability by iteratively constructing tours using a nearest neighbor approach, improving them with 2-opt swaps, and averaging the frequency of each edge across multiple trials.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n    num_trials = 50\n\n    def calculate_tour_length(tour):\n        length = 0\n        for i in range(n):\n            length += distance_matrix[tour[i], tour[(i + 1) % n]]\n        return length\n\n    def two_opt_swap(tour, i, k):\n        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]\n        return new_tour\n\n    def two_opt(tour):\n        best_tour = tour\n        best_length = calculate_tour_length(tour)\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, n - 1):\n                for k in range(i + 1, n):\n                    new_tour = two_opt_swap(best_tour, i, k)\n                    new_length = calculate_tour_length(new_tour)\n                    if new_length < best_length:\n                        best_tour = new_tour\n                        best_length = new_length\n                        improved = True\n        return best_tour, best_length\n    \n    def nearest_neighbor_tour(start_node):\n        unvisited = set(range(n))\n        unvisited.remove(start_node)\n        tour = [start_node]\n        current_node = start_node\n\n        while unvisited:\n            nearest_node = min(unvisited, key=lambda node: distance_matrix[current_node, node])\n            tour.append(nearest_node)\n            unvisited.remove(nearest_node)\n            current_node = nearest_node\n        tour.append(start_node)\n        return tour[:-1]\n\n    for _ in range(num_trials):\n        # Generate an initial tour using nearest neighbor\n        start_node = np.random.randint(0, n)\n        initial_tour = nearest_neighbor_tour(start_node)\n\n        # Apply 2-opt to improve the tour\n        best_tour, best_length = two_opt(initial_tour)\n\n        # Update the heuristics matrix based on the edges in the improved tour\n        for i in range(n):\n            node1 = best_tour[i]\n            node2 = best_tour[(i + 1) % n]\n            heuristics_matrix[node1, node2] += 1\n            heuristics_matrix[node2, node1] += 1\n\n    heuristics_matrix /= num_trials\n    return heuristics_matrix",
          "objective": 5.74904,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm estimates edge desirability for TSP by iteratively improving random tours using 2-opt swaps and averaging the improvement contribution of each edge across multiple runs.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm estimates edge desirability for TSP by iteratively improving random tours using 2-opt swaps and averaging the improvement contribution of each edge across multiple runs.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n    num_iterations = 100\n    num_trials = 50\n\n    def calculate_tour_length(tour):\n        length = 0\n        for i in range(n):\n            length += distance_matrix[tour[i], tour[(i + 1) % n]]\n        return length\n\n    def two_opt_swap(tour, i, k):\n        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]\n        return new_tour\n\n    def two_opt(tour):\n        best_tour = tour\n        best_length = calculate_tour_length(tour)\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, n - 1):\n                for k in range(i + 1, n):\n                    new_tour = two_opt_swap(best_tour, i, k)\n                    new_length = calculate_tour_length(new_tour)\n                    if new_length < best_length:\n                        best_tour = new_tour\n                        best_length = new_length\n                        improved = True\n        return best_tour, best_length\n\n    for _ in range(num_trials):\n        # Generate a random initial tour\n        initial_tour = np.random.permutation(n).tolist()\n        initial_tour.append(initial_tour[0])\n        initial_tour = initial_tour[:-1]\n\n        # Apply 2-opt to improve the tour\n        best_tour, best_length = two_opt(initial_tour)\n\n        # Update the heuristics matrix based on the edges in the improved tour\n        for i in range(n):\n            node1 = best_tour[i]\n            node2 = best_tour[(i + 1) % n]\n            heuristics_matrix[node1, node2] += 1\n            heuristics_matrix[node2, node1] += 1\n\n    heuristics_matrix /= num_trials\n    return heuristics_matrix",
          "objective": 5.75233,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm estimates edge desirability for TSP by constructing tours using random edge selection with a bias towards shorter edges and a penalty for edges already frequently visited, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm estimates edge desirability for TSP by constructing tours using random edge selection with a bias towards shorter edges and a penalty for edges already frequently visited, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n    num_trials = 50\n    edge_frequency = np.zeros((n, n))\n\n    def calculate_tour_length(tour):\n        length = 0\n        for i in range(n):\n            length += distance_matrix[tour[i], tour[(i + 1) % n]]\n        return length\n\n    def two_opt_swap(tour, i, k):\n        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]\n        return new_tour\n\n    def two_opt(tour):\n        best_tour = tour\n        best_length = calculate_tour_length(tour)\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, n - 1):\n                for k in range(i + 1, n):\n                    new_tour = two_opt_swap(best_tour, i, k)\n                    new_length = calculate_tour_length(new_tour)\n                    if new_length < best_length:\n                        best_tour = new_tour\n                        best_length = new_length\n                        improved = True\n        return best_tour, best_length\n\n    def biased_random_tour(start_node):\n        tour = [start_node]\n        unvisited_nodes = set(range(n))\n        unvisited_nodes.remove(start_node)\n        current_node = start_node\n\n        while unvisited_nodes:\n            probabilities = np.array([1.0 / (distance_matrix[current_node, node] + 1e-6 + 10 * edge_frequency[current_node, node]) for node in unvisited_nodes])\n            probabilities /= np.sum(probabilities)\n            \n            nearest_node = np.random.choice(list(unvisited_nodes), p=probabilities)\n            tour.append(nearest_node)\n            unvisited_nodes.remove(nearest_node)\n            current_node = nearest_node\n        tour.append(start_node)\n        tour = tour[:-1]\n        return tour\n\n    for _ in range(num_trials):\n        # Generate a tour using biased random edge selection\n        start_node = np.random.randint(0, n)\n        initial_tour = biased_random_tour(start_node)\n\n        # Apply 2-opt to improve the tour\n        best_tour, best_length = two_opt(initial_tour)\n\n        # Update the heuristics matrix based on the edges in the improved tour\n        for i in range(n):\n            node1 = best_tour[i]\n            node2 = best_tour[(i + 1) % n]\n            heuristics_matrix[node1, node2] += 1\n            heuristics_matrix[node2, node1] += 1\n            edge_frequency[node1, node2] += 1\n            edge_frequency[node2, node1] += 1\n\n    # Normalize the heuristics matrix\n    total_count = np.sum(heuristics_matrix)\n    if total_count > 0:\n        heuristics_matrix /= total_count\n\n    return heuristics_matrix",
          "objective": 5.75454,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm estimates edge desirability by repeatedly generating tours, applying 2-opt, and then weighting edges in the heuristic matrix based on the inverse of the tour length after 2-opt.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm estimates edge desirability by repeatedly generating tours, applying 2-opt, and then weighting edges in the heuristic matrix based on the inverse of the tour length after 2-opt.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n    num_trials = 50\n\n    def calculate_tour_length(tour):\n        length = 0\n        for i in range(n):\n            length += distance_matrix[tour[i], tour[(i + 1) % n]]\n        return length\n\n    def two_opt_swap(tour, i, k):\n        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]\n        return new_tour\n\n    def two_opt(tour):\n        best_tour = tour\n        best_length = calculate_tour_length(tour)\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, n - 1):\n                for k in range(i + 1, n):\n                    new_tour = two_opt_swap(best_tour, i, k)\n                    new_length = calculate_tour_length(new_tour)\n                    if new_length < best_length:\n                        best_tour = new_tour\n                        best_length = new_length\n                        improved = True\n        return best_tour, best_length\n\n    for _ in range(num_trials):\n        # Generate a random initial tour\n        initial_tour = np.random.permutation(n).tolist()\n\n        # Apply 2-opt to improve the tour\n        best_tour, best_length = two_opt(initial_tour)\n\n        # Update the heuristics matrix based on the edges in the improved tour, weighted by inverse of tour length\n        for i in range(n):\n            node1 = best_tour[i]\n            node2 = best_tour[(i + 1) % n]\n            heuristics_matrix[node1, node2] += 1.0 / best_length\n            heuristics_matrix[node2, node1] += 1.0 / best_length\n\n    heuristics_matrix /= num_trials\n    return heuristics_matrix",
          "objective": 5.75495,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach, improving them with 2-opt swaps, and averaging edge occurrences across multiple runs.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach, improving them with 2-opt swaps, and averaging edge occurrences across multiple runs.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n    num_trials = 50\n\n    def calculate_tour_length(tour):\n        length = 0\n        for i in range(n):\n            length += distance_matrix[tour[i], tour[(i + 1) % n]]\n        return length\n\n    def two_opt_swap(tour, i, k):\n        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]\n        return new_tour\n\n    def two_opt(tour):\n        best_tour = tour\n        best_length = calculate_tour_length(tour)\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, n - 1):\n                for k in range(i + 1, n):\n                    new_tour = two_opt_swap(best_tour, i, k)\n                    new_length = calculate_tour_length(new_tour)\n                    if new_length < best_length:\n                        best_tour = new_tour\n                        best_length = new_length\n                        improved = True\n        return best_tour, best_length\n    \n    def nearest_neighbor_tour(start_node):\n        tour = [start_node]\n        unvisited = list(range(n))\n        unvisited.remove(start_node)\n\n        while unvisited:\n            last_node = tour[-1]\n            nearest_node = min(unvisited, key=lambda x: distance_matrix[last_node, x])\n            tour.append(nearest_node)\n            unvisited.remove(nearest_node)\n        tour.append(start_node)\n        tour = tour[:-1]\n        return tour\n\n    for _ in range(num_trials):\n        # Generate initial tour using nearest neighbor\n        start_node = np.random.randint(n)\n        initial_tour = nearest_neighbor_tour(start_node)\n\n        # Apply 2-opt to improve the tour\n        best_tour, best_length = two_opt(initial_tour)\n\n        # Update the heuristics matrix based on the edges in the improved tour\n        for i in range(n):\n            node1 = best_tour[i]\n            node2 = best_tour[(i + 1) % n]\n            heuristics_matrix[node1, node2] += 1\n            heuristics_matrix[node2, node1] += 1\n\n    heuristics_matrix /= num_trials\n    return heuristics_matrix",
          "objective": 5.75662,
          "other_inf": null
     }
]