import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a combination of nearest neighbor and random edge swapping to generate TSP solutions, using the inverse of edge appearance frequency across these solutions to build the heuristics matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 50  # Reduced number of samples

    edge_counts = {}

    for _ in range(num_samples):
        # Nearest Neighbor Tour
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(start_node)
        path = [start_node]

        while unvisited:
            nearest_neighbor = -1
            min_distance = float('inf')
            for neighbor in unvisited:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor

            path.append(nearest_neighbor)
            unvisited.remove(nearest_neighbor)
            current_node = nearest_neighbor

        path.append(start_node)

        # Random Edge Swaps (2-opt) - introduce some diversity
        num_swaps = n // 2  # Increased number of swaps
        for _ in range(num_swaps):
            i, j = np.random.choice(n, 2, replace=False)
            if i > j:
                i, j = j, i
            
            new_path = path[:i+1] + path[i+1:j+1][::-1] + path[j+1:]
            path = new_path

        # Count edge occurrences
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            edge = tuple(sorted((node1, node2)))
            edge_counts[edge] = edge_counts.get(edge, 0) + 1

    # Use inverse frequency directly as heuristic value
    for edge, count in edge_counts.items():
        node1, node2 = edge
        heuristics_matrix[node1, node2] = 1.0 / (count + 1e-9)  # Inverse Frequency as heuristic, added small number to avoid division by zero
        heuristics_matrix[node2, node1] = 1.0 / (count + 1e-9)

    return heuristics_matrix
