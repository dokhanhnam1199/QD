import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses an ant colony optimization approach to sample TSP solutions, updating pheromone levels on edges based on tour quality.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)
    alpha = 1  # Pheromone influence
    beta = 2   # Distance influence
    evaporation_rate = 0.5
    Q = 100     # Constant for pheromone update
    num_ants = 20
    num_iterations = 100

    for iteration in range(num_iterations):
        all_tours = []
        for ant in range(num_ants):
            start_node = np.random.randint(n)
            current_node = start_node
            unvisited = set(range(n))
            unvisited.remove(start_node)
            tour = [start_node]
            tour_length = 0

            while unvisited:
                probabilities = np.zeros(n)
                for neighbor in unvisited:
                    probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) / (distance_matrix[current_node, neighbor]**beta)

                probabilities /= np.sum(probabilities)
                
                next_node = np.random.choice(n, p=probabilities)
                while next_node not in unvisited:
                    next_node = np.random.choice(n, p=probabilities)

                tour.append(next_node)
                tour_length += distance_matrix[current_node, next_node]
                unvisited.remove(next_node)
                current_node = next_node

            tour.append(start_node)
            tour_length += distance_matrix[current_node, start_node]
            all_tours.append((tour, tour_length))

        # Update pheromones
        pheromone_matrix *= (1 - evaporation_rate) 
        for tour, tour_length in all_tours:
            for i in range(n):
                node1 = tour[i]
                node2 = tour[i+1]
                pheromone_matrix[node1, node2] += Q / tour_length
                pheromone_matrix[node2, node1] += Q / tour_length

    return heuristics_matrix
