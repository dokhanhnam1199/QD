import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge desirability for TSP by iteratively constructing tours using a randomized insertion heuristic, improving them with 3-opt swaps, and averaging the inclusion frequency of each edge across multiple runs.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_trials = 50

    def calculate_tour_length(tour):
        length = 0
        for i in range(len(tour) - 1):
            length += distance_matrix[tour[i], tour[i + 1]]
        length += distance_matrix[tour[-1], tour[0]]
        return length

    def three_opt_swap(tour, i, j, k):
        a, b, c, d, e, f = tour[i:j], tour[j:k], tour[k:] ,tour[0:i],[],[]
        
        new_tour = d + a + b + c 
        len_tour = len(new_tour)
        
        return new_tour

    def three_opt(tour):
        best_tour = tour[:]
        best_length = calculate_tour_length(tour)
        improved = True

        while improved:
            improved = False
            for i in range(1, len(tour) - 2):
                for j in range(i + 1, len(tour) - 1):
                    for k in range(j + 1, len(tour)):
                        new_tour = three_opt_swap(tour, i,j,k)
                        new_length = calculate_tour_length(new_tour)

                        if new_length < best_length:
                            best_tour = new_tour[:]
                            best_length = new_length
                            improved = True

        return best_tour, best_length

    def randomized_insertion_tour(start_node):
        tour = [start_node]
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)

        while unvisited_nodes:
            insertion_costs = []
            for node_to_insert in unvisited_nodes:
                min_insertion_cost = float('inf')
                for i in range(len(tour)):
                    cost = distance_matrix[tour[i], node_to_insert] + distance_matrix[node_to_insert, tour[(i + 1) % len(tour)]] - distance_matrix[tour[i], tour[(i + 1) % len(tour)]]
                    min_insertion_cost = min(min_insertion_cost, cost)
                insertion_costs.append(min_insertion_cost)

            probabilities = np.exp(-np.array(insertion_costs)) / np.sum(np.exp(-np.array(insertion_costs)))
            chosen_index = np.random.choice(len(insertion_costs), p=probabilities)
            node_to_insert = list(unvisited_nodes)[chosen_index]

            best_insertion_index = 0
            min_insertion_cost = float('inf')
            for i in range(len(tour)):
                cost = distance_matrix[tour[i], node_to_insert] + distance_matrix[node_to_insert, tour[(i + 1) % len(tour)]] - distance_matrix[tour[i], tour[(i + 1) % len(tour)]]
                if cost < min_insertion_cost:
                    min_insertion_cost = cost
                    best_insertion_index = i + 1
            
            tour.insert(best_insertion_index, node_to_insert)
            unvisited_nodes.remove(node_to_insert)

        return tour
    
    for _ in range(num_trials):
        # Generate a tour using randomized insertion heuristic
        start_node = np.random.randint(0, n)
        initial_tour = randomized_insertion_tour(start_node)

        # Apply 3-opt to improve the tour
        best_tour, best_length = three_opt(initial_tour)

        # Update the heuristics matrix based on the edges in the improved tour
        for i in range(len(best_tour)):
            node1 = best_tour[i]
            node2 = best_tour[(i + 1) % len(best_tour)]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_trials
    return heuristics_matrix
