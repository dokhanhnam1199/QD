import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines the ant colony optimization's pheromone update strategy with the nearest neighbor tour construction, biasing the latter's stochastic node selection based on pheromone levels to guide tour generation and edge evaluation.}"""
    n = distance_matrix.shape[0]
    pheromone = np.ones((n, n))  # Initialize pheromone trails
    heuristics_matrix = np.zeros((n, n))
    alpha = 0.5  # Pheromone influence
    stochasticity = 0.3  # Stochasticity in nearest neighbor selection
    rho = 0.1  # Evaporation rate
    Q = 100    # Pheromone deposit constant
    num_trials = 50

    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def nearest_neighbor_tour(start_node):
        tour = [start_node]
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        current_node = start_node

        while unvisited_nodes:
            # Incorporate pheromone information into node selection
            pheromone_values = {node: pheromone[current_node, node] for node in unvisited_nodes}
            distances = {node: distance_matrix[current_node, node] for node in unvisited_nodes}

            # Combine pheromone and distance to influence selection
            combined_values = {node: (pheromone_values[node]**alpha) / (distances[node] + 1e-6) for node in unvisited_nodes}
            
            # Stochastic selection based on combined values
            sorted_nodes = sorted(combined_values.items(), key=lambda item: item[1], reverse=True)  # Higher values are better
            k = min(int(len(sorted_nodes) * stochasticity) + 1, len(sorted_nodes))
            candidates = [node for node, value in sorted_nodes[:k]]
            
            if not candidates:
                nearest_node = min(distances, key=distances.get)
            else:
                nearest_node = np.random.choice(candidates)
            
            tour.append(nearest_node)
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node
        tour.append(start_node)
        tour = tour[:-1]
        return tour

    for _ in range(num_trials):
        start_node = np.random.randint(0, n)
        tour = nearest_neighbor_tour(start_node)
        tour_length = calculate_tour_length(tour)

        # Update pheromones based on the tour
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            pheromone[node1, node2] += Q / tour_length
            pheromone[node2, node1] += Q / tour_length

        pheromone *= (1 - rho)  # Evaporation

    # Construct heuristic matrix based on final pheromone levels
    heuristics_matrix = pheromone
    return heuristics_matrix
