import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge desirability by iteratively constructing tours using a greedy insertion heuristic, improving them with 3-opt swaps, and averaging the frequency of each edge across multiple trials.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_trials = 50

    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def three_opt_swap(tour, i, j, k):
        """Reverses segments of a tour for 3-opt."""
        new_tour = tour[:i] + tour[i:j+1][::-1] + tour[j+1:k+1][::-1] + tour[k+1:]
        return new_tour

    def three_opt(tour):
        """Applies 3-opt swaps to improve a tour."""
        best_tour = tour
        best_length = calculate_tour_length(tour)
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 2):
                for j in range(i + 1, n - 1):
                    for k in range(j + 1, n):
                        new_tour = three_opt_swap(best_tour, i, j, k)
                        new_length = calculate_tour_length(new_tour)
                        if new_length < best_length:
                            best_tour = new_tour
                            best_length = new_length
                            improved = True
        return best_tour, best_length

    def greedy_insertion_tour(start_node):
        """Constructs a tour using a greedy insertion heuristic."""
        unvisited = set(range(n))
        unvisited.remove(start_node)
        tour = [start_node]

        while unvisited:
            best_node = None
            best_insertion_cost = float('inf')
            best_insertion_index = None

            for node in unvisited:
                for i in range(len(tour)):
                    insertion_cost = distance_matrix[tour[i-1], node] + distance_matrix[node, tour[i]] - distance_matrix[tour[i-1], tour[i]]
                    if insertion_cost < best_insertion_cost:
                        best_insertion_cost = insertion_cost
                        best_node = node
                        best_insertion_index = i

            tour.insert(best_insertion_index, best_node)
            unvisited.remove(best_node)

        return tour

    for _ in range(num_trials):
        # Generate a tour using greedy insertion heuristic
        start_node = np.random.randint(0, n)
        initial_tour = greedy_insertion_tour(start_node)

        # Apply 3-opt to improve the tour
        best_tour, best_length = three_opt(initial_tour)

        # Update the heuristics matrix based on the edges in the improved tour
        for i in range(n):
            node1 = best_tour[i]
            node2 = best_tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_trials
    return heuristics_matrix
