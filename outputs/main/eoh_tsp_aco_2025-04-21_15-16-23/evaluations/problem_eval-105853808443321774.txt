import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge desirability by iteratively constructing tours using a greedy randomized construction, improving them with 3-opt swaps, and averaging the frequency of each edge across multiple trials.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_trials = 50

    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def three_opt_swap(tour, i, j, k):
        a, b, c, d, e, f = tour[:i], tour[i:j], tour[j:k], tour[k:] , tour[i:j][::-1] , tour[j:k][::-1]

        new_tours = [
            a + b + c + d,
            a + b + f + e,
            a + e + c + f,
            a + e + f + d,
            a + b + f + d,
            a + e + c + d,
            a + b + c + f,
            a + e + f + e # invalid, not a complete tour
        ]
        
        lengths = [calculate_tour_length(t) for t in new_tours]
        best_tour = new_tours[np.argmin(lengths)]
        return best_tour
    
    def three_opt(tour):
        best_tour = tour
        best_length = calculate_tour_length(tour)
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 2):
                for j in range(i + 1, n - 1):
                    for k in range(j + 1, n):
                        new_tour = three_opt_swap(best_tour, i, j, k)
                        new_length = calculate_tour_length(new_tour)
                        if new_length < best_length:
                            best_tour = new_tour
                            best_length = new_length
                            improved = True
        return best_tour, best_length

    def greedy_randomized_construction(start_node):
        unvisited = set(range(n))
        unvisited.remove(start_node)
        tour = [start_node]
        current_node = start_node

        while unvisited:
            nearest_neighbors = sorted(unvisited, key=lambda node: distance_matrix[current_node, node])
            num_candidates = min(5, len(nearest_neighbors))
            candidate_nodes = nearest_neighbors[:num_candidates]
            next_node = np.random.choice(candidate_nodes)
            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node
        tour.append(start_node)
        return tour[:-1]

    for _ in range(num_trials):
        # Generate an initial tour using greedy randomized construction
        start_node = np.random.randint(0, n)
        initial_tour = greedy_randomized_construction(start_node)

        # Apply 3-opt to improve the tour
        best_tour, best_length = three_opt(initial_tour)

        # Update the heuristics matrix based on the edges in the improved tour
        for i in range(n):
            node1 = best_tour[i]
            node2 = best_tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_trials
    return heuristics_matrix
