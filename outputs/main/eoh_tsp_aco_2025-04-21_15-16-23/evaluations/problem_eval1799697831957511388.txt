import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple random tours, scores them based on length, and then accumulates scores for each edge based on how often they appear in good tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        
        # Calculate the tour length
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        
        # Score the tour (lower length is better)
        score = 1 / (tour_length + 1e-6)  # Avoid division by zero

        # Update the heuristics matrix based on the edges in the tour
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += score
            heuristics_matrix[tour[i+1], tour[i]] += score  # Symmetric
        heuristics_matrix[tour[-1], tour[0]] += score
        heuristics_matrix[tour[0], tour[-1]] += score

    return heuristics_matrix
