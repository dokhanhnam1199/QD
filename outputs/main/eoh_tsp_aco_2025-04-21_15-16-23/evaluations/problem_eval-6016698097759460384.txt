import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach with a probability-based selection of the next node, improving them with 3-opt swaps, and averaging the inclusion frequency of each edge across multiple runs, while adjusting the probability distribution based on the average tour length.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_trials = 50
    alpha = 0.1

    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def three_opt_swap(tour, i, j, k):
        # Subsections of the tour
        A = tour[:i]
        B = tour[i:j]
        C = tour[j:k]
        D = tour[k:]

        # Possible 3-opt swaps
        options = [
            A + B + C + D,  # Original
            A + B + C[::-1] + D,
            A + B[::-1] + C + D,
            A + B[::-1] + C[::-1] + D,
            A + C + B + D,
            A + C + B[::-1] + D,
            A + C[::-1] + B + D,
            A + C[::-1] + B[::-1] + D
        ]

        # Find the best tour among the options
        best_tour = min(options, key=calculate_tour_length)
        return best_tour

    def three_opt(tour):
        best_tour = tour
        best_length = calculate_tour_length(tour)
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 2):
                for j in range(i + 1, n - 1):
                    for k in range(j + 1, n):
                        new_tour = three_opt_swap(best_tour, i, j, k)
                        new_length = calculate_tour_length(new_tour)
                        if new_length < best_length:
                            best_tour = new_tour
                            best_length = new_length
                            improved = True
        return best_tour, best_length

    def nearest_neighbor_tour_probabilistic(start_node, probabilities):
        tour = [start_node]
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        current_node = start_node

        while unvisited_nodes:
            node_probabilities = probabilities[current_node, list(unvisited_nodes)]
            node_probabilities /= np.sum(node_probabilities)
            nearest_node = np.random.choice(list(unvisited_nodes), p=node_probabilities)
            tour.append(nearest_node)
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node
        tour.append(start_node)
        tour = tour[:-1]
        return tour
    
    #Initialize probabilities
    probabilities = np.ones((n,n))
    for i in range(n):
        for j in range(n):
            if i == j:
                probabilities[i,j] = 0
            else:
                probabilities[i,j] = 1 / distance_matrix[i, j]

    avg_tour_length = 0

    for _ in range(num_trials):
        # Generate a tour using nearest neighbor heuristic
        start_node = np.random.randint(0, n)
        initial_tour = nearest_neighbor_tour_probabilistic(start_node, probabilities)

        # Apply 3-opt to improve the tour
        best_tour, best_length = three_opt(initial_tour)
        
        # Adjust probabilites
        if avg_tour_length == 0:
          avg_tour_length = best_length
        else:
          avg_tour_length = (1-alpha) * avg_tour_length + alpha*best_length

        for i in range(n):
            node1 = best_tour[i]
            node2 = best_tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
        
        for i in range(n):
          for j in range(n):
            probabilities[i,j] = probabilities[i,j] * np.exp(-(distance_matrix[i,j]/avg_tour_length))
            if i == j:
              probabilities[i,j] = 0
            else:
                probabilities[i,j] = max(probabilities[i,j], 0.00001)

    heuristics_matrix /= num_trials
    return heuristics_matrix
