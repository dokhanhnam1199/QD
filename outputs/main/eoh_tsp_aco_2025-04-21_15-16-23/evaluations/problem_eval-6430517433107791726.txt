import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm iteratively samples random tours, and updates a heuristics matrix based on the frequency with which each edge appears in shorter tours.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000
    alpha = 0.9

    for _ in range(num_iterations):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_distance = 0
        for i in range(n - 1):
            tour_distance += distance_matrix[tour[i], tour[i+1]]
        tour_distance += distance_matrix[tour[-1], tour[0]]

        # Update heuristics matrix
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += alpha / tour_distance
            heuristics_matrix[tour[i+1], tour[i]] += alpha / tour_distance  # Ensure symmetry

        heuristics_matrix[tour[-1], tour[0]] += alpha / tour_distance
        heuristics_matrix[tour[0], tour[-1]] += alpha / tour_distance

    # Normalize the heuristics matrix
    total_sum = np.sum(heuristics_matrix)
    if total_sum > 0:
        heuristics_matrix /= total_sum

    return heuristics_matrix
