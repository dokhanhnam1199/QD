import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge desirability by sampling tours using a greedy randomized construction, improving them with 3-opt swaps, and using the inverse of tour length as a weight when accumulating edge frequencies.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_trials = 50

    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def three_opt_swap(tour, i, j, k):
        """Applies a 3-opt swap to the given tour.
        """
        # Indices should be in increasing order and within bounds
        if not (0 <= i < j < k < len(tour)):
            raise ValueError("Invalid indices for 3-opt swap")

        # Reverse segments based on chosen indices
        segment1 = tour[:i + 1]
        segment2 = tour[i + 1:j + 1]
        segment3 = tour[j + 1:k + 1]
        segment4 = tour[k + 1:]

        # There are multiple 3-opt swap options. Here, the most common one is implemented. Other options are possible as well.
        new_tour = segment1 + segment3 + segment2 + segment4
        return new_tour

    def three_opt(tour):
          best_tour = tour
          best_length = calculate_tour_length(tour)
          improved = True
          while improved:
              improved = False
              for i in range(n):
                  for j in range(i + 1, n):
                      for k in range(j + 1, n):
                          new_tour = three_opt_swap(best_tour, i, j, k)
                          new_length = calculate_tour_length(new_tour)
                          if new_length < best_length:
                              best_tour = new_tour
                              best_length = new_length
                              improved = True
          return best_tour, best_length

    def greedy_randomized_tour(alpha=0.3):
        unvisited = set(range(n))
        start_node = np.random.choice(list(unvisited))
        unvisited.remove(start_node)
        tour = [start_node]
        current_node = start_node

        while unvisited:
            # Create a restricted candidate list (RCL)
            distances = [distance_matrix[current_node, node] for node in unvisited]
            min_dist = min(distances)
            max_dist = max(distances)
            threshold = min_dist + alpha * (max_dist - min_dist)
            rcl = [node for node, dist in zip(unvisited, distances) if dist <= threshold]

            # Randomly select the next node from the RCL
            if rcl:
                next_node = np.random.choice(rcl)
            else:
                # If RCL is empty (unlikely, but possible), choose the nearest
                next_node = min(unvisited, key=lambda node: distance_matrix[current_node, node])

            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        return tour

    for _ in range(num_trials):
        # Generate an initial tour using greedy randomized construction
        initial_tour = greedy_randomized_tour()

        # Apply 3-opt to improve the tour
        best_tour, best_length = three_opt(initial_tour)
        
        #Update the heuristics matrix based on the edges in the improved tour, weighted by the inverse of the tour length.
        weight = 1.0 / best_length
        for i in range(n):
            node1 = best_tour[i]
            node2 = best_tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight

    # Normalize the heuristics matrix
    heuristics_matrix /= num_trials
    return heuristics_matrix
