import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines aspects of both provided algorithms by iteratively constructing solutions using a weighted random selection biased by edge desirability learned from previous iterations and improving each solution using 2-opt swaps.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones((n, n))  # Initialize with ones to avoid division by zero
    alpha = 0.8  # Influence of heuristics
    num_iterations = 40
    num_solutions = 25

    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour

    def two_opt(tour):
        best_tour = tour
        best_length = calculate_tour_length(tour)
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for k in range(i + 1, n):
                    new_tour = two_opt_swap(best_tour, i, k)
                    new_length = calculate_tour_length(new_tour)
                    if new_length < best_length:
                        best_tour = new_tour
                        best_length = new_length
                        improved = True
        return best_tour, best_length

    for iteration in range(num_iterations):
        all_tours = []
        for _ in range(num_solutions):
            start_node = np.random.randint(0, n)
            unvisited = set(range(n))
            unvisited.remove(start_node)
            tour = [start_node]
            current_node = start_node

            while unvisited:
                probabilities = (heuristics_matrix[current_node, :])**alpha / (distance_matrix[current_node, :] + 1e-6)
                
                # Mask visited nodes
                for visited_node in tour:
                    probabilities[visited_node] = 0
                
                probabilities = probabilities / np.sum(probabilities) if np.sum(probabilities) > 0 else np.ones(n) / n

                next_node = np.random.choice(n, p=probabilities)
                tour.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node
            tour.append(start_node)
            tour = tour[:-1] #Exclude the last element, which is the start node
            
            # Apply 2-opt to improve the tour
            best_tour, _ = two_opt(tour)
            all_tours.append(best_tour)

        # Update the heuristics matrix based on the edges in the improved tours
        edge_counts = np.zeros((n,n))
        for tour in all_tours:
            for i in range(n):
                node1 = tour[i]
                node2 = tour[(i + 1) % n]
                edge_counts[node1, node2] += 1
                edge_counts[node2, node1] += 1

        # Averaging the edge counts
        edge_counts /= num_solutions
        heuristics_matrix = (heuristics_matrix + edge_counts) / 2 # Moving average
    return heuristics_matrix
