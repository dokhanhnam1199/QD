import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge desirability by repeatedly generating tours, applying 2-opt, and then weighting edges in the heuristic matrix based on the tour length improvement after 2-opt.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_trials = 50

    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour

    def two_opt(tour):
        best_tour = tour
        best_length = calculate_tour_length(tour)
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for k in range(i + 1, n):
                    new_tour = two_opt_swap(best_tour, i, k)
                    new_length = calculate_tour_length(new_tour)
                    if new_length < best_length:
                        best_tour = new_tour
                        best_length = new_length
                        improved = True
        return best_tour, best_length

    for _ in range(num_trials):
        # Generate a random initial tour
        initial_tour = np.random.permutation(n).tolist()
        initial_length = calculate_tour_length(initial_tour)

        # Apply 2-opt to improve the tour
        best_tour, best_length = two_opt(initial_tour)

        improvement = initial_length - best_length
        # Update the heuristics matrix based on the edges in the improved tour, weighted by improvement
        for i in range(n):
            node1 = best_tour[i]
            node2 = best_tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += improvement
            heuristics_matrix[node2, node1] += improvement

    heuristics_matrix /= num_trials
    return heuristics_matrix
