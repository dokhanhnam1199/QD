import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively refining edge weights based on the frequency and quality of their appearance in sampled TSP solutions, using a simplified update rule and adjusted parameters for exploration and exploitation.}"""
    n = distance_matrix.shape[0]
    edge_weights = np.ones_like(distance_matrix, dtype=float)
    num_iterations = 30
    num_samples_per_iter = 15
    alpha = 0.5
    beta = 1.5
    decay_rate = 0.05
    q = 5.0

    for iteration in range(num_iterations):
        sampled_paths = []
        sampled_path_lengths = []

        for _ in range(num_samples_per_iter):
            start_node = np.random.randint(n)
            current_node = start_node
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(current_node)
            path = [current_node]
            path_length = 0

            while unvisited_nodes:
                probabilities = np.zeros(n)
                for neighbor in unvisited_nodes:
                    probabilities[neighbor] = (edge_weights[current_node, neighbor]**alpha) / (distance_matrix[current_node, neighbor]**beta)

                probabilities = probabilities / np.sum(probabilities) if np.sum(probabilities) > 0 else np.ones(n) / len(unvisited_nodes)
                
                next_node = np.random.choice(n, p=probabilities)
                
                path.append(next_node)
                path_length += distance_matrix[current_node, next_node]
                unvisited_nodes.remove(next_node)
                current_node = next_node

            path.append(start_node)
            path_length += distance_matrix[current_node, start_node]

            sampled_paths.append(path)
            sampled_path_lengths.append(path_length)

        # Update edge weights based on sampled paths
        for i in range(n):
            for j in range(n):
                edge_weights[i, j] *= (1 - decay_rate)

        for path, path_length in zip(sampled_paths, sampled_path_lengths):
            delta = q / path_length
            for i in range(n):
                u = path[i]
                v = path[(i + 1) % n]
                edge_weights[u, v] += delta
                edge_weights[v, u] += delta

    heuristics_matrix = edge_weights
    return heuristics_matrix
