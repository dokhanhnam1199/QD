import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining pheromone and distance information, where pheromone is updated using a rank-based approach, emphasizing the best solutions found during each iteration, and a different constant is used for pheromone deposit.}"""
    n = distance_matrix.shape[0]
    pheromone = np.ones((n, n))  # Initialize pheromone trails
    heuristics_matrix = np.zeros((n, n))
    alpha = 0.5  # Pheromone influence
    beta = 1.5   # Distance influence
    rho = 0.1  # Evaporation rate
    Q = 100   # Pheromone deposit constant
    num_ants = 30
    num_iterations = 60

    for iteration in range(num_iterations):
        all_paths = []
        all_path_lengths = []

        for ant in range(num_ants):
            start_node = np.random.randint(n)
            current_node = start_node
            unvisited = set(range(n))
            unvisited.remove(current_node)
            path = [current_node]

            while unvisited:
                probabilities = (pheromone[current_node, :]**alpha) * ((1 / (distance_matrix[current_node, :] + 1e-6))**beta)
                
                # Mask visited nodes
                for visited_node in path:
                    probabilities[visited_node] = 0
                
                probabilities = probabilities / np.sum(probabilities) if np.sum(probabilities) > 0 else np.ones(n) / n

                next_node = np.random.choice(n, p=probabilities)
                path.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node

            path.append(start_node)
            all_paths.append(path)

            path_length = 0
            for i in range(n):
                path_length += distance_matrix[path[i], path[(i + 1) % n]]
            all_path_lengths.append(path_length)

        # Rank-based pheromone update
        ranked_paths = np.argsort(all_path_lengths)
        for rank, ant_index in enumerate(ranked_paths):
            path = all_paths[ant_index]
            path_length = all_path_lengths[ant_index]
            
            # Higher rank gets more pheromone deposit
            deposit_amount = (num_ants - rank) * (Q / path_length)
            
            for i in range(n):
                pheromone[path[i], path[(i + 1) % n]] += deposit_amount
                pheromone[path[(i + 1) % n], path[i]] += deposit_amount

        # Evaporation
        pheromone *= (1 - rho)

    # Construct heuristic matrix based on pheromone levels and distance
    heuristics_matrix = pheromone * (1 / (distance_matrix + 1e-6))
    return heuristics_matrix
