import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge desirability by constructing tours using a greedy insertion heuristic and averaging the inclusion frequency of each edge across multiple runs, biased by edge distances.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_trials = 50

    def calculate_tour_length(tour):
        length = 0
        for i in range(len(tour) - 1):
            length += distance_matrix[tour[i], tour[i+1]]
        length += distance_matrix[tour[-1], tour[0]]
        return length

    def greedy_insertion_tour(start_node):
        unvisited = set(range(n))
        unvisited.remove(start_node)
        tour = [start_node]

        while unvisited:
            best_node_to_insert = None
            best_insertion_index = None
            min_increase = float('inf')

            for node_to_insert in unvisited:
                for i in range(len(tour)):
                    insertion_index = i
                    new_tour = tour[:i] + [node_to_insert] + tour[i:]
                    tour_length_increase = distance_matrix[tour[i-1] if i > 0 else tour[-1], node_to_insert] + distance_matrix[node_to_insert, tour[i]] - distance_matrix[tour[i-1] if i > 0 else tour[-1], tour[i]]
                    if tour_length_increase < min_increase:
                        min_increase = tour_length_increase
                        best_node_to_insert = node_to_insert
                        best_insertion_index = insertion_index

            tour = tour[:best_insertion_index] + [best_node_to_insert] + tour[best_insertion_index:]
            unvisited.remove(best_node_to_insert)
        return tour

    for _ in range(num_trials):
        start_node = np.random.randint(0, n)
        tour = greedy_insertion_tour(start_node)

        tour_length = calculate_tour_length(tour)
        
        for i in range(n):
            node1 = tour[i % n]
            node2 = tour[(i + 1) % n]
            
            # Bias towards shorter edges
            heuristics_matrix[node1, node2] += (1 / (distance_matrix[node1, node2] + 1e-6)) 
            heuristics_matrix[node2, node1] += (1 / (distance_matrix[node2, node1] + 1e-6))
            
    heuristics_matrix /= num_trials
    return heuristics_matrix
