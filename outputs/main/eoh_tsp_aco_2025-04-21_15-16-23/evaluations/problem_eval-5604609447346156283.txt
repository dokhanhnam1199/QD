import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving random solutions through edge swaps, guided by simulated annealing principles to escape local optima, and normalizes it based on edge distances.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 1000
    initial_temperature = 100
    cooling_rate = 0.995

    def calculate_path_length(path):
        length = 0
        for i in range(n):
            length += distance_matrix[path[i], path[(i + 1) % n]]
        return length

    # Generate a random initial solution
    current_solution = np.random.permutation(n)
    current_path_length = calculate_path_length(current_solution)

    temperature = initial_temperature

    for _ in range(num_iterations):
        # Generate a neighbor solution by swapping two random edges
        i, j = np.random.choice(n, 2, replace=False)
        neighbor_solution = current_solution.copy()
        neighbor_solution[i], neighbor_solution[j] = neighbor_solution[j], neighbor_solution[i]
        neighbor_path_length = calculate_path_length(neighbor_solution)

        # Calculate the change in path length
        delta = neighbor_path_length - current_path_length

        # Acceptance probability based on simulated annealing
        if delta < 0 or np.random.rand() < np.exp(-delta / temperature):
            current_solution = neighbor_solution
            current_path_length = neighbor_path_length

        # Cool down the temperature
        temperature *= cooling_rate

    # Construct the heuristic matrix based on the best solution found
    for i in range(n):
        heuristics_matrix[current_solution[i], current_solution[(i + 1) % n]] = 1
        heuristics_matrix[current_solution[(i + 1) % n], current_solution[i]] = 1

    # Normalize the heuristic matrix based on distance
    max_heuristic = np.max(heuristics_matrix)
    if max_heuristic > 0:
        heuristics_matrix = heuristics_matrix / max_heuristic
    
    max_distance = np.max(distance_matrix)
    if max_distance > 0:
        heuristics_matrix = heuristics_matrix / (distance_matrix / max_distance)


    return heuristics_matrix
