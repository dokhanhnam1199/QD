import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a Monte Carlo approach to estimate edge frequencies in near-optimal TSP solutions by iteratively constructing paths via biased random walks and updating a heuristic matrix based on path lengths.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        path = [start_node]
        unvisited = set(range(n))
        unvisited.remove(start_node)
        current_node = start_node
        path_length = 0

        while unvisited:
            # Calculate probabilities proportional to inverse distance
            distances = distance_matrix[current_node, list(unvisited)]
            probabilities = 1.0 / (distances + 1e-9)  # Avoid division by zero
            probabilities /= np.sum(probabilities)

            # Choose the next node based on the probabilities
            next_node = np.random.choice(list(unvisited), p=probabilities)

            path_length += distance_matrix[current_node, next_node]
            path.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node
        
        path_length += distance_matrix[current_node, start_node]
        path.append(start_node)

        # Update the heuristic matrix based on the path length
        reward = np.exp(-path_length / (np.mean(distance_matrix) * n))  # Exponential decay based on path length
        
        for i in range(n):
            node1 = path[i]
            node2 = path[(i + 1) % n]
            heuristics_matrix[node1, node2] += reward
            heuristics_matrix[node2, node1] += reward
            
    return heuristics_matrix
