import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix for TSP by iteratively building partial tours using a greedy approach biased by edge lengths, then updating edge scores based on their frequency in short tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 50
    tour_length_threshold = 2.5 * np.mean(distance_matrix)
    
    for iteration in range(num_iterations):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(current_node)
        tour = [current_node]
        tour_length = 0

        while unvisited:
            distances = distance_matrix[current_node, list(unvisited)]
            next_node = list(unvisited)[np.argmin(distances)]
            
            tour_length += distance_matrix[current_node, next_node]
            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        tour_length += distance_matrix[tour[-1], start_node]
        tour.append(start_node)
        
        if tour_length < tour_length_threshold:
            for i in range(n):
                node1 = tour[i]
                node2 = tour[(i + 1) % n]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1
        

    heuristics_matrix = (heuristics_matrix + 1e-9)/(np.max(heuristics_matrix) + 1e-9)
    return heuristics_matrix
