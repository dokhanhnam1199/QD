import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge desirability by combining the strengths of both nearest neighbor and random edge selection, refining tours with 2-opt swaps, and then accumulating edge frequencies across multiple trials.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_trials = 50

    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour

    def two_opt(tour):
        best_tour = tour
        best_length = calculate_tour_length(tour)
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for k in range(i + 1, n):
                    new_tour = two_opt_swap(best_tour, i, k)
                    new_length = calculate_tour_length(new_tour)
                    if new_length < best_length:
                        best_tour = new_tour
                        best_length = new_length
                        improved = True
        return best_tour, best_length

    def mixed_tour_construction(start_node, alpha=0.5):
        tour = [start_node]
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        current_node = start_node

        while unvisited_nodes:
            if np.random.rand() < alpha:  # Nearest neighbor selection
                nearest_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node, x])
                tour.append(nearest_node)
                unvisited_nodes.remove(nearest_node)
                current_node = nearest_node
            else:  # Probabilistic selection
                probabilities = np.array([1 / (distance_matrix[current_node, node] + 1e-9) for node in unvisited_nodes]) #added small value to avoid zero division error
                probabilities /= np.sum(probabilities)
                nearest_node = np.random.choice(list(unvisited_nodes), p=probabilities)
                tour.append(nearest_node)
                unvisited_nodes.remove(nearest_node)
                current_node = nearest_node
        tour.append(start_node)
        tour = tour[:-1]
        return tour

    for _ in range(num_trials):
        # Generate a tour using a mixed approach
        start_node = np.random.randint(0, n)
        initial_tour = mixed_tour_construction(start_node)

        # Apply 2-opt to improve the tour
        best_tour, best_length = two_opt(initial_tour)

        # Update the heuristics matrix based on the edges in the improved tour
        for i in range(n):
            node1 = best_tour[i]
            node2 = best_tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_trials
    return heuristics_matrix
