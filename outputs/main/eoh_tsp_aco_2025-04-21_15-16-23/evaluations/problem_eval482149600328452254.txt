import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge probabilities by simulating multiple random tours and rewarding edges present in shorter tours, using a decaying average to refine the heuristic matrix over time.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones((n, n)) / n  # Initialize with uniform probabilities
    num_samples = 1000
    decay_rate = 0.01

    for _ in range(num_samples):
        # Generate a random tour
        nodes = list(range(n))
        np.random.shuffle(nodes)
        tour = nodes + [nodes[0]]  # Return to starting node

        # Calculate the tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # Update heuristics based on tour length. Shorter tours result in edges receiving higher weights.
        for i in range(n):
            u, v = tour[i], tour[i+1]
            reward = np.exp(-tour_length) # Exponentially decaying reward
            heuristics_matrix[u, v] = (1 - decay_rate) * heuristics_matrix[u, v] + decay_rate * reward
            heuristics_matrix[v, u] = (1 - decay_rate) * heuristics_matrix[v, u] + decay_rate * reward

    return heuristics_matrix
