import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples TSP solutions using a stochastic nearest neighbor heuristic and updates a pheromone matrix based on the path length, with an evaporation factor applied.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)  # Initialize with ones to avoid division by zero initially
    num_samples = 100
    evaporation_rate = 0.1

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(start_node)
        path = [start_node]
        path_length = 0

        while unvisited:
            probabilities = np.zeros(n)
            for neighbor in unvisited:
                probabilities[neighbor] = pheromone_matrix[current_node, neighbor] / distance_matrix[current_node, neighbor]
            
            probabilities /= np.sum(probabilities[list(unvisited)]) # Normalize only among unvisited nodes.
            
            # Choose next node based on probabilities
            next_node = np.random.choice(list(unvisited), p=probabilities[list(unvisited)])

            path_length += distance_matrix[current_node, next_node]
            path.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        path_length += distance_matrix[current_node, start_node]
        path.append(start_node)

        # Update pheromone matrix based on path length
        if path_length > 0:
            reward = 1 / path_length
        else:
            reward = 0
        
        # Evaporation
        pheromone_matrix *= (1 - evaporation_rate)
        
        # Deposit pheromones
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            pheromone_matrix[node1, node2] += reward
            pheromone_matrix[node2, node1] += reward

    return heuristics_matrix
