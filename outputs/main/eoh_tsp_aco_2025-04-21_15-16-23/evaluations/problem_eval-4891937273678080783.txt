import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines the heuristic matrix by iteratively constructing shortest paths using a greedy approach guided by pheromone trails and distance, updating pheromone levels based on path lengths, and smoothing the pheromone matrix to enhance exploration.}"""
    n = distance_matrix.shape[0]
    pheromone = np.ones((n, n))  # Initialize pheromone trails
    heuristics_matrix = np.zeros((n, n))
    alpha = 0.8  # Pheromone influence
    beta = 1.2   # Distance influence
    rho = 0.2  # Evaporation rate
    Q = 50    # Pheromone deposit constant
    num_iterations = 75

    for iteration in range(num_iterations):
        paths = []
        path_lengths = []

        for start_node in range(n):
            current_node = start_node
            unvisited = set(range(n))
            unvisited.remove(current_node)
            path = [current_node]
            path_length = 0

            while unvisited:
                probabilities = (pheromone[current_node, :]**alpha) * ((1 / (distance_matrix[current_node, :] + 1e-6))**beta)
                
                # Mask visited nodes
                for visited_node in path:
                    probabilities[visited_node] = 0
                
                probabilities = probabilities / np.sum(probabilities) if np.sum(probabilities) > 0 else np.ones(n) / n
                
                next_node = np.random.choice(n, p=probabilities)
                path_length += distance_matrix[current_node, next_node]
                path.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node

            path_length += distance_matrix[path[-1], path[0]]
            path.append(start_node)
            paths.append(path)
            path_lengths.append(path_length)

        # Update pheromones
        pheromone *= (1 - rho)  # Evaporation
        for i in range(n):
            path = paths[i]
            path_length = path_lengths[i]
            for j in range(n):
                pheromone[path[j], path[(j + 1) % n]] += Q / path_length
                pheromone[path[(j + 1) % n], path[j]] += Q / path_length

    # Smooth pheromone matrix
    heuristics_matrix = (pheromone + pheromone.T) / 2
    return heuristics_matrix
