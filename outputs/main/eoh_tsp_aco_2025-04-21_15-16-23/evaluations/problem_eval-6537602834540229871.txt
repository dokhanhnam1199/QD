import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge desirability by iteratively constructing tours using a greedy insertion approach, improving them with 3-opt swaps, and averaging the frequency of each edge across multiple trials.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_trials = 50

    def calculate_tour_length(tour):
        length = 0
        for i in range(len(tour) - 1):
            length += distance_matrix[tour[i], tour[i + 1]]
        length += distance_matrix[tour[-1], tour[0]]
        return length

    def three_opt_swap(tour, i, j, k):
        a, b, c, d, e, f = tour[:i], tour[i:j], tour[j:k], tour[k:] , tour[0:i], tour[k:]
        
        new_tours = [
            a + b + c + d,  # Original
            a + b + c[::-1] + d,
            a + b[::-1] + c + d,
            a + b[::-1] + c[::-1] + d,
            a + c + b + d,
            a + c + b[::-1] + d,
            a + c[::-1] + b + d,
            a + c[::-1] + b[::-1] + d
        ]
        
        return min(new_tours, key=lambda tour: calculate_tour_length(tour))

    def three_opt(tour):
        best_tour = tour[:]
        best_length = calculate_tour_length(tour)
        improved = True

        while improved:
            improved = False
            for i in range(1, n - 2):
                for j in range(i + 1, n - 1):
                    for k in range(j + 1, n):
                        new_tour = three_opt_swap(best_tour, i, j, k)
                        new_length = calculate_tour_length(new_tour)
                        if new_length < best_length:
                            best_tour = new_tour
                            best_length = new_length
                            improved = True
        return best_tour, best_length

    def greedy_insertion_tour(start_node):
        unvisited = set(range(n))
        unvisited.remove(start_node)
        tour = [start_node]

        while unvisited:
            best_node_to_insert = None
            best_insertion_index = None
            min_increase = float('inf')

            for node_to_insert in unvisited:
                for i in range(len(tour)):
                    temp_tour = tour[:]
                    temp_tour.insert(i, node_to_insert)
                    increase = distance_matrix[tour[i-1], node_to_insert] + distance_matrix[node_to_insert,tour[i]] - distance_matrix[tour[i-1],tour[i]] if i > 0 else distance_matrix[tour[-1], node_to_insert] + distance_matrix[node_to_insert,tour[0]] - distance_matrix[tour[-1],tour[0]]
                    if increase < min_increase:
                        min_increase = increase
                        best_node_to_insert = node_to_insert
                        best_insertion_index = i
            
            tour.insert(best_insertion_index, best_node_to_insert)
            unvisited.remove(best_node_to_insert)
        return tour

    for _ in range(num_trials):
        # Generate an initial tour using greedy insertion
        start_node = np.random.randint(0, n)
        initial_tour = greedy_insertion_tour(start_node)

        # Apply 3-opt to improve the tour
        best_tour, best_length = three_opt(initial_tour)

        # Update the heuristics matrix based on the edges in the improved tour
        for i in range(len(best_tour)):
            node1 = best_tour[i]
            node2 = best_tour[(i + 1) % len(best_tour)]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_trials
    return heuristics_matrix
