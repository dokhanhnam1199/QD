import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge desirability by assigning higher probabilities to shorter edges and edges that bridge sparsely connected nodes, then normalizes these probabilities to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate node degrees based on distance (sparsity)
    node_degrees = np.sum(1 / (distance_matrix + 1e-6), axis=0)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Edge desirability based on distance and node degrees
                heuristics_matrix[i, j] = (1 / (distance_matrix[i, j] + 1e-6)) * (node_degrees[i] + node_degrees[j])

    # Normalize the heuristic matrix
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix /= max_val

    return heuristics_matrix
