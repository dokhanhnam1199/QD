import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge desirability for TSP by iteratively constructing tours using a greedy insertion approach, improving them with 3-opt swaps, and averaging the inclusion frequency of each edge across multiple runs, weighting edges in shorter tours higher.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_trials = 50

    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def three_opt_swap(tour, i, j, k):
        # Consider all 8 possible 3-opt swaps
        a, b, c, d, e, f = tour[i-1], tour[i], tour[j-1], tour[j], tour[k-1], tour[k]

        option1 = tour[:i] + tour[i:j][::-1] + tour[j:k][::-1] + tour[k:]
        option2 = tour[:i] + tour[i:j] + tour[j:k][::-1] + tour[k:]
        option3 = tour[:i] + tour[i:j][::-1] + tour[j:k] + tour[k:]
        option4 = tour[:i] + tour[k-1:j-1:-1] + tour[i-1::-1] + tour[k:]
        option5 = tour[:i] + tour[j:k] + tour[i:j][::-1] + tour[k:]
        option6 = tour[:i] + tour[k-1:j-1:-1] + tour[k-1:i-1:-1] + tour[k:]
        
        options = [tour, option1, option2, option3, option4, option5, option6]
        lengths = [calculate_tour_length(t) for t in options]
        
        return options[np.argmin(lengths)]

    def three_opt(tour):
        best_tour = tour
        best_length = calculate_tour_length(tour)
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 2):
                for j in range(i + 1, n - 1):
                    for k in range(j + 1, n):
                        new_tour = three_opt_swap(best_tour, i, j, k)
                        new_length = calculate_tour_length(new_tour)
                        if new_length < best_length:
                            best_tour = new_tour
                            best_length = new_length
                            improved = True
        return best_tour, best_length
    
    def greedy_insertion_tour(start_node):
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        tour = [start_node]

        while unvisited_nodes:
            best_node = None
            best_insertion_cost = float('inf')
            best_insertion_index = None
            
            for node_to_insert in unvisited_nodes:
                for i in range(len(tour)):
                    insertion_cost = distance_matrix[tour[i-1], node_to_insert] + distance_matrix[node_to_insert, tour[i]] - distance_matrix[tour[i-1], tour[i]]
                    if insertion_cost < best_insertion_cost:
                        best_insertion_cost = insertion_cost
                        best_node = node_to_insert
                        best_insertion_index = i

            tour.insert(best_insertion_index, best_node)
            unvisited_nodes.remove(best_node)
            
        return tour

    for _ in range(num_trials):
        # Generate a tour using greedy insertion heuristic
        start_node = np.random.randint(0, n)
        initial_tour = greedy_insertion_tour(start_node)

        # Apply 3-opt to improve the tour
        best_tour, best_length = three_opt(initial_tour)

        # Update the heuristics matrix based on the edges in the improved tour, weighting by tour length
        weight = 1.0 / best_length
        for i in range(n):
            node1 = best_tour[i]
            node2 = best_tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight

    # Normalize the heuristics matrix
    total_weight = np.sum(heuristics_matrix)
    if total_weight > 0:
        heuristics_matrix /= total_weight

    return heuristics_matrix
