import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm generates multiple random tours, selects the best ones based on total distance, and then averages the frequency with which each edge appears in these best tours to create a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    num_tours = 1000
    num_best = 100
    tours = []
    distances = []

    for _ in range(num_tours):
        tour = np.random.permutation(n)
        tours.append(tour)
        distance = 0
        for i in range(n - 1):
            distance += distance_matrix[tour[i], tour[i+1]]
        distance += distance_matrix[tour[-1], tour[0]]
        distances.append(distance)

    ranked_tours = np.argsort(distances)
    best_tours = [tours[i] for i in ranked_tours[:num_best]]

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for tour in best_tours:
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1  # Ensure symmetry
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1

    heuristics_matrix /= num_best

    return heuristics_matrix
