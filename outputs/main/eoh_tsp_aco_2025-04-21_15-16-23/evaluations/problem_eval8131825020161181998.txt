import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs TSP tours through iterative edge sampling, prioritizing shorter edges and incorporating simulated annealing to escape local optima and refine the heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix)
    temperature = 100.0
    cooling_rate = 0.95
    num_iterations = 1000

    for iteration in range(num_iterations):
        i = np.random.randint(n)
        j = np.random.randint(n)
        if i == j:
            continue

        delta_h = 1.0 / distance_matrix[i, j] - heuristics_matrix[i, j]

        if delta_h > 0 or np.random.rand() < np.exp(delta_h / temperature):
            heuristics_matrix[i, j] = 1.0 / distance_matrix[i, j]
            heuristics_matrix[j, i] = 1.0 / distance_matrix[j, i]

        temperature *= cooling_rate

    return heuristics_matrix
