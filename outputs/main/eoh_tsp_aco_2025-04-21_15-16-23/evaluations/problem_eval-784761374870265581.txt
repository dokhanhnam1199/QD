import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples many random tours, and for each edge, it counts how often that edge appears in a short tour; edges that appear frequently in short tours are assigned higher heuristic values.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000  # Number of random tours to generate
    alpha = 0.1  # Parameter to control how "short" a tour must be to be considered

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_distance = 0
        for i in range(n - 1):
            tour_distance += distance_matrix[tour[i], tour[i + 1]]
        tour_distance += distance_matrix[tour[n - 1], tour[0]]

        # Calculate the threshold for "short" tours
        threshold = (1 + alpha) * np.min([sum(np.sort(row)[1:3]) for row in distance_matrix])  # Average distance to closest and second-closest neighbor

        # If the tour is "short", update the heuristics matrix
        if tour_distance <= threshold:
            for i in range(n - 1):
                heuristics_matrix[tour[i], tour[i + 1]] += 1
                heuristics_matrix[tour[i + 1], tour[i]] += 1  # Ensure symmetry
            heuristics_matrix[tour[n - 1], tour[0]] += 1
            heuristics_matrix[tour[0], tour[n - 1]] += 1

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
