import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm generates multiple random tours, calculates their lengths, and then assigns higher probabilities to edges that appear more frequently in shorter tours.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000  # Number of random tours to generate
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0]) # Return to starting node

        # Calculate the tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # Update the heuristics matrix based on tour length
        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += 1.0 / tour_length
            heuristics_matrix[tour[i+1], tour[i]] += 1.0 / tour_length

    return heuristics_matrix
