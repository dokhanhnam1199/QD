import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively samples random tours, scores edges based on their frequency in short tours, and returns a matrix indicating the heuristic value of each edge.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)

        # Calculate the tour length
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i + 1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        # Score edges based on tour length (shorter tours get higher scores)
        score = 1.0 / (1.0 + tour_length)  # Inverse of tour length

        # Update heuristics matrix
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i + 1]] += score
            heuristics_matrix[tour[i + 1], tour[i]] += score
        heuristics_matrix[tour[-1], tour[0]] += score
        heuristics_matrix[tour[0], tour[-1]] += score

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
