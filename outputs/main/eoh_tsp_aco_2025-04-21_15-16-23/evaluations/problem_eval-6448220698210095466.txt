import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines aspects of both ant colony optimization and nearest neighbor search, using a pheromone-inspired approach to guide nearest neighbor tour construction and iteratively refine edge desirability based on tour quality.}"""
    n = distance_matrix.shape[0]
    pheromone = np.ones((n, n))  # Initialize pheromone trails
    heuristics_matrix = np.zeros((n, n))
    alpha = 0.7  # Pheromone influence
    beta = 2    # Distance influence
    rho = 0.5  # Evaporation rate
    Q = 100    # Pheromone deposit constant
    num_trials = 50

    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def nearest_neighbor_tour(start_node):
        tour = [start_node]
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        current_node = start_node

        while unvisited_nodes:
            probabilities = (pheromone[current_node, :]**alpha) * ((1 / (distance_matrix[current_node, :] + 1e-6))**beta)
            
            # Mask visited nodes
            for visited_node in tour:
                probabilities[visited_node] = 0
            
            probabilities = probabilities / np.sum(probabilities) if np.sum(probabilities) > 0 else np.ones(n) / n
            
            nearest_node = np.random.choice(n, p=probabilities)
            tour.append(nearest_node)
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node
            
        tour.append(start_node)
        tour = tour[:-1]
        return tour

    for _ in range(num_trials):
        # Generate a tour using nearest neighbor heuristic guided by pheromones
        start_node = np.random.randint(0, n)
        initial_tour = nearest_neighbor_tour(start_node)
        tour_length = calculate_tour_length(initial_tour)

        # Update pheromones based on tour quality
        for i in range(n):
            node1 = initial_tour[i]
            node2 = initial_tour[(i + 1) % n]
            pheromone[node1, node2] += Q / tour_length
            pheromone[node2, node1] += Q / tour_length

        pheromone *= (1 - rho)  # Evaporation

    # Normalize pheromone matrix to create the heuristic matrix
    max_pheromone = np.max(pheromone)
    heuristics_matrix = pheromone / max_pheromone if max_pheromone > 0 else np.ones((n, n)) / n
    return heuristics_matrix
