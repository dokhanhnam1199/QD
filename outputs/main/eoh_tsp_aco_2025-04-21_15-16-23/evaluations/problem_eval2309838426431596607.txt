import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively refines a heuristic matrix by favoring edges present in short tours constructed using the current heuristic and penalizing edges in longer tours.}"""
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float)  # Initialize with equal probabilities
    num_iterations = 10
    num_samples = 50

    for _ in range(num_iterations):
        edge_usage = np.zeros_like(distance_matrix, dtype=float)

        for _ in range(num_samples):
            current_node = np.random.randint(num_nodes)
            unvisited_nodes = set(range(num_nodes))
            unvisited_nodes.remove(current_node)
            tour = [current_node]

            while unvisited_nodes:
                # Choose the next node based on heuristic probabilities
                probabilities = np.array([heuristics_matrix[current_node, neighbor] for neighbor in unvisited_nodes])
                probabilities /= np.sum(probabilities)
                next_node = np.random.choice(list(unvisited_nodes), p=probabilities)

                tour.append(next_node)
                unvisited_nodes.remove(next_node)
                current_node = next_node

            tour.append(tour[0])  # Return to start

            # Calculate tour length
            tour_length = 0
            for i in range(num_nodes):
                tour_length += distance_matrix[tour[i], tour[i+1]]

            # Update edge usage based on tour length (shorter tours are better)
            for i in range(num_nodes):
                node1 = tour[i]
                node2 = tour[i+1]
                edge_usage[node1, node2] += 1/tour_length
                edge_usage[node2, node1] += 1/tour_length

        # Update the heuristic matrix based on edge usage
        heuristics_matrix = 0.5 * heuristics_matrix + 0.5 * (edge_usage / np.max(edge_usage)) # Combine

    return heuristics_matrix
