import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs TSP solutions by iteratively selecting the edge with the highest pheromone-to-distance ratio, updating pheromones based on path length, and returning a heuristic matrix reflecting edge desirability.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100
    decay_rate = 0.05
    q = 2.0

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]
        path_length = 0

        while unvisited_nodes:
            best_neighbor = None
            best_ratio = -1
            for neighbor in unvisited_nodes:
                ratio = pheromone_matrix[current_node, neighbor] / distance_matrix[current_node, neighbor]
                if ratio > best_ratio:
                    best_ratio = ratio
                    best_neighbor = neighbor

            if best_neighbor is None:
                break

            path.append(best_neighbor)
            path_length += distance_matrix[current_node, best_neighbor]
            unvisited_nodes.remove(best_neighbor)
            current_node = best_neighbor
            
        if len(path) != n:
            continue
        
        path.append(start_node)
        path_length += distance_matrix[current_node, start_node]
        
        delta = q / path_length
        for i in range(n):
            heuristics_matrix[path[i], path[i+1]] += 1.0 / path_length
            heuristics_matrix[path[i+1], path[i]] += 1.0 / path_length

            pheromone_matrix[path[i], path[i+1]] += delta
            pheromone_matrix[path[i+1], path[i]] += delta

        pheromone_matrix *= (1 - decay_rate)

    heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)
    heuristics_matrix = heuristics_matrix / (distance_matrix / np.max(distance_matrix))

    return heuristics_matrix
