import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by simulating ant colony optimization, where ants probabilistically build solutions biased by pheromone trails and distance, and pheromone is updated based on the quality of the solutions found, and then the heuristic matrix is constructed by combining pheromone and distance information.}"""
    n = distance_matrix.shape[0]
    pheromone = np.ones((n, n))  # Initialize pheromone trails
    heuristics_matrix = np.zeros((n, n))
    alpha = 0.8  # Pheromone influence
    beta = 1.2   # Distance influence
    rho = 0.2  # Evaporation rate
    Q = 50   # Pheromone deposit constant
    num_ants = 40
    num_iterations = 80

    for iteration in range(num_iterations):
        all_paths = []
        all_path_lengths = []

        for ant in range(num_ants):
            start_node = np.random.randint(n)
            current_node = start_node
            unvisited = set(range(n))
            unvisited.remove(current_node)
            path = [current_node]

            while unvisited:
                probabilities = (pheromone[current_node, :]**alpha) * ((1 / (distance_matrix[current_node, :] + 1e-6))**beta)
                
                # Mask visited nodes
                for visited_node in path:
                    probabilities[visited_node] = 0
                
                probabilities = probabilities / np.sum(probabilities) if np.sum(probabilities) > 0 else np.ones(n) / n

                next_node = np.random.choice(n, p=probabilities)
                path.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node

            path.append(start_node)
            all_paths.append(path)

            path_length = 0
            for i in range(n):
                path_length += distance_matrix[path[i], path[(i + 1) % n]]
            all_path_lengths.append(path_length)

        # Update pheromones
        pheromone *= (1 - rho)  # Evaporation
        for ant in range(num_ants):
            path = all_paths[ant]
            path_length = all_path_lengths[ant]
            for i in range(n):
                pheromone[path[i], path[(i + 1) % n]] += Q / path_length
                pheromone[path[(i + 1) % n], path[i]] += Q / path_length

    # Construct heuristic matrix based on pheromone levels and distance
    heuristics_matrix = pheromone * (1 / (distance_matrix + 1e-6))
    return heuristics_matrix
