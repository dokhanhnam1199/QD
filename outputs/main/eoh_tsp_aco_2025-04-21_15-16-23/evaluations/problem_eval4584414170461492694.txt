import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm employs a simulated annealing approach, iteratively refining a solution by probabilistically accepting changes based on a temperature parameter that decreases over time, favoring better solutions but occasionally accepting worse ones to escape local optima.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    def calculate_path_length(path):
        length = 0
        for i in range(n):
            length += distance_matrix[path[i], path[(i + 1) % n]]
        return length
    
    # Initial solution: random permutation
    current_solution = np.random.permutation(n)
    current_cost = calculate_path_length(current_solution)

    T = 1.0  # Initial temperature
    T_min = 0.00001 # Minimum temperature
    alpha = 0.9 # Cooling rate

    while T > T_min:
        # Generate a neighbor solution by swapping two cities
        i, j = np.random.choice(n, 2, replace=False)
        new_solution = current_solution.copy()
        new_solution[i], new_solution[j] = new_solution[j], new_solution[i]
        new_cost = calculate_path_length(new_solution)

        # Acceptance probability
        if new_cost < current_cost:
            acceptance_probability = 1.0
        else:
            acceptance_probability = np.exp((current_cost - new_cost) / T)

        # Accept the new solution with probability
        if np.random.rand() < acceptance_probability:
            current_solution = new_solution
            current_cost = new_cost
        
        T = T * alpha

    # Construct heuristic matrix from the best solution
    for i in range(n):
        heuristics_matrix[current_solution[i], current_solution[(i + 1) % n]] = 1.0
        heuristics_matrix[current_solution[(i + 1) % n], current_solution[i]] = 1.0

    return heuristics_matrix
