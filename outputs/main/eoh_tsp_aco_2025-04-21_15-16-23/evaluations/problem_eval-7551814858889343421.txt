import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses an Ant Colony Optimization (ACO) approach with pheromone updates and edge selection based on pheromone and distance, combined with a local search improvement step to refine the discovered tours and construct the heuristic matrix.}"""
    n = distance_matrix.shape[0]
    pheromone = np.ones_like(distance_matrix)
    heuristics_matrix = np.zeros_like(distance_matrix)
    alpha = 1
    beta = 2
    rho = 0.5
    Q = 100
    num_iterations = 50
    num_ants = n

    def tour_length(tour):
        length = 0
        for i in range(len(tour) - 1):
            length += distance_matrix[tour[i], tour[i+1]]
        return length

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + list(reversed(tour[i:k+1])) + tour[k+1:]
        return new_tour

    def two_opt(tour):
        best_tour = tour
        improved = True
        while improved:
            improved = False
            for i in range(1, len(tour) - 2):
                for k in range(i + 1, len(tour) - 1):
                    new_tour = two_opt_swap(tour, i, k)
                    if tour_length(new_tour) < tour_length(best_tour):
                        best_tour = new_tour
                        improved = True
            tour = best_tour
        return best_tour

    for iteration in range(num_iterations):
        all_tours = []
        for ant in range(num_ants):
            start_node = np.random.randint(n)
            current_node = start_node
            unvisited = set(range(n))
            unvisited.remove(current_node)
            tour = [current_node]

            while unvisited:
                probabilities = np.zeros(n)
                for neighbor in unvisited:
                    probabilities[neighbor] = (pheromone[current_node, neighbor]**alpha) * ((1 / distance_matrix[current_node, neighbor])**beta)
                probabilities /= np.sum(probabilities)
                next_node = np.random.choice(n, p=probabilities)

                if next_node not in unvisited:
                    available_nodes = list(unvisited)
                    if len(available_nodes) > 0:
                        next_node = np.random.choice(available_nodes)
                    else:
                        break

                tour.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node

            tour.append(start_node)
            tour = two_opt(tour)
            all_tours.append(tour)

        # Update pheromones
        delta_pheromone = np.zeros_like(distance_matrix)
        for tour in all_tours:
            tour_length_val = tour_length(tour)
            for i in range(len(tour) - 1):
                delta_pheromone[tour[i], tour[i+1]] += Q / tour_length_val
                delta_pheromone[tour[i+1], tour[i]] += Q / tour_length_val
        pheromone = (1 - rho) * pheromone + delta_pheromone

        # Update heuristic matrix
        for tour in all_tours:
            for i in range(len(tour) - 1):
                heuristics_matrix[tour[i], tour[i+1]] += 1
                heuristics_matrix[tour[i+1], tour[i]] += 1

    heuristics_matrix /= (num_iterations * num_ants)
    return heuristics_matrix
