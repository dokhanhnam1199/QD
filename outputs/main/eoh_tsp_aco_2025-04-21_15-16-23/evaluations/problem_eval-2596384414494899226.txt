import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples many random tours, favoring shorter edges, and then returns a matrix indicating how frequently each edge appears in the sampled tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            distances = distance_matrix[current_node, :]
            probabilities = np.zeros(n)
            for node in unvisited_nodes:
                probabilities[node] = np.exp(-distances[node] / (np.mean(distance_matrix) + 1e-6)) # Softmax favoring shorter edges
            
            probabilities /= np.sum(probabilities)
            
            next_node = np.random.choice(n, p=probabilities)
            
            if next_node not in unvisited_nodes:
              candidates = list(unvisited_nodes)
              distances_to_candidates = distances[candidates]
              next_node = candidates[np.argmin(distances_to_candidates)] # Fallback in case random choice fails due to numerical instability


            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour.append(tour[0])  # Return to starting node

        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
