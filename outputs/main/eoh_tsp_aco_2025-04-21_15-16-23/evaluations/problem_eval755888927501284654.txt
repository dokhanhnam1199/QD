import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random solutions, evaluates their total distances, and assigns higher heuristic values to edges frequently appearing in better solutions.}
    """
    num_nodes = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(num_nodes)
        
        # Calculate the total distance of the tour
        total_distance = 0
        for i in range(num_nodes - 1):
            total_distance += distance_matrix[tour[i], tour[i+1]]
        total_distance += distance_matrix[tour[-1], tour[0]]
        
        # Update heuristics based on tour quality
        for i in range(num_nodes - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1 / total_distance
            heuristics_matrix[tour[i+1], tour[i]] += 1 / total_distance 
        heuristics_matrix[tour[-1], tour[0]] += 1 / total_distance
        heuristics_matrix[tour[0], tour[-1]] += 1 / total_distance

    return heuristics_matrix
