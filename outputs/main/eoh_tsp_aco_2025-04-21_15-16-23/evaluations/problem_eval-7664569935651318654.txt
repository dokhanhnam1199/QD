import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm employs simulated annealing to explore the solution space, probabilistically accepting moves to neighboring solutions based on a temperature parameter that gradually decreases over time, favoring better solutions as the algorithm converges.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000
    initial_temperature = 100
    cooling_rate = 0.95

    # Initialize a random tour
    current_tour = np.random.permutation(n)
    current_tour = np.append(current_tour, current_tour[0]) #close the tour
    current_cost = calculate_tour_cost(distance_matrix, current_tour)
    
    best_tour = current_tour.copy()
    best_cost = current_cost

    temperature = initial_temperature

    for _ in range(num_iterations):
        # Generate a neighbor by swapping two random nodes
        i, j = np.random.choice(n, 2, replace=False)
        neighbor_tour = current_tour.copy()
        neighbor_tour[i], neighbor_tour[j] = neighbor_tour[j], neighbor_tour[i]
        neighbor_cost = calculate_tour_cost(distance_matrix, neighbor_tour)

        # Acceptance probability
        delta_cost = neighbor_cost - current_cost
        if delta_cost < 0:
            acceptance_probability = 1
        else:
            acceptance_probability = np.exp(-delta_cost / temperature)

        # Accept or reject the neighbor
        if np.random.rand() < acceptance_probability:
            current_tour = neighbor_tour.copy()
            current_cost = neighbor_cost
            
            if current_cost < best_cost:
                best_cost = current_cost
                best_tour = current_tour.copy()

        # Cool down the temperature
        temperature *= cooling_rate
    
    #Populate the heuristics matrix based on the best tour
    for i in range(n):
        node1 = best_tour[i]
        node2 = best_tour[i+1]
        heuristics_matrix[node1, node2] = 1
        heuristics_matrix[node2, node1] = 1

    return heuristics_matrix

def calculate_tour_cost(distance_matrix, tour):
    cost = 0
    n = len(tour)
    for i in range(n - 1):
        cost += distance_matrix[tour[i], tour[i+1]]
    return heuristics_matrix
