import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm creates a heuristic matrix for the TSP by prioritizing edges with short distances and discouraging edges that would lead to isolated nodes or long detours.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    # Heuristic 1: Inverse of distance (shorter distances are better)
    heuristics_matrix = 1 / (distance_matrix + 1e-9)  # Add a small value to avoid division by zero
    
    # Heuristic 2: Penalty for creating isolated nodes
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate the sum of distances from node i to all other nodes except j
                sum_distances_i = np.sum(distance_matrix[i, :]) - distance_matrix[i, j]
                
                # Calculate the sum of distances from node j to all other nodes except i
                sum_distances_j = np.sum(distance_matrix[j, :]) - distance_matrix[j, i]
                
                # Penalize the edge (i, j) if the sum of distances from either i or j to all other nodes is large
                heuristics_matrix[i, j] -= (sum_distances_i + sum_distances_j) / (n * n)
    
    # Heuristic 3: Encourage local connections and penalize long detours
    mean_distance = np.mean(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                if distance_matrix[i, j] > mean_distance:
                    heuristics_matrix[i, j] *= 0.5  # Reduce the heuristic value if the distance is larger than the mean

    # Ensure the diagonal elements are zero
    for i in range(n):
        heuristics_matrix[i, i] = 0

    return heuristics_matrix
