import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples TSP solutions using a nearest neighbor heuristic and biases edge selection towards shorter distances and edges frequently appearing in good solutions.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]
        path_length = 0

        while unvisited_nodes:
            nearest_neighbor = None
            min_distance = np.inf
            for neighbor in unvisited_nodes:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor

            path.append(nearest_neighbor)
            path_length += distance_matrix[current_node, nearest_neighbor]
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor
        
        path.append(start_node)
        path_length += distance_matrix[current_node, start_node]
        
        for i in range(n):
            heuristics_matrix[path[i], path[i+1]] += 1.0 / path_length
            heuristics_matrix[path[i+1], path[i]] += 1.0 / path_length

    # Incorporate distance information directly
    heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)
    heuristics_matrix = heuristics_matrix / (distance_matrix / np.max(distance_matrix))
    
    return heuristics_matrix
