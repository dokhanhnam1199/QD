import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach with a temperature-controlled probability-based selection of the next node, improving them with 3-opt swaps, and averaging the inclusion frequency of each edge across multiple runs.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_trials = 50
    temperature = 10.0

    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def three_opt_swap(tour, i, j, k):
        a, b, c, d, e, f = tour[:i], tour[i:j], tour[j:k], tour[k:] , tour[i], tour[k-1]

        return a + tour[j:k][::-1] + tour[i:j][::-1] + tour[k:]

    def three_opt(tour):
        best_tour = tour
        best_length = calculate_tour_length(tour)
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 2):
                for j in range(i + 1, n - 1):
                    for k in range(j + 1, n):
                        new_tour = three_opt_swap(best_tour, i, j, k)
                        new_length = calculate_tour_length(new_tour)
                        if new_length < best_length:
                            best_tour = new_tour
                            best_length = new_length
                            improved = True
        return best_tour, best_length

    def nearest_neighbor_tour_probabilistic(start_node):
        tour = [start_node]
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        current_node = start_node

        while unvisited_nodes:
            probabilities = np.array([np.exp(-distance_matrix[current_node, node] / temperature) for node in unvisited_nodes])
            probabilities /= np.sum(probabilities)
            nearest_node = np.random.choice(list(unvisited_nodes), p=probabilities)
            tour.append(nearest_node)
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node
        tour.append(start_node)
        tour = tour[:-1]
        return tour

    for _ in range(num_trials):
        # Generate a tour using nearest neighbor heuristic
        start_node = np.random.randint(0, n)
        initial_tour = nearest_neighbor_tour_probabilistic(start_node)

        # Apply 3-opt to improve the tour
        best_tour, best_length = three_opt(initial_tour)

        # Update the heuristics matrix based on the edges in the improved tour
        for i in range(n):
            node1 = best_tour[i]
            node2 = best_tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_trials
    return heuristics_matrix
