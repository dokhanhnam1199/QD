import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple near-greedy TSP solutions with a probability-based neighbor selection, and then uses the frequency of each edge's appearance in these solutions as a heuristic indicator for its importance.}"""
    num_nodes = distance_matrix.shape[0]
    num_samples = 100  # Number of sample solutions to generate
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    temperature = 10.0  # Temperature parameter for probability-based selection

    for _ in range(num_samples):
        current_node = np.random.randint(num_nodes)  # Start from a random node
        unvisited_nodes = set(range(num_nodes))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            # Calculate probabilities for each neighbor
            probabilities = np.zeros(num_nodes)
            for neighbor in unvisited_nodes:
                distance = distance_matrix[current_node, neighbor]
                probabilities[neighbor] = np.exp(-distance / temperature)

            # Normalize probabilities
            probabilities /= np.sum(probabilities)

            # Choose the next node based on probabilities
            nearest_neighbor = np.random.choice(num_nodes, p=probabilities)
            if nearest_neighbor not in unvisited_nodes:
               
                min_distance = np.inf
                alt_nearest_neighbor = None
                for neighbor in unvisited_nodes:
                    distance = distance_matrix[current_node, neighbor]
                    if distance < min_distance:
                        min_distance = distance
                        alt_nearest_neighbor = neighbor
                nearest_neighbor = alt_nearest_neighbor
                
            tour.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor

        tour.append(tour[0])  # Return to the starting node

        # Update heuristics matrix based on the edges in the tour
        for i in range(num_nodes):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    # Normalize the heuristics matrix
    heuristics_matrix /= num_samples

    return heuristics_matrix
