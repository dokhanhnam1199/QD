import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm employs a simulated annealing approach to iteratively improve a random tour, updating edge frequencies based on accepted solutions.}"""
    n = distance_matrix.shape[0]
    num_iterations = 10000
    initial_temperature = 100
    cooling_rate = 0.99
    
    current_tour = np.random.permutation(n)
    best_tour = current_tour.copy()
    
    def calculate_distance(tour):
        distance = 0
        for i in range(n - 1):
            distance += distance_matrix[tour[i], tour[i+1]]
        distance += distance_matrix[tour[-1], tour[0]]
        return distance
    
    current_distance = calculate_distance(current_tour)
    best_distance = current_distance
    
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    temperature = initial_temperature
    
    for _ in range(num_iterations):
        # Generate a neighbor by swapping two random cities
        i, j = np.random.choice(n, 2, replace=False)
        neighbor_tour = current_tour.copy()
        neighbor_tour[i], neighbor_tour[j] = neighbor_tour[j], neighbor_tour[i]
        neighbor_distance = calculate_distance(neighbor_tour)
        
        # Acceptance probability
        delta = neighbor_distance - current_distance
        if delta < 0 or np.random.rand() < np.exp(-delta / temperature):
            current_tour = neighbor_tour
            current_distance = neighbor_distance
            
            # Update best tour if applicable
            if current_distance < best_distance:
                best_tour = current_tour.copy()
                best_distance = current_distance
                
        #Cooling
        temperature *= cooling_rate
        
        # Update heuristics matrix based on the current tour (regardless of acceptance)
        for i in range(n):
            heuristics_matrix[current_tour[i], current_tour[(i+1) % n]] += 1
            heuristics_matrix[current_tour[(i+1) % n], current_tour[i]] += 1

    heuristics_matrix /= num_iterations
    return heuristics_matrix
