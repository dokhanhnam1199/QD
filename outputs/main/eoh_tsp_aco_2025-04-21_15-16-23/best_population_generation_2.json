{
     "algorithm": "This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs, weighting edges in shorter tours higher.",
     "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm estimates edge desirability for TSP by iteratively constructing tours using a nearest neighbor approach, improving them with 2-opt swaps, and averaging the inclusion frequency of each edge across multiple runs, weighting edges in shorter tours higher.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n    num_trials = 50\n\n    def calculate_tour_length(tour):\n        length = 0\n        for i in range(n):\n            length += distance_matrix[tour[i], tour[(i + 1) % n]]\n        return length\n\n    def two_opt_swap(tour, i, k):\n        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]\n        return new_tour\n\n    def two_opt(tour):\n        best_tour = tour\n        best_length = calculate_tour_length(tour)\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, n - 1):\n                for k in range(i + 1, n):\n                    new_tour = two_opt_swap(best_tour, i, k)\n                    new_length = calculate_tour_length(new_tour)\n                    if new_length < best_length:\n                        best_tour = new_tour\n                        best_length = new_length\n                        improved = True\n        return best_tour, best_length\n\n    def nearest_neighbor_tour(start_node):\n        tour = [start_node]\n        unvisited_nodes = set(range(n))\n        unvisited_nodes.remove(start_node)\n        current_node = start_node\n\n        while unvisited_nodes:\n            nearest_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node, x])\n            tour.append(nearest_node)\n            unvisited_nodes.remove(nearest_node)\n            current_node = nearest_node\n        tour.append(start_node)\n        tour = tour[:-1]\n        return tour\n\n    for _ in range(num_trials):\n        # Generate a tour using nearest neighbor heuristic\n        start_node = np.random.randint(0, n)\n        initial_tour = nearest_neighbor_tour(start_node)\n\n        # Apply 2-opt to improve the tour\n        best_tour, best_length = two_opt(initial_tour)\n\n        # Update the heuristics matrix based on the edges in the improved tour, weighting by tour length\n        weight = 1.0 / best_length\n        for i in range(n):\n            node1 = best_tour[i]\n            node2 = best_tour[(i + 1) % n]\n            heuristics_matrix[node1, node2] += weight\n            heuristics_matrix[node2, node1] += weight\n\n    # Normalize the heuristics matrix\n    total_weight = np.sum(heuristics_matrix)\n    if total_weight > 0:\n        heuristics_matrix /= total_weight\n\n    return heuristics_matrix",
     "objective": 5.71614,
     "other_inf": null
}