{
     "algorithm": "This algorithm constructs a heuristic matrix by simulating ant colony optimization, where ants probabilistically build solutions biased by pheromone trails and distance, and pheromone is updated based on the quality of the solutions found, and then the heuristic matrix is constructed by combining pheromone and distance information.",
     "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm constructs a heuristic matrix by simulating ant colony optimization, where ants probabilistically build solutions biased by pheromone trails and distance, and pheromone is updated based on the quality of the solutions found, and then the heuristic matrix is constructed by combining pheromone and distance information.}\"\"\"\n    n = distance_matrix.shape[0]\n    pheromone = np.ones((n, n))  # Initialize pheromone trails\n    heuristics_matrix = np.zeros((n, n))\n    alpha = 0.8  # Pheromone influence\n    beta = 1.2   # Distance influence\n    rho = 0.2  # Evaporation rate\n    Q = 50   # Pheromone deposit constant\n    num_ants = 40\n    num_iterations = 80\n\n    for iteration in range(num_iterations):\n        all_paths = []\n        all_path_lengths = []\n\n        for ant in range(num_ants):\n            start_node = np.random.randint(n)\n            current_node = start_node\n            unvisited = set(range(n))\n            unvisited.remove(current_node)\n            path = [current_node]\n\n            while unvisited:\n                probabilities = (pheromone[current_node, :]**alpha) * ((1 / (distance_matrix[current_node, :] + 1e-6))**beta)\n                \n                # Mask visited nodes\n                for visited_node in path:\n                    probabilities[visited_node] = 0\n                \n                probabilities = probabilities / np.sum(probabilities) if np.sum(probabilities) > 0 else np.ones(n) / n\n\n                next_node = np.random.choice(n, p=probabilities)\n                path.append(next_node)\n                unvisited.remove(next_node)\n                current_node = next_node\n\n            path.append(start_node)\n            all_paths.append(path)\n\n            path_length = 0\n            for i in range(n):\n                path_length += distance_matrix[path[i], path[(i + 1) % n]]\n            all_path_lengths.append(path_length)\n\n        # Update pheromones\n        pheromone *= (1 - rho)  # Evaporation\n        for ant in range(num_ants):\n            path = all_paths[ant]\n            path_length = all_path_lengths[ant]\n            for i in range(n):\n                pheromone[path[i], path[(i + 1) % n]] += Q / path_length\n                pheromone[path[(i + 1) % n], path[i]] += Q / path_length\n\n    # Construct heuristic matrix based on pheromone levels and distance\n    heuristics_matrix = pheromone * (1 / (distance_matrix + 1e-6))\n    return heuristics_matrix",
     "objective": 5.93176,
     "other_inf": null
}