```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins): # Ensure at least one feasible bin exists.
        # Calculate wasted space if the item is placed in each feasible bin
        wasted_space = bins_remain_cap[feasible_bins] - item

        # Prioritize bins with smaller wasted space.  Use the inverse to make it a priority (higher is better)
        # Add a small constant to avoid division by zero. We scale the wasted space to have reasonable priority values.
        priorities[feasible_bins] = 1.0 / (0.001 + wasted_space)

        # Add a bonus for bins that are nearly full *after* placement. This encourages
        # using up the bins and leaving less unused capacity.  This is scaled.
        near_full_threshold = 0.95 #Bins filled over this ratio after packing get a bonus.
        filled_ratio_after_packing = (bins_remain_cap[feasible_bins]-item) / bins_remain_cap[feasible_bins] + item/ bins_remain_cap[feasible_bins] #Ratio after packing
        bonus_mask = filled_ratio_after_packing >= near_full_threshold
        priorities[feasible_bins][bonus_mask] += 10 #Increase priority by a const if it passes the threshold

        # Slightly prioritise bins with higher remaining capacity before packing for load balancing reasons (unless they are almost full)
        # Only add priority if the bin isn't almost full
        # Scale to be a modest influence
        # The intention is to break ties for the smallest-waste bin strategy.
        nearly_full = bins_remain_cap[feasible_bins] / bins_remain_cap[feasible_bins] +item / bins_remain_cap[feasible_bins] > 0.95
        priorities[feasible_bins][~nearly_full] += 0.1 * bins_remain_cap[feasible_bins][~nearly_full]/np.max(bins_remain_cap) # Scale the original capacity


    return priorities
```
