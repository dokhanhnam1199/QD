```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fit, and remaining capacity with adaptive weights."""

    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste Score
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        # Fit Score (Gaussian-like)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 2)**2))

        # Remaining Capacity Score
        remaining_capacity_score = 1 / (remaining_capacities + 1e-9)
        
        # Item ratio
        item_ratio = item / np.mean(bins_remain_cap[bins_remain_cap>0]) if np.any(bins_remain_cap>0) else 0
        
        # Adaptive Weights
        if item_ratio < 0.3:
            w_waste, w_fit, w_rem_cap = 0.2, 0.7, 0.1
        elif item_ratio > 0.7:
            w_waste, w_fit, w_rem_cap = 0.7, 0.1, 0.2
        else:
            w_waste, w_fit, w_rem_cap = 0.4, 0.4, 0.2
        
        # Combined Score
        combined_score = (
            w_waste * waste_score +
            w_fit * fit_score +
            w_rem_cap * remaining_capacity_score
        )

        priorities[valid_bins] = combined_score

    return priorities
```
