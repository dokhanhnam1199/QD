```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, fit, and remaining capacity considerations with dynamic weighting."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    
    if np.any(valid_bins):
        # Waste Score
        waste = bins_remain_cap[valid_bins] - item
        waste_score = 1 / (waste + 1e-9)

        # Fit Score
        fit_score = np.exp(-(bins_remain_cap[valid_bins] - item)**2 / (2 * (item)**2))

        #Remaining Capacity Score
        remaining_capacity_score = 1 / (bins_remain_cap[valid_bins] + 1e-9)
        
        # Dynamic Weighting (item size relative to bin capacity)
        item_ratio = item / np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 0
        if item_ratio < 0.3:
            w_waste, w_fit, w_rem_cap = 0.2, 0.6, 0.2  # Favor Fit
        elif item_ratio > 0.7:
            w_waste, w_fit, w_rem_cap = 0.6, 0.2, 0.2  # Favor Waste
        else:
            w_waste, w_fit, w_rem_cap = 0.4, 0.4, 0.2  # Balanced

        priorities[valid_bins] = (
            w_waste * waste_score +
            w_fit * fit_score +
            w_rem_cap * remaining_capacity_score
        )
    
    return priorities
```
