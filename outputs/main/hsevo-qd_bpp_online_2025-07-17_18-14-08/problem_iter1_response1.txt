```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Considers both remaining capacity and a "gravitational pull"
    towards bins that are already somewhat full.
    Inspired by gravitational lensing and spacetime curvature -
    items "prefer" to be near existing "mass" (filled bins).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero:
    bins_remain_cap = np.clip(bins_remain_cap, 1e-9, None)

    # 1. Capacity Consideration (Similar to First Fit Decreasing):
    capacity_priority = bins_remain_cap - item  # Higher is better

    # If the item doesn't fit, give very low priority.
    capacity_priority[capacity_priority < 0] = -np.inf

    # 2. "Gravitational" Factor (Encourages filling nearly-full bins):
    # Higher remaining cap means weaker "gravity", so use inverse.
    # Small constant added to avoid division by zero, and to tweak the influence
    # Note, the greater the item, the larger its effect is to "pull" to itself
    gravitational_constant = 0.1
    gravity = item / (bins_remain_cap + gravitational_constant)  # The closer it is to filled, the higher priority
    gravity = np.nan_to_num(gravity, neginf=0)

    # 3. Combine Priorities (Relativistic Addition - loosely inspired):
    # Add some small factor such that a large change to either parameter doesn't change the total by as much.
    #   - We should favor adding to any bin with cap sufficiently large rather than prioritizing the full bins.

    alpha = 0.9 # Tunable constant

    priorities = alpha * capacity_priority + (1-alpha) * gravity

    return priorities
```
