```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Bin packing heuristic with multi-factor scoring and adaptive weights.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Adaptive Weighting based on remaining capacities
        total_capacity = np.sum(bins_remain_cap)
        if total_capacity > 0:
            capacity_ratio = np.sum(remaining_capacities) / total_capacity
        else:
            capacity_ratio = 0.5  # Default ratio

        # If total remaining capacity is low, prioritize fit
        if capacity_ratio < 0.2:
            waste_weight = 0.2
            fit_weight = 0.7
            capacity_weight = 0.1
        # If item is large compared to average bin size, prioritize less waste
        elif item > np.mean(remaining_capacities):
             waste_weight = 0.7
             fit_weight = 0.2
             capacity_weight = 0.1
        else:
            waste_weight = 0.5
            fit_weight = 0.3
            capacity_weight = 0.2

        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization

        priorities[valid_bins] = combined_score

    return priorities
```
