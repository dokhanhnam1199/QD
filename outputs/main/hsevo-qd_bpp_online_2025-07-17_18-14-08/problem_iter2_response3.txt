```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization with bin utilization to prioritize bins."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fits = bins_remain_cap >= item

    # High priority for bins where item fits.
    priorities[fits] = 1.0

    # Waste minimization score. Inverse of waste, scaled.
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    waste_scores = np.where(waste > 0, 1.0 / (waste + 0.0001), 0.0)
    priorities += waste_scores * fits # only apply waste score when item fits

    # Encourage bins to be filled between 50% and 90%
    utilization = (bins_remain_cap - item) / np.max(bins_remain_cap) # Max is bin size since bins_remain_cap <= max
    partially_filled = (utilization > 0.1) & (utilization < 0.5)
    priorities[partially_filled] += 0.3 # Bias towards partially filled

    # Very small penalty for nearly full bins
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.1) #item * 1.1 to give buffer
    priorities[nearly_full] -= 0.1

    return priorities
```
