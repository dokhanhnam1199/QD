```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, gaussian fit and capacity utilization."""
    avoid_zero_division = 1e-7
    gaussian_fit_scale = 1.2

    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + avoid_zero_division)

        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/gaussian_fit_scale)**2))

        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Adaptive weights based on item size
        item_size_factor = min(1.0, item / np.max(bins_remain_cap)) # scale item
        waste_weight = 0.3 + 0.2 * item_size_factor
        fit_weight = 0.4 - 0.2 * item_size_factor
        utilization_weight = 0.3

        combined_score = waste_weight * waste_score + fit_weight * fit_score + utilization_weight * capacity_utilization

        priorities[valid_bins] = combined_score

    return priorities
```
