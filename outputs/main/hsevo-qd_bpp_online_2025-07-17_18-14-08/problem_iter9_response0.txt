```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       A bin-packing heuristic that adapts based on item size and bin availability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]

    # Waste calculation with avoidance of negative values
    waste = np.maximum(0, remaining_capacities - item)

    # Waste score: inverse of waste, with a small constant to avoid division by zero
    waste_score = 1 / (waste + 1e-9)

    # Fit score: Gaussian fit score, penalizing significant deviations from the ideal fit.
    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 3)**2))

    # Capacity utilization score: Prioritize filling bins that are already relatively full.
    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

    # Item size-adaptive weighting: adjust weights based on the item size
    if item > np.mean(bins_remain_cap):  # Large item
        waste_weight = 0.2
        fit_weight = 0.6
        capacity_weight = 0.2
    elif item < np.mean(bins_remain_cap) / 2:  # Small item
        waste_weight = 0.6
        fit_weight = 0.2
        capacity_weight = 0.2
    else:  # Medium item
        waste_weight = 0.4
        fit_weight = 0.4
        capacity_weight = 0.2

    # Combined score with dynamically adjusted weights
    combined_score = (waste_weight * waste_score +
                      fit_weight * fit_score +
                      capacity_weight * capacity_utilization)

    priorities[valid_bins] = combined_score

    return priorities
```
