```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, fit, and capacity utilization with adaptive weighting."""
    avoid_zero_division: float = 1e-7
    gaussian_fit_scale: float = 1.2
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap > 0

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + avoid_zero_division)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/gaussian_fit_scale)**2))
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Adaptive weighting based on item size relative to bin capacity
        item_ratio = item / remaining_capacities
        waste_weight = np.clip(1 - item_ratio, 0.1, 0.8)  # Favor waste when item is small
        fit_weight = np.clip(item_ratio, 0.1, 0.8)        # Favor fit when item is large
        capacity_weight = 0.2                             # Constant capacity utilization

        # Normalize the weights
        total_weight = waste_weight + fit_weight + capacity_weight
        waste_weight /= total_weight
        fit_weight /= total_weight
        capacity_weight /= total_weight

        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization
        priorities[valid_bins] = combined_score

    return priorities
```
