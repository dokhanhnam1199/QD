```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_score_weight: float = 0.4,
                fit_score_weight: float = 0.4, capacity_utilization_weight: float = 0.2,
                gaussian_fit_scale: float = 1.2, avoid_zero_division: float = 1e-7) -> np.ndarray:
    """Combines waste, fit, and capacity utilization with adaptive weighting."""
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + avoid_zero_division)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/gaussian_fit_scale)**2))
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        combined_score = waste_score_weight * waste_score + fit_score_weight * fit_score + capacity_utilization_weight * capacity_utilization
        priorities[valid_bins] = combined_score

    return priorities
```
