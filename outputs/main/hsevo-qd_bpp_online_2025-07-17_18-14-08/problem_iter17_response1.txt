```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining waste, fit, and utilization with item size consideration."""
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        item_size_ratio = item / np.max(bins_remain_cap)

        waste_weight = 0.5 if item_size_ratio < 0.3 else 0.3
        fit_weight = 0.4 if item_size_ratio > 0.5 else 0.6
        capacity_weight = 0.1

        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization

        # Additional tweak: Prioritize bins with capacity slightly larger than item
        perfect_fit_bonus = np.exp(-np.abs(remaining_capacities - item) / (item/5))
        combined_score += 0.1 * perfect_fit_bonus

        priorities[valid_bins] = combined_score

    return priorities
```
