```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       A multifactorial, adaptive approach to bin selection with dynamic adjustment.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap > 0

    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]

    # Waste Score: Prioritize bins with minimal waste
    waste = np.maximum(0, remaining_capacities - item)
    waste_score = 1 / (waste + 1e-9)

    # Fit Score: Gaussian fit
    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 3)**2))

    # Capacity Utilization: Favor bins that are already somewhat full
    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

    # Remaining Capacity Score: Discourage very small remaining capacity
    remaining_capacity_score = np.where(remaining_capacities > item, remaining_capacities / np.max(bins_remain_cap), 0)

    # Item Size Score: adapt based on item size.
    item_size_factor = min(1, item)

    # Dynamic Adjustment: Introduce a global "fullness" metric.
    average_utilization = 1 - np.mean(bins_remain_cap) / np.max(bins_remain_cap)
    fullness_factor = np.clip(average_utilization * 2, 0, 1)  # Scale and clip

    # Adaptive Weighting: Adjust weights based on item size and bin fullness.
    waste_weight = 0.4 * (1 - item_size_factor/2) * (1 - fullness_factor/2) # Reduce waste weight if bins are full.
    fit_weight = 0.4 * (0.5 + item_size_factor/2) * (0.5 + fullness_factor/2)  # Increase fit weight if bins are full.
    capacity_weight = 0.1 * (1 - item_size_factor/2) * (1 - fullness_factor/2) # Reduce capacity weight if bins are full.
    remaining_weight = 0.1 * (0.5 + item_size_factor/2) * (0.5 + fullness_factor/2) # increase remain weight if bins are full

    # Introduce a "desperation" factor when bins are filling up.
    desperation_factor = np.exp(5 * (fullness_factor - 0.9)) if fullness_factor > 0.9 else 0
    fit_weight += desperation_factor * 0.3  # Emphasize fit when desperate
    waste_weight -= desperation_factor * 0.1 # reduce waste when desperate

    # Combined Score
    combined_score = (
        waste_weight * waste_score +
        fit_weight * fit_score +
        capacity_weight * capacity_utilization +
        remaining_weight * remaining_capacity_score
    )

    priorities[valid_bins] = combined_score
    return priorities
```
