```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, capacity utilization, adaptive weighting & gaussian fit score."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Perfect Fit: Highest priority
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6
    priorities[perfect_fit] += 100

    # Best Fit: Reward bins that fit with minimal waste.
    fits = bins_remain_cap >= item
    if np.any(fits):
        waste = bins_remain_cap[fits] - item
        best_fit_idx = np.argmin(waste)
        indices = np.where(fits)[0]
        best_fit_full_idx = indices[best_fit_idx]
        priorities[best_fit_full_idx] += 50

    #Adaptive Weighting, prioritizing bins that utilize capacity well
    valid_bins = bins_remain_cap > 0
    utilization_ratio = item / bins_remain_cap[valid_bins]
    avg_utilization = np.mean(utilization_ratio) if utilization_ratio.size > 0 else 0
    weight_utilization = 10 if avg_utilization > 0.5 else 5 #Increase weight for high avg utilization
    priorities[valid_bins] += utilization_ratio * weight_utilization

    # Gaussian Fit Score
    waste = bins_remain_cap - item
    gaussian_fit = np.exp(-(waste**2) / (2 * (item)**2))
    priorities += gaussian_fit * 30 # Weighting factor

    # Avoid Nearly Full bins, discourages leaving tiny spaces.
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.1)
    priorities[nearly_full] -= 30

    return priorities
```
