```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Advanced priority function for bin packing, incorporating multiple factors
       and adaptive weighting.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]

    # Waste Score: Prioritize bins with minimal waste
    waste = np.maximum(0, remaining_capacities - item)
    waste_score = 1 / (waste + 1e-9)

    # Fit Score: Gaussian-like score preferring a good fit
    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

    # Capacity Utilization: Favor bins that are already somewhat full
    max_cap = np.max(bins_remain_cap)
    capacity_utilization = 1 - (remaining_capacities / max_cap)

    # Remaining Capacity Score: Favor bins with lower *absolute* remaining capacity, within reason.
    remaining_capacity_score = 1 / (remaining_capacities + 1e-9)

    # Adaptive Weighting based on item size relative to bin capacities.
    # Heuristic: if item is large relative to available bins, prioritize reducing waste.
    # If the item is small, focus more on packing densely.

    item_relative_size = item / np.mean(remaining_capacities)

    if item_relative_size > 0.7:  # Item is relatively large
        waste_weight = 0.7
        fit_weight = 0.2
        capacity_weight = 0.05
        remaining_weight = 0.05
    else:  # Item is relatively small
        waste_weight = 0.3
        fit_weight = 0.4
        capacity_weight = 0.2
        remaining_weight = 0.1

    combined_score = (waste_weight * waste_score +
                      fit_weight * fit_score +
                      capacity_weight * capacity_utilization +
                      remaining_weight * remaining_capacity_score)

    priorities[valid_bins] = combined_score
    return priorities
```
