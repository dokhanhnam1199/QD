```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Employs a combination of factors:
         1. Space Utilization: Favor bins where the item fits reasonably well,
            but not perfectly, to encourage filling.
         2. Avoidance of near-empty bins: Penalize bins that will become nearly empty after packing.
         3. Capacity Considerations: Give priority to bins with sufficient, but not excessive, remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 1e-9  # Small constant to avoid division by zero and log of zero

    # 1. Space Utilization:  Calculate how well the item fits (ratio).
    utilization_ratio = item / (bins_remain_cap + epsilon)
    utilization_priority = np.exp(-np.abs(utilization_ratio - 1))  # Gaussian-like peak around ratio=1

    # 2. Avoidance of near-empty bins: Penalize bins becoming nearly empty.
    remaining_after_pack = np.clip(bins_remain_cap - item, 0, np.inf)
    empty_bin_penalty = np.exp(-5 * remaining_after_pack / (bins_remain_cap + epsilon)) # strong penalty if remaining is small relative to original.  Larger coefficient gives stronger penalty.
    # Make sure that utilization_priority is always zero when remaining_after_pack is zero. This ensures there is no inf values and correct behaviour
    empty_bin_penalty[remaining_after_pack <= epsilon] = 0.0


    # 3. Capacity Considerations:  Bins with very little remaining space
    #    or too much remaining space get lower priority.
    capacity_priority = np.sqrt(bins_remain_cap) # Gives preference to bins with some space. Using sqrt rather than linear

    # Combine the factors:
    priorities = utilization_priority * (1 - empty_bin_penalty) * capacity_priority
    priorities[bins_remain_cap < item] = -np.inf  # Impossible bins get negative infinity priority to avoid ever using

    return priorities
```
