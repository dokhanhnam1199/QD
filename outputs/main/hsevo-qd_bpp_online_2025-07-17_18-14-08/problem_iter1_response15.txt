```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a combination of remaining capacity and item size to determine priority.
    Bins with capacity slightly larger than the item are prioritized,
    while bins that are too small or too large receive lower priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Avoid division by zero. Set priority to a very low value if remaining capacity is 0
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[bins_remain_cap == 0] = -np.inf

    # Give higher priority to bins that can fit the item closely
    fit_score = np.where(bins_remain_cap >= item, np.exp(-np.abs(bins_remain_cap - item) / item), -np.inf)

    # Penalize bins with very large remaining capacity
    capacity_penalty = np.where(bins_remain_cap > item, - (bins_remain_cap - item) / np.max(bins_remain_cap), 0)

    priorities = fit_score + capacity_penalty

    return priorities
```
