```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fit score, and capacity utilization with item-adaptive weighting."""

    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Item-Adaptive Weighting
        item_ratio = item / np.max(bins_remain_cap)  # Ratio of item size to max bin capacity
        waste_weight = 0.2 + 0.3 * item_ratio        # Favor waste less for smaller items
        fit_weight = 0.5 - 0.2 * item_ratio          # Favor fit more for smaller items
        capacity_weight = 0.3 - 0.1 * item_ratio     # Adjusted capacity weight

        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization
        priorities[valid_bins] = combined_score

    return priorities
```
