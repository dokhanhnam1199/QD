```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       An adaptive bin packing strategy, dynamically adjusting to item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap > 0

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste Calculation (as before, but with a small adjustment)
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        # Fit Score (Gaussian, focusing on tighter fits)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/4)**2))

        # Capacity Utilization (penalizing nearly-full bins less harshly)
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Adaptive Weighting based on Item Size
        if item <= 0.2:  # Small items: prioritize packing them tightly
            weights = [0.2, 0.6, 0.2]  # Higher fit score, moderate waste & capacity
        elif item <= 0.5:  # Medium items: balance waste and fit
            weights = [0.5, 0.4, 0.1]  # Balance waste minimization and fit
        else:  # Large items: prioritize waste minimization to avoid creating too many bins
            weights = [0.6, 0.2, 0.2]  # Higher waste minimization

        # Combined Score with adaptive weights
        combined_score = (
            weights[0] * waste_score + weights[1] * fit_score + weights[2] * capacity_utilization
        )
        priorities[valid_bins] = combined_score

    return priorities
```
