```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a combination of factors inspired by physical principles
    (though adapted for this computational problem).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A 'gravitational' attraction: Higher priority for bins closer to item size.
    # Use squared difference for a stronger pull when very close
    diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (1e-6 + diff**2)  # 1e-6 avoids division by zero

    # Inverse 'repulsion': lower priority for bins with very little space.
    # Mimicking Pauli Exclusion Principle (sort of). Prevent overfilling attempts.
    small_space_penalty = np.where(bins_remain_cap < item, -np.inf, 0)
    priorities += small_space_penalty

    # Favor bins with more capacity available (but not too much)
    # A larger bin reduces the number of bins in total, improving our goal
    capacity_bonus = np.clip(bins_remain_cap - item, 0, item * 2) # Cap bonus
    priorities += capacity_bonus * 0.1 # Tune bonus effect, otherwise domination.

    return priorities
```
