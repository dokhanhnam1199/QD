```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit logic, utilization, and waste minimization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Perfect Fit: Highest priority
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6
    priorities[perfect_fit] += 100

    # 2. Best Fit with Waste Minimization:
    fits = bins_remain_cap >= item
    if np.any(fits):
        waste = bins_remain_cap[fits] - item
        best_fit_idx = np.argmin(waste)
        indices = np.where(fits)[0]
        best_fit_full_idx = indices[best_fit_idx]
        priorities[best_fit_full_idx] += 50

        #Adaptive weighting based on waste. Smaller waste higher score
        waste_score = np.exp(-waste / (item + 1e-9)) #avoid division by zero
        priorities[fits] += 20 * waste_score


    # 3. Utilization Ratio:
    valid_bins = bins_remain_cap > 0
    utilization_ratio = item / bins_remain_cap[valid_bins]
    priorities[valid_bins] += utilization_ratio * 10

    #4. Heavily Penalize Nearly Full Bins
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.1)
    priorities[nearly_full] -= 40

    return priorities
```
