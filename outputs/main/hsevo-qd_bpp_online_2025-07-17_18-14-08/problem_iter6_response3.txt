```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Adaptive strategy based on item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        
        # Waste calculation
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)
        
        # Fit score (Gaussian)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))
        
        # Capacity utilization
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Item size based adaptive weighting
        if item > np.mean(remaining_capacities): # Large item strategy
            combined_score = 0.2 * waste_score + 0.7 * fit_score + 0.1 * capacity_utilization # Emphasis on perfect fit
        elif item < np.mean(remaining_capacities) / 2: # Small item strategy
            combined_score = 0.7 * waste_score + 0.1 * fit_score + 0.2 * capacity_utilization # Emphasis on minimizing waste
        else: # Medium item
            combined_score = 0.6 * waste_score + 0.3 * fit_score + 0.1 * capacity_utilization # Balanced strategy

        priorities[valid_bins] = combined_score

    return priorities
```
