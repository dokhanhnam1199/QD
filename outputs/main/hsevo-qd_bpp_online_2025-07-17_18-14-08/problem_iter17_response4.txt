```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste and fit scores, with adaptive weight based on item size."""

    valid_bins = bins_remain_cap > item
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        waste = remaining_capacities - item
        waste_score = 1 / (waste + 1e-9)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        # Adaptive Weighting based on item size relative to max bin capacity
        max_cap = np.max(bins_remain_cap)
        item_ratio = item / max_cap
        fit_weight = min(0.9, item_ratio * 0.9)  # More weight to fit when item is large
        waste_weight = 1 - fit_weight

        combined_score = waste_weight * waste_score + fit_weight * fit_score
        priorities[valid_bins] = combined_score

    return priorities
```
