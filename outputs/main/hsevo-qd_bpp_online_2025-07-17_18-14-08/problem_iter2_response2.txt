```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, waste, and relative size."""

    priorities = np.zeros_like(bins_remain_cap)
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        remaining_after_fit = bins_remain_cap[fit_mask] - item
        # Encourage filling bins, penalize waste.
        fill_ratio = (1 - (remaining_after_fit / bins_remain_cap[fit_mask]))**2
        priorities[fit_mask] = fill_ratio

        # Penalize bins that are too much larger than the item.
        size_diff = np.abs(bins_remain_cap[fit_mask] - item)
        priorities[fit_mask] /= (1 + size_diff)

        # Additional penalty for near full bins to avoid overfilling
        near_full_mask = bins_remain_cap < 1.1 * item  # slightly above item size
        priorities[near_full_mask] *= 0.9
    else:
         # if no bin can fit it, assign a low priority
        priorities[:] = -1

    return priorities
```
