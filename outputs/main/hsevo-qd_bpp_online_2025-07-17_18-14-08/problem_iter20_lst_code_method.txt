{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n       Tesla's embodiment of electrical elegance: A symphony of potential.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid zero capacity bins and division by zero.\n    valid_bins = bins_remain_cap > 0\n    priorities = np.full(bins_remain_cap.shape, -np.inf)  # Default to negative infinity.\n\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n\n        # Calculate the waste if we place the item in each bin. A lower waste\n        # suggests a better fit. Avoid negative waste using max(0).\n        waste = np.maximum(0, remaining_capacities - item)\n\n        # Score based on the inverse of the waste. To give higher preference to minimal waste\n        waste_score = 1 / (waste + 1e-9) # Adding a small value to avoid division by zero\n        \n        # Fit Score\n        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2)) # Gaussian Fit score favoring item to fit nicely in the bin.\n\n        # Preference for bins that can accommodate the item. Also incorporate remaining capacity\n        # to prioritize using more full bins first.\n        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n        # Combine the scoring components. Give weights to components\n        combined_score = 0.6 * waste_score + 0.3 * fit_score + 0.1 * capacity_utilization\n\n        priorities[valid_bins] = combined_score\n\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, perfect-fit, and waste minimization strategies.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Perfect Fit: Highest priority\n    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6\n    priorities[perfect_fit] += 100\n\n    # 2. Best Fit: Reward bins that fit with minimal waste.\n    fits = bins_remain_cap >= item\n    if np.any(fits):\n        waste = bins_remain_cap[fits] - item\n        best_fit_idx = np.argmin(waste)\n        indices = np.where(fits)[0]\n        best_fit_full_idx = indices[best_fit_idx]\n        priorities[best_fit_full_idx] += 50\n\n    # 3. Utilization Ratio:  Prioritize bins that are well-utilized after placing item.\n    valid_bins = bins_remain_cap > 0\n    utilization_ratio = item / bins_remain_cap[valid_bins]\n    priorities[valid_bins] += utilization_ratio * 10\n\n    # 4. Waste Minimization with Exponential Decay: Penalize larger waste values heavily.\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf  # Ignore bins that don't fit\n    priorities -= np.exp(-(waste**2) / (2 * (item / 5)**2)) * 20\n\n    # 5. Avoid Nearly Full: Discourage leaving tiny spaces.\n    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.1)\n    priorities[nearly_full] -= 30\n\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    A refined heuristic for bin packing, leveraging adaptive weighting.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    valid_bins = bins_remain_cap > 0\n    priorities = np.full(bins_remain_cap.shape, -np.inf)\n\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n\n        waste = np.maximum(0, remaining_capacities - item)\n        waste_score = 1 / (waste + 1e-9)\n\n        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))\n\n        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n        # Adaptive Weighting based on item size and remaining capacities\n        item_size_ratio = item / np.max(bins_remain_cap) #Relative to largest bin\n        \n        #Weight adjustments\n        waste_weight = 0.5 if item_size_ratio < 0.3 else 0.3 #Smaller items prioritize waste\n        fit_weight = 0.4 if item_size_ratio > 0.5 else 0.6 #Larger items prioritize fit\n        capacity_weight = 0.1\n\n        # Combined Score\n        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization\n\n        priorities[valid_bins] = combined_score\n\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n       Adaptive weights based on bin utilization and item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    valid_bins = bins_remain_cap > 0\n    priorities = np.full(bins_remain_cap.shape, -np.inf)\n\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n        \n        waste = np.maximum(0, remaining_capacities - item)\n        waste_score = 1 / (waste + 1e-9)\n\n        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))\n\n        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n        # Adaptive weights based on item size and bin utilization.\n        item_size_ratio = item / np.max(bins_remain_cap)  # Ratio of item size to max bin capacity\n        bin_utilization_ratio = 1 - (remaining_capacities / np.max(bins_remain_cap)) # Current bin utilization\n\n        # Adjust weights based on item size.\n        if item_size_ratio > 0.5:\n            # Large item: Prioritize waste and fit to avoid fragmentation.\n            waste_weight = 0.7\n            fit_weight = 0.3\n            capacity_weight = 0.0\n        elif item_size_ratio > 0.2:\n            # Medium item: Balance waste, fit, and utilization.\n            waste_weight = 0.5\n            fit_weight = 0.3\n            capacity_weight = 0.2\n        else:\n            # Small item: Prioritize utilization to fill bins.\n            waste_weight = 0.3\n            fit_weight = 0.3\n            capacity_weight = 0.4\n            \n        # Adaptive weight adjustment based on bin utilization\n        if np.any(bin_utilization_ratio > 0.8): # If any bin is more than 80% full, prioritize fitting.\n            waste_weight += 0.1\n            fit_weight += 0.1\n            capacity_weight -= 0.2\n            \n        waste_weight = np.clip(waste_weight, 0, 1) #Making sure weights are between 0 and 1\n        fit_weight = np.clip(fit_weight, 0, 1)\n        capacity_weight = np.clip(capacity_weight, 0, 1)\n\n        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization\n\n        priorities[valid_bins] = combined_score\n\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n       Adaptive weights based on bin utilization and item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    valid_bins = bins_remain_cap > 0\n    priorities = np.full(bins_remain_cap.shape, -np.inf)\n\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n        \n        waste = np.maximum(0, remaining_capacities - item)\n        waste_score = 1 / (waste + 1e-9)\n\n        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))\n\n        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n        # Adaptive weights based on item size and bin utilization.\n        item_size_ratio = item / np.max(bins_remain_cap)  # Ratio of item size to max bin capacity\n        bin_utilization_ratio = 1 - (remaining_capacities / np.max(bins_remain_cap)) # Current bin utilization\n\n        # Adjust weights based on item size.\n        if item_size_ratio > 0.5:\n            # Large item: Prioritize waste and fit to avoid fragmentation.\n            waste_weight = 0.7\n            fit_weight = 0.3\n            capacity_weight = 0.0\n        elif item_size_ratio > 0.2:\n            # Medium item: Balance waste, fit, and utilization.\n            waste_weight = 0.5\n            fit_weight = 0.3\n            capacity_weight = 0.2\n        else:\n            # Small item: Prioritize utilization to fill bins.\n            waste_weight = 0.3\n            fit_weight = 0.3\n            capacity_weight = 0.4\n            \n        # Adaptive weight adjustment based on bin utilization\n        if np.any(bin_utilization_ratio > 0.8): # If any bin is more than 80% full, prioritize fitting.\n            waste_weight += 0.1\n            fit_weight += 0.1\n            capacity_weight -= 0.2\n            \n        waste_weight = np.clip(waste_weight, 0, 1) #Making sure weights are between 0 and 1\n        fit_weight = np.clip(fit_weight, 0, 1)\n        capacity_weight = np.clip(capacity_weight, 0, 1)\n\n        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization\n\n        priorities[valid_bins] = combined_score\n\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n       An improved version incorporating adaptive weighting and contextual awareness.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    valid_bins = bins_remain_cap >= item\n    priorities = np.full(bins_remain_cap.shape, -np.inf)\n\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n\n        # Waste Score: Prioritize bins with minimal waste after placement.\n        waste = remaining_capacities - item\n        waste_score = 1 / (waste + 1e-9)\n\n        # Fit Score: Gaussian distribution centered around ideal remaining capacity.\n        fit_score = np.exp(-(remaining_capacities - 2 * item/3)**2 / (2 * (item/3)**2))\n\n        # Capacity Utilization: Encourage filling bins to a higher percentage.\n        capacity_utilization = remaining_capacities / np.max(bins_remain_cap)\n\n        # Number of Possible items that can fit in each bin\n        possible_items_fit = np.floor(remaining_capacities/item)\n\n        # Adaptive Weighting based on Item Size and Bin Capacities:\n        item_ratio = item / np.max(bins_remain_cap) # Ratio of the item size to the maximum bin capacity.\n\n        # Adjust weights based on item size relative to bin sizes.\n        waste_weight = 0.5 if item_ratio < 0.3 else 0.3\n        fit_weight = 0.3 if item_ratio < 0.3 else 0.5\n        capacity_weight = 0.2\n\n        # Combined Score with Adaptive Weights:\n        combined_score = (waste_weight * waste_score +\n                          fit_weight * fit_score +\n                          capacity_weight * (1 - capacity_utilization))\n\n        priorities[valid_bins] = combined_score\n\n    # If no bin can accommodate the item, consider bins with enough space to use later.\n    else:\n        valid_bins = bins_remain_cap > 0\n        if np.any(valid_bins):\n          remaining_capacities = bins_remain_cap[valid_bins]\n\n          # Prioritize bins with larger remaining capacity even if they cannot fit the current item\n          capacity_score = remaining_capacities / np.max(bins_remain_cap)\n          priorities[valid_bins] = capacity_score / 10  # Lower priority since the item doesn't fit\n\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, waste_score_weight: float = 0.41627733379514453,\n                fit_score_weight: float = 0.5933483607555398, capacity_utilization_weight: float = 0.9062105720810719,\n                gaussian_fit_scale: float = 1.19900708155265,  avoid_zero_division: float = 6.252288452065697e-07) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n       Tesla's embodiment of electrical elegance: A symphony of potential.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        waste_score_weight: Weight for waste score in combined score.\n        fit_score_weight: Weight for fit score in combined score.\n        capacity_utilization_weight: Weight for capacity utilization in combined score.\n        gaussian_fit_scale: Scale factor for Gaussian fit score calculation.\n        avoid_zero_division: Small value to avoid division by zero.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid zero capacity bins and division by zero.\n    valid_bins = bins_remain_cap > 0\n    priorities = np.full(bins_remain_cap.shape, -np.inf)  # Default to negative infinity.\n\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n\n        # Calculate the waste if we place the item in each bin. A lower waste\n        # suggests a better fit. Avoid negative waste using max(0).\n        waste = np.maximum(0, remaining_capacities - item)\n\n        # Score based on the inverse of the waste. To give higher preference to minimal waste\n        waste_score = 1 / (waste + avoid_zero_division) # Adding a small value to avoid division by zero\n        \n        # Fit Score\n        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/gaussian_fit_scale)**2)) # Gaussian Fit score favoring item to fit nicely in the bin.\n\n        # Preference for bins that can accommodate the item. Also incorporate remaining capacity\n        # to prioritize using more full bins first.\n        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n        # Combine the scoring components. Give weights to components\n        combined_score = waste_score_weight * waste_score + fit_score_weight * fit_score + capacity_utilization_weight * capacity_utilization\n\n        priorities[valid_bins] = combined_score\n\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, perfect-fit, and waste minimization strategies.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Perfect Fit: Highest priority\n    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6\n    priorities[perfect_fit] += 100\n\n    # 2. Best Fit: Reward bins that fit with minimal waste.\n    fits = bins_remain_cap >= item\n    if np.any(fits):\n        waste = bins_remain_cap[fits] - item\n        best_fit_idx = np.argmin(waste)\n        indices = np.where(fits)[0]\n        best_fit_full_idx = indices[best_fit_idx]\n        priorities[best_fit_full_idx] += 50\n\n    # 3. Utilization Ratio:  Prioritize bins that are well-utilized after placing item.\n    valid_bins = bins_remain_cap > 0\n    utilization_ratio = item / bins_remain_cap[valid_bins]\n    priorities[valid_bins] += utilization_ratio * 10\n\n    # 4. Waste Minimization with Exponential Decay: Penalize larger waste values heavily.\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf  # Ignore bins that don't fit\n    priorities -= np.exp(-(waste**2) / (2 * (item / 5)**2)) * 20\n\n    # 5. Avoid Nearly Full: Discourage leaving tiny spaces.\n    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.1)\n    priorities[nearly_full] -= 30\n\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    A refined heuristic for bin packing, leveraging adaptive weighting.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    valid_bins = bins_remain_cap > 0\n    priorities = np.full(bins_remain_cap.shape, -np.inf)\n\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n\n        waste = np.maximum(0, remaining_capacities - item)\n        waste_score = 1 / (waste + 1e-9)\n\n        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))\n\n        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n        # Adaptive Weighting based on item size and remaining capacities\n        item_size_ratio = item / np.max(bins_remain_cap) #Relative to largest bin\n        \n        #Weight adjustments\n        waste_weight = 0.5 if item_size_ratio < 0.3 else 0.3 #Smaller items prioritize waste\n        fit_weight = 0.4 if item_size_ratio > 0.5 else 0.6 #Larger items prioritize fit\n        capacity_weight = 0.1\n\n        # Combined Score\n        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization\n\n        priorities[valid_bins] = combined_score\n\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, waste minimization, and adaptive weighting.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Perfect Fit: Highest priority\n    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6\n    priorities[perfect_fit] += 100\n\n    # Best Fit: Reward bins that fit with minimal waste.\n    fits = bins_remain_cap >= item\n    if np.any(fits):\n        waste = bins_remain_cap[fits] - item\n        best_fit_idx = np.argmin(waste)\n        indices = np.where(fits)[0]\n        best_fit_full_idx = indices[best_fit_idx]\n        priorities[best_fit_full_idx] += 50\n\n    #Adaptive Weighting, prioritizing bins that utilize capacity well\n    valid_bins = bins_remain_cap > 0\n    utilization_ratio = item / bins_remain_cap[valid_bins]\n    avg_utilization = np.mean(utilization_ratio) if utilization_ratio.size > 0 else 0\n    weight_utilization = 10 if avg_utilization > 0.5 else 5 #Increase weight for high avg utilization\n    priorities[valid_bins] += utilization_ratio * weight_utilization\n\n    # Penalize larger waste exponentially. Gaussian fit score\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    priorities -= np.exp(-(waste**2) / (2 * (item / 5)**2)) * 20\n\n    # Avoid Nearly Full bins, discourages leaving tiny spaces.\n    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.1)\n    priorities[nearly_full] -= 30\n    \n    #Waste Score: Adaptive Weighting, combines best-fit and waste minimization.\n    waste_score = np.zeros_like(bins_remain_cap, dtype=float)\n    fits = bins_remain_cap >= item\n    if np.any(fits):\n        waste = bins_remain_cap[fits] - item\n        waste_score[fits] = np.exp(-waste / (item + 1e-9)) #Adaptive scaling\n        priorities += waste_score * 10 # Combine with existing priorities\n\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}