```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Optimized for performance and adaptability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap > item  # Only consider bins that can fit the item

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste Score: Prioritize bins with minimal waste after placing the item
        waste = remaining_capacities - item
        waste_score = 1 / (waste + 1e-9)  # Invert waste, add epsilon to avoid division by zero

        # Fit Score: Gaussian-like score, higher if item fits nicely (centered around zero waste)
        fit_score = np.exp(-(waste**2) / (2 * (item / 3)**2)) # Gaussian Fit score favoring item to fit nicely in the bin.


        # Capacity Utilization Score: Favor bins that are already relatively full.
        capacity_utilization = (bins_remain_cap[valid_bins].max() - remaining_capacities) / bins_remain_cap[valid_bins].max()
        capacity_utilization = np.clip(capacity_utilization, 0, 1)

        # Adaptive Weighting: Adjust weights based on item size and bin capacities.
        item_ratio = item / bins_remain_cap[valid_bins].mean() if bins_remain_cap[valid_bins].mean() > 0 else 0.5 # Ratio to average bin size
        waste_weight = 0.5 #Base Weight
        fit_weight = 0.3  #Base Weight
        capacity_weight = 0.2  #Base Weight

        # Dynamic Weight Adjustment
        if item_ratio > 0.7:
            # Large item: Prioritize tight fits to reduce fragmentation
            waste_weight += 0.2
            capacity_weight -= 0.2
        elif item_ratio < 0.3:
            # Small item: Prioritize bin utilization
            capacity_weight += 0.2
            waste_weight -= 0.2

        waste_weight = np.clip(waste_weight, 0.1, 0.9) # Avoid weights becoming zero or negative
        fit_weight = np.clip(fit_weight, 0.1, 0.9) # Avoid weights becoming zero or negative
        capacity_weight = np.clip(capacity_weight, 0.1, 0.9) # Avoid weights becoming zero or negative

        # Combined Score with Adaptive Weights
        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization

        priorities[valid_bins] = combined_score

    return priorities
```
