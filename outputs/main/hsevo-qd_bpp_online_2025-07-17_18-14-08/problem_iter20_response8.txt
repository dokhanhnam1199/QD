```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fit score, and bin utilization with item-size aware weighting."""
    valid_bins = bins_remain_cap > item
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        
        # Waste Minimization
        waste = remaining_capacities - item
        waste_score = 1 / (waste + 1e-9)

        # Fit Score (Gaussian)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        # Capacity Utilization
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Adaptive Weighting
        item_size_ratio = item / np.max(bins_remain_cap)

        waste_weight = 0.5 if item_size_ratio < 0.3 else 0.3
        fit_weight = 0.4 if item_size_ratio > 0.5 else 0.6
        capacity_weight = 0.1

        # Combined Score
        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization
        
        priorities[valid_bins] = combined_score

    return priorities
```
