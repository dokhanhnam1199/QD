```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Utilizes a combination of factors including capacity, waste minimization,
    and a slight preference for partially filled bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priorities with a base score based on whether the item fits.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fits = bins_remain_cap >= item
    priorities[fits] = 1.0  # Bins where the item fits get a base priority.

    # Adjust priority based on waste minimization.  Smaller waste is better.
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Effectively ignore bins where the item doesn't fit

    # Scale the inverse of the waste to contribute to the priority.  Avoid division by zero.
    waste_scores = np.where(waste > 0, 1.0 / (waste + 0.0001), 0.0) #Small constant to avoid division by zero.

    #Add scaled waste score.
    priorities += waste_scores* fits #only if it fits


    # Encourage filling bins that already have some items (but aren't full), subtly
    # to avoid prematurely closing bins, by rewarding a specific range of capacity usage
    partially_filled = (bins_remain_cap > item) & (bins_remain_cap < np.max(bins_remain_cap))
    priorities[partially_filled] += 0.5 #Adds a moderate bias for partially filled bins.

    return priorities
```
