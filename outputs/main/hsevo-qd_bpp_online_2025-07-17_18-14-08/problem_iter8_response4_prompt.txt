{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n       Tesla's embodiment of electrical elegance: A symphony of potential.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid zero capacity bins and division by zero.\n    valid_bins = bins_remain_cap > 0\n    priorities = np.full(bins_remain_cap.shape, -np.inf)  # Default to negative infinity.\n\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n\n        # Calculate the waste if we place the item in each bin. A lower waste\n        # suggests a better fit. Avoid negative waste using max(0).\n        waste = np.maximum(0, remaining_capacities - item)\n\n        # Score based on the inverse of the waste. To give higher preference to minimal waste\n        waste_score = 1 / (waste + 1e-9) # Adding a small value to avoid division by zero\n        \n        # Fit Score\n        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2)) # Gaussian Fit score favoring item to fit nicely in the bin.\n\n        # Preference for bins that can accommodate the item. Also incorporate remaining capacity\n        # to prioritize using more full bins first.\n        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n        # Combine the scoring components. Give weights to components\n        combined_score = 0.6 * waste_score + 0.3 * fit_score + 0.1 * capacity_utilization\n\n        priorities[valid_bins] = combined_score\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a combination of waste score, fit score, and capacity utilization, while the worst simply uses the negative log of the ratio of item size to remaining bin capacity. (2nd best) vs (second worst) shows that the 2nd best uses a rule-based approach with hardcoded priorities for perfect fit, best fit, and penalizes nearly full bins in contrast to the ratio based strategy of the second worst. Comparing (1st) vs (2nd), we see the top heuristic uses a combined score with weighted components for waste, fit, and utilization while the second uses discrete rules and prioritized perfect fit. (3rd) vs (4th) is not very insightful because they are the same. Comparing (second worst) vs (worst), we see that the only difference is the import statements at the top. Overall: the better heuristics use more sophisticated scoring mechanisms that take into account multiple factors such as waste, fit, and utilization, often combining them with weighted averages or rule-based priorities. Worse heuristics rely on simplistic ratios. Introduction of adaptive weighting and gaussian fit scaling in some cases makes performance better.\n- \nOkay, let's refine \"Current Self-Reflection\" to make it more actionable for designing better heuristics, keeping in mind what to avoid from the \"Ineffective Self-Reflection\".\n\nHere's a revised approach:\n\n*   **Keywords:** Adaptive strategies, multi-objective optimization, dynamic weighting, performance feedback.\n*   **Advice:** Design heuristics that dynamically adjust their behavior based on real-time performance metrics and problem characteristics. Focus on identifying key features of the problem instance that influence heuristic effectiveness.\n*   **Avoid:** Predefined static weights or bonuses/penalties without data-driven justification. Vague calls for \"balance\" without specifying how to achieve it.\n*   **Explanation:** Instead of hand-tuning, aim for self-tuning heuristics. Collect data on heuristic performance during execution and use that data to refine parameters (e.g., using reinforcement learning or online optimization).\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}