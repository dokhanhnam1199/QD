```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. First-Fit Decreasing Heuristic Inspired:  Prioritize bins that can fit the item with least wasted space.
    #    This reduces fragmentation.
    potential_waste = bins_remain_cap - item
    fit_mask = potential_waste >= 0
    
    if np.any(fit_mask):
        priorities[fit_mask] += 1.0 / (potential_waste[fit_mask] + 1e-9) # avoid div by zero
        
    # 2. Encourage re-use: Prioritize bins that are already somewhat full, to fill them up completely.
    #   This reduces the number of bins opened.  Sigmoid-like behavior to boost priority for near-full bins.
    fill_ratio = (bins_remain_cap - item) / bins_remain_cap if np.any(bins_remain_cap >0) else 0
    fill_ratio = np.clip(fill_ratio, 0, 1)
    
    priorities[fit_mask] += (1 / (1 + np.exp(-10 * (1 - fill_ratio[fit_mask])))) *0.5  # scale it down, exp can explode

    # 3. Penalty for bins that are too empty for this item
    empty_mask = potential_waste < 0
    priorities[empty_mask] -= 0.1 # Small penalty

    return priorities
```
