```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       A multifactorial, adaptive strategy for bin packing optimization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap > 0
    
    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]
    
    # Waste calculation, avoid negative waste
    waste = np.maximum(0, remaining_capacities - item)
    
    # Waste score (inverse of waste, avoid division by zero)
    waste_score = 1 / (waste + 1e-9)
    
    # Fit score (Gaussian-like, favoring snug fits)
    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))
    
    # Capacity utilization score
    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0
    
    # Remaining capacity score (prioritize bins that are close to full, but can still fit the item)
    remaining_capacity_score = 1 - (remaining_capacities / np.max(bins_remain_cap))

    # Adaptive Weighting
    # Adjust weights based on item size relative to bin sizes.
    item_ratio = item / np.mean(remaining_capacities) if np.mean(remaining_capacities) > 0 else 0.0
    
    if item_ratio > 1:  # Large item: focus on waste and capacity.
        w_waste = 0.7
        w_fit = 0.1
        w_capacity = 0.2
        w_remaining = 0.0
    elif item_ratio > 0.5: # Medium item: balance waste, fit, and capacity.
        w_waste = 0.5
        w_fit = 0.3
        w_capacity = 0.1
        w_remaining = 0.1
    else:  # Small item: focus on fit and remaining capacity.
        w_waste = 0.2
        w_fit = 0.4
        w_capacity = 0.1
        w_remaining = 0.3

    # Combined score with adaptive weights.
    combined_score = (w_waste * waste_score +
                      w_fit * fit_score +
                      w_capacity * capacity_utilization +
                      w_remaining * remaining_capacity_score)

    priorities[valid_bins] = combined_score

    return priorities
```
