{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    A refined heuristic for bin packing, leveraging adaptive weighting.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    valid_bins = bins_remain_cap > 0\n    priorities = np.full(bins_remain_cap.shape, -np.inf)\n\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n\n        waste = np.maximum(0, remaining_capacities - item)\n        waste_score = 1 / (waste + 1e-9)\n\n        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))\n\n        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n        # Adaptive Weighting based on item size and remaining capacities\n        item_size_ratio = item / np.max(bins_remain_cap) #Relative to largest bin\n        \n        #Weight adjustments\n        waste_weight = 0.5 if item_size_ratio < 0.3 else 0.3 #Smaller items prioritize waste\n        fit_weight = 0.4 if item_size_ratio > 0.5 else 0.6 #Larger items prioritize fit\n        capacity_weight = 0.1\n\n        # Combined Score\n        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization\n\n        priorities[valid_bins] = combined_score\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a combination of waste, fit and capacity utilization with carefully chosen weights, while the worst uses only the log ratio of item size to bin capacity, lacking nuanced considerations. Comparing (2nd best) vs (second worst), we see the second best uses perfect fit, best fit, utilization ratio, waste minimization and avoid nearly full bin; the second worst uses the log ratio of item size to bin capacity. Comparing (1st) vs (2nd), we see that the best heuristic uses a gaussian fit score while the second best uses perfect fit score. Comparing (3rd) vs (4th), we see the 3rd and 4th is quite similar, but the 4th has adaptive weights based on item size and bin utilization while the 3rd one only utilizes item size for adaptive weighting. Comparing (second worst) vs (worst), we see both the same function, and they are the most simple functions. Overall: The better heuristics consider multiple factors (waste, fit, utilization) and use adaptive weighting based on item size and/or bin utilization to achieve better packing, while the worst heuristics use only a single, simple metric, often neglecting important considerations like fragmentation or bin utilization.\n- \nOkay, let's redefine \"Current Self-Reflection\" for designing better heuristics, steering clear of the pitfalls of \"Ineffective Self-Reflection.\"\n\nHere's the breakdown:\n\n*   **Keywords:** Multifactorial, Adaptive, Context-aware, Refinement.\n*   **Advice:** Integrate multiple, relevant factors into a combined evaluation using adaptive strategies.\n*   **Avoid:** Over-reliance on fixed weights, simplistic metrics, or singular strategies.\n*   **Explanation:** Move beyond static, one-size-fits-all approaches. Design heuristics that dynamically adjust based on specific problem characteristics, promoting nuanced decision-making and improved results through constant refinement.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}