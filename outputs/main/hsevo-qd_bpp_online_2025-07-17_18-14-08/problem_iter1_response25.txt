```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Considers remaining capacity and avoids nearly-full bins if possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give very low priority to bins that cannot fit the item
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf
    
    # Give higher priority to bins that are close to being full after adding the item,
    # but avoid extremely tight fits
    
    feasible = ~infeasible
    
    if np.any(feasible):
        fill_ratios = item / bins_remain_cap[feasible]
        
        # Scale to give bins that are filled the most a higher value but less than one that can not fit.
        priorities[feasible] = 1.0 / (1.0 + np.abs(1 - fill_ratios))
        
        #Adjust priorities based on remaining space after adding the item
        remaining_space = bins_remain_cap[feasible] - item
        
        # AVOID SMALL REMAINING SPACE
        # Penalize bins that would have a very small remaining capacity after placing the item.
        small_space_penalty = np.exp(-remaining_space) # exponentially decaying penalty
        priorities[feasible] *= small_space_penalty

        # If all bins that can fit have very low score, boost bin the lowest fill_ratio for the sake of progress
        if np.all(priorities[feasible] < 0.01):
           fill_ratios = item / bins_remain_cap[feasible]
           idx_min = np.argmin(fill_ratios) # Pick minimum remaining
           priorities[feasible][idx_min] = 0.1

    return priorities
```
