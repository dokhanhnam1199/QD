```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste minimization, and avoids nearly full bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Impossible to fit
    priorities[bins_remain_cap < item] = -np.inf
    
    # Base priority from remaining capacity
    priorities[bins_remain_cap >= item] = bins_remain_cap[bins_remain_cap >= item]

    # Best-fit inspired: prioritize bins that are a close fit
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += (item / bins_remain_cap[fit_mask])
    
    # Waste minimization with exponential decay
    waste = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += np.exp(-waste / item)
    
    # Penalize bins that become nearly full
    nearly_full_mask = (bins_remain_cap >= item) & ((bins_remain_cap - item) < 0.2)
    priorities[nearly_full_mask] -= 5  # A more significant penalty

    return priorities
```
