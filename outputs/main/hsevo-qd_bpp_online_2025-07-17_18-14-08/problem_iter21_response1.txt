```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Orchestrating space: Where every item finds its perfect place.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap > 0
    
    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]
    
    # Waste calculation with handling of perfect fits
    waste = remaining_capacities - item
    perfect_fit_mask = np.isclose(waste, 0)
    waste = np.maximum(0, waste)
    
    # Waste score, adjusted for perfect fits
    waste_score = 1 / (waste + 1e-9)
    waste_score[perfect_fit_mask] = 1e9  # Significantly boost perfect fits

    # Fit Score with dynamic std dev
    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))
    
    # Capacity Utilization, normalized
    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))
    
    # Remaining Capacity Score - Prioritize bins with smaller remaining capacity
    remaining_capacity_score = 1 / (remaining_capacities + 1e-9)
    
    # Item Size consideration: Favor bins that fit the item well relative to their size.
    relative_item_size = item / remaining_capacities
    item_size_score = np.exp(-(relative_item_size - 0.7)**2 / (2 * (0.3)**2)) # Peaks around 70% fill
    
    # Adaptive Weighting based on item size and bin availability
    item_size_factor = min(1, item / np.mean(bins_remain_cap[bins_remain_cap > 0])) # Scale item size relative to average bin size

    w_waste = 0.4 * (1 - item_size_factor) + 0.2  # Smaller items, more emphasis on waste
    w_fit = 0.3 * item_size_factor + 0.1  # Larger items, more emphasis on fit
    w_capacity = 0.1 * (1 - item_size_factor) # Smaller items, capacity matters less?
    w_remaining = 0.1 * item_size_factor # larger items remaining capacity matters
    w_item_size = 0.1
    

    combined_score = (w_waste * waste_score +
                      w_fit * fit_score +
                      w_capacity * capacity_utilization +
                      w_remaining * remaining_capacity_score +
                      w_item_size * item_size_score)

    priorities[valid_bins] = combined_score
    
    return priorities
```
