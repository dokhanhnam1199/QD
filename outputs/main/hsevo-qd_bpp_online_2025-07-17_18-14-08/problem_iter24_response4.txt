```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       A multifactorial, adaptive approach to bin selection, enhanced with bin diversity and capacity-aware adjustments.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap > 0

    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]

    # Waste Score: Prioritize bins with minimal waste
    waste = np.maximum(0, remaining_capacities - item)
    waste_score = 1 / (waste + 1e-9)

    # Fit Score: Gaussian fit
    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 3)**2))

    # Capacity Utilization: Favor bins that are already somewhat full
    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

    # Remaining Capacity Score: Discourage very small remaining capacity, but encourage near-full bins when the item is small
    remaining_capacity_score = np.where(remaining_capacities > item, remaining_capacities / np.max(bins_remain_cap), 0)

    # Bin Diversity Score: Encourage filling different bins for better overall spread.
    bin_diversity_score = np.exp(-np.abs(remaining_capacities - np.mean(remaining_capacities)) / np.std(remaining_capacities) if np.std(remaining_capacities) > 0 else 0)

    # Capacity-Aware Adjustments: Modulate based on overall bin capacity distribution
    capacity_mean = np.mean(bins_remain_cap[bins_remain_cap > 0])
    capacity_std = np.std(bins_remain_cap[bins_remain_cap > 0]) if len(bins_remain_cap[bins_remain_cap > 0]) > 1 else 0.001

    capacity_factor = np.exp(-(remaining_capacities - capacity_mean)**2 / (2 * capacity_std**2))

    # Item Size Score: Adapt based on item size.
    item_size_factor = min(1, item)

    # Adaptive Weighting: Adjust weights based on item size and overall capacity.
    waste_weight = 0.3 * (1 - item_size_factor/2)
    fit_weight = 0.3 * (0.5 + item_size_factor/2)
    capacity_weight = 0.1 * (1 - item_size_factor/2)
    remaining_weight = 0.1 * (0.5 + item_size_factor/2)
    diversity_weight = 0.1 * (1 - item_size_factor)  # Smaller items benefit more from diversity
    capacity_factor_weight = 0.1 * (0.5 + item_size_factor/2)


    # Combined Score
    combined_score = (
        waste_weight * waste_score +
        fit_weight * fit_score +
        capacity_weight * capacity_utilization +
        remaining_weight * remaining_capacity_score +
        diversity_weight * bin_diversity_score +
        capacity_factor_weight * capacity_factor
    )

    priorities[valid_bins] = combined_score
    return priorities
```
