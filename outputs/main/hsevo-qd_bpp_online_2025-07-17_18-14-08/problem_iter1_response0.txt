```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, filter out bins that can't fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # If no bin can fit the item, prioritize the fullest bin
        priorities = bins_remain_cap.copy()
        return priorities

    # Calculate remaining capacity AFTER placing the item (only for feasible bins)
    remaining_cap_after = bins_remain_cap[feasible_bins] - item
    
    # Prioritize bins where the item fits best (smallest remaining capacity)
    priorities[feasible_bins] = 1.0 / (remaining_cap_after + 0.000001) # Avoid division by zero

    # Give a bonus to bins that are already somewhat full (avoid fragmenting empty bins).
    priorities[feasible_bins] += bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)
        
    return priorities
```
