```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority: combines waste, fit, and capacity with dynamic weights."""
    # Initialize priorities
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap > 0

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste score
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-7)

        # Fit score
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/1.2)**2))

        # Capacity utilization
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Dynamic weighting (example: favor fit when item is small relative to bin)
        if item / np.max(bins_remain_cap) < 0.2:
            fit_weight = 0.7
            waste_weight = 0.2
            utilization_weight = 0.1
        else:
            fit_weight = 0.4
            waste_weight = 0.3
            utilization_weight = 0.3

        # Combined score
        combined_score = waste_weight * waste_score + fit_weight * fit_score + utilization_weight * capacity_utilization

        priorities[valid_bins] = combined_score

    return priorities
```
