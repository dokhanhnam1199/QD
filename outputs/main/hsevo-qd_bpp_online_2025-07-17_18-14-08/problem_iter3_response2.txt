```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins based on a combination of factors,
    including waste, remaining capacity, and a bin-level "fullness" score.
    It also introduces adaptive elements to adjust the weights based on
    item size relative to bin capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.full(bins_remain_cap.shape, -np.inf)  # Default to negative infinity.
    valid_bins = bins_remain_cap > 0

    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]
    
    # Waste calculation, avoid negative values
    waste = np.maximum(0, remaining_capacities - item)

    # Waste Score: Inverse of waste. Small waste is good.
    waste_score = 1 / (waste + 1e-9)

    # Fit Score: Gaussian fit promoting item to fit well in the bin
    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

    # Capacity Utilization Score: Promote usage of more full bins
    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

    # Remaining Capacity Score: Favor bins with smaller remaining capacity
    remaining_capacity_score = 1 / (remaining_capacities + 1e-9)

    # Item Size Ratio: Adjust weights based on the item size compared to average bin capacity
    item_ratio = item / np.mean(bins_remain_cap[bins_remain_cap > 0])
    
    # Adaptive Weights
    waste_weight = 0.5 if item_ratio < 0.5 else 0.3
    fit_weight = 0.3 if item_ratio < 0.5 else 0.4
    capacity_weight = 0.1 + (0.1 * item_ratio)
    remaining_weight = 0.1 - (0.05 * item_ratio)
    remaining_weight = max(0, remaining_weight) # Ensure weight is not negative
    
    # Combined Score with adaptive weights
    combined_score = (waste_weight * waste_score +
                      fit_weight * fit_score +
                      capacity_weight * capacity_utilization +
                      remaining_weight * remaining_capacity_score)

    priorities[valid_bins] = combined_score

    return priorities
```
