```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins based on a combination of factors:
    1. How well the item fits (smaller wasted space is better).
    2. A probabilistic element to explore different bin choices (inspired by quantum randomness).
    3. A penalty for bins that are almost full (risk of overfilling).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero
    bins_remain_cap = np.clip(bins_remain_cap, 1e-6, None)

    # 1. Fit Score: Smaller wasted space is better
    wasted_space = bins_remain_cap - item
    fit_score = np.exp(-np.abs(wasted_space)) # Gaussian-like, peaked at 0 wasted space. exp(-waste) more sensitive to small wastes

    # Adjust fit score: Penalize if waste is very high. Use the original capacity for scaling
    fit_score = np.where(wasted_space < 0, -1e9, fit_score)  # Assign extremely low score if overfill.  Make really small

    # 2. Probabilistic Element: "Quantum Tunneling" - Allow some exploration
    # Inspired by the idea that a particle can tunnel through barriers.
    #  Add small random numbers (proportional to the item size). This encourages exploration.
    probabilistic_boost = np.random.rand(len(bins_remain_cap)) * item * 0.01  # Small boost

    # 3. Risk Factor: Penalize bins that are close to full (Higher risk of overfilling with subsequent items).
    # This is an exponentially decaying penalty near capacity.
    capacity_ratio = item / bins_remain_cap
    risk_penalty = np.exp(10 * (capacity_ratio - 1))
    risk_penalty = np.clip(risk_penalty, 0, 1e9)  # limit penalty effect to prevent nan. The lower this upper bound, the less sensitive

    # Combine all factors
    priorities = fit_score + probabilistic_boost - risk_penalty

    return priorities
```
