```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and capacity utilization with adaptive weighting."""

    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Adaptive weight based on item size relative to average remaining capacity
        avg_cap = np.mean(remaining_capacities)
        if avg_cap > 0:
            weight_waste = min(1.0, item / avg_cap)  # item smaller than average cap
        else:
            weight_waste = 0.5  # default

        weight_capacity = 1 - weight_waste

        combined_score = weight_waste * waste_score + weight_capacity * capacity_utilization

        priorities[valid_bins] = combined_score

    return priorities
```
