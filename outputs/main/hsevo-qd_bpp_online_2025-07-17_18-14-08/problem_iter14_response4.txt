```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, waste minimization and adaptive weights based on item size."""

    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities
    remaining_capacities = bins_remain_cap[valid_bins]

    # Waste calculation
    waste = remaining_capacities - item
    waste_score = np.exp(-waste**2 / (2 * (np.mean(bins_remain_cap[bins_remain_cap>0])/3)**2))

    # Fit score (Gaussian)
    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 3)**2))

    # Capacity utilization
    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

    # Adaptive weights based on item size
    if item > np.mean(bins_remain_cap[bins_remain_cap>0]):
        waste_weight = 0.2
        fit_weight = 0.6
        capacity_weight = 0.2
    elif item < np.mean(bins_remain_cap[bins_remain_cap>0]) / 2:
        waste_weight = 0.6
        fit_weight = 0.2
        capacity_weight = 0.2
    else:
        waste_weight = 0.4
        fit_weight = 0.4
        capacity_weight = 0.2

    combined_score = (waste_weight * waste_score +
                      fit_weight * fit_score +
                      capacity_weight * capacity_utilization)

    priorities[valid_bins] = combined_score
    return priorities
```
