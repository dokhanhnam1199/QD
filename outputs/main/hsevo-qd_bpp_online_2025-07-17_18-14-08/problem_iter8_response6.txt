```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive heuristic combining waste and fit, dynamically adjusting weights based on item size.
    """
    valid_bins = bins_remain_cap > item
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste Score (Prioritize minimal waste)
        waste = remaining_capacities - item
        waste_score = 1 / (waste + 1e-9)

        # Fit Score (Gaussian-like)
        fit_score = np.exp(-(waste)**2 / (2 * (item/2)**2))

        # Adaptive Weighting based on Item Size
        item_ratio = item / np.mean(bins_remain_cap) if np.mean(bins_remain_cap) > 0 else 0

        if item_ratio < 0.5:
            w_waste, w_fit = 0.3, 0.7  # More weight to fit for smaller items
        else:
            w_waste, w_fit = 0.7, 0.3  # More weight to waste for larger items

        combined_score = w_waste * waste_score + w_fit * fit_score
        priorities[valid_bins] = combined_score

    return priorities
```
