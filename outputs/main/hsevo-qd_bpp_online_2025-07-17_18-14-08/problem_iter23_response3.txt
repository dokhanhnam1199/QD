```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive weighting and contextual bin awareness."""

    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap >= item  # Only consider bins that can fit the item

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste Score: Prioritize bins with minimal waste
        waste = remaining_capacities - item
        waste_score = 1 / (waste + 1e-9)

        # Fit Score: Gaussian fit
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 3)**2))


        # Capacity Utilization: Favor bins already somewhat full
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Adaptive Weighting based on item size
        item_ratio = item / np.max(bins_remain_cap)
        waste_weight = 0.4 * (1 - item_ratio)
        fit_weight = 0.4 * (0.5 + item_ratio)
        capacity_weight = 0.2 * (1 - item_ratio/2)

        # Combined Score
        combined_score = (waste_weight * waste_score +
                          fit_weight * fit_score +
                          capacity_weight * capacity_utilization)

        priorities[valid_bins] = combined_score
    else:
        # If no bin can fit, prioritize bins with larger remaining capacity (lower priority)
        valid_bins = bins_remain_cap > 0
        if np.any(valid_bins):
            remaining_capacities = bins_remain_cap[valid_bins]
            capacity_score = remaining_capacities / np.max(bins_remain_cap)
            priorities[valid_bins] = capacity_score / 10
    return priorities
```
