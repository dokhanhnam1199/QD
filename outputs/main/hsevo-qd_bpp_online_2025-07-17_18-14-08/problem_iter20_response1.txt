```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, perfect-fit, waste minimization, and log ratio."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Perfect Fit: Highest priority
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6
    priorities[perfect_fit] += 100

    # 2. Best Fit: Reward bins that fit with minimal waste.
    fits = bins_remain_cap >= item
    if np.any(fits):
        waste = bins_remain_cap[fits] - item
        best_fit_idx = np.argmin(waste)
        indices = np.where(fits)[0]
        best_fit_full_idx = indices[best_fit_idx]
        priorities[best_fit_full_idx] += 50

    # 3. Utilization Ratio:  Prioritize bins that are well-utilized after placing item.
    valid_bins = bins_remain_cap > 0
    utilization_ratio = item / bins_remain_cap[valid_bins]
    priorities[valid_bins] += utilization_ratio * 10

    # 4. Waste Minimization with Exponential Decay: Penalize larger waste values heavily.
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins that don't fit
    priorities -= np.exp(-(waste**2) / (2 * (item / 5)**2)) * 20

    # 5. Avoid Nearly Full: Discourage leaving tiny spaces.
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.1)
    priorities[nearly_full] -= 30

    # 6. Log Ratio (scaled and adjusted): Incorporate basic capacity consideration.
    ratios = item / bins_remain_cap
    ratios[ratios > 1] = 0  # Only consider bins where item fits
    ratios[ratios < 0] = 0  # Handle edge cases
    log_ratios = np.log(ratios + 1e-9)  # Adding a small constant to avoid log(0)
    priorities += -log_ratios * 5  # Scale down the impact

    return priorities
```
