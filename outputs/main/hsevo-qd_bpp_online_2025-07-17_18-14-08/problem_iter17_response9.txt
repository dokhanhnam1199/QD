```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, and capacity utilization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Perfect Fit Bonus
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6
    priorities[perfect_fit] += 100

    # Best Fit
    fits = bins_remain_cap >= item
    if np.any(fits):
        waste = bins_remain_cap[fits] - item
        best_fit_idx = np.argmin(waste)
        indices = np.where(fits)[0]
        best_fit_full_idx = indices[best_fit_idx]
        priorities[best_fit_full_idx] += 50

    # Utilization Ratio Weighting
    valid_bins = bins_remain_cap > 0
    utilization_ratio = item / bins_remain_cap[valid_bins]
    max_bin_capacity = np.max(bins_remain_cap) #Scale by max bin capacity
    weight_utilization = 15 if item > 0.7 * max_bin_capacity else 7 # Adapt based on item size
    priorities[valid_bins] += utilization_ratio * weight_utilization

    # Exponential Waste Penalty
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    priorities -= np.exp(-(waste**2) / (2 * (item / 5)**2)) * 20

    # Nearly Full Bin Avoidance
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.1)
    priorities[nearly_full] -= 30

    return priorities
```
