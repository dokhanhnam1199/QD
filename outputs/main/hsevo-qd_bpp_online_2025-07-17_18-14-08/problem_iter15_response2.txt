```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       An enhanced heuristic for online bin packing, dynamically adapting to item size and bin state.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste Calculation (as before)
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        # Fit Score (Gaussian, but adjusted)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        # Capacity Utilization (normalized to 0-1)
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Dynamic Weighting based on item size relative to available space:
        # - If the item is relatively small compared to available capacity,
        #   emphasize waste minimization and capacity utilization.
        # - If the item is relatively large, emphasize a good fit (less waste).
        relative_size = item / np.max(bins_remain_cap)  # Item size relative to largest bin.
        
        if relative_size < 0.3: # Can be tuned
            waste_weight = 0.5
            fit_weight = 0.2
            capacity_weight = 0.3
        elif relative_size > 0.7: # Can be tuned
            waste_weight = 0.3
            fit_weight = 0.6
            capacity_weight = 0.1
        else:
            waste_weight = 0.4
            fit_weight = 0.4
            capacity_weight = 0.2

        # Combined Score with Dynamic Weights
        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization

        priorities[valid_bins] = combined_score

    return priorities
```
