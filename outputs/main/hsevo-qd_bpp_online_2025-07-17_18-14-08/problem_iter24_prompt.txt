{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n       A multifactorial, adaptive approach to bin selection.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.full(bins_remain_cap.shape, -np.inf)\n    valid_bins = bins_remain_cap > 0\n\n    if not np.any(valid_bins):\n        return priorities\n\n    remaining_capacities = bins_remain_cap[valid_bins]\n\n    # Waste Score: Prioritize bins with minimal waste\n    waste = np.maximum(0, remaining_capacities - item)\n    waste_score = 1 / (waste + 1e-9)\n\n    # Fit Score: Gaussian fit, as before, but potentially refined\n    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 3)**2))\n\n    # Capacity Utilization: Favor bins that are already somewhat full\n    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n    # Remaining Capacity Score: Discourage very small remaining capacity\n    remaining_capacity_score = np.where(remaining_capacities > item, remaining_capacities / np.max(bins_remain_cap), 0) # Only if it can fit, favor higher remaining capacity.\n\n    # Item Size Score: adapt based on item size. Big items need better fit.\n    item_size_factor = min(1, item)  # Scale factor based on item size.  Cap at 1.\n\n    # Adaptive Weighting: Adjust weights based on item size.  Heuristic core.\n    waste_weight = 0.4 * (1 - item_size_factor/2) # smaller item, higher waste weight.\n    fit_weight = 0.4 * (0.5 + item_size_factor/2)   # Bigger item, higher fit weight.\n    capacity_weight = 0.1 * (1 - item_size_factor/2) # smaller item, higher capacity weight.\n    remaining_weight = 0.1 * (0.5 + item_size_factor/2)  # Bigger item, higher remaining capacity.\n\n    # Combined Score\n    combined_score = (\n        waste_weight * waste_score +\n        fit_weight * fit_score +\n        capacity_weight * capacity_utilization +\n        remaining_weight * remaining_capacity_score\n    )\n\n    priorities[valid_bins] = combined_score\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nHere's a redefined \"Current Self-Reflection\" focusing on actionable advice and avoiding pitfalls, geared towards designing better heuristics:\n\n*   **Keywords:** Multi-objective, adaptive weights, iterative refinement, problem context, performance bottlenecks.\n*   **Advice:** Begin with a simple heuristic, rigorously test, and *incrementally* add complexity only when performance requires it. Dynamically adjust factor weights based on real-time problem state.\n*   **Avoid:** Premature complexity, static weighting schemes, focusing solely on individual factors in isolation.\n*   **Explanation:** Heuristics should evolve from simple, testable foundations. Adaptation based on the *current* problem instance is key. Prioritize addressing proven performance shortcomings over preemptive complexification.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}