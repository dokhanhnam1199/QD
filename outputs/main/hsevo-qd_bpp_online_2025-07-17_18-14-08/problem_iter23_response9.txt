```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive bin selection using waste, fit, and utilization."""

    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]

    waste = np.maximum(0, remaining_capacities - item)
    waste_score = 1 / (waste + 1e-9)

    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

    item_size_ratio = item / np.max(bins_remain_cap)

    if item_size_ratio > 0.5:
        waste_weight = 0.7
        fit_weight = 0.3
        capacity_weight = 0.0
    elif item_size_ratio > 0.2:
        waste_weight = 0.5
        fit_weight = 0.3
        capacity_weight = 0.2
    else:
        waste_weight = 0.3
        fit_weight = 0.3
        capacity_weight = 0.4

    bin_utilization_ratio = 1 - (remaining_capacities / np.max(bins_remain_cap))
    if np.any(bin_utilization_ratio > 0.8):
        waste_weight += 0.1
        fit_weight += 0.1
        capacity_weight -= 0.2

    waste_weight = np.clip(waste_weight, 0, 1)
    fit_weight = np.clip(fit_weight, 0, 1)
    capacity_weight = np.clip(capacity_weight, 0, 1)

    combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization

    priorities[valid_bins] = combined_score

    return priorities
```
