```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fit, and adaptive weighting based on item size."""
    valid_bins = bins_remain_cap > item
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste Score
        waste = remaining_capacities - item
        waste_score = 1 / (waste + 1e-9)

        # Fit Score (Gaussian-like)
        fit_score = np.exp(-(waste)**2 / (2 * (item)**2))

        # Adaptive Weighting
        item_ratio = item / np.mean(bins_remain_cap) if np.mean(bins_remain_cap) > 0 else 0
        if item_ratio < 0.3:
            w_waste, w_fit = 0.3, 0.7
        elif item_ratio > 0.7:
            w_waste, w_fit = 0.7, 0.3
        else:
            w_waste, w_fit = 0.5, 0.5

        combined_score = w_waste * waste_score + w_fit * fit_score
        priorities[valid_bins] = combined_score

    return priorities
```
