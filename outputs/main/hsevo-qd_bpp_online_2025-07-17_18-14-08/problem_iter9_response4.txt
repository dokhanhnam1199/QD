```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       This version adaptively adjusts priorities based on bin utilization and item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        
        # Waste Calculation
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)
        
        # Fit Score (Gaussian)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))
        
        # Capacity Utilization
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))
        
        # Item Size Consideration: Adaptively adjust weights based on item size
        item_size_ratio = item / np.max(bins_remain_cap)

        # Dynamic Weight Adjustment based on item size ratio.
        # Smaller items benefit from better fit, larger from waste reduction.
        waste_weight = 0.4 if item_size_ratio > 0.5 else 0.3  #Larger item favors waste reduction
        fit_weight = 0.3 if item_size_ratio <= 0.5 else 0.2    #smaller item favors fit
        capacity_weight = 0.3

        # Adaptive weighting of scores
        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization
        
        priorities[valid_bins] = combined_score

    return priorities
```
