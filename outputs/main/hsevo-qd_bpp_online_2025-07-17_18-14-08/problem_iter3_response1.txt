```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Adaptively utilizes bin capacities and waste minimization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap > 0

    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]
    
    # Waste Calculation: prioritize bins with minimal waste
    waste = np.maximum(0, remaining_capacities - item)
    waste_score = 1 / (waste + 1e-9)

    # Remaining Capacity Utilization: balance between using space and avoiding fragmentation
    capacity_utilization = (remaining_capacities - item) / (np.max(bins_remain_cap) + 1e-9)
    capacity_utilization_score = np.clip(1 - np.abs(capacity_utilization), 0, 1) # Prefer bins with remaining capacity close to item size

    # Fit Score: A Gaussian distribution to favor bins where the item fits nicely
    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/2)**2))

    # Smallest Bin First component: Encourages filling smaller bins when possible
    smallest_bin_score = 1 / (remaining_capacities + 1e-9)
    
    # Adaptive Weighting: Adjust weights based on remaining capacities
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity > 0:
        waste_weight = 0.4
        capacity_weight = 0.3
        fit_weight = 0.2
        smallest_bin_weight = 0.1
    else:
        waste_weight = 0.5
        capacity_weight = 0.25
        fit_weight = 0.2
        smallest_bin_weight = 0.05

    # Combined Score
    combined_score = (waste_weight * waste_score +
                      capacity_weight * capacity_utilization_score +
                      fit_weight * fit_score +
                      smallest_bin_weight * smallest_bin_score)

    priorities[valid_bins] = combined_score
    return priorities
```
