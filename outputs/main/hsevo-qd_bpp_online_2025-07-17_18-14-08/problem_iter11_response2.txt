```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, best fit, and a perfect fit bonus."""

    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        return priorities

    # Waste minimization: smaller waste is better
    waste = bins_remain_cap - item
    waste_priority = -waste
    waste_priority[waste < 0] = -np.inf #Invalid bins.

    # Best Fit
    best_fit_priority = np.exp(-(bins_remain_cap - item)**2 / (2 * (item/3)**2))
    best_fit_priority[waste < 0] = -np.inf

    # Perfect fit bonus
    perfect_fit_bonus = np.isclose(bins_remain_cap, item) * 10

    # Combine priorities, weighting towards perfect fit when available
    priorities = waste_priority + best_fit_priority + perfect_fit_bonus

    return priorities
```
