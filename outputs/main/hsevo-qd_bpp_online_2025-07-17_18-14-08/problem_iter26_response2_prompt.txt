{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n       An improved multifactorial, adaptive approach to bin selection.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.full(bins_remain_cap.shape, -np.inf)\n    valid_bins = bins_remain_cap > 0\n\n    if not np.any(valid_bins):\n        return priorities\n\n    remaining_capacities = bins_remain_cap[valid_bins]\n    n_valid_bins = len(remaining_capacities)\n\n    # Waste Score: Prioritize bins with minimal waste\n    waste = np.maximum(0, remaining_capacities - item)\n    waste_score = 1 / (waste + 1e-9)\n\n    # Fit Score: Gaussian fit, as before, but potentially refined\n    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 3)**2))\n\n    # Capacity Utilization: Favor bins that are already somewhat full\n    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n    # Remaining Capacity Score: Discourage very small remaining capacity\n    remaining_capacity_score = np.where(remaining_capacities > item, remaining_capacities / np.max(bins_remain_cap), 0) # Only if it can fit, favor higher remaining capacity.\n\n    # Item Size Score: adapt based on item size. Big items need better fit.\n    item_size_factor = min(1, item)  # Scale factor based on item size.  Cap at 1.\n\n    # Adaptive Weighting: Adjust weights based on item size.  Heuristic core.\n    waste_weight = 0.4 * (1 - item_size_factor/2) # smaller item, higher waste weight.\n    fit_weight = 0.4 * (0.5 + item_size_factor/2)   # Bigger item, higher fit weight.\n    capacity_weight = 0.1 * (1 - item_size_factor/2) # smaller item, higher capacity weight.\n    remaining_weight = 0.1 * (0.5 + item_size_factor/2)  # Bigger item, higher remaining capacity.\n\n    # Add bin diversity score\n\n    capacity_std = np.std(bins_remain_cap[valid_bins]) if n_valid_bins > 1 else 0\n    diversity_score = np.exp(-(capacity_std**2))\n    diversity_weight = 0.05\n\n    #Combined Score\n    combined_score = (\n        waste_weight * waste_score +\n        fit_weight * fit_score +\n        capacity_weight * capacity_utilization +\n        remaining_weight * remaining_capacity_score +\n        diversity_weight * diversity_score\n    )\n    priorities[valid_bins] = combined_score\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit, waste minimization, and adaptive weighting.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Perfect Fit: Highest priority\n    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6\n    priorities[perfect_fit] += 100\n\n    # Best Fit: Reward bins that fit with minimal waste.\n    fits = bins_remain_cap >= item\n    if np.any(fits):\n        waste = bins_remain_cap[fits] - item\n        best_fit_idx = np.argmin(waste)\n        indices = np.where(fits)[0]\n        best_fit_full_idx = indices[best_fit_idx]\n        priorities[best_fit_full_idx] += 50\n\n    #Adaptive Weighting, prioritizing bins that utilize capacity well\n    valid_bins = bins_remain_cap > 0\n    utilization_ratio = item / bins_remain_cap[valid_bins]\n    avg_utilization = np.mean(utilization_ratio) if utilization_ratio.size > 0 else 0\n    weight_utilization = 10 if avg_utilization > 0.5 else 5 #Increase weight for high avg utilization\n    priorities[valid_bins] += utilization_ratio * weight_utilization\n\n    # Penalize larger waste exponentially. Gaussian fit score\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf\n    priorities -= np.exp(-(waste**2) / (2 * (item / 5)**2)) * 20\n\n    # Avoid Nearly Full bins, discourages leaving tiny spaces.\n    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.1)\n    priorities[nearly_full] -= 30\n    \n    #Waste Score: Adaptive Weighting, combines best-fit and waste minimization.\n    waste_score = np.zeros_like(bins_remain_cap, dtype=float)\n    fits = bins_remain_cap >= item\n    if np.any(fits):\n        waste = bins_remain_cap[fits] - item\n        waste_score[fits] = np.exp(-waste / (item + 1e-9)) #Adaptive scaling\n        priorities += waste_score * 10 # Combine with existing priorities\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), the primary difference is the inclusion of a \"diversity score\" based on the standard deviation of remaining bin capacities in the 1st heuristic. This suggests an attempt to balance bin utilization across all available bins.\n\nComparing (2nd) vs (5th), these are identical.\n\nComparing (1st) vs (3rd), they are identical.\n\nComparing (3rd) vs (4th), they are identical.\n\nComparing (4th) vs (6th), they are identical.\n\nComparing (6th) vs (7th), they are identical.\n\nComparing (7th) vs (8th), they are identical.\n\nComparing (8th) vs (9th), the 8th uses a more intricate and adaptive weighting scheme based on item size, incorporating waste, fit, capacity utilization, and remaining capacity. The 9th uses a simplified fixed weighting.\n\nComparing (9th) vs (10th), both combine waste, fit, and capacity utilization, but (9th) includes \"adaptive weighting\" even though it's just a fixed weighting. (10th) does not claim adaptive weighting and simply uses fixed weights.\n\nComparing (10th) vs (13th), these are identical.\n\nComparing (11th) vs (12th), The 11th has waste_score calculation while the 12th doesn't.\n\nComparing (12th) vs (15th), these are identical.\n\nComparing (14th) vs (16th), The 14th uses a complex system of adaptive weights based on both item size and bin utilization, and a lot of parameters, while the 16th uses adaptive weights based only on item size. Also, the 14th introduces several parameters that need to be fine-tuned.\n\nComparing (16th) vs (17th), The 16th is a more developed heuristic that adapts to cases where the item doesn't fit, while the 17th focuses on waste minimization, gaussian fit score, and capacity utilization when the item fits.\n\nComparing (17th) vs (18th), the 18th attempts adaptive weighting (though simplified), the 17th uses a fixed weighting.\n\nComparing (18th) vs (19th), The 18th is a multifactorial approach combining waste, fit, and capacity utilization, while the 19th is a single-factor approach based solely on the ratio of item size to remaining bin capacity. Also, (18th) use adaptive weighting while (19th) doesn't.\n\nComparing (19th) vs (20th), these are identical.\n\nOverall: The better heuristics generally incorporate more factors (waste, fit, capacity utilization, remaining capacity, bin diversity) and employ adaptive weighting schemes based on item size and bin utilization. Simpler heuristics focus on fewer factors with fixed weights or a single factor. The best heuristic attempts to balance bin utilization by penalizing low diversity of bin capacities.\n- \nOkay, I'll craft a redefined self-reflection on heuristic design for bin packing, focusing on actionable insights and avoiding pitfalls.\n\n**Redefined Self-Reflection:**\n\n*   **Keywords:** Multifactorial, Adaptive Weighting, Bin States, Diversity, Constraint Handling, Complex Scoring.\n\n*   **Advice:** Integrate multiple, *independent* factors (item characteristics, bin state, diversity metrics). Adapt weights based on *dynamic* problem state using *non-linear* functions (e.g., Gaussian). Explicitly address infeasibility. Employ *complex* scoring mechanism such as Gaussian fit score.\n\n*   **Avoid:** Vague \"combinations,\" simplistic ratios, static weights, focusing *solely* on waste/capacity, neglecting diversity or infeasibility.\n\n*   **Explanation:** Effective heuristics require combining diverse information signals. Adaptive weighting should dynamically respond to problem state. Infeasibility needs dedicated handling. Complexity, when justified by performance gains, is valuable.\n\nI can further refine this if you give me specific areas you want me to focus on (e.g., types of diversity metrics, specific adaptive weighting functions, or methods for handling infeasibility). Let me know!\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}