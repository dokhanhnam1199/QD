```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization with a capacity ratio, adaptively."""
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)  # Avoid division by zero

        capacity_ratio = item / remaining_capacities
        capacity_score = np.exp(-np.abs(capacity_ratio - 1)) # Prefer bins where item size approx matches remaining capacity

        combined_score = 0.7 * waste_score + 0.3 * capacity_score
        priorities[valid_bins] = combined_score
    return priorities
```
