```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste minimization, and penalizes similar sized bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Capacity bonus: Favor bins with more remaining capacity.
    capacity_bonus = bins_remain_cap * 0.05 #Scale effect
    priorities += capacity_bonus

    # Waste minimization: higher priority for bins closer to item size.
    diff = np.abs(bins_remain_cap - item)
    priorities += 1.0 / (1e-6 + diff**2)

    # Penalize bins with capacity close to item size to avoid near-full bins.
    similarity_penalty = np.where(np.abs(bins_remain_cap - item) < item * 0.2, -5, 0) #Scale penalty
    priorities += similarity_penalty

    # Prevent overfilling
    priorities = np.where(bins_remain_cap < item, -np.inf, priorities)

    return priorities
```
