```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Utilizes a combination of remaining capacity, waste, and a touch of chaos.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to zero
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a high priority to bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1.0  # Base priority for fitting

    # Prioritize bins that leave minimal waste after fitting. Scale by item size to prefer packing smaller items first.
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Avoid negative waste calculation for bins that cannot fit
    waste_priority = np.exp(-waste / item)  # Exponential decay: Less waste = Higher priority. Scaled by item.
    priorities += waste_priority

    # Slight bonus for bins that are closer to being full after adding the item. Sigmoid function to limit boost.
    fraction_full = (1 - (bins_remain_cap - item) / np.max(bins_remain_cap)) * fit_mask
    fullness_priority = 1 / (1 + np.exp(-5 * (fraction_full - 0.5)))  # Sigmoid around 0.5
    priorities += fullness_priority * 0.5  # Limited boost

    # Add a tiny bit of random noise to break ties. This might lead to better exploration.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001
    return priorities
```
