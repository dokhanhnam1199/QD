```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       An improved version incorporating adaptive weighting and contextual awareness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap >= item
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste Score: Prioritize bins with minimal waste after placement.
        waste = remaining_capacities - item
        waste_score = 1 / (waste + 1e-9)

        # Fit Score: Gaussian distribution centered around ideal remaining capacity.
        fit_score = np.exp(-(remaining_capacities - 2 * item/3)**2 / (2 * (item/3)**2))

        # Capacity Utilization: Encourage filling bins to a higher percentage.
        capacity_utilization = remaining_capacities / np.max(bins_remain_cap)

        # Number of Possible items that can fit in each bin
        possible_items_fit = np.floor(remaining_capacities/item)

        # Adaptive Weighting based on Item Size and Bin Capacities:
        item_ratio = item / np.max(bins_remain_cap) # Ratio of the item size to the maximum bin capacity.

        # Adjust weights based on item size relative to bin sizes.
        waste_weight = 0.5 if item_ratio < 0.3 else 0.3
        fit_weight = 0.3 if item_ratio < 0.3 else 0.5
        capacity_weight = 0.2

        # Combined Score with Adaptive Weights:
        combined_score = (waste_weight * waste_score +
                          fit_weight * fit_score +
                          capacity_weight * (1 - capacity_utilization))

        priorities[valid_bins] = combined_score

    # If no bin can accommodate the item, consider bins with enough space to use later.
    else:
        valid_bins = bins_remain_cap > 0
        if np.any(valid_bins):
          remaining_capacities = bins_remain_cap[valid_bins]

          # Prioritize bins with larger remaining capacity even if they cannot fit the current item
          capacity_score = remaining_capacities / np.max(bins_remain_cap)
          priorities[valid_bins] = capacity_score / 10  # Lower priority since the item doesn't fit

    return priorities
```
