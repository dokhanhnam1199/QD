```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, utilization, and waste minimization with adaptive weights."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Perfect Fit: Highest priority
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6
    priorities[perfect_fit] += 100

    # Best Fit: Reward bins that fit with minimal waste.
    fits = bins_remain_cap >= item
    if np.any(fits):
        waste = bins_remain_cap[fits] - item
        best_fit_idx = np.argmin(waste)
        indices = np.where(fits)[0]
        best_fit_full_idx = indices[best_fit_idx]
        priorities[best_fit_full_idx] += 50


    # Adaptive Utilization Ratio: Prioritize bins based on current fill level.
    valid_bins = bins_remain_cap > 0
    utilization_ratio = item / bins_remain_cap[valid_bins]
    # Adaptively scale the utilization bonus. Bins with already high utilization get a smaller bonus.
    adaptive_utilization_weight = 1 / (1 + np.exp(bins_remain_cap[valid_bins] - np.mean(bins_remain_cap)))
    priorities[valid_bins] += utilization_ratio * adaptive_utilization_weight * 10


    # Waste Minimization with Decay: Penalize larger waste values.
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins that don't fit
    priorities -= np.exp(-(waste**2) / (2 * (item / 5)**2)) * 20


    return priorities
```
