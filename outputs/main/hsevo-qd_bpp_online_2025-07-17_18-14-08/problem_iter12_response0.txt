```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       A refined heuristic for online bin packing, prioritizing efficient packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid zero capacity bins and division by zero.
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)  # Default to negative infinity.

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Calculate the waste if we place the item in each bin. A lower waste
        # suggests a better fit. Avoid negative waste using max(0).
        waste = np.maximum(0, remaining_capacities - item)

        # Score based on the inverse of the waste. To give higher preference to minimal waste
        waste_score = 1 / (waste + 1e-9) # Adding a small value to avoid division by zero
        
        # Fit Score: Gaussian Fit score favoring item to fit nicely in the bin.
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        # Capacity Utilization: Prioritize using more full bins first.
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))
        
        # Balance Score: Score based on how balanced the bins will be after placing the item.
        # Lower standard deviation of remaining capacities across all bins is better.
        temp_capacities = bins_remain_cap.copy()
        temp_capacities[valid_bins] = remaining_capacities - item
        temp_capacities[temp_capacities < 0] = -np.inf # Penalize negative capacities
        
        balance_score = -np.std(temp_capacities[temp_capacities > -np.inf]) # Negative standard deviation because smaller is better
        balance_score = (balance_score - np.min(balance_score)) / (np.max(balance_score) - np.min(balance_score) + 1e-9) # Normalize to [0, 1]


        # Adaptive Weights based on item size
        if item < 0.3:
            waste_weight = 0.5
            fit_weight = 0.3
            capacity_weight = 0.1
            balance_weight = 0.1
        elif item < 0.6:
            waste_weight = 0.4
            fit_weight = 0.4
            capacity_weight = 0.1
            balance_weight = 0.1
        else:
            waste_weight = 0.3
            fit_weight = 0.3
            capacity_weight = 0.2
            balance_weight = 0.2

        # Combine the scoring components with dynamic weights.
        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization + balance_weight * balance_score

        priorities[valid_bins] = combined_score

    return priorities
```
