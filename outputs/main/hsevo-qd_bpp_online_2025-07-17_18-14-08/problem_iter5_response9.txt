```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, fit, and ratio for priority.
    Adapts based on item size relative to bin capacity.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste Score
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        # Fit Score
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 2)**2))

        # Ratio Score (item size / remaining capacity)
        ratios = item / remaining_capacities
        ratio_score = -np.log(ratios)

        # Adaptive Weighting
        avg_bin_capacity = np.mean(bins_remain_cap[bins_remain_cap > 0]) if np.any(bins_remain_cap > 0) else 1
        item_ratio = item / avg_bin_capacity if avg_bin_capacity > 0 else 0

        if item_ratio < 0.3:
            w_waste, w_fit, w_ratio = 0.2, 0.6, 0.2  # Emphasize Fit
        elif item_ratio > 0.7:
            w_waste, w_fit, w_ratio = 0.6, 0.2, 0.2  # Emphasize Waste
        else:
            w_waste, w_fit, w_ratio = 0.33, 0.33, 0.34  # Balanced

        combined_score = (
            w_waste * waste_score +
            w_fit * fit_score +
            w_ratio * ratio_score
        )

        priorities[valid_bins] = combined_score

    return priorities
```
