```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, fit, and capacity utilization with dynamic weighting."""

    # Avoid zero capacity bins and division by zero.
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)  # Default to negative infinity.

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Calculate the waste if we place the item in each bin. A lower waste
        # suggests a better fit. Avoid negative waste using max(0).
        waste = np.maximum(0, remaining_capacities - item)

        # Score based on the inverse of the waste. To give higher preference to minimal waste
        avoid_zero_division = 1e-7
        waste_score = 1 / (waste + avoid_zero_division) # Adding a small value to avoid division by zero
        
        # Gaussian Fit Score
        gaussian_fit_scale = 1.2
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/gaussian_fit_scale)**2)) # Gaussian Fit score favoring item to fit nicely in the bin.

        # Preference for bins that can accommodate the item. Also incorporate remaining capacity
        # to prioritize using more full bins first.
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Dynamic Weighting based on item size relative to average bin capacity
        avg_bin_cap = np.mean(remaining_capacities)
        item_ratio = item / avg_bin_cap

        # Adaptive Weights (Example)
        if item_ratio < 0.5:
            # small item: prioritize fit and capacity
            fit_score_weight = 0.6
            capacity_utilization_weight = 0.4
            waste_score_weight = 0.0
        elif item_ratio < 1.0:
            # medium item: balance fit, capacity, and waste
            fit_score_weight = 0.4
            capacity_utilization_weight = 0.3
            waste_score_weight = 0.3
        else:
            # large item: prioritize waste minimization
            fit_score_weight = 0.1
            capacity_utilization_weight = 0.1
            waste_score_weight = 0.8

        # Combine the scoring components. Give weights to components
        combined_score = waste_score_weight * waste_score + fit_score_weight * fit_score + capacity_utilization_weight * capacity_utilization

        priorities[valid_bins] = combined_score

    return priorities
```
