```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization and adaptive weighting."""

    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        
        # Best-Fit component
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        # Waste minimization
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)
        
        #Adaptive weights based on item size.
        item_size_ratio = item / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0 # Ratio of item size to max bin capacity
    
        if item_size_ratio > 0.5:
            waste_weight = 0.7
            fit_weight = 0.3
        elif item_size_ratio > 0.2:
            waste_weight = 0.5
            fit_weight = 0.5
        else:
            waste_weight = 0.3
            fit_weight = 0.7
            
        waste_weight = np.clip(waste_weight, 0, 1) #Making sure weights are between 0 and 1
        fit_weight = np.clip(fit_weight, 0, 1)

        combined_score = waste_weight * waste_score + fit_weight * fit_score
        priorities[valid_bins] = combined_score

    return priorities
```
