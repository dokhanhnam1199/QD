```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priority scores
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item without much waste
    # This encourages filling bins efficiently
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap - item
    priorities[fit_mask] = 1.0 / (waste[fit_mask] + 0.0001) # Avoid division by zero and prioritize smaller waste

    # Give a slightly lower priority to bins that are nearly full before adding the item
    # Avoid very small remaining capacities
    nearly_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < item)
    priorities[nearly_full_mask] = 0.5

    # Penalize bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf # Never add to bins that cannot fit

    return priorities
```
