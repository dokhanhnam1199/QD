```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Adaptive strategy that combines waste minimization, fit, and capacity utilization,
       dynamically adjusting weights based on item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]

    # Waste minimization score
    waste = np.maximum(0, remaining_capacities - item)
    waste_score = 1 / (waste + 1e-9)

    # Fit score (Gaussian)
    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

    # Capacity utilization score
    max_cap = np.max(bins_remain_cap)
    capacity_utilization = 1 - (remaining_capacities / max_cap)

    # Dynamic weighting based on item size
    if item <= max_cap / 3:  # Small item: prioritize fit
        waste_weight = 0.2
        fit_weight = 0.6
        capacity_weight = 0.2
    elif item <= 2 * max_cap / 3:  # Medium item: balance fit and waste
        waste_weight = 0.4
        fit_weight = 0.4
        capacity_weight = 0.2
    else:  # Large item: prioritize waste and capacity utilization
        waste_weight = 0.5
        fit_weight = 0.2
        capacity_weight = 0.3

    # Combined score with dynamic weights
    combined_score = (waste_weight * waste_score +
                      fit_weight * fit_score +
                      capacity_weight * capacity_utilization)

    priorities[valid_bins] = combined_score

    return priorities
```
