```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, fit, and capacity utilization with dynamic weighting."""

    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Dynamic weighting based on item size
        if item < 0.3:
            w1, w2, w3 = 0.7, 0.2, 0.1  # Emphasize waste for small items
        elif item > 0.7:
            w1, w2, w3 = 0.2, 0.6, 0.2  # Emphasize fit for large items
        else:
            w1, w2, w3 = 0.4, 0.4, 0.2  # Balanced weights for medium items

        combined_score = w1 * waste_score + w2 * fit_score + w3 * capacity_utilization
        priorities[valid_bins] = combined_score

    return priorities
```
