{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Enhanced heuristic combining waste, fit, and remaining capacity considerations with adaptive elements.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    valid_bins = bins_remain_cap > 0\n    priorities = np.full(bins_remain_cap.shape, -np.inf)\n\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n        \n        # Waste Score (Prioritize minimal waste)\n        waste = np.maximum(0, remaining_capacities - item)\n        waste_score = 1 / (waste + 1e-9)\n\n        # Fit Score (Gaussian-like, penalizing very tight or loose fits)\n        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 2)**2))  # Adjusted std for potentially better fit\n\n        # Capacity Utilization Score (Encourage filling bins)\n        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n        # Remaining Capacity Score (favor bins with low remianing capacity)\n        remaining_capacity_score = 1 / (remaining_capacities + 1e-9)\n        \n        # Adaptive Weighting based on Item Size relative to Average Bin Size\n        avg_bin_capacity = np.mean(bins_remain_cap[bins_remain_cap > 0]) if np.any(bins_remain_cap > 0) else 1  # Avoid division by zero if all bins are full\n        item_ratio = item / avg_bin_capacity if avg_bin_capacity > 0 else 0 # normalize the item size relative to the average bin capacity\n\n        # Dynamic weight adjustment\n        if item_ratio < 0.2:\n             w_waste, w_fit, w_capacity, w_rem_cap = 0.3, 0.5, 0.1, 0.1  # Favor Fit for small items\n        elif item_ratio > 0.8:\n            w_waste, w_fit, w_capacity, w_rem_cap = 0.6, 0.1, 0.2, 0.1  # Favor Waste for large items\n        else:\n            w_waste, w_fit, w_capacity, w_rem_cap = 0.4, 0.3, 0.2, 0.1 # balanced weights otherwise\n\n        # Combined Score with Adaptive Weights\n        combined_score = (\n            w_waste * waste_score +\n            w_fit * fit_score +\n            w_capacity * capacity_utilization +\n            w_rem_cap * remaining_capacity_score\n        )\n\n        priorities[valid_bins] = combined_score\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a multi-faceted approach combining perfect fit, best fit, utilization ratio, waste minimization, and avoidance of nearly full bins, while the worst uses a simple log ratio of item size to bin capacity. (2nd best) vs (second worst) shows that the second-best considers waste, fit (Gaussian), and capacity utilization with tunable weights, while second worst only considers log ratio. Comparing (1st) vs (2nd), we see the best uses hardcoded priorities and conditions, where as the second best uses weighted scores. (3rd) vs (4th) shows adaptive weighting can be useful. Comparing (second worst) vs (worst), we see both using the same log ratio calculations. Overall: The better heuristics incorporate multiple factors (waste, fit, capacity utilization, perfect fit) using weighted scores or priority systems, while worse heuristics rely on single ratios and lack adaptability or nuanced consideration of different bin-packing objectives. Adaptive weighting is also important.\n- \nOkay, let's redefine \"Current Self-Reflection\" for designing better heuristics, avoiding the pitfalls of \"Ineffective Self-Reflection.\"\n\nHere's a refined approach, focusing on actionable insights and avoiding overly specific examples:\n\n*   **Keywords:** Multifactorial, Adaptive, Weighted Scoring, Contextual Awareness.\n*   **Advice:** Construct heuristics by integrating multiple relevant factors using weighted scores or prioritized rules. Implement adaptive mechanisms that adjust weights or rule priorities based on the specific problem instance and its characteristics.\n*   **Avoid:** Over-reliance on single, simplistic metrics or rigid, static weighting schemes.\n*   **Explanation:** Effective heuristics require a nuanced understanding of the problem. Combining factors and dynamically adapting to the context leads to more robust and generalizable solutions.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}