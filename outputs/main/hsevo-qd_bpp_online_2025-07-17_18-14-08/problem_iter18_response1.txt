```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste calculation
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        # Fit Score (Gaussian)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        # Capacity utilization
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Remaining capacity Score
        remaining_capacity_score = remaining_capacities / np.max(bins_remain_cap) # Normalize remaining capacity

        # Adaptive Weights based on item size and bin capacities
        total_capacity = np.sum(bins_remain_cap)
        item_ratio = item / np.max(bins_remain_cap) # Ratio of item size to the largest bin.

        if total_capacity > 0:
            item_vs_total_ratio = item / total_capacity
        else:
            item_vs_total_ratio = 0  # avoid division by zero when all bins are full.

        # Adjust weights based on item ratio. Favor waste and fit for smaller items
        # and capacity utilization and remaining capacity for larger items.
        if item_ratio < 0.2:
            weight_waste = 0.5
            weight_fit = 0.4
            weight_capacity = 0.05
            weight_remaining = 0.05

        elif item_ratio < 0.5:
            weight_waste = 0.4
            weight_fit = 0.3
            weight_capacity = 0.15
            weight_remaining = 0.15
        else:
            weight_waste = 0.2
            weight_fit = 0.1
            weight_capacity = 0.35
            weight_remaining = 0.35
        
        combined_score = (
            weight_waste * waste_score +
            weight_fit * fit_score +
            weight_capacity * capacity_utilization +
            weight_remaining * remaining_capacity_score
        )

        priorities[valid_bins] = combined_score

    return priorities
```
