```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, fit, and capacity utilization with adaptive weighting."""
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Adaptive weighting based on item size
        item_ratio = item / np.max(bins_remain_cap)
        waste_weight = 0.5 + 0.3 * item_ratio  # Larger items, higher waste weight
        fit_weight = 0.4 - 0.2 * item_ratio   # Larger items, lower fit weight
        capacity_weight = 0.1 # Fixed Capacity

        waste_weight = np.clip(waste_weight, 0.0, 1.0)
        fit_weight = np.clip(fit_weight, 0.0, 1.0)


        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization
        priorities[valid_bins] = combined_score

    return priorities
```
