```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, fit, and utilization with adaptive weighting."""

    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]

    waste = np.maximum(0, remaining_capacities - item)
    waste_score = 1 / (waste + 1e-9)

    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 3)**2))
    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

    # Adaptive weighting based on item size relative to bin capacity.
    mean_cap = np.mean(bins_remain_cap)
    if item > mean_cap:
        waste_weight = 0.2
        fit_weight = 0.6
    else:
        waste_weight = 0.6
        fit_weight = 0.2

    capacity_weight = 1 - (waste_weight + fit_weight)

    combined_score = (waste_weight * waste_score +
                      fit_weight * fit_score +
                      capacity_weight * capacity_utilization)

    priorities[valid_bins] = combined_score

    return priorities
```
