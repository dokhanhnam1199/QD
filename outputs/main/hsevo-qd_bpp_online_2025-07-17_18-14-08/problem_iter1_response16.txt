```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several heuristics:
    1.  If a bin fits the item perfectly, assign a very high priority.
    2.  If a bin doesn't have enough capacity, assign a very low priority.
    3.  Favor bins that are already somewhat full (higher utilization).
    4.  Consider the waste (remaining capacity after packing) â€“ minimize it.
    5.  Add a tiny bit of randomness to avoid getting stuck in local optima.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # small constant to prevent division by zero

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf  # Cannot fit
        elif abs(cap - item) < epsilon:
            priorities[i] = np.inf  # Perfect fit!
        else:
            # Heuristic 1: Favor bins with higher utilization (already full)
            utilization = 1 - (cap / (cap + item)) if (cap + item)> 0 else 0
            priorities[i] += utilization * 0.5 #scale utilization factor
            
            # Heuristic 2: Minimize waste (remaining capacity after packing)
            waste = cap - item
            priorities[i] -= waste * 0.1 #scale waste factor

            # Heuristic 3: A slight preference to fill any space available
            priorities[i] += 0.01
            
    # Add tiny bit of randomness to break ties and explore different solutions
    priorities += np.random.normal(0, 0.001, size=len(bins_remain_cap))

    return priorities
```
