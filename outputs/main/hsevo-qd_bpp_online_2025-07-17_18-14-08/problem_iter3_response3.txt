```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Adaptive strategy focusing on bin utilization and fragmentation avoidance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste calculation, as before
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        # Fit score - Gaussian, favoring tight fits
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 3)**2))

        # Bin utilization - prioritize bins already somewhat full
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Fragmentation avoidance: Penalize creating small remaining spaces
        fragmentation_penalty = np.zeros_like(remaining_capacities)
        small_space_threshold = item / 4  # Adjust threshold as needed

        fragmentation_penalty[waste <= small_space_threshold] = -1  # Significant penalty for tiny waste

        # Introduce an adaptive element based on item size relative to bin sizes:
        relative_item_size = item / np.mean(remaining_capacities) #Avoid ZeroDivisionError by only calculating when valid_bins
        if relative_item_size > 0.75:
            # Large item: Prioritize bins with enough space to avoid excessive fragmentation.
            waste_score_weight = 0.2
            fit_score_weight = 0.5
            capacity_utilization_weight = 0.2
            fragmentation_penalty_weight = 0.1  # Still consider it.

        elif relative_item_size < 0.25:
            # Very small item:  Focus on bin utilization to consolidate items.
            waste_score_weight = 0.1
            fit_score_weight = 0.2
            capacity_utilization_weight = 0.6
            fragmentation_penalty_weight = 0.1

        else:
            # Medium item: Balance all factors.
            waste_score_weight = 0.4
            fit_score_weight = 0.3
            capacity_utilization_weight = 0.2
            fragmentation_penalty_weight = 0.1

        # Combine all scoring components
        combined_score = (
            waste_score_weight * waste_score +
            fit_score_weight * fit_score +
            capacity_utilization_weight * capacity_utilization +
            fragmentation_penalty_weight * fragmentation_penalty
        )

        priorities[valid_bins] = combined_score

    return priorities
```
