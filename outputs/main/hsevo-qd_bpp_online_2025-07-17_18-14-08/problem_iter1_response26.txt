```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Incorporates several heuristics:
       1. First-Fit Decreasing (FFD) inspired: Prioritizes bins with enough space, penalizes almost-full bins.
       2. Best-Fit inspired: Maximizes used space, avoiding excessive fragmentation.
       3. Prevents thrashing: Penalizes bins very close in size to the item, leading to small remaining space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority: higher remaining capacity means higher initial priority, encouraging first fit.
            priorities[i] = cap

            # Best-fit inspired: prioritize bins that are a close fit
            priorities[i] += (item / cap)

            # Prevent thrashing/fragmentation
            remaining_after_fit = cap - item
            if remaining_after_fit > 0:
                priorities[i] -= np.abs(item - cap) / (item + cap + 1e-9)  # Penalize similar sized bins. Prevent trivial division by zero
                priorities[i] -= (1/(remaining_after_fit + 0.0001)) if remaining_after_fit < 0.2 else 0 # strongly penalize if remmainder is very small

            else:
                 priorities[i] -=100  # make the bin very unattractive.
                 # Ensure it's heavily penalized for completely filling the bin or creating negative remaining capacity

        else:
            priorities[i] = -np.inf # impossible to fit -> extremely low priority.
    return priorities
```
