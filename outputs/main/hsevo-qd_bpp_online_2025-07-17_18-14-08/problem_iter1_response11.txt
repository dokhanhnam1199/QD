```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a combination of remaining capacity and waste minimization,
    inspired by the principles of efficient space-time utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero by adding a small epsilon
    epsilon = 1e-9
    
    # Calculate waste if the item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give negative infinite priority to bins that cannot contain the item
    waste[waste < -epsilon] = np.inf

    # Score based on remaining capacity
    capacity_score = bins_remain_cap / (np.sum(bins_remain_cap) + epsilon)

    #Score based on waste, higher priority when there is minimal waste
    waste_score = np.exp(-10 * waste / (item + epsilon)) #Exponential decay for waste close to 0, item scaled decay rate

    # Combine scores
    priorities = capacity_score * waste_score #Prefer bigger free bins and smaller waste

    # Set invalid bins to -inf
    priorities[waste == np.inf] = -np.inf
    
    return priorities
```
