```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Symphony of Efficiency: Optimizing bin space, one item at a time.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste calculation
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        # Fit score - Gaussian with adaptive std
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/2)**2))

        # Capacity Utilization - Normalize by total capacity
        total_capacity = np.max(bins_remain_cap)
        capacity_utilization = 1 - (remaining_capacities / total_capacity)

        # Introduce penalty if item doesn't fit perfectly
        overflow_penalty = np.where(remaining_capacities < item, -10, 0)

        # Dynamic Weight Adjustment - Adaptive weights based on item size
        item_size_ratio = item / total_capacity
        waste_weight = 0.5 - item_size_ratio/2
        fit_weight = 0.4 + item_size_ratio/2
        capacity_weight = 0.1

        # Adaptive Score based on remaining capacity variance
        capacity_std = np.std(remaining_capacities)
        capacity_diversity_score = np.exp(-capacity_std) # High std = bad

        # Combined Score
        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization + overflow_penalty + 0.05*capacity_diversity_score

        priorities[valid_bins] = combined_score

    return priorities
```
