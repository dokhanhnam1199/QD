```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, fit, and capacity utilization with item-size adaptive weighting."""
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-7)
        
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/1.2)**2))
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))
        
        #Adaptive Weighting:
        item_ratio = item / np.max(bins_remain_cap)
        fit_weight = 0.6 if item_ratio < 0.5 else 0.4
        capacity_weight = 0.4 if item_ratio < 0.5 else 0.6

        combined_score = 0.4 * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization
        priorities[valid_bins] = combined_score

    return priorities
```
