```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, near-empty penalty, and capacity considerations."""
    epsilon = 1e-9

    utilization_ratio = item / (bins_remain_cap + epsilon)
    utilization_priority = np.exp(-np.abs(utilization_ratio - 1))

    remaining_after_pack = np.clip(bins_remain_cap - item, 0, np.inf)
    empty_bin_penalty = np.exp(-5 * remaining_after_pack / (bins_remain_cap + epsilon))
    empty_bin_penalty[remaining_after_pack <= epsilon] = 0.0

    capacity_priority = np.sqrt(bins_remain_cap)

    # Introduce gravitational pull, scaled by item size and remaining capacity.
    gravitational_constant = 0.1
    gravity = item / (bins_remain_cap + gravitational_constant)
    gravity = np.nan_to_num(gravity, neginf=0)

    priorities = utilization_priority * (1 - empty_bin_penalty) * capacity_priority + 0.2 * gravity
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
