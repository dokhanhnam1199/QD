```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Invalid bins are given a very low priority
    invalid_bins = bins_remain_cap < item
    priorities[invalid_bins] = -np.inf

    # Calculate the remaining capacity after adding the item
    remaining_capacity_after_add = bins_remain_cap - item
    
    # Prioritize bins where the item fits, considering different heuristics
    
    # 1. Try to fill bins as much as possible without overfilling
    #    priorities[~invalid_bins] = remaining_capacity_after_add[~invalid_bins] # Minimize remaining capacity

    # 2. Give higher priority to bins where item is a good fit (fills a significant portion)
    fit_ratio = item / bins_remain_cap
    priorities[~invalid_bins] = fit_ratio[~invalid_bins]

    # 3. Moderate the fit_ratio by remaining capacity to avoid filling almost empty bins
    # priorities[~invalid_bins] = fit_ratio[~invalid_bins] * bins_remain_cap[~invalid_bins]

    # 4. Prioritize nearly full bins while avoiding exact full capacity situation:
    nearly_full_threshold = 0.9
    nearly_full = (fit_ratio > nearly_full_threshold) & (~invalid_bins)
    priorities[nearly_full] += 1 # A significant boost for nearly full bins.

    return priorities
```
