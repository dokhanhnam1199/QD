```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit logic with dynamic waste penalization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Perfect Fit: Highest priority
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6
    priorities[perfect_fit] += 100

    # Best Fit with scaled score based on item size
    fits = bins_remain_cap >= item
    if np.any(fits):
        waste = bins_remain_cap[fits] - item
        best_fit_idx = np.argmin(waste)
        indices = np.where(fits)[0]
        best_fit_full_idx = indices[best_fit_idx]
        priorities[best_fit_full_idx] += 50 * (1 - (item/np.max(bins_remain_cap))) # Scale reward

    # Dynamic Waste Minimization based on remaining capacity.
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins that don't fit
    priorities -= np.exp(-(waste**2) / (2 * (item / 5)**2)) * (20 * (1- np.mean(bins_remain_cap)/np.max(bins_remain_cap))) # Scale penalty

    # Utilization Ratio
    valid_bins = bins_remain_cap > 0
    utilization_ratio = item / bins_remain_cap[valid_bins]
    priorities[valid_bins] += utilization_ratio * 10

    # Avoid Nearly Full
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.1)
    priorities[nearly_full] -= 30

    return priorities
```
