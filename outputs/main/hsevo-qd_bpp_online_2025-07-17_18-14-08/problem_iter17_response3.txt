```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive bin packing priority based on waste, fit, and utilization."""
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]

    waste = np.maximum(0, remaining_capacities - item)
    waste_score = 1 / (waste + 1e-9)

    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 3)**2))
    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

    # Adaptive weights based on ratio of item size to max bin capacity
    item_ratio = item / np.max(bins_remain_cap)
    if item_ratio > 0.75:  # Large item
        waste_weight = 0.1
        fit_weight = 0.7
        capacity_weight = 0.2
    elif item_ratio < 0.25:  # Small item
        waste_weight = 0.6
        fit_weight = 0.2
        capacity_weight = 0.2
    else:  # Medium item
        waste_weight = 0.3
        fit_weight = 0.4
        capacity_weight = 0.3

    combined_score = (waste_weight * waste_score +
                      fit_weight * fit_score +
                      capacity_weight * capacity_utilization)

    priorities[valid_bins] = combined_score
    return priorities
```
