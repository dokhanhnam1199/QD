```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority based on waste, fit, and utilization."""
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste score: minimize waste
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        # Fit score: Gaussian fit
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        # Utilization score: favor filling bins
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Log ratio score
        ratios = item / remaining_capacities
        log_ratios = np.log(ratios)
        log_ratio_score = -log_ratios
        log_ratio_score = np.clip(log_ratio_score, 0, 1)  # Clip to [0, 1]

        # Adaptive weights based on item size.
        item_size_ratio = item / np.max(bins_remain_cap)
        if item_size_ratio > 0.5:
            waste_weight = 0.6
            fit_weight = 0.3
            capacity_weight = 0.1
            log_ratio_weight = 0.0  # No log ratio for large items
        elif item_size_ratio > 0.2:
            waste_weight = 0.4
            fit_weight = 0.3
            capacity_weight = 0.2
            log_ratio_weight = 0.1 # Little log ratio for medium items
        else:
            waste_weight = 0.3
            fit_weight = 0.3
            capacity_weight = 0.3
            log_ratio_weight = 0.1  # Incorporate log ratio for small items

        combined_score = (waste_weight * waste_score +
                          fit_weight * fit_score +
                          capacity_weight * capacity_utilization +
                          log_ratio_weight * log_ratio_score)

        priorities[valid_bins] = combined_score

    return priorities
```
