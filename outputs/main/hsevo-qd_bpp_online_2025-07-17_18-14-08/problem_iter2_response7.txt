```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio and remaining space considerations."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf
    feasible = ~infeasible
    if np.any(feasible):
        fill_ratios = item / bins_remain_cap[feasible]
        priorities[feasible] = 1.0 / (1.0 + np.abs(1 - fill_ratios))
        remaining_space = bins_remain_cap[feasible] - item
        small_space_penalty = np.exp(-5 * remaining_space)
        priorities[feasible] *= small_space_penalty
        
        similar_size_penalty = np.abs(bins_remain_cap[feasible] - item) / np.max(bins_remain_cap)
        priorities[feasible] *= (1- similar_size_penalty)


        if np.all(priorities[feasible] < 0.01):
           fill_ratios = item / bins_remain_cap[feasible]
           idx_min = np.argmin(fill_ratios)
           priorities[feasible][idx_min] = 0.1

    return priorities
```
