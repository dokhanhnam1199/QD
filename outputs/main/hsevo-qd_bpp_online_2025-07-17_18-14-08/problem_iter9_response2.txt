```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Elegance in entropy: Embracing uncertainty with informed choices.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid zero capacity bins and division by zero.
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)  # Default to negative infinity.

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Calculate the waste if we place the item in each bin. A lower waste
        # suggests a better fit. Avoid negative waste using max(0).
        waste = np.maximum(0, remaining_capacities - item)

        # Score based on the inverse of the waste. To give higher preference to minimal waste
        waste_score = 1 / (waste + 1e-9) # Adding a small value to avoid division by zero
        
        # Fit Score
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2)) # Gaussian Fit score favoring item to fit nicely in the bin.

        # Preference for bins that can accommodate the item. Also incorporate remaining capacity
        # to prioritize using more full bins first.
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))
        
        # Smallest Bin First Heuristic
        sbf_score = (bins_remain_cap.min() + 1e-9) / (bins_remain_cap + 1e-9)
        sbf_score = sbf_score[valid_bins]
        
        # Largest Bin First Heuristic (Considering Item Size)
        lbf_score = (bins_remain_cap.max() - item + 1e-9) / (bins_remain_cap - item + 1e-9)
        lbf_score = lbf_score[valid_bins]
        lbf_score = np.where(bins_remain_cap[valid_bins] - item >= 0, lbf_score, 0)

        # Combine the scoring components. Give weights to components
        combined_score = 0.5 * waste_score + 0.2 * fit_score + 0.1 * capacity_utilization + 0.1 * sbf_score + 0.1 * lbf_score

        priorities[valid_bins] = combined_score

    return priorities
```
