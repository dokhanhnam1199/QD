{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                fit_score_weight: float = 0.5933483607555398, capacity_utilization_weight: float = 0.9062105720810719,\n                gaussian_fit_scale: float = 1.19900708155265,  avoid_zero_division: float = 6.252288452065697e-07) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n       Tesla's embodiment of electrical elegance: A symphony of potential.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        waste_score_weight: Weight for waste score in combined score.\n        fit_score_weight: Weight for fit score in combined score.\n        capacity_utilization_weight: Weight for capacity utilization in combined score.\n        gaussian_fit_scale: Scale factor for Gaussian fit score calculation.\n        avoid_zero_division: Small value to avoid division by zero.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid zero capacity bins and division by zero.\n    valid_bins = bins_remain_cap > 0\n    priorities = np.full(bins_remain_cap.shape, -np.inf)  # Default to negative infinity.\n\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n\n        # Calculate the waste if we place the item in each bin. A lower waste\n        # suggests a better fit. Avoid negative waste using max(0).\n        waste = np.maximum(0, remaining_capacities - item)\n\n        # Score based on the inverse of the waste. To give higher preference to minimal waste\n        waste_score = 1 / (waste + avoid_zero_division) # Adding a small value to avoid division by zero\n        \n        # Fit Score\n        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/gaussian_fit_scale)**2)) # Gaussian Fit score favoring item to fit nicely in the bin.\n\n        # Preference for bins that can accommodate the item. Also incorporate remaining capacity\n        # to prioritize using more full bins first.\n        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n        # Combine the scoring components. Give weights to components\n        combined_score = waste_score_weight * waste_score + fit_score_weight * fit_score + capacity_utilization_weight * capacity_utilization\n\n        priorities[valid_bins] = combined_score\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the 1st heuristic uses a combination of perfect fit, best fit, utilization ratio, waste minimization (exponential decay), and nearly full avoidance, while the 20th heuristic simply calculates the negative log of the ratio between item size and remaining bin capacity. The 1st is much more comprehensive.\n\nComparing (2nd) vs (19th), the 2nd heuristic calculates waste score, fit score (Gaussian), capacity utilization and employs item size-adaptive weighting. The 19th heuristic calculates the negative log of the ratio between item size and remaining bin capacity. The 2nd is much more comprehensive.\n\nComparing (1st) vs (2nd), we see that the 1st heuristic directly adds/subtracts values to/from the priorities based on specific conditions like perfect fit or nearly full avoidance, whereas the 2nd heuristic uses a combination of waste score, fit score and capacity utilization score with adaptive weighting. The 2nd heuristic using score combination may have a better balance.\n\nComparing (3rd) vs (4th), the 3rd heuristic combines waste, fit, and capacity utilization scores, while the 4th heuristic considers perfect fit, best fit, utilization ratio, waste minimization and nearly full avoidance.\n\nComparing (2nd) vs (3rd), the 2nd heuristic incorporates adaptive weighting based on the size of the item relative to the bins, while the 3rd uses static weights. This suggests the dynamic weights are better.\n\nComparing (8th) vs (9th), the 8th has more parameters and weights for combined score, and the 9th is simpler.\n\nComparing (10th) vs (11th), the 10th and 8th are same, the 11th and the rest from here are similar.\n\nOverall:\nThe better heuristics consider multiple factors such as perfect fit, best fit, waste minimization, capacity utilization, and near-full avoidance. They also incorporate adaptive weighting based on item size and bin capacity. The weaker heuristics tend to focus on a single metric, such as the ratio of item size to remaining capacity. The Gaussian fit score is also effective.\n- \nOkay, I understand the goal. Let's redefine \"Current Self-Reflection\" for designing heuristics, focusing on actionable advice while avoiding pitfalls of ineffective self-reflection. Here's a refined perspective:\n\n*   **Keywords:** Multifactor scoring, adaptive weighting, contextual awareness, performance optimization.\n\n*   **Advice:** Design heuristics using weighted scoring systems that integrate multiple relevant factors. Adapt weights dynamically based on the specific problem instance and its characteristics (e.g., use item size relative to available space in bin packing).\n\n*   **Avoid:** Oversimplification, static weights, neglecting contextual information, focusing solely on waste minimization without considering other factors.\n\n*   **Explanation:** Instead of simply stating the *need* to combine factors, emphasize *how* to do it adaptively and with context-specific relevance. Focus on *dynamic* weighting schemes rather than fixed ones, promoting a more nuanced and adaptable heuristic.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}