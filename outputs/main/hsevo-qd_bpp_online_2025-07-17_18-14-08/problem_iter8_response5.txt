```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive heuristic combining waste, fit, and remaining capacity.
    Uses dynamic weighting based on item size.
    """
    valid_bins = bins_remain_cap > item
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        
        # Waste Score
        waste = remaining_capacities - item
        waste_score = 1 / (waste + 1e-9)

        # Fit Score
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 2)**2))

        # Capacity Utilization
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap)) if np.max(bins_remain_cap) >0 else 0
        
        #Adaptive Weighting
        item_ratio = item / np.mean(bins_remain_cap) if np.mean(bins_remain_cap)>0 else 0
        
        if item_ratio < 0.3:
            w_waste, w_fit, w_capacity = 0.2, 0.7, 0.1
        elif item_ratio > 0.7:
            w_waste, w_fit, w_capacity = 0.6, 0.2, 0.2
        else:
            w_waste, w_fit, w_capacity = 0.4, 0.4, 0.2
            
        combined_score = (
            w_waste * waste_score +
            w_fit * fit_score +
            w_capacity * capacity_utilization
        )

        priorities[valid_bins] = combined_score

    return priorities
```
