```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       A multifactorial, adaptive approach to bin selection, improved with dynamic adjustments.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap >= item  # Only consider bins where the item can fit. Changed from bins_remain_cap > 0

    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]

    # Waste Score: Prioritize bins with minimal waste
    waste = remaining_capacities - item
    waste_score = 1 / (waste + 1e-9)

    # Fit Score: Gaussian fit, penalize smaller gaps more
    fit_score = np.exp(-waste**2 / (2 * (item / 2)**2)) # Increased focus on precise fit

    # Capacity Utilization: Favor bins that are already somewhat full, but penalize nearly full
    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))
    nearly_full_penalty = np.exp(-100 * waste)  # Extreme penalty for being very close to full.  Heavily penalizes bins that have barely enough space
    capacity_utilization = capacity_utilization * (1 - nearly_full_penalty)

    # Remaining Capacity Score: Discourage very small remaining capacity. Consider relative, not absolute, capacity
    remaining_capacity_score = remaining_capacities / np.max(bins_remain_cap) # relative capacity, more informative
    # Adaptive Item Size Factor: More aggressive scaling
    item_size_factor = min(1, item * 2)  # Enhanced influence of item size

    # Dynamic Weighting
    waste_weight = 0.3 * (1 - item_size_factor/2)
    fit_weight = 0.5 * (0.5 + item_size_factor/2)
    capacity_weight = 0.1 * (1 - item_size_factor/2)
    remaining_weight = 0.1 * (0.5 + item_size_factor/2)

    # Combined Score
    combined_score = (
        waste_weight * waste_score +
        fit_weight * fit_score +
        capacity_weight * capacity_utilization +
        remaining_weight * remaining_capacity_score
    )
    priorities[valid_bins] = combined_score

    return priorities
```
