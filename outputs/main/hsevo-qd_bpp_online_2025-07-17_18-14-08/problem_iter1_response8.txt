```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Prioritize bins that can fit the item reasonably well
    # but aren't too empty afterwards. Avoid fragmentation.

    priorities = np.zeros_like(bins_remain_cap)

    # Give a high score if the item fits and the remaining capacity is not too large
    fit_mask = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap[fit_mask] - item

    # Scale based on how full the bin will be after packing, prefer bins close to full.
    priorities[fit_mask] = (1 - (remaining_after_fit / bins_remain_cap[fit_mask]))
    # Apply scaling to really encourage filling the almost-full bin
    priorities[fit_mask] = priorities[fit_mask]**2
    # Prefer bins whose remain_cap is a bit larger than item.
    priorities[fit_mask] = priorities[fit_mask] / (1 + abs(bins_remain_cap[fit_mask]-item))
    # Negatively penalize bins that are too large or empty before placing the item. This discourages bins with much capacity relative to item
    priorities = priorities - (bins_remain_cap / np.max(bins_remain_cap)) * 0.01

    return priorities
```
