{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                fit_score_weight: float = 0.5933483607555398, capacity_utilization_weight: float = 0.9062105720810719,\n                gaussian_fit_scale: float = 1.19900708155265,  avoid_zero_division: float = 6.252288452065697e-07) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n       Tesla's embodiment of electrical elegance: A symphony of potential.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        waste_score_weight: Weight for waste score in combined score.\n        fit_score_weight: Weight for fit score in combined score.\n        capacity_utilization_weight: Weight for capacity utilization in combined score.\n        gaussian_fit_scale: Scale factor for Gaussian fit score calculation.\n        avoid_zero_division: Small value to avoid division by zero.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid zero capacity bins and division by zero.\n    valid_bins = bins_remain_cap > 0\n    priorities = np.full(bins_remain_cap.shape, -np.inf)  # Default to negative infinity.\n\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n\n        # Calculate the waste if we place the item in each bin. A lower waste\n        # suggests a better fit. Avoid negative waste using max(0).\n        waste = np.maximum(0, remaining_capacities - item)\n\n        # Score based on the inverse of the waste. To give higher preference to minimal waste\n        waste_score = 1 / (waste + avoid_zero_division) # Adding a small value to avoid division by zero\n        \n        # Fit Score\n        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/gaussian_fit_scale)**2)) # Gaussian Fit score favoring item to fit nicely in the bin.\n\n        # Preference for bins that can accommodate the item. Also incorporate remaining capacity\n        # to prioritize using more full bins first.\n        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n        # Combine the scoring components. Give weights to components\n        combined_score = waste_score_weight * waste_score + fit_score_weight * fit_score + capacity_utilization_weight * capacity_utilization\n\n        priorities[valid_bins] = combined_score\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- *   **(1st) vs (20th):** The best heuristic uses a combination of waste score, fit score, and capacity utilization, with adaptive weighting based on the item size relative to the maximum bin capacity. It also handles the case where no bin can accommodate the item. The worst heuristic simply calculates the negative log of the ratio of item size to remaining bin capacity.\n*   **(2nd) vs (19th):** The second-best heuristic refines the approach of the best one but does not have additional logic to handle when no bins can accommodate the item. It uses slightly different adaptive weighting and fit score calculations. The 19th heuristic, like the 20th, uses only the log ratio calculation, which is overly simplistic.\n*   **(3rd) vs (18th):** The third-best heuristic is very similar to the first, including the handling of cases where no bin can fit the item. The 18th is similar to the 19th and 20th.\n*   **(4th) vs (17th):** The 4th heuristic still considers waste, fit, and capacity, and utilizes item size adaptive weighting. But this adaptive weighting mechanism compares item size with the *mean* of bin capacities, which can be less effective than comparing with the maximum capacity. The 17th uses only the log ratio.\n*   **(5th) vs (16th):** The fifth-best simplifies the adaptive weighting part of the best ones, assigning fixed weights. The 16th uses the single log ratio.\n*   **(6th) vs (15th):** The sixth-best heuristic introduces the concept of perfect fit, best fit, and utilization ratio, penalizing waste and nearly full bins. 15th is the log ratio.\n*   **(7th) vs (14th):** 7th is almost as good as first. It improves upon previous heuristics by incorporating a \"remaining capacity score\" and adjusting the weights based on the item size relative to the *average* bin capacity (a detail that makes it less effective than using max bin capacity).\n*   **(8th) vs (13th):** The 8th heuristic is similar to the top ones in that it uses waste score, fit score and capacity utilization, and provides configurable parameters, but lacks adaptive weighting based on item size, making it less flexible. The 13th calculates only the log ratio.\n*   **(9th) vs (12th):** The 9th one is just like the 2nd one. The 12th calculates the log ratio.\n*   **(10th) vs (11th):** The 10th heuristic combines perfect fit, best fit, and adaptive weighting based on average utilization. However, its adaptive weighting only adjusts based on a high average utilization, instead of item size. The 11th uses the log ratio calculation.\n\nOverall: The best heuristics consider multiple factors such as waste, fit, and capacity utilization. Adaptive weighting based on the item size relative to the bin capacities (especially max capacity) improves performance. Handling edge cases, such as no bins fitting the item, is also beneficial. Simpler heuristics that rely on a single metric such as log ratios perform poorly.\n- \nOkay, let's redefine self-reflection for designing bin packing heuristics, focusing on actionable insights and avoiding vague advice.\n\nHere's a revised structure for self-reflection:\n\n*   **Keywords:** Bin Packing, Multi-Factor, Adaptive Weights, Edge Cases.\n\n*   **Advice:** When combining factors, define *specific* interaction rules and triggers for adaptive weights *before* implementation. Consider if these strategies can be easily parallelized.\n\n*   **Avoid:** Vague statements like \"strive for balance\" or \"explore adaptive weighting\" without *specific* guidance. Don't just say \"combine factors\"; specify *how* and *why*. Avoid hand-wavy mathematical function choices.\n\n*   **Explanation:** The goal is to move from general principles to concrete design choices. Prioritize specifying conditions, decision criteria, and testable hypotheses. Focus on implementing well-defined and testable strategies, e.g., adapt weight when a particular ratio is reached and so on.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}