```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, fit, and capacity utilization for bin priority."""
    avoid_zero_division = 1e-7
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Waste score
    waste = np.maximum(0, bins_remain_cap - item)
    waste_score = 1 / (waste + avoid_zero_division)
    
    # Fit score (Gaussian)
    fit_score = np.exp(-(bins_remain_cap - item)**2 / (2 * (item)**2))
    
    # Capacity utilization score
    capacity_utilization = bins_remain_cap / np.max(bins_remain_cap + avoid_zero_division)
    
    # Combine scores with weights
    priorities = 0.4 * waste_score + 0.4 * fit_score + 0.2 * (1 - capacity_utilization) # favoring more full bins, also avoiding zero capacity
    
    # Invalidate bins that can't fit item
    priorities[bins_remain_cap < item] = -np.inf
    
    return priorities
```
