{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines waste minimization, gaussian fit score, and capacity utilization.\"\"\"\n\n    valid_bins = bins_remain_cap > 0\n    priorities = np.full(bins_remain_cap.shape, -np.inf)\n\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n\n        waste = np.maximum(0, remaining_capacities - item)\n        waste_score = 1 / (waste + 1e-9)\n\n        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))\n\n        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))\n\n        combined_score = 0.5 * waste_score + 0.4 * fit_score + 0.1 * capacity_utilization\n\n        priorities[valid_bins] = combined_score\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see a significant difference in complexity and the factors considered. The 1st heuristic employs a multi-faceted, adaptive approach, incorporating waste score, fit score, capacity utilization, and remaining capacity, with weights dynamically adjusted based on item size. In contrast, the 20th heuristic uses a simple logarithmic ratio of item size to remaining bin capacity.  (2nd best) vs (second worst) exhibits similar contrast.\n\nComparing (1st) vs (2nd), the only difference is the ranking (both codes are identical), indicating that performance differences might be more dependent on external factors or other parts of the overall algorithm using this function rather than a specific change within this function itself. (3rd) vs (4th) again shows no difference in code, so the same logic applies.\n\nComparing (second worst) vs (worst), we see that they both implement the same simple logic using log ratios. The primary difference is the presence of `import` statements for `random`, `math`, `scipy`, and `torch` which are unused. These unnecessary imports could marginally impact performance, although likely insignificantly.\n\nOverall: The better heuristics prioritize a blend of multiple factors, including waste minimization, goodness-of-fit (often modeled with a Gaussian), and capacity utilization, using adaptive weighting to adjust the influence of each factor based on the item size and bin states. They avoid overly simplistic single-factor approaches. The adaptive weighting mechanism is a key differentiator. Worse heuristics tend to rely on simpler calculations (e.g., simple ratios or log ratios) and lack adaptive components or multiple considerations.\n- \nHere's a redefined \"Current Self-Reflection\" focusing on actionable advice and avoiding pitfalls, geared towards designing better heuristics:\n\n*   **Keywords:** Multi-objective, adaptive weights, iterative refinement, problem context, performance bottlenecks.\n*   **Advice:** Begin with a simple heuristic, rigorously test, and *incrementally* add complexity only when performance requires it. Dynamically adjust factor weights based on real-time problem state.\n*   **Avoid:** Premature complexity, static weighting schemes, focusing solely on individual factors in isolation.\n*   **Explanation:** Heuristics should evolve from simple, testable foundations. Adaptation based on the *current* problem instance is key. Prioritize addressing proven performance shortcomings over preemptive complexification.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}