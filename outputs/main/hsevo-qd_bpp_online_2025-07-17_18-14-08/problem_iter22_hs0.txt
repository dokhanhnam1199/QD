import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_score_epsilon: float = 3.959095858068446e-09,
                large_item_threshold: float = 0.5200973634269517, medium_item_threshold: float = 0.24860099981304112,
                large_item_waste_weight: float = 0.6854879996011447, large_item_fit_weight: float = 0.24986063368854228, large_item_capacity_weight: float = -0.06809753427247467,
                medium_item_waste_weight: float = 0.4110748915859918, medium_item_fit_weight: float = 0.22507799589613775, medium_item_capacity_weight: float = 0.1457925023252724,
                small_item_waste_weight: float = 0.3145764359174497, small_item_fit_weight: float = 0.34614741188826953, small_item_capacity_weight: float = 0.36368075290483326,
                bin_utilization_threshold: float = 0.8624846768868799, bin_utilization_waste_adjust: float = 0.06024515460925359,
                bin_utilization_fit_adjust: float = 0.17220011165471896, bin_utilization_capacity_adjust: float = -0.20587600642525306) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Adaptive weights based on bin utilization and item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_score_epsilon: Small value to prevent division by zero in waste score calculation.
        large_item_threshold: Item size ratio above which an item is considered large.
        medium_item_threshold: Item size ratio above which an item is considered medium.
        large_item_waste_weight: Weight for waste score when item is large.
        large_item_fit_weight: Weight for fit score when item is large.
        large_item_capacity_weight: Weight for capacity utilization when item is large.
        medium_item_waste_weight: Weight for waste score when item is medium.
        medium_item_fit_weight: Weight for fit score when item is medium.
        medium_item_capacity_weight: Weight for capacity utilization when item is medium.
        small_item_waste_weight: Weight for waste score when item is small.
        small_item_fit_weight: Weight for fit score when item is small.
        small_item_capacity_weight: Weight for capacity utilization when item is small.
        bin_utilization_threshold: Bin utilization ratio above which adjustment to weights is applied.
        bin_utilization_waste_adjust: Adjustment to waste weight when bin utilization is high.
        bin_utilization_fit_adjust: Adjustment to fit weight when bin utilization is high.
        bin_utilization_capacity_adjust: Adjustment to capacity weight when bin utilization is high.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + waste_score_epsilon)

        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Adaptive weights based on item size and bin utilization.
        item_size_ratio = item / np.max(bins_remain_cap)  # Ratio of item size to max bin capacity
        bin_utilization_ratio = 1 - (remaining_capacities / np.max(bins_remain_cap)) # Current bin utilization

        # Adjust weights based on item size.
        if item_size_ratio > large_item_threshold:
            # Large item: Prioritize waste and fit to avoid fragmentation.
            waste_weight = large_item_waste_weight
            fit_weight = large_item_fit_weight
            capacity_weight = large_item_capacity_weight
        elif item_size_ratio > medium_item_threshold:
            # Medium item: Balance waste, fit, and utilization.
            waste_weight = medium_item_waste_weight
            fit_weight = medium_item_fit_weight
            capacity_weight = medium_item_capacity_weight
        else:
            # Small item: Prioritize utilization to fill bins.
            waste_weight = small_item_waste_weight
            fit_weight = small_item_fit_weight
            capacity_weight = small_item_capacity_weight
            
        # Adaptive weight adjustment based on bin utilization
        if np.any(bin_utilization_ratio > bin_utilization_threshold): # If any bin is more than 80% full, prioritize fitting.
            waste_weight += bin_utilization_waste_adjust
            fit_weight += bin_utilization_fit_adjust
            capacity_weight += bin_utilization_capacity_adjust
            
        waste_weight = np.clip(waste_weight, 0, 1) #Making sure weights are between 0 and 1
        fit_weight = np.clip(fit_weight, 0, 1)
        capacity_weight = np.clip(capacity_weight, 0, 1)

        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization

        priorities[valid_bins] = combined_score

    return priorities
