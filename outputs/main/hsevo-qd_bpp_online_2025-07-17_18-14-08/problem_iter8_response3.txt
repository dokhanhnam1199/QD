```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines waste score, fit score, and capacity utilization with adaptive weighting.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Adaptive weighting based on item size. Smaller items prioritize fit, larger prioritize waste.
        item_size_factor = min(1.0, item)  # Normalize item size to [0, 1]

        waste_weight = 0.6 + 0.3 * item_size_factor # item bigger waste more important
        fit_weight = 0.3 - 0.3 * item_size_factor # item bigger fit less important
        capacity_weight = 0.1 # constant capacity weight

        # Normalize weights
        total_weight = waste_weight + fit_weight + capacity_weight
        waste_weight /= total_weight
        fit_weight /= total_weight
        capacity_weight /= total_weight

        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization
        priorities[valid_bins] = combined_score

    return priorities
```
