```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a combination of factors to determine priority:
    1. Remaining capacity relative to item size. Bins with capacity close to the item size are preferred (First-Fit Decreasing heuristic).
    2. Waste minimization. Small waste is preferred.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate the wasted space if the item is placed in this bin.
            waste = cap - item

            # Prioritize bins where the remaining capacity is close to the item size.
            # This encourages filling bins more completely (FFD principle)
            capacity_difference = np.abs(cap - item)

            # Prioritize bins that minimize waste
            # Avoid division by zero by adding a small epsilon value.
            priorities[i] = (1.0 / (capacity_difference + 1e-9)) + (1.0 / (waste + 1e-9))


        else:
            # Bin is not suitable, assign a very low priority.
            priorities[i] = -np.inf

    return priorities
```
