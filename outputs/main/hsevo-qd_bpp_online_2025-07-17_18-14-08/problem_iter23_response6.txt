```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratios with adaptive fitting to prioritize bin selection."""

    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Fit Score based on Gaussian distribution
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        # Capacity ratio
        capacity_ratio = item / remaining_capacities
        capacity_ratio = np.clip(capacity_ratio, 0, 5)  # Clip ratio to avoid extreme values
        
        # Adaptive Weighting based on item size
        item_size_ratio = item / np.max(bins_remain_cap)

        if item_size_ratio > 0.5:
             fit_weight = 0.8
             capacity_weight = 0.2
        else:
            fit_weight = 0.5
            capacity_weight = 0.5

        combined_score = fit_weight * fit_score + capacity_weight * capacity_ratio
        priorities[valid_bins] = combined_score

    return priorities
```
