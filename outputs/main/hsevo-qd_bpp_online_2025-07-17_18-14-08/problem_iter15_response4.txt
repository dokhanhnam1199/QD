```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       An enhanced approach, combining waste minimization, fit score,
       capacity utilization, and adaptive weighting based on item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Adaptive Weighting: Adjust weights based on item size relative to bin capacity
        relative_size = item / remaining_capacities
        
        # Small items: Prioritize fit and capacity utilization
        # Large items: Prioritize waste minimization
        
        waste_weight = np.clip(relative_size, 0.1, 0.8)  # Higher weight for larger items
        fit_weight = np.clip(1 - relative_size, 0.1, 0.8) # Higher weight for smaller items
        capacity_weight = 0.2  # Fixed weight for capacity utilization
        
        # Normalize weights to sum to 1, preventing unintended bias
        total_weight = waste_weight + fit_weight + capacity_weight
        waste_weight /= total_weight
        fit_weight /= total_weight
        capacity_weight /= total_weight

        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization

        priorities[valid_bins] = combined_score

    return priorities
```
