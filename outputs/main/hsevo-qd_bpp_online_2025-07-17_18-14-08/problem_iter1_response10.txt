```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Feasibility: Prioritize bins that can actually fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] += 1

    # Remaining capacity: Prioritize bins where item fits best (minimize wasted space)
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore infeasible bins in waste calculation

    # Give higher priority to bins with smaller waste (larger negative value when inverted)
    priorities[feasible_bins] -= waste[feasible_bins]

    # Bonus for almost full bins *after* placing the item to consolidate space.
    almost_full_threshold = 0.1 # e.g., if remaining cap after placement is < 10% of bin size. Adjust for better performance
    remaining_after_placement = bins_remain_cap - item
    almost_full = (remaining_after_placement > 0) & (remaining_after_placement / bins_remain_cap <= almost_full_threshold)
    priorities[almost_full] += 2  # Substantially higher priority

    return priorities
```
