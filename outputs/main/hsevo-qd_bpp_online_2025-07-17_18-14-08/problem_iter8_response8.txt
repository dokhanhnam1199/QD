```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, fit, and adaptive capacity utilization for bin priority."""
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]
    waste = np.maximum(0, remaining_capacities - item)
    waste_score = 1 / (waste + 1e-9)

    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

    # Adaptive capacity utilization
    total_capacity = np.sum(bins_remain_cap)
    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))
    
    #Adaptive Weighting
    waste_weight = 0.5
    fit_weight = 0.4
    utilization_weight = 0.1
        
    combined_score = waste_weight * waste_score + fit_weight * fit_score + utilization_weight * capacity_utilization

    priorities[valid_bins] = combined_score
    return priorities
```
