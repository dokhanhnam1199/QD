```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Tesla's embodiment of electrical elegance: A symphony of potential.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap > 0

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste score (lower waste is better)
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        # Fit score (Gaussian distribution around ideal fit)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 3)**2))

        # Capacity utilization (higher utilization is better)
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0

        # Remaining capacity score (favor bins with smaller remaining capacity, but only if the item fits)
        remaining_capacity_score = np.where(remaining_capacities >= item, 1 - (remaining_capacities / np.max(bins_remain_cap)), -np.inf)
        remaining_capacity_score = np.nan_to_num(remaining_capacity_score, neginf=-np.inf)

        # Avoid almost full bin
        almost_full_penalty = np.where((remaining_capacities < item * 1.1) & (remaining_capacities >= item), -0.5, 0)

        # Adaptive Weighting: Dynamically adjust weights based on item size.
        if item < np.mean(bins_remain_cap) / 2:
            # Small items: prioritize fitting and utilizing capacity
            w_waste = 0.3
            w_fit = 0.4
            w_capacity = 0.2
            w_remaining = 0.1

        else:
            # Large items: prioritize minimizing waste and finding any suitable bin
            w_waste = 0.5
            w_fit = 0.2
            w_capacity = 0.1
            w_remaining = 0.2

        # Combined score
        combined_score = (
            w_waste * waste_score +
            w_fit * fit_score +
            w_capacity * capacity_utilization +
            w_remaining * remaining_capacity_score +
            almost_full_penalty
        )
        priorities[valid_bins] = combined_score

    return priorities
```
