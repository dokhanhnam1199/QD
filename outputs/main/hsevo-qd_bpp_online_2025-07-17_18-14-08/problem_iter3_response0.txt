```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Enhanced heuristic combining waste, fit, and remaining capacity considerations with adaptive elements.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        
        # Waste Score (Prioritize minimal waste)
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        # Fit Score (Gaussian-like, penalizing very tight or loose fits)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 2)**2))  # Adjusted std for potentially better fit

        # Capacity Utilization Score (Encourage filling bins)
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Remaining Capacity Score (favor bins with low remianing capacity)
        remaining_capacity_score = 1 / (remaining_capacities + 1e-9)
        
        # Adaptive Weighting based on Item Size relative to Average Bin Size
        avg_bin_capacity = np.mean(bins_remain_cap[bins_remain_cap > 0]) if np.any(bins_remain_cap > 0) else 1  # Avoid division by zero if all bins are full
        item_ratio = item / avg_bin_capacity if avg_bin_capacity > 0 else 0 # normalize the item size relative to the average bin capacity

        # Dynamic weight adjustment
        if item_ratio < 0.2:
             w_waste, w_fit, w_capacity, w_rem_cap = 0.3, 0.5, 0.1, 0.1  # Favor Fit for small items
        elif item_ratio > 0.8:
            w_waste, w_fit, w_capacity, w_rem_cap = 0.6, 0.1, 0.2, 0.1  # Favor Waste for large items
        else:
            w_waste, w_fit, w_capacity, w_rem_cap = 0.4, 0.3, 0.2, 0.1 # balanced weights otherwise

        # Combined Score with Adaptive Weights
        combined_score = (
            w_waste * waste_score +
            w_fit * fit_score +
            w_capacity * capacity_utilization +
            w_rem_cap * remaining_capacity_score
        )

        priorities[valid_bins] = combined_score

    return priorities
```
