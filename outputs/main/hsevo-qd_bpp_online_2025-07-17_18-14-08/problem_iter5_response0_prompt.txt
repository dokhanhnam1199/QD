{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit, perfect-fit, and waste minimization strategies.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Perfect Fit: Highest priority\n    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6\n    priorities[perfect_fit] += 100\n\n    # 2. Best Fit: Reward bins that fit with minimal waste.\n    fits = bins_remain_cap >= item\n    if np.any(fits):\n        waste = bins_remain_cap[fits] - item\n        best_fit_idx = np.argmin(waste)\n        indices = np.where(fits)[0]\n        best_fit_full_idx = indices[best_fit_idx]\n        priorities[best_fit_full_idx] += 50\n\n    # 3. Utilization Ratio:  Prioritize bins that are well-utilized after placing item.\n    valid_bins = bins_remain_cap > 0\n    utilization_ratio = item / bins_remain_cap[valid_bins]\n    priorities[valid_bins] += utilization_ratio * 10\n\n    # 4. Waste Minimization with Exponential Decay: Penalize larger waste values heavily.\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf  # Ignore bins that don't fit\n    priorities -= np.exp(-(waste**2) / (2 * (item / 5)**2)) * 20\n\n    # 5. Avoid Nearly Full: Discourage leaving tiny spaces.\n    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.1)\n    priorities[nearly_full] -= 30\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the top-ranked heuristic `priority_v2` combines perfect-fit, best-fit, utilization ratio, waste minimization, and avoidance of nearly full bins, assigning different priorities. Conversely, the bottom-ranked heuristic calculates priorities based solely on the negative log of the ratio between item size and remaining bin capacity. (2nd best) vs (second worst) they are similar to (1st) and (20th). Comparing (1st) vs (2nd), they are identical. (3rd) vs (4th) they are identical. Comparing (second worst) vs (worst), they are identical. Overall: The best performing heuristics use a combination of different bin-packing strategies. The lowest performing heuristics use a single metric.\n- \nOkay, let's redefine \"Current self-reflection\" focusing on actionable insights for better heuristic design in bin packing, while avoiding the vagueness of \"Ineffective self-reflection.\"\n\nHere's a refined perspective:\n\n*   **Keywords:** Adaptive strategies, combined metrics, dynamic weighting, item characteristics.\n*   **Advice:** Implement a system that adjusts the importance of different bin-packing strategies (best-fit, perfect-fit, waste minimization) based on the size distribution or other relevant features of the items being packed.\n*   **Avoid:** Relying on static or pre-determined combinations of strategies.\n*   **Explanation:** A heuristic that intelligently switches or blends approaches based on the input data's characteristics is more likely to perform well across diverse problem instances.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}