```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    A refined heuristic for bin packing, leveraging adaptive weighting.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Adaptive Weighting based on item size and remaining capacities
        item_size_ratio = item / np.max(bins_remain_cap) #Relative to largest bin
        
        #Weight adjustments
        waste_weight = 0.5 if item_size_ratio < 0.3 else 0.3 #Smaller items prioritize waste
        fit_weight = 0.4 if item_size_ratio > 0.5 else 0.6 #Larger items prioritize fit
        capacity_weight = 0.1

        # Combined Score
        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization

        priorities[valid_bins] = combined_score

    return priorities
```
