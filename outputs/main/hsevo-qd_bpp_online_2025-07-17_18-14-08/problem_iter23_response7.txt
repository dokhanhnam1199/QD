```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid approach: best-fit with log-ratio scaling, avoiding tiny spaces."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Best Fit with waste consideration
    fits = bins_remain_cap >= item
    if np.any(fits):
        waste = bins_remain_cap[fits] - item
        best_fit_idx = np.argmin(waste)
        indices = np.where(fits)[0]
        best_fit_full_idx = indices[best_fit_idx]
        priorities[best_fit_full_idx] += 50

        # Log-ratio scaling for the best-fit bin
        ratio = item / bins_remain_cap[best_fit_full_idx]
        priorities[best_fit_full_idx] -= np.log(ratio) * 10
    
    # Avoid Nearly Full
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.1)
    priorities[nearly_full] -= 30

    return priorities
```
