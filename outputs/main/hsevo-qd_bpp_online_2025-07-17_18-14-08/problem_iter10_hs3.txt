import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_score_weight: float = 0.878907617171729,
                fit_score_weight: float = -0.0037686859667788175, capacity_utilization_weight: float = 0.4673254206222357,
                gaussian_fit_scale: float = 4.580764072583249,  avoid_zero_division: float = 2.95362518632149e-07) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Tesla's embodiment of electrical elegance: A symphony of potential.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_score_weight: Weight for the waste score.
        fit_score_weight: Weight for the fit score.
        capacity_utilization_weight: Weight for the capacity utilization score.
        gaussian_fit_scale: Scale factor for the Gaussian fit score.
        avoid_zero_division: small value to avoid division by zero.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid zero capacity bins and division by zero.
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)  # Default to negative infinity.

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Calculate the waste if we place the item in each bin. A lower waste
        # suggests a better fit. Avoid negative waste using max(0).
        waste = np.maximum(0, remaining_capacities - item)

        # Score based on the inverse of the waste. To give higher preference to minimal waste
        waste_score = 1 / (waste + avoid_zero_division) # Adding a small value to avoid division by zero
        
        # Fit Score
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/gaussian_fit_scale)**2)) # Gaussian Fit score favoring item to fit nicely in the bin.

        # Preference for bins that can accommodate the item. Also incorporate remaining capacity
        # to prioritize using more full bins first.
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Combine the scoring components. Give weights to components
        combined_score = waste_score_weight * waste_score + fit_score_weight * fit_score + capacity_utilization_weight * capacity_utilization

        priorities[valid_bins] = combined_score

    return priorities
