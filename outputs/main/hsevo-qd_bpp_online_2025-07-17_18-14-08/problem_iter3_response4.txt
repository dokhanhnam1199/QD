```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       This version incorporates adaptive elements and explores different scoring strategies.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        
        # Waste Score (Inverse Waste)
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)
        
        # Fit Score (Gaussian)
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))
        
        # Capacity Utilization Score
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))
        
        # Remaining Capacity Score (Favor bins that can accommodate the item with some space)
        remaining_capacity_score = remaining_capacities / np.max(bins_remain_cap)

        # Adaptive Weighting based on item size
        if item < 0.3 * np.max(bins_remain_cap):  # small items
            w_waste = 0.4
            w_fit = 0.4
            w_cap = 0.1
            w_rem = 0.1
        elif item < 0.6 * np.max(bins_remain_cap):  # medium items
            w_waste = 0.3
            w_fit = 0.5
            w_cap = 0.1
            w_rem = 0.1
        else:  # large items
            w_waste = 0.6
            w_fit = 0.2
            w_cap = 0.1
            w_rem = 0.1

        combined_score = (w_waste * waste_score +
                          w_fit * fit_score +
                          w_cap * capacity_utilization +
                          w_rem * remaining_capacity_score)
        
        priorities[valid_bins] = combined_score

    return priorities
```
