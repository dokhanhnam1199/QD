```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Prioritizes bins based on a combination of waste, fit, and capacity utilization,
       with adaptive weighting based on item size relative to bin sizes.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)
        
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Adaptive Weighting: Adjust weights based on item size relative to average bin size
        avg_bin_size = np.mean(remaining_capacities)
        item_ratio = item / avg_bin_size

        if item_ratio < 0.2:  # Small item: prioritize fit
            w_waste, w_fit, w_cap = 0.2, 0.7, 0.1
        elif item_ratio > 0.8:  # Large item: prioritize minimizing waste
            w_waste, w_fit, w_cap = 0.7, 0.2, 0.1
        else:  # Medium item: balance all factors
            w_waste, w_fit, w_cap = 0.5, 0.3, 0.2

        combined_score = w_waste * waste_score + w_fit * fit_score + w_cap * capacity_utilization

        priorities[valid_bins] = combined_score

    return priorities
```
