```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, fit, and capacity with adaptive weighting for bin selection."""

    valid_bins = bins_remain_cap >= item
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste Score
        waste = remaining_capacities - item
        waste_score = 1 / (waste + 1e-9)

        # Fit Score
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/2)**2))

        # Capacity Utilization
        capacity_utilization = remaining_capacities / np.max(bins_remain_cap)

        # Adaptive Weighting
        item_ratio = item / np.max(bins_remain_cap)
        waste_weight = 0.5 if item_ratio < 0.4 else 0.3
        fit_weight = 0.3 if item_ratio < 0.4 else 0.5
        capacity_weight = 0.2

        combined_score = (waste_weight * waste_score +
                          fit_weight * fit_score +
                          capacity_weight * (1 - capacity_utilization))

        priorities[valid_bins] = combined_score
    else:
        valid_bins = bins_remain_cap > 0
        if np.any(valid_bins):
          remaining_capacities = bins_remain_cap[valid_bins]
          capacity_score = remaining_capacities / np.max(bins_remain_cap)
          priorities[valid_bins] = capacity_score / 10

    return priorities
```
