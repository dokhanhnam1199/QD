```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit and capacity considerations with adaptive penalization."""

    bins_remain_cap = np.clip(bins_remain_cap, 1e-6, None)

    # 1. Best Fit Score (minimize waste)
    wasted_space = bins_remain_cap - item
    fit_score = np.exp(-np.abs(wasted_space))
    fit_score = np.where(wasted_space < 0, -1e9, fit_score)

    # 2. Capacity consideration: bins almost full are penalized.
    capacity_ratio = item / bins_remain_cap
    risk_penalty = np.exp(10 * (capacity_ratio - 1))
    risk_penalty = np.clip(risk_penalty, 0, 1e9)

    # Combine the scores.
    priorities = fit_score - risk_penalty

    return priorities
```
