```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Enhanced heuristic that considers waste, fit, and bin utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]

        # Waste Score: Inverse of waste, prioritizing minimal waste.
        waste = np.maximum(0, remaining_capacities - item)
        waste_score = 1 / (waste + 1e-9)

        # Fit Score: Gaussian distribution, preferring a snug fit.
        fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item/3)**2))

        # Capacity Utilization Score: Encourages filling bins.
        capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))

        # Remaining capacity ratio
        remaining_capacity_ratio = remaining_capacities / np.max(bins_remain_cap)
        # Adaptive Weights: Adjust based on item size relative to bin sizes.
        # Emphasize fit for smaller items and waste for larger items.

        if item <= np.min(remaining_capacities): #Item smaller than smallest remaining capacity
            waste_weight = 0.3
            fit_weight = 0.6
            capacity_weight = 0.1

        elif item >= np.max(remaining_capacities): #Item larger than largest remaining capacity
            waste_weight = 0.8
            fit_weight = 0.1
            capacity_weight = 0.1

        else:
            waste_weight = 0.4
            fit_weight = 0.4
            capacity_weight = 0.2
        

        combined_score = waste_weight * waste_score + fit_weight * fit_score + capacity_weight * capacity_utilization

        priorities[valid_bins] = combined_score

    return priorities
```
