```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive weighting and best-fit to improve bin selection."""
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]
    
    # Waste Score
    waste = remaining_capacities - item
    waste_score = 1 / (waste + 1e-9)
    
    # Fit Score
    fit_score = np.exp(-(remaining_capacities - item)**2 / (2 * (item / 3)**2))

    # Capacity Utilization
    capacity_utilization = 1 - (remaining_capacities / np.max(bins_remain_cap))
    
    item_size_factor = min(1, item)
    waste_weight = 0.4 * (1 - item_size_factor/2)
    fit_weight = 0.4 * (0.5 + item_size_factor/2)
    capacity_weight = 0.2 * (1 - item_size_factor/2) # Increased
    
    combined_score = (
        waste_weight * waste_score +
        fit_weight * fit_score +
        capacity_weight * capacity_utilization
    )

    # Best Fit enhancement: Boost for the bin with minimal waste
    best_fit_idx = np.argmin(waste)
    combined_score[best_fit_idx] *= 1.2  # Boost best fit score

    priorities[valid_bins] = combined_score
    return priorities
```
