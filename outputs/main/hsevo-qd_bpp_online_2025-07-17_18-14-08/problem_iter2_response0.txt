```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity and waste, penalizes near-full bins adaptively."""
    epsilon = 1e-9
    waste = bins_remain_cap - item
    waste[waste < -epsilon] = np.inf

    capacity_score = bins_remain_cap / (np.sum(bins_remain_cap) + epsilon)
    waste_score = np.exp(-10 * waste / (item + epsilon))

    priorities = capacity_score * waste_score

    # Adaptive penalization for near-full bins
    fullness_after = np.clip(item / (bins_remain_cap + epsilon), 0, 1)
    priorities *= (1 - fullness_after)**0.5

    priorities[waste == np.inf] = -np.inf
    return priorities
```
