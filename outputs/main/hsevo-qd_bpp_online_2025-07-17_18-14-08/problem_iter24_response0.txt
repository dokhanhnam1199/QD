```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       A multifactorial, adaptive approach to bin selection, with dynamic scaling.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    remaining_capacities = bins_remain_cap[valid_bins]

    # 1. Waste Score (Scaled):  Penalize excessive waste, scaled by item size.
    waste = remaining_capacities - item
    waste_score = np.exp(-waste / (item + 1e-9))  # Exponential decay of waste penalty

    # 2. Fit Score (Sharpened): Focus on near-perfect fits, adaptive variance
    fit_score = np.exp(-waste**2 / (2 * (min(item, 0.5) / 2)**2))  # Sharper Gaussian

    # 3. Capacity Utilization (Relative to Item):  How full *relative* to the item?
    capacity_utilization = (bins_remain_cap.max() - remaining_capacities) / (bins_remain_cap.max() - item + 1e-9)  #Avoid division by zero

    # 4. Remaining Capacity (Normalized):  Favor bins with higher remaining space after packing.
    remaining_capacity_score = remaining_capacities / bins_remain_cap.max()

    # Dynamic Weighting: Adapt based on item size and remaining bin distribution.
    item_size_factor = min(1, item)

    # Volatility Score: measures how uniform are bins remaining cap. High volitility suggests we should use the fit score to reduce unbalance.
    volatility_score = np.std(bins_remain_cap[bins_remain_cap>0])/np.mean(bins_remain_cap[bins_remain_cap>0] + 1e-9)

    waste_weight = 0.25 * (1 - item_size_factor/2) # smaller item, prioritize waste
    fit_weight = 0.45 * (0.5 + item_size_factor/2) + volatility_score*0.1  # Larger items and high volitility, prioritize perfect fit.
    capacity_weight = 0.15 * (1 - item_size_factor/2)  # Smaller item, prioritzie capacity utilization
    remaining_weight = 0.15 * (0.5 + item_size_factor/2) # Larger item, prioritize remain capacity

    # Combined Score: Weighted sum of factors.
    combined_score = (
        waste_weight * waste_score +
        fit_weight * fit_score +
        capacity_weight * capacity_utilization +
        remaining_weight * remaining_capacity_score
    )

    priorities[valid_bins] = combined_score
    return priorities
```
