```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Combines distance, demand, location, and depot proximity.
    Sparsifies adaptively and normalizes the result.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance factor: shorter distances are better
    heuristic_matrix = 1 / (distance_matrix + 1e-6)

    # Demand penalty: discourage edges to high-demand nodes
    demand_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity:
                demand_penalty[i, j] = 0.01
            else:
                demand_factor = combined_demand / capacity
                demand_penalty[i, j] = max(0.1, 1 / (demand_factor + 1))
                #demand_penalty[i, j] = max(0.1, 1 - (combined_demand / capacity)**0.5)

    heuristic_matrix *= demand_penalty

    # Location-based clustering heuristic: Encourage edges between nodes that are spatially close
    spatial_proximity = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                spatial_proximity[i, j] = 1 / (np.sqrt(delta_x**2 + delta_y**2) + 1e-6)
    heuristic_matrix *= (spatial_proximity)

    # Adjust Depot Connections: Promote initial connections from the depot and return connections back to depot
    for i in range(1, n):
        heuristic_matrix[0, i] *= 2  #Increase the heuristic values from the depot
        heuristic_matrix[i, 0] *= 2  #Increase the heuristic values towards the depot

    # Adaptive Sparsification: Zero out edges based on a dynamic threshold per node
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.mean(row[row > 0]) * 0.3 if np.any(row > 0) else 0  #Dynamic threshold based on row average
        heuristic_matrix[i, row < threshold] = 0
        col = heuristic_matrix[:, i]
        threshold = np.mean(col[col > 0]) * 0.3 if np.any(col > 0) else 0
        heuristic_matrix[col < threshold, i] = 0

    # Normalize to be between 0 and 1
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
