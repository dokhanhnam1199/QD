```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Enhanced heuristic combining distance, demand, location, depot proximity, connectivity, angle cost, and adaptive sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance: Shorter distances are preferred.
    distance_factor = 1 / (distance_matrix + 1e-6)
    heuristic_matrix = distance_factor.copy()

    # 2. Demand: Penalize edges connecting to high-demand nodes, more aggressively.
    demand_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity:
                demand_penalty[i, j] = 0.001  # Severe penalty
            else:
                demand_factor = combined_demand / capacity
                demand_penalty[i, j] = max(0.05, 1 - demand_factor**2) # Non-linear penalty.

    heuristic_matrix *= demand_penalty

    # 3. Location: Encourage edges between spatially close nodes. Increased importance.
    spatial_proximity = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                spatial_proximity[i, j] = 1 / (np.sqrt(delta_x**2 + delta_y**2) + 1e-6)
    heuristic_matrix *= spatial_proximity**1.5  # Emphasize spatial proximity

    # 4. Depot Connections: Promote connections to and from the depot. Increased boost.
    depot_boost = np.ones((n, n))
    for i in range(1, n):
        depot_boost[0, i] = 1 + (2 / (distance_matrix[0, i] + 1e-6)) # Stronger boost
        depot_boost[i, 0] = 1 + (2/ (distance_matrix[i, 0] + 1e-6)) # Stronger boost
    heuristic_matrix *= depot_boost

    # 5. Connectivity Prior: Favor connections to nodes that are currently less connected. Refined.
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    connectivity_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            connectivity_boost[i, j] = (1 / (degree[i]**0.5 + 1e-6)) + (1 / (degree[j]**0.5 + 1e-6)) # Adjusted exponent
    heuristic_matrix *= connectivity_boost

    # 6. Angle Cost: Penalize sharp turns.  Encourages smoother routes.
    angle_cost = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Find a common neighbor 'k' (excluding the depot)
                best_angle_penalty = 1.0
                for k in range(1, n):
                    if k != i and k != j:
                        # Calculate vectors
                        v1 = coordinates[i] - coordinates[k]
                        v2 = coordinates[j] - coordinates[k]

                        # Calculate angle
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes > 0:
                            angle = np.arccos(dot_product / magnitudes)
                            angle_penalty = (np.pi - angle) / np.pi # Normalize 0 to 1. Smaller means better angle.
                            best_angle_penalty = min(best_angle_penalty, angle_penalty + 0.5)

                angle_cost[i,j] = best_angle_penalty

    heuristic_matrix *= angle_cost


    # 7. Adaptive Sparsification: Zero out edges based on a dynamic threshold per node. Stricter.
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.mean(row[row > 0]) * 0.15  # More aggressive
        heuristic_matrix[i, row < threshold] = 0
        col = heuristic_matrix[:, i]
        threshold = np.mean(col[col > 0]) * 0.15 # More aggressive
        heuristic_matrix[col < threshold, i] = 0

    # 8. Normalize. Improved Normalization to prevent zeroing
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val
    else:
        heuristic_matrix = np.ones((n,n)) * 0.0001 # Avoid division by zero or entirely zero matrix

    return heuristic_matrix
```
