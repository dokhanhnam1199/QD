```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """A heuristic combining distance, demand, location, depot proximity, connectivity, and adaptive sparsification, with refined weighting and adaptive components."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance: Shorter distances are preferred.
    distance_factor = 1 / (distance_matrix + 1e-6)
    heuristic_matrix = distance_factor.copy()

    # Demand: Penalize edges connecting to high-demand nodes, adaptively weighted.
    demand_penalty = np.ones((n, n))
    demand_weight = 0.7  # Weight for the demand penalty
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity:
                demand_penalty[i, j] = 0.01
            else:
                demand_penalty[i, j] = max(0.1, 1 - (combined_demand / capacity)**0.5)
    heuristic_matrix *= (1 - demand_weight + demand_weight * demand_penalty)

    # Location: Encourage edges between spatially close nodes, weighted by distance
    spatial_proximity = np.zeros((n, n))
    location_weight = 0.5 # Weight for the location proximity
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                dist = np.sqrt(delta_x**2 + delta_y**2)
                spatial_proximity[i, j] = 1 / (dist + 1e-6)
    heuristic_matrix *= (1 - location_weight + location_weight * spatial_proximity)


    # Depot Connections: Promote connections to and from the depot, distance-weighted
    depot_boost = np.ones((n, n))
    depot_weight = 0.8  # Weight for the depot boost
    for i in range(1, n):
        depot_boost[0, i] = 1 + (depot_weight / (distance_matrix[0, i] + 1e-6))
        depot_boost[i, 0] = 1 + (depot_weight / (distance_matrix[i, 0] + 1e-6))
    heuristic_matrix *= depot_boost


    # Connectivity Prior: Favor connections to nodes that are currently less connected, adaptively weighted
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    connectivity_boost = np.zeros((n, n))
    connectivity_weight = 0.3  # Weight for connectivity
    for i in range(1, n):
        for j in range(1, n):
            connectivity_boost[i, j] = (1 / (degree[i] + 1e-6)) + (1 / (degree[j] + 1e-6))
    heuristic_matrix *= (1 - connectivity_weight + connectivity_weight * connectivity_boost)


    # Adaptive Sparsification: Zero out edges based on a dynamic threshold per node, refined thresholding.
    sparsification_factor = 0.4 # Adjust sparsity aggressiveness
    for i in range(n):
        row = heuristic_matrix[i, :]
        mean_val = np.mean(row[row > 0]) if np.any(row > 0) else 0
        median_val = np.median(row[row > 0]) if np.any(row > 0) else 0
        threshold = min(mean_val, median_val) * sparsification_factor
        heuristic_matrix[i, row < threshold] = 0

        col = heuristic_matrix[:, i]
        mean_val = np.mean(col[col > 0]) if np.any(col > 0) else 0
        median_val = np.median(col[col > 0]) if np.any(col > 0) else 0
        threshold = min(mean_val, median_val) * sparsification_factor
        heuristic_matrix[col < threshold, i] = 0

    # Depot Sparsification: Remove less promising direct connections to depot to diversify routes, more adaptive threshold.
    depot_sparsification = 0.3
    depot_threshold = np.mean(heuristic_matrix[0, 1:]) * depot_sparsification
    for i in range(1, n):
        if heuristic_matrix[0, i] < depot_threshold:
            heuristic_matrix[0, i] = 0
        if heuristic_matrix[i, 0] < depot_threshold:
            heuristic_matrix[i, 0] = 0


    # Normalize
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
