```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Implements a heuristics function for the Capacitated Vehicle Routing Problem (CVRP)
    based on a combination of distance, demand, and angle considerations.

    Args:
        distance_matrix (np.ndarray):  A distance matrix (shape: n by n) where n is number of nodes.
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): A vector of customer demands (shape: n).
        capacity (int): The capacity of the vehicles.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution,
                    with the same shape as the distance_matrix.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate angular similarity to depot
    depot_x, depot_y = coordinates[0]
    angles = np.zeros(n)
    for i in range(1, n):
        dx = coordinates[i, 0] - depot_x
        dy = coordinates[i, 1] - depot_y
        angles[i] = np.arctan2(dy, dx)

    # Heuristic calculation
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance component: Favor shorter distances
                distance_factor = 1 / distance_matrix[i, j]

                # Demand component: Penalize edges connecting high-demand nodes, encourage connecting low demand nodes to higher demand nodes
                demand_factor = 1 / (demands[i] + demands[j] + 1e-6) if i != 0 and j != 0 else 1/(demands[np.argmax(demands[1:])+1] + demands[np.argmin(demands[1:])+1]+1e-6) # Add small constant to avoid division by zero, handle depot node case
                # Add special penalty for traveling from non-depot nodes back to depot to encourage depot connections for high demand customers
                if i != 0 and j == 0:
                    demand_factor *= (1 + demands[i] / capacity)
                if j != 0 and i == 0:
                    demand_factor *= (1 + demands[j] / capacity)
                # Angular component: Prefer nodes in similar direction
                angle_difference = abs(angles[i] - angles[j])
                angle_factor = 1 / (angle_difference + 0.1) # avoid division by zero
                # Combine factors, experimenting with weights to see what works best
                heuristic_matrix[i, j] = (0.6 * distance_factor + 0.3 * demand_factor + 0.1*angle_factor)

    return heuristic_matrix
```
