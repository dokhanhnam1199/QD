```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """A refined heuristic combining distance, demand, location, depot proximity, connectivity, adaptive sparsification, and pheromone-inspired intensification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance: Shorter distances are preferred (enhanced scaling).
    distance_factor = 1 / (distance_matrix + 1e-6)
    heuristic_matrix = distance_factor**2  # Sharper preference for shorter distances

    # Demand: Penalize edges connecting to high-demand nodes (more nuanced penalty).
    demand_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity:
                demand_penalty[i, j] = 0.001  # Stricter penalty for exceeding capacity
            else:
                demand_penalty[i, j] = max(0.05, 1 - (combined_demand / capacity)**0.75) # Adjusted exponent and min value

    heuristic_matrix *= demand_penalty

    # Location: Encourage edges between spatially close nodes (with adaptive weighting).
    spatial_proximity = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 0]
                spatial_proximity[i, j] = 1 / (np.sqrt(delta_x**2 + delta_y**2) + 1e-6)

    # Adaptive weighting for spatial proximity
    avg_spatial_prox = np.mean(spatial_proximity[spatial_proximity > 0]) if np.any(spatial_proximity > 0) else 1
    spatial_weight = min(0.75, avg_spatial_prox) # cap weight to avoid domination
    heuristic_matrix *= (spatial_weight * spatial_proximity + (1-spatial_weight))

    # Depot Connections: Promote connections to and from the depot (dynamic boost).
    depot_boost = np.ones((n, n))
    depot_connection_strengths = []
    for i in range(1, n):
        depot_boost[0, i] = 1 + (1 / (distance_matrix[0, i] + 1e-6))
        depot_boost[i, 0] = 1 + (1 / (distance_matrix[i, 0] + 1e-6))
        depot_connection_strengths.append(depot_boost[0, i] -1) # store boost values

    heuristic_matrix *= depot_boost

    # Connectivity Prior: Favor connections to nodes that are currently less connected (refined calculation).
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    connectivity_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            connectivity_boost[i, j] = (1 / (np.sqrt(degree[i]) + 1)) + (1 / (np.sqrt(degree[j]) + 1)) # Square root dampening

    heuristic_matrix *= connectivity_boost

    # Adaptive Sparsification: Zero out edges based on a dynamic threshold per node (more aggressive).
    for i in range(n):
        row = heuristic_matrix[i, :]
        mean_val = np.mean(row[row > 0]) if np.any(row > 0) else 0
        median_val = np.median(row[row > 0]) if np.any(row > 0) else 0
        threshold = min(mean_val, median_val) * 0.2  # More aggressive sparsification
        heuristic_matrix[i, row < threshold] = 0

        col = heuristic_matrix[:, i]
        mean_val = np.mean(col[col > 0]) if np.any(col > 0) else 0
        median_val = np.median(col[col > 0]) if np.any(col > 0] else 0
        threshold = min(mean_val, median_val) * 0.2  # More aggressive sparsification
        heuristic_matrix[col < threshold, i] = 0
    
    # Depot Sparsification: More aggressive depot sparsification
    depot_threshold = np.mean(heuristic_matrix[0, 1:]) * 0.15  # Even stricter threshold
    for i in range(1, n):
        if heuristic_matrix[0, i] < depot_threshold:
            heuristic_matrix[0, i] = 0
        if heuristic_matrix[i, 0] < depot_threshold:
            heuristic_matrix[i, 0] = 0
    
    # Pheromone-inspired Intensification: Boost edges connecting to high-demand customers from the depot.
    avg_demand = np.mean(demands[1:]) # exclude depot
    for i in range(1,n):
        if demands[i] > avg_demand:
           heuristic_matrix[0, i] *= 1.2 # small boost if customer demand is above average
           heuristic_matrix[i, 0] *= 1.2

    # Normalize
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
