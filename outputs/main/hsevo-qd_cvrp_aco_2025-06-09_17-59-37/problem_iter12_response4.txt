```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """A refined heuristic combining distance, demand, location, depot proximity, connectivity, and adaptive sparsification with iterative refinement and normalization."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance: Shorter distances are preferred.
    distance_factor = 1 / (distance_matrix + 1e-6)
    heuristic_matrix = distance_factor.copy()

    # Demand: Penalize edges connecting to high-demand nodes.
    demand_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity:
                demand_penalty[i, j] = 0.01
            else:
                demand_penalty[i, j] = max(0.1, 1 - (combined_demand / capacity)**0.5)

    heuristic_matrix *= demand_penalty

    # Location: Encourage edges between spatially close nodes.
    spatial_proximity = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                spatial_proximity[i, j] = 1 / (np.sqrt(delta_x**2 + delta_y**2) + 1e-6)
    heuristic_matrix *= (0.5 * spatial_proximity + 0.5)

    # Depot Connections: Promote connections to and from the depot, stronger boost.
    depot_boost = np.ones((n, n))
    for i in range(1, n):
        depot_boost[0, i] = 1 + (2 / (distance_matrix[0, i] + 1e-6))  # Increased boost
        depot_boost[i, 0] = 1 + (2 / (distance_matrix[i, 0] + 1e-6))  # Increased boost
    heuristic_matrix *= depot_boost

    # Connectivity Prior: Favor connections to nodes that are currently less connected. Refined.
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    connectivity_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            connectivity_boost[i, j] = (1 / (degree[i] + 1e-6)**0.5) + (1 / (degree[j] + 1e-6)**0.5)  # Reduced impact
    heuristic_matrix *= connectivity_boost
    
    # Capacity-Aware Connectivity: Penalize connections that would isolate high-demand nodes
    capacity_connectivity_penalty = np.ones((n, n))
    for i in range(1, n):
      for j in range(1, n):
        remaining_capacity_i = capacity - demands[i]
        remaining_capacity_j = capacity - demands[j]
        if remaining_capacity_i < np.mean(demands[1:]) / 2 or remaining_capacity_j < np.mean(demands[1:]) / 2:
          capacity_connectivity_penalty[i, j] = 0.5  # Reduce probability for these edges

    heuristic_matrix *= capacity_connectivity_penalty

    # Adaptive Sparsification: Zero out edges based on a dynamic threshold per node, refined threshold.
    for i in range(n):
        row = heuristic_matrix[i, :]
        mean_val = np.mean(row[row > 0]) if np.any(row > 0) else 0
        median_val = np.median(row[row > 0]) if np.any(row > 0) else 0
        threshold = min(mean_val, median_val) * 0.4  # Adjusted threshold
        heuristic_matrix[i, row < threshold] = 0

        col = heuristic_matrix[:, i]
        mean_val = np.mean(col[col > 0]) if np.any(col > 0) else 0
        median_val = np.median(col[col > 0]) if np.any(col > 0) else 0
        threshold = min(mean_val, median_val) * 0.4  # Adjusted threshold
        heuristic_matrix[col < threshold, i] = 0
        
    # Depot Sparsification: Remove less promising direct connections to depot to diversify routes.
    depot_threshold = np.mean(heuristic_matrix[0, 1:]) * 0.2
    for i in range(1, n):
        if heuristic_matrix[0, i] < depot_threshold:
            heuristic_matrix[0, i] = 0
        if heuristic_matrix[i, 0] < depot_threshold:
            heuristic_matrix[i, 0] = 0
    
    # Iterative Refinement: Re-evaluate based on connectivity and demand after initial sparsification
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    for i in range(1,n):
      if degree[i] < 1:
        # if a node has very low connections, boost edges to nodes with compatible demands
        for j in range(1,n):
          if i != j:
            combined_demand = demands[i] + demands[j]
            if combined_demand <= capacity:
              heuristic_matrix[i, j] += 0.1  # Small boost to potential connections

    # Normalize
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
