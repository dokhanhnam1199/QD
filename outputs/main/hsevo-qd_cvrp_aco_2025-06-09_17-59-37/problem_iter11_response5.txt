```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, demand, location, and sparsification for CVRP."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance: Shorter distances preferred.
    heuristic_matrix = 1 / (distance_matrix + 1e-6)

    # Demand: Penalize high-demand edges.
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity:
                heuristic_matrix[i, j] *= 0.1
            else:
                heuristic_matrix[i, j] /= (combined_demand / capacity + 1)

    # Location: Spatial proximity.
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                dist = np.sqrt((coordinates[i, 0] - coordinates[j, 0])**2 + (coordinates[i, 1] - coordinates[j, 1])**2)
                heuristic_matrix[i, j] *= 1 / (dist + 1e-6)

    # Depot Connections: Promote depot edges.
    for i in range(1, n):
        heuristic_matrix[0, i] *= 2
        heuristic_matrix[i, 0] *= 2

    # Adaptive Sparsification
    sparsification_factor = 0.3
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.mean(row[row > 0]) * sparsification_factor if np.any(row > 0) else 0
        heuristic_matrix[i, row < threshold] = 0
        col = heuristic_matrix[:, i]
        threshold = np.mean(col[col > 0]) * sparsification_factor if np.any(col > 0) else 0
        heuristic_matrix[col < threshold, i] = 0
    
    # Remove distant high demand edges
    for i in range(1, n):
        for j in range(i + 1, n):
             if distance_matrix[i, j] > np.mean(distance_matrix) and (demands[i] + demands[j]) > capacity/2:
                heuristic_matrix[i, j] = 0
                heuristic_matrix[j, i] = 0

    # Normalize
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
