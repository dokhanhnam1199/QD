```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristic: Combines distance, demand, location, connectivity, and adaptive sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance: Shorter distances are preferred.
    distance_factor = 1 / (distance_matrix + 1e-6)
    heuristic_matrix = distance_factor.copy()

    # Demand: Penalize edges connecting to high-demand nodes, consider route capacity.
    demand_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
              combined_demand = demands[i] + demands[j]
              if combined_demand > capacity:
                  demand_penalty[i, j] = 0.01  # Heavily penalize exceeding capacity
              else:
                  demand_factor = combined_demand / capacity
                  demand_penalty[i, j] = max(0.1, 1 - demand_factor)  # Prefer routes using more capacity, but not exceeding it

    heuristic_matrix *= demand_penalty

    # Location: Encourage edges between spatially close nodes, but less so for high demand
    spatial_proximity = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                dist = np.sqrt(delta_x**2 + delta_y**2)
                spatial_proximity[i, j] = 1 / (dist + 1e-6) #Invert distance
                spatial_proximity[i, j] /= (demands[i] + demands[j])**0.25 #Reduce impact if high demand
    heuristic_matrix *= spatial_proximity

    # Depot Connections: Promote connections to and from the depot, adjust based on demand.
    depot_boost = np.ones((n, n))
    for i in range(1, n):
        depot_boost[0, i] = 1 + (1 / (distance_matrix[0, i] + 1e-6)) / demands[i]**0.5
        depot_boost[i, 0] = 1 + (1 / (distance_matrix[i, 0] + 1e-6)) / demands[i]**0.5
    heuristic_matrix *= depot_boost

    # Connectivity Prior: Favor connections to nodes that are currently less connected, also consider distance
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    connectivity_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            connectivity_boost[i, j] = (1 / (degree[i] + 1e-6)) + (1 / (degree[j] + 1e-6))
            connectivity_boost[i,j] /= (distance_matrix[i,j]+1e-6)**0.5  #Penalize if long edges
    heuristic_matrix *= connectivity_boost

    # Adaptive Sparsification: Zero out edges based on a dynamic threshold per node, and adaptive parameter.
    sparsification_factor = 0.3
    for i in range(n):
        row = heuristic_matrix[i, :]
        # Calculate threshold based on both mean and median.
        mean_val = np.mean(row[row > 0]) if np.any(row > 0) else 0
        median_val = np.median(row[row > 0]) if np.any(row > 0) else 0
        threshold = min(mean_val, median_val) * sparsification_factor  # Dynamic threshold based on both.
        heuristic_matrix[i, row < threshold] = 0

        col = heuristic_matrix[:, i]
        mean_val = np.mean(col[col > 0]) if np.any(col > 0) else 0
        median_val = np.median(col[col > 0]) if np.any(col > 0) else 0
        threshold = min(mean_val, median_val) * sparsification_factor
        heuristic_matrix[col < threshold, i] = 0

    # Depot Sparsification: Remove less promising direct connections to depot to diversify routes.
    depot_threshold = np.mean(heuristic_matrix[0, 1:]) * 0.2
    for i in range(1, n):
        if heuristic_matrix[0, i] < depot_threshold:
            heuristic_matrix[0, i] = 0
        if heuristic_matrix[i, 0] < depot_threshold:
            heuristic_matrix[i, 0] = 0

    # Additional Sparsification: Remove edges that connect distant and high demand nodes
    for i in range(1, n):
        for j in range(i + 1, n):
             if distance_matrix[i, j] > np.mean(distance_matrix) and (demands[i] + demands[j]) > capacity/2:
                heuristic_matrix[i, j] = 0
                heuristic_matrix[j, i] = 0
                
    # Normalize
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
