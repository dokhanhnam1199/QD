```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for the Capacitated Vehicle Routing Problem (CVRP) using stochastic solution sampling.

    This heuristic combines distance, demand, and angular considerations to estimate the promise of including an edge
    in a solution.  It favors shorter distances, lower demand impact, and avoids sharp turns that might indicate
    inefficient routes.  It also incorporates some random exploration.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic components:
    distance_penalty = 1 / (distance_matrix + 1e-6)  # Avoid division by zero
    demand_factor = np.outer(demands, demands) / (capacity**2 + 1e-6) # demand_factor represents the combined demand for each pair of nodes, normalized by the vehicle capacity. This term penalizes routes that include nodes with high combined demands.
    #angular_penalty = np.zeros_like(distance_matrix, dtype=float)
    #angle_penalty = 1.0
    # Calculate angular penalties (discourage sharp turns).

    for i in range(n):
        for j in range(n):
            if i != j:
              heuristic_matrix[i, j] = distance_penalty[i, j] * (1 - demand_factor[i, j])

    # Introduce randomness for exploration
    randomness = np.random.rand(n, n) * 0.1
    heuristic_matrix = heuristic_matrix + randomness

    # Mask the depot node connections a bit
    heuristic_matrix[0, :] = heuristic_matrix[0, :] * 0.8
    heuristic_matrix[:, 0] = heuristic_matrix[:, 0] * 0.8

    #Zero diagonal
    np.fill_diagonal(heuristic_matrix, 0)

    return heuristic_matrix
```
