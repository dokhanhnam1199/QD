```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Implements a heuristic for the Capacitated Vehicle Routing Problem (CVRP)
    based on a combination of distance, demand, and angular considerations.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each node (n).  demands[0] should be 0.
        capacity (int): Capacity of each vehicle.

    Returns:
        np.ndarray: Edge weights reflecting desirability (n x n). High weight means more promising.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Heuristic 1: Inverse Distance - Basic proximity
    distance_heuristic = 1 / (distance_matrix + 1e-9) # avoid division by zero
    heuristics += distance_heuristic

    # Heuristic 2: Demand Consideration - Penalize edges to high-demand nodes from the depot early on.
    demand_heuristic = np.ones_like(distance_matrix)
    for i in range(1, n): # Skip depot
        demand_factor = max(0.1, 1 - demands[i] / capacity) # Scale the effect
        demand_heuristic[0, i] = demand_factor
        demand_heuristic[i, 0] = demand_factor
    heuristics *= demand_heuristic

    # Heuristic 3: Angle Consideration - Prefer forward progress from depot.
    angle_heuristic = np.ones_like(distance_matrix)
    depot_coords = coordinates[0]
    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                continue
            # Calculate angles from depot to each node
            angle_i = np.arctan2(coordinates[i, 1] - depot_coords[1], coordinates[i, 0] - depot_coords[0])
            angle_j = np.arctan2(coordinates[j, 1] - depot_coords[1], coordinates[j, 0] - depot_coords[0])

            # Angle between nodes i and j seen from the depot.  Consider circularity with abs()
            delta_angle = np.abs(angle_i - angle_j)
            delta_angle = np.minimum(delta_angle, 2*np.pi - delta_angle) # shortest angular distance on a circle.


            #If nodes i and j have about the same angle as viewed from the depot
            if delta_angle < np.pi / 4: #45 degrees, in radians
                angle_heuristic[i,j] = 1.2 #slightly preferred
            else:
                 angle_heuristic[i,j] = 0.8 #slightly penalize routes with big angle differences

    heuristics *= angle_heuristic
    # Heuristic 4: Node closeness to the depot.  If too close, make connection less favorable because it's possibly part of a poorly constructed shortest path search that simply goes to nearby nodes rather than strategically planning to route all demands.
    close_node_penalty = np.ones_like(distance_matrix)
    close_threshold = np.mean(distance_matrix[0, 1:]) / 2 # half the average distance to a node from the depot
    for i in range(1, n):
        if distance_matrix[0, i] < close_threshold:
            close_node_penalty[0,i] = 0.5
            close_node_penalty[i,0] = 0.5

    heuristics *= close_node_penalty
    #Symmetrize
    heuristics = (heuristics + heuristics.T) / 2.0

    # Zero out the diagonal to prevent self-loops.
    np.fill_diagonal(heuristics, 0)

    return heuristics
```
