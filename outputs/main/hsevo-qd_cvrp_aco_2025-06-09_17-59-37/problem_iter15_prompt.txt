{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\nCurrent heuristics:\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"Combines distance, demand, location, depot proximity, connectivity, angle, and adaptive sparsification.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # 1. Distance Factor\n    distance_factor = 1 / (distance_matrix + 1e-6)\n    heuristic_matrix = distance_factor.copy()\n\n    # 2. Demand Penalty\n    demand_penalty = np.ones((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            combined_demand = demands[i] + demands[j]\n            if combined_demand > capacity:\n                demand_penalty[i, j] = 0.001\n            else:\n                demand_penalty[i, j] = max(0.05, 1 - (combined_demand / capacity)**0.75)\n\n    heuristic_matrix *= demand_penalty\n\n    # 3. Spatial Proximity\n    spatial_proximity = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                delta_x = coordinates[i, 0] - coordinates[j, 0]\n                delta_y = coordinates[i, 1] - coordinates[j, 1]\n                spatial_proximity[i, j] = 1 / (np.sqrt(delta_x**2 + delta_y**2) + 1e-6)\n    heuristic_matrix *= (0.7 * spatial_proximity + 0.3)\n\n    # 4. Depot Connections\n    depot_boost = np.ones((n, n))\n    for i in range(1, n):\n        depot_boost[0, i] = 1 + (2 / (distance_matrix[0, i] + 1e-6))\n        depot_boost[i, 0] = 1 + (2 / (distance_matrix[i, 0] + 1e-6))\n    heuristic_matrix *= depot_boost\n\n    # 5. Connectivity Prior\n    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)\n    connectivity_boost = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            connectivity_boost[i, j] = (0.7 / (degree[i] + 1e-6)) + (0.3 / (degree[j] + 1e-6))\n    heuristic_matrix *= connectivity_boost\n\n    # 6. Angle Consideration\n    angle_penalty = np.ones((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                vector1 = coordinates[i] - coordinates[0]\n                vector2 = coordinates[j] - coordinates[i]\n                vector1 /= np.linalg.norm(vector1) + 1e-6\n                vector2 /= np.linalg.norm(vector2) + 1e-6\n                dot_product = np.dot(vector1, vector2)\n                angle = np.arccos(np.clip(dot_product, -1.0, 1.0))\n\n                angle_penalty[i, j] = 1 - (angle / np.pi)**2\n\n    heuristic_matrix *= angle_penalty\n\n    # 7. Adaptive Sparsification\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        mean_val = np.mean(row[row > 0]) if np.any(row > 0) else 0\n        median_val = np.median(row[row > 0]) if np.any(row > 0) else 0\n        threshold = min(mean_val, median_val) * 0.2\n        heuristic_matrix[i, row < threshold] = 0\n\n        col = heuristic_matrix[:, i]\n        mean_val = np.mean(col[col > 0]) if np.any(col > 0) else 0\n        median_val = np.median(col[col > 0]) if np.any(col > 0) else 0\n        threshold = min(mean_val, median_val) * 0.2\n        heuristic_matrix[col < threshold, i] = 0\n\n    # 8. Depot Sparsification\n    depot_threshold = np.mean(heuristic_matrix[0, 1:]) * 0.1\n    for i in range(1, n):\n        if heuristic_matrix[0, i] < depot_threshold:\n            heuristic_matrix[0, i] = 0\n        if heuristic_matrix[i, 0] < depot_threshold:\n            heuristic_matrix[i, 0] = 0\n\n    # 9. Normalize\n    max_val = np.max(heuristic_matrix)\n    if max_val > 0:\n        heuristic_matrix = heuristic_matrix / max_val\n\n    return heuristic_matrix\n\nNow, think outside the box write a mutated function `heuristics_v2` better than current version.\nYou can use some hints below:\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, here's a reframed \"Current Self-Reflection\" aimed at designing better CVRP heuristics, focusing on actionable advice and avoiding pitfalls:\n\n*   **Keywords:** Multifactorial, Adaptive, Iterative Refinement, Normalization, Sparsification, Performance Evaluation, Problem Characteristics.\n*   **Advice:** Build heuristics incrementally by adding relevant factors (distance, demand, location) to a basic heuristic. Employ adaptive sparsification and normalization techniques. Evaluate impact of each change using different problem characteristics.\n*   **Avoid:** Premature complexity, static parameters, neglecting normalization, solely distance-based approaches, ignoring problem-specific nuances.\n*   **Explanation:** Effective heuristics require a balanced approach. Start simple, add complexity deliberately, and always measure performance across diverse CVRP instances.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}