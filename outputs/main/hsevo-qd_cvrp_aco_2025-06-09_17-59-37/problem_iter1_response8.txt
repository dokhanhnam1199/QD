```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """

    n = distance_matrix.shape[0]
    prior = np.zeros_like(distance_matrix)

    # Calculate distance-based prior
    prior = 1 / (distance_matrix + 1e-9)  # Add small constant to avoid division by zero

    # Modify based on demand - discourage edges that would quickly exceed capacity
    for i in range(n):
        for j in range(n):
            if i != 0 and j != 0: # skip links to/from the depot node

                if demands[i] + demands[j] > capacity * 0.75:  #A link would exceed a significant amount of vehicle capacity
                  prior[i,j] *= 0.1   # heavily discourage
                elif demands[i] + demands[j] > capacity * 0.5:
                  prior[i,j] *= 0.5 # discourage somewhat

    # Encourage edges close to the depot to ensure connectivity with routes
    depot_distances = distance_matrix[0, :]
    for i in range(1, n):
        prior[0, i] += 0.5 * (1 / (depot_distances[i] + 1e-9))
        prior[i, 0] = prior[0, i] #ensure symmetry

    # Increase the weights to connect relatively close nodes.  If the path is too long, the cost increase.

    for i in range(1, n):
        for j in range(1,n):
            if i!= j:
                if distance_matrix[i,j] < np.mean(distance_matrix):
                    prior[i, j] *= 1.2
                    prior[j,i] = prior[i,j]

    return prior
```
