```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Enhanced heuristic combining distance, demand, location, depot proximity, connectivity, adaptive sparsification, and pheromone-inspired reinforcement."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance Factor (Inverse Distance)
    distance_factor = 1 / (distance_matrix + 1e-6)
    heuristic_matrix = distance_factor.copy()

    # 2. Demand Penalty: Increased sensitivity to exceeding capacity.
    demand_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity:
                demand_penalty[i, j] = 0.001  # Harsh penalty for exceeding capacity
            else:
                demand_factor = combined_demand / capacity
                demand_penalty[i, j] = max(0.05, 1 - demand_factor**2)  # Non-linear penalty
    heuristic_matrix *= demand_penalty

    # 3. Spatial Proximity: Emphasize local connections.
    spatial_proximity = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                spatial_proximity[i, j] = np.exp(-np.sqrt(delta_x**2 + delta_y**2) / np.mean(distance_matrix)) # Gaussian kernel based on average distance

    heuristic_matrix *= spatial_proximity

    # 4. Depot Attraction: Strengthen depot connections, especially for distant nodes.
    depot_boost = np.ones((n, n))
    avg_distance_to_depot = np.mean(distance_matrix[0, 1:]) #Average distance to depot
    for i in range(1, n):
        depot_boost[0, i] = 1 + np.exp(-distance_matrix[0, i] / avg_distance_to_depot)
        depot_boost[i, 0] = 1 + np.exp(-distance_matrix[i, 0] / avg_distance_to_depot)

    heuristic_matrix *= depot_boost
    

    # 5. Connectivity & Balancing: Favor less-connected nodes, balance route lengths
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    connectivity_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            connectivity_boost[i, j] = 0.5/ (degree[i] + 1e-6) + 0.5/(degree[j] + 1e-6)
            
    heuristic_matrix *= connectivity_boost

    # 6. Adaptive Sparsification: More aggressive sparsification based on percentiles and depot distance
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.percentile(row[row > 0], 30) if np.any(row > 0) else 0  # 30th percentile
        heuristic_matrix[i, row < threshold] = 0

        col = heuristic_matrix[:, i]
        threshold = np.percentile(col[col > 0], 30) if np.any(col > 0) else 0
        heuristic_matrix[col < threshold, i] = 0
        
    # 7. Depot Connection sparsification:  Remove less promising connections aggressively.
    depot_threshold = np.percentile(heuristic_matrix[0, 1:], 40)
    for i in range(1, n):
        if heuristic_matrix[0, i] < depot_threshold:
            heuristic_matrix[0, i] = 0
        if heuristic_matrix[i, 0] < depot_threshold:
            heuristic_matrix[i, 0] = 0
            
    # 8. Pheromone-inspired Reinforcement: Give a tiny boost to short edges connected to high demand nodes.
    for i in range(1,n):
      for j in range(1,n):
          if distance_matrix[i, j] < np.mean(distance_matrix):
              heuristic_matrix[i, j] += 0.01 * (demands[i] + demands[j])/capacity
        
    # 9. Normalize
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
