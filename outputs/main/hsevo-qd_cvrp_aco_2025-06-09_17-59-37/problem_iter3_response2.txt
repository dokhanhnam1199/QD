```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Enhanced heuristics for CVRP, combining distance, demand, location,
    and depot proximity with adaptive sparsification.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance: Shorter distances are strongly preferred.
    heuristic_matrix = 1 / (distance_matrix + 1e-6)

    # Demand: Penalize edges connecting to high-demand nodes, with increased penalty for exceeding capacity.
    for i in range(1, n):
        for j in range(1, n):
            total_demand = demands[i] + demands[j]
            demand_factor = total_demand / capacity
            if total_demand > capacity:
                heuristic_matrix[i, j] /= (demand_factor * 10)  # Strong discouragement
            else:
                heuristic_matrix[i, j] /= (demand_factor + 1)  # Moderate discouragement


    # Location: Encourage edges between spatially close nodes.
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                spatial_proximity = 1 / (np.sqrt(delta_x**2 + delta_y**2) + 1e-6)
                heuristic_matrix[i, j] *= spatial_proximity

    # Depot Connections: Promote connections to and from the depot, with a distance-based decay.
    for i in range(1, n):
        # Encourage connections to depot, penalizing longer depot connections slightly.
        heuristic_matrix[0, i] *= (2 / (distance_matrix[0, i] + 1))
        heuristic_matrix[i, 0] *= (2 / (distance_matrix[i, 0] + 1))

    # Refine Sparsification: Adaptive threshold based on quantiles and distance.
    threshold_quantile = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25) # More aggressive sparsification
    mean_distance = np.mean(distance_matrix)
    sparsification_factor = 0.1  # Control sparsification aggressiveness

    for i in range(n):
        for j in range(n):
            if heuristic_matrix[i, j] < threshold_quantile + (distance_matrix[i,j]/mean_distance)*sparsification_factor:
                heuristic_matrix[i, j] = 0

    # Normalize
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
