{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Generates prior indicators for edges in a CVRP solution using a combination of distance,\n    demand, and location-based factors. This heuristic prioritizes shorter distances,\n    penalizes edges connecting to nodes with high demand if close to full capacity,\n    and introduces a spatial clustering preference based on node proximity.\n\n    Args:\n        distance_matrix (np.ndarray): n x n distance matrix.\n        coordinates (np.ndarray): n x 2 array of node coordinates.\n        demands (np.ndarray): n array of customer demands.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: n x n array of prior indicators for each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance-based heuristic: Inverse of distance (shorter distances preferred). Add small constant to avoid division by zero\n    heuristic_matrix = 1 / (distance_matrix + 1e-6)\n\n    # Demand-based heuristic: Penalize edges connecting to high-demand nodes, especially when capacity is tight.\n    # Depot node (index 0) shouldn't influence this, so handle it separately\n    for i in range(1, n): # Skip depot for source nodes in loop\n        for j in range(1, n):  #Skip depot for destination nodes in loop. Demands[0]=0\n            demand_factor = (demands[i] + demands[j]) / (2 * capacity)  #Normalized Combined Demand\n            if (demands[i] + demands[j]) > capacity:\n                heuristic_matrix[i,j] /= demand_factor*10 # Strongly discourage paths exceeding the capacity\n            else:\n                heuristic_matrix[i,j] /= (demand_factor+1)  # Penalize edges to bigger combined demands\n\n    # Location-based clustering heuristic: Encourage edges between nodes that are spatially close, based on an adjusted \"gravitational\" effect\n    # This step biases towards forming local clusters, improving chance of using vehicle space efficiently. Avoids creating very long paths\n    for i in range(1, n):\n        for j in range(1, n):\n            if i!=j:\n                delta_x = coordinates[i, 0] - coordinates[j, 0]\n                delta_y = coordinates[i, 1] - coordinates[j, 1]\n                spatial_proximity = 1 / (np.sqrt(delta_x**2 + delta_y**2) + 1e-6)  # Smaller distance = Larger number\n                heuristic_matrix[i,j] *= (spatial_proximity)\n\n\n    # Adjust Depot Connections: Promote initial connections from the depot and return connections back to depot\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 2  #Increase the heuristic values from the depot\n        heuristic_matrix[i, 0] *= 2  #Increase the heuristic values towards the depot\n\n    # Normalize to be between 0 and 1 (optional but useful for certain sampling methods)\n    max_val = np.max(heuristic_matrix)\n    heuristic_matrix = heuristic_matrix / max_val\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates distance, demand, and location, while the worst only considers distance. Comparing (2nd) vs (19th), we observe the same pattern. Comparing (1st) vs (2nd), they are identical, suggesting no measurable difference or that these are equivalent implementations. Comparing (3rd) vs (4th) they also are identical. Comparing (second worst) vs (worst), they are identical and both only use distance. Overall: The top heuristics leverage multiple factors for a more informed edge prioritization, while the bottom ones rely solely on distance, demonstrating the importance of considering demand and spatial relationships for CVRP heuristics.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's redefine \"Current self-reflection\" to make it more effective for designing CVRP heuristics. We'll focus on actionable insights and avoid vague generalities.\n\nHere's a revised approach:\n\n*   **Keywords:** Algorithmic bias, performance metrics, search space exploration, parameter tuning, benchmark datasets.\n*   **Advice:** Quantify the impact of individual factors (distance, demand, location) on heuristic performance. Use A/B testing with rigorous statistical analysis to identify significant improvements.\n*   **Avoid:** Vague statements like \"incorporate diverse factors\" or \"experiment with different weighting strategies\" without clear metrics or experimentation plans.\n*   **Explanation:** Move from intuition-based design to data-driven optimization. Focus on measurable improvements in solution quality and computational efficiency across a range of benchmark instances.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}