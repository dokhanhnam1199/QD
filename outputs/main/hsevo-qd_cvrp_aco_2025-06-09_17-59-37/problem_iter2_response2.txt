```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, demand, and location for edge prioritization."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance heuristic
    heuristic_matrix = 1 / (distance_matrix + 1e-6)

    # Demand heuristic
    for i in range(1, n):
        for j in range(1, n):
            demand_factor = (demands[i] + demands[j]) / (2 * capacity)
            if (demands[i] + demands[j]) > capacity:
                heuristic_matrix[i,j] /= demand_factor*10
            else:
                heuristic_matrix[i,j] /= (demand_factor+1)

    # Location heuristic
    for i in range(1, n):
        for j in range(1, n):
            if i!=j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                spatial_proximity = 1 / (np.sqrt(delta_x**2 + delta_y**2) + 1e-6)
                heuristic_matrix[i,j] *= (spatial_proximity)

    # Depot connections
    for i in range(1, n):
        heuristic_matrix[0, i] *= 2
        heuristic_matrix[i, 0] *= 2

    # Sparsify: remove edges that are very long and connect high demand
    for i in range(n):
      for j in range(n):
        if distance_matrix[i,j] > np.mean(distance_matrix) + np.std(distance_matrix) and (demands[i] + demands[j]) > capacity/2:
          heuristic_matrix[i,j] = 0

    # Normalize
    max_val = np.max(heuristic_matrix)
    heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
