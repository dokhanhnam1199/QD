```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Enhanced heuristics for CVRP combining distance, demand, location, and depot proximity.
    Sparsifies matrix using adaptive thresholding and normalizes for stochastic sampling.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance: Shorter distances are preferred.  Apply a power law to emphasize very short distances.
    heuristic_matrix = 1 / (distance_matrix**1.5 + 1e-6)

    # Demand: Penalize edges connecting to high-demand nodes.  Make penalty non-linear.
    for i in range(1, n):
        for j in range(1, n):
            total_demand = demands[i] + demands[j]
            demand_ratio = total_demand / capacity
            if total_demand > capacity:
                heuristic_matrix[i, j] /= (1 + 100 * (demand_ratio - 1)**2)  # Heavy penalty for exceeding capacity
            else:
                heuristic_matrix[i, j] /= (1 + 5 * demand_ratio**2)  # Moderate penalty

    # Location: Encourage edges between spatially close nodes. Use squared distance to penalize longer edges more.
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                squared_distance = delta_x**2 + delta_y**2
                heuristic_matrix[i, j] *= np.exp(-squared_distance / (2 * np.mean(distance_matrix)**2))  # Gaussian-like proximity bonus

    # Depot Connections: Heavily promote connections to and from the depot, but decay with distance
    for i in range(1, n):
        heuristic_matrix[0, i] *= 5 * np.exp(-distance_matrix[0, i] / np.mean(distance_matrix[0, 1:]))
        heuristic_matrix[i, 0] *= 5 * np.exp(-distance_matrix[i, 0] / np.mean(distance_matrix[0, 1:]))


    # Sparsify: Zero out edges with low heuristic values using a more adaptive threshold.
    # Use a combination of mean and median for a robust threshold.

    threshold = 0.1 * np.mean(heuristic_matrix) + 0.05 * np.median(heuristic_matrix)
    heuristic_matrix[heuristic_matrix < threshold] = 0


    # Normalize
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) # Handle the case where all values are zero

    return heuristic_matrix
```
