{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\nCurrent heuristics:\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Combines distance, demand, and location for edge prioritization in CVRP.\n    Sparsifies matrix by zeroing out unpromising edges.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance: Shorter distances are preferred.\n    heuristic_matrix = 1 / (distance_matrix + 1e-6)\n\n    # Demand: Penalize edges connecting to high-demand nodes.\n    for i in range(1, n):\n        for j in range(1, n):\n            demand_factor = (demands[i] + demands[j]) / (2 * capacity)\n            if (demands[i] + demands[j]) > capacity:\n                heuristic_matrix[i,j] /= demand_factor*10 # Discourage edges exceeding the capacity\n            else:\n                heuristic_matrix[i,j] /= (demand_factor+1)\n\n    # Location: Encourage edges between spatially close nodes.\n    for i in range(1, n):\n        for j in range(1, n):\n            if i!=j:\n                delta_x = coordinates[i, 0] - coordinates[j, 0]\n                delta_y = coordinates[i, 1] - coordinates[j, 1]\n                spatial_proximity = 1 / (np.sqrt(delta_x**2 + delta_y**2) + 1e-6)\n                heuristic_matrix[i,j] *= (spatial_proximity)\n\n    # Depot Connections: Promote connections to and from the depot\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 2\n        heuristic_matrix[i, 0] *= 2\n\n    # Sparsify: Zero out edges with low heuristic values.\n    threshold = np.mean(heuristic_matrix) * 0.2  #Dynamic Threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Normalize\n    max_val = np.max(heuristic_matrix)\n    heuristic_matrix = heuristic_matrix / max_val\n\n    return heuristic_matrix\n\nNow, think outside the box write a mutated function `heuristics_v2` better than current version.\nYou can use some hints below:\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's redefine \"Current self-reflection\" to make it more effective for designing CVRP heuristics. We'll focus on actionable insights and avoid vague generalities.\n\nHere's a revised approach:\n\n*   **Keywords:** Algorithmic bias, performance metrics, search space exploration, parameter tuning, benchmark datasets.\n*   **Advice:** Quantify the impact of individual factors (distance, demand, location) on heuristic performance. Use A/B testing with rigorous statistical analysis to identify significant improvements.\n*   **Avoid:** Vague statements like \"incorporate diverse factors\" or \"experiment with different weighting strategies\" without clear metrics or experimentation plans.\n*   **Explanation:** Move from intuition-based design to data-driven optimization. Focus on measurable improvements in solution quality and computational efficiency across a range of benchmark instances.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}