```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """A more sophisticated heuristic for the CVRP, combining multiple factors with adaptive scaling."""

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Base: Inverse Distance with a small offset to avoid division by zero
    heuristic_matrix = 1 / (distance_matrix + 1e-6)

    # 2. Demand Penalty: Higher penalty for exceeding capacity significantly
    demand_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity:
                demand_penalty[i, j] = 0.01 * (capacity / (combined_demand + 1e-6))**2  # Significantly reduced score
            else:
                demand_penalty[i, j] = 1 - (combined_demand / capacity)**0.5  # Reduced exponent

    heuristic_matrix *= demand_penalty

    # 3. Depot Proximity Boost: Prioritize connections to the depot, especially for distant nodes
    depot_boost = np.ones((n, n))
    for i in range(1, n):
        depot_boost[0, i] = 1 + (1 / (distance_matrix[0, i] / np.mean(distance_matrix[0, 1:]) + 1e-6)) # adaptive scaling
        depot_boost[i, 0] = 1 + (1 / (distance_matrix[i, 0] / np.mean(distance_matrix[0, 1:]) + 1e-6))

    heuristic_matrix *= depot_boost

    # 4. Angle Preference: Favor smaller angles (more direct routes)
    angle_preference = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector1 = coordinates[i] - coordinates[0]  # Vectors from depot
                vector2 = coordinates[j] - coordinates[0]
                norm1 = np.linalg.norm(vector1) + 1e-6
                norm2 = np.linalg.norm(vector2) + 1e-6

                cos_angle = np.dot(vector1, vector2) / (norm1 * norm2)
                cos_angle = np.clip(cos_angle, -1.0, 1.0)  # Ensure within valid range

                angle = np.arccos(cos_angle)
                angle_preference[i, j] = 1 - (angle / np.pi)  # Smaller angle = higher preference

    heuristic_matrix *= angle_preference

    # 5. Connectivity Encouragement: Encourage forming connected components, but with a decay
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    connectivity_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            connectivity_boost[i, j] = 0.5 / (degree[i] + degree[j] + 1)  # Avoids division by zero and ensures some boost

    heuristic_matrix *= (1 + connectivity_boost * 0.5) # lower multiplier to avoid over-emphasizing

    # 6. Adaptive Sparsification: Remove edges with significantly lower scores dynamically
    threshold_multiplier = 0.1  # Reduced multiplier for less aggressive sparsification
    for i in range(n):
        row = heuristic_matrix[i, :]
        non_zero_row = row[row > 0]
        if non_zero_row.size > 0:
            threshold = np.mean(non_zero_row) * threshold_multiplier
            heuristic_matrix[i, row < threshold] = 0

        col = heuristic_matrix[:, i]
        non_zero_col = col[col > 0]
        if non_zero_col.size > 0:
            threshold = np.mean(non_zero_col) * threshold_multiplier
            heuristic_matrix[col < threshold, i] = 0
            
    # 7. Normalize the heuristic matrix
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
