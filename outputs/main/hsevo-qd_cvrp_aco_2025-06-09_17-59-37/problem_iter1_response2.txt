```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP)
    that combines distance, demand, and angular considerations to estimate
    the desirability of including each edge in a solution.

    Args:
        distance_matrix (np.ndarray): A matrix of distances between nodes.
        coordinates (np.ndarray): Coordinates of each node.
        demands (np.ndarray): Demand of each node.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: A matrix of heuristic values, where higher values
                    indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Parameters to tune the heuristic
    distance_weight = 1.0
    demand_weight = 1.0
    angle_weight = 1.0

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            distance_heuristic = distance_weight / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero

            # Demand-based heuristic: penalize edges connecting to nodes
            # that would likely cause capacity violations
            demand_heuristic = 1.0 - demand_weight * (demands[i] + demands[j]) / (2.0 * capacity + 1e-6)
            demand_heuristic = max(0.0, demand_heuristic)  # Ensure non-negative

            # Angle heuristic: penalize sharp turns. More promising to visit nodes in straight lines.
            # Reference: https://en.wikipedia.org/wiki/Law_of_cosines
            if i == 0:
              angle_heuristic = 1.0
            else:
              x1, y1 = coordinates[i]
              x2, y2 = coordinates[j]
              x0, y0 = coordinates[0]

              a = distance_matrix[i,j]
              b = np.sqrt((x1-x0)**2 + (y1-y0)**2)
              c = np.sqrt((x2-x0)**2 + (y2-y0)**2)

              if b == 0 or c == 0: # if i or j is the same as depot, this results to 0/0
                angle_heuristic = 1.0
              else:
                cos_angle = (b**2 + c**2 - a**2) / (2 * b * c + 1e-6) # 1e-6 to avoid dividing by 0.
                cos_angle = np.clip(cos_angle, -1, 1) # Clip the value between -1 and 1 in case numerical error
                angle = np.arccos(cos_angle) # Angle in radians
                angle_heuristic = 1.0 - angle_weight * np.abs(angle - np.pi/2) / (np.pi/2 + 1e-6) # 1e-6 prevents zero div
                angle_heuristic = max(0.0, angle_heuristic)

            heuristic_matrix[i, j] = distance_heuristic * demand_heuristic * angle_heuristic

    return heuristic_matrix
```
