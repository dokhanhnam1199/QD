```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Enhanced heuristic combining distance, demand, location, depot proximity, connectivity,
    adaptive sparsification, and angle prioritization, with improved normalization and baseline.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Baseline: Inverse Distance
    distance_factor = 1 / (distance_matrix + 1e-6)
    heuristic_matrix = distance_factor.copy()

    # 2. Demand Penalty: Dynamically adjust penalty based on remaining capacity
    demand_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                combined_demand = demands[i] + demands[j]
                if combined_demand > capacity:
                    demand_penalty[i, j] = 0.01  # Very harsh penalty
                else:
                    demand_factor = combined_demand / capacity
                    demand_penalty[i, j] = 1 - demand_factor  # Linear penalty based on capacity usage
    heuristic_matrix *= demand_penalty

    # 3. Spatial Proximity: Euclidean distance-based encouragement
    spatial_proximity = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[i, 1]
                spatial_proximity[i, j] = np.exp(-0.5 * (np.sqrt(delta_x**2 + delta_y**2) / np.mean(distance_matrix)))  # Gaussian kernel
    heuristic_matrix *= spatial_proximity

    # 4. Depot Affinity: Strong encouragement for depot connections
    depot_boost = np.ones((n, n))
    for i in range(1, n):
        depot_boost[0, i] = 1 + np.exp(-distance_matrix[0, i] / np.mean(distance_matrix[0, 1:]))
        depot_boost[i, 0] = 1 + np.exp(-distance_matrix[i, 0] / np.mean(distance_matrix[1:, 0]))
    heuristic_matrix *= depot_boost

    # 5. Connectivity: Favor edges connecting to less connected nodes
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    connectivity_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
             connectivity_boost[i, j] = 1 / (np.sqrt(degree[i] * degree[j]) + 1e-6) # Geometric mean
    heuristic_matrix *= connectivity_boost

    # 6. Angle Prioritization: Penalize sharp turns
    angle_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[0]
                cos_angle = np.dot(vector_i, vector_j) / (np.linalg.norm(vector_i) * np.linalg.norm(vector_j) + 1e-6)
                angle_penalty[i, j] = 0.5 + 0.5 * cos_angle  # Penalize sharp angles (values close to -1)
    heuristic_matrix *= angle_penalty

    # 7. Adaptive Sparsification: Aggressively sparsify based on local thresholds
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.quantile(row[row > 0], 0.25) if np.any(row > 0) else 0 # 25th percentile
        heuristic_matrix[i, row < threshold] = 0
        col = heuristic_matrix[:, i]
        threshold = np.quantile(col[col > 0], 0.25) if np.any(col > 0) else 0 # 25th percentile
        heuristic_matrix[col < threshold, i] = 0

    # 8. Enhanced Normalization: Robust normalization
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix[heuristic_matrix > 0]) if np.any(heuristic_matrix > 0) else 0
    if max_val > 0:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)

    return heuristic_matrix
```
