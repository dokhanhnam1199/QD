import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int,
                  demand_penalty_threshold: float = 0.05687516749965645,
                  demand_factor_min: float = 0.4557838889912134,
                  spatial_proximity_epsilon: float = 4.2696604808119046e-06,
                  depot_boost_factor: float = 1.4256045685234398,
                  connectivity_boost_epsilon: float = 1.4442935722383418e-06,
                  adaptive_sparsification_factor: float = 0.24533248312865955,
                  depot_sparsification_factor: float = 0.22354992710256844,
                  distance_epsilon: float = 9.87359257425585e-06) -> np.ndarray:
    """Enhanced heuristic combining distance, demand, location, depot proximity, connectivity and adaptive sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance: Shorter distances are preferred.
    distance_factor = 1 / (distance_matrix + distance_epsilon)
    heuristic_matrix = distance_factor.copy()

    # Demand: Penalize edges connecting to high-demand nodes.
    demand_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity:
                demand_penalty[i, j] = demand_penalty_threshold
            else:
                demand_factor = combined_demand / capacity
                demand_penalty[i, j] = max(demand_factor_min, 1 / (demand_factor + 1)) # Use inverse of demand factor

    heuristic_matrix *= demand_penalty

    # Location: Encourage edges between spatially close nodes.
    spatial_proximity = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                spatial_proximity[i, j] = 1 / (np.sqrt(delta_x**2 + delta_y**2) + spatial_proximity_epsilon)
    heuristic_matrix *= spatial_proximity

    # Depot Connections: Promote connections to and from the depot
    depot_boost = np.ones((n, n))
    for i in range(1, n):
        depot_boost[0, i] = 1 + (depot_boost_factor / (distance_matrix[0, i] + distance_epsilon))
        depot_boost[i, 0] = 1 + (depot_boost_factor / (distance_matrix[i, 0] + distance_epsilon))
    heuristic_matrix *= depot_boost

    # Connectivity Prior: Favor connections to nodes that are currently less connected
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    connectivity_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            connectivity_boost[i, j] = (1 / (degree[i] + connectivity_boost_epsilon)) + (1 / (degree[j] + connectivity_boost_epsilon))
    heuristic_matrix *= connectivity_boost
    
    # Adaptive Sparsification: Zero out edges based on a dynamic threshold per node
    # and introduce more agressive and dynamic sparsification
    for i in range(n):
        row = heuristic_matrix[i, :]
        # Calculate threshold based on both mean and median.
        mean_val = np.mean(row[row > 0]) if np.any(row > 0) else 0
        median_val = np.median(row[row > 0]) if np.any(row > 0) else 0
        threshold = min(mean_val, median_val) * adaptive_sparsification_factor  # Dynamic threshold based on both.
        heuristic_matrix[i, row < threshold] = 0

        col = heuristic_matrix[:, i]
        mean_val = np.mean(col[col > 0]) if np.any(col > 0) else 0
        median_val = np.median(col[col > 0]) if np.any(col > 0) else 0
        threshold = min(mean_val, median_val) * adaptive_sparsification_factor
        heuristic_matrix[col < threshold, i] = 0

    # Depot Sparsification: Remove less promising direct connections to depot to diversify routes.
    depot_threshold = np.mean(heuristic_matrix[0, 1:]) * depot_sparsification_factor
    for i in range(1, n):
        if heuristic_matrix[0, i] < depot_threshold:
            heuristic_matrix[0, i] = 0
        if heuristic_matrix[i, 0] < depot_threshold:
            heuristic_matrix[i, 0] = 0
            
    # Normalize
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
