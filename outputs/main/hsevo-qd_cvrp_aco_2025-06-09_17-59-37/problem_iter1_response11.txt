```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for CVRP based on distance, demand, and node proximity to depot.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate a combined score for each edge
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Proximity to depot - Nodes closer to the depot are generally more desirable to visit
                depot_distance_penalty = (distance_matrix[0, i] + distance_matrix[0, j]) # shorter is better.
                # Demand factor: Penalize edges connecting nodes with high individual demands relative to capacity
                demand_penalty = demands[i] + demands[j]
                # edge_penalty = demands[i] + demands[j] #+ distance_matrix[i, j] # penalize both demands and distance
                #edge_demand_factor = np.exp( (demands[i] + demands[j] - 2 * demands.mean() ))
                edge_distance_factor = distance_matrix[i, j] / distance_matrix.mean()
                heuristic_matrix[i, j] = (1 / (edge_distance_factor + 1e-9))  *  np.exp(-depot_distance_penalty/distance_matrix.mean())  * np.exp(-demand_penalty/(2* demands.mean()))
                    #* np.exp(-demands[i]/(0.5 * capacity + 1e-9))  * np.exp(-demands[j]/(0.5 * capacity + 1e-9))
                   # / (1+ depot_distance_penalty)
                  #* np.exp(-(demands[i] + demands[j])/(1 * capacity + 1e-9))# * (1/distance_matrix[i, j])#*(1 / edge_penalty )# (1 / (distance_matrix[i, j] + 1e-9))
                   #np.exp(-demands[i]/ (capacity/n+ 1e-9) ) # scale demands with vehicle capacity
                  #* np.exp(-demands[j]/ (capacity/n + 1e-9) ) # scale demands with vehicle capacity.
                  #np.exp(-(distance_matrix[i, 0]+ distance_matrix[j,0])/ (distance_matrix.mean()+ 1e-9))
    return heuristic_matrix
```
