```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for CVRP based on a combination of distance, demand,
    and geometric considerations. It prioritizes shorter distances, penalizes
    edges that would quickly exhaust vehicle capacity, and considers the
    geometric spread of customers.

    Args:
        distance_matrix: Distance between all pairs of nodes.
        coordinates:  Euclidean coordinates of each node.
        demands: Demand of each node.
        capacity: Vehicle capacity.

    Returns:
        A matrix of heuristic values for each edge. Higher values indicate
        more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters for tuning the heuristic (experiment!)
    distance_weight = 0.5
    demand_weight = 0.3
    angle_weight = 0.2  # penalize sharp turns if high value is already established

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            distance_heuristic = (1 / distance_matrix[i, j]) if distance_matrix[i, j] > 0 else 0  # Avoid division by zero, prioritize shorter routes
            demand_heuristic = 1 - (demands[j] / capacity)  # Penalize edges that lead to high capacity usage immediately
            demand_heuristic = max(0.01, demand_heuristic)  # Avoid zero values or negative values

            # Geometric consideration - penalize sharp turns
            angle_heuristic = 1.0
            if i != 0 and j != 0:
                # Calculate angle between (depot -> i) and (i -> j) vectors.
                vector_depot_i = coordinates[i] - coordinates[0]
                vector_i_j = coordinates[j] - coordinates[i]

                # Normalize vectors
                vector_depot_i = vector_depot_i / np.linalg.norm(vector_depot_i) if np.linalg.norm(vector_depot_i) > 0 else vector_depot_i
                vector_i_j = vector_i_j / np.linalg.norm(vector_i_j) if np.linalg.norm(vector_i_j) > 0 else vector_i_j

                dot_product = np.dot(vector_depot_i, vector_i_j)
                angle = np.arccos(np.clip(dot_product, -1.0, 1.0)) # arccos input must be clipped

                angle_heuristic = 1 - (angle / np.pi)  # Penalize large angles - encourages smoother routes locally

            # Combine the heuristics
            heuristic_matrix[i, j] = (distance_weight * distance_heuristic +
                                      demand_weight * demand_heuristic +
                                      angle_weight * angle_heuristic)

    return heuristic_matrix
```
