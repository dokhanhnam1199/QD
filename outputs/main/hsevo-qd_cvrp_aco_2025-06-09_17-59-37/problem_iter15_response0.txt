```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """A multi-faceted heuristic for the CVRP, combining distance, demand, location,
    adaptive sparsification, and iterative refinement with angle and connectivity
    considerations."""

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Base: Inverse Distance
    distance_factor = 1 / (distance_matrix + 1e-6)
    heuristic_matrix = distance_factor.copy()

    # 2. Demand Penalty (refined)
    demand_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                combined_demand = demands[i] + demands[j]
                if combined_demand > capacity:
                    demand_penalty[i, j] = 0.001  # Very low probability
                else:
                    # Adjust penalty based on how close to capacity
                    demand_penalty[i, j] = max(0.05, 1 - (combined_demand / capacity)**0.5) # Reduced exponent

    heuristic_matrix *= demand_penalty

    # 3. Location-aware Enhancement (using coordinates)
    spatial_proximity = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                dist = np.sqrt(np.sum((coordinates[i] - coordinates[j])**2))
                spatial_proximity[i, j] = 1 / (dist + 1e-6)

    heuristic_matrix *= (0.6 * spatial_proximity + 0.4) # Adjusted weights


    # 4. Depot Affinity (prioritize connections to depot) - Stronger Boost
    depot_boost = np.ones((n, n))
    for i in range(1, n):
        depot_boost[0, i] = 1 + (3 / (distance_matrix[0, i] + 1e-6))  # Increased boost
        depot_boost[i, 0] = 1 + (3 / (distance_matrix[i, 0] + 1e-6))  # Increased boost

    heuristic_matrix *= depot_boost

    # 5. Connectivity Adjustment (dynamic degree consideration)
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    connectivity_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            connectivity_boost[i, j] = (0.6 / (degree[i] + 1e-6)) + (0.4 / (degree[j] + 1e-6)) # Adjusted weights

    heuristic_matrix *= connectivity_boost

    # 6. Angle Prior (penalize sharp turns at depot)
    angle_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                v1 = coordinates[i] - coordinates[0]  # Vector from depot to i
                v2 = coordinates[j] - coordinates[i]  # Vector from i to j

                v1 /= np.linalg.norm(v1) + 1e-6
                v2 /= np.linalg.norm(v2) + 1e-6
                dot_product = np.dot(v1, v2)
                angle = np.arccos(np.clip(dot_product, -1.0, 1.0))

                angle_penalty[i, j] = 1 - (angle / np.pi)**1.5 # Increased exponent


    heuristic_matrix *= angle_penalty

    # 7. Adaptive Sparsification (iterative thresholding)
    for iteration in range(2):  # Multiple passes for refinement
        for i in range(n):
            row = heuristic_matrix[i, :]
            mean_val = np.mean(row[row > 0]) if np.any(row > 0) else 0
            median_val = np.median(row[row > 0]) if np.any(row > 0) else 0
            threshold = min(mean_val, median_val) * (0.1 + iteration * 0.05) # Dynamic threshold

            heuristic_matrix[i, row < threshold] = 0

            col = heuristic_matrix[:, i]
            mean_val = np.mean(col[col > 0]) if np.any(col > 0) else 0
            median_val = np.median(col[col > 0]) if np.any(col > 0) else 0
            threshold = min(mean_val, median_val) * (0.1 + iteration * 0.05) # Dynamic threshold

            heuristic_matrix[col < threshold, i] = 0

    # 8. Depot Sparsification - More Aggressive
    depot_threshold = np.mean(heuristic_matrix[0, 1:]) * 0.05 # Reduced threshold
    for i in range(1, n):
        if heuristic_matrix[0, i] < depot_threshold:
            heuristic_matrix[0, i] = 0
        if heuristic_matrix[i, 0] < depot_threshold:
            heuristic_matrix[i, 0] = 0


    # 9. Final Normalization (crucial)
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
