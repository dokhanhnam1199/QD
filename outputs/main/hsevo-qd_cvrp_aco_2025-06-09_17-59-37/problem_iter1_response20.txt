```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version considers distance, demand, and angular proximity to the depot.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate angles relative to the depot (node 0)
    depot_x, depot_y = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Base heuristic: inverse distance
                heuristic_value = 1 / distance_matrix[i, j]

                # Demand-based penalty: penalize edges connecting nodes with high demand
                heuristic_value *= np.exp(- (demands[i] + demands[j]) / capacity)

                # Angular proximity bonus: favor edges that connect nodes with similar angles to the depot
                angle_diff = np.abs(angles[i] - angles[j])
                angle_diff = np.minimum(angle_diff, 2 * np.pi - angle_diff)  # Normalize to [0, pi]
                heuristic_value *= np.exp(-angle_diff)

                heuristic_matrix[i, j] = heuristic_value

    return heuristic_matrix
```
