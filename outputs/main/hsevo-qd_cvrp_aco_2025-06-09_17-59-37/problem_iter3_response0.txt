```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Enhanced heuristics for CVRP, combining distance, demand, location, and depot proximity with adaptive sparsification.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance: Shorter distances are preferred (reciprocal).
    distance_heuristic = 1 / (distance_matrix + 1e-6)

    # Demand: Penalize edges connecting to high-demand nodes, considering combined demand.
    demand_heuristic = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            demand_factor = combined_demand / capacity
            if combined_demand > capacity:
                demand_heuristic[i, j] = 0.1  # Significantly discourage if capacity is exceeded
            else:
                demand_heuristic[i, j] = max(0.2, 1 - demand_factor) # Scales between 0.2 and 1.

    # Location: Encourage edges between spatially close nodes.
    location_heuristic = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                spatial_distance = np.sqrt(delta_x**2 + delta_y**2)
                location_heuristic[i, j] = 1 / (spatial_distance + 1e-6)

    # Depot Proximity: Bias towards connecting to the depot early and late in routes
    depot_heuristic = np.ones((n, n))
    for i in range(1, n):
        depot_heuristic[0, i] = 1.5  # Slightly higher priority for depot connections
        depot_heuristic[i, 0] = 1.5

    # Combine heuristics with adjusted weights based on their relative importance
    heuristic_matrix = (
        0.5 * distance_heuristic
        + 0.2 * demand_heuristic
        + 0.15 * location_heuristic
        + 0.15 * depot_heuristic
    )

    # Adaptive Sparsification: More aggressive sparsification.
    threshold = np.mean(heuristic_matrix) * 0.4 # Increased from 0.2 to 0.4 to be more sparse
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalize the heuristic matrix to a range between 0 and 1
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
