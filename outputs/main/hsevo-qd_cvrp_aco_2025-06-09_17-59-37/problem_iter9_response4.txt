```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Enhanced heuristic combining distance, demand, location, depot proximity, connectivity, clustering and adaptive sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance Factor: Shorter distances are preferred.
    distance_factor = 1 / (distance_matrix + 1e-6)
    heuristic_matrix = distance_factor.copy()

    # 2. Demand Penalty: Penalize edges connecting to high-demand nodes relative to vehicle capacity.
    demand_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            demand_factor = combined_demand / capacity
            if combined_demand > capacity:
                demand_penalty[i, j] = 0.01  # Hard constraint penalty
            else:
                demand_penalty[i, j] = max(0.1, (1 - demand_factor)**2)  # Non-linear penalty
    heuristic_matrix *= demand_penalty

    # 3. Spatial Proximity: Encourage edges between spatially close nodes.
    spatial_proximity = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                dist = np.sqrt(delta_x**2 + delta_y**2)
                spatial_proximity[i, j] = np.exp(-dist / np.mean(distance_matrix))  # Gaussian-like proximity
    heuristic_matrix *= spatial_proximity

    # 4. Depot Attraction: Boost connections to/from the depot, especially for distant nodes.
    depot_boost = np.ones((n, n))
    mean_depot_dist = np.mean(distance_matrix[0, 1:])
    for i in range(1, n):
        depot_boost[0, i] = 1 + np.exp(-distance_matrix[0, i] / mean_depot_dist)
        depot_boost[i, 0] = 1 + np.exp(-distance_matrix[i, 0] / mean_depot_dist)
    heuristic_matrix *= depot_boost

    # 5. Connectivity Prior: Favor connections to nodes that are currently less connected. Adjusted degree.
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    connectivity_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            connectivity_boost[i, j] = (1 / (np.sqrt(degree[i]) + 1e-6)) + (1 / (np.sqrt(degree[j]) + 1e-6))
    heuristic_matrix *= connectivity_boost

    # 6. Demand Clustering Preference: Promote connections between nodes with similar demand.
    demand_similarity = np.zeros((n, n))
    mean_demand = np.mean(demands[1:])
    for i in range(1, n):
        for j in range(1, n):
            demand_similarity[i, j] = np.exp(-abs(demands[i] - demands[j]) / mean_demand)
    heuristic_matrix *= demand_similarity

    # 7. Adaptive Sparsification: Zero out edges based on a dynamic threshold per node and globally.
    global_threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.1  # Stricter global threshold

    for i in range(n):
        row = heuristic_matrix[i, :]
        mean_val = np.mean(row[row > 0]) if np.any(row > 0) else 0
        median_val = np.median(row[row > 0]) if np.any(row > 0) else 0
        threshold = min(mean_val, median_val) * 0.2 # more agressive threshold

        heuristic_matrix[i, row < max(threshold, global_threshold)] = 0  # Apply both thresholds

        col = heuristic_matrix[:, i]
        mean_val = np.mean(col[col > 0]) if np.any(col > 0) else 0
        median_val = np.median(col[col > 0]) if np.any(col > 0) else 0
        threshold = min(mean_val, median_val) * 0.2
        heuristic_matrix[col < max(threshold, global_threshold), i] = 0

    # 8. Depot Sparsification: Remove less promising direct connections to the depot dynamically.
    depot_connections = np.concatenate((heuristic_matrix[0, 1:], heuristic_matrix[1:, 0]))
    depot_threshold = np.mean(depot_connections[depot_connections > 0]) * 0.15  # Dynamic threshold
    for i in range(1, n):
        if heuristic_matrix[0, i] < depot_threshold:
            heuristic_matrix[0, i] = 0
        if heuristic_matrix[i, 0] < depot_threshold:
            heuristic_matrix[i, 0] = 0

    # 9. Normalize the heuristic matrix to a 0-1 scale.
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
