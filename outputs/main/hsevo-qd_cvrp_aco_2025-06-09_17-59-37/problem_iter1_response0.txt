```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP)
    that combines distance, demand, and savings to prioritize edges.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes.
        coordinates (np.ndarray): Coordinates of each node.
        demands (np.ndarray): Demand of each node.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Calculate savings for each pair of customers
    savings = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings[j, i] = savings[i, j]

    # Combine distance, demand, and savings to create heuristic values
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0  # No self-loops
            else:
                # Prioritize edges with shorter distances
                distance_factor = 1 / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0  # Avoid division by zero
                
                # Prioritize edges connecting nodes with smaller demands
                demand_factor = 1 / (demands[i] + demands[j]) if (demands[i] + demands[j]) > 0 else 0

                # Prioritize edges with high savings
                savings_factor = savings[i, j]

                # Combine factors, giving more weight to the distance
                heuristics[i, j] = 0.6 * distance_factor + 0.2 * demand_factor + 0.2 * savings_factor

    return heuristics
```
