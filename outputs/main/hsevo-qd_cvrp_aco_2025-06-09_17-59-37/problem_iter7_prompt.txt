{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    \"\"\"\n    Combines distance, demand, and location for edge prioritization in CVRP.\n    Sparsifies matrix by zeroing out unpromising edges.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance: Shorter distances are preferred.\n    heuristic_matrix = 1 / (distance_matrix + 1e-6)\n\n    # Demand: Penalize edges connecting to high-demand nodes.\n    for i in range(1, n):\n        for j in range(1, n):\n            demand_factor = (demands[i] + demands[j]) / (2 * capacity)\n            if (demands[i] + demands[j]) > capacity:\n                heuristic_matrix[i,j] /= demand_factor*10 # Discourage edges exceeding the capacity\n            else:\n                heuristic_matrix[i,j] /= (demand_factor+1)\n\n    # Location: Encourage edges between spatially close nodes.\n    for i in range(1, n):\n        for j in range(1, n):\n            if i!=j:\n                delta_x = coordinates[i, 0] - coordinates[j, 0]\n                delta_y = coordinates[i, 1] - coordinates[j, 1]\n                spatial_proximity = 1 / (np.sqrt(delta_x**2 + delta_y**2) + 1e-6)\n                heuristic_matrix[i,j] *= (spatial_proximity)\n\n    # Depot Connections: Promote connections to and from the depot\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 2\n        heuristic_matrix[i, 0] *= 2\n\n    # Sparsify: Zero out edges with low heuristic values.\n    threshold = np.mean(heuristic_matrix) * 0.2  #Dynamic Threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Normalize\n    max_val = np.max(heuristic_matrix)\n    heuristic_matrix = heuristic_matrix / max_val\n\n    return heuristic_matrix\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}