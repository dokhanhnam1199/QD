```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, demand, depot proximity, and adaptive sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance Factor
    distance_factor = 1 / (distance_matrix + 1e-6)
    heuristic_matrix = distance_factor.copy()

    # Demand Penalty
    demand_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity:
                demand_penalty[i, j] = 0.01
            else:
                demand_penalty[i, j] = max(0.05, 1 - (combined_demand / capacity)**0.75)
    heuristic_matrix *= demand_penalty

    # Depot Connections Boost
    depot_boost = np.ones((n, n))
    for i in range(1, n):
        depot_boost[0, i] = 1 + (1 / (distance_matrix[0, i] + 1e-6))
        depot_boost[i, 0] = 1 + (1 / (distance_matrix[i, 0] + 1e-6))
    heuristic_matrix *= depot_boost

    # Adaptive Sparsification
    for i in range(n):
        row = heuristic_matrix[i, :]
        mean_val = np.mean(row[row > 0]) if np.any(row > 0) else 0
        threshold = mean_val * 0.2
        heuristic_matrix[i, row < threshold] = 0
        col = heuristic_matrix[:, i]
        mean_val = np.mean(col[col > 0]) if np.any(col > 0) else 0
        threshold = mean_val * 0.2
        heuristic_matrix[col < threshold, i] = 0
    # Normalize
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
