{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"Enhanced heuristic combining distance, demand, location, depot proximity, connectivity and adaptive sparsification.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance: Shorter distances are preferred.\n    distance_factor = 1 / (distance_matrix + 1e-6)\n    heuristic_matrix = distance_factor.copy()\n\n    # Demand: Penalize edges connecting to high-demand nodes.\n    demand_penalty = np.ones((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            combined_demand = demands[i] + demands[j]\n            if combined_demand > capacity:\n                demand_penalty[i, j] = 0.01\n            else:\n                demand_factor = combined_demand / capacity\n                demand_penalty[i, j] = max(0.1, 1 / (demand_factor + 1)) # Use inverse of demand factor\n\n    heuristic_matrix *= demand_penalty\n\n    # Location: Encourage edges between spatially close nodes.\n    spatial_proximity = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                delta_x = coordinates[i, 0] - coordinates[j, 0]\n                delta_y = coordinates[i, 1] - coordinates[j, 1]\n                spatial_proximity[i, j] = 1 / (np.sqrt(delta_x**2 + delta_y**2) + 1e-6)\n    heuristic_matrix *= spatial_proximity\n\n    # Depot Connections: Promote connections to and from the depot\n    depot_boost = np.ones((n, n))\n    for i in range(1, n):\n        depot_boost[0, i] = 1 + (1 / (distance_matrix[0, i] + 1e-6))\n        depot_boost[i, 0] = 1 + (1 / (distance_matrix[i, 0] + 1e-6))\n    heuristic_matrix *= depot_boost\n\n    # Connectivity Prior: Favor connections to nodes that are currently less connected\n    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)\n    connectivity_boost = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            connectivity_boost[i, j] = (1 / (degree[i] + 1e-6)) + (1 / (degree[j] + 1e-6))\n    heuristic_matrix *= connectivity_boost\n    \n    # Adaptive Sparsification: Zero out edges based on a dynamic threshold per node\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        threshold = np.mean(row[row > 0]) * 0.2 \n        heuristic_matrix[i, row < threshold] = 0\n        col = heuristic_matrix[:, i]\n        threshold = np.mean(col[col > 0]) * 0.2\n        heuristic_matrix[col < threshold, i] = 0\n\n    # Normalize\n    max_val = np.max(heuristic_matrix)\n    if max_val > 0:\n        heuristic_matrix = heuristic_matrix / max_val\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates several factors like distance, demand, location, depot proximity, connectivity and adaptive sparsification, while the worst only considers distance. (2nd) to (17th) have some similar code about inverse of distance. Comparing (2nd) vs (17th), we see that the second best adds sophisticated demand penalties, location proximity, depot connection boosts, connectivity prior and sparsification. Comparing (1st) vs (2nd), we observe the inclusion of depot sparsification and the use of both mean and median in adaptive sparsification results in performance improvement. Comparing (5th) vs (6th), we find that the same. Comparing (7th) vs (8th) vs ... vs (16th), we find that the same. Comparing (2nd) vs (3rd), there is no difference, then (3rd) vs (4th) also the same. Overall: The best heuristics combine multiple relevant factors and use adaptive techniques for sparsification, while simpler heuristics relying solely on distance perform poorly.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's redefine \"Current self-reflection\" for designing better heuristics, focusing on actionable insights and avoiding pitfalls of ineffective reflection (of which there are none explicitly stated in the prompt, so we will use general understanding of ineffective heuristics).\n\nHere's the redefined framework:\n\n*   **Keywords:** Multifactorial, Adaptive, Iterative, Normalized, Evaluative, Connectivity Priors, Sparsification.\n*   **Advice:** Systematically combine problem-relevant factors using adaptive methods, normalizing for stability. Start simple, add complexity incrementally, and *quantitatively* evaluate each change.\n*   **Avoid:** Vague goals (e.g., \"improve robustness\"), Untested assumptions, Premature optimization, ignoring edge cases.\n*   **Explanation:** Go beyond simple combinations to understand *how* and *why* specific features and techniques improve performance. Focus on measurable improvements through rigorous testing.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}