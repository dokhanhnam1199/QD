```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Enhanced heuristics for CVRP, combining distance, demand, location, and depot proximity with adaptive sparsification.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Distance: Shorter distances are preferred.
    distance_factor = 1 / (distance_matrix + 1e-6)
    heuristic_matrix += distance_factor

    # Demand: Penalize edges connecting to high-demand nodes, more aggressively.
    for i in range(1, n):
        for j in range(1, n):
            demand_ratio = (demands[i] + demands[j]) / (2 * capacity)
            if (demands[i] + demands[j]) > capacity:
                heuristic_matrix[i, j] /= (1 + 100 * demand_ratio)  # Heavily penalize exceeding capacity
            else:
                heuristic_matrix[i, j] /= (1 + 5 * demand_ratio) # Discourage moderately

    # Location: Encourage edges between spatially close nodes.
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                spatial_proximity = 1 / (np.sqrt(delta_x**2 + delta_y**2) + 1e-6)
                heuristic_matrix[i, j] *= (1 + spatial_proximity)  # weight by spatial proximity


    # Depot Connections: Promote connections to and from the depot, with differentiated weights.
    for i in range(1, n):
        heuristic_matrix[0, i] *= 3  # Stronger preference for depot connections
        heuristic_matrix[i, 0] *= 3

    # Encourage connections between small demand nodes far from depot.
    for i in range(1,n):
        for j in range(1,n):
            if i!=j:
                depot_distance_i = distance_matrix[0, i]
                depot_distance_j = distance_matrix[0, j]
                demand_penalty = (demands[i] + demands[j]) / (2*capacity)
                if demands[i] < capacity/5 and demands[j] < capacity/5:
                    heuristic_matrix[i,j] *= (1 + (depot_distance_i + depot_distance_j)/(distance_matrix[i,j]+1e-6) * (1-demand_penalty))

    # Adaptive Sparsification: Zero out edges with low heuristic values based on a more stringent threshold.
    threshold = np.mean(heuristic_matrix) * 0.3 # increased threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalize
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
      heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
