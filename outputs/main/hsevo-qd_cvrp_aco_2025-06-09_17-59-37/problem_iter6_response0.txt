```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Enhanced heuristic combining distance, demand, location, depot proximity, connectivity, clustering, and adaptive sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance Factor (Baseline)
    distance_factor = 1 / (distance_matrix + 1e-6)
    heuristic_matrix = distance_factor.copy()

    # 2. Demand Penalty: Adaptively scaled based on proximity to capacity
    demand_penalty = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            combined_demand = demands[i] + demands[j]
            if combined_demand > capacity:
                demand_penalty[i, j] = 0.01  # Hard constraint
            else:
                demand_ratio = combined_demand / capacity
                demand_penalty[i, j] = 1 - demand_ratio # Scale penalty linearly. The closer to capacity, the bigger the penalty
    heuristic_matrix *= demand_penalty

    # 3. Spatial Proximity: Emphasize local connections
    spatial_proximity = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                delta_x = coordinates[i, 0] - coordinates[j, 0]
                delta_y = coordinates[i, 1] - coordinates[j, 1]
                spatial_distance = np.sqrt(delta_x**2 + delta_y**2)
                spatial_proximity[i, j] = np.exp(-spatial_distance / (np.mean(distance_matrix) + 1e-6)) # Gaussian kernel
    heuristic_matrix *= spatial_proximity

    # 4. Depot Attraction: Strong pull to/from depot
    depot_boost = np.ones((n, n))
    for i in range(1, n):
        depot_boost[0, i] = 1 + (1 / (distance_matrix[0, i] + 1e-6))
        depot_boost[i, 0] = 1 + (1 / (distance_matrix[i, 0] + 1e-6))
    heuristic_matrix *= depot_boost

    # 5. Connectivity Boost: Favor less connected nodes
    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)
    connectivity_boost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            connectivity_boost[i, j] = (1 / (degree[i] + 1e-6)) + (1 / (degree[j] + 1e-6))
    heuristic_matrix *= connectivity_boost

    # 6. Demand Clustering: Encourages grouping of nearby nodes with combined demand <= capacity
    demand_clustering = np.ones((n, n))
    for i in range(1, n):
      for j in range(1,n):
        if i!=j:
          combined_demand = demands[i] + demands[j]
          distance = distance_matrix[i,j]
          if combined_demand <= capacity:
            demand_clustering[i,j] = np.exp(-distance/ (np.mean(distance_matrix) + 1e-6)) * (1 - (combined_demand/capacity)) #Smaller distance & lower demand utilization => better
          else:
            demand_clustering[i,j] = 0.01
    heuristic_matrix *= demand_clustering
          
    # 7. Adaptive Sparsification: Aggressive pruning based on percentile
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.percentile(row[row > 0], 30)  #Prune the lowest 30% edges
        heuristic_matrix[i, row < threshold] = 0
        col = heuristic_matrix[:, i]
        threshold = np.percentile(col[col > 0], 30)
        heuristic_matrix[col < threshold, i] = 0

    # 8. Normalization
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
