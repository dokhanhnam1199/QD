{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"Enhanced heuristic combining distance, demand, location, depot proximity, connectivity and adaptive sparsification.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance: Shorter distances are preferred.\n    distance_factor = 1 / (distance_matrix + 1e-6)\n    heuristic_matrix = distance_factor.copy()\n\n    # Demand: Penalize edges connecting to high-demand nodes, consider route capacity.\n    demand_penalty = np.ones((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n              combined_demand = demands[i] + demands[j]\n              if combined_demand > capacity:\n                  demand_penalty[i, j] = 0.01  # Heavily penalize exceeding capacity\n              else:\n                  demand_factor = combined_demand / capacity\n                  demand_penalty[i, j] = max(0.1, 1 - demand_factor)  # Prefer routes using more capacity, but not exceeding it\n\n    heuristic_matrix *= demand_penalty\n\n    # Location: Encourage edges between spatially close nodes, but less so for high demand\n    spatial_proximity = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                delta_x = coordinates[i, 0] - coordinates[j, 0]\n                delta_y = coordinates[i, 1] - coordinates[j, 1]\n                dist = np.sqrt(delta_x**2 + delta_y**2)\n                spatial_proximity[i, j] = 1 / (dist + 1e-6) #Invert distance\n                spatial_proximity[i, j] /= (demands[i] + demands[j])**0.25 #Reduce impact if high demand\n    heuristic_matrix *= spatial_proximity\n\n    # Depot Connections: Promote connections to and from the depot, adjust based on demand.\n    depot_boost = np.ones((n, n))\n    for i in range(1, n):\n        depot_boost[0, i] = 1 + (1 / (distance_matrix[0, i] + 1e-6)) / demands[i]**0.5\n        depot_boost[i, 0] = 1 + (1 / (distance_matrix[i, 0] + 1e-6)) / demands[i]**0.5\n    heuristic_matrix *= depot_boost\n\n    # Connectivity Prior: Favor connections to nodes that are currently less connected, also consider distance\n    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)\n    connectivity_boost = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            connectivity_boost[i, j] = (1 / (degree[i] + 1e-6)) + (1 / (degree[j] + 1e-6))\n            connectivity_boost[i,j] /= (distance_matrix[i,j]+1e-6)**0.5  #Penalize if long edges\n    heuristic_matrix *= connectivity_boost\n\n    # Adaptive Sparsification: Zero out edges based on a dynamic threshold per node, and adaptive parameter.\n    sparsification_factor = 0.3\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        # Calculate threshold based on both mean and median.\n        mean_val = np.mean(row[row > 0]) if np.any(row > 0) else 0\n        median_val = np.median(row[row > 0]) if np.any(row > 0) else 0\n        threshold = min(mean_val, median_val) * sparsification_factor  # Dynamic threshold based on both.\n        heuristic_matrix[i, row < threshold] = 0\n\n        col = heuristic_matrix[:, i]\n        mean_val = np.mean(col[col > 0]) if np.any(col > 0) else 0\n        median_val = np.median(col[col > 0]) if np.any(col > 0) else 0\n        threshold = min(mean_val, median_val) * sparsification_factor\n        heuristic_matrix[col < threshold, i] = 0\n\n    # Depot Sparsification: Remove less promising direct connections to depot to diversify routes.\n    depot_threshold = np.mean(heuristic_matrix[0, 1:]) * 0.2\n    for i in range(1, n):\n        if heuristic_matrix[0, i] < depot_threshold:\n            heuristic_matrix[0, i] = 0\n        if heuristic_matrix[i, 0] < depot_threshold:\n            heuristic_matrix[i, 0] = 0\n\n    # Additional Sparsification: Remove edges that connect distant and high demand nodes\n    for i in range(1, n):\n        for j in range(i + 1, n):\n             if distance_matrix[i, j] > np.mean(distance_matrix) and (demands[i] + demands[j]) > capacity/2:\n                heuristic_matrix[i, j] = 0\n                heuristic_matrix[j, i] = 0\n                \n    # Normalize\n    max_val = np.max(heuristic_matrix)\n    if max_val > 0:\n        heuristic_matrix = heuristic_matrix / max_val\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"Enhanced heuristic combining distance, demand, location, depot proximity, connectivity and adaptive sparsification.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Distance: Shorter distances are preferred.\n    distance_factor = 1 / (distance_matrix + 1e-6)\n    heuristic_matrix = distance_factor.copy()\n\n    # Demand: Penalize edges connecting to high-demand nodes.\n    demand_penalty = np.ones((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            combined_demand = demands[i] + demands[j]\n            if combined_demand > capacity:\n                demand_penalty[i, j] = 0.01\n            else:\n                demand_penalty[i, j] = max(0.1, 1 - (combined_demand / capacity)**0.5)\n\n    heuristic_matrix *= demand_penalty\n\n    # Location: Encourage edges between spatially close nodes.\n    spatial_proximity = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                delta_x = coordinates[i, 0] - coordinates[j, 0]\n                delta_y = coordinates[i, 1] - coordinates[j, 1]\n                spatial_proximity[i, j] = 1 / (np.sqrt(delta_x**2 + delta_y**2) + 1e-6)\n    heuristic_matrix *= (0.5 * spatial_proximity + 0.5)\n\n    # Depot Connections: Promote connections to and from the depot\n    depot_boost = np.ones((n, n))\n    for i in range(1, n):\n        depot_boost[0, i] = 1 + (1 / (distance_matrix[0, i] + 1e-6))\n        depot_boost[i, 0] = 1 + (1 / (distance_matrix[i, 0] + 1e-6))\n    heuristic_matrix *= depot_boost\n\n    # Connectivity Prior: Favor connections to nodes that are currently less connected\n    degree = np.sum(heuristic_matrix > 0, axis=0) + np.sum(heuristic_matrix > 0, axis=1)\n    connectivity_boost = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            connectivity_boost[i, j] = (1 / (degree[i] + 1e-6)) + (1 / (degree[j] + 1e-6))\n    heuristic_matrix *= connectivity_boost\n\n    # Adaptive Sparsification: Zero out edges based on a dynamic threshold per node\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        mean_val = np.mean(row[row > 0]) if np.any(row > 0) else 0\n        median_val = np.median(row[row > 0]) if np.any(row > 0) else 0\n        threshold = min(mean_val, median_val) * 0.3\n        heuristic_matrix[i, row < threshold] = 0\n\n        col = heuristic_matrix[:, i]\n        mean_val = np.mean(col[col > 0]) if np.any(col > 0) else 0\n        median_val = np.median(col[col > 0]) if np.any(col > 0) else 0\n        threshold = min(mean_val, median_val) * 0.3\n        heuristic_matrix[col < threshold, i] = 0\n        \n    # Depot Sparsification: Remove less promising direct connections to depot to diversify routes.\n    depot_threshold = np.mean(heuristic_matrix[0, 1:]) * 0.2\n    for i in range(1, n):\n        if heuristic_matrix[0, i] < depot_threshold:\n            heuristic_matrix[0, i] = 0\n        if heuristic_matrix[i, 0] < depot_threshold:\n            heuristic_matrix[i, 0] = 0\n\n    # Normalize\n    max_val = np.max(heuristic_matrix)\n    if max_val > 0:\n        heuristic_matrix = heuristic_matrix / max_val\n\n    return heuristic_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see a significant difference in complexity and consideration of problem-specific constraints. The best heuristic incorporates distance, demand, spatial proximity, depot connections, connectivity, angle considerations, and adaptive sparsification, while the worst only considers distance.\n\nComparing (2nd) vs (19th), the observation is similar to (1st) vs (20th).\n\nComparing (1st) vs (2nd), the adaptive sparsification threshold calculation in the 1st is more aggressive than the 2nd's and depot boost is stronger. Both heuristics include similar features but have slightly different weights and thresholds.\n\nComparing (3rd) vs (4th), these are identical.\n\nComparing (second worst) vs (worst), both only consider distance.\n\nComparing (6th) vs (7th), the demand penalty is different: 6th consider routes using more capacity, but not exceeding it; and spatial proximity is reduced if high demand.\n\nOverall: The better heuristics consider multiple factors beyond just distance, including demand, location, connectivity, and depot proximity. Adaptive sparsification is a common element in the better-performing heuristics. The weighting and tuning of the various factors play a crucial role in the performance of the heuristic. More advanced heuristics incorporate angle considerations and adjust weights based on demand.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, here's a reframed \"Current Self-Reflection\" aimed at designing better CVRP heuristics, focusing on actionable advice and avoiding pitfalls:\n\n*   **Keywords:** Multifactorial, Adaptive, Iterative Refinement, Normalization, Sparsification, Performance Evaluation, Problem Characteristics.\n*   **Advice:** Build heuristics incrementally by adding relevant factors (distance, demand, location) to a basic heuristic. Employ adaptive sparsification and normalization techniques. Evaluate impact of each change using different problem characteristics.\n*   **Avoid:** Premature complexity, static parameters, neglecting normalization, solely distance-based approaches, ignoring problem-specific nuances.\n*   **Explanation:** Effective heuristics require a balanced approach. Start simple, add complexity deliberately, and always measure performance across diverse CVRP instances.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}