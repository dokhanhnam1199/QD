```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_after_fit = cap - item
            fill_ratio = item / cap

            # Perfect fit: Highest priority
            if abs(remaining_after_fit) < 1e-6:
                priorities[i] = 1000
            # Near-perfect fit: High priority
            elif remaining_after_fit <= 0.1:  #arbitrary threshold, can be tuned
                priorities[i] = 500
            # Good fit: Moderate priority, prioritize higher fill
            else:
                 priorities[i] = 100 / (remaining_after_fit + 0.0001)  # Avoid division by zero

            # Penalize near-overflow.  This implicitly favors bins where a different item
            # might provide a better fit.  We want to use remaining cap
            # efficiently across the entire sequence of items.
            if remaining_after_fit < 0.05 and remaining_after_fit > 1e-6:
                priorities[i] -= 200

        else:
            priorities[i] = -100  # Negative priority if item doesn't fit

    return priorities
```
