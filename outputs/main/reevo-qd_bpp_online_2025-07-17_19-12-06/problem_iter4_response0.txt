```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            new_cap = cap - item
            utilization = 1 - (new_cap / cap)  # how much of the bin is used after adding the item

            # Prioritize bins that would be filled near full, but not over.
            priorities[i] = 1.0 / (abs(utilization - 0.9)) # closer to 0.9 utilization is higher priority

            # Perfect fit gets a very high priority
            if abs(cap - item) < 1e-6:
                priorities[i] = 1000

            # Slightly favor more full bins
            priorities[i] += utilization * 0.1  # Add a small bonus for higher utilization


        else:
            priorities[i] = -1  # negative priority since item cannot fit
    return priorities
```
