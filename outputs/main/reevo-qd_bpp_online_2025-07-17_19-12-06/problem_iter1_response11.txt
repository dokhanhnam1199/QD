```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Reward bins that can fit the item
            priorities[i] = (cap - item) / cap  # Higher priority to bins with less wasted space
            #priorities[i] = 1 / (cap - item + 0.00001) #try to fill them tightly to encourage later items to go to later bins
        else:
            # Penalize bins that cannot fit the item. Negative priority
            priorities[i] = -1000 # Set to a very low negative value

    return priorities
```
