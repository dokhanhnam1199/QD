```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing inspired: prioritize bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Smaller difference = higher priority

    # Avoid fragmentation: heavily penalize bins that will have very small remaining capacity
    small_remain_mask = (bins_remain_cap - item) > 0 & (bins_remain_cap - item) < 0.1
    priorities[small_remain_mask] -= 100  # Large penalty for small remaining capacity

    # Assign a high priority to bins that can fit, but are close to full after packing.
    close_to_full_mask = (bins_remain_cap >= item) & ((bins_remain_cap - item) <= 0.2)
    priorities[close_to_full_mask] += 50 # Add some priority

    # Give negative priority to bins that can't fit.
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
