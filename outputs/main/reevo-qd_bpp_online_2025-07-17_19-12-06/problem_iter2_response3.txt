```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Assign high priority if item fits
    fit_mask = remaining_after_add >= 0
    priorities[fit_mask] = 1  # Base priority for fitting bins

    # Prioritize bins that fit the item with less wasted space, using a more refined function.
    wasted_space = remaining_after_add[fit_mask]
    # This prioritizes smaller wasted space more aggressively than a simple inverse.
    priorities[fit_mask] += np.exp(-wasted_space / item)  # Exponential decay of wasted space

    # Bonus to nearly full bins (minimize fragmentation), more aggressively.
    nearly_full_mask = (bins_remain_cap > item) & (bins_remain_cap <= 1.5 * item)  # Slightly tighter definition of nearly full
    priorities[nearly_full_mask] += 1.0 # Larger bonus for nearly full.

    # Bins that are close to item size, but can fit (Encourage "Almost full" bins)
    almost_full_mask = (bins_remain_cap >= item) & (bins_remain_cap <= (item + 0.1)) #Bins that can fit the item with very little space left
    priorities[almost_full_mask] += 2.0 # Highest priority for these bins.

    # Negative priority if item doesn't fit
    no_fit_mask = remaining_after_add < 0
    priorities[no_fit_mask] = -1e9  # Very low priority for non-fitting bins

    #Bins that are full should have lower priority score (or not considered at all!)
    full_mask = bins_remain_cap == 0
    priorities[full_mask] = -1e9

    return priorities
```
