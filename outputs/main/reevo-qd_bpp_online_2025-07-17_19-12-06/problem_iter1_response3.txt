```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Prefer bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1  # Give a base priority to eligible bins

    # Rule 2: Fill bins as full as possible (minimize wasted space)
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = np.inf  # Penalize ineligible bins by setting a large wasted space.
    priorities[eligible_bins] += 1.0 / (wasted_space[eligible_bins] + 0.00001) # Add inverse wasted space to priority
    
    # Rule 3:  Consider the fill ratio: higher is better, but less critical than feasibility or space
    fill_ratio = item / bins_remain_cap
    fill_ratio[~eligible_bins] = 0 # only penalize where we can
    priorities += fill_ratio/100 #Add a slightly less impact to score

    #Rule 4: Consider using empty bin
    empty_bins = bins_remain_cap == np.max(bins_remain_cap)
    if np.any(empty_bins):
        priorities[empty_bins] +=0.5

    return priorities
```
