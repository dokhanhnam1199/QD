```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = bins_remain_cap[0] + item  # Assuming all bins are the same size after packing
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            new_cap = cap - item
            utilization = (bin_size - new_cap) / bin_size
            waste = new_cap / bin_size

            # Reward perfect and near-perfect fits, heavily penalize waste
            if new_cap < 1e-6:  # Perfect fit
                priorities[i] = 1000
            elif new_cap < 0.1 * bin_size: # Near perfect, less than 10% waste
                priorities[i] = 500 + (1 - waste) * 400 # Scale between 500-900, higher util better
            else:
                priorities[i] = (1 - waste) * 100 # Scale with utilization

        else:
            priorities[i] = -1000  # Large negative priority for infeasibility

    return priorities
```
