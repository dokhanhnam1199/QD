```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            new_cap = cap - item
            fill_ratio = (cap - new_cap) / 1.0  # bin size is 1
            
            # Heavily reward perfect fits
            if abs(new_cap) < 1e-6:
                priorities[i] = 1000.0
            else:
                # Reward near-full bins (around 90-100%)
                if 0.9 <= fill_ratio <= 1.0:
                    priorities[i] = 500 * fill_ratio

                # Otherwise, prioritize bins with less remaining capacity
                else:
                   priorities[i] = 100 * fill_ratio
        else:
            priorities[i] = -1000.0  # Mark as infeasible

    return priorities
```
