```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    target_fill_ratio = 0.95
    large_negative = -1e9

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = large_negative  # Infeasible: large negative value
        else:
            new_fill_ratio = (cap - item) / cap
            
            # Gaussian-like priority around target fill ratio
            priority = np.exp(-((new_fill_ratio - (1 - target_fill_ratio)) ** 2) / (2 * 0.05**2)) # Adjust 0.05 for spread. Larger value, wider spread

            # Perfect fit bonus
            if np.isclose(item, cap):
                priority += 100.0 # significant bonus

            priorities[i] = priority

    return priorities
```
