```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary criterion: Can the item fit?
            priority = 1.0

            # Secondary criterion: How much space will be left? Prefer bins that leave less space.
            remaining_space = cap - item
            priority += 1.0 / (remaining_space + 0.001)  # Avoid division by zero and give a slight boost to smaller remaining spaces.

            # Tertiary criterion: Prefer bins that are fuller already (but can still accommodate the item)
            priority += (1 - (cap / (np.max(bins_remain_cap)+0.001))) # normalize to max bin cap to get consistent results. Add epsilon to prevent division by zero when all caps are 0.

            priorities[i] = priority
        else:
            priorities[i] = -1.0  # Assign a low priority if the item doesn't fit

    return priorities
```
