```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            fill_ratio = item / cap

            # Reward near-full bins
            near_full_reward = 0
            if fill_ratio > 0.7 and fill_ratio <= 1.0:
                near_full_reward = 10 * (fill_ratio - 0.7)  # Higher reward closer to 1

            # Heavily reward perfect fits
            perfect_fit_reward = 0
            if abs(item - cap) < 1e-6:
                perfect_fit_reward = 1000

            # Slightly reward smaller remaining capacity, encouraging tighter packs
            remaining_capacity_reward = 0
            remaining_capacity_ratio = (cap - item) / cap
            remaining_capacity_reward = 5*(1-remaining_capacity_ratio)

            # Combine the rewards
            priorities[i] = near_full_reward + perfect_fit_reward + remaining_capacity_reward


        else:
            priorities[i] = -1  # Infeasible

    return priorities
```
