```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    target_fill_ratio = 0.95
    epsilon = 0.01  # Tolerance for near-perfect fit

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_after_fit = cap - item
            fill_ratio = item / cap
            
            # Continuous function rewarding target fill ratio
            priority = -abs(remaining_after_fit - (cap * (1-target_fill_ratio))) # lower abs diff to target -> higher reward


            # Perfect fit reward, but less than version 1, to avoid only perfect fits
            if abs(remaining_after_fit) < epsilon:
                priority += 500

            # Reward fill ratio close to 1.0
            if fill_ratio > 0.9:
                priority += 100 * (fill_ratio - 0.9)

            priorities[i] = priority

        else:
            priorities[i] = -1000  # Large penalty for infeasibility

    return priorities
```
