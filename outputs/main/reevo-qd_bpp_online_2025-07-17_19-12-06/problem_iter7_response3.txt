```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Prioritizes feasible, near-full bins using a tiered reward system.
    Heavily reward perfect/near-perfect fits and penalize near-overflow and waste.
    Dynamically adjust priorities based on bin fill levels.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining = cap - item
            if remaining < 0.0001:  # Perfect fit
                priorities[i] = 1000
            elif remaining / cap < 0.05:  # Near-perfect fit (less than 5% waste)
                priorities[i] = 500
            elif remaining / cap < 0.2:  # Good fit (less than 20% waste)
                priorities[i] = 100 / (remaining / cap) # Inversely proportional to waste
            else:  # Moderate fit (more than 20% waste)
                priorities[i] = 50/ (remaining / cap) #Lower base priority than the good fit, but still inversely proportional to waste

        else:
            priorities[i] = -100  # Cannot fit, strongly penalized

    return priorities
```
