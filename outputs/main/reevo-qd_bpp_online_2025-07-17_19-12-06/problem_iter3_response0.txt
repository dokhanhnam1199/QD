```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1 # Assuming bin size is 1 for calculating utilization.  Change this if bins have different capacities
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate remaining capacity after adding the item
            remaining_capacity = cap - item
            # Calculate utilization of the bin if item is added
            utilization = (bin_size - remaining_capacity) / bin_size

            # Reward high utilization, especially near-perfect fits
            priority = 10 * utilization

            # Huge bonus for perfect fit
            if abs(remaining_capacity) < 1e-6:
                priority += 1000

            # Moderate bonus for near perfect fit
            elif abs(remaining_capacity) < 0.1 * bin_size:
                priority += 50

            # Penalize wasted space if the fit isn't very good.
            priority -= 5 * remaining_capacity / bin_size

            priorities[i] = priority

        else:
            # Huge penalty for infeasible placement
            priorities[i] = -10000
    return priorities
```
