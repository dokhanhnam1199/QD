```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            waste = cap - item
            if waste == 0:  # Perfect fit
                priorities[i] = 1000  # Extremely high priority for perfect fit
            else:
                # Prioritize bins with small waste
                priorities[i] = 10 / (waste + 0.0001)  # Inverse of waste, prevents division by zero.  Scale up to make more significant

                # Heavily penalize "almost full" bins
                if 0 < waste < 0.1:
                    priorities[i] -= 50 # Significantly reduce priority for near-full bins

        else:
            priorities[i] = -1000  # Very low priority if it doesn't fit

    return priorities
```
