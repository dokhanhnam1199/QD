```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority: how much space is left after packing the item. Closer to 0, higher priority.
            space_left = cap - item
            priorities[i] = 1 / (space_left + 0.0001)  # Avoid division by zero

            # Bonus for being close to half-full (trying to balance bin usage).
            half_full_diff = np.abs(cap - item - (1/2))
            priorities[i] += 0.5 * np.exp(-5*half_full_diff) # Gaussian function around optimal value

            # Slight penalty for larger capacities to encourage using bins that are already somewhat full.
            priorities[i] -= 0.1 * cap

        else:
            priorities[i] = -np.inf  # Bin is not suitable
    return priorities
```
