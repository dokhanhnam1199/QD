```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0  # Assuming bins have a capacity of 1.0

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate remaining capacity after adding the item
            remaining_cap = cap - item
            utilization = (bin_size - remaining_cap) / bin_size

            # Reward perfect fits strongly
            if abs(remaining_cap) < 1e-6:
                priorities[i] = 1000.0

            # Reward near-perfect fits, scaling reward based on how close it is
            elif 0 < remaining_cap <= 0.1:
                priorities[i] = 500.0 * (1 - remaining_cap / 0.1)

            # Prioritize higher utilization, but penalize waste, scaling penalty
            else:
                waste_penalty = remaining_cap * 10
                priorities[i] = 100 * utilization - waste_penalty

        else:
            # Huge penalty for infeasibility
            priorities[i] = -1000.0

    return priorities
```
