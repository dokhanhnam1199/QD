```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = bins_remain_cap[0] + item  # Assuming all bins have the same initial capacity, infer the bin size
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate remaining capacity after adding the item
            remaining_capacity = cap - item
            # Calculate bin utilization ratio
            utilization_ratio = (bin_size - remaining_capacity) / bin_size

            # Reward near-perfect fits, penalize waste
            if remaining_capacity < 0.1 * bin_size:  # Small waste
                priorities[i] += 50  # Higher priority for small waste
            elif remaining_capacity > 0.5 * bin_size:
                 priorities[i] -= 20 #penalize big waste

            # Perfect fit gets very high priority
            if abs(remaining_capacity) < 1e-6:
                priorities[i] = 1000
            else:
                # Base priority based on utilization (higher is better, but not too high)
                priorities[i] += 100 * utilization_ratio - 50 * abs(utilization_ratio - 1) #try to make bin full, without overfilling

            priorities[i] += cap # giving priority to more available bins
        else:
            # Huge penalty for infeasibility
            priorities[i] = -1000  # Significantly penalize infeasible bins

    return priorities
```
