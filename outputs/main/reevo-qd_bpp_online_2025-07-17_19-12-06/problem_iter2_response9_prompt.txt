{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Feasibility: Only consider bins that can accommodate the item\n    feasible_bins = bins_remain_cap >= item\n    \n    if not np.any(feasible_bins):\n        return priorities # All zero if no bin can accommodate\n\n    \n    # First Fit Decreasing Heuristic imitation: Prefer bins with smaller remaining capacity AFTER placing item\n    remaining_after_placement = bins_remain_cap - item\n    remaining_after_placement[remaining_after_placement < 0] = np.inf # set infeasible to inf for sorting\n    \n    # Rank feasible bins based on remaining capacity after item placement. Smaller is better.\n    ranks = np.argsort(remaining_after_placement)\n    \n    # Assign rank-based priorities. Higher rank (smaller remaining cap) gets higher priority\n    priority_values = np.linspace(1, 0.1, len(bins_remain_cap))  # Decreasing priority as rank decreases.\n    \n    valid_ranks = ranks[feasible_bins[ranks]]\n    priorities[valid_ranks] = priority_values[:len(valid_ranks)]  # valid_ranks handles potential rank change\n\n\n    # Bonus for \"almost full\" bins if item can be packed there:\n    almost_full_threshold = 0.9\n    almost_full_bins = (bins_remain_cap / (bins_remain_cap + item)) > almost_full_threshold\n    priorities[feasible_bins & almost_full_bins] += 0.25 #Add a small bonus if its \"almost full\" after placement\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Rule out bins that cannot fit the item.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf  # Very low priority\n\n    # 2. Best Fit Criterion: Prioritize bins with the smallest remaining space after placing the item.\n    #    This encourages filling bins as much as possible.\n    feasible_mask = ~infeasible_mask\n    remaining_space = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_space  # Smaller remaining space -> higher priority\n\n    # 3. Tie-breaking: If multiple bins have the same remaining space, prioritize bins with larger original capacity.\n    # This step requires knowing the original capacity (can be passed as another argument or pre-calculated).\n    # For now, assume all bins have the same capacity, so skip this step to avoid introducing external parameters\n\n    # 4. Penalize almost-full bins to avoid creating slivers\n    almost_full_mask = (bins_remain_cap > item) & (bins_remain_cap < 1.1*item)\n    priorities[almost_full_mask] -= 0.5\n\n    return priorities\n\n[Reflection]\nThe better code directly optimizes for best fit, avoids slivers, and explicitly handles infeasibility with negative infinity.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}