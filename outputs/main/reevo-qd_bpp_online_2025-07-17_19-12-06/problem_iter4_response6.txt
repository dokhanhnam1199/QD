```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_cap = cap - item
            # Perfect fit handling
            if remaining_cap < 1e-6:
                priorities[i] = 1000.0
            else:
                # Prioritize bins that would be filled close to full, but not completely.
                fill_ratio = item / cap
                target_fill = 0.95
                diff = abs(fill_ratio - target_fill)
                
                # Prioritize fill ratios closer to the target
                priority_score = 100 / (diff + 0.05)  # Adding a small constant to avoid division by zero and dampen the effect

                # A slight penalty for very small remaining capacity to encourage better distribution
                if remaining_cap < 0.1:
                    priority_score -= remaining_cap * 5  # Slightly penalize very small remaining cap

                priorities[i] = priority_score

        else:
            priorities[i] = -1000.0  # Large negative priority for infeasible bins

    return priorities
```
