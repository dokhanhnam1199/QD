```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Favor bins where the item fits.
    fits = item <= bins_remain_cap
    priorities[fits] += 1

    # Heuristic 2:  Higher priority for bins where the item fills a large proportion of the bin,
    # but avoid leaving too little space. Balance utilization and fragmentation.
    fill_ratio = item / bins_remain_cap
    priorities[fits] += fill_ratio[fits]

    # Heuristic 3: Penalize bins that become too full after adding the item, since that reduces reusability
    remaining_after_fit = bins_remain_cap - item
    nearly_full = (remaining_after_fit > 0) & (remaining_after_fit < 0.1) # Less than 0.1 remains, very full
    priorities[nearly_full] -= 0.5 # slight penality, but avoid excessive full bins

    # Heuristic 4:  Give higher priority to bins with larger remaining capacity if it is larger than the item.
    #                try to fully fill a small bin before attempting to fill larger bins.
    large_bins = bins_remain_cap >= item
    priorities[large_bins] += bins_remain_cap[large_bins] / np.max(bins_remain_cap) * 0.2

    return priorities
```
