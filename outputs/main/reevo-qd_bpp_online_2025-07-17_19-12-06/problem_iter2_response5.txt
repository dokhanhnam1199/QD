```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            
            # Near-perfect fit gets the highest priority
            if waste <= 0.0001:  # Consider very small waste as perfect fit
                priorities[i] = 1000
            else:
                # Priority decreases as waste increases
                priorities[i] = 1 / (waste + 0.0001)
                
                # Apply penalty if waste is a significant portion of bin capacity
                if waste > 0.5 * cap:
                    priorities[i] *= 0.2  # Further reduce priority if waste is too much
                elif waste > 0.25 * cap: #moderate waste
                     priorities[i] *= 0.7

                #slightly prefer bins that are already somewhat full.
                priorities[i] *= (1 + (1 - cap)) #cap closer to zero yields higher scaling factor.

        else:
            # Very low priority, can't fit
            priorities[i] = -1000

    return priorities
```
