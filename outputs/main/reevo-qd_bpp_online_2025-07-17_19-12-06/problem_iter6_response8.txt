```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0  # Assuming bins have a capacity of 1.0

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate remaining capacity after adding the item
            remaining_cap = cap - item
            utilization = (bin_size - remaining_cap) / bin_size

            # Reward perfect fits strongly
            if abs(remaining_cap) < 1e-6:
                priorities[i] = 1000.0

            # Reward near-perfect fits
            elif remaining_cap < 0.1:
                priorities[i] = 500.0 * (1 - remaining_cap / 0.1) # scales between 500 and 0 linearly

            # Otherwise, prioritize higher utilization, but penalize waste
            else:
                waste_penalty = remaining_cap * 50  # Higher waste penalty
                utilization_reward = 100 * utilization
                priorities[i] = utilization_reward - waste_penalty # utilization is between 0 and 1
        else:
            # Huge penalty for infeasibility
            priorities[i] = -1000.0

    # If there are multiple bins with very high priority (e.g. perfect fit), choose the one with minimum remaining capacity
    max_priority = np.max(priorities)
    if np.sum(priorities == max_priority) > 1 and max_priority > 500: # If more than one perfect/near perfect fit
        indices = np.where(priorities == max_priority)[0]
        remaining_capacities = bins_remain_cap[indices] - item
        min_remaining_cap_index = np.argmin(remaining_capacities)
        
        # Set other priorities to -1001 so that the argmax doesn't pick them
        for j in range(len(priorities)):
            if j != indices[min_remaining_cap_index]:
                priorities[j] = -1001.0

    return priorities
```
