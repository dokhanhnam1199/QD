```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_after_fit = cap - item
            fill_ratio = item / cap

            # Tiered reward system
            if remaining_after_fit < 1e-6:  # Perfect fit
                priorities[i] = 1000
            elif remaining_after_fit <= 0.1:  # Near-perfect fit
                priorities[i] = 500
            elif fill_ratio > 0.9: #almost full, but not perfect
                 priorities[i] = 100
            else: # general fill, favour high fill ratio
                priorities[i] = 1 / (remaining_after_fit + 0.0001)  # Avoid division by zero

        else:
            priorities[i] = -1000  # Cannot fit, strong negative priority

    return priorities
```
