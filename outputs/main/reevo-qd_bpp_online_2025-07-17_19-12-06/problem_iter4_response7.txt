```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            fill_ratio = item / cap
            # Prioritize bins that would be filled to a higher degree, close to 1 but not exceeding. A perfect fit is ideal.
            priorities[i] =  1.0 / (1e-9 + abs(fill_ratio - 1.0))  # close to 1 is better
            
            # Slightly prefer bins that are already somewhat full
            current_fill = (bins_remain_cap[i] - item) / (1 - item) if (1 - item) != 0 else 0 # Normalize bin capacity based on item size to avoid overflow

            if current_fill > 0 and current_fill < 1 :
                 priorities[i] += current_fill/10 #Add small bonus to almost full bins.
        else:
            priorities[i] = -1  # negative priority since it can not be fit
    return priorities
```
