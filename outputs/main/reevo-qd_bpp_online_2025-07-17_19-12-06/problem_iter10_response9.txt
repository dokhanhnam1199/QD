```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Define target fill ratio and tolerance
    target_fill_ratio = 0.95
    tolerance = 0.05
    
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_after_fit = cap - item
            fill_ratio = (cap - remaining_after_fit) / cap

            # Reward filling close to the target fill ratio
            if abs(fill_ratio - target_fill_ratio) <= tolerance:
                priority = 100 / (abs(fill_ratio - target_fill_ratio) + 0.0001)  # Adding small value to prevent division by zero
            else:
                priority = 0  # No reward if not close to target

            # Substantially reward near-perfect fits
            if abs(item - cap) < 1e-6:
                priority = 10000  # Very high priority for perfect fit

            # Overfill penalty
            if fill_ratio > 1.0:
                priority = -1000  # Significant penalty

            priorities[i] = priority
        else:
            priorities[i] = -1000  # Infeasible bin
            
    return priorities
```
