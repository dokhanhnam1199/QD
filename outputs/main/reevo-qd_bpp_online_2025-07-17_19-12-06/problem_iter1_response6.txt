```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Prioritize bins that can fit the item
            remaining_space = cap - item
            priorities[i] = 1 / (remaining_space + 0.00001)  # Avoid division by zero, prioritize smaller remaining space

            # Bonus for being close to full after adding the item
            priorities[i] += np.exp(-remaining_space)  # Exponential decay with remaining space

            # If item fills the bin completely, give very high priority
            if remaining_space < 0.0001: # tolrance 
                priorities[i] += 100

        else:
            # Negative priority if the item doesn't fit
            priorities[i] = -1000  #Very low negative number
    return priorities
```
