```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign high priority to bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]
    priorities[fit_mask] = 1 - priorities[fit_mask]
    #Prioritize smaller remaining capacity after the item is placed

    # Assign very low priority to bins that cannot fit the item
    priorities[~fit_mask] = -1e9  # A very negative value

    #If a bin has capacity equals to item size, give it highest priority
    perfect_fit = bins_remain_cap == item
    priorities[perfect_fit] = 1e9

    # If item is larger than all bins, put it to largest bin
    if np.all(bins_remain_cap < item):
        max_cap_idx = np.argmax(bins_remain_cap)
        priorities[max_cap_idx] = 0 # Neutral Priority if all bins are unfit.

    return priorities
```
