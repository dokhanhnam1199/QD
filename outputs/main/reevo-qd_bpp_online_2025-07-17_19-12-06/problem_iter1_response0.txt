```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing Inspired: Prioritize bins where the item fits best (smallest waste)
    # but only consider bins where the item actually fits.
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        waste = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = 1 / (waste + 0.00001)  # Avoid division by zero, higher priority for less waste

        # Additionally, prioritize bins that are close to full after placing the item.
        fullness = 1 - waste / bins_remain_cap[eligible_bins]
        priorities[eligible_bins] += fullness * 0.5  # Weight fullness less than waste to avoid overfilling a single bin if small waste

    # Penalize bins where the item doesn't fit
    else:
        priorities = np.full_like(bins_remain_cap, -1000.0) # Very low priority if the item can't fit

    return priorities
```
