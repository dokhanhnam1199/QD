```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            fill_ratio = item / cap
            remaining_after_fit = cap - item

            # Perfect fit bonus
            if abs(remaining_after_fit) < 1e-6:
                priorities[i] = 1000.0
            else:
                # Utilization reward (higher is better)
                utilization_score = 1.0 - (remaining_after_fit / cap)

                # Waste penalty (lower is better)
                waste_penalty = remaining_after_fit

                # Target utilization around 95%, using a Gaussian-like distribution
                target_utilization = 0.95
                utilization_deviation = abs(utilization_score - target_utilization)
                gaussian_weight = np.exp(-(utilization_deviation**2) / (2 * 0.1**2)) # Adjust std dev (0.1) to control spread

                # Combine scores
                priorities[i] = 5 * gaussian_weight + utilization_score - 0.1* waste_penalty # Adjusted weights to balance the factors
        else:
            priorities[i] = -1.0  # Negative priority since it cannot be fit
    return priorities
```
