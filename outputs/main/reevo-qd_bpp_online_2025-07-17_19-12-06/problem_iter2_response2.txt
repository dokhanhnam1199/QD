```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Disqualify bins that can't fit the item.
    no_fit = bins_remain_cap < item
    priorities[no_fit] = -np.inf
    
    # Rule 2: Prioritize perfect fits with a very high score.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1e6  # Very high priority for perfect fit

    # Rule 3: For bins that can fit, calculate fill ratio and prioritize.
    fit_bins = bins_remain_cap >= item
    if np.any(fit_bins):
        fill_ratio = item / bins_remain_cap[fit_bins]
        # We want to prioritize bins that result in a high fill ratio, 
        # but penalize those that are too close to being completely full (to avoid tiny remaining spaces).
        # A good fill ratio is close to 0.9, so we penalize deviations from that.
        priorities[fit_bins] = 1000 / (np.abs(fill_ratio - 0.9) + 0.01) # adding 0.01 to avoid division by zero and instability


        # Optionally further refine: penalize almost full bins more aggressively
        almost_full = (fill_ratio > 0.95) & (fill_ratio < 1.0)
        priorities[fit_bins][almost_full] = priorities[fit_bins][almost_full] * 0.5 # reduce priority if almost full

    return priorities
```
