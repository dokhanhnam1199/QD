```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary Criterion: Remaining capacity after packing (smaller is better). Favors near-full bins.
            remaining_after_packing = cap - item
            priorities[i] = 1.0 / (remaining_after_packing + 0.0001)  # Avoid division by zero

            # Secondary Criterion: Utilization rate of the bin if the item were placed.  Favors better utilization.
            utilization_rate = (1 - remaining_after_packing / 100) #Assuming bin size is 100
            priorities[i] = priorities[i] * utilization_rate

            #Tertiary Criterion: Prefer bins with slightly larger capacity to improve average filling ratio.
            priorities[i] = priorities[i] * (cap / 100)

        else:
            priorities[i] = -1e9  # Very low priority for bins that cannot fit the item.
    return priorities
```
