```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing Inspired: Prefer bins with tighter fit
            priorities[i] = (cap - item) / cap # Remaining capacity ratio; smaller is better
            priorities[i] = 1 - priorities[i] # so make it inverse, prefer higher
            # Add a bonus if the bin is almost full after packing
            if (cap - item) <= 0.1:  # Tune this threshold
                 priorities[i] += 0.5  # Tune this bonus

        else:
            priorities[i] = -1e9  # Very low priority, almost impossible

    return priorities
```
