{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = 1.0  # Assuming bins have a capacity of 1.0\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate remaining capacity after adding the item\n            remaining_cap = cap - item\n            utilization = (bin_size - remaining_cap) / bin_size\n\n            # Reward perfect fits strongly\n            if abs(remaining_cap) < 1e-6:\n                priorities[i] = 1000.0\n\n            # Reward near-perfect fits\n            elif remaining_cap < 0.1:\n                priorities[i] = 500.0 * (1 - remaining_cap / 0.1) # scales between 500 and 0 linearly\n\n            # Otherwise, prioritize higher utilization, but penalize waste\n            else:\n                waste_penalty = remaining_cap * 10  # Higher waste penalty\n                priorities[i] = 100 * utilization - waste_penalty # utilization is between 0 and 1\n        else:\n            # Huge penalty for infeasibility\n            priorities[i] = -1000.0\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate how full the bin would be if the item was added\n            fill_ratio = item / cap\n\n            # Reward near-full bins (around 95%)\n            near_full_reward = 1 / abs(fill_ratio - 0.95)\n\n            # Heavily reward perfect fits\n            perfect_fit_reward = 0\n            if abs(item - cap) < 1e-6:\n                perfect_fit_reward = 1000\n\n            # Combine the rewards, weighting perfect fits higher\n            priorities[i] = near_full_reward + perfect_fit_reward\n\n            # Scale down if the bin will be overfilled by a small amount\n            if fill_ratio > 1.0:\n                priorities[i] = -1  # Infeasible\n        else:\n            priorities[i] = -1  # Infeasible\n\n    return priorities\n\n[Reflection]\nReward near-full bins using ratios. Penalize infeasibility harshly. Perfect fits should be highly rewarded.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}