{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: If a bin can fit the item perfectly, assign it the highest priority.\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = np.inf  # Infinite priority\n\n    # Rule 2: If item does not fit the bin assign it -inf\n    no_fit = bins_remain_cap < item\n    priorities[no_fit] = -np.inf\n\n    # Rule 3: For bins that can fit, prioritize bins with smaller remaining capacity after placing the item.\n    # This encourages filling bins up and reducing fragmentation.\n    fit_bins = bins_remain_cap >= item\n    remaining_capacity_after_fit = bins_remain_cap[fit_bins] - item\n    #Prioritize bins with small remaining capacity\n    priorities[fit_bins] = 1 / (remaining_capacity_after_fit + 1e-9)\n\n    #Rule 4: For very small items, prioritize the almost full bin to avoid having lots of almost empty bins\n    small_item = item < 0.1\n    almost_full = bins_remain_cap > item\n    almost_full = np.logical_and(almost_full, bins_remain_cap < 0.2) # remaining cap is also small\n    if small_item and np.any(almost_full):\n        priorities[almost_full] = 100 #High priority\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate how full the bin would be if the item was added\n            fill_ratio = item / cap\n            # Prioritize bins that would be filled to a higher degree\n            # but avoid filling them completely. A perfect fit is ideal\n            priorities[i] = 1 / abs(fill_ratio - 0.95) # close to 1 is better.\n            #If item exactly fits in the bin assign the highest priority\n            if abs(fill_ratio - 1) < 1e-6:\n                priorities[i] = 1000\n        else:\n            priorities[i] = -1 # negative priority since it can not be fit\n    return priorities\n\n[Reflection]\nThe better code prioritizes fill ratio and perfect fits, while the worse code relies on multiple hardcoded rules.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}