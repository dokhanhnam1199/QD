```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # All zero if no bin can accommodate

    
    # First Fit Decreasing Heuristic imitation: Prefer bins with smaller remaining capacity AFTER placing item
    remaining_after_placement = bins_remain_cap - item
    remaining_after_placement[remaining_after_placement < 0] = np.inf # set infeasible to inf for sorting
    
    # Rank feasible bins based on remaining capacity after item placement. Smaller is better.
    ranks = np.argsort(remaining_after_placement)
    
    # Assign rank-based priorities. Higher rank (smaller remaining cap) gets higher priority
    priority_values = np.linspace(1, 0.1, len(bins_remain_cap))  # Decreasing priority as rank decreases.
    
    valid_ranks = ranks[feasible_bins[ranks]]
    priorities[valid_ranks] = priority_values[:len(valid_ranks)]  # valid_ranks handles potential rank change


    # Bonus for "almost full" bins if item can be packed there:
    almost_full_threshold = 0.9
    almost_full_bins = (bins_remain_cap / (bins_remain_cap + item)) > almost_full_threshold
    priorities[feasible_bins & almost_full_bins] += 0.25 #Add a small bonus if its "almost full" after placement

    return priorities
```
