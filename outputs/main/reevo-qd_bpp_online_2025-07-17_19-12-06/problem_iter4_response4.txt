```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            fill_ratio = item / cap

            # Heavily reward perfect fits
            if abs(cap - item) < 1e-6:
                priorities[i] = 1000.0
            # Prioritize bins that would be filled to a higher degree, aiming for near-full (95%)
            else:
                priorities[i] = 100 / abs(fill_ratio - 0.95)  # Higher priority for closer to 95%
        else:
            # Penalize infeasibility
            priorities[i] = -1000.0
    return priorities
```
