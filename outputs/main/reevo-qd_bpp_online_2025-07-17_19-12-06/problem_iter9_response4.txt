```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap[0] + item if len(bins_remain_cap) > 0 else 1 # Assume constant bin capacity, if bins_remain_cap is empty set capacity to item + 1.
    target_fill_ratio = 0.95

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            new_cap = cap - item
            fill_ratio = (bin_capacity - new_cap) / bin_capacity
            
            # Gaussian-like priority around the target fill ratio
            priority = np.exp(-((fill_ratio - target_fill_ratio)**2) / (2 * 0.05**2))

            # Reward almost full, but not overflowing
            # Overflow penalty, stronger as we get more full
            if fill_ratio > 1.0:
              priority = -100 * (fill_ratio-1.0)  # Harsh penalty for overflow
            
            # Perfect fit reward
            if abs(item - cap) < 1e-6:  # Epsilon comparison
                priority += 5  # Additional reward for perfect fit, tune as necessary.
            priorities[i] = priority
        else:
            priorities[i] = -1000  # Large negative priority for infeasible bins
    return priorities
```
