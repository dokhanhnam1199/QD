```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            fill_ratio = item / cap

            # Perfect fit gets the highest priority
            if abs(item - cap) < 1e-6:
                priorities[i] = 1000.0
            # Near perfect fit is also good, but less than perfect fit
            elif fill_ratio > 0.9:
                 priorities[i] = 500 * fill_ratio # Scales between 450 and 500. higher fill_ratio is better
            else:
            # Otherwise, prioritize bins that would be filled to a higher degree,
            # but not too high to avoid waste.
                priorities[i] = 100 * fill_ratio # Scales between 0 and 100, higher fill_ratio is better.

        else:
            priorities[i] = -1000.0  # Negative priority if it can't fit
    return priorities
```
