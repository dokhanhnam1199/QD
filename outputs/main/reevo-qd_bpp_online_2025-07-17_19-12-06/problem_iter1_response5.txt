```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very high priority for bins that can fit the item snugly.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1 / (bins_remain_cap[fit_mask] - item + 1e-9)

    # Give a slight preference to bins that are already somewhat full
    # (avoid creating too many nearly-empty bins).
    priorities += (1 - bins_remain_cap / np.max(bins_remain_cap)) # Avoids division by zero if all are empty at first
    

    # Penalize bins that are too big, to try and keep them for larger items.
    # This helps with worst-fit-decreasing like behavior.
    priorities -= (bins_remain_cap - item) * (bins_remain_cap > item) / np.max(bins_remain_cap) # Only applies if it doesn't fit

    # If no bin can fit, then all bins should be equally considered.
    if not np.any(fit_mask):
      priorities = np.ones_like(priorities) * (1/np.mean(bins_remain_cap)+1e-9)

    return priorities
```
