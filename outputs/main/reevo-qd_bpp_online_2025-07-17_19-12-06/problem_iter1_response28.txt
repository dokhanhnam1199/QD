```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired priority: Give preference to bins that can fit the item with minimal waste
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            priorities[i] = (cap - item) / cap  # Smaller waste is higher priority

    # Give a boost to bins that are almost full (to consolidate items) but can still fit
    almost_full_threshold = 0.1  # Tune this parameter. Higher means stricter "almost full" definition.
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item and cap <= (item + almost_full_threshold):
            priorities[i] += 0.5  # Add a constant boost if it's almost full

    # Penalize bins that will become too empty after adding the item
    too_empty_threshold = 0.6  # Tune this parameter
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item and (cap - item) > (too_empty_threshold * np.max(bins_remain_cap)):
             priorities[i] -= 0.3

    #Very small remaining caps (but large enough to accomodate item), give them higher priority
    min_fill_threshold = 0.05 #Tune this parameter
    for i, cap in enumerate(bins_remain_cap):
        if cap>= item and cap < min_fill_threshold:
            priorities[i]+= 0.7
    return priorities
```
