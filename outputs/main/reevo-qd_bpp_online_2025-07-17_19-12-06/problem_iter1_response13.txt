```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired: Prioritize bins that can fit the item snugly.
    # A larger positive value implies higher priority. If it can't fit assign a very low score
    fit_check = bins_remain_cap >= item
    priorities[fit_check] = bins_remain_cap[fit_check] - item

    # Give a boost to almost full bins but that have enough capacity
    almost_full = (bins_remain_cap > item) & (bins_remain_cap <= 2 * item)
    priorities[almost_full] += 1.0

    # Assign a very negative priority to bins that cannot fit the item.
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
