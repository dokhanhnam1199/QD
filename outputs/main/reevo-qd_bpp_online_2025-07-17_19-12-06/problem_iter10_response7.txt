```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            fill_ratio = item / cap
            
            # Perfect fit is ideal
            if abs(fill_ratio - 1) < 1e-6:
                priorities[i] = 1000
            # Prioritize bins that would be filled to a higher degree, close to full.
            else:
                priorities[i] = 1 / abs(fill_ratio - 0.9)
                
                # Slightly penalize almost full bins to avoid creating tiny waste
                if fill_ratio > 0.95:
                    priorities[i] *= 0.8
                # Give some bonus for filling more than half.
                elif fill_ratio > 0.5:
                    priorities[i] *= 1.1
                # Small penalty for bins that are not filled much
                elif fill_ratio < 0.2:
                     priorities[i] *= 0.9
                    
        else:
            priorities[i] = -1  # negative priority since it can not be fit
    return priorities
```
