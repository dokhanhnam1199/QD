{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Feasibility: Only consider bins that can accommodate the item\n    feasible_bins = bins_remain_cap >= item\n    \n    if not np.any(feasible_bins):\n        return priorities # All zero if no bin can accommodate\n\n    \n    # First Fit Decreasing Heuristic imitation: Prefer bins with smaller remaining capacity AFTER placing item\n    remaining_after_placement = bins_remain_cap - item\n    remaining_after_placement[remaining_after_placement < 0] = np.inf # set infeasible to inf for sorting\n    \n    # Rank feasible bins based on remaining capacity after item placement. Smaller is better.\n    ranks = np.argsort(remaining_after_placement)\n    \n    # Assign rank-based priorities. Higher rank (smaller remaining cap) gets higher priority\n    priority_values = np.linspace(1, 0.1, len(bins_remain_cap))  # Decreasing priority as rank decreases.\n    \n    valid_ranks = ranks[feasible_bins[ranks]]\n    priorities[valid_ranks] = priority_values[:len(valid_ranks)]  # valid_ranks handles potential rank change\n\n\n    # Bonus for \"almost full\" bins if item can be packed there:\n    almost_full_threshold = 0.9\n    almost_full_bins = (bins_remain_cap / (bins_remain_cap + item)) > almost_full_threshold\n    priorities[feasible_bins & almost_full_bins] += 0.25 #Add a small bonus if its \"almost full\" after placement\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate remaining capacity after adding the item\n    remaining_after_add = bins_remain_cap - item\n    \n    # Give high priority to bins where the item fits and leaves minimal waste\n    fit_mask = remaining_after_add >= 0\n    \n    if np.any(fit_mask):\n        waste = remaining_after_add[fit_mask]\n        priorities[fit_mask] = 1 / (waste + 0.0001)  # Avoid division by zero. Higher priority for less waste.\n\n        # Bonus for bins that are close to full after adding the item\n        fullness = 1 - (waste / bins_remain_cap[fit_mask])\n        priorities[fit_mask] += fullness*2 # Adding scaled 'fullness' as priority\n\n    # Penalize bins where the item doesn't fit heavily\n    else:\n        priorities = np.full_like(bins_remain_cap, -1000.0)\n\n    return priorities\n\n[Reflection]\nPrioritize minimal waste and bin fullness more directly. Penalize infeasibility strongly.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}