{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Favor bins where the item fits.\n    fits = item <= bins_remain_cap\n    priorities[fits] += 1\n\n    # Heuristic 2:  Higher priority for bins where the item fills a large proportion of the bin,\n    # but avoid leaving too little space. Balance utilization and fragmentation.\n    fill_ratio = item / bins_remain_cap\n    priorities[fits] += fill_ratio[fits]\n\n    # Heuristic 3: Penalize bins that become too full after adding the item, since that reduces reusability\n    remaining_after_fit = bins_remain_cap - item\n    nearly_full = (remaining_after_fit > 0) & (remaining_after_fit < 0.1) # Less than 0.1 remains, very full\n    priorities[nearly_full] -= 0.5 # slight penality, but avoid excessive full bins\n\n    # Heuristic 4:  Give higher priority to bins with larger remaining capacity if it is larger than the item.\n    #                try to fully fill a small bin before attempting to fill larger bins.\n    large_bins = bins_remain_cap >= item\n    priorities[large_bins] += bins_remain_cap[large_bins] / np.max(bins_remain_cap) * 0.2\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Give high priority to bins that can fit the item exactly or with minimal waste.\n    # Also penalize bins where the item almost fills the bin but leaves a tiny gap.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if item <= cap:\n            waste = cap - item\n            if waste == 0:  # Perfect fit\n                priorities[i] = 1000  # Extremely high priority for perfect fit\n            else:\n                priorities[i] = 1 / (waste + 0.0001)  # Inverse of waste, prevents division by zero\n\n            # Penalize \"almost full\" bins (e.g., waste is very small, but not zero)\n            if 0 < waste < 0.1:\n                 priorities[i] *= 0.5  # Reduce priority\n\n        else:\n            priorities[i] = -100  # Very low priority if it doesn't fit\n\n    return priorities\n\n[Reflection]\nPrioritize perfect fits. Penalize near-full and non-fitting bins heavily. Waste minimization is key.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}