```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: If a bin can fit the item perfectly, assign it the highest priority.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = np.inf  # Infinite priority

    # Rule 2: If item does not fit the bin assign it -inf
    no_fit = bins_remain_cap < item
    priorities[no_fit] = -np.inf

    # Rule 3: For bins that can fit, prioritize bins with smaller remaining capacity after placing the item.
    # This encourages filling bins up and reducing fragmentation.
    fit_bins = bins_remain_cap >= item
    remaining_capacity_after_fit = bins_remain_cap[fit_bins] - item
    #Prioritize bins with small remaining capacity
    priorities[fit_bins] = 1 / (remaining_capacity_after_fit + 1e-9)

    #Rule 4: For very small items, prioritize the almost full bin to avoid having lots of almost empty bins
    small_item = item < 0.1
    almost_full = bins_remain_cap > item
    almost_full = np.logical_and(almost_full, bins_remain_cap < 0.2) # remaining cap is also small
    if small_item and np.any(almost_full):
        priorities[almost_full] = 100 #High priority

    return priorities
```
