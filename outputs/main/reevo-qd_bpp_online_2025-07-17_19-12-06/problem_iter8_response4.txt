```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining = cap - item
            fill_ratio = item / cap

            # Prioritize near-full bins, but not perfect fits.
            priorities[i] = 1 / (abs(fill_ratio - 0.9) + 0.05) # Target 90% full
            # Slightly penalize nearly empty bins
            if fill_ratio < 0.1:
                priorities[i] *= 0.5

            # Avoid perfect fits to retain flexibility for future items
            if abs(fill_ratio - 1) < 1e-6:
                priorities[i] = -10  # Give it a small negative priority, avoiding it if possible

        else:
            priorities[i] = -1  # negative priority since it can not be fit
    return priorities
```
