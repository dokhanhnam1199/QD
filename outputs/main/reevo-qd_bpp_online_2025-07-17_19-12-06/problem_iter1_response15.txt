```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, give a high priority to bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Prioritize bins where the item fills a large portion of the remaining capacity,
    # but not so much that it leaves very little space.
    fill_ratio = item / bins_remain_cap
    sweet_spot = (fill_ratio > 0.5) & (fill_ratio <= 1.0) & can_fit # Try to fill > half the bin

    priorities[sweet_spot] += 2

    #Prioritize bins which maximize the bin filling. Avoids fragmentation
    priorities[can_fit] += (bins_remain_cap[can_fit] - item)

    # Penalize bins where adding the item would result in very little space remaining (fragmentation).

    small_rem = (bins_remain_cap - item) <= 0.1 # e.g., <= 0.1 implies low utility for this bin.

    priorities[small_rem & can_fit] -= 1

    # If no bin can fit the item, or if no bins are available (all capacities are zero), return a default priority. This avoids errors such as division by zero when using this priority function
    if not np.any(can_fit):
        priorities = np.zeros_like(bins_remain_cap)
        priorities[:] = -1  # Or some other default value.

    return priorities
```
