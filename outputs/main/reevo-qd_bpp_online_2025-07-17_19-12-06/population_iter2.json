[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 11.60964047443681,
    "mi": 94.04446327225541,
    "token_count": 47.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response12.txt_stdout.txt",
    "code_path": "problem_iter1_code12.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate how full the bin would be if the item was added\n            fill_ratio = item / cap\n            # Prioritize bins that would be filled to a higher degree\n            # but avoid filling them completely. A perfect fit is ideal\n            priorities[i] = 1 / abs(fill_ratio - 0.95) # close to 1 is better.\n            #If item exactly fits in the bin assign the highest priority\n            if abs(fill_ratio - 1) < 1e-6:\n                priorities[i] = 1000\n        else:\n            priorities[i] = -1 # negative priority since it can not be fit\n    return priorities",
    "response_id": 12,
    "obj": 4.038691663342641,
    "SLOC": 14.0,
    "cyclomatic_complexity": 5.0,
    "halstead": 110.44611534953322,
    "mi": 78.81492371877928,
    "token_count": 157.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response4.txt_stdout.txt",
    "code_path": "problem_iter2_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate how full the bin would be if the item was added\n            fill_ratio = item / cap\n            # Prioritize bins that would be filled to a higher degree\n            # but avoid filling them completely. A perfect fit is ideal\n            priorities[i] = 1 / abs(fill_ratio - 0.95) # close to 1 is better.\n            #If item exactly fits in the bin assign the highest priority\n            if abs(fill_ratio - 1) < 1e-6:\n                priorities[i] = 1000\n            # Slightly penalize almost full bins to avoid creating tiny waste\n            elif fill_ratio > 0.98:\n                priorities[i] *= 0.9\n\n        else:\n            priorities[i] = -1 # negative priority since it can not be fit\n    return priorities",
    "response_id": 4,
    "obj": 4.038691663342641,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 187.48684196024655,
    "mi": 77.72637944918979,
    "token_count": 152.0,
    "exec_success": true
  }
]