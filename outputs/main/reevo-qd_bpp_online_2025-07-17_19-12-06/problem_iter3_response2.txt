```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0 # Assuming bin size is 1.0

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            new_cap = cap - item
            utilization = (bin_size - new_cap) / bin_size

            # Perfect fit bonus
            if abs(new_cap) < 1e-6:
                priorities[i] += 1000

            # Near-perfect fit bonus (e.g., >90% utilization)
            elif utilization > 0.9:
                priorities[i] += 500 * utilization # Scale bonus by utilization

            # Reward higher utilization but penalize large waste
            waste = new_cap / bin_size
            priorities[i] += 100 * utilization - 50 * waste

            # Prefer to put item in the almost full bin
            priorities[i] += 20 * (1 - waste)

        else:
            # Large penalty for infeasibility
            priorities[i] = -10000

    return priorities
```
