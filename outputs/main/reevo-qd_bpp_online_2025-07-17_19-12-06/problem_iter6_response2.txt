```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_cap = cap - item
            fill_ratio = item / cap

            # Perfect fit gets the highest priority
            if abs(remaining_cap) < 1e-6:
                priorities[i] = 1000.0
            else:
                # Prioritize high fill ratios, but penalize very high ones
                # The ideal fill ratio is around 0.9
                priority = 1 / abs(fill_ratio - 0.9)

                # Penalize almost full bins more strongly
                if fill_ratio > 0.95:
                    priority *= (1 - (fill_ratio - 0.95) / 0.05)  # Linear penalty

                priorities[i] = priority

        else:
            priorities[i] = -1000.0  # Large negative priority for infeasible bins

    return priorities
```
