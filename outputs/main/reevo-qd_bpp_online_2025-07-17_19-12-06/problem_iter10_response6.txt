```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining = cap - item
            if remaining < 0.0001:  # Perfect fit
                priorities[i] = 1000.0
            elif remaining / cap < 0.05:  # Near perfect fit
                priorities[i] = 500.0
            elif remaining / cap > 0.95:  # Near overflow (very bad)
                priorities[i] = -200.0
            else:
                fill_ratio = item / cap
                priorities[i] = 100.0 * fill_ratio  # Reward filling, but not excessively
        else:
            priorities[i] = -1000.0  # Cannot fit
    return priorities
```
