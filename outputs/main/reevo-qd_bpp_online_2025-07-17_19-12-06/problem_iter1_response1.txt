```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1

    # If no bin can fit, use a fallback strategy
    if not np.any(fit_mask):
        # Prioritize bins with the largest remaining capacity as they would be less wasteful
        priorities = bins_remain_cap
        return priorities

    # Add a bonus for bins where the item fills a large percentage of the remaining capacity
    # but not exceeding the bin capacity
    fill_ratio = item / bins_remain_cap[fit_mask]
    priorities[fit_mask] += fill_ratio

    # Add a penalty for creating very small remaining capacities after packing
    remaining_after_pack = bins_remain_cap[fit_mask] - item
    small_remaining_mask = remaining_after_pack < 0.1  # Arbitrary threshold
    priorities[fit_mask][small_remaining_mask] -= 0.5

    return priorities
```
