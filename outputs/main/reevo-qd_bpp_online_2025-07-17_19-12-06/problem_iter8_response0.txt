```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            fill_ratio = item / cap
            
            # Target near-full bins (e.g., 95%), and penalize near-perfect fits to reduce waste.
            target_fill = 0.95
            priority = 1 / abs(fill_ratio - target_fill)

            # If item exactly fits in the bin assign the highest priority
            if abs(fill_ratio - 1) < 1e-6:
                priority = 1000

            # Slightly penalize almost full bins to avoid creating tiny waste, but not too harshly as 0.98 may be a good fit sometimes.
            elif fill_ratio > 0.98:
                priority *= 0.8  # Reduced penalty compared to v1

            priorities[i] = priority

        else:
            priorities[i] = -1  # negative priority since it can not be fit
    return priorities
```
