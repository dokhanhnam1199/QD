```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Assign very low priority to infeasible bins

    # 2. Remaining capacity after packing: Prioritize bins that leave minimal waste
    remaining_capacity = bins_remain_cap - item
    remaining_capacity[~feasible_bins] = np.inf #ignore infeasible ones

    # 3. Prioritize bins with smaller remaining capacity after packing (minimize waste)
    #    Add a small constant to avoid division by zero. Larger item means more importance on remaining_capacity.

    priorities[feasible_bins] = -remaining_capacity[feasible_bins] + item # Use -remaining_capacity as a higher number signifies less remaining cap

    # 4. Secondary criteria: If remaining capacity is the same, prioritize bins that were previously more full

    previous_fill_ratio = (1 - (bins_remain_cap / (bins_remain_cap + item) if (bins_remain_cap + item)[0] > 0 else 1 )) #Estimates original fill, add one for items that do not fit
    previous_fill_ratio[~feasible_bins] = 0
    priorities[feasible_bins] = priorities[feasible_bins] + 0.1*previous_fill_ratio[feasible_bins] #Make secondary significance

    return priorities
```
