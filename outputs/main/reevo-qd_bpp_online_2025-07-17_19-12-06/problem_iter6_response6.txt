```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            fill_ratio = item / cap
            
            # Target fill ratio is 0.9.  Use inverse distance to target fill ratio.
            priorities[i] = 1 / (abs(fill_ratio - 0.9) + 1e-9)  # Adding small value to avoid division by zero
            
            # Perfect fit is the best.
            if abs(fill_ratio - 1) < 1e-6:
                priorities[i] = 1000.0
            # Slightly penalize almost full bins to avoid creating tiny waste
            elif fill_ratio > 0.98:
                priorities[i] *= 0.7
            # Give a bonus for filling more than half.
            elif fill_ratio > 0.5:
                priorities[i] *= 1.2
            # Penalize low fill ratios
            elif fill_ratio < 0.1:
                priorities[i] *= 0.5


        else:
            priorities[i] = -1.0  # negative priority since it can not be fit
    return priorities
```
