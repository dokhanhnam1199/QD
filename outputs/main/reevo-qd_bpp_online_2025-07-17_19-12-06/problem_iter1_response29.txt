```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing inspired heuristic:
    # High priority to bins that can fit the item almost perfectly
    # Penalize bins that would waste too much space
    
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            
            # Priority is higher if waste is smaller (but not zero)
            # and decreases as item size increases
            if waste > 0:
                priorities[i] = (1 / (waste + 0.0001)) # avoid zero division
            else:
                # Perfect fit gets very high priority
                priorities[i] = 1000 #arbitrary high value

            # If waste is too large, drastically reduce priority
            if waste > 0.5 * cap:  # e.g., don't leave half the bin empty for a tiny item
                priorities[i] *= 0.1  # Lower priority significantly

        else:
            priorities[i] = -1000 # Very low priority, can't fit

    return priorities
```
