```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0  # Assume bin size is 1
    target_fill_ratio = 0.95

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            new_fill_level = 1 - (cap - item) / bin_size
            diff_from_target = abs(new_fill_level - target_fill_ratio)

            # Continuous priority function rewarding bins closer to target fill ratio
            priority = np.exp(-diff_from_target * 10)  # Exponential decay

            # Bonus for near perfect fit, but less than v1 since we want to fill other bins
            if abs(item - cap) < 1e-6:
                priority += 10

            priorities[i] = priority
        else:
            priorities[i] = -1000  # Large penalty for infeasibility

    return priorities
```
