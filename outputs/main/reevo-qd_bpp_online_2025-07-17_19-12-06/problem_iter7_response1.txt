```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining = cap - item
            if remaining == 0:
                # Perfect fit: highest priority
                priorities[i] = 1000
            elif remaining / cap <= 0.05:
                # Near-perfect fit: high priority
                priorities[i] = 500
            elif remaining / cap >= 0.95:
                # Item is very small compared to the bin size: low priority
                priorities[i] = -20
            else:
                # Moderate fit: prioritize bins that would be filled reasonably well
                fill_ratio = item / cap
                priorities[i] = 1 / abs(fill_ratio - 0.9) # target 90% full
        else:
            # Item doesn't fit: negative priority
            priorities[i] = -100
    return priorities
```
