```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Rule out bins that cannot fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Very low priority

    # 2. Best Fit Criterion: Prioritize bins with the smallest remaining space after placing the item.
    #    This encourages filling bins as much as possible.
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space  # Smaller remaining space -> higher priority

    # 3. Tie-breaking: If multiple bins have the same remaining space, prioritize bins with larger original capacity.
    # This step requires knowing the original capacity (can be passed as another argument or pre-calculated).
    # For now, assume all bins have the same capacity, so skip this step to avoid introducing external parameters.

    # 4. Penalize almost-full bins to avoid creating slivers, but only if the item isn't too small.
    almost_full_mask = (bins_remain_cap >= item) & (bins_remain_cap <= 1.1 * item) & (item > 0.1)
    priorities[almost_full_mask] -= 0.5

    # 5. Encourage filling bins if item is large enough to make a significant dent, otherwise open a new bin.
    large_item_threshold = 0.6
    if item >= large_item_threshold:
       priorities[feasible_mask] += 0.2 # Slight bonus to fill the bin if the item is significant

    return priorities
```
