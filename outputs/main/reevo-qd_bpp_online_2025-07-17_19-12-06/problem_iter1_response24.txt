```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing inspired priority
    # Give high priority to bins that can accommodate the item
    # and have relatively low remaining capacity.
    
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Prioritize bins with tighter fit
            priorities[i] = 1 / (cap - item + 1e-9) # Avoid division by zero
            # Boost the priority slightly if the remaining capacity is a substantial fraction of bin size, 
            # indicating it might be better to fill this one somewhat than leave it mostly empty
            # Note: This is equivalent to trying best-fit from the bin that could accept it
            priorities[i] += 0.1 * (1 - (cap - item)/bins_remain_cap.max())  # Normalize by max capacity for reasonable boost
            
    # Penalize bins that are too full and won't accommodate the item
    # This part is implicitly taken care of as priorities array is initialized with zero. We only assign priority if bins can accept it.
    
    return priorities
```
