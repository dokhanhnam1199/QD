```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can fit the item.
    fitting_bins = bins_remain_cap >= item
    
    if np.any(fitting_bins):  # Only consider bins where the item fits
        waste = bins_remain_cap[fitting_bins] - item
        
        # Prioritize bins with minimum waste, inverse of waste (with a scaling factor).
        priorities[fitting_bins] = 1.0 / (waste + 1e-9)  # Add small value to avoid divide by zero

        # Give extra priority to bins that are almost full after adding the item.
        fullness = (item + bins_remain_cap[fitting_bins] - waste)  # No normalization needed as it's a factor
        priorities[fitting_bins] += fullness
    else:
        # If no bin fits the item, prioritize bins with larger remaining capacity, scaled down.
        priorities = bins_remain_cap * 0.1 # Scale down to be less important than fitting the item

    return priorities
```
