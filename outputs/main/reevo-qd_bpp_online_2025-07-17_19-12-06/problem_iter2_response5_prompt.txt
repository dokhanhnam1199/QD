{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Reward bins that can fit the item\n            priorities[i] = (cap - item) / cap  # Higher priority to bins with less wasted space\n            #priorities[i] = 1 / (cap - item + 0.00001) #try to fill them tightly to encourage later items to go to later bins\n        else:\n            # Penalize bins that cannot fit the item. Negative priority\n            priorities[i] = -1000 # Set to a very low negative value\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First-Fit Decreasing inspired heuristic:\n    # High priority to bins that can fit the item almost perfectly\n    # Penalize bins that would waste too much space\n    \n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            waste = cap - item\n            \n            # Priority is higher if waste is smaller (but not zero)\n            # and decreases as item size increases\n            if waste > 0:\n                priorities[i] = (1 / (waste + 0.0001)) # avoid zero division\n            else:\n                # Perfect fit gets very high priority\n                priorities[i] = 1000 #arbitrary high value\n\n            # If waste is too large, drastically reduce priority\n            if waste > 0.5 * cap:  # e.g., don't leave half the bin empty for a tiny item\n                priorities[i] *= 0.1  # Lower priority significantly\n\n        else:\n            priorities[i] = -1000 # Very low priority, can't fit\n\n    return priorities\n\n[Reflection]\nPrioritize near-perfect fits, penalize excessive waste, and strongly discourage infeasible placements.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}