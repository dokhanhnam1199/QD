```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate remaining capacity after adding the item
            remaining_cap = cap - item
            fill_ratio = item / cap

            # Reward near-full bins using direct fill ratio
            priorities[i] = fill_ratio

            # Heavily reward perfect fits
            if abs(remaining_cap) < 1e-6:
                priorities[i] += 100

            # Penalize near-empty bins
            if remaining_cap > 0.7 * cap:
                priorities[i] -= 0.1 * (remaining_cap / cap)  # Linear penalty

        else:
            priorities[i] = -1000  # Large penalty for overflows

    return priorities
```
