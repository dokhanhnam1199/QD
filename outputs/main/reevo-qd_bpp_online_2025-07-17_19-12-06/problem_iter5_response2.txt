```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            new_cap = cap - item
            fill_ratio = item / cap

            # Perfect fit gets the highest priority
            if abs(cap - item) < 1e-6:
                priorities[i] = 1000
            else:
                # Favor bins that will be near-full (e.g., 95% utilization)
                target_utilization = 0.95
                utilization_diff = abs((cap - new_cap) / cap - target_utilization)
                
                # Adjust priority based on how close we are to the target utilization
                priority_utilization = 1 / (utilization_diff + 0.01)  # Adding small value to prevent division by zero

                # Penalize excessive waste
                waste_ratio = new_cap / 1.0  # Assuming bin size is 1, waste is simply remaining capacity
                priority_waste = max(0, 1 - waste_ratio) # Higher the waste lower the priority

                priorities[i] = 0.7 * priority_utilization + 0.3 * priority_waste


        else:
            priorities[i] = -1  # Negative priority since it cannot be fit
    return priorities
```
