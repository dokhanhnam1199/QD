{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = bins_remain_cap[0] + item if len(bins_remain_cap) > 0 else 1 # Assume constant bin capacity, if bins_remain_cap is empty set capacity to item + 1.\n    target_fill_ratio = 0.95\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate how full the bin would be if the item was added\n            new_cap = cap - item\n            fill_ratio = (bin_capacity - new_cap) / bin_capacity\n            \n            # Gaussian-like priority around the target fill ratio\n            priority = np.exp(-((fill_ratio - target_fill_ratio)**2) / (2 * 0.05**2))\n\n            # Reward almost full, but not overflowing\n            # Overflow penalty, stronger as we get more full\n            if fill_ratio > 1.0:\n              priority = -100 * (fill_ratio-1.0)  # Harsh penalty for overflow\n            \n            # Perfect fit reward\n            if abs(item - cap) < 1e-6:  # Epsilon comparison\n                priority += 5  # Additional reward for perfect fit, tune as necessary.\n            priorities[i] = priority\n        else:\n            priorities[i] = -1000  # Large negative priority for infeasible bins\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate how full the bin would be if the item was added\n            fill_ratio = item / cap\n\n            # Reward near-full bins (around 95%)\n            near_full_reward = 1 / abs(fill_ratio - 0.95)\n\n            # Heavily reward perfect fits\n            perfect_fit_reward = 0\n            if abs(item - cap) < 1e-6:\n                perfect_fit_reward = 1000\n\n            # Combine the rewards, weighting perfect fits higher\n            priorities[i] = near_full_reward + perfect_fit_reward\n\n            # Scale down if the bin will be overfilled by a small amount\n            if fill_ratio > 1.0:\n                priorities[i] = -1  # Infeasible\n        else:\n            priorities[i] = -1  # Infeasible\n\n    return priorities\n\n[Reflection]\nDirectly rewarding near-full and perfect fits, penalizing overflow, and avoiding Gaussian distributions improves performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}