{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Primary criterion: Fit the item, higher remaining capacity preferred\n            priorities[i] = cap - item  # Smaller waste is better (first fit decreasing principle)\n        else:\n            # Cannot fit, strongly discourage this bin (large negative priority)\n            priorities[i] = -1e9 # a very large negative value.\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Give a high priority to bins where the item fits with minimal waste.\n    # First, identify bins that can fit the item.\n    \n    fitting_bins = bins_remain_cap >= item\n    \n    if np.any(fitting_bins):  # Only consider bins where the item fits\n        waste = bins_remain_cap[fitting_bins] - item\n        \n        #Prioritize bins with minimum waste, inverse of waste\n        priorities[fitting_bins] = 1 / (waste + 1e-9) #Add small value to avoid divide by zero\n        \n        # Give extra priority to bins that are almost full after adding the item.\n        fullness = (item + bins_remain_cap[fitting_bins] - waste) /1 # normalize between 0 and 1. dividing by 1 as max bin capacity is 1\n        priorities[fitting_bins] += fullness\n    else:\n        #If no bin fits the item, prioritize bins with larger remaining capacity. This represents an approach to 'First-Fit Decreasing'.\n        priorities = bins_remain_cap\n        \n    return priorities\n\n[Reflection]\nPrioritize minimal waste and fullness when item fits; otherwise, use remaining capacity. Avoid large negative penalties.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}