```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    target_fill_ratio = 0.95

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            fill_ratio = item / cap
            # Reward bins that would be filled close to the target ratio
            priorities[i] = 1 / abs(fill_ratio - target_fill_ratio)

            # Heavily reward perfect fits
            if abs(fill_ratio - 1) < 1e-6:
                priorities[i] = 1000

            # Penalize near-full bins to avoid creating tiny waste
            elif fill_ratio > 0.98:
                priorities[i] *= 0.8  # Reduced the penalization compared to v1

        else:
            priorities[i] = -1  # negative priority since it can not be fit
    return priorities
```
