```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            fill_ratio = item / cap
            remaining_ratio = (cap - item) / cap

            # Give a high score if it's a near perfect fit
            if abs(fill_ratio - 1) < 1e-6:
                priorities[i] = 1000.0
            else:
                # Base priority on how close the fill ratio is to an ideal fill ratio (e.g., 0.9)
                ideal_fill_ratio = 0.9
                priority = 100 / (abs(fill_ratio - ideal_fill_ratio) + 0.05)  # Adding 0.05 to avoid division by zero, and smoothing the curve

                # Penalize bins that would be too empty after adding the item
                if remaining_ratio > 0.5:
                    priority -= 20 * (remaining_ratio - 0.5)  # Stronger penalty for very empty bins

                # Slightly reward slightly fuller bins (but not perfect fits, which already have a high score)
                if 0.7 < fill_ratio < 1.0:
                    priority += 10 * (fill_ratio - 0.7)

                priorities[i] = priority

        else:
            priorities[i] = -1000.0  # Cannot fit

    return priorities
```
