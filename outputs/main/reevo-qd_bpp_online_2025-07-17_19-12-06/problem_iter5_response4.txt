```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            new_cap = cap - item
            utilization = 1 - (new_cap / cap)

            # Reward near-full bins, penalize waste
            priority = 0.0

            # Perfect fit bonus
            if abs(item - cap) < 1e-6:
                priority += 1000

            # Near-full reward
            if 0.85 <= utilization <= 1.0:
                priority += 100 * utilization

            # Utilization factor - balance between using space and leaving too little
            priority += 50 * utilization

            # Waste penalty - discourage leaving tiny gaps
            if new_cap > 0:
                priority -= 25 * (new_cap / cap)

            priorities[i] = priority

        else:
            priorities[i] = -1000  # Very low priority if it doesn't fit

    return priorities
```
