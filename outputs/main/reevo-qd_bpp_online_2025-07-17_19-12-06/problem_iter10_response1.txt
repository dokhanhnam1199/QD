```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how full the bin would be if the item was added
            fill_ratio = item / cap
            # Prioritize bins that would be filled to a higher degree
            # but avoid filling them completely. A perfect fit is ideal
            priorities[i] = 1 / abs(fill_ratio - 0.95)
            #If item exactly fits in the bin assign the highest priority
            if abs(fill_ratio - 1) < 1e-6:
                priorities[i] = 1000
            # Slightly penalize almost full bins to avoid creating tiny waste
            elif fill_ratio > 0.98:
                priorities[i] *= 0.9
            # Moderately penalize bins that are more than half empty after placing the item
            elif (cap - item) / 1.0 > 0.5:  # Ensure float division
                priorities[i] *= 0.7
        else:
            priorities[i] = -1 # negative priority since it can not be fit
    return priorities
```
