```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item
    
    # Give high priority to bins where the item fits and leaves minimal waste
    fit_mask = remaining_after_add >= 0
    
    if np.any(fit_mask):
        waste = remaining_after_add[fit_mask]
        priorities[fit_mask] = 1 / (waste + 0.0001)  # Avoid division by zero. Higher priority for less waste.

        # Bonus for bins that are close to full after adding the item
        fullness = 1 - (waste / bins_remain_cap[fit_mask])
        priorities[fit_mask] += fullness*2 # Adding scaled 'fullness' as priority

    # Penalize bins where the item doesn't fit heavily
    else:
        priorities = np.full_like(bins_remain_cap, -1000.0)

    return priorities
```
