```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, feasibility, nearly-full reward, and balancing."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check:
    feasible_mask = item <= bins_remain_cap
    priorities[~feasible_mask] = -np.inf

    # Best Fit:
    remaining_space = bins_remain_cap - item
    priorities[feasible_mask] = -remaining_space[feasible_mask]

    # Nearly-full reward: Give high priority to almost full bins.
    almost_full_threshold = 0.1  # Adjust based on problem specifics
    almost_full_mask = (bins_remain_cap - item) <= almost_full_threshold
    priorities[almost_full_mask] += 1  # Boost priority

    # Balancing term: Penalize filling the fullest bins slightly, if possible.
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 1:
        priorities[feasible_mask][np.argmax(bins_remain_cap[feasible_mask])] -= 0.005

    return priorities
```
