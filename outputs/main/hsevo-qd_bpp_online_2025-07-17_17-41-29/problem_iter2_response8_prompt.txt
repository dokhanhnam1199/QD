{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Uses a combination of factors to determine priority:\n    - How full the bin would be after adding the item.  Favors near-full bins, avoiding fragmentation.\n    - Whether the item fits at all.  Assigns very low priority if it doesn't fit.\n    - A small bias towards bins that are already somewhat full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fits = item <= bins_remain_cap\n\n    # Assign very low priority to bins where the item doesn't fit.  A large negative number.\n    priorities[~fits] = -1e9\n\n    # Calculate fill ratios if the item were added\n    hypothetical_remaining = bins_remain_cap - item\n    hypothetical_fill_ratio = 1 - (hypothetical_remaining / np.max(bins_remain_cap)) # Use max bin cap to normalise\n    hypothetical_fill_ratio[~fits] = 0  # Ensure zero when the item does not fit.\n\n    # Give preference to bins that would become nearly full\n    priorities[fits] = hypothetical_fill_ratio[fits] ** 2  # Make the higher ratios more significant\n    \n    #A slight adjustment to improve the chance that the bin fits tightly\n    space_left = bins_remain_cap - item\n    close_fits = (space_left >= 0) & (space_left < 0.1) #Prioritise fits where we leave a space under 0.1\n    priorities[close_fits] += 1 #Significant Boost\n\n    # Slightly penalize bins that would become almost empty\n    nearly_empty = (hypothetical_remaining > 0) & (hypothetical_remaining < 0.1)  # if remaining under 0.1 then penalise\n    priorities[nearly_empty] -= 0.05\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Prioritize bins that can fit the item. If not possible, assign a low score.\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -np.inf # Very low priority if cannot fit\n\n    # For bins that CAN fit, prioritize based on how FULL they will be.  Aim for density.\n    remaining_after_fit = bins_remain_cap[can_fit] - item\n    fill_ratios = (bins_remain_cap[can_fit] - remaining_after_fit) / bins_remain_cap[can_fit]\n\n    # Slightly penalize nearly full bins (risk of small items not fitting later) using a log-like transform\n    # Only impact when close to full, and not if almost empty.\n    # Scale fill_ratios so max fill_ratio maps to -1 * some small scaling\n    overfill_penalty_scale = 0.1\n\n    priorities[can_fit] = fill_ratios - overfill_penalty_scale * np.exp(10*(fill_ratios-0.95))  # Add penalty that only gets large when very full\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a weighted sum of several factors including fitability, nearly full priority, overfill penalty, and randomness while the worst only uses log ratios of item size to remaining capacity; (2nd) vs (19th) shows a similar difference in complexity and consideration of factors; Comparing (1st) vs (2nd), we see the top heuristic uses a combination of fitting score, preference for nearly full bins after placement, and overfill penalty; (3rd) vs (4th) highlights how softmax is used to prioritize bins with tighter fits while the fourth focuses on remaining space, penalizing unused capacity; Comparing (second worst) vs (worst), we see similar implementations that only focus on ratios of item size to remaining capacity and use logarithms. Overall: The better heuristics incorporate a combination of factors like fit, remaining space after placement, penalties for overfill or near-empty bins, and randomness to explore diverse solutions. Less effective heuristics rely solely on simple ratios. Good heuristics include clear penalization strategies.\n- \nOkay, let's redefine \"Current self-reflection\" for designing better heuristics, focusing on avoiding ineffective practices and incorporating a more robust approach.\n\n*   **Keywords:** Iterative Refinement, Outcome Analysis, Adaptive Parameters, Exploration-Exploitation Balance.\n*   **Advice:** Systematically analyze heuristic outcomes. Adapt parameters based on performance metrics. Employ diverse search strategies balancing exploration and exploitation.\n*   **Avoid:** Premature convergence, rigidity in parameter settings, neglecting outcome analysis, relying solely on intuition.\n*   **Explanation:** Move beyond simple combinations to actively learn from results, dynamically adjust heuristic behavior, and prevent getting stuck in suboptimal solutions.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}