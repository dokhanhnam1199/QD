```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a very low value
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Find bins that can accommodate the item
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Calculate remaining capacity after adding the item for valid bins
        remaining_capacity = bins_remain_cap[valid_bins] - item

        # Prioritize bins that leave the smallest remaining capacity
        # to fully utilize the bins and minimize fragmentation.
        priorities[valid_bins] = -remaining_capacity

        # Boost the priority of bins that fit the item perfectly.  This encourages full utilization.
        perfect_fit = remaining_capacity == 0
        priorities[valid_bins][perfect_fit] = np.inf

        # Introduce a small bias favoring bins that are already somewhat full (lower remaining capacity).
        # This helps in avoiding the creation of too many almost-empty bins. This is done on valid_bins, after perfect_fit
        # is handled
        priorities[valid_bins] += (1 / bins_remain_cap[valid_bins])

    # If no bin can accommodate the item, assign a very low priority.  This essentially means creating a new bin.
    return priorities
```
