```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, avoidance of small spaces using ratio, balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item

    # Best Fit: Smaller remaining space -> higher priority
    priorities[feasible_mask] = -remaining_space

    # Avoidance of very small spaces (ratio-based)
    small_space_ratio_threshold = 0.1
    very_small_space_mask = (remaining_space / bins_remain_cap[feasible_mask] < small_space_ratio_threshold) & (remaining_space > 0)
    if np.any(very_small_space_mask):
         min_remaining_space = np.min(remaining_space)
         very_small_and_not_best = very_small_space_mask & (remaining_space > min_remaining_space)
         priorities[feasible_mask][very_small_and_not_best] -= 0.1 #Penalty

    # Prioritize bins with more remaining capacity (balancing)
    capacity_normalized = bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)
    priorities[feasible_mask] += 0.005 * capacity_normalized

    return priorities
```
