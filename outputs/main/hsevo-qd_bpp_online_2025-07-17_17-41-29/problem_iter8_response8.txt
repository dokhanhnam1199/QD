```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, feasibility, and penalizes small remaining space."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: rule out bins that can't fit the item
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # 2. Best Fit: Prioritize bins with minimal remaining space
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # 3. Avoid very small spaces after packing
    small_space_threshold = 0.1
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold) & (np.sum(bins_remain_cap[feasible_mask] -item >small_space_threshold) > 0)
    if np.any(very_small_space_mask):
      priorities[feasible_mask][very_small_space_mask] -= 0.01

    # 4. Utilize Almost Full Bins
    almost_full_threshold = 0.9  # Define what constitutes an "almost full" bin after placing the item
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1- almost_full_threshold)
    priorities[feasible_mask][almost_full_mask]+=0.02

    return priorities
```
