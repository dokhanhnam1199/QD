{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version incorporates a 'fitability' score and randomness\n    inspired by quantum probabilities.  We also include a preference\n    for bins that are nearly full *after* the item is placed, mimicking\n    a 'least waste' approach, and a penalty for exceeding bin capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Fitability Score: How well the item fits (lower is better, but small)\n    fitability = np.abs(bins_remain_cap - item)\n\n    # Remaining Capacity Ratio:  Smaller ratio means almost full bin.\n    remaining_ratio = np.clip((bins_remain_cap - item) / np.mean(bins_remain_cap), a_min=0.0, a_max=1.0)  #prevent negative and scaling issues\n    # Preference for bins that are nearly full AFTER placement. Logarithm amplifies the preference for nearly empty space after placement\n    nearly_full_priority = -np.log(remaining_ratio + 0.001)  # Avoid log(0)\n\n    # Penalty for exceeding capacity\n    overfill_penalty = np.where(item > bins_remain_cap, -1e9, 0) # Large negative penalty\n\n    # \"Quantum\" Randomness: add tiny random variations\n    randomness = np.random.rand(len(bins_remain_cap)) * 0.01\n\n    # Combining Scores: weighted sum\n    priorities = (\n        -fitability * 0.5\n        + nearly_full_priority * 1.0\n        + overfill_penalty\n        + randomness\n    )\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    # First, prioritize bins that can actually fit the item.\n    fit_indices = np.where(bins_remain_cap >= item)[0]\n    \n    if len(fit_indices) > 0:\n        # Among the bins that can fit, prioritize those with the smallest remaining capacity\n        # after placing the item (i.e., minimize wasted space). This is a \"best fit\" approach.\n        remaining_capacities_after_fit = bins_remain_cap[fit_indices] - item\n        priorities[fit_indices] = 1 / (remaining_capacities_after_fit + 0.00001) # Adding a small constant to avoid division by zero\n\n        # Alternatively, prioritize bins where item size is closest to half of bin capacity\n        # optimal_fill_diffs = np.abs((bins_remain_cap[fit_indices]/2) - item)\n        # priorities[fit_indices] = 1 / (optimal_fill_diffs + 0.00001)\n\n    else:\n        #If it doesnt fit, use lowest remaining\n        priorities = 1 / (bins_remain_cap + 0.00001)\n    \n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a weighted sum of several factors including fitability, nearly full priority, overfill penalty, and randomness while the worst only uses log ratios of item size to remaining capacity; (2nd) vs (19th) shows a similar difference in complexity and consideration of factors; Comparing (1st) vs (2nd), we see the top heuristic uses a combination of fitting score, preference for nearly full bins after placement, and overfill penalty; (3rd) vs (4th) highlights how softmax is used to prioritize bins with tighter fits while the fourth focuses on remaining space, penalizing unused capacity; Comparing (second worst) vs (worst), we see similar implementations that only focus on ratios of item size to remaining capacity and use logarithms. Overall: The better heuristics incorporate a combination of factors like fit, remaining space after placement, penalties for overfill or near-empty bins, and randomness to explore diverse solutions. Less effective heuristics rely solely on simple ratios. Good heuristics include clear penalization strategies.\n- \nOkay, let's redefine \"Current self-reflection\" for designing better heuristics, focusing on avoiding ineffective practices and incorporating a more robust approach.\n\n*   **Keywords:** Iterative Refinement, Outcome Analysis, Adaptive Parameters, Exploration-Exploitation Balance.\n*   **Advice:** Systematically analyze heuristic outcomes. Adapt parameters based on performance metrics. Employ diverse search strategies balancing exploration and exploitation.\n*   **Avoid:** Premature convergence, rigidity in parameter settings, neglecting outcome analysis, relying solely on intuition.\n*   **Explanation:** Move beyond simple combinations to actively learn from results, dynamically adjust heuristic behavior, and prevent getting stuck in suboptimal solutions.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}