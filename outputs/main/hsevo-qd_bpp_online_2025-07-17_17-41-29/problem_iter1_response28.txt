```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item to each bin.
    remaining_after_add = bins_remain_cap - item

    # Identify bins that can accommodate the item.
    valid_bins = remaining_after_add >= 0

    # Initialize priority scores with a low value for bins that cannot fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Calculate priority for valid bins based on remaining capacity.
    # Smaller remaining capacity means a tighter fit, which is preferred (higher priority).
    # Adding a small constant to avoid division by zero.
    priorities[valid_bins] = 1 / (remaining_after_add[valid_bins] + 1e-9)

    # Alternatively, prioritize bins based on the fill ratio after adding the item:
    # fill_ratio = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / bins_remain_cap[valid_bins]
    # priorities[valid_bins] = fill_ratio

    # A heuristic that balances utilization and fragmentation:
    # If remaining capacity is less than item/2 after placing item into bin then give highest priority.
    near_full = remaining_after_add[valid_bins] < item / 2
    priorities[valid_bins][near_full] = np.max(priorities) + 1 if np.any(priorities != -np.inf) else 1

    return priorities
```
