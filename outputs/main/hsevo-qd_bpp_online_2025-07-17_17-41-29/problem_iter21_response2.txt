```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    feasible_mask = ~infeasible_mask
    
    if not np.any(feasible_mask):
        return priorities # No feasible bins, all -inf
    
    # 2. Best Fit with Capacity Awareness: Prioritize based on remaining space,
    #    but adjust priority based on the overall remaining capacity in the bins.
    remaining_space = bins_remain_cap[feasible_mask] - item
    
    # Normalize remaining space by bin capacity.  Smaller is better.
    normalized_remaining_space = remaining_space / bins_remain_cap[feasible_mask]
    priorities[feasible_mask] = -normalized_remaining_space #smaller is better

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits.
    small_space_threshold = 0.1 # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
   
    # Dynamic penalty based on how many feasible bins are available. This is very important.
    num_feasible_bins = np.sum(feasible_mask)
    if num_feasible_bins > 1:
          priorities[feasible_mask][very_small_space_mask] -= 0.05 * (1.0 / num_feasible_bins)  # Reduced penalty
    
    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins
    almost_full_threshold = 0.9 # Define what constitutes an "almost full" bin after placing the item
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1- almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.1

    # 5. Bonus for filling the bin perfectly
    perfect_fit_mask = remaining_space == 0
    priorities[feasible_mask][perfect_fit_mask] += 0.2

    #6. Penalize bins that are already nearly empty. This helps balance the load.
    nearly_empty_threshold = 0.2
    nearly_empty_mask = bins_remain_cap[feasible_mask] / np.max(bins_remain_cap) > nearly_empty_threshold
    priorities[feasible_mask][nearly_empty_mask] -= 0.03
    

    return priorities
```
