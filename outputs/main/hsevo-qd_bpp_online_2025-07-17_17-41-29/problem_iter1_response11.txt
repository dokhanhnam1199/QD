```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers both the remaining capacity and a preference for
    bins that are already somewhat filled, but avoids near-full bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Reward bins with capacity larger than the item
            priority = (cap - item)  # Smaller diff gives higher priority
            # Scale this with a factor related to current fill-level.
            # Favour bins that have some capacity used already, but not too much
            fill_level = 1 - (cap / 1.0)  # Assuming bin size of 1.0

            # Apply a bell curve centered around 0.5 fill level.

            bell_factor = np.exp(-((fill_level - 0.5)**2) / (2 * 0.2**2))  # Standard Deviation of 0.2 to avoid extremes

            priority *= bell_factor # Weight based on the fill level
            priorities[i] = priority
        else:
            priorities[i] = -np.inf # Heavily penalize bins that are too small

    return priorities
```
