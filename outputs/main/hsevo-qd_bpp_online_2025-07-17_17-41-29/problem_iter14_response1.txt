```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on best-fit, avoiding small spaces (ratio-based), and nearly full bins."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    if not np.any(feasible_mask):
        return priorities
    
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space  # Best-fit

    small_space_ratio_threshold = 0.1 #avoid small space (ratio)
    remaining_space_ratio = remaining_space / bins_remain_cap[feasible_mask]
    small_space_mask = (remaining_space_ratio > 0) & (remaining_space_ratio < small_space_ratio_threshold)
    priorities[feasible_mask][small_space_mask] -= 0.01

    nearly_full_ratio_threshold = 0.8  # reward nearly full
    nearly_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > nearly_full_ratio_threshold
    priorities[feasible_mask][nearly_full_mask] += 0.01

    return priorities
```
