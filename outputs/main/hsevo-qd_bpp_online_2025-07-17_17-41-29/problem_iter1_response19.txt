```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing heuristic inspiration: prioritize bins that can fit the item reasonably well,
    # but penalize bins that are left with very little space after packing.
    
    # 1. Filter out bins that can't fit the item.
    fit_indices = bins_remain_cap >= item
    
    if not np.any(fit_indices):
        # If no bin can fit the item, return a very low priority for all bins. This effectively signals
        # that a new bin must be opened.  Return minimum float value to allow comparisons later.
        return np.full_like(bins_remain_cap, np.finfo(float).min)
        

    # 2. Calculate the remaining capacity after placing the item in each eligible bin.
    remaining_capacity = bins_remain_cap - item
    remaining_capacity[~fit_indices] = -1  # Set remaining capacity to -1 for bins that can't fit.

    # 3. Prioritize based on remaining capacity. Bins with smaller remaining capacity should get higher priority
    # since we want to fill them as much as possible. The priority is scaled by the original remaining
    # to prioritize bins with smaller cap and able to fit item.
    
    priorities[fit_indices] = bins_remain_cap[fit_indices] / (0.00001 + remaining_capacity[fit_indices])
    # 4. Add a small constant to remaining capacity to avoid division by zero.


    # 5. Return the priorities. Note bins that cannot fit the item have priority=0

    return priorities
```
