```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, avoidance of fragmentation, and bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    feasible_mask = ~infeasible_mask

    if not np.any(feasible_mask):
        return priorities

    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space # Best-fit component

    small_space_threshold = 0.2 # Adjusted threshold
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)

    larger_space_exists = np.any(remaining_space > small_space_threshold)
    if larger_space_exists:
        priorities[feasible_mask][very_small_space_mask] -= 0.1 # Increased penalty for small space

    almost_full_threshold = 0.8 # Adjusted threshold
    almost_full_mask = (bins_remain_cap[feasible_mask] + item) / bins_remain_cap[feasible_mask] > almost_full_threshold
    priorities[feasible_mask][almost_full_mask] += 0.2  # Increased reward for almost full bins

    # Introduce a bin-balancing term
    bin_utilization = (bins_remain_cap - item) / bins_remain_cap
    if np.any(feasible_mask):
       priorities[feasible_mask] += 0.05 * np.mean(bin_utilization[feasible_mask]) # Added a constant to ensure it does not dominate
    return priorities
```
