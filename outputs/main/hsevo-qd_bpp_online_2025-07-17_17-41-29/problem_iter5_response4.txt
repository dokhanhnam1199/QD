```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, nearly-full preference, and overfill penalty.
    Avoids tiny remaining spaces. Weights adjusted based on experiments.
    """

    # Overfill penalty, discourage exceeding bin capacity.
    overfill_penalty = np.where(item > bins_remain_cap, -1e9, 0)

    # Best-fit component: prioritize smallest remaining space if it fits.
    fit_indices = np.where(bins_remain_cap >= item)[0]
    best_fit_priority = np.zeros_like(bins_remain_cap)
    if len(fit_indices) > 0:
        remaining_capacities_after_fit = bins_remain_cap[fit_indices] - item
        best_fit_priority[fit_indices] = 1 / (remaining_capacities_after_fit + 0.00001)

    # Nearly-full priority, preferring bins nearly full after item placement.
    remaining_ratio = np.clip((bins_remain_cap - item) / np.max(bins_remain_cap), a_min=0.0, a_max=1.0)
    nearly_full_priority = -np.log(remaining_ratio + 0.001)

    # Combine all components with weights.
    priorities = (
        overfill_penalty
        + best_fit_priority * 0.6
        + nearly_full_priority * 0.4
    )

    return priorities
```
