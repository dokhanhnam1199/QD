```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Employs a heuristic that favors bins that can accommodate the item
       with minimal remaining capacity, but also penalizes near-full bins
       to encourage even distribution. Avoids divisions by zero.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Only consider bins that can fit the item. Give them a small initial priority boost.
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 0.1

    #Calculate the wasted space if the item is placed in a given bin. Smaller waste is better.
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = np.inf  # Ensure only bins that fit are considered

    #Prioritize bins with minimal waste, using the inverse of the waste as a priority component.  Add a small constant to waste to avoid division by zero.
    priorities[eligible_bins] += 1.0 / (wasted_space[eligible_bins] + 0.01)

    # Penalize bins that are too full (leaving little capacity).
    # This avoids packing one or two bins very tightly while others remain empty.
    remaining_capacity_ratio = bins_remain_cap / np.max(bins_remain_cap) # Scale it so we can compare different remaining bin sizes

    priorities -= (1 - remaining_capacity_ratio) * 0.5 # Decrease priority for close to full.

    return priorities
```
