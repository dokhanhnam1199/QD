{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Hybrid heuristic: Feasibility, best fit, avoid small space,balance.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: -inf if item doesn't fit\n    infeasible_mask = item > bins_remain_cap\n    priorities[infeasible_mask] = -np.inf\n\n    feasible_mask = ~infeasible_mask\n\n    if not np.any(feasible_mask):\n        return priorities\n\n    # 2. Best Fit: Prioritize smaller remaining space.\n    remaining_space = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_space\n\n    # 3. Avoidance of very small spaces\n    small_space_threshold = 0.1\n    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)\n    larger_space_exists = np.any(remaining_space > small_space_threshold)\n\n    if larger_space_exists:\n        priorities[feasible_mask][very_small_space_mask] -= 0.01\n\n    # 4. Balancing term\n    num_feasible = np.sum(feasible_mask)\n    if num_feasible > 1:\n        priority_order = np.argsort(priorities[feasible_mask])\n        priorities[feasible_mask][priority_order[-1]] -= 0.005\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates feasibility, best fit, avoidance of very small spaces, and utilization of almost full bins, while the worst only uses a log ratio of item size to bin capacity. (2nd best) vs (2nd worst) shows the second best combines best fit, feasibility, and a balancing term, while the second worst also uses log ratio. Comparing (1st) vs (2nd), we see that (1st) has avoidance of small spaces and utilizing almost full bins which are absent in (2nd). (3rd) vs (4th) shows the 3rd heuristic refines the avoidance of small spaces and adds a balancing term absent in (4th) that only had nearly full priority. Comparing (second worst) vs (worst), they are identical. Overall: Better heuristics incorporate multiple factors (feasibility, best fit, avoidance of small spaces, balancing, utilize almost full bin). The balancing term is crucial for preventing premature convergence. Heuristics that only rely on a single metric, like log ratios, perform poorly. Introducing randomness can help escape local optima. The thresholds in almost full bins need correction\n- \nOkay, I understand. Let's redefine \"Current self-reflection\" for designing better heuristics, focusing on actionable advice while avoiding the pitfalls of \"Ineffective self-reflection.\" Here's a breakdown:\n\n*   **Keywords:** Feasibility, Best Fit, Iterative Refinement, Tunable Parameters, Multi-Factor Combination, Scalability, Penalties/Rewards.\n\n*   **Advice:** Start with feasibility and best fit as core elements. Iteratively refine by adding secondary considerations (fragmentation, balancing). Implement tunable parameters for adaptable performance.\n\n*   **Avoid:** Over-simplicity, relying solely on single metrics, hard-coded hyperparameters, and lack of conditional logic.\n\n*   **Explanation:** Effective heuristic design involves building upon a solid foundation (feasibility) and progressively adding complexity through a weighted combination of factors. Tunable parameters and conditional logic are crucial for adapting to different problem instances and avoiding local optima. Use rewards and penalties to guide solution-finding toward better balance and performance. Avoid overly simplistic approaches that may not capture the intricacies of the problem and ensure hyperparameters scale proportionally to input data.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}