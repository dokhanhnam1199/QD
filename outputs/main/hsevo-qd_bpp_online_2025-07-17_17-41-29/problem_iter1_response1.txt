```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function introduces a nuanced approach considering several factors:
    1.  The space utilization efficiency if the item were placed in a bin.  It favors bins where the item fills a large portion of the remaining capacity, maximizing immediate space usage.
    2.  A penalty for near-full bins, avoiding leaving tiny, unusable spaces behind.  This promotes long-term space efficiency.  A 'near_full_threshold' defines how close to full a bin must be to incur this penalty.
    3.  A very small bonus to bins that exactly fit the item.  This can prevent fragmentation of available space when a perfect fit exists.
    4. A strong penalty for bins that cannot contain the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    near_full_threshold = 0.95  # Define "near full" - e.g., 95% capacity used

    for i, remaining_cap in enumerate(bins_remain_cap):
        if item > remaining_cap:
            priorities[i] = -np.inf  # Cannot fit, lowest priority

        elif item == remaining_cap:
            priorities[i] = 10 # perfect fit bonus
        else:

            utilization_ratio = item / remaining_cap
            priorities[i] = utilization_ratio  # Primary driver:  efficiency

            # Apply near-full penalty.
            if remaining_cap > 0 and (remaining_cap - item) / remaining_cap < (1-near_full_threshold): # Equivalent to (remaining_cap - item) < (1 - near_full_threshold) * remaining_cap.
                priorities[i] -= 5 * (near_full_threshold - (1 - (remaining_cap - item) / remaining_cap)) #Subtract a penalty

    return priorities
```
