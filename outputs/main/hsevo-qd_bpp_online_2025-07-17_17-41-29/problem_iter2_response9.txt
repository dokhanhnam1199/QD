```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit and waste minimization with a sigmoid penalty for near-full bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check
    feasible = bins_remain_cap >= item
    
    if np.any(feasible):
        # Best-fit prioritization
        waste = bins_remain_cap - item
        waste[~feasible] = np.inf
        
        # Prioritize smaller waste (best fit)
        best_fit_priority = 1 / (waste + 0.00001)
        
        # Sigmoid penalty for near-full bins (avoiding completely filling bins)
        sigmoid = 1 / (1 + np.exp(-100 * (waste - 0.1))) 
        
        # Weighted combination of best-fit and sigmoid
        priorities[feasible] = 0.7 * best_fit_priority[feasible] + 0.3 * sigmoid[feasible]
    
    else:
        # If no bin fits, prioritize bins with more remaining capacity (least wasted)
        priorities = 1 / (bins_remain_cap + 0.00001)
        
    return priorities
```
