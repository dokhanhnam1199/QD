```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    feasible_mask = ~infeasible_mask
    
    if not np.any(feasible_mask):
        return priorities

    # 2. Best Fit with a twist: Prioritize bins where the remaining space after placing the item is small,
    # but also consider how much space the item occupies relative to the bin's original capacity.
    remaining_space = bins_remain_cap[feasible_mask] - item
    
    # Normalize the remaining space by the original bin capacity for a fairer comparison
    normalized_remaining_space = remaining_space / bins_remain_cap[feasible_mask]
    
    # Prioritize smaller normalized remaining space (best fit)
    priorities[feasible_mask] = -normalized_remaining_space

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1 # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    
    # Check if there are other bins where remaining space is greater than threshold. If not, don't penalize.
    if np.any(bins_remain_cap[feasible_mask] - item > small_space_threshold):
        priorities[feasible_mask][very_small_space_mask] -= 0.01

    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins
    almost_full_threshold = 0.9  # Define what constitutes an "almost full" bin after placing the item
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1- almost_full_threshold) 
    priorities[feasible_mask][almost_full_mask] += 0.02

    # 5. Prioritize bins with larger initial capacity, especially if multiple bins can fit the item
    # This encourages using larger bins first, potentially leaving smaller bins for smaller items later.
    priorities[feasible_mask] += 0.005 * (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap))
    

    # 6. Introduce a small amount of randomness to break ties and explore different solutions.
    # This can help to avoid getting stuck in local optima.
    priorities[feasible_mask] += np.random.normal(0, 0.001, np.sum(feasible_mask))

    return priorities
```
