```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # First, prioritize bins that can actually fit the item.
    fit_indices = np.where(bins_remain_cap >= item)[0]
    
    if len(fit_indices) > 0:
        # Among the bins that can fit, prioritize those with the smallest remaining capacity
        # after placing the item (i.e., minimize wasted space). This is a "best fit" approach.
        remaining_capacities_after_fit = bins_remain_cap[fit_indices] - item
        priorities[fit_indices] = 1 / (remaining_capacities_after_fit + 0.00001) # Adding a small constant to avoid division by zero

        # Alternatively, prioritize bins where item size is closest to half of bin capacity
        # optimal_fill_diffs = np.abs((bins_remain_cap[fit_indices]/2) - item)
        # priorities[fit_indices] = 1 / (optimal_fill_diffs + 0.00001)

    else:
        #If it doesnt fit, use lowest remaining
        priorities = 1 / (bins_remain_cap + 0.00001)
    
    return priorities
```
