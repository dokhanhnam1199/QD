```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, feasibility, avoidance of small spaces, balancing."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility:
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    feasible_mask = ~infeasible_mask
    if not np.any(feasible_mask):
        return priorities

    # 2. Best Fit:
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # 3. Avoidance of very small spaces:
    small_space_threshold = 0.1
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    larger_space_exists = np.any(remaining_space > small_space_threshold)
    if larger_space_exists:
        priorities[feasible_mask][very_small_space_mask] -= 0.01

    # 4. Balancing term
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 1:
        priority_order = np.argsort(priorities[feasible_mask])
        priorities[feasible_mask][priority_order[-1]] -= 0.005

    # 5. Utilize Almost Full Bins:
    almost_full_threshold = 0.9  # Define what constitutes an "almost full" bin after placing the item
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > almost_full_threshold
    priorities[feasible_mask][almost_full_mask] += 0.02

    return priorities
```
