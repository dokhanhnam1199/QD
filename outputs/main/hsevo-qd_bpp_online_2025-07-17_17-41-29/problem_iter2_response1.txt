```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with a penalty for large waste and a bonus for nearly full bins."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after placing the item
    remaining_capacities = bins_remain_cap - item

    # Prioritize bins where the item fits
    fit_indices = np.where(remaining_capacities >= 0)[0]
    if len(fit_indices) > 0:
        # Best-fit component: minimize remaining space
        priorities[fit_indices] += 1 / (remaining_capacities[fit_indices] + 0.00001)

        # Nearly full bonus: prioritize bins that are close to full after placement
        nearly_full_bonus = np.exp(-5 * remaining_capacities[fit_indices] / np.max(bins_remain_cap))
        priorities[fit_indices] += nearly_full_bonus


    # Penalty for bins where item does not fit.
    priorities[bins_remain_cap < item] = -1000

    return priorities
```
