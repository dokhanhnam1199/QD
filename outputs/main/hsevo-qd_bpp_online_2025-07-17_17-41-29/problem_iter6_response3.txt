```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    feasible_mask = ~infeasible_mask
    if not np.any(feasible_mask):
        return priorities

    # 2. Best Fit with Capacity Awareness: Prioritize based on remaining space relative to bin capacity.
    remaining_space = bins_remain_cap[feasible_mask] - item
    relative_remaining_space = remaining_space / bins_remain_cap[feasible_mask]
    priorities[feasible_mask] = -relative_remaining_space

    # 3. Penalize small space, but more aggressively. Make this parameter adaptive.
    small_space_threshold = np.mean(bins_remain_cap) * 0.05 # Dynamic threshold based on average bin size

    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    if np.any(very_small_space_mask):
        priorities[feasible_mask][very_small_space_mask] -= 0.1 # Stronger penalty


    # 4. Reward almost full bins, with a capacity-aware reward.
    almost_full_threshold = 0.9
    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item
    almost_full_mask = remaining_capacity_after_fit / bins_remain_cap[feasible_mask] < (1- almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.2  # Stronger reward

    # 5. Balancing Act: If there are many feasible bins, slightly prefer bins with higher remaining capacity
    # This can help prevent filling bins too quickly when many options exist.
    num_feasible_bins = np.sum(feasible_mask)
    if num_feasible_bins > 3:  # Tune the number 3

        priorities[feasible_mask] += bins_remain_cap[feasible_mask] / np.sum(bins_remain_cap) * 0.05


    return priorities
```
