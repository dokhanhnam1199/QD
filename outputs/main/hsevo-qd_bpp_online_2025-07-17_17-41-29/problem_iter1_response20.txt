```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if the item is placed in the bin
    waste = bins_remain_cap - item

    # Give high priority to bins where the item fits and waste is minimized
    for i, w in enumerate(waste):
        if w >= 0:
            priorities[i] = 1 / (w + 0.00001)  # Adding a small constant to avoid division by zero

    # Penalize bins where the item doesn't fit heavily
    priorities[bins_remain_cap < item] = -1000  # or some other large negative number

    #Boost the bins which has higher capacity closer to item size
    cap_diff = np.abs(bins_remain_cap-item)
    priorities = priorities - cap_diff/ np.max(bins_remain_cap)


    return priorities
```
