```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            priorities[i] = (cap - item) / (cap + item)  # Favor bins where item fits well, relative to bin size
            priorities[i] += 1 / (1 + np.exp(-10*(cap-item))) # Sigmoid to favor nearly full bins
        else:
            priorities[i] = -1e9  # Very low priority if item doesn't fit
    return priorities
```
