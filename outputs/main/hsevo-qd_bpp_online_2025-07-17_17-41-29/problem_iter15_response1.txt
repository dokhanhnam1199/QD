```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    feasible_mask = ~infeasible_mask
    
    if not np.any(feasible_mask):
        return priorities

    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space 

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    
    # Only penalize if there's at least one bin that *doesn't* result in very small space
    if np.any(remaining_space >= small_space_threshold):
        priorities[feasible_mask][very_small_space_mask] -= 0.01
    
    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins
    almost_full_threshold = 0.9
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.02
    
    # 5. Balancing Act: If there are many feasible bins, slightly prioritize bins with more remaining capacity.
    #    This encourages spreading items across bins when there's ample choice, hopefully preventing premature exhaustion of some bins.
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 3:  # Only apply if we have a decent number of choices
        priorities[feasible_mask] += 0.005 * bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)
    
    #6. Penalize bins close to full, encourage using bins with adequate spaces when available.

    near_full_threshold = 0.2 # Bin filled more than 80%
    near_full_mask = (item/bins_remain_cap[feasible_mask]) > near_full_threshold
    if np.any(~near_full_mask):
        priorities[feasible_mask][near_full_mask] -= 0.005 #Slight penalty

    return priorities
```
