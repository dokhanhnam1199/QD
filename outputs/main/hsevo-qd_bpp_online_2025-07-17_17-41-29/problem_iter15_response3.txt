```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space # Smaller remaining space -> higher priority

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1 # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold) & (np.sum(bins_remain_cap[feasible_mask] -item >small_space_threshold) > 0)
    if np.any(very_small_space_mask): #reduce the priorities by a tiny amount only when you know more fits are feasible
      priorities[feasible_mask][very_small_space_mask] -=0.01
    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins

    almost_full_threshold = 0.9  # Define what constitutes an "almost full" bin after placing the item
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1- almost_full_threshold) 
    priorities[feasible_mask][almost_full_mask]+=0.02

    # 5. Introduce a 'balance' factor: Give slight preference to bins with larger remaining capacities when many bins can fit the item.
    #    This can help to distribute items more evenly in the long run, preventing early over-packing of some bins.
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 1:  # Apply only when there's a choice
        capacity_normalized = bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)  # Normalize to [0, 1]
        priorities[feasible_mask] += 0.005 * capacity_normalized  # Add a small bonus proportional to capacity

    # 6. Prioritize bins which have already contained items of similar size
    # Add a bonus if the bin already contains items close to the current item size.
    # Helps create clusters of similar-sized items, potentially improving later packing.
    bin_contents_size = np.ones_like(bins_remain_cap[feasible_mask])  #Dummy contents_size, to be updated using side information
    if 'bin_contents_size' in locals(): #Side information available
        similarity_threshold = 0.2 #Consider 20% size difference as similar
        similar_item_mask = np.abs(bin_contents_size - item) / item < similarity_threshold
        priorities[feasible_mask][similar_item_mask]+= 0.01

    return priorities
```
