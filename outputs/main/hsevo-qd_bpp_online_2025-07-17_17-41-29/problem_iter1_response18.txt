```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if not np.any(valid_bins):
        # If no bin can accommodate the item, prioritize bins with largest remaining capacity.
        priorities = bins_remain_cap #prioritize largest available.
    else:
        # Prioritize bins where the item fits reasonably well, avoiding both near-empty and almost-full bins
        # Calculate fill ratio: item size / remaining capacity
        fill_ratios = item / bins_remain_cap
        fill_ratios[~valid_bins] = np.inf  # set fill ratio of invalid bins to inf

        # Prioritize bins with fill ratios closest to a target (e.g., 0.75, aim for filling about 3/4 of the bin)
        target_fill_ratio = 0.75
        priority_valid = np.exp(-np.abs(fill_ratios - target_fill_ratio)) #Gaussian like behavior

        priorities[valid_bins] = priority_valid[valid_bins]


    return priorities
```
