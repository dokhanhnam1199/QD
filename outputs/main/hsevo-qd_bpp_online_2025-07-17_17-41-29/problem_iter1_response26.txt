```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a combination of factors to determine priority:
    - How full the bin would be after adding the item.  Favors near-full bins, avoiding fragmentation.
    - Whether the item fits at all.  Assigns very low priority if it doesn't fit.
    - A small bias towards bins that are already somewhat full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fits = item <= bins_remain_cap

    # Assign very low priority to bins where the item doesn't fit.  A large negative number.
    priorities[~fits] = -1e9

    # Calculate fill ratios if the item were added
    hypothetical_remaining = bins_remain_cap - item
    hypothetical_fill_ratio = 1 - (hypothetical_remaining / np.max(bins_remain_cap)) # Use max bin cap to normalise
    hypothetical_fill_ratio[~fits] = 0  # Ensure zero when the item does not fit.

    # Give preference to bins that would become nearly full
    priorities[fits] = hypothetical_fill_ratio[fits] ** 2  # Make the higher ratios more significant
    
    #A slight adjustment to improve the chance that the bin fits tightly
    space_left = bins_remain_cap - item
    close_fits = (space_left >= 0) & (space_left < 0.1) #Prioritise fits where we leave a space under 0.1
    priorities[close_fits] += 1 #Significant Boost

    # Slightly penalize bins that would become almost empty
    nearly_empty = (hypothetical_remaining > 0) & (hypothetical_remaining < 0.1)  # if remaining under 0.1 then penalise
    priorities[nearly_empty] -= 0.05

    return priorities
```
