```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, avoids small spaces, balances bin usage."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item

    # Best Fit: Smaller remaining space -> higher priority
    priorities[feasible_mask] = -remaining_space

    # Avoid leaving very small spaces (ratio-based threshold)
    small_space_ratio_threshold = 0.1  # Avoid leaving < 10% space
    very_small_space_mask = (remaining_space / bins_remain_cap[feasible_mask]) < small_space_ratio_threshold
    priorities[feasible_mask][very_small_space_mask] -= 0.02

    # Reward almost full bins (ratio-based)
    almost_full_ratio_threshold = 0.9
    almost_full_mask = (1 - (remaining_space / bins_remain_cap[feasible_mask])) > almost_full_ratio_threshold
    priorities[feasible_mask][almost_full_mask] += 0.01

    #Prioritize bins with more remaining capacity (normalized)
    capacity_normalized = bins_remain_cap[feasible_mask]/np.max(bins_remain_cap)
    priorities[feasible_mask] += 0.005*capacity_normalized

    return priorities
```
