{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities with a base value (e.g., 0).\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # Give significantly higher priority to bins that can fit the item.  The smaller the remaining space after packing, the higher the priority\n    remaining_space = bins_remain_cap[feasible_bins] - item\n    priorities[feasible_bins] = 1.0 / (1e-9 + remaining_space)  # Avoid division by zero\n\n    # Penalize bins that cannot accommodate the item, making them less attractive.\n    priorities[~feasible_bins] = -np.inf\n\n    # Further refine the priority based on remaining capacity. Larger remaining cap after placing this item is preferable (up to a limit).\n    # Small penalty for unused capacity up to 50% of item size, but rapidly decreasing value if capacity > item*0.5\n    large_capacity = bins_remain_cap[feasible_bins] > item\n    remaining_over_cap = bins_remain_cap[feasible_bins][large_capacity] - item\n    priorities[feasible_bins][large_capacity] -= np.clip(remaining_over_cap**2, 0, (item * 0.5)**2) # Quadratic penalty\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Employing heuristics inspired by physical systems:\n\n    1.  A \"force\" inversely proportional to the 'distance' (capacity difference).\n    2.  Penalize bins that would have very little space left after packing (waste).\n    3.  A 'temperature' parameter to control exploration vs. exploitation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    temperature = 1.0  # Adjust for exploration/exploitation. Higher -> more exploration.\n    epsilon = 1e-6  # Avoid division by zero\n\n    # 1. \"Force\" component: Higher priority for bins with closer capacity\n    capacity_diff = np.abs(bins_remain_cap - item) + epsilon\n    force = 1.0 / capacity_diff\n\n    # 2. Waste penalization: Penalize bins leading to small remaining capacity.\n    remaining_after = bins_remain_cap - item\n    waste_penalty = np.exp(-10 * np.maximum(0, remaining_after))  # Exponential penalty\n\n    #3. Favor bins that can accommodate the item\n    can_accommodate = (bins_remain_cap >= item).astype(float)\n\n    #Combine\n    priorities = can_accommodate * force * waste_penalty\n\n    # \"Boltzmann distribution\" to modulate probabilities based on temperature\n    priorities = np.exp(priorities / temperature)\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a weighted sum of several factors including fitability, nearly full priority, overfill penalty, and randomness while the worst only uses log ratios of item size to remaining capacity; (2nd) vs (19th) shows a similar difference in complexity and consideration of factors; Comparing (1st) vs (2nd), we see the top heuristic uses a combination of fitting score, preference for nearly full bins after placement, and overfill penalty; (3rd) vs (4th) highlights how softmax is used to prioritize bins with tighter fits while the fourth focuses on remaining space, penalizing unused capacity; Comparing (second worst) vs (worst), we see similar implementations that only focus on ratios of item size to remaining capacity and use logarithms. Overall: The better heuristics incorporate a combination of factors like fit, remaining space after placement, penalties for overfill or near-empty bins, and randomness to explore diverse solutions. Less effective heuristics rely solely on simple ratios. Good heuristics include clear penalization strategies.\n- \nOkay, let's redefine \"Current self-reflection\" for designing better heuristics, focusing on avoiding ineffective practices and incorporating a more robust approach.\n\n*   **Keywords:** Iterative Refinement, Outcome Analysis, Adaptive Parameters, Exploration-Exploitation Balance.\n*   **Advice:** Systematically analyze heuristic outcomes. Adapt parameters based on performance metrics. Employ diverse search strategies balancing exploration and exploitation.\n*   **Avoid:** Premature convergence, rigidity in parameter settings, neglecting outcome analysis, relying solely on intuition.\n*   **Explanation:** Move beyond simple combinations to actively learn from results, dynamically adjust heuristic behavior, and prevent getting stuck in suboptimal solutions.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}