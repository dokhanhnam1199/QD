```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, feasibility, and a balancing term."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check
    feasible_mask = item <= bins_remain_cap
    priorities[~feasible_mask] = -np.inf
    
    # Best Fit: Smaller remaining space -> higher priority
    remaining_space = bins_remain_cap - item
    priorities[feasible_mask] = -remaining_space[feasible_mask]
    
    # Balancing term: Penalize filling the fullest bins
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 1:
        priorities[feasible_mask][np.argmax(bins_remain_cap[feasible_mask])] -= 0.005
    
    return priorities
```
