```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_space_threshold: float = 0.1, small_space_penalty: float = 10, almost_full_threshold: float = 0.7, almost_full_reward: float = 10) -> np.ndarray:
    """Combines best fit, feasibility, small space avoidance, and almost full bin utilization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: -inf if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # Best Fit: Prioritize smaller remaining space
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # Small Space Avoidance: Penalize small spaces
    small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    priorities[feasible_mask][small_space_mask] -= small_space_penalty

    # Almost Full Reward: Reward almost full bins
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += almost_full_reward

    return priorities
```
