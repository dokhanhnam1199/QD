```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space # Smaller remaining space -> higher priority

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1 # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold) & (np.sum(bins_remain_cap[feasible_mask] -item >small_space_threshold) > 0)
    if np.any(very_small_space_mask): #reduce the priorities by a tiny amount only when you know more fits are feasible
      priorities[feasible_mask][very_small_space_mask] -=0.01
    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins

    almost_full_threshold = 0.9  # Define what constitutes an "almost full" bin after placing the item
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1- almost_full_threshold) 
    priorities[feasible_mask][almost_full_mask]+=0.02
    
    # 5. Moderate fragmentation avoidance: Prefer bins that, after placing the item, don't result in a 'medium' sized gap.
    #    This encourages either filling bins completely or leaving large enough gaps for future items.
    medium_space_lower = 0.2
    medium_space_upper = 0.4
    medium_space_mask = (remaining_space >= medium_space_lower) & (remaining_space <= medium_space_upper)
    priorities[feasible_mask][medium_space_mask] -= 0.005  # Slightly penalize medium spaces.

    # 6. Bonus for bins that are already somewhat filled:
    #    Encourages using partially filled bins before starting new ones. The effect is subtle.
    partially_filled_threshold_lower = 0.1
    partially_filled_threshold_upper = 0.6
    partially_filled_mask = (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)) < (1 - partially_filled_threshold_lower)
    partially_filled_mask &= (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)) > (1 - partially_filled_threshold_upper) #avoid empty bins and almost full bins
    priorities[feasible_mask][partially_filled_mask] += 0.002 #small increase in priority


    return priorities
```
