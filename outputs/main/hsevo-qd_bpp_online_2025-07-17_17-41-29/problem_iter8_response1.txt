```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, feasibility, almost full bin utilization, and balancing."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    if not np.any(feasible_mask):
        return priorities

    # Best Fit: Prioritize bins with minimal remaining space.
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    #Utilize Almost Full Bins: Reward bins that are almost full
    almost_full_threshold = 0.9
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > almost_full_threshold
    priorities[feasible_mask][almost_full_mask] += 0.02

    # Balancing Term: Penalize filling the most full bin if multiple bins are feasible.
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 1:
        priority_order = np.argsort(priorities[feasible_mask])
        priorities[feasible_mask][priority_order[-1]] -= 0.005

    return priorities
```
