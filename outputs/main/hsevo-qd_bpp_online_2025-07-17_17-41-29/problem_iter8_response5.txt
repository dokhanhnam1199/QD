```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, feasibility, and near-full bin preference."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: impossible bins get -inf priority
    feasible_mask = item <= bins_remain_cap
    priorities[~feasible_mask] = -np.inf

    # Best Fit: prioritize bins with least remaining space after adding item
    remaining_space = bins_remain_cap - item
    priorities[feasible_mask] = -remaining_space[feasible_mask]

    # Near-full bin preference: add bonus if the bin is nearly full after placing item.
    near_full_threshold = 0.1  # tunable parameter: if remaining capacity <= this, bin is "near full"
    near_full_bonus = 0.01  # tunable parameter: bonus for near-full bins
    near_full_mask = (remaining_space >= 0) & (remaining_space <= near_full_threshold)
    priorities[near_full_mask] += near_full_bonus
    
    return priorities
```
