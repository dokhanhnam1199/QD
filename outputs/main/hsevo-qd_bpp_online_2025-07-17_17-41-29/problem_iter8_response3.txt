```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_space_threshold: float = 0.1, small_space_penalty: float = 10, almost_full_threshold: float = 0.9, almost_full_reward: float = 10) -> np.ndarray:
    """Calculates bin priorities considering feasibility, best fit, small space avoidance, and almost full bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Infeasible bins get -inf priority
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # 2. Best Fit: Smaller remaining space preferred, only for feasible bins
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # 3. Avoidance of very small spaces, conditional penalty
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold) & (np.sum(bins_remain_cap[feasible_mask] - item > small_space_threshold) > 0)
    if np.any(very_small_space_mask):
        priorities[feasible_mask][very_small_space_mask] -= small_space_penalty

    # 4. Reward bins that become almost full
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += almost_full_reward

    return priorities
```
