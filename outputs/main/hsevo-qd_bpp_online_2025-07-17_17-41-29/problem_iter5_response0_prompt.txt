{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Give -inf priority if item doesn't fit\n    infeasible_mask = item > bins_remain_cap\n    priorities[infeasible_mask] = -np.inf\n    \n    feasible_mask = ~infeasible_mask\n    \n    if not np.any(feasible_mask):\n        return priorities\n\n    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.\n    remaining_space = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_space # Smaller remaining space -> higher priority\n\n    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits\n    small_space_threshold = 0.1 # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity\n    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)\n    \n    # Only penalize very small spaces IF there's at least one other bin with a *larger* remaining space\n    # and the best fit bin after this.\n    larger_space_exists = np.any(remaining_space > small_space_threshold)\n    if larger_space_exists:\n            priorities[feasible_mask][very_small_space_mask] -= 0.01  # Small penalty\n\n\n    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins\n\n    almost_full_threshold = 0.9  # Define what constitutes an \"almost full\" bin after placing the item\n    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > almost_full_threshold  # Correct the logic here. Should be GREATER than threshold\n    priorities[feasible_mask][almost_full_mask] += 0.02\n\n\n    # 5. Introduce a \"balancing\" term.  If there are many bins that *can* fit the item, slightly\n    # penalize filling the *most* full ones to allow other bins a chance to be used. This encourages\n    # better distribution, particularly early on. This helps avoid premature convergence on using\n    # only a few bins.\n    \n    num_feasible = np.sum(feasible_mask)\n    if num_feasible > 1:  # Only apply if there's a choice\n       #scale penalty depending on number of bins\n        priority_order = np.argsort(priorities[feasible_mask]) #Get order of priorities for available bins\n        #Slightly penalize the very best bin for that item so we don't fill it up immediately if we have more options\n        priorities[feasible_mask][priority_order[-1]] -=0.005\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the first heuristic considers feasibility, best fit, avoidance of very small spaces, utilizes almost full bins and introduces a balancing term. The last heuristic only considers a ratio of item size to remaining bin capacity using logarithms.\nComparing (2nd) vs (19th), the second heuristic considers feasibility, best fit, avoidance of very small spaces by applying penalty and utilizes almost full bins by giving a reward. The 19th heuristic, similar to the 20th only considers a ratio of item size to remaining bin capacity using logarithms.\nComparing (1st) vs (2nd), the first heuristic introduces a balancing term to penalize filling up the fullest bins when there are more available options.\nComparing (3rd) vs (4th), these two heuristics are identical, indicating they perform similarly. This suggests that just including the core logic of feasibility, best fit, small space avoidance, and utilizing almost full bins is a good starting point.\nComparing (second worst) vs (worst), we see that the second worst introduces a variety of parameters for tuning, this seems to suggest a basic version and an advanced version. Overall: The better heuristics incorporate multiple factors beyond just a simple ratio. They factor in feasibility, aim for best fit, avoid creating tiny remaining spaces, and prefer filling bins that are nearly full. Some also incorporate balancing to prevent premature filling of certain bins.\n- \nOkay, let's refine \"Current self-reflection\" for better heuristic design:\n\n*   **Keywords:** Principles, Evaluation, Adaptation, Simplification.\n*   **Advice:** Focus on fundamental principles first. Rigorously evaluate each added refinement's impact. Adapt the heuristic based on performance feedback. Aim for simplicity to avoid overfitting.\n*   **Avoid:** Arbitrary complexity, premature optimization, neglecting edge cases.\n*   **Explanation:** Prioritize a clear understanding of the problem, create a simple initial heuristic based on core principles, and then iteratively improve it by focusing on specific shortcomings identified through careful evaluation.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}