```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_space_ratio_threshold: float = 0.1, small_space_penalty: float = 10, almost_full_threshold: float = 0.9, almost_full_reward: float = 10) -> np.ndarray:
    """Combines best-fit with ratio-based small space avoidance and reward for almost full bins."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    # Best Fit: Prioritize bins where the remaining space after placing the item is small.
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space # Smaller remaining space -> higher priority

    # Avoidance of very small spaces (ratio-based): Penalize bins leaving very small spaces relative to bin size.
    small_space_mask = (remaining_space > 0) & (remaining_space / bins_remain_cap[feasible_mask] < small_space_ratio_threshold)

    priorities[feasible_mask][small_space_mask] -= small_space_penalty

    # Utilize Almost Full Bins: Reward bins that are almost full (ratio-based)
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > (almost_full_threshold -1)
    priorities[feasible_mask][almost_full_mask]+=almost_full_reward

    return priorities
```
