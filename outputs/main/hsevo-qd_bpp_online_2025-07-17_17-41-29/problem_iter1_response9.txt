```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small value to avoid division by zero
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Iterate over each bin and calculate its priority
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing (FFD) inspired heuristic: favor bins where the item fits best
            # Minimize wasted space:
            wasted_space = cap - item
            priorities[i] = 1.0 / (wasted_space + 0.0001)  # Avoid division by zero and encourage tighter fits. Higher priority to bins with smallest waste
            # Alternately could prioritize almost-full bins.
            # Example: priorities[i] = cap / (wasted_space + 0.0001) # Favors bins closest to being full

            # Could also incorporate a 'lookahead' - see if this bin placement will make future placements easier/harder
            # (difficult to do online, since future items unknown, but a weighting based on item_size could help)
        else:
            # Item doesn't fit; very low priority
            priorities[i] = -1000  # Or -np.inf, to ensure these bins are never selected.
    return priorities
```
