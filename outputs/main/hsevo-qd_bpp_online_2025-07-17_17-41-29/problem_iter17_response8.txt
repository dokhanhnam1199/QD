```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, feasibility, and avoidance of small spaces."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: -inf if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # Best Fit: Prioritize smaller remaining space
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # Avoidance of very small spaces
    small_space_threshold = 0.1
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    if np.any(very_small_space_mask):
        other_bins_space = bins_remain_cap[feasible_mask] - item
        better_fit_exists = np.any(other_bins_space > small_space_threshold)
        if better_fit_exists:
            priorities[feasible_mask][very_small_space_mask] -= 0.01

    # Utilize Almost Full Bins: Reward bins that are almost full
    almost_full_threshold = 0.9
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > almost_full_threshold
    priorities[feasible_mask][almost_full_mask] += 0.02
            
    # Add small random number to break ties
    priorities[feasible_mask] += np.random.normal(0, 0.001, size=np.sum(feasible_mask))

    return priorities
```
