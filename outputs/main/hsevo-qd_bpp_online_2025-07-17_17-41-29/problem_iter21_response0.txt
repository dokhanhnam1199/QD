```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item

    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.
    priorities[feasible_mask] = -remaining_space

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    
    # Check if there is at least one bin where the item fits and the remaining space is not very small
    better_fit_exists = np.any((bins_remain_cap[feasible_mask] - item >= small_space_threshold) & (bins_remain_cap[feasible_mask] >= item))
    
    if better_fit_exists:
        priorities[feasible_mask][very_small_space_mask] -= 0.01  # Reduced penalty

    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins
    almost_full_threshold = 0.9
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.02

    # 5. Introduce a tie-breaker: Prefer bins with larger original capacity if priorities are equal so far
    # This encourages use of larger bins first, potentially leading to better packing later
    # Only do this where priorities are nearly equal to avoid undoing best fit
    
    max_priority = np.max(priorities[feasible_mask], initial = -np.inf)
    
    tie_break_mask = np.isclose(priorities[feasible_mask], max_priority)

    if np.any(tie_break_mask): #Only add tie breaker if there are ties
        original_capacities = bins_remain_cap[feasible_mask][tie_break_mask] + item #Approximation of orignal cap
        priorities[feasible_mask][tie_break_mask] += original_capacities * 0.00001 #Very Small number

    return priorities
```
