```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate priority scores for bins based on item size and remaining capacity.
    Combines best-fit, feasibility, and balancing principles.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    if not np.any(feasible_mask):
        return priorities

    # Best Fit: Smaller remaining space -> higher priority
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # Balancing: Penalize filling the fullest bins if multiple options exist.
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 1:
        priority_order = np.argsort(priorities[feasible_mask])
        priorities[feasible_mask][priority_order[-1]] -= 0.005

    return priorities
```
