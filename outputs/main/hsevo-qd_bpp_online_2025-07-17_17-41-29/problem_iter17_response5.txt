```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, feasibility, balancing, and nearly full bin rewards."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Impossible bins get -inf priority
    feasible_mask = item <= bins_remain_cap
    priorities[~feasible_mask] = -np.inf

    # Best Fit: Smaller remaining space -> higher priority.
    remaining_space = bins_remain_cap - item
    priorities[feasible_mask] = -remaining_space[feasible_mask]

    # Balancing term: Penalize filling the fullest bins slightly to promote wider use
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 1:
        priorities[feasible_mask][np.argmax(bins_remain_cap[feasible_mask])] -= 0.005

    # Reward: Boost priority for bins that are nearly full after adding the item.
    almost_full_threshold = 0.95 # Tunable parameter
    new_capacities = bins_remain_cap - item
    almost_full_mask = (new_capacities >= 0) & ((1 - new_capacities / 1.0) > almost_full_threshold)  # Assuming bin size is 1.0
    priorities[almost_full_mask] += 0.01  # Small boost

    return priorities
```
