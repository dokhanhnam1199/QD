```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., 0).
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item

    # Give significantly higher priority to bins that can fit the item.  The smaller the remaining space after packing, the higher the priority
    remaining_space = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = 1.0 / (1e-9 + remaining_space)  # Avoid division by zero

    # Penalize bins that cannot accommodate the item, making them less attractive.
    priorities[~feasible_bins] = -np.inf

    # Further refine the priority based on remaining capacity. Larger remaining cap after placing this item is preferable (up to a limit).
    # Small penalty for unused capacity up to 50% of item size, but rapidly decreasing value if capacity > item*0.5
    large_capacity = bins_remain_cap[feasible_bins] > item
    remaining_over_cap = bins_remain_cap[feasible_bins][large_capacity] - item
    priorities[feasible_bins][large_capacity] -= np.clip(remaining_over_cap**2, 0, (item * 0.5)**2) # Quadratic penalty

    return priorities
```
