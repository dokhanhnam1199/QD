```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, balance bin usage and item size."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    
    # Best Fit
    priorities[feasible_mask] = -remaining_space

    # Balance bin usage
    bin_utilization = (1 - bins_remain_cap / np.max(bins_remain_cap))
    avg_utilization = np.mean(bin_utilization)
    below_avg_utilization_mask = bin_utilization < avg_utilization
    priorities[below_avg_utilization_mask] += 0.005 * (avg_utilization - bin_utilization[below_avg_utilization_mask])

    # Item size consideration
    large_item_threshold = 0.5
    if item > large_item_threshold:
        priorities[feasible_mask] += 0.01 * (bins_remain_cap[feasible_mask] - item) * item
    
    return priorities
```
