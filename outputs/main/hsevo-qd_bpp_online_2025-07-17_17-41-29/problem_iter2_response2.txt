```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit, nearly-full status, and wasted space."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float) - 1e9
    fit_mask = bins_remain_cap >= item
    
    if not np.any(fit_mask):
        return priorities
    
    remaining_space = bins_remain_cap - item
    remaining_space[~fit_mask] = np.inf
    
    # Softmax on remaining space for tight fits
    remaining_space_shifted = remaining_space - np.min(remaining_space[fit_mask])
    priorities[fit_mask] = np.exp(-remaining_space_shifted[fit_mask]) / np.sum(np.exp(-remaining_space_shifted[fit_mask]))

    # Boost nearly full bins
    nearly_full_threshold = 0.1
    nearly_full_bins = (bins_remain_cap <= item * (1 + nearly_full_threshold)) & fit_mask
    priorities[nearly_full_bins] += 1.0

    # Add a small bonus for bins that are more empty than average before item placement. Avoids filling only full bins.
    avg_capacity = np.mean(bins_remain_cap)
    relatively_empty = bins_remain_cap > avg_capacity
    priorities[relatively_empty & fit_mask] += 0.1

    return priorities
```
