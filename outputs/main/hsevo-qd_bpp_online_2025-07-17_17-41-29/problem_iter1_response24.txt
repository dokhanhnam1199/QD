```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Considers both remaining capacity and fragmentation. A higher
    score indicates a higher priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Prioritize bins that can fit the item.
            remaining = cap - item
            # Prioritize bins with less remaining space (better fit), but also consider
            # if the remaining space is useful for other items (fragmentation).
            # We use a combined score.
            priorities[i] = (1 / (remaining + 1e-9)) + (remaining > item/2) # 1e-9 to avoid division by zero
        else:
            # Bin cannot fit the item, give it a negative (low) priority.
            priorities[i] = -np.inf
    return priorities
```
