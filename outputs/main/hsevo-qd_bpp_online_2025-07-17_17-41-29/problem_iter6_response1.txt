```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space # Smaller remaining space -> higher priority

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1 # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    
    # Only penalize if there are other feasible bins that don't create very small spaces
    if np.any(very_small_space_mask) and np.any(bins_remain_cap[feasible_mask] - item >= small_space_threshold):
        priorities[feasible_mask][very_small_space_mask] -= 0.01

    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins
    almost_full_threshold = 0.9  # Define what constitutes an "almost full" bin after placing the item
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > almost_full_threshold
    priorities[feasible_mask][almost_full_mask] += 0.02
    
    # 5. Prioritize bins with larger remaining capacity when item is large
    large_item_threshold = 0.5
    if item > large_item_threshold:
      priorities[feasible_mask] += bins_remain_cap[feasible_mask] * 0.005

    # 6. If there are multiple bins with the same remaining capacity, randomly select one
    # This aims to add more diversity to the selection process

    unique_remaining_space = np.unique(remaining_space)
    if len(unique_remaining_space) < len(remaining_space):
        for space in unique_remaining_space:
            indices = np.where(remaining_space == space)[0]
            if len(indices) > 1:
                # Add a small random number to break ties
                priorities[feasible_mask][indices] += np.random.rand(len(indices)) * 0.0001

    return priorities
```
