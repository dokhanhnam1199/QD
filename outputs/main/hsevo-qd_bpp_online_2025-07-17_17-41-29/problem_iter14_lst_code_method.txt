{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Give -inf priority if item doesn't fit\n    infeasible_mask = item > bins_remain_cap\n    priorities[infeasible_mask] = -np.inf\n    \n    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.\n    feasible_mask = ~infeasible_mask\n    remaining_space = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_space # Smaller remaining space -> higher priority\n\n    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits\n    small_space_threshold = 0.1 # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity\n    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold) & (np.sum(bins_remain_cap[feasible_mask] -item >small_space_threshold) > 0)\n    if np.any(very_small_space_mask): #reduce the priorities by a tiny amount only when you know more fits are feasible\n      priorities[feasible_mask][very_small_space_mask] -=0.01\n    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins\n\n    almost_full_threshold = 0.9  # Define what constitutes an \"almost full\" bin after placing the item\n    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1- almost_full_threshold) \n    priorities[feasible_mask][almost_full_mask]+=0.02\n\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, avoidance of small spaces, and balancing.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible_mask = item > bins_remain_cap\n    priorities[infeasible_mask] = -np.inf\n    feasible_mask = ~infeasible_mask\n    if not np.any(feasible_mask):\n        return priorities\n\n    remaining_space = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_space\n\n    small_space_threshold = 0.1\n    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)\n\n    larger_space_exists = np.any(remaining_space > small_space_threshold)\n    if larger_space_exists:\n        priorities[feasible_mask][very_small_space_mask] -= 0.01\n\n    almost_full_threshold = 0.9\n    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > almost_full_threshold\n    priorities[feasible_mask][almost_full_mask] += 0.02\n    \n    num_feasible = np.sum(feasible_mask)\n    if num_feasible > 1:\n        priority_order = np.argsort(priorities[feasible_mask])\n        priorities[feasible_mask][priority_order[-1]] -= 0.005\n\n    #Introduce nearly-full priority\n    nearly_full_threshold=0.8\n    nearly_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > nearly_full_threshold\n    priorities[feasible_mask][nearly_full_mask]+=0.01\n\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Give -inf priority if item doesn't fit\n    infeasible_mask = item > bins_remain_cap\n    priorities[infeasible_mask] = -np.inf\n\n    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.\n    feasible_mask = ~infeasible_mask\n    remaining_space = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_space  # Smaller remaining space -> higher priority\n\n    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits\n    small_space_threshold = 0.1  # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity\n    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)\n    #Only apply the penalty if it's not the absolute best fit available\n    if np.any(very_small_space_mask):\n        min_remaining_space = np.min(remaining_space)\n        very_small_and_not_best = very_small_space_mask & (remaining_space > min_remaining_space)\n        priorities[feasible_mask][very_small_and_not_best] -= 0.01\n\n    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins\n    almost_full_threshold = 0.9  # Define what constitutes an \"almost full\" bin after placing the item\n    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > almost_full_threshold\n    priorities[feasible_mask][almost_full_mask] += 0.02\n\n    # 5. Moderate Fit: Reward bins that have a moderate fit, reducing fragmentation\n    moderate_fit_threshold_low = 0.2\n    moderate_fit_threshold_high = 0.6\n    moderate_fit_mask = (item / bins_remain_cap[feasible_mask] >= moderate_fit_threshold_low) & (item / bins_remain_cap[feasible_mask] <= moderate_fit_threshold_high)\n    priorities[feasible_mask][moderate_fit_mask] += 0.01\n\n    #6. Prioritize bins with more remaining capacity when multiple bins can accomodate the item\n    #Helps to distribute the items to avoid filling bins too early, potentially leading to a better overall packing.\n    capacity_normalized = bins_remain_cap[feasible_mask]/np.max(bins_remain_cap)\n    priorities[feasible_mask] += 0.005*capacity_normalized #Small weight so as not to override other heuristics\n\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, avoidance of small spaces, and balancing.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible_mask = item > bins_remain_cap\n    priorities[infeasible_mask] = -np.inf\n    feasible_mask = ~infeasible_mask\n    if not np.any(feasible_mask):\n        return priorities\n\n    remaining_space = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_space\n\n    small_space_threshold = 0.1\n    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)\n\n    larger_space_exists = np.any(remaining_space > small_space_threshold)\n    if larger_space_exists:\n        priorities[feasible_mask][very_small_space_mask] -= 0.01\n\n    almost_full_threshold = 0.9\n    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > almost_full_threshold\n    priorities[feasible_mask][almost_full_mask] += 0.02\n    \n    num_feasible = np.sum(feasible_mask)\n    if num_feasible > 1:\n        priority_order = np.argsort(priorities[feasible_mask])\n        priorities[feasible_mask][priority_order[-1]] -= 0.005\n\n    #Introduce nearly-full priority\n    nearly_full_threshold=0.8\n    nearly_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > nearly_full_threshold\n    priorities[feasible_mask][nearly_full_mask]+=0.01\n\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fitability, nearly-full preference, overfill penalty, and best-fit logic.\"\"\"\n    # Fitability score, penalizing bins much larger or smaller than the item.\n    fitability = np.abs(bins_remain_cap - item)\n\n    # Nearly-full priority, preferring bins nearly full after item placement.\n    remaining_ratio = np.clip((bins_remain_cap - item) / np.mean(bins_remain_cap), a_min=0.0, a_max=1.0)\n    nearly_full_priority = -np.log(remaining_ratio + 0.001)\n\n    # Overfill penalty, strongly discouraging exceeding bin capacity.\n    overfill_penalty = np.where(item > bins_remain_cap, -1e9, 0)\n\n    # Best-fit component: prioritize smallest remaining space if it fits.\n    fit_indices = np.where(bins_remain_cap >= item)[0]\n    best_fit_priority = np.zeros_like(bins_remain_cap)\n    if len(fit_indices) > 0:\n        remaining_capacities_after_fit = bins_remain_cap[fit_indices] - item\n        best_fit_priority[fit_indices] = 1 / (remaining_capacities_after_fit + 0.00001)\n\n    # Combine all components with weights.\n    priorities = (\n        -fitability * 0.3\n        + nearly_full_priority * 0.7\n        + overfill_penalty\n        + best_fit_priority * 0.5\n    )\n\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, small_space_threshold: float = 0.38634679648177406, small_space_penalty: float = 0.08492583169208827, almost_full_threshold: float = 0.5521618659843823, almost_full_reward: float = 0.08170959427667597) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        small_space_threshold: Threshold for considering a remaining space as very small.\n        small_space_penalty: Penalty applied to bins leaving very small spaces.\n        almost_full_threshold: Threshold for considering a bin as almost full after placing the item.\n        almost_full_reward: Reward applied to bins that are almost full.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Give -inf priority if item doesn't fit\n    infeasible_mask = item > bins_remain_cap\n    priorities[infeasible_mask] = -np.inf\n    \n    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.\n    feasible_mask = ~infeasible_mask\n    remaining_space = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_space # Smaller remaining space -> higher priority\n\n    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits\n    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold) & (np.sum(bins_remain_cap[feasible_mask] -item >small_space_threshold) > 0)\n    if np.any(very_small_space_mask): #reduce the priorities by a tiny amount only when you know more fits are feasible\n      priorities[feasible_mask][very_small_space_mask] -= small_space_penalty\n    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins\n    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1- almost_full_threshold) \n    priorities[feasible_mask][almost_full_mask]+=almost_full_reward\n\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, small_space_threshold: float = 0.38634679648177406, small_space_penalty: float = 0.08492583169208827, almost_full_threshold: float = 0.5521618659843823, almost_full_reward: float = 0.08170959427667597) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        small_space_threshold: Threshold for considering a remaining space as very small.\n        small_space_penalty: Penalty applied to bins leaving very small spaces.\n        almost_full_threshold: Threshold for considering a bin as almost full after placing the item.\n        almost_full_reward: Reward applied to bins that are almost full.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Give -inf priority if item doesn't fit\n    infeasible_mask = item > bins_remain_cap\n    priorities[infeasible_mask] = -np.inf\n    \n    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.\n    feasible_mask = ~infeasible_mask\n    remaining_space = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_space # Smaller remaining space -> higher priority\n\n    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits\n    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold) & (np.sum(bins_remain_cap[feasible_mask] -item >small_space_threshold) > 0)\n    if np.any(very_small_space_mask): #reduce the priorities by a tiny amount only when you know more fits are feasible\n      priorities[feasible_mask][very_small_space_mask] -= small_space_penalty\n    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins\n    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1- almost_full_threshold) \n    priorities[feasible_mask][almost_full_mask]+=almost_full_reward\n\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Give -inf priority if item doesn't fit\n    infeasible_mask = item > bins_remain_cap\n    priorities[infeasible_mask] = -np.inf\n\n    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.\n    feasible_mask = ~infeasible_mask\n    remaining_space = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_space  # Smaller remaining space -> higher priority\n\n    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits\n    small_space_threshold = 0.1  # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity\n    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)\n    #Only apply the penalty if it's not the absolute best fit available\n    if np.any(very_small_space_mask):\n        min_remaining_space = np.min(remaining_space)\n        very_small_and_not_best = very_small_space_mask & (remaining_space > min_remaining_space)\n        priorities[feasible_mask][very_small_and_not_best] -= 0.01\n\n    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins\n    almost_full_threshold = 0.9  # Define what constitutes an \"almost full\" bin after placing the item\n    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > almost_full_threshold\n    priorities[feasible_mask][almost_full_mask] += 0.02\n\n    # 5. Moderate Fit: Reward bins that have a moderate fit, reducing fragmentation\n    moderate_fit_threshold_low = 0.2\n    moderate_fit_threshold_high = 0.6\n    moderate_fit_mask = (item / bins_remain_cap[feasible_mask] >= moderate_fit_threshold_low) & (item / bins_remain_cap[feasible_mask] <= moderate_fit_threshold_high)\n    priorities[feasible_mask][moderate_fit_mask] += 0.01\n\n    #6. Prioritize bins with more remaining capacity when multiple bins can accomodate the item\n    #Helps to distribute the items to avoid filling bins too early, potentially leading to a better overall packing.\n    capacity_normalized = bins_remain_cap[feasible_mask]/np.max(bins_remain_cap)\n    priorities[feasible_mask] += 0.005*capacity_normalized #Small weight so as not to override other heuristics\n\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best fit, feasibility, and a balancing term.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Feasibility check\n    feasible_mask = item <= bins_remain_cap\n    priorities[~feasible_mask] = -np.inf\n    \n    # Best Fit: Smaller remaining space -> higher priority\n    remaining_space = bins_remain_cap - item\n    priorities[feasible_mask] = -remaining_space[feasible_mask]\n    \n    # Balancing term: Penalize filling the fullest bins\n    num_feasible = np.sum(feasible_mask)\n    if num_feasible > 1:\n        priorities[feasible_mask][np.argmax(bins_remain_cap[feasible_mask])] -= 0.005\n    \n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Give -inf priority if item doesn't fit\n    infeasible_mask = item > bins_remain_cap\n    priorities[infeasible_mask] = -np.inf\n    \n    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.\n    feasible_mask = ~infeasible_mask\n    remaining_space = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_space # Smaller remaining space -> higher priority\n\n    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits\n    small_space_threshold = 0.1 # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity\n    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)\n    \n    # Only penalize if a significantly better fit is possible in another bin\n    if np.any(very_small_space_mask):\n        other_bins_space = bins_remain_cap[feasible_mask] - item\n        better_fit_exists = np.any(other_bins_space > small_space_threshold)\n        if better_fit_exists:\n            priorities[feasible_mask][very_small_space_mask] -= 0.01\n            \n    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins\n    almost_full_threshold = 0.9  # Define what constitutes an \"almost full\" bin after placing the item\n    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > almost_full_threshold\n    priorities[feasible_mask][almost_full_mask] += 0.02\n\n    # 5. Prioritize bins close to item size (match)\n    match_threshold = 0.2 # Maximum difference from item size to be considered a \"match\"\n    match_mask = np.abs(bins_remain_cap[feasible_mask] - item) <= match_threshold\n    priorities[feasible_mask][match_mask] += 0.01 # slightly better then almost full\n\n    # 6. Introducing a small degree of randomness to escape local optima.\n    priorities[feasible_mask] += np.random.normal(0, 0.001, size=np.sum(feasible_mask))\n    \n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}