```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering feasibility, best fit, and almost-full."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility:
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # 2. Best Fit:
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # 3. Utilize Almost Full Bins:
    almost_full_threshold = 0.9
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.02

    # 4. Parameterized balancing between best-fit and almost-full.
    best_fit_weight = 0.7
    almost_full_weight = 0.3
    priorities[feasible_mask] = best_fit_weight * (-remaining_space) + almost_full_weight * (priorities[feasible_mask] - (-remaining_space))

    return priorities
```
