```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, remaining space, and penalizes large gaps."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # Prioritize bins that can fit, inverse to remaining space
    if np.any(feasible_bins):
        remaining_space = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = 1.0 / (1e-9 + remaining_space)

        # Penalize bins that become too empty after placement
        large_capacity = bins_remain_cap[feasible_bins] > item
        remaining_over_cap = bins_remain_cap[feasible_bins][large_capacity] - item
        priorities[feasible_bins][large_capacity] -= np.clip(remaining_over_cap**2, 0, (item * 0.5)**2)
    else:
        # If no bin fits, prioritize using inverse of remaining capacity
        priorities = 1 / (bins_remain_cap + 0.00001)


    return priorities
```
