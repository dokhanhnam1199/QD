```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, balance, and feasibility to prioritize bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    if not np.any(feasible_mask):
        return priorities

    # Best Fit: Smaller remaining space -> higher priority
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # Balance: Penalize filling the fullest bins
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 1:
        ratios = item / bins_remain_cap[feasible_mask]
        priorities[feasible_mask] -= 0.005 * ratios  # Scale penalty by ratio.
            
    #Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins
    almost_full_threshold = 0.9
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > almost_full_threshold  # Correct the logic here. Should be GREATER than threshold
    priorities[feasible_mask][almost_full_mask] += 0.02
    
    return priorities
```
