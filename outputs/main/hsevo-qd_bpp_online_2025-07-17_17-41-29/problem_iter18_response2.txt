```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # 2. Best Fit (Primary): Prioritize bins where the remaining space after placing the item is small.
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space  # Smaller remaining space -> higher priority

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1  # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    
    #Only apply penalty if there are alternative bins with more reasonable space
    reasonable_space_present = np.any(bins_remain_cap[feasible_mask] - item >= small_space_threshold)

    if reasonable_space_present:
      priorities[feasible_mask][very_small_space_mask] -= 0.01  # Reduced penalty compared to v1

    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins
    almost_full_threshold = 0.9
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.02 #Slightly increased reward

    # 5. Bin balancing: give slight preference to bins with lower current fill level to balance load
    fill_levels = 1 - bins_remain_cap[feasible_mask]  # Higher value = more full
    # Normalize fill levels to be between 0 and 1 for a consistent scale
    normalized_fill_levels = (fill_levels - np.min(fill_levels)) / (np.max(fill_levels) - np.min(fill_levels) + 1e-9) #Adding small value to prevent 0 division.
    priorities[feasible_mask] -= 0.005 * normalized_fill_levels  # Subtract to prioritize less full bins

    #6. Medium fit bonus.
    medium_space_threshold_lower = 0.3
    medium_space_threshold_upper = 0.7
    medium_space_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > (1 - medium_space_threshold_upper) & ((bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - medium_space_threshold_lower))
    priorities[feasible_mask][medium_space_mask]+=0.01

    return priorities
```
