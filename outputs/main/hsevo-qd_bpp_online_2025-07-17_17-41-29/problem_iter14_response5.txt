```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_space_ratio_threshold: float = 0.1, small_space_penalty: float = 10, almost_full_threshold: float = 0.9, almost_full_reward: float = 10) -> np.ndarray:
    """Combines best-fit, avoidance of small space ratios, rewards almost full."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: -inf if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # 2. Best Fit: Smaller remaining space -> higher priority
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # 3. Avoidance of very small spaces (ratio-based): Penalize bins leaving very small *ratio* spaces
    very_small_space_mask = (remaining_space > 0) & (remaining_space / bins_remain_cap[feasible_mask] < small_space_ratio_threshold)
    priorities[feasible_mask][very_small_space_mask] -= small_space_penalty

    # 4. Utilize Almost Full Bins: Reward bins that are almost full
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] >= almost_full_threshold
    priorities[feasible_mask][almost_full_mask] += almost_full_reward
    
    return priorities
```
