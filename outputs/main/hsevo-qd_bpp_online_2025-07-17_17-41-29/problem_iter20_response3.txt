```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, full-bin utilization, and feasibility."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # Best Fit: smaller remaining space is better
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # Prioritize bins that become almost full
    almost_full_threshold = 0.9
    post_fill_ratio = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask]
    almost_full_mask = post_fill_ratio > almost_full_threshold
    priorities[feasible_mask][almost_full_mask] += 0.02

    return priorities
```
