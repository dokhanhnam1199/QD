```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, balance, and avoidance of small spaces."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: -inf if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # Best Fit: Prioritize smaller remaining space
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # Avoidance of very small spaces: Penalize tiny spaces
    small_space_threshold = 0.1
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    if np.any(very_small_space_mask):
        min_remaining_space = np.min(remaining_space)
        very_small_and_not_best = very_small_space_mask & (remaining_space > min_remaining_space)
        priorities[feasible_mask][very_small_and_not_best] -= 0.01

    # Balance bin usage: Prioritize bins with more remaining capacity
    capacity_normalized = bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)
    priorities[feasible_mask] += 0.005 * capacity_normalized

    return priorities
```
