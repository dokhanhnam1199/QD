```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    # 2. Best Fit with a twist: Prioritize bins where the remaining space after placing the item is small,
    # but also consider the *relative* space usage.  This helps avoid always filling the smallest available bin
    # if a slightly larger bin is a much better fit in terms of percentage used.
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    relative_space_usage = item / bins_remain_cap[feasible_mask]
    
    # Combine remaining space and relative usage. The weights can be tuned.
    priorities[feasible_mask] = -remaining_space + 0.5 * relative_space_usage

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1 # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold) & (np.sum(bins_remain_cap[feasible_mask] -item >small_space_threshold) > 0)
    if np.any(very_small_space_mask): #reduce the priorities by a tiny amount only when you know more fits are feasible
      priorities[feasible_mask][very_small_space_mask] -= 0.1 #Increased penalty

    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins
    almost_full_threshold = 0.9  # Define what constitutes an "almost full" bin after placing the item
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1- almost_full_threshold) 
    priorities[feasible_mask][almost_full_mask] += 0.2 #Increased reward

    # 5.  Slight preference for filling existing bins before starting new ones.  This adds a small bias.
    # bins_used = np.sum(bins_remain_cap < 1) # Assuming bin capacity is 1
    # if bins_used > 0: # only add preference if bins are being used
    priorities[feasible_mask] += 0.001 # Very small bias

    return priorities
```
