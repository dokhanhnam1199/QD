```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    feasible_mask = ~infeasible_mask
    
    if not np.any(feasible_mask):
        return priorities
    
    remaining_space = bins_remain_cap[feasible_mask] - item
    
    # 2. Best Fit with Capacity Awareness: Prioritize bins where the remaining space after placing the item is small, relative to the original bin size.
    priorities[feasible_mask] = -remaining_space / bins_remain_cap[feasible_mask]
    
    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    
    # Only apply penalty if there are other feasible bins with significantly more space
    if np.any(very_small_space_mask):
        other_bins_better = bins_remain_cap[feasible_mask] - item > small_space_threshold
        if np.any(other_bins_better):  # There exists at least one better bin.
            priorities[feasible_mask][very_small_space_mask] -= 0.05  # Increased penalty

    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins
    almost_full_threshold = 0.9
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.1  # Increased reward
    
    # 5. Open New Bin if No Good Fit Exists: If no existing bin provides a "good enough" fit, consider opening a new bin.
    # A "good enough" fit is defined as having remaining capacity within a reasonable range.
    good_fit_threshold = 0.5
    good_fit_mask = (remaining_space >= 0) & (remaining_space <= good_fit_threshold)

    if not np.any(good_fit_mask):
      #If there is no good fit, slightly prefer bigger remaining capacity to avoid creating lots of almost empty bins
      priorities[feasible_mask] += bins_remain_cap[feasible_mask]/np.max(bins_remain_cap) * 0.01

    return priorities
```
