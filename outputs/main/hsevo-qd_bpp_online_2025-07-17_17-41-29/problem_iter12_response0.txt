```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    feasible_mask = ~infeasible_mask
    
    if not np.any(feasible_mask):
        return priorities  # No feasible bins, all priorities are -inf

    # 2. Best Fit with Capacity Ratio Consideration: Prioritize bins where the remaining space after placing the item is small,
    # but also consider the ratio of item size to the bin's original capacity.  This encourages filling larger bins more effectively.
    remaining_space = bins_remain_cap[feasible_mask] - item
    
    # Avoid division by zero by adding a small constant to bins_remain_cap
    capacity_ratios = item / (bins_remain_cap[feasible_mask] + 1e-9)
    
    priorities[feasible_mask] = -(remaining_space + 0.1 * capacity_ratios)  # Combine remaining space and capacity ratio
    # Smaller remaining space and higher capacity ratio -> higher priority

    # 3. Avoidance of very small spaces, with dynamic threshold: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    # The threshold is now a function of the item size to adapt to different item sizes.
    small_space_threshold = min(0.1, item * 0.5) # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity OR half item size.
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold) & (np.sum(bins_remain_cap[feasible_mask] - item > small_space_threshold) > 0)
    if np.any(very_small_space_mask):  # reduce the priorities by a tiny amount only when you know more fits are feasible
        priorities[feasible_mask][very_small_space_mask] -= 0.01

    # 4. Utilize Almost Full Bins, dynamic reward: Reward bins that are almost full, encouraging complete filling of existing bins
    #The reward is now related to the itemsize, encouraging filling the bins better, and avoids getting stuck.
    almost_full_threshold = 0.9  # Define what constitutes an "almost full" bin after placing the item
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.02 + item * 0.01

    # 5. Prioritize bins with larger remaining capacities (less full) if no almost full bins are available
    # This can help to distribute items more evenly if no bin is close to being full.
    if not np.any(almost_full_mask):
         priorities[feasible_mask] += 0.005 * (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap))

    return priorities
```
