```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization with a near-full bin preference and overfill penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a very low priority
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Waste calculation
    waste = bins_remain_cap - item

    # Sigmoid for near-full preference
    sigmoid = 1 / (1 + np.exp(-10 * (waste - 0.1)))  # Target waste of 0.1

    priorities[~infeasible] = sigmoid[~infeasible]

    # Add a small bonus for bins that were already somewhat full
    # Helps to consolidate items into fewer bins
    priorities[~infeasible] += (1 - bins_remain_cap[~infeasible]) * 0.1

    return priorities
```
