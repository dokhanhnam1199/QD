```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space  # Smaller remaining space -> higher priority

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1  # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    
    # Check if there are other bins with reasonable fits
    num_reasonable_fits = np.sum((bins_remain_cap[feasible_mask] - item) >= small_space_threshold)
    
    if np.any(very_small_space_mask) and num_reasonable_fits > 0:
        priorities[feasible_mask][very_small_space_mask] -= 0.01

    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins
    almost_full_threshold = 0.9  # Define what constitutes an "almost full" bin after placing the item
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.02
    
    # 5. Prioritize bins that are already somewhat filled
    # This encourages using bins that have already been started, rather than starting new ones.
    already_filled_threshold = 0.2 #Bins that are at least 20% full
    already_filled_mask = (bins_remain_cap < (1-already_filled_threshold)) & feasible_mask
    priorities[already_filled_mask]+=0.01 # small boost
    
    #6. Normalize priorities. Prevents domination by large capacity differences
    if np.any(feasible_mask):
      max_priority = np.max(priorities[feasible_mask])
      min_priority = np.min(priorities[feasible_mask])
      if max_priority != min_priority:
            priorities[feasible_mask] = (priorities[feasible_mask] - min_priority) / (max_priority - min_priority)
    
    return priorities
```
