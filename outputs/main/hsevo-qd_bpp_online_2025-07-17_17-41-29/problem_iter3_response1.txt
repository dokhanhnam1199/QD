```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    feasible_mask = ~infeasible_mask
    
    if not np.any(feasible_mask):
        return priorities # If nothing is feasible, return immediately

    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces.
    small_space_threshold = 0.1
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    
    # Only penalize if *some* feasible bins would leave a reasonable space AND there are at least 2 feasible bins.
    if np.sum(bins_remain_cap[feasible_mask] - item > small_space_threshold) > 0 and np.sum(feasible_mask) > 1:
        priorities[feasible_mask][very_small_space_mask] -= 0.05  # Increased penalty slightly


    # 4. Utilize Almost Full Bins: Reward bins that are almost full
    almost_full_threshold = 0.9
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.1 # Increased reward

    # 5. Reward bins that are not too full, but not almost empty either. Balances using existing bins vs. starting new ones.
    medium_full_threshold_lower = 0.2  # Bin must be at least 20% full *after* placing item
    medium_full_threshold_upper = 0.8  # Bin must be no more than 80% full *after* placing item

    medium_full_mask = ((bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > (1 - medium_full_threshold_upper)) & \
                       ((bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - medium_full_threshold_lower))

    priorities[feasible_mask][medium_full_mask] += 0.01 # small reward
    
    # 6. Prefer bins with larger remaining capacity if multiple bins are feasible, but not significantly.
    # Encourages using larger bins when a small item arrives, preventing them from being reserved for larger items later
    capacity_normalized = bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)
    priorities[feasible_mask] += 0.005 * capacity_normalized # Small bonus

    return priorities
```
