```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Find bins where the item fits
    fits = bins_remain_cap >= item

    if np.any(fits):
        # Prioritize bins where the item fits closest to filling the bin completely.
        # Avoid creating tiny residual space, because small residuals are useless.
        residual_space = bins_remain_cap - item
        priorities[fits] = 1.0 / (residual_space[fits] + 1e-9)  # Avoid division by zero

        # Apply sigmoid to boost priorities for almost-full bins
        almost_full_mask = (residual_space > 0) & (residual_space < 0.1)  # Tolerance for almost full, tweak this parameter.
        if np.any(almost_full_mask): # Avoid evaluating when there is no relevant entry.
            priorities[almost_full_mask] += 1.0 / (residual_space[almost_full_mask] + 1e-9)


    else:
        # If item doesn't fit in any bins, heavily penalize assigning it
        # This encourages new bins over overfilling.
        priorities = -1e9 * np.ones_like(bins_remain_cap)

    return priorities
```
