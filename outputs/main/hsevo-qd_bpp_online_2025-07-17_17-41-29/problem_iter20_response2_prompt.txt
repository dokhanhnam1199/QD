{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins considering feasibility, best fit (ratio), and fragmentation.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Disqualify bins that can't fit the item.\n    infeasible_mask = item > bins_remain_cap\n    priorities[infeasible_mask] = -np.inf\n\n    # 2. Best Fit (Ratio-based): Prioritize based on fill ratio (item_size / bin_capacity).\n    feasible_mask = ~infeasible_mask\n    remaining_capacity = bins_remain_cap[feasible_mask]\n    fill_ratio = item / remaining_capacity\n    priorities[feasible_mask] = fill_ratio  # Higher fill ratio is better\n\n    # 3. Fragmentation avoidance: Penalize bins that would leave small remaining space relative to bin size.\n    small_space_threshold = 0.15  # Avoid spaces smaller than 15%\n    remaining_space = remaining_capacity - item\n    frag_mask = (remaining_space > 0) & (remaining_space / remaining_capacity < small_space_threshold)\n    priorities[feasible_mask][frag_mask] -= 0.1 # Reduce priority if creates fragment\n\n    #4. Utilize almost full bins\n    almost_full_threshold = 0.85\n    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1- almost_full_threshold)\n    priorities[feasible_mask][almost_full_mask]+= 0.15\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates best-fit, avoidance of small spaces, and balancing, while the worst uses only the ratio of item size to remaining capacity.\n(2nd best) vs (2nd worst), the former incorporates multiple factors like best fit, avoidance of small spaces, utilizing almost full bins, balancing bin usage, and item size consideration, compared to just log ratios in the latter.\nComparing (1st) vs (2nd), the first heuristic uses simple avoidance of leaving very small spaces and target full bins while the second heuristic explicitly calculate penalty, but both incorporates best fit and feasibility. The second one incorporates balance and item size.\n(3rd) vs (4th), the third heuristic focuses on the fill ratio and fragmentation avoidance, while the fourth uses best fit, avoidance of small spaces, utilizing almost full bins, prioritizing bins close to item size, and randomness.\nComparing (second worst) vs (worst), both only consider the ratio, but one of them use log and subtract them.\nOverall: Better heuristics involve multiple factors with carefully tuned weights, address feasibility, best fit, fragmentation avoidance, and bin balancing. Simpler heuristics relying solely on ratios or a single factor tend to perform worse. Introducing small degrees of randomness or specific penalties based on context can be helpful but requires careful consideration.\n- \nOkay, I'll help you redefine \"Current Self-Reflection\" to design better heuristics, focusing on actionable advice and avoiding common pitfalls. Here's a refined approach:\n\n*   **Keywords:** Iterative Refinement, Multi-Criteria, Tunability, Contextual Awareness.\n*   **Advice:** Start with core constraints (feasibility) and gradually add secondary objectives (fit, balance). Design for iterative improvement with tunable parameters.\n*   **Avoid:** Over-simplification, premature optimization, rigid weights (adapt to context).\n*   **Explanation:** Prioritize a flexible framework. Start simple, test thoroughly, and refine based on performance. Make parameters tunable and aware of context.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}