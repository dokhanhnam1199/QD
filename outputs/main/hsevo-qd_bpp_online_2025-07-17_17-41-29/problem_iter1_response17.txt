```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version introduces a more nuanced priority scheme that considers:
    1.  How well the item fits (closer to filling the bin is better, but avoid overflow).
    2.  A "desperation" factor if many bins are already close to full.
    3. A randomized kick to break ties and explore the solution space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)

    for i in range(n_bins):
        remaining_cap = bins_remain_cap[i]

        if item <= remaining_cap:
            # Fit Score: Higher if the item fills the bin more completely
            fit_score = (item / remaining_cap)**0.5  # Squaring to emphasize close fits, less punishing near-misses

            # Desperation Score: Penalize bins that are very empty if others are close to full.
            desperation_factor = np.sum(bins_remain_cap < (1.1 * item)) / n_bins # Slightly more forgiving overflow allowed here

            priorities[i] = fit_score + 0.1*desperation_factor  # Small impact from desperation

    # Avoid selecting bins that have insufficient capacity. Give extremely low priority if the item won't fit.
    priorities[bins_remain_cap < item] = -1e9

    # Randomized tie-breaking to explore search space and prevent stagnation
    priorities += np.random.rand(n_bins) * 0.01 # Introduce small random variation

    return priorities
```
