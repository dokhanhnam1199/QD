```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with avoiding small remaining spaces. Add penalty if overfill."""

    # Overfill penalty, strongly discouraging exceeding bin capacity.
    overfill_penalty = np.where(item > bins_remain_cap, -1e9, 0)

    # Best-fit component, prioritize smallest remaining space if it fits.
    fit_indices = np.where(bins_remain_cap >= item)[0]
    best_fit_priority = np.zeros_like(bins_remain_cap)
    if len(fit_indices) > 0:
        remaining_capacities_after_fit = bins_remain_cap[fit_indices] - item
        best_fit_priority[fit_indices] = 1 / (remaining_capacities_after_fit + 0.00001)

    # Avoid small remaining spaces: penalize bins that would leave very little space
    small_space_penalty = np.where((bins_remain_cap - item) < 0.1, -0.1, 0) # if remaining capacity less than 0.1, penalize

    priorities = overfill_penalty + best_fit_priority + small_space_penalty

    return priorities
```
