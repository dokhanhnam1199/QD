```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item. If not possible, assign a low score.
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf # Very low priority if cannot fit

    # For bins that CAN fit, prioritize based on how FULL they will be.  Aim for density.
    remaining_after_fit = bins_remain_cap[can_fit] - item
    fill_ratios = (bins_remain_cap[can_fit] - remaining_after_fit) / bins_remain_cap[can_fit]

    # Slightly penalize nearly full bins (risk of small items not fitting later) using a log-like transform
    # Only impact when close to full, and not if almost empty.
    # Scale fill_ratios so max fill_ratio maps to -1 * some small scaling
    overfill_penalty_scale = 0.1

    priorities[can_fit] = fill_ratios - overfill_penalty_scale * np.exp(10*(fill_ratios-0.95))  # Add penalty that only gets large when very full

    return priorities
```
