```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, nearly-full, and overfill considerations with balancing."""

    # Overfill penalty: large negative value if item doesn't fit.
    overfill_penalty = np.where(item > bins_remain_cap, -1e9, 0)

    # Best-fit priority: prioritize bins where the remaining space is minimized after placing item
    valid_bins = bins_remain_cap >= item
    remaining_space = bins_remain_cap - item
    remaining_space[~valid_bins] = np.inf  # Set invalid bins to infinity
    best_fit_priority = -remaining_space

    # Nearly-full priority
    nearly_full_priority = bins_remain_cap - item
    nearly_full_priority = np.clip(nearly_full_priority, a_min=0, a_max=np.mean(bins_remain_cap))
    nearly_full_priority = -nearly_full_priority
    

    # Combine priorities with weights
    priorities = (
        best_fit_priority * 0.6 + 
        nearly_full_priority * 0.4 +
        overfill_penalty
    )

    return priorities
```
