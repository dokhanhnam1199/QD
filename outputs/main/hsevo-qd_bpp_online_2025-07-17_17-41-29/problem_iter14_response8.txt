```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid priority: Best-fit considering feasibility,
    fragmentation avoidance, and balancing bin usage.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Impossible bins get -inf
    feasible_mask = item <= bins_remain_cap
    priorities[~feasible_mask] = -np.inf

    # 2. Best Fit: Smaller remaining space gets higher priority
    remaining_space = bins_remain_cap - item
    priorities[feasible_mask] = -remaining_space[feasible_mask]

    # 3. Fragmentation Avoidance: Penalize small remaining spaces
    small_space_threshold = 0.1  # Tunable parameter
    too_small_mask = (remaining_space > 0) & (remaining_space < small_space_threshold) & feasible_mask
    priorities[too_small_mask] -= 0.5 # Tunable parameter

    # 4. Balancing: Encourage filling emptier bins slightly, avoid overfilling fullest ones
    if np.sum(feasible_mask) > 0:
        max_priority = np.max(priorities[feasible_mask])
        priorities[np.argmax(bins_remain_cap[feasible_mask])] -=0.005

    return priorities
```
