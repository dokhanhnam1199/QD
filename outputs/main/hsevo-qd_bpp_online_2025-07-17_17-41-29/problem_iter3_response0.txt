```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    feasible_mask = ~infeasible_mask
    
    if not np.any(feasible_mask):
        return priorities

    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space # Smaller remaining space -> higher priority

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1 # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    
    # Only penalize very small spaces IF there's at least one other bin with a *larger* remaining space
    # and the best fit bin after this.
    larger_space_exists = np.any(remaining_space > small_space_threshold)
    if larger_space_exists:
            priorities[feasible_mask][very_small_space_mask] -= 0.01  # Small penalty


    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins

    almost_full_threshold = 0.9  # Define what constitutes an "almost full" bin after placing the item
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > almost_full_threshold  # Correct the logic here. Should be GREATER than threshold
    priorities[feasible_mask][almost_full_mask] += 0.02


    # 5. Introduce a "balancing" term.  If there are many bins that *can* fit the item, slightly
    # penalize filling the *most* full ones to allow other bins a chance to be used. This encourages
    # better distribution, particularly early on. This helps avoid premature convergence on using
    # only a few bins.
    
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 1:  # Only apply if there's a choice
       #scale penalty depending on number of bins
        priority_order = np.argsort(priorities[feasible_mask]) #Get order of priorities for available bins
        #Slightly penalize the very best bin for that item so we don't fill it up immediately if we have more options
        priorities[feasible_mask][priority_order[-1]] -=0.005

    return priorities
```
