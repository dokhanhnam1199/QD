```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines feasibility, best-fit, and nearly-full bin preference."""

    # Overfill penalty for infeasible bins.
    overfill_penalty = np.where(item > bins_remain_cap, -1e9, 0)

    # Feasible bin indices.
    fit_indices = np.where(bins_remain_cap >= item)[0]
    priorities = np.zeros_like(bins_remain_cap)

    if len(fit_indices) > 0:
        # Remaining capacities after placing the item in feasible bins.
        remaining_capacities = bins_remain_cap[fit_indices] - item

        # Best-fit priority: Inverse of remaining capacity.
        best_fit_priority = 1 / (remaining_capacities + 0.00001)

        # Nearly-full priority: Encourage filling bins almost completely.
        nearly_full_priority = -np.log(remaining_capacities / np.mean(bins_remain_cap[fit_indices]) + 0.001)

        # Combine best-fit and nearly-full.
        combined_priority = best_fit_priority + nearly_full_priority

        # Assign combined priority to corresponding bins.
        priorities[fit_indices] = combined_priority

    # Apply overfill penalty.
    priorities += overfill_penalty

    return priorities
```
