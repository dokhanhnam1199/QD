```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic: Feasibility, best fit, avoid small space, balance, and promote near-full bins."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: -inf if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask

    if not np.any(feasible_mask):
        return priorities

    # 2. Best Fit: Prioritize smaller remaining space.
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # 3. Avoidance of very small spaces: Slightly penalize bins with small remaining space if larger spaces exist.
    small_space_threshold = 0.1
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    larger_space_exists = np.any(remaining_space > small_space_threshold)

    if larger_space_exists:
        priorities[feasible_mask][very_small_space_mask] -= 0.01

    # 4. Promote near-full bins: Reward bins that will become nearly full after adding the item.
    near_full_threshold = 0.05  # bins_capacity*0.05 originally
    nearly_full_mask = (remaining_space > 0) & (remaining_space <= near_full_threshold)
    priorities[feasible_mask][nearly_full_mask] += 0.02

    # 5. Balancing term: Slightly de-prioritize the most preferred bin to encourage exploration.
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 1:
        priority_order = np.argsort(priorities[feasible_mask])
        priorities[feasible_mask][priority_order[-1]] -= 0.005

    return priorities
```
