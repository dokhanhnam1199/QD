```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    feasible_mask = ~infeasible_mask
    
    if not np.any(feasible_mask):
        return priorities

    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space 

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1 
    num_feasible = np.sum(feasible_mask)
    
    if num_feasible > 1:
        very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
        
        # Penalize very small spaces more if multiple bins are feasible
        priorities[feasible_mask][very_small_space_mask] -= 0.05
    
    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins
    almost_full_threshold = 0.9
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.1

    # 5. Prioritize bins with larger capacity when item is large

    large_item_threshold = 0.5 #tuneable parameter
    if item > large_item_threshold:
        # Give higher priority to bins with larger remaining capacity
        priorities[feasible_mask] += bins_remain_cap[feasible_mask]/ np.max(bins_remain_cap) * 0.05

    #6. Adjust priorities based on number of empty bins available.

    empty_bin_threshold = 0.01
    if np.sum(bins_remain_cap > (1- empty_bin_threshold)) > 0 : # if at least one bin is almost empty
        #reduce the incentive to fill existing bins by a tiny amount and thus encourage creating new bins
        priorities[feasible_mask] -= 0.01
        
    return priorities
```
