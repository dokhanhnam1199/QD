```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, feasibility, balancing, and fill ratio."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check
    feasible_mask = item <= bins_remain_cap
    priorities[~feasible_mask] = -np.inf

    # Best Fit: Smaller remaining space -> higher priority
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # Fill Ratio: Prioritize bins that are close to full after adding item
    fill_ratio = (item + (bins_remain_cap - remaining_space)) / (bins_remain_cap.max() + 0.001) #Adding small num to prevent the divide by zero error.
    priorities[feasible_mask] += fill_ratio[feasible_mask] * 0.1

    # Balancing term: Penalize filling the fullest bins (slightly)
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 1:
        priorities[feasible_mask][np.argmax(bins_remain_cap[feasible_mask])] -= 0.005

    return priorities
```
