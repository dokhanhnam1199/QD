```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space  # Smaller remaining space -> higher priority

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1  # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)
    
    # Only penalize if there are other feasible bins that don't result in very small space
    other_feasible_bins = bins_remain_cap[feasible_mask] - item
    if np.any(other_feasible_bins[~very_small_space_mask] > 0):
        priorities[feasible_mask][very_small_space_mask] -= 0.01

    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins
    almost_full_threshold = 0.9  # Define what constitutes an "almost full" bin after placing the item
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.02

    # 5. Balancing Bin Usage: Encourage using bins that are less full overall. Helps distribute items more evenly
    bin_utilization = (1 - bins_remain_cap / np.max(bins_remain_cap))  # Normalize remaining capacity, then invert
    avg_utilization = np.mean(bin_utilization)

    # Prioritize bins with below-average utilization (more remaining capacity relative to others, inverted)
    below_avg_utilization_mask = bin_utilization < avg_utilization
    priorities[below_avg_utilization_mask] += 0.005 * (avg_utilization - bin_utilization[below_avg_utilization_mask]) # Smaller difference -> smaller addition

    #6. Item size consideration:  If the item is large, prioritize bins with larger remaining capacity, avoiding premature fragmentation
    large_item_threshold = 0.5 # Tuneable parameter, threshold is relative to bin capacity (which is implicitly 1)

    if item > large_item_threshold:
        # scale this bonus by the size of the item. So larger items get a larger bonus in larger bins
        priorities[feasible_mask] += 0.01 * (bins_remain_cap[feasible_mask] - item) * item

    return priorities
```
