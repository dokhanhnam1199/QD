```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A more nuanced approach, considering multiple factors inspired by physics:

    1.  Inverse Capacity Gap: Prioritizes bins where the item fits reasonably well.  Smaller gaps yield higher attraction.
    2.  Bin Fill Percentage: Encourages filling bins that are already partially full. This relates to minimizing potential energy in the system.
    3.  Penalty for Near Overfill: Applies a severe penalty to bins where adding the item would almost cause overflow. This is akin to a strong repulsive force near the edge.
    4.  Handling Exact Fits: Provides the best score when item perfectly fits in the bin.
    5.  Avoidance of Overfull Bins: Zero priority if the item does not fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            # Item doesn't fit: Zero priority (avoid overfilling)
            priorities[i] = 0.0
        elif cap == item:
             # Item fits perfectly: highest priority
            priorities[i] = 10.0 # arbitrary large number for perfection
        else:
            gap = cap - item
            fill_percentage = 1 - (cap / (cap + item)) #percentage of original bin size that would be filled
            priorities[i] = (1.0 / (gap + 0.001)) + (fill_percentage*2)

            # Severe penalty if the item almost overfills the bin
            if item > (cap * 0.9): #If the item utilizes more than 90% capacity of existing bin
                 priorities[i] /=5

    return priorities
```
