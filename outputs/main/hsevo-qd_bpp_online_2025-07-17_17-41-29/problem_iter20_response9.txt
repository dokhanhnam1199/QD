```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, balance, and avoids tiny spaces."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    # Best Fit
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space

    # Avoidance of very small spaces
    small_space_threshold = 0.1
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold) & (np.sum(bins_remain_cap[feasible_mask] -item >small_space_threshold) > 0)
    if np.any(very_small_space_mask):
      priorities[feasible_mask][very_small_space_mask] -=0.01
    
    #Moderate Space Preference
    moderate_space_lower = 0.2
    moderate_space_upper = 0.8
    moderate_space_mask = (bins_remain_cap[feasible_mask] >= moderate_space_lower) & (bins_remain_cap[feasible_mask] <= moderate_space_upper)
    priorities[feasible_mask][moderate_space_mask] += 0.005

    return priorities
```
