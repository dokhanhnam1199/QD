```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit ratio with small space avoidance and nearly-full reward."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    if not np.any(feasible_mask):
        return priorities

    remaining_space = bins_remain_cap[feasible_mask] - item
    ratios = item / bins_remain_cap[feasible_mask]
    priorities[feasible_mask] = -np.log(ratios) # Ratio of item/bin
    
    small_space_threshold_ratio = 0.1
    very_small_space_mask = (remaining_space / bins_remain_cap[feasible_mask]) < small_space_threshold_ratio
    
    larger_space_exists = np.any((remaining_space / bins_remain_cap[feasible_mask]) > small_space_threshold_ratio)
    if larger_space_exists:
        priorities[feasible_mask][very_small_space_mask] -= 0.01

    nearly_full_threshold = 0.8
    nearly_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] > nearly_full_threshold
    priorities[feasible_mask][nearly_full_mask] += 0.01

    return priorities
```
