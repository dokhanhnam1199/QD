```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Give -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # 2. Best Fit: Prioritize bins where the remaining space after placing the item is small.
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_space  # Smaller remaining space -> higher priority

    # 3. Avoidance of very small spaces: Penalize bins leaving very small spaces, but only if other bins are more reasonable fits
    small_space_threshold = 0.1  # Tuneable parameter: Avoid leaving spaces smaller than 10% of bin capacity
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold) & (np.sum(bins_remain_cap[feasible_mask] - item > small_space_threshold) > 0)
    if np.any(very_small_space_mask):  # reduce the priorities by a tiny amount only when you know more fits are feasible
        priorities[feasible_mask][very_small_space_mask] -= 0.01

    # 4. Utilize Almost Full Bins: Reward bins that are almost full, encouraging complete filling of existing bins
    almost_full_threshold = 0.9  # Define what constitutes an "almost full" bin after placing the item
    almost_full_mask = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask] < (1 - almost_full_threshold)
    priorities[feasible_mask][almost_full_mask] += 0.02

    # 5. Item Size Consideration: Adapt priority based on item size.
    #   - For large items, slightly prefer bins with larger remaining capacity within the feasible bins, making it robust for future large items.
    #   - For small items, best-fit is adequate, so do nothing.
    large_item_threshold = 0.5  # Items larger than 50% of bin size are considered large
    if item > large_item_threshold:
        priorities[feasible_mask] += 0.005 * bins_remain_cap[feasible_mask] # Add a small bonus based on remaining capacity

    # 6. Bin Usage Penalty: Introduce a penalty for bins that are still empty (or nearly empty),
    # to discourage spreading items too thinly across bins. This encourages filling bins before starting new ones.
    empty_bin_threshold = 0.01  # Consider bins with less than 1% usage as "empty"
    empty_bin_mask = bins_remain_cap > (1 - empty_bin_threshold)
    priorities[empty_bin_mask] -= 0.002 # A very small penalty is enough
    return priorities
```
