```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, avoidance of small spaces, balancing, and fill ratio."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf  # Infeasible bins have lowest priority

    feasible_mask = ~infeasible_mask
    if not np.any(feasible_mask):
        return priorities

    remaining_space = bins_remain_cap[feasible_mask] - item
    # Best-fit component: prioritize bins where remaining space is minimal
    priorities[feasible_mask] = -remaining_space

    small_space_threshold = 0.1
    very_small_space_mask = (remaining_space > 0) & (remaining_space < small_space_threshold)

    larger_space_exists = np.any(remaining_space > small_space_threshold)
    if larger_space_exists:
        priorities[feasible_mask][very_small_space_mask] -= 0.01  # Penalize small spaces if larger exist

    # Fill-ratio component: prioritize bins with higher fill ratio after adding item
    fill_ratios = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask]
    priorities[feasible_mask] += 0.02 * (1 - fill_ratios) #Prioritize higher fill ratio

    # Balancing component: slightly prefer bins with more remaining capacity (before adding item)
    priorities[feasible_mask] += 0.001 * bins_remain_cap[feasible_mask]
    
    return priorities
```
