```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Utilizes a combination of remaining capacity, item size relative to bin size,
    and a slight preference for bins that are already partially filled.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate the remaining space after placing the item
            remaining_space = cap - item

            # Prioritize bins with smallest remaining space but penalize almost full.
            space_priority = np.exp(-remaining_space)

            # Ratio of item size to bin capacity (higher is better but needs scaling)
            item_ratio = item / cap
            item_priority = item_ratio #Linear scaling already helps.
            # Add a small bonus for bins that are already partially filled (to encourage filling).
            #The higher `bonus_scale`, the more likely almost full bins will be used.
            #The higher `exponent`, the quicker bins will fill up because preference to partially full bins increases faster.
            #Choosing parameters below (1,1) leads to less waste
            bonus_scale = 1 #1, 10. 100 were tested
            exponent = 1 # 1, 2, 0.5 were tested

            if cap < 1:
                fill_level = 1 - cap
            else:
                 fill_level = 1 - (cap/np.max(bins_remain_cap)) #Cap relative to max

            fill_priority = bonus_scale * (fill_level**exponent) #Prefer bins already partially filled


            priorities[i] = space_priority + item_priority + fill_priority
        else:
            priorities[i] = -np.inf  # Disqualify bins that are too small

    return priorities
```
