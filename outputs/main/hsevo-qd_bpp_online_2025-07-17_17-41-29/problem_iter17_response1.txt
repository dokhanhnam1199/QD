```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, feasibility, balance, and nearly full reward."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Disqualify bins that can't fit the item
    feasible_mask = item <= bins_remain_cap
    priorities[~feasible_mask] = -np.inf

    # Best Fit: Prioritize bins with minimal remaining space after packing
    remaining_space = bins_remain_cap - item
    priorities[feasible_mask] = -remaining_space[feasible_mask]

    # Balancing term: Discourage filling the fullest bins (reduce imbalance)
    num_feasible = np.sum(feasible_mask)
    if num_feasible > 1:
        priorities[feasible_mask][np.argmax(bins_remain_cap[feasible_mask])] -= 0.005

    # Nearly Full Reward: Incentivize using bins that are almost full
    almost_full_mask = (bins_remain_cap >= item) & (remaining_space <= 0.1) #Tune almost full

    priorities[almost_full_mask] += 0.01  # Reward for nearly full bins

    return priorities
```
