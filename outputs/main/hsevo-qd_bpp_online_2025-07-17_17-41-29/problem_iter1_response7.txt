```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employing heuristics inspired by physical systems:

    1.  A "force" inversely proportional to the 'distance' (capacity difference).
    2.  Penalize bins that would have very little space left after packing (waste).
    3.  A 'temperature' parameter to control exploration vs. exploitation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    temperature = 1.0  # Adjust for exploration/exploitation. Higher -> more exploration.
    epsilon = 1e-6  # Avoid division by zero

    # 1. "Force" component: Higher priority for bins with closer capacity
    capacity_diff = np.abs(bins_remain_cap - item) + epsilon
    force = 1.0 / capacity_diff

    # 2. Waste penalization: Penalize bins leading to small remaining capacity.
    remaining_after = bins_remain_cap - item
    waste_penalty = np.exp(-10 * np.maximum(0, remaining_after))  # Exponential penalty

    #3. Favor bins that can accommodate the item
    can_accommodate = (bins_remain_cap >= item).astype(float)

    #Combine
    priorities = can_accommodate * force * waste_penalty

    # "Boltzmann distribution" to modulate probabilities based on temperature
    priorities = np.exp(priorities / temperature)

    return priorities
```
