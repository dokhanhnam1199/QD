```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: assign -inf priority if item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # For feasible bins:
    feasible_mask = ~infeasible_mask
    feasible_caps = bins_remain_cap[feasible_mask]

    # 1. Remaining capacity after packing: aim for bins with least remaining space.  Avoids creating very empty bins.
    remaining_after_packing = feasible_caps - item
    priorities[feasible_mask] = -np.abs(remaining_after_packing)  # Prefer closer to 0 remaining

    # 2. Reward bins with close fit: encourage near-full bins. Penalize if remaining after packing would make utilization too low
    utilization_threshold = 0.1 #if remaining cap is less than 10% penalize this option less remaining is better
    penalty = (remaining_after_packing > 0 ) * (remaining_after_packing > utilization_threshold*bins_remain_cap[feasible_mask]) # only penalize if there is positive reamining capacity

    priorities[feasible_mask] = priorities[feasible_mask] - 10 * penalty # strong penalty

    #3 Adjusting priorities to consider the item size
    priorities[feasible_mask] = priorities[feasible_mask] + item/bins_remain_cap[feasible_mask]


    #Add tiny random noise to break ties
    priorities[feasible_mask] += np.random.normal(0, 0.0001, size=np.sum(feasible_mask))

    return priorities
```
