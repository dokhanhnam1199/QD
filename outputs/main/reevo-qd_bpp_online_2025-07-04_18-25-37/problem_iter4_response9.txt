```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Remaining Capacity Utilization: Prefer bins that are more utilized.
    # Calculate the remaining capacity after adding the item.
    remaining_capacity_after_fit = bins_remain_cap - item

    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.
    capacity_threshold = 0.1
    near_zero_capacity_bins = remaining_capacity_after_fit < capacity_threshold
    priorities[near_zero_capacity_bins] -= 10  # Higher penalty than before

    # Calculate waste: We want to minimize the waste
    waste = np.copy(remaining_capacity_after_fit)
    waste[infeasible_bins] = np.inf #Invalid waste, high penalty

    # Calculate the efficiency: higher is better
    efficiency = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    efficiency[valid_bins] = item / bins_remain_cap[valid_bins]

    # Prioritize bins where the item nearly fills the bin, but doesn't overflow
    # The closer to zero `waste` is (but greater or equal than zero), the better
    priorities[valid_bins] += (1 - waste[valid_bins] / bins_remain_cap[valid_bins]) * 15 #Increased weight

    # Penalize larger waste, favor smaller waste, but scaled by bin size
    priorities[valid_bins] -= (waste[valid_bins] / bins_remain_cap[valid_bins]) * 5  #Waste ratio relative to bin size

    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.
    priorities[valid_bins] += efficiency[valid_bins] * 10 #Increased weight

    #Bonus for almost perfect fit
    almost_perfect_fit = np.abs(remaining_capacity_after_fit) < 0.01
    priorities[almost_perfect_fit] += 20

    return priorities
```
