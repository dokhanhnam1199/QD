```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    if not np.any(feasible_bins):
        return priorities

    # Remaining Capacity Utilization
    future_capacities = bins_remain_cap - item
    fill_ratios = item / bins_remain_cap  # Ratio of item size to the bin capacity BEFORE placing the item
    remaining_ratios = future_capacities / bins_remain_cap #Ratio of remaining capacity AFTER placing the item

    # Thresholds and Hyperparameters (Tuned!)
    near_full_threshold = 0.95   # Target almost full bins
    min_capacity_threshold = 0.05  # Avoid bins with very small remaining capacity
    full_bin_bonus = 10 #significant bonus for almost filling bin
    waste_penalty_factor = 2
    fill_ratio_reward_factor = 5


    # Reward bins close to full after placing the item.
    almost_full = (1 - remaining_ratios) >= near_full_threshold
    priorities[almost_full & feasible_bins] += full_bin_bonus

    # Penalize bins that become too empty after placing the item.
    too_empty = remaining_ratios > (1 - min_capacity_threshold)
    priorities[too_empty & feasible_bins] -= waste_penalty_factor * remaining_ratios[too_empty & feasible_bins] # waste penalty based on how empty the bin will be

    # Reward bins that are already somewhat full.
    priorities[feasible_bins] += fill_ratio_reward_factor * fill_ratios[feasible_bins]

    return priorities
```
