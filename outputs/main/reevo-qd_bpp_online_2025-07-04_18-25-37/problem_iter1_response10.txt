```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing heuristic influence: Prefer bins with enough space.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1  # Base priority for bins that can fit
    
    # Smaller remaining space is better (but only if it fits)
    remaining_space = bins_remain_cap - item
    remaining_space[~fit_mask] = np.inf # Consider non-fitting bins to have infinite remaining space

    #Prioritize full bins to avoid fragmentation
    full_bin_priority = np.exp(-remaining_space[fit_mask])
    priorities[fit_mask] += full_bin_priority

    # Avoid large waste by penalizing bins that would have a large gap:
    waste_ratio = remaining_space / item
    waste_penalty = np.exp(waste_ratio)
    priorities[fit_mask] /= waste_penalty[fit_mask]
    

    #Prioritize bins that are relatively empty
    bins_utilization = 1-(bins_remain_cap / bins_remain_cap.max())
    priorities[fit_mask] += bins_utilization[fit_mask]
    
    return priorities
```
