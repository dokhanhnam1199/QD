```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: Assign -inf priority if the item doesn't fit.
    priorities[bins_remain_cap < item] = -np.inf
    
    # First Fit Decreasing inspired: Prioritize bins with tighter fit to reduce external fragmentation.
    # We can make this more aggressive to behave like Best Fit.
    
    # Reward bins where the item fits, and the remaining capacity after fitting is small.
    remaining_capacity_after_fit = bins_remain_cap - item
    
    # Give a higher priority to bins where we can almost completely fill.
    # avoid numerical issues when bin_remain_cap close to item size.
    close_fit_bonus = np.exp(-10 * np.abs(remaining_capacity_after_fit) / item)
    
    priorities[bins_remain_cap >= item] = close_fit_bonus[bins_remain_cap >= item]
    
    # Additionally, penalize bins that are too empty (avoid large internal fragmentation), but less important.
    # A simple linear penalty may do it.
    empty_bin_penalty = -0.1 * (bins_remain_cap / np.max(bins_remain_cap))

    priorities = priorities + empty_bin_penalty
    
    return priorities
```
