```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired heuristic
    # High priority if the item fits snugly (but not perfectly).
    fit_threshold = 0.95
    snug_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item / fit_threshold)
    priorities[snug_fit] += 10

    # Prioritize bins that can accommodate the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 5

    # Penalize bins with very little remaining capacity after fitting
    remaining_after_fit = bins_remain_cap - item
    very_small_remaining = (remaining_after_fit > 0) & (remaining_after_fit < 0.1) # avoid near empty bin after packing
    priorities[very_small_remaining] -= 2 # slightly penalize, can be removed for experiments.

    # Bonus for bins that are relatively empty. Try to balance usage.
    empty_ish = bins_remain_cap > 0.75
    priorities[empty_ish] += 1

    # Very large remaining capacities are less ideal, as other smaller items can be packed
    # into bins that do not perfectly accomodate this larger item.
    very_large_capacity = bins_remain_cap > item * 2 # item can fit into bin twice
    priorities[very_large_capacity & can_fit] -= 0.5

    # Set priority to -inf for bins that cannot fit the item
    priorities[~can_fit] = -np.inf

    return priorities
```
