```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Remaining Capacity Utilization: Prefer bins that are more utilized.
    # If we put the item in the bin, what will be the fill ratio?
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        future_fill_ratios = np.zeros_like(bins_remain_cap, dtype=float)
        future_fill_ratios[feasible_bins] = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]

        # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.
        capacity_threshold = 0.1  # Tune this hyperparameter
        near_zero_capacity = (bins_remain_cap - item < capacity_threshold) & feasible_bins
        priorities[near_zero_capacity] -= 10  # or another penalty, like inf, higher penalty

        # Calculate waste: We want to minimize the waste
        waste = bins_remain_cap - item

        # Calculate the efficiency: higher is better
        efficiency = item / (bins_remain_cap)
        efficiency[~feasible_bins] = 0 #invalid ratios

        # Prioritize bins where the item nearly fills the bin, but doesn't overflow
        # The closer to zero `waste` is (but greater or equal than zero), the better
        priorities[feasible_bins] += (1 - waste[feasible_bins] / bins_remain_cap[feasible_bins]) * 5

        # Penalize larger waste, favor smaller waste.  Scale waste penalty by item size.
        priorities[feasible_bins] -= waste[feasible_bins] * item * 0.5

        # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.
        priorities[feasible_bins] += efficiency[feasible_bins] * 3

        # Bonus for bins that can fit the item perfectly.
        perfect_fit = (bins_remain_cap == item)
        priorities[perfect_fit] += 20

    return priorities
```
