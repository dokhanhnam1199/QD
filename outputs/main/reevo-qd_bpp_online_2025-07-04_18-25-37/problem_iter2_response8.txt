```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # 1. Remaining Capacity Utilization: Prefer bins that are more utilized.
    # If we put the item in the bin, what will be the fill ratio?
    # Avoid division by zero
    valid_bins = bins_remain_cap > 0
    future_fill_ratios = np.zeros_like(bins_remain_cap, dtype=float)
    future_fill_ratios[valid_bins] = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]
    future_fill_ratios[bins_remain_cap < item] = 0

    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.
    capacity_threshold = 0.1  # Tune this hyperparameter
    priorities[bins_remain_cap - item < capacity_threshold] -= 10  # Increased penalty

    # Calculate waste: We want to minimize the waste
    waste = bins_remain_cap - item

    # Calculate the efficiency: higher is better
    efficiency = np.zeros_like(bins_remain_cap, dtype=float) # avoids possible divide by zero errors
    efficiency[valid_bins] = item / (bins_remain_cap[valid_bins])
    efficiency[bins_remain_cap < item] = 0 #invalid ratios

    # Prioritize bins where the item nearly fills the bin, but doesn't overflow
    # The closer to zero `waste` is (but greater or equal than zero), the better
    nearly_full_bonus = np.zeros_like(bins_remain_cap, dtype=float)
    nearly_full_bonus[bins_remain_cap >= item] = (1 - waste[bins_remain_cap >= item] / bins_remain_cap[bins_remain_cap >= item]) * 5

    priorities[bins_remain_cap >= item] += nearly_full_bonus[bins_remain_cap >= item]

    # Penalize larger waste, favor smaller waste. Use a non-linear penalty.
    waste_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    waste_penalty[bins_remain_cap >= item] = (waste[bins_remain_cap >= item] / bins_remain_cap[bins_remain_cap >= item])**2 * 10
    priorities[bins_remain_cap >= item] -= waste_penalty[bins_remain_cap >= item]
    
    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.
    priorities[bins_remain_cap >= item] += efficiency[bins_remain_cap >= item] * 3

    #Bonus for filling up the bin completely
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] += 20

    return priorities
```
