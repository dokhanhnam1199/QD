```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: High priority for bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] += 1  # Or a larger base value if feasibility is paramount

    # 2. Remaining Capacity: Prioritize bins with tighter fit (minimize wasted space)
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf  # Ignore infeasible bins
    priorities[feasible_bins] += 1.0 / (1 + waste[feasible_bins])  # Inverse relationship; less waste -> higher priority

    # 3. Bin Level: Incentivize filling bins more completely
    bin_level = 1 - (bins_remain_cap / bins_remain_cap.max()) # Assuming bin_remain_cap.max() is the full capacity of the bins.
    priorities += bin_level * 0.5  # Scale this factor if needed

    # 4. Avoidance (Last Resort Bin): Penalize nearly-full bins unless it's the only option
    nearly_full = (bins_remain_cap < (0.1 * bins_remain_cap.max())) & feasible_bins #if remaining capacity less than 10% of maximum bin capacity,
    if np.any(feasible_bins) and np.sum(feasible_bins) >1 : # check to avoid all bins are nearly full
        priorities[nearly_full] -= 0.2

    return priorities
```
