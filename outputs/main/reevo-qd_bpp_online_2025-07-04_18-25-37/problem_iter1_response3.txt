```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the waste if the item is placed in the bin.
    waste = bins_remain_cap - item

    # Give a high priority to bins where the item fits and the waste is minimal.
    # Avoid creating very small fragments to allow for packing bigger items later.
    fit_mask = waste >= 0
    if np.any(fit_mask):
        priorities[fit_mask] = 1 / (waste[fit_mask] + 1e-6)  # Higher priority for smaller waste

        # Further prioritize bins that result in waste within a certain range.
        # This encourages filling bins reasonably well without leaving tiny gaps.
        optimal_waste_range = (0.1, 0.3)  # Example range, tune as needed
        optimal_waste_mask = (waste >= optimal_waste_range[0]) & (waste <= optimal_waste_range[1]) & fit_mask
        priorities[optimal_waste_mask] *= 2  # Boost priority for bins with optimal waste

    # Penalize bins where the item doesn't fit.  Even a small negative number is enough,
    # to prevent these bins from being selected without completely removing them.
    no_fit_mask = ~fit_mask
    priorities[no_fit_mask] = -1e-6 # Very small negative priority

    # Add a small amount of randomness to break ties and explore the solution space.
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-7
    return priorities
```
