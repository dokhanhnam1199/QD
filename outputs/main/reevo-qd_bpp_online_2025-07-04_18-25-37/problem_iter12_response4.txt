```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Remaining Capacity Utilization: Prefer bins that are more utilized.

    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.
    capacity_threshold = 0.1  # Tune this hyperparameter
    bins_below_threshold = (bins_remain_cap - item) < capacity_threshold
    priorities[bins_below_threshold & ~infeasible_bins] -= 1 #Minor penalty

    # Calculate waste: We want to minimize the waste
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    # Calculate the efficiency: higher is better
    efficiency = item / (bins_remain_cap)
    efficiency[infeasible_bins] = 0

    # Prioritize bins where the item nearly fills the bin, but doesn't overflow
    valid_bins = ~infeasible_bins
    normalized_waste = waste[valid_bins] / bins_remain_cap[valid_bins]
    priorities[valid_bins] += (1 - normalized_waste) * 5 #Major reward for low waste, normalized.

    # Penalize larger waste, favor smaller waste.  Scale the penalty based on item size. A waste of 0.1 is more significant
    # when the item size is also 0.1, compared to when the item size is 0.9.
    priorities[valid_bins] -= waste[valid_bins] * 2 * item

    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.
    priorities[valid_bins] += efficiency[valid_bins] * 3

    # Add a bonus for filling the bin almost exactly.  This can help close bins.
    almost_full_threshold = 0.05  #percent full
    almost_full = (waste >= 0) & (waste <= bins_remain_cap * almost_full_threshold) & valid_bins

    priorities[almost_full] += 10  # Significant bonus for almost full

    #Bonus for perfectly filling a bin
    perfect_fill = waste == 0
    priorities[perfect_fill] += 20

    #Slightly penalize very large remaining capacity. Encourages filling bins that are already somewhat full
    large_capacity = bins_remain_cap > 0.75
    priorities[large_capacity & valid_bins] -= 0.5 * item

    return priorities
```
