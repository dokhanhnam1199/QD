```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Perfect Fit Bonus
    perfect_fit_mask = bins_remain_cap == item
    priorities[perfect_fit_mask] += 100

    # Near-Full Bin Bonus
    near_full_threshold = 0.1  # Tuneable parameter
    near_full_mask = (bins_remain_cap >= item) & (bins_remain_cap - item <= near_full_threshold)
    priorities[near_full_mask] += 50

    # Remaining capacity after adding the item
    remaining_capacity = bins_remain_cap - item

    # Utilization reward
    utilization = item / bins_remain_cap
    utilization[infeasible_mask] = 0  # Avoid division by zero
    priorities[bins_remain_cap >= item] += utilization[bins_remain_cap >= item] * 20 # Scale for importance

    # Waste Penalty
    waste_penalty = remaining_capacity / np.max(bins_remain_cap) # Normalize penalty
    priorities[bins_remain_cap >= item] -= waste_penalty[bins_remain_cap >= item] * 10 # Scale for importance

    # Near-Empty Penalty
    near_empty_threshold = 0.9  # Tuneable parameter
    near_empty_mask = (bins_remain_cap >= item) & (remaining_capacity / np.max(bins_remain_cap) > near_empty_threshold)
    priorities[near_empty_mask] -= 30  # Heavier penalty

    return priorities
```
