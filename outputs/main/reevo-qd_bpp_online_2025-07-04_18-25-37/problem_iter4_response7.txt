```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Utilization Reward: Favor bins that will be highly utilized after packing the item.
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        future_utilization = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]

        # Reward high utilization more strongly
        utilization_threshold = 0.7  # Tune this hyperparameter
        priorities[feasible_bins] += np.where(future_utilization > utilization_threshold, future_utilization * 10, future_utilization * 5)

        # Waste Penalty: Penalize bins that will have very little remaining capacity.
        waste = bins_remain_cap[feasible_bins] - item
        waste_threshold = 0.1  # Tune this hyperparameter
        priorities[feasible_bins] -= np.where(waste < waste_threshold, (waste_threshold - waste) * 15, 0)

        # Moderate Waste Penalty: Penalize larger wastes, but not as strongly as near-empty bins.
        priorities[feasible_bins] -= waste * 2

        # Capacity Proximity Bonus: Favor bins where the item nearly fills the remaining capacity.
        proximity_threshold = 0.05  # Tune this hyperparameter. How close to full is "nearly full"?
        priorities[feasible_bins] += np.where((waste >= 0) & (waste <= proximity_threshold), 10, 0)

        # Introduce a best fit bonus
        best_fit_index = np.argmin(waste)
        priorities[feasible_bins][best_fit_index] += 5  # Small bonus for best fit

    return priorities
```
