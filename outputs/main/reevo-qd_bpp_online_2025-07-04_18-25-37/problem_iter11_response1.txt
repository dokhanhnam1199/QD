```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # 1. Remaining Capacity Utilization: Prefer bins that are more utilized.
    # If we put the item in the bin, what will be the fill ratio?
    potential_fill_ratio = (bins_remain_cap - item) / bins_remain_cap
    potential_fill_ratio[bins_remain_cap < item] = 0  # Set fill ratio to 0 where item doesn't fit

    # Reward bins that become nearly full after adding the item
    near_full_threshold = 0.95
    near_full_bonus = 10
    priorities[(potential_fill_ratio >= near_full_threshold) & (bins_remain_cap >= item)] += near_full_bonus

    # Penalize bins that become near-empty after adding the item
    near_empty_threshold = 0.1
    near_empty_penalty = -5
    priorities[(potential_fill_ratio <= near_empty_threshold) & (bins_remain_cap >= item)] += near_empty_penalty

    # Calculate waste: We want to minimize the waste
    waste = bins_remain_cap - item
    waste[bins_remain_cap < item] = np.inf  # Treat infeasible bins as having infinite waste

    # Calculate the efficiency: higher is better. Use absolute value to prioritize utilization
    efficiency = item / (bins_remain_cap)
    efficiency[bins_remain_cap < item] = 0  # Treat infeasible bins as having 0 efficiency

    # Base priority on utilization and inverse of waste
    priorities[bins_remain_cap >= item] += efficiency[bins_remain_cap >= item] * 5 - waste[bins_remain_cap >= item] * 2

    return priorities
```
