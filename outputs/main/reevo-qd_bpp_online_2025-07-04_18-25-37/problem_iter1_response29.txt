```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give higher priority to bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Prioritize bins with less remaining capacity (but can still fit)
    remaining_after_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] += np.exp(-remaining_after_fit) # exponential decay of preference to avoid wasting space

    # Penalize bins that cannot fit (slightly, to avoid pathological cases)
    cannot_fit = ~can_fit
    priorities[cannot_fit] -= (item - bins_remain_cap[cannot_fit])  # Penalize by overflow amount

    # Normalize priorities to be non-negative
    priorities -= np.min(priorities)
    
    return priorities
```
