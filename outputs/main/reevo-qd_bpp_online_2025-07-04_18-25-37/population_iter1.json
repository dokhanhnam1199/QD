[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 11.60964047443681,
    "mi": 94.04446327225541,
    "token_count": 47.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response0.txt_stdout.txt",
    "code_path": "problem_iter1_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # 1. Remaining Capacity Utilization: Prefer bins that are more utilized.\n    # If we put the item in the bin, what will be the fill ratio?\n    future_fill_ratios = (bins_remain_cap - item) / bins_remain_cap\n\n    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.\n    capacity_threshold = 0.1  # Tune this hyperparameter\n    priorities[bins_remain_cap - item < capacity_threshold] -= 1  # or another penalty, like inf\n\n    # Calculate waste: We want to minimize the waste\n    waste = bins_remain_cap - item\n\n    # Calculate the efficiency: higher is better\n    efficiency = item / (bins_remain_cap)\n    efficiency[bins_remain_cap < item] = 0 #invalid ratios\n\n    # Prioritize bins where the item nearly fills the bin, but doesn't overflow\n    # The closer to zero `waste` is (but greater or equal than zero), the better\n    priorities[bins_remain_cap >= item] += (1 - waste[bins_remain_cap >= item] / bins_remain_cap[bins_remain_cap >= item]) * 5\n\n    # Penalize larger waste, favor smaller waste.\n    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * 2\n\n    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.\n    priorities[bins_remain_cap >= item] += efficiency[bins_remain_cap >= item] * 3\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 106.19818783608963,
    "mi": 83.50586216595873,
    "token_count": 118.0,
    "exec_success": true
  }
]