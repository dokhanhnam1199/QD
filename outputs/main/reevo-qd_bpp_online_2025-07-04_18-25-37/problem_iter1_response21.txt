```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Give a base priority based on how much space is left *after* packing
            remaining_after_pack = cap - item
            priorities[i] = remaining_after_pack

            # Bonus if it's a close fit.  Penalize excessive space remaining
            if remaining_after_pack < item/4:  #Less than 25% of the item size
                priorities[i] += (item - remaining_after_pack)*2 #prefer to pack closely if possible
            elif remaining_after_pack > item:
                priorities[i] -= remaining_after_pack / 4 # Discourage bins with significantly more space

            #Bonus to bins that are already partially full to encourage filling started bins rather than openning new bins
            if cap < 1.0:  #If it has had stuff added previously (assuming bin capacity is 1.0)
                priorities[i] += (1-cap) # encourage bins already in use, proportional to their current emptiness.


        else:
            priorities[i] = -np.inf  # Not feasible
    return priorities
```
