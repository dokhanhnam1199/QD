```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Calculate waste: We want to minimize the waste
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf  #Invalid bins should have infinite waste

    # Calculate the efficiency: higher is better
    efficiency = item / (bins_remain_cap)
    efficiency[infeasible_bins] = 0  # invalid ratios

    valid_bins = ~infeasible_bins

    # Remaining Capacity Utilization: Prefer bins that are more utilized.
    # Prioritize bins where the item nearly fills the bin, but doesn't overflow
    # The closer to zero `waste` is (but greater or equal than zero), the better
    priorities[valid_bins] += (1 - waste[valid_bins] / bins_remain_cap[valid_bins]) * 5

    # Penalize larger waste, favor smaller waste. Scale the penalty based on item size.
    # A waste of 0.1 is more significant when the item size is also 0.1, compared to when the item size is 0.9.
    priorities[valid_bins] -= waste[valid_bins] * 2 * item

    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.
    priorities[valid_bins] += efficiency[valid_bins] * 3

    # Add a bonus for filling the bin almost exactly. This can help close bins.
    almost_full_threshold = 0.05  # percent full
    almost_full = valid_bins & (waste >= 0) & (waste <= bins_remain_cap * almost_full_threshold)
    priorities[almost_full] += 5  # Significant bonus for almost full

    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.
    capacity_threshold = 0.1  # Tune this hyperparameter
    near_empty = valid_bins & (bins_remain_cap - item < capacity_threshold)
    priorities[near_empty] -= 1

    # Bonus for bins that become full after adding the item
    full_bins = valid_bins & (waste == 0)
    priorities[full_bins] += 10  # Even bigger bonus for making the bin full

    return priorities
```
