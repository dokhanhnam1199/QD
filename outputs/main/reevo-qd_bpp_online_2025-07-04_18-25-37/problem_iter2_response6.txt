```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Remaining Capacity Utilization & Avoidance of Near-Zero Capacity:
    remaining_capacity_after_fit = bins_remain_cap - item
    capacity_threshold = 0.1
    near_zero_capacity = remaining_capacity_after_fit < capacity_threshold

    # Waste and Efficiency calculations:
    waste = bins_remain_cap - item
    efficiency = item / bins_remain_cap
    efficiency[infeasible_bins] = 0  # Handle invalid ratios where item doesn't fit

    # Prioritization Logic:

    # 1. Encourage filling bins effectively (high utilization)
    fill_ratio = item / bins_remain_cap
    priorities[~infeasible_bins] += fill_ratio[~infeasible_bins] * 5

    # 2. Minimize waste (smaller waste is preferred)
    # Normalize waste to bin capacity
    normalized_waste = waste / bins_remain_cap
    priorities[~infeasible_bins] -= normalized_waste[~infeasible_bins] * 3

    # 3. Discourage bins with very low remaining capacity after adding the item.
    priorities[near_zero_capacity] -= 2

    # 4. Balancing: Encouraging use of already filled bins. Adding a constant bias.
    priorities[~infeasible_bins] += (bins_remain_cap[~infeasible_bins].min() / bins_remain_cap[~infeasible_bins]) #Bias towards smaller bins

    return priorities
```
