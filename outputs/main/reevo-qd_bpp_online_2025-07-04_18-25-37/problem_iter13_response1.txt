```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Perfect fit bonus
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] += 10  # Significant bonus for perfect fit

    # Near full bonus
    remaining_after_fit = bins_remain_cap - item
    near_full_threshold = 0.1  # Tune this hyperparameter
    near_full = (remaining_after_fit > 0) & (remaining_after_fit <= near_full_threshold)
    priorities[near_full] += 7

    # Capacity utilization score, avoid near empty bins
    utilization = item / bins_remain_cap
    priorities[~infeasible_bins] += utilization[~infeasible_bins] * 2

    # Waste penalty
    waste = np.clip(bins_remain_cap - item, a_min=0, a_max=None)  # Only consider non-negative waste
    priorities[~infeasible_bins] -= waste[~infeasible_bins] * 3

    # Very empty bin penalty (if we add the item)
    near_empty_threshold = 0.9
    future_capacity = bins_remain_cap - item
    near_empty = (future_capacity / bins_remain_cap) > near_empty_threshold
    priorities[near_empty & ~infeasible_bins] -= 5  # Moderate penalty


    return priorities
```
