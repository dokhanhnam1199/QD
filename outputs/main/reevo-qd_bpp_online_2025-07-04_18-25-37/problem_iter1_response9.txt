```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, give high priority to bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1

    # Then, prioritize bins with least wasted space if the item is added
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Set waste to infinity for bins that can't fit
    priorities[can_fit] = 1 / (waste[can_fit] + 0.0001)  # Add small constant to avoid division by zero

    # Optionally, add a bonus for bins that are relatively empty (avoid fragmentation)
    # normalized_capacity = bins_remain_cap / np.max(bins_remain_cap) # or use a fixed max_capacity
    # priorities += 0.1 * normalized_capacity  # small bonus
    
    # Further prioritze bins where the remaining space is close to some useful fraction of the full bin
    useful_fractions = np.array([0.25, 0.5, 0.75]) # Fractions of bin sizes that might be useful
    for fraction in useful_fractions:
        diff = np.abs(waste - (fraction * np.max(bins_remain_cap))) # assume max(bins_remain_cap) is bin size
        close_to_fraction = (diff < 0.05 * np.max(bins_remain_cap)) # if waste is within 5% of the fraction
        priorities[can_fit & close_to_fraction] += 0.5

    return priorities
```
