```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Give a base priority if it can fit

    # Calculate remaining capacity after placing the item (if it fits). Use a small offset to avoid dividing by zero later.
    remaining_capacity = np.where(can_fit, bins_remain_cap - item + 1e-9, 0)

    # Heuristic 1: Prefer bins that will have smaller remaining capacity
    priorities[can_fit] += 1 / (remaining_capacity[can_fit] + 0.00001) 
    # Add a small constant to avoid division by zero if a bin is filled perfectly.

    # Heuristic 2: Consider the 'almost full' bins, prioritizing them
    almost_full = np.logical_and(can_fit, remaining_capacity < item*0.2) #item*0.2. smaller the item, the better the fit to this nearly full bin

    priorities[almost_full] += 5 # High priority for almost full bin
    

    # Heuristic 3: Prioritize slightly larger bins to accomodate future larger items
    slightly_larger = np.logical_and(can_fit, bins_remain_cap < 2*item)
    priorities[slightly_larger]+= 0.5 #give smaller bins a slight priority boost
    
    
    return priorities
```
