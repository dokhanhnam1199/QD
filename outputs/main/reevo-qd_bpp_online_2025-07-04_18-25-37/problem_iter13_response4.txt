```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Perfect Fit Bonus
    perfect_fit_bonus = 10
    is_perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[is_perfect_fit] += perfect_fit_bonus

    # Near Full Reward
    near_full_threshold = 0.1 # Threshold for considering a bin "near full"
    near_full_bonus = 5
    remaining_after_fit = bins_remain_cap - item
    is_near_full = (remaining_after_fit >= 0) & (remaining_after_fit <= near_full_threshold)
    priorities[is_near_full] += near_full_bonus

    # Waste Penalty
    waste_penalty_factor = 2
    waste = np.maximum(0, bins_remain_cap - item)  # Ensure waste is not negative
    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * waste_penalty_factor

    # Near Empty Penalty
    near_empty_threshold = 0.9 # Threshold for considering a bin "near empty" *after* placing item.
    near_empty_penalty = 3
    bins_size = 1 #Assuming bin size to be 1

    is_near_empty = (bins_remain_cap >= item) & ((bins_remain_cap - item) > near_empty_threshold * bins_size)
    priorities[is_near_empty] -= near_empty_penalty

    # Utilization Reward
    utilization_reward_factor = 1
    utilization = item / bins_remain_cap
    utilization[bins_remain_cap < item] = 0 # Avoid invalid values
    priorities[bins_remain_cap >= item] += utilization[bins_remain_cap >= item] * utilization_reward_factor
    
    return priorities
```
