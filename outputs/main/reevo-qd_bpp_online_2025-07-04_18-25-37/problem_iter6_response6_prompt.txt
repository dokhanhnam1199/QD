{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Utilization Reward: Favor bins that will be highly utilized after packing the item.\n    future_utilization = (bins_remain_cap - item) / bins_remain_cap\n    future_utilization[bins_remain_cap < item] = 0  # Handle invalid cases\n\n    # Reward high utilization more strongly\n    utilization_threshold = 0.7  # Tune this hyperparameter\n    priorities[bins_remain_cap >= item] += np.where(future_utilization[bins_remain_cap >= item] > utilization_threshold, future_utilization[bins_remain_cap >= item] * 10, future_utilization[bins_remain_cap >= item] * 5)\n\n    # Waste Penalty: Penalize bins that will have very little remaining capacity.\n    waste = bins_remain_cap - item\n    waste_threshold = 0.1  # Tune this hyperparameter\n    priorities[bins_remain_cap >= item] -= np.where(waste[bins_remain_cap >= item] < waste_threshold, (waste_threshold - waste[bins_remain_cap >= item]) * 15, 0)\n\n    # Moderate Waste Penalty: Penalize larger wastes, but not as strongly as near-empty bins.\n    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * 2\n\n    # Capacity Proximity Bonus: Favor bins where the item nearly fills the remaining capacity.\n    proximity_threshold = 0.05  # Tune this hyperparameter. How close to full is \"nearly full\"?\n    priorities[bins_remain_cap >= item] += np.where((waste[bins_remain_cap >= item] >= 0) & (waste[bins_remain_cap >= item] <= proximity_threshold), 10, 0)\n\n    return priorities\n\n[Reflection]\nThe better code uses explicit rewards/penalties based on feasibility, utilization, and waste, outperforming simple ratio-based priorities.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}