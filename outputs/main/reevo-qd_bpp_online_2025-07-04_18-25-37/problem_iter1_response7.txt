```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic influence: prioritize bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Best Fit heuristic influence: prioritize bins with smallest remaining capacity after adding the item, but only if it fits.
    remaining_space = bins_remain_cap - item
    remaining_space[~can_fit] = np.inf # Penalize bins where item does not fit.
    priorities[can_fit] += 1.0 / (remaining_space[can_fit] + 1e-9) # Avoid division by zero. Add a small constant to remaining space

    # Consider bin utilization: encourage filling bins more completely
    utilization = 1.0 - (bins_remain_cap - item) / bins_remain_cap
    utilization[~can_fit] = -1.0  # Significantly penalize bins where item does not fit.
    priorities += np.clip(utilization, 0.0, 1.0)
    
    return priorities
```
