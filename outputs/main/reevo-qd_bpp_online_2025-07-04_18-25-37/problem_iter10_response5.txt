```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Remaining Capacity Utilization: Prefer bins that are more utilized.
    # If we put the item in the bin, what will be the fill ratio?
    # future_fill_ratios = (bins_remain_cap - item) / bins_remain_cap

    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.
    capacity_threshold = 0.1  # Tune this hyperparameter
    low_capacity_mask = (bins_remain_cap >= item) & (bins_remain_cap - item < capacity_threshold)
    priorities[low_capacity_mask] -= 1  # or another penalty, like inf

    # Calculate waste: We want to minimize the waste
    waste = bins_remain_cap - item
    waste[infeasible_mask] = np.inf #Invalid bins should have infinite waste

    # Calculate the efficiency: higher is better
    efficiency = item / (bins_remain_cap)
    efficiency[infeasible_mask] = 0 #invalid ratios

    # Prioritize bins where the item nearly fills the bin, but doesn't overflow
    # The closer to zero `waste` is (but greater or equal than zero), the better
    valid_bins_mask = bins_remain_cap >= item
    priorities[valid_bins_mask] += (1 - waste[valid_bins_mask] / bins_remain_cap[valid_bins_mask]) * 5

    # Penalize larger waste, favor smaller waste.  Scale the penalty based on item size. A waste of 0.1 is more significant
    # when the item size is also 0.1, compared to when the item size is 0.9.
    priorities[valid_bins_mask] -= waste[valid_bins_mask] * 2 * item

    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.
    priorities[valid_bins_mask] += efficiency[valid_bins_mask] * 3

    # Add a bonus for filling the bin almost exactly.  This can help close bins.
    almost_full_threshold = 0.05  #percent full
    almost_full_mask = (waste >= 0) & (waste <= bins_remain_cap * almost_full_threshold)

    priorities[almost_full_mask] += 5 #Significant bonus for almost full
    
    #Introduce a bin count penalty. Prefer bins that have been used less. This can potentially help balance load across bins.
    bin_usage_count = np.zeros_like(bins_remain_cap, dtype=float) #Assume that all bins are new when function starts, it will be up to outer loop to update the usage count based on its choice
    #Penalty will be higher for empty bins, lower for bins that have been used more.
    priorities -= bin_usage_count * 0.1 #Small penalty so that this feature does not overwelm others
    
    # Introduce a larger penalty if a bin is very close to full after the item is placed.
    very_full_threshold = 0.95
    future_capacity = bins_remain_cap - item
    very_full_mask = (bins_remain_cap >= item) & (future_capacity / bins_remain_cap > very_full_threshold)
    priorities[very_full_mask] -= 2 #Larger Penalty for creating overly full bins

    return priorities
```
