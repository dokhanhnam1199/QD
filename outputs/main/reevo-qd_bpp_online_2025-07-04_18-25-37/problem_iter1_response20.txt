```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Initialize a very small epsilon to avoid division by zero and log(0) errors
    epsilon = 1e-9

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Reward bins that can accommodate the item
            space_left = cap - item
            priorities[i] = (item / (cap + epsilon)) + (1.0 / (space_left + epsilon))  # Higher score for tighter fit and smaller space left
        else:
            # Penalize bins that cannot accommodate the item
            priorities[i] = -np.inf  # Or a large negative value

    return priorities
```
