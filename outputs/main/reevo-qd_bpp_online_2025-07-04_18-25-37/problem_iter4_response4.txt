```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Utilization Reward: Favor bins that will be highly utilized after packing the item.
    # Normalized remaining capacity after placing the item
    future_utilization = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    future_utilization[valid_bins] = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]

    # Reward high utilization more strongly
    utilization_threshold_high = 0.7  # Tune this hyperparameter
    utilization_threshold_low = 0.3
    priorities[valid_bins] += np.where(future_utilization[valid_bins] <= utilization_threshold_high, (1 - future_utilization[valid_bins]) * 5, 0) # Reward higher fill
    priorities[valid_bins] += np.where(future_utilization[valid_bins] <= utilization_threshold_low, 2, 0)  # Small bins should be filled
    # Waste Penalty: Penalize bins that will have very little remaining capacity.
    waste = bins_remain_cap - item
    waste_threshold = 0.1  # Tune this hyperparameter
    priorities[valid_bins] -= np.where(waste[valid_bins] < waste_threshold, (waste_threshold - waste[valid_bins]) * 10, 0)

    # Moderate Waste Penalty: Penalize larger wastes, but not as strongly as near-empty bins.
    priorities[valid_bins] -= waste[valid_bins] * 1 if waste[valid_bins] > 0 else 0

    # Capacity Proximity Bonus: Favor bins where the item nearly fills the remaining capacity.
    proximity_threshold = 0.05  # Tune this hyperparameter. How close to full is "nearly full"?
    priorities[valid_bins] += np.where((waste[valid_bins] >= 0) & (waste[valid_bins] <= proximity_threshold), 15, 0) # Give a high priority if nearly full.

    # Prefer bins with small remaining capacity when the item is also small
    small_item_threshold = 0.2
    small_bin_threshold = 0.3
    priorities[valid_bins] += np.where((item < small_item_threshold) & (bins_remain_cap[valid_bins] < small_bin_threshold), 8, 0)

    return priorities
```
