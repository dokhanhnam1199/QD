```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Remaining Capacity Utilization & Waste Minimization:
    waste = bins_remain_cap - item
    efficiency = item / bins_remain_cap
    efficiency[bins_remain_cap < item] = 0  # Invalid ratios

    # Base priority on utilization (efficiency) and inverse of waste
    priorities[bins_remain_cap >= item] += efficiency[bins_remain_cap >= item] - (waste[bins_remain_cap >= item] / np.max(bins_remain_cap))

    # Bonus for near-full bins after adding the item:
    near_full_threshold = 0.05 * np.max(bins_remain_cap)  # 5% of max capacity
    near_full_bonus = 2
    priorities[(bins_remain_cap >= item) & (waste <= near_full_threshold)] += near_full_bonus

    # Penalty for bins becoming near-empty after adding the item:
    near_empty_threshold = 0.1 * np.max(bins_remain_cap)  # 10% of max capacity
    near_empty_penalty = -1
    priorities[(bins_remain_cap >= item) & (waste > bins_remain_cap - near_empty_threshold)] += near_empty_penalty

    # Bonus for "perfect fit" bins (item fits exactly)
    perfect_fit_bonus = 3
    priorities[(bins_remain_cap >= item) & (waste == 0)] += perfect_fit_bonus

    return priorities
```
