```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Remaining Capacity Utilization and Waste Minimization:
    feasible_mask = ~infeasible_mask
    remaining_capacities = bins_remain_cap[feasible_mask]
    
    if remaining_capacities.size > 0:
        waste = remaining_capacities - item
        
        # Prioritize bins where the item nearly fills the bin.  Adjust scaling.
        fill_ratio = item / remaining_capacities
        priorities[feasible_mask] += fill_ratio * 15  # Increased weight further.

        # Penalize larger waste, with a stronger quadratic penalty.
        priorities[feasible_mask] -= waste**2 * 0.75 # Increased the waste penalty

        # Moderate penalty for almost empty bins post-packing
        almost_empty_threshold = 0.2 # Adjusted threshold
        almost_empty = (remaining_capacities - item) < (almost_empty_threshold * bins_remain_cap[feasible_mask])
        priorities[feasible_mask][almost_empty] -= 3 # Increased penalty

        # Bonus for perfect fit. This is rare, but very beneficial.
        perfect_fit = waste == 0
        priorities[feasible_mask][perfect_fit] += 7  # Increased perfect fit bonus

        # Small bonus for bins that are already relatively full
        already_full_threshold = 0.7
        already_full = remaining_capacities > (already_full_threshold * bins_remain_cap[feasible_mask])
        priorities[feasible_mask][already_full] += 1 # small bonus for bins that are already full

    return priorities
```
