```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities  # All zeros indicate no bin can accommodate

    # 2. Remaining capacity after packing: Prioritize bins with less remaining space *after* packing. This helps fill bins more completely.
    remaining_after_packing = bins_remain_cap - item
    
    # 3.  Avoid very small remaining capacity: Penalize bins that, after packing, would have very little space left. This could prevent them from being useful later.  A threshold could be optimized.
    small_space_penalty = np.where(remaining_after_packing < 0.1, -10, 0) # Large penalty if remaining cap is below 0.1

    # 4. Reward utilization: Reward bins that have been utilized so far
    utilization_reward = bins_remain_cap # The lower the cap the more it is being utilized
    
    # Combination of scoring metrics (using a slightly more elaborate calculation)
    priorities = np.where(feasible_bins, -remaining_after_packing + utilization_reward + small_space_penalty , -np.inf)

    return priorities
```
