```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Remaining capacity after placing the item
    remaining_capacity = bins_remain_cap - item

    # Utilization Reward: Favor bins that will be highly utilized after packing the item.
    utilization = (bins_remain_cap - item) / bins_remain_cap
    utilization[infeasible_mask] = 0

    # Reward high utilization more strongly
    utilization_threshold = 0.7
    priorities[~infeasible_mask] += np.where(utilization[~infeasible_mask] > utilization_threshold, utilization[~infeasible_mask] * 10, utilization[~infeasible_mask] * 5)

    # Waste Penalty: Penalize bins that will have very little remaining capacity.
    waste_threshold = 0.1
    priorities[~infeasible_mask] -= np.where(remaining_capacity[~infeasible_mask] < waste_threshold, (waste_threshold - remaining_capacity[~infeasible_mask]) * 15, 0)

    # Moderate Waste Penalty: Penalize larger wastes, but not as strongly as near-empty bins.
    priorities[~infeasible_mask] -= remaining_capacity[~infeasible_mask] * 2

    # Capacity Proximity Bonus: Favor bins where the item nearly fills the remaining capacity.
    proximity_threshold = 0.05
    priorities[~infeasible_mask] += np.where((remaining_capacity[~infeasible_mask] >= 0) & (remaining_capacity[~infeasible_mask] <= proximity_threshold), 10, 0)

    # Encourage balancing across bins (less variance in remaining capacity)
    mean_remaining_capacity = np.mean(bins_remain_cap[~infeasible_mask]) if np.any(~infeasible_mask) else 0
    priorities[~infeasible_mask] -= np.abs(remaining_capacity[~infeasible_mask] - mean_remaining_capacity) * 0.5

    # Slight preference for bins that are already somewhat filled
    initial_fill_threshold = 0.2
    initial_fill_bonus = np.where(bins_remain_cap < (1 - initial_fill_threshold), 2, 0)
    priorities += initial_fill_bonus
    
    return priorities
```
