```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Utilization Reward: Favor bins that will be highly utilized after packing the item.
    # Scale reward based on item size relative to bin size
    utilization_reward_scale = np.clip(item / bins_remain_cap, 0, 1)
    priorities[~infeasible_bins] += 5 * utilization_reward_scale[~infeasible_bins]

    # Waste Penalty: Penalize bins that will have very little remaining capacity.
    waste = bins_remain_cap - item
    near_empty_threshold = 0.1
    near_empty_bins = (waste >= 0) & (waste < near_empty_threshold)
    priorities[near_empty_bins] -= 15 * (near_empty_threshold - waste[near_empty_bins]) / near_empty_threshold

    # Moderate Waste Penalty
    priorities[~infeasible_bins] -= 2 * waste[~infeasible_bins]

    # Capacity Proximity Bonus
    proximity_threshold = 0.05
    nearly_full_bins = (waste >= 0) & (waste <= proximity_threshold)
    priorities[nearly_full_bins] += 10

    # Open new bin if no nearly full bins exist
    if not np.any(nearly_full_bins) and np.all(infeasible_bins):
        priorities[np.argmax(bins_remain_cap)] = 5 # Slightly favor larger bins
        priorities[np.where(bins_remain_cap == np.max(bins_remain_cap))[0][1:]] = -np.inf

    return priorities
```
