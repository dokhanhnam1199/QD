```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Utilization Reward: Reward bins with higher utilization *after* placing the item.
    future_remaining_capacity = bins_remain_cap - item
    utilization_scores = (bins_remain_cap - future_remaining_capacity) / bins_remain_cap
    utilization_scores[bins_remain_cap < item] = 0  # Set utilization score to 0 for infeasible bins

    # Waste Penalty: Penalize bins based on remaining capacity *after* placing the item.
    waste_penalties = future_remaining_capacity

    # Near-Full Bonus: Give a bonus if the bin is nearly full after placing the item.
    near_full_threshold = 0.1  # Tune this hyperparameter
    near_full_bonus = np.where((future_remaining_capacity >= 0) & (future_remaining_capacity <= near_full_threshold), 5, 0)

    # Perfect Fit Bonus: Give a large bonus for a perfect fit.
    perfect_fit_bonus = np.where(future_remaining_capacity == 0, 10, 0)

    # Weighted Sum of Rewards and Penalties (tune these weights)
    utilization_weight = 3
    waste_weight = 2

    priorities[bins_remain_cap >= item] += (
        utilization_weight * utilization_scores[bins_remain_cap >= item]
        - waste_weight * waste_penalties[bins_remain_cap >= item]
        + near_full_bonus[bins_remain_cap >= item]
        + perfect_fit_bonus[bins_remain_cap >= item]
    )

    return priorities
```
