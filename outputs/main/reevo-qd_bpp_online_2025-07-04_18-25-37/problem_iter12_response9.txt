```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Utilization Reward: Favor bins that will be highly utilized after packing the item.
    # Calculate the percentage of the bin that will be filled *after* adding the item.
    future_utilization = (bins_remain_cap - item) / np.max([bins_remain_cap, np.ones_like(bins_remain_cap) * 1e-9], axis=0) #avoid zero division

    # Stronger reward for high utilization.  Tuneable.
    utilization_threshold_high = 0.7
    utilization_threshold_low = 0.3
    priorities[bins_remain_cap >= item] += np.where(future_utilization[bins_remain_cap >= item] > utilization_threshold_high, future_utilization[bins_remain_cap >= item] * 15, np.where(future_utilization[bins_remain_cap >= item] > utilization_threshold_low, future_utilization[bins_remain_cap >= item] * 7, future_utilization[bins_remain_cap >= item] * 2))
    # Waste Penalty: Penalize bins that will have very little remaining capacity.

    waste = bins_remain_cap - item
    # Larger penalty for small wastes. Tuneable.
    waste_threshold_small = 0.1
    waste_threshold_large = 0.3
    priorities[bins_remain_cap >= item] -= np.where(waste[bins_remain_cap >= item] < waste_threshold_small, (waste_threshold_small - waste[bins_remain_cap >= item]) * 20, np.where(waste[bins_remain_cap >= item] < waste_threshold_large, (waste_threshold_large - waste[bins_remain_cap >= item]) * 5, 0))

    # Capacity Proximity Bonus: Favor bins where the item nearly fills the remaining capacity.
    proximity_threshold = 0.05  # Tune this hyperparameter. How close to full is "nearly full"?
    priorities[bins_remain_cap >= item] += np.where((waste[bins_remain_cap >= item] >= 0) & (waste[bins_remain_cap >= item] <= proximity_threshold), 12, 0)
    
    # Open new bin penalty - try to avoid opening new bins
    new_bin_threshold = 0.99
    is_empty = bins_remain_cap > new_bin_threshold
    priorities[is_empty] -= 1 # Slightly penalize empty bins, but not too much to avoid them

    return priorities
```
