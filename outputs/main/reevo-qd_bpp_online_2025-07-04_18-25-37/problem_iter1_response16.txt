```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item
    
    # 2. Remaining Capacity as Priority:  Favor bins with tighter fits, but penalize near-empty bins
    remaining_space = bins_remain_cap - item
    priorities[feasible_bins] = (bins_remain_cap[feasible_bins] - item + 1e-9) / bins_remain_cap[feasible_bins]
    
    # 3. Large space penalization
    large_space = remaining_space > 0.5
    priorities[large_space & feasible_bins] *= 0.5

    # 4. Avoid filling almost empty bins unless item is very large (more than half of the bin capacity)
    almost_empty = bins_remain_cap > 0.9
    item_large = item < 0.5 # Penalize if the item is not significantly large
    priorities[almost_empty & feasible_bins & item_large] = -1  # Strongly discourage

    # 5. Max out bins which provide minimum waste
    min_waste_bins = np.argmin(remaining_space)
    
    return priorities
```
