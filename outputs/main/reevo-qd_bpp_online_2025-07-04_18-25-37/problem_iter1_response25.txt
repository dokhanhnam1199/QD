```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Enough space
    valid_bins = bins_remain_cap >= item
    
    # Heuristic 2: Smaller remaining capacity is preferred when it fits
    priorities[valid_bins] = 1 / bins_remain_cap[valid_bins]

    # Heuristic 3: If no bins can contain item, use best-fit heuristic.
    if not np.any(valid_bins):
        priorities = bins_remain_cap - item
        priorities = np.abs(priorities)
        priorities = 1 / (priorities + 1e-6)  # avoid division by zero
    
    return priorities
```
