```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Utilization Score: Favor bins that, after placing the item, are highly utilized.
    remaining_after_fit = bins_remain_cap - item
    utilization_ratio = item / bins_remain_cap

    # Bonus for near-full bins (but not overfull)
    near_full_threshold = 0.95
    is_near_full = (utilization_ratio >= near_full_threshold) & (~infeasible_bins)
    priorities[is_near_full] += 10  # Significant bonus

    # Penalty for near-empty bins after placing item
    near_empty_threshold = 0.1
    is_near_empty = (remaining_after_fit / bins_remain_cap) > (1 - near_empty_threshold)
    priorities[is_near_empty & (~infeasible_bins)] -= 5

    # Waste minimization: Smaller remaining capacity is better (unless it's near empty)
    waste_penalty = remaining_after_fit / np.max(bins_remain_cap)  # Normalized waste
    priorities[~infeasible_bins] -= waste_penalty[~infeasible_bins] * 3  # Moderate penalty scaled to waste

    # Initial capacity reward: Slightly favors bins that were initially larger. Make this smaller.
    priorities[~infeasible_bins] += (bins_remain_cap[~infeasible_bins] / np.max(bins_remain_cap)) * 0.5  # Give a slight bias

    # Moderate bonus for bins that are not too empty and not too full before placing the item
    intermediate_threshold_low = 0.2
    intermediate_threshold_high = 0.8
    is_intermediate = (bins_remain_cap / np.max(bins_remain_cap) >= intermediate_threshold_low) & (bins_remain_cap / np.max(bins_remain_cap) <= intermediate_threshold_high) & (~infeasible_bins)
    priorities[is_intermediate] += 2

    return priorities
```
