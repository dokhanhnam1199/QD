```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Parameters - Tuned through experimentation
    near_full_threshold = 0.95
    small_capacity_threshold = 0.1
    waste_penalty_multiplier = 2.0
    efficiency_reward_multiplier = 3.0
    near_full_reward_multiplier = 5.0
    small_capacity_penalty = 10.0

    # Calculate remaining capacity after placing the item
    remaining_capacity = bins_remain_cap - item

    # Calculate fill ratio after placing the item
    fill_ratio = (bins_remain_cap - remaining_capacity) / bins_remain_cap
    fill_ratio[bins_remain_cap < item] = 0  # Make invalid ratios zero to avoid errors

    # Reward bins that will be near full after placing the item
    near_full_bins = (fill_ratio >= near_full_threshold) & (bins_remain_cap >= item)
    priorities[near_full_bins] += near_full_reward_multiplier

    # Penalize bins that will have very small remaining capacity after placing the item
    small_capacity_bins = (remaining_capacity < small_capacity_threshold) & (bins_remain_cap >= item)
    priorities[small_capacity_bins] -= small_capacity_penalty

    # Calculate waste
    waste = bins_remain_cap - item
    waste[bins_remain_cap < item] = 0 # Ensure it's valid.

    # Prioritize smaller waste (but only for bins where the item fits!)
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] -= waste[valid_bins] * waste_penalty_multiplier
    
    # Reward efficiency, but avoid division by zero
    efficiency = item / bins_remain_cap
    efficiency[bins_remain_cap < item] = 0

    priorities[valid_bins] += efficiency[valid_bins] * efficiency_reward_multiplier

    return priorities
```
