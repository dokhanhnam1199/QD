```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Bins that can fit the item get a higher base priority.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1.0

    # Rule 2: The fuller the bin after adding the item, the better (FFD heuristic inspired)
    remaining_after_fit = bins_remain_cap - item
    
    # Avoid division by zero: add a small epsilon
    epsilon = 1e-9
    fill_ratios = (1 - remaining_after_fit / (np.max(bins_remain_cap)+epsilon)) * fit_mask
    priorities += fill_ratios
    
    # Rule 3: Give some small priority to almost-full bins even if they can't fit (minimize fragmentation)
    almost_full_mask = (bins_remain_cap < item) & (bins_remain_cap > item*0.7) # last number can be tuned
    priorities[almost_full_mask] -= 0.5 #Negative priority to almost full bins so other ones can fit better.
    
    
    return priorities
```
