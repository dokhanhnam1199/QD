{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Utilization reward: Favor bins with higher utilization after adding the item\n    future_utilization = (bins_remain_cap - item) / 1.0  # Assuming bin capacity is 1.0\n    priorities[bins_remain_cap >= item] += future_utilization[bins_remain_cap >= item] * 2\n\n    # Waste penalty: Penalize bins that will have significant waste after adding the item\n    waste = bins_remain_cap - item\n    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * 3\n\n\n    # Near-full bonus: Reward bins that become nearly full after adding the item\n    near_full_threshold = 0.1\n    near_full_bonus = 5\n    priorities[(bins_remain_cap >= item) & (waste <= near_full_threshold) ] += near_full_bonus\n\n    # Perfect fit bonus: Give a huge bonus for perfect fits\n    perfect_fit_bonus = 10\n    priorities[(bins_remain_cap >= item) & (waste == 0)] += perfect_fit_bonus\n\n    # Avoid bins with near-zero future capacity\n    capacity_threshold = 0.05  # Further reduced for more aggression\n    priorities[bins_remain_cap - item < capacity_threshold] -= 10  # Increased penalty for near-empty bins\n\n    # Small bonus if space remains in bin after insertion\n    priorities[bins_remain_cap >= item] += 0.1\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, utilization, and near-full bins. Penalize waste and near-zero capacity. Reward perfect fits.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}