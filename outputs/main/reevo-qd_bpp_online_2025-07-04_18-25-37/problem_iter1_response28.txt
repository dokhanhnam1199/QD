```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Feasibility - prioritize bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] += 1  # Give a base priority to feasible bins

    # Rule 2: Remaining capacity after placing item:  Prefer bins that leave less empty space (First-Fit Decreasing inspired).
    remaining_capacity_after_fit = bins_remain_cap - item
    
    # Only consider bins that *can* hold the item, and have positive remaining capacity after fit
    valid_indices = (bins_remain_cap >= item) & (remaining_capacity_after_fit >= 0)

    if np.any(valid_indices):
        # Higher priority for bins with smaller remaining capacity after placing the item.
        priorities[valid_indices] += (1 / (remaining_capacity_after_fit[valid_indices] + 0.0001)) # Avoid division by zero. Higher = better fit

    # Rule 3:  Avoid Fragmentation - Penalize bins that have remaining capacity very close to the item size but slightly bigger (potential for creating small un-usable spaces)
    # This promotes better utilization overall and could prevent the algorithm getting stuck.
    close_fit = (bins_remain_cap > item) & (bins_remain_cap < item + 0.1) # Adjust 0.1 threshold depending on input scale
    priorities[close_fit] -= 0.5

    return priorities
```
