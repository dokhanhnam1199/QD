```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            # Prioritize bins where the item fits and the remaining waste is small
            priorities[i] = 1.0 / (waste + 0.0001)  # Avoid division by zero
            # Give a bonus if waste is very close to 0, indicating near-perfect fit
            if waste < 0.1:
                priorities[i] += 10.0
            # Penalize large waste, making us less likely to pick the bins
            # leading to extremely empty bins in the end
            priorities[i] -= waste/np.sum(bins_remain_cap)
        else:
            priorities[i] = -1e9  # Very low priority if it doesn't fit
    return priorities
```
