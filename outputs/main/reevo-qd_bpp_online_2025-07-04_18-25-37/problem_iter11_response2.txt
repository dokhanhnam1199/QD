```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Parameters to tune (after feasibility check)
    perfect_fill_threshold = 0.05
    near_empty_threshold = 0.9
    waste_penalty_multiplier = 2
    efficiency_reward_multiplier = 3
    perfect_fill_bonus = 10
    near_empty_penalty = 5

    # Calculate waste
    waste = bins_remain_cap - item

    # Calculate efficiency
    efficiency = item / bins_remain_cap
    efficiency[bins_remain_cap < item] = 0  # Set efficiency to 0 when item doesn't fit

    # Perfect/Near-full bin bonus (item nearly fills the bin)
    perfect_fill = (waste >= 0) & (waste <= bins_remain_cap * perfect_fill_threshold)
    priorities[perfect_fill] += perfect_fill_bonus

    # Near-empty bin penalty (Bin almost full)
    near_empty = (waste >= 0) & (bins_remain_cap - item > bins_remain_cap * near_empty_threshold)
    priorities[near_empty] -= near_empty_penalty

    # Waste penalty (prioritize bins with less waste)
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] -= waste[valid_bins] * waste_penalty_multiplier

    # Efficiency reward (prioritize bins with higher efficiency after adding item)
    priorities[valid_bins] += efficiency[valid_bins] * efficiency_reward_multiplier

    return priorities
```
