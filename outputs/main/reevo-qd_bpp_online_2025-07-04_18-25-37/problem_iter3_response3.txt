```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # 1. Remaining Capacity Utilization: Prefer bins that are more utilized.
    # If we put the item in the bin, what will be the fill ratio?
    future_fill_ratios = (bins_remain_cap - item) / bins_remain_cap
    future_fill_ratios[bins_remain_cap < item] = 0  # Handle infeasible cases

    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.
    capacity_threshold = 0.1  # Tune this hyperparameter

    # Greatly penalize bins that go below the threshold.  Makes them much less appealing
    priorities[(bins_remain_cap - item > 0) & (bins_remain_cap - item < capacity_threshold)] -= 10

    # Calculate waste: We want to minimize the waste
    waste = bins_remain_cap - item
    waste[bins_remain_cap < item] = np.inf #invalidate wasted space

    # Calculate the efficiency: higher is better
    efficiency = item / (bins_remain_cap)
    efficiency[bins_remain_cap < item] = 0 #invalid ratios

    # Prioritize bins where the item nearly fills the bin, but doesn't overflow
    # The closer to zero `waste` is (but greater or equal than zero), the better
    # Increase reward for near-perfect fit
    near_fit_threshold = 0.05
    near_fit_bonus = 5

    priorities[(bins_remain_cap >= item) & (waste/bins_remain_cap < near_fit_threshold)] += near_fit_bonus

    priorities[bins_remain_cap >= item] += (1 - waste[bins_remain_cap >= item] / bins_remain_cap[bins_remain_cap >= item]) * 2

    # Penalize larger waste, favor smaller waste. Slightly reduced from V1.
    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * 1

    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.
    priorities[bins_remain_cap >= item] += efficiency[bins_remain_cap >= item] * 3

    return priorities
```
