```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic component:
    # Prioritize bins that can fit the item. Bins that can't fit get a score of -np.inf
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf
    
    # Smallest Remaining Capacity heuristic component (but only among bins that can fit)
    remaining_space = bins_remain_cap - item
    remaining_space[~can_fit] = np.inf  # Avoid negative remaining space affecting the sorting if bins cant fit
    priorities[can_fit] = -remaining_space[can_fit] # Prioritize bins with least space left AFTER placing item

    # Avoid fragmentation: Moderate remaining capacity is better, but only if the item can fit

    #Reward packing into bins with remaining capacity somewhat close to item size. Avoid near full and near empty bins after adding an item.

    #near_full = np.abs(remaining_space[can_fit])< item/4
    #priorities[can_fit][near_full]=priorities[can_fit][near_full]*1.1 #slight bump
    
    near_empty = (remaining_space[can_fit] > item * 2)
    priorities[can_fit][near_empty] = priorities[can_fit][near_empty]*0.9 #slight demerit
    

    return priorities
```
