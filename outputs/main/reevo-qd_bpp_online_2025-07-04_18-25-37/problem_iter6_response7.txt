```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Utilization Reward: Favor bins that will be highly utilized after packing the item.
    # Scale reward to remaining capacity to avoid favoring small bins
    future_utilization = (bins_remain_cap - item) / bins_remain_cap
    future_utilization[infeasible_mask] = 0  # Handle invalid cases

    utilization_threshold_high = 0.8  # Higher threshold for stronger reward
    utilization_threshold_low = 0.5   # lower threshold for some base reward

    high_utilization_reward = 12
    low_utilization_reward = 6
    priorities[bins_remain_cap >= item] += np.where(future_utilization[bins_remain_cap >= item] > utilization_threshold_high, future_utilization[bins_remain_cap >= item] * high_utilization_reward, np.where(future_utilization[bins_remain_cap >= item] > utilization_threshold_low, future_utilization[bins_remain_cap >= item] * low_utilization_reward, 0))
    # Waste Penalty: Penalize bins that will have very little remaining capacity.
    waste = bins_remain_cap - item
    waste_threshold_small = 0.05  # Very small waste
    waste_threshold_medium = 0.2 # Medium waste

    small_waste_penalty = 20
    medium_waste_penalty = 8
    priorities[bins_remain_cap >= item] -= np.where(waste[bins_remain_cap >= item] < waste_threshold_small, (waste_threshold_small - waste[bins_remain_cap >= item]) * small_waste_penalty, np.where(waste[bins_remain_cap >= item] < waste_threshold_medium, (waste_threshold_medium - waste[bins_remain_cap >= item]) * medium_waste_penalty, 0))

    # Moderate Waste Penalty: Penalize larger wastes, but not as strongly as near-empty bins. More linear scaling
    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * 1.5

    # Capacity Proximity Bonus: Favor bins where the item nearly fills the remaining capacity.
    # Also penalize if item fills capacity exactly to avoid pathological case
    proximity_threshold = 0.03  # How close to full is "nearly full"?
    proximity_bonus = 15
    exact_fill_penalty = 5
    priorities[bins_remain_cap >= item] += np.where((waste[bins_remain_cap >= item] >= 0) & (waste[bins_remain_cap >= item] <= proximity_threshold), proximity_bonus, 0)
    priorities[bins_remain_cap >= item] -= np.where(waste[bins_remain_cap >= item] == 0, exact_fill_penalty, 0)
    return priorities
```
