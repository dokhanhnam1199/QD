```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very high priority if the item fits perfectly
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # Large value for perfect fit

    # High priority if the item almost fits
    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap < (item * 1.1)) # within 10%
    priorities[almost_fit] = 500

    # Give some priority based on how much space is left if item fits. Higher remaining space should be penalized, since it can be used by a larger item later on
    fits = bins_remain_cap >= item
    remaining_space = bins_remain_cap[fits] - item
    priorities[fits] = 100 - remaining_space * 10 # Higher remaining cap => Lower the score

    # Negative priority if the item does not fit
    does_not_fit = bins_remain_cap < item
    priorities[does_not_fit] = -1000 # Avoid overflow/errors

    return priorities
```
