```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Perfect Fit Bonus: Big reward if item fits perfectly
    perfect_fit_mask = bins_remain_cap == item
    priorities[perfect_fit_mask] += 100

    # Near-Full Bin Bonus: High reward if item makes bin nearly full
    near_full_threshold = 0.1
    near_full_mask = (bins_remain_cap >= item) & ((bins_remain_cap - item) <= near_full_threshold)
    priorities[near_full_mask] += 50

    # Utilization Reward: Reward filling up the bin as much as possible.
    # Modified to be relative to bin size.
    utilization = item / bins_remain_cap
    priorities[bins_remain_cap >= item] += utilization[bins_remain_cap >= item] * 20

    # Waste Penalty: Penalize bins that will have a lot of wasted space after placing the item.
    waste = bins_remain_cap - item
    priorities[bins_remain_cap >= item] -= (waste[bins_remain_cap >= item] / np.max(bins_remain_cap)) * 30

    # Near-Empty Penalty: Avoid bins that will be nearly empty after placing the item.
    near_empty_threshold = 0.2
    near_empty_mask = (bins_remain_cap >= item) & ((bins_remain_cap - item) / np.max(bins_remain_cap) > near_empty_threshold)  # relative threshold
    priorities[near_empty_mask] -= 10

    # Small Waste Bonus: Prioritize bins that result in small remaining space
    small_waste_threshold = 0.05
    small_waste_mask = (bins_remain_cap >= item) & (waste <= small_waste_threshold)
    priorities[small_waste_mask] += 15

    return priorities
```
