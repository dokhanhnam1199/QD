```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Large enough bin:
    eligible_bins = bins_remain_cap >= item
    
    if np.any(eligible_bins):

        # Heuristic 1: Remaining capacity after placement
        remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = -np.abs(remaining_capacity_after_placement) # Prefer bins that leave a small remaining space (first-fit-decreasing inspired). Negate to turn into a priority score

        # Heuristic 2: Favor bins with high utilization
        utilization = (bins_remain_cap[eligible_bins] - remaining_capacity_after_placement) / bins_remain_cap[eligible_bins]  # item / bins_remain_cap[eligible_bins]

        # Combine heuristics: High utilization * close to full
        priorities[eligible_bins] += utilization * 10 # Scale factor to make it relevant. Higher utilization gives higher priority.


    # Penalize bins that are too small (optional, but could help)
    ineligible_bins = bins_remain_cap < item
    priorities[ineligible_bins] = -np.inf 

    return priorities
```
