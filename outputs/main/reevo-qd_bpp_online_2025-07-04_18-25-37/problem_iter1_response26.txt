```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item
    
    # 2. Remaining Capacity: Prefer bins with smaller remaining capacity AFTER placing item.
    remaining_capacity_after_placement = bins_remain_cap - item
    
    # 3. Bin Utilization: Prefer bins that would be fuller after item placement.  Avoid creating too many almost-empty bins
    
    #Give feasible bins non-zero priority and scale by remaining capacity, preferring lower capacity
    priorities[feasible_bins] = 1 / (remaining_capacity_after_placement[feasible_bins] + 0.0001)  # Add small value to prevent division by zero.
    
    # Bonus for bins almost full
    almost_full_threshold = 0.1  # Define a threshold for "almost full" (e.g., remaining capacity < 10%)

    almost_full_bins = (remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement <= (bins_remain_cap.max() * almost_full_threshold)) # max capacity makes the almost_full_threshold invariant to the bins capacity
    priorities[almost_full_bins] *= 5  # Boost priority of almost full bins substantially
    
    return priorities
```
