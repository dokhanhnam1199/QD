```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign high priority to bins that can fit the item reasonably well,
    # but avoid bins where the item almost fills the entire bin (to leave room for future items).
    fit_mask = (bins_remain_cap >= item) 
    
    if np.any(fit_mask): #give zero priority if nothing fits.
        priorities[~fit_mask] = -np.inf #no fit
        
        ratios = item / bins_remain_cap[fit_mask]
        #Give more priority to those that are more full
        
        priorities[fit_mask] = (1 - ratios)  #Prefer bins that don't have that much remaining space relative to size of item
    
        # Add a bonus for bins that are close to full after adding the item
        remaining_after_add = bins_remain_cap[fit_mask] - item
        fullness_bonus = np.exp(-5 * remaining_after_add / bins_remain_cap[fit_mask])  #Exponential decay, preference for smaller remains

        priorities[fit_mask] += fullness_bonus

    
    
    return priorities
```
