```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Perfect Fit Bonus: Heavily reward if the item fits perfectly
    perfect_fit_bonus = 10
    priorities[bins_remain_cap == item] += perfect_fit_bonus

    # Near-Full Bonus: Reward bins that will become nearly full after adding the item.
    near_full_threshold = 0.1  # Tune this hyperparameter: allowable remaining ratio. Smaller is "nearer".
    remaining_after = bins_remain_cap - item
    near_full_bonus = 5
    priorities[(remaining_after >= 0) & (remaining_after / bins_remain_cap < near_full_threshold)] += near_full_bonus

    # Near-Empty Penalty: Penalize bins that will become nearly empty after adding the item.
    near_empty_threshold = 0.9  # Tune this hyperparameter. allowable filled ratio.
    near_empty_penalty = -3
    priorities[(remaining_after >= 0) & (remaining_after / bins_remain_cap > near_empty_threshold)] += near_empty_penalty

    # Utilization Reward: Reward based on how much of the bin will be used.
    utilization = item / bins_remain_cap
    utilization_weight = 2
    priorities[bins_remain_cap >= item] += utilization[bins_remain_cap >= item] * utilization_weight

    # Waste Penalty: Penalize wasted space, but less harshly than infeasibility.
    waste = bins_remain_cap - item
    waste_penalty_weight = -1
    priorities[bins_remain_cap >= item] += waste[bins_remain_cap >= item] * waste_penalty_weight

    return priorities
```
