```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Remaining Capacity Utilization and Waste Minimization:
    feasible_mask = ~infeasible_mask
    remaining_capacities = bins_remain_cap[feasible_mask]
    
    if remaining_capacities.size > 0:
        waste = remaining_capacities - item
        
        # Prioritize bins where the item nearly fills the bin.  Adjust scaling.
        fill_ratio = item / remaining_capacities
        priorities[feasible_mask] += fill_ratio * 10  # Increased weight. Closer to 1.0 is much better.
        
        # Penalize larger waste, with a quadratic penalty. Avoid large waste at all costs.
        priorities[feasible_mask] -= waste**2 * 0.5 # Adjusted the penalty. Squared waste has a stronger effect.

        # Moderate penalty for almost empty bins
        almost_empty_threshold = 0.1
        almost_empty = (remaining_capacities - item) < (almost_empty_threshold * bins_remain_cap[feasible_mask])
        priorities[feasible_mask][almost_empty] -= 2 #Adjust the penalty

        # Bonus for perfect fit. This is rare, but very beneficial.
        perfect_fit = waste == 0
        priorities[feasible_mask][perfect_fit] += 5

        #Prioritize bins with smallest remaining capacity
        priorities[feasible_mask] += (1/remaining_capacities) *0.1

        # Add a slight bias towards using bins that are already partially filled
        # This can help prevent creating many almost-empty bins
        already_filled_threshold = 0.9
        already_filled_mask = remaining_capacities < already_filled_threshold * np.max(bins_remain_cap)

        if np.any(already_filled_mask):
            priorities[feasible_mask][already_filled_mask] += 0.5

    return priorities
```
