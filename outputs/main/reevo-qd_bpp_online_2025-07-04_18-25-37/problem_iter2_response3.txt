```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Remaining Capacity Utilization: Prefer bins that are more utilized.
    # Future remaining capacity after placing the item.
    future_remaining_cap = bins_remain_cap - item

    # Avoid bins with near-zero future capacity.
    capacity_threshold = 0.1
    low_capacity_mask = (future_remaining_cap > 0) & (future_remaining_cap < capacity_threshold)
    priorities[low_capacity_mask] -= 5  # Significant penalty for low capacity

    # Waste minimization
    waste = bins_remain_cap - item
    
    # Efficiency: item_size / original_capacity
    efficiency = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins_mask = bins_remain_cap >= item
    efficiency[feasible_bins_mask] = item / bins_remain_cap[feasible_bins_mask]

    # Prioritize bins where item nearly fills bin
    nearly_full_bonus = np.zeros_like(bins_remain_cap, dtype=float)
    nearly_full_mask = feasible_bins_mask & (waste >= 0)
    nearly_full_bonus[nearly_full_mask] = (1 - waste[nearly_full_mask] / bins_remain_cap[nearly_full_mask]) * 10  # Higher bonus

    # Penalize larger waste, favor smaller waste.
    waste_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    waste_penalty[feasible_bins_mask & (waste >= 0)] = waste[feasible_bins_mask & (waste >= 0)] * 3  # Increased penalty

    # Reward efficiency.
    efficiency_reward = efficiency * 7  # Increased reward

    # Combining all factors
    priorities[feasible_bins_mask] += nearly_full_bonus[feasible_bins_mask]
    priorities[feasible_bins_mask] -= waste_penalty[feasible_bins_mask]
    priorities[feasible_bins_mask] += efficiency_reward[feasible_bins_mask]

    return priorities
```
