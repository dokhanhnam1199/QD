```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Remaining Capacity Utilization and Waste Minimization:
    feasible_mask = ~infeasible_mask
    remaining_capacities = bins_remain_cap[feasible_mask]
    
    if remaining_capacities.size > 0:
        waste = remaining_capacities - item
        
        # Prioritize bins where the item nearly fills the bin.  Adjust scaling.
        fill_ratio = item / remaining_capacities
        priorities[feasible_mask] += fill_ratio * 15  # Increased weight. Closer to 1.0 is much better.
        
        # Penalize larger waste, with a sharper penalty curve
        priorities[feasible_mask] -= np.abs(waste)**3 * 0.1 # Adjusted the penalty. Cubed waste has a stronger effect. abs to avoid negative penalities

        # Moderate penalty for bins that, after packing, result in relative waste over a threshold
        waste_ratio = waste / remaining_capacities
        large_waste_threshold = 0.3
        large_waste_bins = waste_ratio > large_waste_threshold
        priorities[feasible_mask][large_waste_bins] -= 3
        
        # Bonus for perfect fit. This is rare, but very beneficial.
        perfect_fit = waste == 0
        priorities[feasible_mask][perfect_fit] += 10

        # Bonus for almost perfect fit
        almost_perfect_fit_threshold = 0.05
        almost_perfect_fit = (waste > 0) & (waste / item < almost_perfect_fit_threshold)
        priorities[feasible_mask][almost_perfect_fit] += 5

    return priorities
```
