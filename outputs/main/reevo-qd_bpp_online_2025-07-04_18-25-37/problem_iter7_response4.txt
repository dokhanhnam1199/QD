```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Utilization reward: Give higher priority to bins that will be more full after adding the item
    fill_ratio_after_packing = (bins_remain_cap - item) / bins_remain_cap
    priorities[bins_remain_cap >= item] += fill_ratio_after_packing[bins_remain_cap >= item] * 2  # Tune weight (2)

    # Waste penalty: Penalize bins that will have a lot of wasted space after adding the item
    waste = bins_remain_cap - item
    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * 1.5  # Tune weight (1.5)

    # Near-full bonus: Give a bonus to bins that will be nearly full after adding the item
    near_full_threshold = 0.1  # Tune this threshold
    near_full_bonus = 5  # Tune this bonus
    priorities[(bins_remain_cap >= item) & (waste >= 0) & (waste <= near_full_threshold)] += near_full_bonus

    # Perfect fit bonus: Give a bonus to bins that the item fits perfectly into
    perfect_fit_bonus = 10  # Tune this bonus
    priorities[bins_remain_cap == item] += perfect_fit_bonus

    # Small remaining capacity penalty to avoid fragmentation
    capacity_threshold = 0.2
    small_capacity_penalty = -3
    priorities[(bins_remain_cap >= item) & (bins_remain_cap - item <= capacity_threshold)] += small_capacity_penalty


    return priorities
```
