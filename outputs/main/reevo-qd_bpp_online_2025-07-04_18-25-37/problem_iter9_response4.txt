```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Perfect fit bonus: Significantly boost priority if the item fits perfectly
    perfect_fit_bonus = 10
    is_perfect_fit = bins_remain_cap == item
    priorities[is_perfect_fit] += perfect_fit_bonus

    # Remaining capacity utilization: Prefer bins that are more utilized after placing the item.
    future_remaining_capacity = bins_remain_cap - item
    utilization_score = (bins_remain_cap - future_remaining_capacity) / bins_remain_cap
    utilization_score[bins_remain_cap < item] = 0  # Ensure it is zero for infeasible bins

    # Waste penalty: Penalize bins with large remaining waste.  We normalize it.
    waste_penalty_factor = 5
    waste_penalty = (future_remaining_capacity / bins_remain_cap) * waste_penalty_factor
    waste_penalty[bins_remain_cap < item] = 0 #waste shouldn't impact infeasible bins

    # Near-empty penalty: Heavily penalize bins that become near-empty after adding the item.
    near_empty_threshold = 0.1
    near_empty_penalty = -10
    is_near_empty = future_remaining_capacity <= near_empty_threshold * bins_remain_cap
    priorities[is_near_empty] += near_empty_penalty

    # Combine scores:
    priorities[bins_remain_cap >= item] += utilization_score[bins_remain_cap >= item] * 3 #was 3

    priorities[bins_remain_cap >= item] -= waste_penalty[bins_remain_cap >= item] #was 2

    return priorities
```
