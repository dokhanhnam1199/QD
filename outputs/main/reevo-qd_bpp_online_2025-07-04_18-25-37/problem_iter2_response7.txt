```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Remaining Capacity Utilization
    # Calculate waste: We want to minimize the waste. Only consider feasible bins.
    waste = bins_remain_cap - item
    waste[infeasible_mask] = np.inf #mark infeasible waste as infinite

    # Calculate the efficiency: higher is better. Only consider feasible bins
    efficiency = item / (bins_remain_cap)
    efficiency[infeasible_mask] = 0 #invalid ratios

    # Future remaining capacity ratio:
    future_capacity_ratio = (bins_remain_cap - item) / np.max(bins_remain_cap) #Normalize to bin size.
    future_capacity_ratio[infeasible_mask] = -np.inf
    # Prioritize bins where the item nearly fills the bin, but doesn't overflow
    # The closer to zero `waste` is (but greater or equal than zero), the better
    # Using a scaled waste to normalize between different bin capacities
    scaled_waste = waste / bins_remain_cap

    #We want the scaled waste to be as small as possible, and also be feasible
    priorities += (1 - scaled_waste) * 5 #High score the bins that have smallest scaled waste

    # Penalize larger waste, favor smaller waste, scaled by item size for normalization
    priorities -= waste / item * 2

    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.
    priorities += efficiency * 3

    # Incentivize using almost empty bins if the item nearly fills it.
    almost_full_threshold = 0.9 #tune this hyperparameter
    almost_full_bonus = 2
    priorities[efficiency > almost_full_threshold] += almost_full_bonus
    return priorities
```
