```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: If the item fits perfectly, prioritize that bin highly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] += 1000  # Give a very high priority

    # Rule 2: If the item fits and leaves a small gap, prioritize highly
    small_gap = (bins_remain_cap - item) > 0
    small_gap_size = bins_remain_cap - item
    small_gap_priority = 100 * np.exp(-10 * small_gap_size)  # Exponential decay with gap size
    priorities[small_gap] += small_gap_priority[small_gap]

    # Rule 3: If item fits, prioritize bins with largest remaining capacity but not perfectly
    fits = bins_remain_cap >= item
    priorities[fits] += bins_remain_cap[fits]

    # Rule 4: If nothing fits, set a very low priority (effectively ignoring)
    no_fit = bins_remain_cap < item
    priorities[no_fit] -= 10000 # Very negative priority

    return priorities
```
