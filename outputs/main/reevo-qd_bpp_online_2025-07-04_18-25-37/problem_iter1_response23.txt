```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Basic score: prefer bins that can fit the item
            priorities[i] = 1

            # Higher score for bins where the item fits snugly.
            remaining_space = cap - item
            priorities[i] += np.exp(-remaining_space) # High if little space remains, low if much remains

            # Slightly prefer bins that are not too full already (avoid creating very full bins too early, encourages more balanced bins).
            priorities[i] += 0.1 * cap

            #Give a slight bonus to nearly empty bins
            if cap > 0.95:
                priorities[i] += 0.5


        else:
            # Very low priority if the item doesn't fit.  Slightly prefer the bins which are the closest
            priorities[i] = -10*(item - cap) #Negative Priority proportional to how badly it doesn't fit. This discourages adding to overflowing bins.

    return priorities
```
