```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Encourage filling bins that are close to being full after adding the item
            fill_level_after_addition = (item) / 1.0 #Ratio of item to full bin.
            if fill_level_after_addition > 0.0:
                remaining_after = cap - item
                if remaining_after > 0:
                    priorities[i] = 1.0 / (remaining_after + 0.00001)  # small value to prevent inf
                else:
                     priorities[i] = 1000.0  #Very high prioirty if we finish the bin.
            else:
                priorities[i] = -1000.0 # Extremely discourage the addition of negative or zero item size
        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority
    return priorities
```
