```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Perfect Fit Bonus: If the item fits perfectly, give it a very high priority
    perfect_fit_indices = np.where(bins_remain_cap == item)[0]
    priorities[perfect_fit_indices] = 1000  # A very high priority

    # Remaining Capacity Utilization: Prefer bins that are more utilized.
    # If we put the item in the bin, what will be the fill ratio?
    future_fill_ratios = (bins_remain_cap - item) / bins_remain_cap
    future_fill_ratios[bins_remain_cap < item] = 0 # Avoid division by zero errors.

    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.
    capacity_threshold = 0.1  # Tune this hyperparameter
    priorities[bins_remain_cap - item < capacity_threshold] -= 5  # Increased penalty

    # Calculate waste: We want to minimize the waste
    waste = bins_remain_cap - item

    # Penalize larger waste, favor smaller waste.  Reduced waste multiplier.
    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * 1

    # Calculate the efficiency: higher is better
    efficiency = item / (bins_remain_cap)
    efficiency[bins_remain_cap < item] = 0 #invalid ratios

    # Prioritize bins where the item nearly fills the bin, but doesn't overflow.  Increased fill bonus.
    priorities[bins_remain_cap >= item] += (1 - waste[bins_remain_cap >= item] / bins_remain_cap[bins_remain_cap >= item]) * 10

    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.
    priorities[bins_remain_cap >= item] += efficiency[bins_remain_cap >= item] * 3

    return priorities
```
