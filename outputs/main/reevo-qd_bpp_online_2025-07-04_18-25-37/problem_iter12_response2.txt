```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Remaining Capacity Utilization and Waste Minimization:
    # Calculate waste (remaining capacity after adding the item).
    waste = bins_remain_cap - item
    
    # Define a small constant to avoid division by zero or very small numbers.
    epsilon = 1e-6

    # Prioritize bins where the item nearly fills the bin (small waste).
    # The closer `waste` is to zero, the better. But only for feasible bins.
    feasible_bins = bins_remain_cap >= item
    
    # Calculate utilization ratio: item size / original bin capacity
    utilization_ratio = item / (bins_remain_cap + epsilon) 
    utilization_ratio[~feasible_bins] = 0  # Invalidate for infeasible bins.

    # Calculate remaining capacity ratio (waste / original bin capacity).
    remaining_capacity_ratio = waste / (bins_remain_cap + epsilon)
    remaining_capacity_ratio[~feasible_bins] = 1.0  #Invalidate for infeasible bins.

    # Prioritize small waste, higher utilization, and ensure feasibility.
    priorities[feasible_bins] += (1 - remaining_capacity_ratio[feasible_bins]) * 5 # Reward small waste.
    priorities[feasible_bins] += utilization_ratio[feasible_bins] * 3  # Reward high utilization.
   
    # Penalize near-zero capacity after placing the item.  Make this a stronger penalty.
    capacity_threshold = 0.1
    near_zero_capacity = (bins_remain_cap - item) < capacity_threshold
    priorities[near_zero_capacity] -= 10  # Substantially penalize

    # Adjust penalty for larger waste. Make it stronger.
    priorities[feasible_bins] -= waste[feasible_bins] * 2  # Penalize larger waste

    return priorities
```
