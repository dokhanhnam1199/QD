```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Perfect Fit Bonus: If the item fits perfectly, give it a very high priority
    perfect_fit_bonus = 100
    perfect_fit_mask = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit_mask] += perfect_fit_bonus

    # Remaining Capacity Utilization and Waste Minimization
    waste = bins_remain_cap - item
    waste[infeasible_mask] = 1000 # Penalize infeasible bins

    utilization = item / bins_remain_cap
    utilization[infeasible_mask] = 0

    waste_penalty_factor = 2
    utilization_reward_factor = 3

    feasible_mask = ~infeasible_mask
    priorities[feasible_mask] += (1 - waste[feasible_mask] / bins_remain_cap[feasible_mask]) * utilization_reward_factor - waste[feasible_mask] * waste_penalty_factor


    # Near Empty Penalty - Apply a moderate penalty to bins that become near empty after placing the item
    near_empty_threshold = 0.1
    near_empty_penalty = -5
    future_remain_cap = bins_remain_cap - item
    is_near_empty = (future_remain_cap / bins_remain_cap) > (1 - near_empty_threshold)
    priorities[feasible_mask] += np.where(is_near_empty[feasible_mask], near_empty_penalty, 0)


    # Near Full Reward - Prioritize bins that become near full after placing the item
    near_full_threshold = 0.9
    near_full_reward = 5
    future_utilization = (bins_remain_cap - waste) / bins_remain_cap
    is_near_full = future_utilization >= near_full_threshold
    priorities[feasible_mask] += np.where(is_near_full[feasible_mask], near_full_reward, 0)

    # Medium Fit Reward - A moderate reward for bins where the item occupies a significant portion of the bin
    medium_fit_threshold = 0.5
    medium_fit_reward = 2
    is_medium_fit = utilization >= medium_fit_threshold
    priorities[feasible_mask] += np.where(is_medium_fit[feasible_mask], medium_fit_reward, 0)

    return priorities
```
