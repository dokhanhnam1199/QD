{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Remaining Capacity Utilization and Waste Minimization:\n    feasible_mask = ~infeasible_mask\n    remaining_capacities = bins_remain_cap[feasible_mask]\n    \n    if remaining_capacities.size > 0:\n        waste = remaining_capacities - item\n        \n        # Prioritize bins where the item nearly fills the bin.  Adjust scaling.\n        fill_ratio = item / remaining_capacities\n        priorities[feasible_mask] += fill_ratio * 10  # Increased weight. Closer to 1.0 is much better.\n        \n        # Penalize larger waste, with a quadratic penalty. Avoid large waste at all costs.\n        priorities[feasible_mask] -= waste**2 * 0.5 # Adjusted the penalty. Squared waste has a stronger effect.\n\n        # Moderate penalty for almost empty bins\n        almost_empty_threshold = 0.1\n        almost_empty = (remaining_capacities - item) < (almost_empty_threshold * bins_remain_cap[feasible_mask])\n        priorities[feasible_mask][almost_empty] -= 2 #Adjust the penalty\n\n        # Bonus for perfect fit. This is rare, but very beneficial.\n        perfect_fit = waste == 0\n        priorities[feasible_mask][perfect_fit] += 5\n        \n\n    return priorities\n\n[Reflection]\nFeasibility checks, waste minimization, fill ratio prioritization, and perfect fit bonuses improve performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}