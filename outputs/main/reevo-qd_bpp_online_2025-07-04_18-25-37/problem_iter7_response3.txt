```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Reward for perfect fit
    perfect_fit_bonus = 10
    priorities[bins_remain_cap == item] += perfect_fit_bonus

    # Remaining Capacity Utilization Reward
    utilization_weight = 2
    remaining_ratio = (bins_remain_cap - item) / bins_remain_cap
    remaining_ratio[bins_remain_cap < item] = 1 # Avoid nan/inf
    priorities[bins_remain_cap >= item] += (1 - remaining_ratio[bins_remain_cap >= item]) * utilization_weight

    # Waste Penalty
    waste_penalty_weight = 3
    waste = bins_remain_cap - item
    waste[bins_remain_cap < item] = 0
    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * waste_penalty_weight

    # Near-Full Bin Bonus
    near_full_threshold = 0.1
    near_full_bonus = 5
    remaining_capacity = bins_remain_cap - item
    near_full = (remaining_capacity > 0) & (remaining_capacity <= near_full_threshold)

    priorities[near_full] += near_full_bonus
    return priorities
```
