```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Remaining Capacity Utilization: Prefer bins that are more utilized after packing.
    future_remain_cap = bins_remain_cap - item
    future_utilization = 1 - (future_remain_cap / np.max(bins_remain_cap))
    future_utilization[infeasible_mask] = -np.inf

    # Waste: Minimize waste, but with diminishing returns for very small waste.
    waste = bins_remain_cap - item
    waste[infeasible_mask] = np.inf
    waste_penalty = np.clip(waste * 2, 0, 5)  # Cap penalty to prevent it from dominating.
    priorities -= waste_penalty

    # Efficiency: Reward higher utilization after packing.
    efficiency = item / bins_remain_cap
    efficiency[infeasible_mask] = 0
    priorities += efficiency * 3

    # Threshold: avoid bins with small capacities.
    capacity_threshold = 0.1
    small_capacity_mask = (bins_remain_cap - item) < capacity_threshold
    priorities[small_capacity_mask] -= 1 #Penalize small capacity.

    # Bonus: nearly full bin.
    nearly_full_threshold = 0.05 # Percentage of bin capacity.
    nearly_full_bonus_mask = (waste >= 0) & (waste <= nearly_full_threshold * np.max(bins_remain_cap))
    priorities[nearly_full_bonus_mask] += 5

    # Larger bins tend to receive too much weight, give slight preference to smaller bins.
    priorities += (1 - bins_remain_cap / np.max(bins_remain_cap)) * 0.5

    return priorities
```
