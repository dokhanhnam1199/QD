{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Remaining Capacity Utilization: Prefer bins that are more utilized.\n    # If we put the item in the bin, what will be the fill ratio?\n    # future_fill_ratios = (bins_remain_cap - item) / bins_remain_cap\n\n    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.\n    capacity_threshold = 0.1  # Tune this hyperparameter\n    priorities[bins_remain_cap - item < capacity_threshold] -= 1  # or another penalty, like inf\n\n    # Calculate waste: We want to minimize the waste\n    waste = bins_remain_cap - item\n    waste[bins_remain_cap < item] = np.inf #Invalid bins should have infinite waste\n\n    # Calculate the efficiency: higher is better\n    efficiency = item / (bins_remain_cap)\n    efficiency[bins_remain_cap < item] = 0 #invalid ratios\n\n    # Prioritize bins where the item nearly fills the bin, but doesn't overflow\n    # The closer to zero `waste` is (but greater or equal than zero), the better\n    valid_bins = bins_remain_cap >= item\n    priorities[valid_bins] += (1 - waste[valid_bins] / bins_remain_cap[valid_bins]) * 5\n\n    # Penalize larger waste, favor smaller waste.  Scale the penalty based on item size. A waste of 0.1 is more significant\n    # when the item size is also 0.1, compared to when the item size is 0.9.\n    priorities[valid_bins] -= waste[valid_bins] * 2 * item\n\n    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.\n    priorities[valid_bins] += efficiency[valid_bins] * 3\n\n    # Add a bonus for filling the bin almost exactly.  This can help close bins.\n    almost_full_threshold = 0.05  #percent full\n    almost_full = (waste >= 0) & (waste <= bins_remain_cap * almost_full_threshold)\n\n    priorities[almost_full] += 5 #Significant bonus for almost full\n\n    return priorities\n\n[Reflection]\nThe better code uses feasibility checks, waste minimization, efficiency reward, and near-full bin bonuses for improved performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}