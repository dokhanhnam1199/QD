```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Initialize feasible bins
    feasible_bins = bins_remain_cap >= item

    # 1. Remaining Capacity Utilization: Prefer bins that are more utilized.
    # If we put the item in the bin, what will be the fill ratio?
    # future_fill_ratios = (bins_remain_cap - item) / bins_remain_cap

    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.
    capacity_threshold = 0.1  # Tune this hyperparameter
    priorities[bins_remain_cap - item < capacity_threshold] -= 10  # Large penalty

    # Calculate waste: We want to minimize the waste
    waste = bins_remain_cap - item

    # Calculate the efficiency: higher is better
    efficiency = item / (bins_remain_cap)
    efficiency[~feasible_bins] = 0  # invalid ratios

    # Prioritize bins where the item nearly fills the bin, but doesn't overflow
    # The closer to zero `waste` is (but greater or equal than zero), the better
    priorities[feasible_bins] += (1 - waste[feasible_bins] / bins_remain_cap[feasible_bins]) * 5

    # Penalize larger waste, favor smaller waste. Use a different penalty factor
    waste_penalty_factor = 2
    priorities[feasible_bins] -= waste[feasible_bins] * waste_penalty_factor

    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin. Use a different reward factor.
    efficiency_reward_factor = 3
    priorities[feasible_bins] += efficiency[feasible_bins] * efficiency_reward_factor

    # Add a small bonus for almost full bins before adding an item
    almost_full_threshold = 0.9
    almost_full_bins = bins_remain_cap / np.max(bins_remain_cap) > almost_full_threshold
    priorities[almost_full_bins & feasible_bins] += 1 # small bonus for almost full bins

    # Add a bonus for the fullest feasible bin
    if np.any(feasible_bins):
        best_bin_index = np.argmax(bins_remain_cap[feasible_bins])
        indices = np.where(feasible_bins)[0]
        best_bin_index = indices[best_bin_index]

        priorities[best_bin_index] += 2

    return priorities
```
