```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Perfect fit bonus
    perfect_fit_bonus = 10
    priorities[bins_remain_cap == item] += perfect_fit_bonus

    # Remaining Capacity Utilization: Prefer bins that are more utilized.
    # If we put the item in the bin, what will be the fill ratio?
    # future_fill_ratios = (bins_remain_cap - item) / bins_remain_cap # Not directly used, influences waste

    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.
    capacity_threshold = 0.1  # Tune this hyperparameter
    near_empty_penalty = 5
    priorities[(bins_remain_cap >= item) & (bins_remain_cap - item < capacity_threshold)] -= near_empty_penalty

    # Calculate waste: We want to minimize the waste
    waste = bins_remain_cap - item
    waste[bins_remain_cap < item] = np.inf #invalidate ratios

    # Calculate the efficiency: higher is better
    efficiency = item / bins_remain_cap
    efficiency[bins_remain_cap < item] = 0  # invalid ratios

    # Prioritize bins where the item nearly fills the bin, but doesn't overflow
    # The closer to zero `waste` is (but greater or equal than zero), the better
    near_full_reward_scale = 7
    priorities[bins_remain_cap >= item] += (1 - waste[bins_remain_cap >= item] / bins_remain_cap[bins_remain_cap >= item]) * near_full_reward_scale

    # Penalize larger waste, favor smaller waste.
    waste_penalty_scale = 3
    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * waste_penalty_scale

    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.
    efficiency_reward_scale = 4
    priorities[bins_remain_cap >= item] += efficiency[bins_remain_cap >= item] * efficiency_reward_scale

    return priorities
```
