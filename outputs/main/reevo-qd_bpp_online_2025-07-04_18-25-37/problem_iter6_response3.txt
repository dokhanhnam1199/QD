```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Utilization Reward: Favor bins that will be highly utilized after packing the item.
    # Scale the reward based on item size relative to the bin capacity
    utilization = (item / bins_remain_cap)
    utilization[bins_remain_cap < item] = 0

    utilization_threshold_high = 0.7
    utilization_threshold_low = 0.3

    priorities[bins_remain_cap >= item] += np.where(utilization[bins_remain_cap >= item] >= utilization_threshold_high, utilization[bins_remain_cap >= item] * 15, 0)
    priorities[bins_remain_cap >= item] += np.where((utilization[bins_remain_cap >= item] < utilization_threshold_high) & (utilization[bins_remain_cap >= item] >= utilization_threshold_low), utilization[bins_remain_cap >= item] * 7, 0)


    # Waste Penalty: Penalize bins that will have very little remaining capacity.
    waste = bins_remain_cap - item
    waste[bins_remain_cap < item] = np.inf
    waste_threshold_small = 0.1  # Tune this hyperparameter
    waste_threshold_large = 0.5

    priorities[bins_remain_cap >= item] -= np.where(waste[bins_remain_cap >= item] < waste_threshold_small, (waste_threshold_small - waste[bins_remain_cap >= item]) * 20, 0)

    # Moderate Waste Penalty: Penalize larger wastes, but not as strongly as near-empty bins.
    priorities[bins_remain_cap >= item] -= np.where((waste[bins_remain_cap >= item] >= waste_threshold_small) & (waste[bins_remain_cap >= item] <= waste_threshold_large), waste[bins_remain_cap >= item] * 5, 0)

    # Capacity Proximity Bonus: Favor bins where the item nearly fills the remaining capacity.
    proximity_threshold = 0.05  # Tune this hyperparameter. How close to full is "nearly full"?
    priorities[bins_remain_cap >= item] += np.where((waste[bins_remain_cap >= item] >= 0) & (waste[bins_remain_cap >= item] <= proximity_threshold), 12, 0)

    # If there is only one bin where the item fits, give it a high priority
    feasible_bins = bins_remain_cap >= item
    if np.sum(feasible_bins) == 1:
        priorities[feasible_bins] += 50

    return priorities
```
