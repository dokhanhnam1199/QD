[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 11.60964047443681,
    "mi": 94.04446327225541,
    "token_count": 47.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response0.txt_stdout.txt",
    "code_path": "problem_iter1_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # 1. Remaining Capacity Utilization: Prefer bins that are more utilized.\n    # If we put the item in the bin, what will be the fill ratio?\n    future_fill_ratios = (bins_remain_cap - item) / bins_remain_cap\n\n    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.\n    capacity_threshold = 0.1  # Tune this hyperparameter\n    priorities[bins_remain_cap - item < capacity_threshold] -= 1  # or another penalty, like inf\n\n    # Calculate waste: We want to minimize the waste\n    waste = bins_remain_cap - item\n\n    # Calculate the efficiency: higher is better\n    efficiency = item / (bins_remain_cap)\n    efficiency[bins_remain_cap < item] = 0 #invalid ratios\n\n    # Prioritize bins where the item nearly fills the bin, but doesn't overflow\n    # The closer to zero `waste` is (but greater or equal than zero), the better\n    priorities[bins_remain_cap >= item] += (1 - waste[bins_remain_cap >= item] / bins_remain_cap[bins_remain_cap >= item]) * 5\n\n    # Penalize larger waste, favor smaller waste.\n    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * 2\n\n    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.\n    priorities[bins_remain_cap >= item] += efficiency[bins_remain_cap >= item] * 3\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 106.19818783608963,
    "mi": 83.50586216595873,
    "token_count": 118.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response2.txt_stdout.txt",
    "code_path": "problem_iter2_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Remaining Capacity Utilization and Waste Minimization:\n    feasible_mask = ~infeasible_mask\n    remaining_capacities = bins_remain_cap[feasible_mask]\n    \n    if remaining_capacities.size > 0:\n        waste = remaining_capacities - item\n        \n        # Prioritize bins where the item nearly fills the bin.  Adjust scaling.\n        fill_ratio = item / remaining_capacities\n        priorities[feasible_mask] += fill_ratio * 10  # Increased weight. Closer to 1.0 is much better.\n        \n        # Penalize larger waste, with a quadratic penalty. Avoid large waste at all costs.\n        priorities[feasible_mask] -= waste**2 * 0.5 # Adjusted the penalty. Squared waste has a stronger effect.\n\n        # Moderate penalty for almost empty bins\n        almost_empty_threshold = 0.1\n        almost_empty = (remaining_capacities - item) < (almost_empty_threshold * bins_remain_cap[feasible_mask])\n        priorities[feasible_mask][almost_empty] -= 2 #Adjust the penalty\n\n        # Bonus for perfect fit. This is rare, but very beneficial.\n        perfect_fit = waste == 0\n        priorities[feasible_mask][perfect_fit] += 5\n        \n\n    return priorities",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 15.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 482.80933123680984,
    "mi": 67.9593221008151,
    "token_count": 240.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response2.txt_stdout.txt",
    "code_path": "problem_iter3_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Utilization Reward: Favor bins that will be highly utilized after packing the item.\n    future_utilization = (bins_remain_cap - item) / bins_remain_cap\n    future_utilization[bins_remain_cap < item] = 0  # Handle invalid cases\n\n    # Reward high utilization more strongly\n    utilization_threshold = 0.7  # Tune this hyperparameter\n    priorities[bins_remain_cap >= item] += np.where(future_utilization[bins_remain_cap >= item] > utilization_threshold, future_utilization[bins_remain_cap >= item] * 10, future_utilization[bins_remain_cap >= item] * 5)\n\n    # Waste Penalty: Penalize bins that will have very little remaining capacity.\n    waste = bins_remain_cap - item\n    waste_threshold = 0.1  # Tune this hyperparameter\n    priorities[bins_remain_cap >= item] -= np.where(waste[bins_remain_cap >= item] < waste_threshold, (waste_threshold - waste[bins_remain_cap >= item]) * 15, 0)\n\n    # Moderate Waste Penalty: Penalize larger wastes, but not as strongly as near-empty bins.\n    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * 2\n\n    # Capacity Proximity Bonus: Favor bins where the item nearly fills the remaining capacity.\n    proximity_threshold = 0.05  # Tune this hyperparameter. How close to full is \"nearly full\"?\n    priorities[bins_remain_cap >= item] += np.where((waste[bins_remain_cap >= item] >= 0) & (waste[bins_remain_cap >= item] <= proximity_threshold), 10, 0)\n\n    return priorities",
    "response_id": 2,
    "obj": 4.048663741523748,
    "SLOC": 16.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 406.9970273000272,
    "mi": 70.07262178105967,
    "token_count": 230.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response0.txt_stdout.txt",
    "code_path": "problem_iter4_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Remaining Capacity Utilization: Prefer bins that are more utilized.\n    # If we put the item in the bin, what will be the fill ratio?\n    # future_fill_ratios = (bins_remain_cap - item) / bins_remain_cap\n\n    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.\n    capacity_threshold = 0.1  # Tune this hyperparameter\n    priorities[bins_remain_cap - item < capacity_threshold] -= 1  # or another penalty, like inf\n\n    # Calculate waste: We want to minimize the waste\n    waste = bins_remain_cap - item\n    waste[bins_remain_cap < item] = np.inf #Invalid bins should have infinite waste\n\n    # Calculate the efficiency: higher is better\n    efficiency = item / (bins_remain_cap)\n    efficiency[bins_remain_cap < item] = 0 #invalid ratios\n\n    # Prioritize bins where the item nearly fills the bin, but doesn't overflow\n    # The closer to zero `waste` is (but greater or equal than zero), the better\n    valid_bins = bins_remain_cap >= item\n    priorities[valid_bins] += (1 - waste[valid_bins] / bins_remain_cap[valid_bins]) * 5\n\n    # Penalize larger waste, favor smaller waste.  Scale the penalty based on item size. A waste of 0.1 is more significant\n    # when the item size is also 0.1, compared to when the item size is 0.9.\n    priorities[valid_bins] -= waste[valid_bins] * 2 * item\n\n    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.\n    priorities[valid_bins] += efficiency[valid_bins] * 3\n\n    # Add a bonus for filling the bin almost exactly.  This can help close bins.\n    almost_full_threshold = 0.05  #percent full\n    almost_full = (waste >= 0) & (waste <= bins_remain_cap * almost_full_threshold)\n\n    priorities[almost_full] += 5 #Significant bonus for almost full\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 19.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 274.00602507644254,
    "mi": 76.60928870468743,
    "token_count": 235.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf\n\n    # Initialize waste and efficiency arrays for feasible bins\n    waste = np.zeros_like(bins_remain_cap, dtype=float)\n    efficiency = np.zeros_like(bins_remain_cap, dtype=float)\n    waste[feasible_bins] = bins_remain_cap[feasible_bins] - item\n    efficiency[feasible_bins] = item / bins_remain_cap[feasible_bins]\n    \n    # Define Hyperparameters for tuning\n    waste_penalty_factor = 2\n    efficiency_reward_factor = 3\n    near_full_reward_factor = 5\n    capacity_threshold = 0.1\n    small_capacity_penalty = 1\n    \n    # Encourage near-full bins and minimize waste\n    near_full_reward = (1 - waste[feasible_bins] / bins_remain_cap[feasible_bins]) * near_full_reward_factor\n    priorities[feasible_bins] += near_full_reward\n    \n    # Discourage larger waste values\n    priorities[feasible_bins] -= waste[feasible_bins] * waste_penalty_factor\n\n    # Reward efficiency (Higher utilization).\n    priorities[feasible_bins] += efficiency[feasible_bins] * efficiency_reward_factor\n    \n    # Penalize small remaining capacity to avoid creating nearly empty bins\n    small_capacity = (bins_remain_cap - item) < capacity_threshold\n    priorities[small_capacity & feasible_bins] -= small_capacity_penalty\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 24.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 340.0,
    "mi": 80.15679645752245,
    "token_count": 234.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response0.txt_stdout.txt",
    "code_path": "problem_iter6_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # Remaining Capacity Utilization: Prefer bins that are more utilized.\n\n    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.\n    capacity_threshold = 0.1\n    bins_below_threshold = (bins_remain_cap - item) < capacity_threshold\n    priorities[bins_below_threshold & ~infeasible_bins] -= 2\n\n    # Calculate waste: We want to minimize the waste\n    waste = bins_remain_cap - item\n    waste[infeasible_bins] = np.inf\n\n    # Calculate the efficiency: higher is better\n    efficiency = item / (bins_remain_cap)\n    efficiency[infeasible_bins] = 0\n\n    # Prioritize bins where the item nearly fills the bin, but doesn't overflow\n    valid_bins = ~infeasible_bins\n    priorities[valid_bins] += (1 - waste[valid_bins] / bins_remain_cap[valid_bins]) * 5\n\n    # Penalize larger waste, favor smaller waste. Scale the penalty based on item size. A waste of 0.1 is more significant\n    # when the item size is also 0.1, compared to when the item size is 0.9.\n    priorities[valid_bins] -= waste[valid_bins] * 2 * item\n\n    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.\n    priorities[valid_bins] += efficiency[valid_bins] * 3\n\n    # Add a bonus for filling the bin almost exactly. This can help close bins.\n    almost_full_threshold = 0.05\n    almost_full = (waste >= 0) & (waste <= bins_remain_cap * almost_full_threshold)\n\n    priorities[almost_full] += 5\n\n    # Bonus for bins that would be completely filled by this item\n    completely_full = waste == 0\n    priorities[completely_full] += 10  # Substantially larger bonus\n\n    # Consider the relative size of the item to the bin's capacity. Prefer bins where the item occupies a significant portion\n    relative_size = item / bins_remain_cap\n    priorities[valid_bins] += relative_size[valid_bins] * 2\n\n    # Diversification: Introduce a small amount of randomness to avoid getting stuck in local optima\n    priorities[valid_bins] += np.random.normal(0, 0.1, size=np.sum(valid_bins))\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 14.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 451.3217661561483,
    "mi": 63.25445489041203,
    "token_count": 218.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter7_response0.txt_stdout.txt",
    "code_path": "problem_iter7_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Utilization reward: Favor bins with higher utilization after adding the item\n    future_utilization = (bins_remain_cap - item) / 1.0  # Assuming bin capacity is 1.0\n    priorities[bins_remain_cap >= item] += future_utilization[bins_remain_cap >= item] * 2\n\n    # Waste penalty: Penalize bins that will have significant waste after adding the item\n    waste = bins_remain_cap - item\n    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * 3\n\n\n    # Near-full bonus: Reward bins that become nearly full after adding the item\n    near_full_threshold = 0.1\n    near_full_bonus = 5\n    priorities[(bins_remain_cap >= item) & (waste <= near_full_threshold) ] += near_full_bonus\n\n    # Perfect fit bonus: Give a huge bonus for perfect fits\n    perfect_fit_bonus = 10\n    priorities[(bins_remain_cap >= item) & (waste == 0)] += perfect_fit_bonus\n\n    # Avoid bins with near-zero future capacity\n    capacity_threshold = 0.05  # Further reduced for more aggression\n    priorities[bins_remain_cap - item < capacity_threshold] -= 10  # Increased penalty for near-empty bins\n\n    # Small bonus if space remains in bin after insertion\n    priorities[bins_remain_cap >= item] += 0.1\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 16.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 420.4323194961016,
    "mi": 78.33191157677904,
    "token_count": 198.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response1.txt_stdout.txt",
    "code_path": "problem_iter8_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Remaining Capacity Utilization and Waste Minimization:\n    feasible_mask = ~infeasible_mask\n    remaining_capacities = bins_remain_cap[feasible_mask]\n    \n    if remaining_capacities.size > 0:\n        waste = remaining_capacities - item\n        \n        # Prioritize bins where the item nearly fills the bin.  Adjust scaling.\n        fill_ratio = item / remaining_capacities\n        priorities[feasible_mask] += fill_ratio * 10  # Increased weight. Closer to 1.0 is much better.\n        \n        # Penalize larger waste, with a quadratic penalty. Avoid large waste at all costs.\n        priorities[feasible_mask] -= waste**2 * 0.5 # Adjusted the penalty. Squared waste has a stronger effect.\n\n        # Moderate penalty for almost empty bins\n        almost_empty_threshold = 0.1\n        almost_empty = (remaining_capacities - item) < (almost_empty_threshold * bins_remain_cap[feasible_mask])\n        priorities[feasible_mask][almost_empty] -= 2 #Adjust the penalty\n\n        # Bonus for perfect fit. This is rare, but very beneficial.\n        perfect_fit = waste == 0\n        priorities[feasible_mask][perfect_fit] += 5\n\n        #Prioritize bins with smallest remaining capacity\n        priorities[feasible_mask] += (1/remaining_capacities) *0.1\n\n        # Add a slight bias towards using bins that are already partially filled\n        # This can help prevent creating many almost-empty bins\n        already_filled_threshold = 0.9\n        already_filled_mask = remaining_capacities < already_filled_threshold * np.max(bins_remain_cap)\n\n        if np.any(already_filled_mask):\n            priorities[feasible_mask][already_filled_mask] += 0.5\n\n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 20.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 413.2872250533656,
    "mi": 78.21143089378184,
    "token_count": 232.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response0.txt_stdout.txt",
    "code_path": "problem_iter9_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Give -inf priority if the item doesn't fit\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Perfect Fit Bonus: If the item fits perfectly, give it a very high priority\n    perfect_fit_bonus = 100\n    is_perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[is_perfect_fit] += perfect_fit_bonus\n\n    # Remaining Capacity Utilization and Waste Minimization\n    waste = bins_remain_cap - item\n    # Penalize negative waste (item doesn't fit, should not happen given feasibility check but added for robustness)\n    waste[waste < 0] = 1000  # large penalty to avoid this scenario\n    utilization = item / bins_remain_cap\n    utilization[bins_remain_cap < item] = 0\n\n    # Prioritize smaller waste, higher utilization.\n    waste_penalty_factor = 2\n    utilization_reward_factor = 3\n    priorities[bins_remain_cap >= item] += (1 - waste[bins_remain_cap >= item] / bins_remain_cap[bins_remain_cap >= item]) * utilization_reward_factor - waste[bins_remain_cap >= item] * waste_penalty_factor\n\n    # Near Empty Penalty\n    near_empty_threshold = 0.1\n    near_empty_penalty = -5\n    future_remain_cap = bins_remain_cap - item\n    is_near_empty = future_remain_cap / bins_remain_cap > (1 - near_empty_threshold)\n    priorities[bins_remain_cap >= item] += np.where(is_near_empty[bins_remain_cap >= item], near_empty_penalty, 0)\n\n    # Near Full Reward\n    near_full_threshold = 0.9\n    near_full_reward = 5\n    future_utilization = (bins_remain_cap[bins_remain_cap >= item] - waste[bins_remain_cap >= item]) / bins_remain_cap[bins_remain_cap >= item]\n    is_near_full = future_utilization >= near_full_threshold\n    priorities[bins_remain_cap >= item] += np.where(is_near_full, near_full_reward, 0)\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 19.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 310.91078368816466,
    "mi": 81.0844842841375,
    "token_count": 195.0,
    "exec_success": true
  }
]