```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities # No feasible bins

    # 1. Remaining Capacity Utilization: Prefer bins that are more utilized.
    # If we put the item in the bin, what will be the fill ratio?
    future_remain_cap = bins_remain_cap[feasible_bins] - item
    future_fill_ratio = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]

    # Define Hyperparameters (tuned by experimentation)
    capacity_threshold = 0.1  # Below this remaining cap, apply penalty
    waste_penalty_factor = 2.0
    efficiency_reward_factor = 3.0
    near_full_reward_factor = 5.0
    small_capacity_penalty = 10.0

    # Penalize bins that result in very small remaining capacity
    priorities[feasible_bins][future_remain_cap < capacity_threshold] -= small_capacity_penalty

    # Waste Minimization and Reward Near-Full Bins:
    waste = bins_remain_cap[feasible_bins] - item
    normalized_waste = waste / bins_remain_cap[feasible_bins]  # Normalize waste to bin size

    # Reward bins with smaller normalized waste (closer to full)
    priorities[feasible_bins] += (1 - normalized_waste) * near_full_reward_factor

    # Penalize larger waste more strongly
    priorities[feasible_bins] -= waste * waste_penalty_factor

    # Efficiency Reward:
    efficiency = item / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] += efficiency * efficiency_reward_factor

    # Special Case: Handling Empty Bins Favorably
    empty_bin_bonus = 1.5 # tune bonus
    priorities[bins_remain_cap == np.max(bins_remain_cap)] += empty_bin_bonus
    return priorities
```
