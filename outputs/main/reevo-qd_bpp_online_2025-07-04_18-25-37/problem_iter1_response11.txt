```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic: give high priority to bins that can accommodate the item
    # but don't have too much space left over.  Encourages filling bins more completely.
    
    can_fit = bins_remain_cap >= item
    
    # Give a high initial priority to bins that can fit.
    priorities[can_fit] = 1.0
    
    # Adjust priority based on remaining capacity after adding the item
    remaining_after_fit = bins_remain_cap[can_fit] - item
    
    # Reward bins that fit the item relatively tightly.
    # Use a reciprocal to penalize very large remaining space. Adding a small epsilon to avoid division by zero
    priorities[can_fit] += 1.0 / (remaining_after_fit + 0.01)

    # Add a bonus if the bin is nearly full before adding the item, promoting complete fills.
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= item * 1.2 ) #Tolerate some overflow due to approximation errors
    priorities[nearly_full] += 0.5 

    # Penalize bins that can't fit (set priority to a very low value)
    priorities[~can_fit] = -1e9
    
    return priorities
```
