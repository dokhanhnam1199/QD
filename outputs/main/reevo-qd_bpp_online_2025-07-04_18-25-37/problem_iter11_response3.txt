```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Utilization-based Priority:
    future_fill_levels = bins_remain_cap - item
    utilization = (bins_remain_cap - future_fill_levels) / bins_remain_cap
    utilization[bins_remain_cap < item] = 0  # Set utilization to 0 for infeasible bins

    # Reward high utilization, scaled
    priorities += utilization * 5

    # Waste Minimization: Penalize bins that would result in large waste
    waste = bins_remain_cap - item
    waste[bins_remain_cap < item] = 0
    priorities -= waste * 2 # Penalize waste

    # Bonus for Near-Full Bins:
    near_full_threshold = 0.1
    near_full_bonus = 5
    is_near_full = (waste >= 0) & (waste <= bins_remain_cap * near_full_threshold)
    priorities[is_near_full] += near_full_bonus

    # Penalty for Near-Empty Bins AFTER Packing:
    near_empty_threshold = 0.2
    near_empty_penalty = 3
    is_near_empty = (future_fill_levels > 0) & (future_fill_levels <= bins_remain_cap * near_empty_threshold)
    priorities[is_near_empty] -= near_empty_penalty

    # Perfect Fit Bonus:
    perfect_fit_bonus = 10
    is_perfect_fit = waste == 0
    priorities[is_perfect_fit] += perfect_fit_bonus

    return priorities
```
