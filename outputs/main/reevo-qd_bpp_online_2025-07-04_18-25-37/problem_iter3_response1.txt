```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Utilization Reward & Waste Penalty
    remaining_capacity_after_fit = bins_remain_cap - item
    fill_ratio_after_fit = (bins_remain_cap - item) / bins_remain_cap
    
    # Thresholds (tuned)
    near_full_threshold = 0.9
    near_empty_threshold = 0.1

    # Reward high utilization: approaching full but feasible
    priorities[bins_remain_cap >= item] += (fill_ratio_after_fit[bins_remain_cap >= item] > near_full_threshold) * 10

    # Penalize near-empty bins after item is added
    priorities[bins_remain_cap >= item] -= (remaining_capacity_after_fit[bins_remain_cap >= item] / bins_remain_cap[bins_remain_cap >= item] > near_empty_threshold) * 5

    # Soft Reward based on fill ratio (broader utilization consideration)
    priorities[bins_remain_cap >= item] += fill_ratio_after_fit[bins_remain_cap >= item] * 2

    # Waste minimization (scaled)
    waste = np.maximum(0, remaining_capacity_after_fit)  # Ensure waste isn't negative
    priorities[bins_remain_cap >= item] -= (waste[bins_remain_cap >= item] / np.max(bins_remain_cap)) * 3 # Normalize waste

    return priorities
```
