```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Remaining Capacity Utilization: Prefer bins that are more utilized.
    # If we put the item in the bin, what will be the fill ratio?
    # future_fill_ratios = (bins_remain_cap - item) / bins_remain_cap

    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.
    capacity_threshold = 0.1  # Tune this hyperparameter
    priorities[bins_remain_cap - item < capacity_threshold] -= 10  # Increased penalty

    # Calculate waste: We want to minimize the waste
    waste = bins_remain_cap - item

    # Calculate the efficiency: higher is better
    efficiency = item / (bins_remain_cap)
    efficiency[bins_remain_cap < item] = 0  # invalid ratios

    # Prioritize bins where the item nearly fills the bin, but doesn't overflow
    # The closer to zero `waste` is (but greater or equal than zero), the better
    # Use a scaled exponential to strongly prefer near-perfect fits
    fit_score = np.exp(-waste[bins_remain_cap >= item] / (0.1 * np.mean(bins_remain_cap))) if np.any(bins_remain_cap >= item) else np.array([]) # Scale waste by average bin size

    priorities[bins_remain_cap >= item] += fit_score * 10  # Increased reward for good fit

    # Penalize larger waste, favor smaller waste.  Use quadratic penalty for larger wastes
    waste_penalty = (waste[bins_remain_cap >= item] / np.mean(bins_remain_cap))**2 if np.any(bins_remain_cap >= item) else np.array([])  # Scale waste by average bin size and square it
    priorities[bins_remain_cap >= item] -= waste_penalty * 5 # Increased waste penalty

    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.
    priorities[bins_remain_cap >= item] += efficiency[bins_remain_cap >= item] * 3

    # Bonus for almost full bins *before* placing the item
    almost_full_bonus = (bins_remain_cap >= item) * (bins_remain_cap > (0.9 * np.max(bins_remain_cap)))
    priorities += almost_full_bonus * 2

    return priorities
```
