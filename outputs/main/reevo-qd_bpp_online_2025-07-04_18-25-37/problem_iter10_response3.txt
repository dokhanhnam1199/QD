```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Utilization reward: Favor bins with higher utilization after adding the item
    # This encourages packing items into bins that will be relatively full
    future_utilization = (bins_remain_cap - item)
    priorities[bins_remain_cap >= item] += future_utilization * 1.5

    # Waste penalty: Penalize bins that will have significant waste after adding the item
    # Discourages leaving large empty spaces in bins
    waste = bins_remain_cap - item
    priorities[bins_remain_cap >= item] -= waste * 2.5

    # Near-full bonus: Reward bins that become nearly full after adding the item
    # This helps to fill bins completely, reducing the overall number of bins used
    near_full_threshold = 0.15  # Tuned threshold
    near_full_bonus = 6
    priorities[(bins_remain_cap >= item) & (waste <= near_full_threshold)] += near_full_bonus

    # Perfect fit bonus: Give a huge bonus for perfect fits
    # Always prioritize perfect fits to avoid fragmentation
    perfect_fit_bonus = 12
    priorities[(bins_remain_cap >= item) & (waste == 0)] += perfect_fit_bonus

    # Avoid bins with near-zero future capacity. More aggressively penalize these.
    capacity_threshold = 0.075
    priorities[bins_remain_cap - item < capacity_threshold] -= 15

    # Small penalty for large remaining space
    large_space_threshold = 0.75
    priorities[(bins_remain_cap >= item) & (bins_remain_cap - item > large_space_threshold)] -= 1

    return priorities
```
