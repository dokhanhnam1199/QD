```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Remaining Capacity Utilization and Waste Minimization:
    feasible_mask = ~infeasible_mask
    remaining_capacities = bins_remain_cap[feasible_mask]
    
    if remaining_capacities.size > 0:
        waste = remaining_capacities - item
        
        # Prioritize bins where the item nearly fills the bin.  Adjust scaling.
        fill_ratio = item / remaining_capacities
        priorities[feasible_mask] += fill_ratio * 15  # Increased weight. Closer to 1.0 is much better.

        # Penalize larger waste, with a quadratic penalty. Avoid large waste at all costs.  Increased weight on the penalty
        priorities[feasible_mask] -= waste**2 * 1 # Adjusted the penalty. Squared waste has a stronger effect.

        # Moderate penalty for almost empty bins
        almost_empty_threshold = 0.2 # Adjust this threshold
        almost_empty = (remaining_capacities - item) > (remaining_capacities * (1-almost_empty_threshold)) # Define what is almost empty
        priorities[feasible_mask][almost_empty] -= 3 #Adjust the penalty, make it higher

        # Bonus for perfect fit. This is rare, but very beneficial.
        perfect_fit = np.abs(waste) < 1e-6 # Use a small tolerance for perfect fit
        priorities[feasible_mask][perfect_fit] += 10 # Increased bonus

        # Bonus for near perfect fit.
        near_perfect_fit_threshold = 0.1 * item  # Define near perfect fit based on item size
        near_perfect_fit = (waste > 0) & (waste <= near_perfect_fit_threshold)
        priorities[feasible_mask][near_perfect_fit] += 5 # Add a smaller bonus for near perfect fit

    return priorities
```
