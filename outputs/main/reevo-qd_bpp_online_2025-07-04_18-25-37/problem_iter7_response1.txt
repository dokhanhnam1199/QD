```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Reward perfect fits highly
    perfect_fit_bonus = 10
    is_perfect_fit = bins_remain_cap == item
    priorities[is_perfect_fit] += perfect_fit_bonus

    # Utilization reward: reward bins with higher utilization after placing the item
    utilization_weight = 5
    future_utilization = (bins_remain_cap - item) / bins_remain_cap
    future_utilization[bins_remain_cap < item] = -1 # Mark invalid
    priorities[bins_remain_cap >= item] += (1- future_utilization[bins_remain_cap >= item]) * utilization_weight

    # Near-full bonus: give a bonus if the bin is almost full after adding item
    near_full_threshold = 0.1 # Tune this parameter
    near_full_bonus = 7
    is_near_full = (bins_remain_cap >= item) & ((bins_remain_cap - item) / bins_remain_cap <= near_full_threshold)
    priorities[is_near_full] += near_full_bonus

    # Waste penalty: penalize bins that would result in higher waste
    waste_penalty_weight = 3
    waste = bins_remain_cap - item
    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * waste_penalty_weight

    # Small remaining capacity penalty
    small_capacity_threshold = 0.05
    small_capacity_penalty = 5
    is_small_capacity = (bins_remain_cap - item) < small_capacity_threshold
    priorities[is_small_capacity & (bins_remain_cap >= item)] -= small_capacity_penalty

    return priorities
```
