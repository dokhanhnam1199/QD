```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Utilization reward: Favor bins with higher utilization after adding the item
    # Scale the reward based on the item size. Smaller items should prioritize high utilization more.
    future_utilization = (bins_remain_cap - item) / 1.0  # Assuming bin capacity is 1.0
    priorities[bins_remain_cap >= item] += future_utilization[bins_remain_cap >= item] * (2 + item)


    # Waste penalty: Penalize bins that will have significant waste after adding the item
    waste = bins_remain_cap - item
    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * (3 - item) #Scale the waste penalty inversely to item size

    # Near-full bonus: Reward bins that become nearly full after adding the item
    near_full_threshold = 0.1
    near_full_bonus = 5
    priorities[(bins_remain_cap >= item) & (waste <= near_full_threshold) ] += near_full_bonus

    # Perfect fit bonus: Give a huge bonus for perfect fits
    perfect_fit_bonus = 10
    priorities[(bins_remain_cap >= item) & (waste == 0)] += perfect_fit_bonus

    # Avoid bins with near-zero future capacity. Make this penalty more severe.
    capacity_threshold = 0.05  # Further reduced for more aggression
    priorities[bins_remain_cap - item < capacity_threshold] -= 20  # Increased penalty for near-empty bins

    # Introduce a small penalty for bins that are already almost full but the item doesn't cause a perfect fit.  Avoids premature commitment.
    almost_full_threshold = 0.2
    priorities[(bins_remain_cap > item) & (bins_remain_cap < almost_full_threshold)] -= 2

    # Small bonus if space remains in bin after insertion, scale by remaining capacity
    priorities[bins_remain_cap >= item] += 0.1 * (bins_remain_cap[bins_remain_cap >= item]-item)


    # Add a slight random noise to break ties. This can sometimes help escape local optima.
    priorities[bins_remain_cap >= item] += np.random.normal(0, 0.01, size=np.sum(bins_remain_cap >= item))

    return priorities
```
