```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Remaining Capacity Utilization: Prefer bins that are more utilized.
    # If we put the item in the bin, what will be the fill ratio?

    # Avoid bins with near-zero future capacity by penalizing bins where the future capacity goes below a threshold.
    capacity_threshold = 0.1  # Tune this hyperparameter
    low_capacity_mask = (bins_remain_cap - item) < capacity_threshold
    priorities[low_capacity_mask & ~infeasible_mask] -= 1

    # Calculate waste: We want to minimize the waste
    waste = bins_remain_cap - item
    waste[infeasible_mask] = np.inf #Invalid bins should have infinite waste

    # Calculate the efficiency: higher is better
    efficiency = item / (bins_remain_cap)
    efficiency[infeasible_mask] = 0 #invalid ratios

    # Prioritize bins where the item nearly fills the bin, but doesn't overflow
    # The closer to zero `waste` is (but greater or equal than zero), the better
    valid_mask = ~infeasible_mask
    priorities[valid_mask] += (1 - waste[valid_mask] / bins_remain_cap[valid_mask]) * 5

    # Penalize larger waste, favor smaller waste.  Scale the penalty based on item size. A waste of 0.1 is more significant
    # when the item size is also 0.1, compared to when the item size is 0.9.
    priorities[valid_mask] -= waste[valid_mask] * 2 * item

    # Reward efficiency. Favor adding an item to a bin if it leads to higher utilization of that bin.
    priorities[valid_mask] += efficiency[valid_mask] * 3

    # Add a bonus for filling the bin almost exactly.  This can help close bins.
    almost_full_threshold = 0.05  #percent full
    almost_full_mask = (waste >= 0) & (waste <= bins_remain_cap * almost_full_threshold)

    priorities[almost_full_mask] += 5 #Significant bonus for almost full

    # Introduce a tie-breaking mechanism.  Preferentially select bins with lower original index.
    # This helps with determinism and can subtly improve packing by using earlier bins first.
    priorities -= np.arange(len(bins_remain_cap)) * 0.0001 # Small penalty based on index

    return priorities
```
