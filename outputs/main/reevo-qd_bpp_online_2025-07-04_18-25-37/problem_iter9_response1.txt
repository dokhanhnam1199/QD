```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    # Perfect Fit Bonus
    perfect_fit = bins_remain_cap == item
    priorities[perfect_fit] = np.inf  # Max priority for perfect fit

    # Remaining Capacity Utilization & Waste Minimization (for feasible bins)
    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item

        #Prioritize smaller waste.
        priorities[feasible_bins] -= waste * 2

        # Efficiency: reward bins where item fills a significant portion
        efficiency = item / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] += efficiency * 3

        # Reward near-full bins, but avoid almost-empty bins
        future_capacity = bins_remain_cap[feasible_bins] - item
        almost_empty_penalty = -5
        near_full_bonus = 2

        capacity_threshold_low = 0.1 # Avoid almost empty
        capacity_threshold_high = 0.2 #reward filling bins beyond this level

        priorities[feasible_bins][future_capacity < capacity_threshold_low] += almost_empty_penalty

        utilization = 1 - (future_capacity / bins_remain_cap[feasible_bins])

        priorities[feasible_bins][utilization > (1 - capacity_threshold_high)] += near_full_bonus

    return priorities
```
