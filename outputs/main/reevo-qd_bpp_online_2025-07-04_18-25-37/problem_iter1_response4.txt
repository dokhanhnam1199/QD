```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Basic idea: prioritize bins with tighter fit, but penalize almost full bins

            # Fit ratio: how much of the bin is filled by this item
            fit_ratio = item / cap

            # Remaining capacity ratio: how much space is left after adding the item
            remaining_ratio = (cap - item) / cap

            # Give bins that can fit the item a score based on fit and remaining ratios
            # Higher fit ratio is better, but very low remaining ratio isn't
            priorities[i] = fit_ratio - (remaining_ratio**2)
        else:
            # Cannot fit, set to negative infinity so this bin will never be picked
            priorities[i] = -np.inf

    return priorities
```
