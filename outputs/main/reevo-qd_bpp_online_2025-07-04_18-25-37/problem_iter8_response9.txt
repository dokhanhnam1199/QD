```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    #Remaining Capacity Utilization and near-zero avoidance
    capacity_threshold = 0.1
    near_zero = bins_remain_cap - item < capacity_threshold
    priorities[near_zero & ~infeasible_bins] -= 2 #Slight penalty, but only if feasible.

    # Calculate waste and efficiency for feasible bins only
    feasible_bins = ~infeasible_bins
    waste = bins_remain_cap[feasible_bins] - item
    efficiency = item / bins_remain_cap[feasible_bins]

    # Minimize waste, reward efficiency
    priorities[feasible_bins] += (1 - waste / bins_remain_cap[feasible_bins]) * 5 # Waste minimization
    priorities[feasible_bins] += efficiency * 3  # Efficiency reward

    # Bonus for filling the bin almost exactly.
    almost_full_threshold = 0.05
    almost_full = (waste >= 0) & (waste <= bins_remain_cap[feasible_bins] * almost_full_threshold)
    priorities[feasible_bins][almost_full] += 7  # Significant bonus for almost full

    # Dynamic adjustment: Prefer bins with remaining capacity closer to item size.
    capacity_difference = np.abs(bins_remain_cap[feasible_bins] - item)
    priorities[feasible_bins] -= capacity_difference * 0.5 # Penalty based on difference

    #If all bins are infeasible, give the least infeasible one some chance
    if np.all(infeasible_bins):
        priorities = - (item - bins_remain_cap) # Try to put item in smallest waste

    return priorities
```
