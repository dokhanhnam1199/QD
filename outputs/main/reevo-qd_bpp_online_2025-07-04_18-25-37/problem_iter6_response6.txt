```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Utilization Reward: Favor bins that will be highly utilized after packing the item.
    future_utilization = (bins_remain_cap - item) / bins_remain_cap
    future_utilization[bins_remain_cap < item] = 0  # Handle invalid cases

    # Reward high utilization more strongly, with sigmoid scaling
    utilization_threshold_low = 0.6  # Tune this hyperparameter
    utilization_threshold_high = 0.9  # Tune this hyperparameter
    utilization_scale = 10

    utilization_priority = utilization_scale / (1 + np.exp(-10 * (future_utilization - utilization_threshold_low))) - utilization_scale / (1 + np.exp(-10 * (utilization_threshold_high - utilization_threshold_low)))
    utilization_priority[bins_remain_cap < item] = 0 #set priorities of infeasible bins to zero
    priorities += utilization_priority

    # Waste Penalty: Penalize bins that will have very little remaining capacity. Use exponential penalty.
    waste = bins_remain_cap - item
    waste_threshold = 0.1  # Tune this hyperparameter
    waste_penalty_scale = 15
    waste_priority = np.zeros_like(bins_remain_cap, dtype=float)
    waste_priority[(bins_remain_cap >= item) & (waste < waste_threshold)] = -waste_penalty_scale * np.exp(-waste[(bins_remain_cap >= item) & (waste < waste_threshold)] / waste_threshold)
    priorities += waste_priority


    # Moderate Waste Penalty: Penalize larger wastes, but not as strongly as near-empty bins.
    priorities[bins_remain_cap >= item] -= waste[bins_remain_cap >= item] * 2

    # Capacity Proximity Bonus: Favor bins where the item nearly fills the remaining capacity. Use gaussian peak.
    proximity_threshold = 0.05  # Tune this hyperparameter. How close to full is "nearly full"?
    proximity_bonus_scale = 10
    proximity_priority = np.zeros_like(bins_remain_cap, dtype=float)
    proximity_priority[(bins_remain_cap >= item) & (waste >= 0) & (waste <= proximity_threshold)] = proximity_bonus_scale * np.exp(-0.5 * ((waste[(bins_remain_cap >= item) & (waste >= 0) & (waste <= proximity_threshold)] / proximity_threshold)**2))

    priorities += proximity_priority
    return priorities
```
