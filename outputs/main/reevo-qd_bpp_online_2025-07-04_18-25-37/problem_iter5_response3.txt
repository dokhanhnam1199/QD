```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    # Prioritize bins where item fits
    if np.any(feasible_bins):
        # Calculate waste: We want to minimize the waste
        waste = bins_remain_cap[feasible_bins] - item

        # Calculate the fill ratio *after* adding the item
        future_fill_ratio = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]

        # Reward bins that will be nearly full, but not overfilled.
        near_full_reward = np.exp(-5 * waste / item) # Tunable parameter 5. Exponential decay near zero

        # Penalize small remaining capacity after packing (tuning: capacity threshold)
        capacity_threshold = 0.1
        small_capacity_penalty = -10 * (future_fill_ratio < capacity_threshold) # Tunable parameter 10

        # Encourage higher utilization, penalize waste
        utilization_score = (1 - waste / bins_remain_cap[feasible_bins])  # Higher is better

        # Combine the scores: weighted sum of rewards and penalties. Tunable weights.
        final_score = 2 * near_full_reward + utilization_score + small_capacity_penalty # Tunable params 2,1

        priorities[feasible_bins] = final_score

    return priorities
```
