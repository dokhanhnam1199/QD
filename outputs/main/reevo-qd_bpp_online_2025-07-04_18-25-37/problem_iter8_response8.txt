```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority if the item doesn't fit
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Remaining Capacity Utilization
    future_remaining_capacity = bins_remain_cap - item
    
    #Avoid bins with too small of remaining capacity
    capacity_threshold = 0.1
    small_capacity_bins = future_remaining_capacity < capacity_threshold
    priorities[small_capacity_bins] -= 1

    # Waste Minimization:
    waste = np.maximum(0, future_remaining_capacity) # Ensure waste isn't negative

    # Efficiency Reward:
    efficiency = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = ~infeasible_bins
    efficiency[feasible_bins] = item / bins_remain_cap[feasible_bins]
    
    # Combine heuristics - weighted sum:
    priorities[feasible_bins] += (1 - waste[feasible_bins] / bins_remain_cap[feasible_bins]) * 5  # Prioritize low waste
    priorities[feasible_bins] -= waste[feasible_bins] * 2  # Penalize waste
    priorities[feasible_bins] += efficiency[feasible_bins] * 3  # Reward efficiency
    
    #Bonus for near fit:
    near_fit_threshold = 0.2
    near_fit_bins = (waste > 0) & (waste < near_fit_threshold) & feasible_bins #waste is positive and smaller than threshold
    priorities[near_fit_bins] += 2
    

    return priorities
```
