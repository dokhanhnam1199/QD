```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity utilization, smallest remaining capacity, and adaptive penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        # Capacity Utilization
        utilization_ratio = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += (1 - utilization_ratio)**2

        # Smallest Remaining Capacity
        min_remaining = np.min(bins_remain_cap[potential_bins])
        priorities[bins_remain_cap == min_remaining] += 2

        # Adaptive Penalty based on fullness
        bin_utilization = 1 - bins_remain_cap / np.max(bins_remain_cap)
        penalty = np.exp(5 * (bin_utilization - 0.9))
        priorities -= penalty
        
        # Item size consideration
        priorities[potential_bins] += item / np.max(bins_remain_cap)

    return priorities
```
