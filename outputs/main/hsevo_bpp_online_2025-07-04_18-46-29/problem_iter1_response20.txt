```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Large Negative if item doesn't fit
    priorities[item > bins_remain_cap] = -np.inf
    
    # Calculate waste if item is added to each bin
    waste = bins_remain_cap - item
    
    # Prioritize bins with smaller waste, but not zero (avoid full bins unless necessary)
    priorities[item <= bins_remain_cap] = -np.abs(waste[item <= bins_remain_cap])
    
    # Small bonus to bins that get close to full, but not too close to avoid creating small wastes
    close_to_full = (bins_remain_cap >= item) & (waste <= 0.2 * item) & (waste > 0)
    priorities[close_to_full] += 0.1

    # Bigger bonus for almost-full bins
    very_close_to_full = (bins_remain_cap >= item) & (waste <= 0.05 * item) & (waste > 0)
    priorities[very_close_to_full] += 0.2

    # slight penalty to larger remaining capacities
    priorities[item <= bins_remain_cap] -= 0.001 * bins_remain_cap[item <= bins_remain_cap]

    return priorities
```
