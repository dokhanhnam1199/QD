```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Employs a heuristic that prioritizes bins with sufficient space to
    minimize fragmentation while avoiding near-full bins to allow future flexibility.
    It also incorporates a small random component to avoid getting stuck
    in local optima.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Encourage packing into bins that are large enough but not excessively large.
            # Penalize bins that are only slightly larger than the item (risk of fragmentation).
            slack = cap - item
            if slack < 0.1: #Adjustable parameter for minimal slack (e.g. 10% of bin size). Avoid near-full.
                priorities[i] = -np.inf # Very low priority, almost impossible

            else:
                priorities[i] = 1 / (slack + 0.01)  # Prioritize smaller slack
                priorities[i] += 0.01 * np.random.rand() #Add small random number to encourage exploration

        else:
            priorities[i] = -np.inf  # Bin is not large enough. Set lowest possible priority.

    return priorities
```
