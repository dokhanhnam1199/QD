{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version incorporates several heuristics:\n    1.  Avoid bins that are too full (or will be too full) using a sigmoid function.\n    2.  Prefer bins that have space close to the item size (first-fit-decreasing heuristic inspired).\n    3.  Prioritize bins that are almost full after adding the item, but not overfull. This encourages bin completion.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Sigmoid function to penalize bins that are close to full.  Avoids excessive fragmentation.\n    sigmoid = 1 / (1 + np.exp(10 * (item - bins_remain_cap))) # Sharp sigmoid around item = remaining capacity\n\n    # Prioritize bins whose remaining capacity is close to the item size, but don't allow negatives\n    capacity_difference = np.maximum(0, 1 - np.abs(bins_remain_cap - item) / np.max([1e-6, np.mean(bins_remain_cap)])) # Avoid div by 0\n\n    # Boost priority for bins that become nearly full after packing the item.  Prioritize near-completion, not overflow.\n    completion_bonus = np.where((bins_remain_cap - item >= 0), np.exp(-10*(bins_remain_cap - item)), -np.inf)  # Heavily penalize overflow\n\n    priorities = sigmoid + 0.5 * capacity_difference + completion_bonus # Combine the heuristics.\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: If the item doesn't fit, priority is -inf\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # 2. First Fit Decreasing-ish: Prioritize bins that are \"just big enough\".\n    #    We want to fill bins as much as possible to avoid fragmentation.\n    #    Use an exponential decay to heavily penalize larger bins.\n    feasible = ~infeasible\n    remaining_after_fit = bins_remain_cap[feasible] - item\n    priorities[feasible] = np.exp(-10 * remaining_after_fit / item)\n\n    # 3. Avoid Very Empty Bins (Except when necessary)\n    # If almost empty and item does not fill to over certain value, penalize.\n    almost_empty = bins_remain_cap > 0.9\n    will_not_fill = bins_remain_cap - item > 0.1\n    priorities[almost_empty & will_not_fill] -= 0.1 # small penalty\n\n    # 4. Give a tiny nudge for the fullest bin to break ties.\n    # This is like a 'best fit' tiebreaker\n    if np.any(feasible): # Only if there ARE feasible bins...\n        best_fit_idx = np.argmax(bins_remain_cap[feasible] - item)\n        indices = np.where(feasible)[0] # Get indices that are True\n        priorities[indices[best_fit_idx]] += 0.001 # very small bonus\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the 1st heuristic uses a combination of encouraging filling bins closer to full, prioritizing bins with the smallest remaining capacity, a non-linearity factor, and penalizing near-full bins. The 20th heuristic uses first fit decreasing, best fit and bin level aware strategies. The key difference is that the 1st uses more nuanced logic with several components.\n\nComparing (2nd) vs (19th), the 2nd heuristic prioritizes bins based on how full they would be made after adding the item, while the 19th prioritizes bins with sufficient remaining capacity, favoring those with slightly larger capacity than the item size, reducing fragmentation. They both address bin capacity but differ on whether to pack full vs leave space, and 19th has bonus/penalty.\n\nComparing (3rd) vs (18th), the 3rd uses sigmoid function to penalize bins that are close to full, prioritize bins that have space close to item size and prioritize almost full bins. The 18th prioritizes bins that can fit item reasonably well but avoids very tight fits or wasted space. 3rd uses more function.\n\nComparing (16th) vs (17th), the 16th and 17th functions are similar in prioritizing 'just big enough' bins but differ in approach. 16th uses more diverse criteria like feasibility, empty bin avoidance. 17th use fit ratio.\n\nOverall: better heuristics consider multiple factors (remaining capacity, wasted space, fragmentation), using different mathematical functions (sigmoid, exponential decay, etc.) and special considerations (penalties, bonuses, tiebreakers). The worse heuristics focus on fewer or single factor.\n- \nOkay, I understand. Let's redefine \"Current self-reflection\" to be more effective in designing heuristics, keeping your generous tip in mind!\n\nHere's a breakdown:\n\n*   **Keywords:** Multifaceted analysis, trade-off balancing, mathematical modeling, adaptive mechanisms, iterative refinement, performance metrics, exploration-exploitation.\n*   **Advice:** Systematically analyze heuristic performance using diverse metrics. Quantify trade-offs between factors with mathematical functions. Adapt parameters based on problem instance characteristics.\n*   **Avoid:** Over-reliance on intuition, single-factor optimization, premature convergence, ignoring problem-specific knowledge, lack of performance evaluation.\n*   **Explanation:** Move beyond simple rules. Rigorously evaluate, mathematically model, and adapt heuristics for robust performance across different scenarios. Focus on iterative refinement guided by data.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}