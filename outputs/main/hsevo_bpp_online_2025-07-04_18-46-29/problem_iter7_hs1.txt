import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, close_fit_threshold: float = 0.11888760004464548, almost_full_threshold: float = 0.07974847181456313,
                almost_full_penalty: float = 2.5866753283116384, remaining_after_fit_scale: float = 9.974940649097338,
                remaining_after_fit_weight: float = 0.18051960235455608, fill_fraction_weight: float = 0.2681578606336965,
                discourage_placement_value: float = 0.0006429021519769049) -> np.ndarray:
    """Balances waste, fullness, and fit with adaptive scaling."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = -np.abs(waste)  # Favors minimal waste

        close_fit = np.abs(waste) < close_fit_threshold * item
        priorities[valid_bins][close_fit] += 1  # Bonus for very good fit

        almost_full = bins_remain_cap[valid_bins] < (1 + almost_full_threshold) * item
        priorities[valid_bins][almost_full] -= almost_full_penalty  # Penalty for nearly full

        # First Fit Decreasing component, scaled adaptively
        remaining_after_fit = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += np.exp(-remaining_after_fit_scale * remaining_after_fit / item) * remaining_after_fit_weight #Scale impact
        fill_fraction = item / bins_remain_cap[valid_bins]

        priorities[valid_bins] += fill_fraction * fill_fraction_weight
    else:
        priorities[:] = -discourage_placement_value  # Discourage random placement
    return priorities
