```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Heuristic considers both remaining capacity and how full the bin will be after adding the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Prioritize bins that fit the item.
            fill_ratio = item / cap  # ratio of item size to remaining capacity
            future_fill = (cap - item) / cap  # remaining cap after insertion

            # The higher the fill_ratio, and the lower the future fill, the better
            priorities[i] = (1 - future_fill) - (fill_ratio*0.5)  # Balance near-full vs. almost empty (weighting fill_ratio to penalize large empty space)
            if cap - item < 0.1:
                priorities[i]+= 0.1 # slightly prioritise almost full bins
        else:
            priorities[i] = -1000  # Very low priority if the item doesn't fit. Make it way worse than any possible score from available capacity
    return priorities
```
