```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employing a combination of factors to determine bin priority.
    This function considers the remaining capacity, the wasted space
    if the item is added to the bin, and a 'gravitational' pull
    towards bins that are already somewhat full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero
    bins_remain_cap = np.maximum(bins_remain_cap, 1e-9)

    # 1. Capacity Factor: Bins with capacity closer to the item size are preferred.
    capacity_factor = np.exp(-np.abs(bins_remain_cap - item) / item)

    # 2. Waste Factor: Minimize wasted space.  Heavily penalize bins that leave large gaps.
    waste = bins_remain_cap - item
    waste_factor = np.where(waste >= 0, np.exp(-waste / item), 0)  # Penalize positive waste, zero out negative waste (item too big)

    # 3. Fullness Factor: 'Gravitational' pull towards bins that are already somewhat full.
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalized fullness (0 to 1)
    fullness_factor = np.power(fullness, 2) # increased nonlinearity
    fullness_factor = np.nan_to_num(fullness_factor, nan=0.0)  #avoid NAN when all bins_remain_cap are zero.


    # Combine the factors with appropriate weights.
    priorities = 0.5 * capacity_factor + 0.4 * waste_factor + 0.1 * fullness_factor

    return priorities
```
