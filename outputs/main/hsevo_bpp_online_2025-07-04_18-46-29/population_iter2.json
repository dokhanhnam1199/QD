[
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines sigmoid-based bin fullness, capacity difference, and filling level.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility (same as v1)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    # 2. Sigmoid for bin fullness (similar to v0, but applied only to feasible bins)\n    sigmoid = np.zeros_like(bins_remain_cap, dtype=float)\n    sigmoid[feasible] = 1 / (1 + np.exp(10 * (item - bins_remain_cap[feasible])))\n\n    # 3. Capacity difference, focusing on feasible bins (similar to v0)\n    capacity_difference = np.zeros_like(bins_remain_cap, dtype=float)\n    if np.any(feasible):\n        capacity_difference[feasible] = np.maximum(0, 1 - np.abs(bins_remain_cap[feasible] - item) / np.max([1e-6, np.mean(bins_remain_cap[feasible])]))\n\n    # 4. Completion bonus, applied to only feasible bins (similar to v0)\n    completion_bonus = np.zeros_like(bins_remain_cap, dtype=float)\n    completion_bonus[feasible] = np.where((bins_remain_cap[feasible] - item >= 0), np.exp(-10 * (bins_remain_cap[feasible] - item)), -np.inf)\n\n    # Combine, adjusting weights based on what was learned in analysis\n    priorities = sigmoid + 0.6 * capacity_difference + 0.8 * completion_bonus\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response1.txt_stdout.txt",
    "code_path": "problem_iter2_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best fit and fill fraction, avoids overfilling.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Best-fit component (minimizes waste)\n        waste = bins_remain_cap[eligible_bins] - item\n        best_fit_priority = 1 / (waste + 1e-6)\n\n        # Fill-fraction component (prioritizes efficient fills)\n        fill_fraction = item / bins_remain_cap[eligible_bins]\n        fill_fraction_priority = fill_fraction\n\n        # Combined priority (weighted average)\n        priorities[eligible_bins] = 0.6 * best_fit_priority + 0.4 * fill_fraction_priority\n\n        # Penalize near-full bins to avoid overfilling\n        near_full = bins_remain_cap[eligible_bins] < 1.1 * item  # Adjust the 1.1 factor if needed\n        priorities[eligible_bins][near_full] *= 0.5  # Reduce priority for near-full bins\n    else:\n        # No bin can fit, prioritize larger capacity for the future.\n        priorities = bins_remain_cap\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response2.txt_stdout.txt",
    "code_path": "problem_iter2_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best fit and residual capacity penalty.\"\"\"\n\n    fit_scores = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    # Best Fit component: prioritize fuller bins\n    if np.any(can_fit):\n        remaining_space = bins_remain_cap[can_fit] - item\n        fit_scores[can_fit] = 1 / (remaining_space + 1e-9)\n\n    # Residual Capacity Penalty: Avoid leaving tiny spaces\n    residual_penalty = np.zeros_like(bins_remain_cap, dtype=float)\n    bins_after_fit = bins_remain_cap - item\n    residual_penalty[can_fit] = np.abs(bins_after_fit[can_fit] / bins_remain_cap[can_fit])\n\n    # Combine scores\n    priorities = fit_scores - 0.1 * residual_penalty\n\n    # Small bonus for almost full bins, using approach from priority_v1\n    almost_full_bins = can_fit & (bins_after_fit < (0.1 * bins_remain_cap[can_fit]))\n    priorities[almost_full_bins] *= 2\n\n    if not np.any(can_fit):\n        priorities = np.ones_like(bins_remain_cap) * 0.1\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response3.txt_stdout.txt",
    "code_path": "problem_iter2_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by balancing wasted space and fit ratio.\"\"\"\n\n    eligible_bins = bins_remain_cap >= item\n    if not np.any(eligible_bins):\n        return np.full(bins_remain_cap.shape, -np.inf)\n\n    wasted_space = bins_remain_cap - item\n    wasted_space[~eligible_bins] = np.inf\n\n    fit_ratios = item / bins_remain_cap\n    fit_ratios[~eligible_bins] = np.inf # Penalize infeasible bins\n\n    priorities = -wasted_space + np.exp(-np.abs(fit_ratios - 0.7))\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response4.txt_stdout.txt",
    "code_path": "problem_iter2_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit and target fill ratio to prioritize bins.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Best-fit component\n        remaining_space = bins_remain_cap[eligible_bins] - item\n        best_fit_priority = 1 - (remaining_space / bins_remain_cap[eligible_bins])\n\n        # Target fill ratio component (around 70%)\n        fit_ratios = item / bins_remain_cap[eligible_bins]\n        target_priority = np.exp(-np.abs(fit_ratios - 0.7))\n\n        # Combine: weighted average, favoring best-fit if capacity low\n        capacity_weights = bins_remain_cap[eligible_bins]/np.max(bins_remain_cap) # bigger bin has more weight on best fit since it has more capacity\n        combined_priority = (capacity_weights * best_fit_priority + (1-capacity_weights) * target_priority)\n\n        priorities[eligible_bins] = combined_priority\n\n    else:\n        # Prioritize larger bins when no fit exists\n        priorities = bins_remain_cap\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 6.930594335859594,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response5.txt_stdout.txt",
    "code_path": "problem_iter2_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines 'fullest bin' and 'near fit' strategies.\n    Prioritizes bins that minimize remaining space but avoids overly tight fits.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Fullest Bin component: Prioritize smallest remaining space\n        remaining_space = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = 1 / (remaining_space + 1e-9)\n\n        # Near Fit adjustment: Give bonus to bins with slightly larger capacity\n        near_fit_threshold_upper = item * 1.2\n        near_fit_bins = (bins_remain_cap >= item) & (bins_remain_cap <= near_fit_threshold_upper)\n        priorities[near_fit_bins] += 0.5 * priorities[near_fit_bins] # Near fit bonus (fraction of existing priority)\n    else:\n        priorities[:] = -1  # Very low priority if item doesn't fit\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response6.txt_stdout.txt",
    "code_path": "problem_iter2_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best features of v0 and v1 for bin packing.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get negative infinity.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    feasible_mask = ~infeasible_mask\n    if np.any(feasible_mask):\n        # Fit score based on closeness of item to remaining capacity\n        fit_scores = np.exp(-(bins_remain_cap[feasible_mask] - item))\n\n        # Bonus for almost empty bins.\n        empty_bin_bonus = bins_remain_cap[feasible_mask]\n        \n        # Penalty for almost full bins\n        almost_full_penalty = np.exp(10 * (1 - (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap))))\n\n        #Prioritize bins with smallest remaining capacity that can still fit the item.\n        min_remaining = np.min(bins_remain_cap[feasible_mask])\n        tight_fit_bonus = np.where(bins_remain_cap[feasible_mask] == min_remaining, 1.0, 0.0)\n\n        priorities[feasible_mask] = fit_scores + 0.1 * empty_bin_bonus - almost_full_penalty + tight_fit_bonus\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 149.25209413641804,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response7.txt_stdout.txt",
    "code_path": "problem_iter2_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and target fullness for bin priority.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        # Minimize waste, but also target a fullness level.\n        priorities[valid_bins] = -np.abs(waste[valid_bins])  # Initial priority\n\n        # Calculate fullness after adding item\n        fullness = (bins_remain_cap[valid_bins] - waste[valid_bins]) / bins_remain_cap[valid_bins]\n\n        # Give a bonus to bins that become sufficiently full\n        target_fullness = 0.8\n        fullness_bonus = (fullness > target_fullness) * 1.0 #bonus increased\n        priorities[valid_bins] += fullness_bonus\n\n        #Penalize almost full bins\n        full_threshold = 0.1\n        almost_full = bins_remain_cap < (1 + full_threshold) * item\n        priorities[almost_full] -= 2 #penalty increased\n\n    else:\n        priorities[:] = -0.0001 #Small negative priority\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.13841244515357,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response8.txt_stdout.txt",
    "code_path": "problem_iter2_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit score and waste penalty with perfect/next fit.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000\n\n    if len(bins_remain_cap) > 0 and bins_remain_cap[0] >= item and not perfect_fit[0]:\n        priorities[0] = 500\n\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities\n\n    fit_scores = 1 - np.abs(bins_remain_cap - item) / np.max(bins_remain_cap)\n    waste = bins_remain_cap - item\n    waste_penalty = np.zeros_like(waste, dtype=float)\n    waste_penalty[waste > 0] = (waste[waste > 0] / np.max(bins_remain_cap))**2\n\n    priorities[feasible_bins] = fit_scores[feasible_bins] - waste_penalty[feasible_bins]\n\n    priorities[~feasible_bins] = -1e9\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response9.txt_stdout.txt",
    "code_path": "problem_iter2_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Hybrid priority: balances wasted space, fullness, and fit.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap - item\n        priorities[valid_bins] = -np.abs(waste[valid_bins]) # Favors minimal waste\n\n        close_fit = np.abs(waste[valid_bins]) < 0.1 * item\n        priorities[valid_bins][close_fit] += 1 # Bonus for very good fit\n\n        almost_full = bins_remain_cap < (1 + 0.1) * item\n        priorities[almost_full] -= 2 # Penalty for nearly full\n\n        # First Fit Decreasing - ish component to avoid fragmentation\n        remaining_after_fit = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] += np.exp(-10 * remaining_after_fit / item) * 0.5 #Scale impact.\n    else:\n        priorities[:] = -0.0001 # Discourage random placement\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.008775428799367,
    "exec_success": true
  }
]