```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, utilization, and fragmentation penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    potential_bins = bins_remain_cap >= item

    if np.any(potential_bins):
        # 1. Best Fit
        remaining_space = bins_remain_cap[potential_bins] - item
        priorities[potential_bins] += np.exp(-remaining_space)

        # 2. Utilization
        utilization = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += (1 - utilization)

        # 3. Fragmentation Penalty
        near_full_threshold = 0.95
        near_full = (bins_remain_cap[potential_bins] - item <= (1 - near_full_threshold) * bins_remain_cap[potential_bins])
        priorities[potential_bins][near_full] -= 1 / (1 + np.exp(-100*(bins_remain_cap[potential_bins][near_full] - item - (1 - near_full_threshold) * bins_remain_cap[potential_bins][near_full])))

    return priorities
```
