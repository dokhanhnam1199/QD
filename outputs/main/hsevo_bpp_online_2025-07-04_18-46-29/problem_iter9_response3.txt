```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Primary Objective Alignment: Fill bins as completely as possible.
    # Prioritize bins where the item fits and the remaining capacity is minimized AFTER placement.  This directly aligns with reducing overall bin usage.
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        priorities[potential_bins] = 1 / (bins_remain_cap[potential_bins] - item + 1e-6) # The smaller the remaining space, the higher the priority. added small number to avoid division by zero

    # 2. Adaptive Bonus/Penalty based on Bin Utilization
    #  - Reward bins that are already significantly filled to encourage consolidation.
    #  - Penalize bins that are nearly empty to discourage spreading items thinly.
    filled_ratio = (1 - bins_remain_cap / np.max(bins_remain_cap)) # how filled each bin is (0 to 1)
    priorities += filled_ratio * 0.2  # Small bonus for already filled bins

    empty_bin_threshold = 0.2 * np.max(bins_remain_cap)  # e.g., penalize if bin is less than 20% full AFTER placing the item
    projected_remaining = bins_remain_cap - item
    nearly_empty_after_placement = (projected_remaining > 0) & (projected_remaining > empty_bin_threshold) # Penalize bins that, even after adding, leave the bin sparsely occupied

    if np.any(nearly_empty_after_placement):
      priorities[nearly_empty_after_placement] -= 0.3 # Penalize creating almost empty bins

    # 3. Exploration-Exploitation Balance: Introduce some randomness for diversification
    # This can help avoid getting stuck in local optima by occasionally trying less obvious placements.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.05 # Small random perturbation
    
    # 4. Last-Fit Consideration: Give a small preference to the bin with capacity exactly matching the item size, to encourage perfect fits if such exists
    exact_fit = bins_remain_cap == item
    if np.any(exact_fit):
        priorities[exact_fit] += 0.4

    return priorities
```
