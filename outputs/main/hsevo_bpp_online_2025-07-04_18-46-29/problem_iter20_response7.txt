```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining fill ratio, best fit, and bin diversity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Fill Ratio with item size influence
        fill_ratio = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] += fill_ratio * 0.6

        # Best Fit with non-linear encouragement
        remaining_space = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += np.exp(-4 * remaining_space) * 0.9

        # Bin Diversity Bonus
        if len(bins_remain_cap) > 1:
            bin_std = np.std(bins_remain_cap)
            if bin_std > 0.1:
                priorities[valid_bins] += 0.2

        # Large item encouragement
        if item > 0.7:
             min_remaining = np.min(bins_remain_cap[valid_bins]-item)
             tight_fit = (bins_remain_cap[valid_bins] - item) == min_remaining
             priorities[valid_bins][tight_fit] += 0.5

    else:
        priorities[:] = -0.001

    return priorities
```
