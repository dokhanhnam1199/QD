```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best features of v0 and v1 for bin packing."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get negative infinity.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    if np.any(feasible_mask):
        # Fit score based on closeness of item to remaining capacity
        fit_scores = np.exp(-(bins_remain_cap[feasible_mask] - item))

        # Bonus for almost empty bins.
        empty_bin_bonus = bins_remain_cap[feasible_mask]
        
        # Penalty for almost full bins
        almost_full_penalty = np.exp(10 * (1 - (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap))))

        #Prioritize bins with smallest remaining capacity that can still fit the item.
        min_remaining = np.min(bins_remain_cap[feasible_mask])
        tight_fit_bonus = np.where(bins_remain_cap[feasible_mask] == min_remaining, 1.0, 0.0)

        priorities[feasible_mask] = fit_scores + 0.1 * empty_bin_bonus - almost_full_penalty + tight_fit_bonus
    return priorities
```
