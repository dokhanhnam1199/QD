```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill-ratio, best-fit, adaptive fragmentation, and global state."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    potential_bins = bins_remain_cap >= item

    # 1. Fill Ratio Preference (Adaptive)
    if np.any(potential_bins):
        fill_ratios = item / bins_remain_cap[potential_bins]
        priorities[potential_bins] += fill_ratios * (1 + 0.2 * (1 - np.mean(bins_remain_cap)))

    # 2. Best Fit Encouragement (Stronger)
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += 1.8 # boost best fit bins

    # 3. Fragmentation Penalty (Adaptive)
    remaining_space = bins_remain_cap - item
    fragmentation_threshold_multiplier = 0.15
    fragmentation_threshold = item * (fragmentation_threshold_multiplier + 0.05 * np.mean(bins_remain_cap))
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= 1.2 #Penalize fragmented bins
    
    # 4. Almost Empty Bonus (Scaled)
    almost_empty_threshold = 0.9
    almost_empty = bins_remain_cap > almost_empty_threshold
    if np.any(almost_empty):
        almost_empty_bonus = 0.5
        priorities[almost_empty] += almost_empty_bonus # Reuse almost empty bin

    # 5. Exploration Bonus when globally full
    global_fill_level = np.sum(1-bins_remain_cap) / num_bins #estimate the global fill level
    if global_fill_level > 0.7: #If relatively full, try to pack to bins that have some space
        exploration_bonus = 0.2 * bins_remain_cap #linear increasing to remaining capacity.
        priorities += exploration_bonus # encourage packing where there is space

    return priorities
```
