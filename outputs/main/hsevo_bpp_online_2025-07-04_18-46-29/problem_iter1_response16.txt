```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: First-Fit Decreasing variant - Favor bins that can fit the item, with smaller remaining space preferred
    # Gives a higher score to bins that can accommodate the item without much space left.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        priorities[fit_mask] = (bins_remain_cap[fit_mask] - item)**-1  # Inverse of the wasted space

    # Heuristic 2: Avoid Fragmentation - Penalize bins where item leaves too little space
    # Penalize if remaining capacity after adding item is below a threshold
    remaining_after = bins_remain_cap - item
    too_small_mask = (remaining_after > 0) & (remaining_after < 0.1) # Assuming bin size of 1; scale as necessary
    priorities[too_small_mask] = -100  # High negative penalty

    # Heuristic 3: Reward filling up more space in the bin.
    fill_percentage = item / bins_remain_cap
    priorities += np.clip(fill_percentage * 10, 0, 10) # scale reward to a reasonable range

    #Heuristic 4: Give very small negative penalty if item cannot fit, to avoid overflow errors or undefined behavior
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -1 #ensure this bin is avoided somewhat.

    return priorities
```
