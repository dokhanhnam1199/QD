```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins that can fit the item closely,
    but also avoids bins that are too full after packing, creating "almost full" bins.
    It combines several factors:
    1.  Fit Score:  The closer the item's size is to the bin's remaining capacity, the better.
    2.  Waste Penalty: Penalizes bins that would leave a significant amount of wasted space.
    3.  Feasibility: Bins that cannot accommodate the item get a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit the item

    # Fit Score (higher is better): How well the item fits in the bin
    fit_scores = 1 - np.abs(bins_remain_cap - item) / np.max(bins_remain_cap) # Normalize

    # Waste Penalty (lower is better): Discourages leaving too much space.
    waste = bins_remain_cap - item
    waste_penalty = np.zeros_like(waste, dtype=float)
    waste_penalty[waste > 0] = (waste[waste > 0] / np.max(bins_remain_cap))**2 #Squre it to heavily penalize large waste

    # Combine fit and waste for initial priorities (only feasible bins)
    priorities[feasible_bins] = fit_scores[feasible_bins] - waste_penalty[feasible_bins]

    # Very small negative value if the bin is not feasible, to discourage the use of infeasible bin
    priorities[~feasible_bins] = -1e9
    return priorities
```
