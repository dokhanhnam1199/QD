```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Encourage filling bins closer to full
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
      priorities[potential_bins] = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]

    # Prioritize bins with smallest remaining capacity that can still fit the item.  This helps with the "first fit decreasing" concept if implemented online.
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
      min_remaining = np.min(bins_remain_cap[eligible_bins])
      priorities[bins_remain_cap == min_remaining] += 1

    
    # Einstein's Special Consideration: A touch of non-linearity to avoid local optima
    priorities = priorities + np.exp(-np.abs(bins_remain_cap - item))  
    
    # Penalize near-full bins heavily to allow more flexibility for the next item, mitigating fragmentation.
    near_full = (bins_remain_cap < item * 1.1) & (bins_remain_cap >= item)
    if np.any(near_full):
        priorities[near_full] -= 0.5 # A penalty score
      
    return priorities
```
