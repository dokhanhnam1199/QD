```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, best fit, fragmentation, and bin reuse with adaptivity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    item_size_factor = min(1.0, item)
    bin_availability_factor = min(1.0, np.sum(bins_remain_cap >= item) / num_bins)

    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Fill Ratio - Adaptive
        fill_ratio = item / (bins_remain_cap[eligible_bins] + 0.0001)  # Avoid division by zero
        priorities[eligible_bins] += (0.5 + 0.3 * item_size_factor) * fill_ratio

        # Best Fit - Encouragement with exponential decay
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] += (1.5 + 0.5 * bin_availability_factor) * np.exp(-2 * remaining_space)

    # Fragmentation Penalty - Dynamic threshold
    remaining_space_all = bins_remain_cap - item
    fragmentation_threshold = item * (0.1 + 0.1 * item_size_factor)
    fragmented_bins = (remaining_space_all > 0) & (remaining_space_all <= fragmentation_threshold)
    priorities[fragmented_bins] -= 1.0 + 0.2 * item_size_factor

    # Almost empty reuse bonus.
    almost_empty_threshold = 0.95
    almost_empty = bins_remain_cap > almost_empty_threshold
    if np.any(almost_empty):
        priorities[almost_empty] += 0.6 + 0.4 * bin_availability_factor

    # Penalize bins that are close to full but can't fit the item
    too_full_bins = (bins_remain_cap < item) & (bins_remain_cap > (item - 0.2))
    priorities[too_full_bins] -= 0.8

    #Global bin-balancing encouragement
    average_fill = np.mean(bins_remain_cap) if num_bins > 0 else 0.0
    deviation = bins_remain_cap - average_fill
    priorities += 0.05 * np.exp(-deviation**2) # Bias toward bins closer to average

    if not np.any(eligible_bins):
        priorities[:] = -0.001  # Discourage if no suitable bin

    return priorities
```
