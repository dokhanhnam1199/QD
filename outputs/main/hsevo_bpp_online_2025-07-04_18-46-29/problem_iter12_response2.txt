```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill-ratio, fragmentation penalty, and bin-usage encouragement with adaptive weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)

    # 1. Fill Ratio Preference (Adjusted for bin fullness)
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratios = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += fill_ratios * (1 + 0.5 * (1 - np.mean(bins_remain_cap)))  # Adaptive weight: favors bins when average fullness is low

    # 2. Best Fit Encouragement (Stronger boost)
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += 2.2  # Stronger best-fit

    # 3. Fragmentation Penalty (Adaptive Threshold)
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * (0.15 + 0.1 * np.mean(bins_remain_cap))  # Adaptive threshold based on avg capacity
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= 1.5 #Slightly increased penalty

    # 4. Encourage re-use of almost empty bins (Adjusted boost)
    almost_empty_threshold = 0.90 # Reduced Threshold
    almost_empty = bins_remain_cap > (1 - almost_empty_threshold)
    if np.any(almost_empty):
        priorities[almost_empty] += 0.9  # Increased bonus

    # 5. Bin usage encouragement. Give priority to bins that are already in use, to reduce number of open bins
    used_bins = bins_remain_cap < 1.0 # bin size normalized to 1
    if np.any(used_bins):
        priorities[used_bins] += 0.4 # Small incentive to reuse

    #6. Balancing term: Encourage using bins that will be filled more than a certain percentage

    fill_percentage = item / (1 - bins_remain_cap)
    high_fill_bins = (bins_remain_cap >= item) & (fill_percentage > 0.7) & (bins_remain_cap < 1)
    if np.any(high_fill_bins):
        priorities[high_fill_bins] += 0.6 # Incentive for filling greater than 70%

    return priorities
```
