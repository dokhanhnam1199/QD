```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, target fullness, and near-full penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Minimize waste
        priorities[valid_bins] = -np.abs(waste[valid_bins])

        # Fullness bonus
        fullness = (bins_remain_cap[valid_bins] - waste[valid_bins]) / bins_remain_cap[valid_bins]
        target_fullness = 0.8
        fullness_bonus = (fullness > target_fullness) * 1.0
        priorities[valid_bins] += fullness_bonus

        # Near-full penalty with smoother gradient
        full_threshold = 0.1
        almost_full = bins_remain_cap < (1 + full_threshold) * item
        penalty_strength = 2.0
        priorities[almost_full] -= penalty_strength * np.exp(10 * (1 - (bins_remain_cap[almost_full] / (item * (1 + full_threshold))))) # Use np.exp to penalize almost full bins
        
        # Bonus for tight fit
        min_waste = np.min(waste[valid_bins])
        close_fit_bonus = np.where(waste[valid_bins] == min_waste, 0.5, 0.0)
        priorities[valid_bins] += close_fit_bonus

    else:
        priorities[:] = -0.0001  # Small negative priority
    return priorities
```
