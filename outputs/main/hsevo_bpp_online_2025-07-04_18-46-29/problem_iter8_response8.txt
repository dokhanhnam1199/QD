```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill optimization with adaptive penalties."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = -np.abs(waste)

        close_fit_threshold = 0.1
        close_fit = np.abs(waste) < close_fit_threshold * item
        priorities[valid_bins][close_fit] += 1

        almost_full_threshold = 0.1
        almost_full_penalty = 2.79
        almost_full = bins_remain_cap[valid_bins] < (1 + almost_full_threshold) * item
        priorities[valid_bins][almost_full] -= almost_full_penalty

        remaining_after_fit_scale = 6.44
        remaining_after_fit_weight = 0.25

        remaining_after_fit = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += np.exp(-remaining_after_fit_scale * remaining_after_fit / item) * remaining_after_fit_weight

        fill_fraction = item / bins_remain_cap[valid_bins]
        fill_fraction_weight = 0.39
        priorities[valid_bins] += fill_fraction * fill_fraction_weight

    else:
        discourage_placement_value = 0.0008
        priorities[:] = -discourage_placement_value

    return priorities
```
