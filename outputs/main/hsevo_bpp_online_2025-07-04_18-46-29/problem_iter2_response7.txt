```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and target fullness for bin priority."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Minimize waste, but also target a fullness level.
        priorities[valid_bins] = -np.abs(waste[valid_bins])  # Initial priority

        # Calculate fullness after adding item
        fullness = (bins_remain_cap[valid_bins] - waste[valid_bins]) / bins_remain_cap[valid_bins]

        # Give a bonus to bins that become sufficiently full
        target_fullness = 0.8
        fullness_bonus = (fullness > target_fullness) * 1.0 #bonus increased
        priorities[valid_bins] += fullness_bonus

        #Penalize almost full bins
        full_threshold = 0.1
        almost_full = bins_remain_cap < (1 + full_threshold) * item
        priorities[almost_full] -= 2 #penalty increased

    else:
        priorities[:] = -0.0001 #Small negative priority
    return priorities
```
