```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_size: float = 1.0) -> np.ndarray:
    """
    Combines best-fit, fill-ratio, fragmentation penalty, and bin utilization, 
    with dynamic adjustment based on item size and bin states.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Fill Ratio Preference (Weighted by Item Size)
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratio = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += fill_ratio * (1 - item)  # Smaller items prefer better fill

    # 2. Best Fit Encouragement (Adaptive Weight)
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        best_fit_weight = 0.5 + item # Larger items get more best-fit boost
        priorities[best_fit_bins] += best_fit_weight

    # 3. Fragmentation Penalty (Dynamic Threshold)
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = 0.2 * item #was a fixed multiplier, make item size related
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    fragmentation_penalty = 0.8 + item #Larger items penalized more for fragmentation
    priorities[fragmented_bins] -= fragmentation_penalty

    # 4. Bin Utilization Bonus (Encourage Filling)
    utilization = (bin_size - bins_remain_cap) / bin_size
    priorities += utilization * 0.1 # Add a small bonus for bins that are already utilized

    # 5. Almost Empty Bin Bonus (Adaptive Threshold)
    almost_empty_threshold = 0.9
    almost_empty = bins_remain_cap > (bin_size * almost_empty_threshold)
    almost_empty_bonus = 0.3
    priorities[almost_empty] += almost_empty_bonus
    
    #6. Large Item in almost full bin
    almost_full_threshold = 0.1
    almost_full = bins_remain_cap < (bin_size * almost_full_threshold)
    large_item = item > (bin_size*0.5)
    if large_item:
        priorities[almost_full] -=1 #try to avoid putting very large items in bins almost full

    return priorities
```
