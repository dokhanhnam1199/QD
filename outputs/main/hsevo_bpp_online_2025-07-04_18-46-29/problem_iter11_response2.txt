```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, fill ratio, and adaptive fragmentation penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    potential_bins = bins_remain_cap >= item

    if np.any(potential_bins):
        # Best fit component: Maximize bin utilization.
        waste = bins_remain_cap[potential_bins] - item
        priorities[potential_bins] = 1 - waste / bins_remain_cap[potential_bins]

        # Fill ratio bonus
        fill_fraction = item / bins_remain_cap[potential_bins]
        priorities[potential_bins] += 0.3 * fill_fraction  # Weight adjusted

        # Adaptive fragmentation penalty: Penalize bins leaving small fragments
        small_fragment_threshold = item * 0.6  # Adaptive threshold
        remaining_after_pack = bins_remain_cap - item
        too_small_remaining = (remaining_after_pack > 0) & (remaining_after_pack < small_fragment_threshold)
        if np.any(too_small_remaining):
            priorities[too_small_remaining] -= 0.7  # Stronger penalty

        #First fit tiebreaker.
        eligible_bins = bins_remain_cap >= item
        if np.any(eligible_bins):
            first_eligible_index = np.argmax(eligible_bins) # Select the index of the first true value
            priorities[first_eligible_index] += 0.01
    else:
        priorities[:] = -0.001  # Discourage if no suitable bin

    return priorities
```
