```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_size: float = 1.0) -> np.ndarray:
    """
    Combines adaptive fill ratio, best fit, frag. penalty & reuse, exploration with added adaptivity and global awareness.
    """
    num_bins = len(bins_remain_cap)
    priorities = np.zeros(num_bins)

    # --- Adaptive Parameters (Dynamically Adjusted) ---
    average_fill = np.mean(1 - bins_remain_cap / bin_size)
    bin_std = np.std(bins_remain_cap / bin_size)
    item_relative_size = item / bin_size

    # Weights (Adaptive based on average fill and item size)
    fill_ratio_weight = 0.2 + 0.1 * item_relative_size + 0.1 * average_fill
    best_fit_weight = 0.6 + 0.2 * (1 - average_fill)
    fragmentation_penalty_weight = 0.4 + 0.2 * item_relative_size
    reuse_weight = 0.3 + 0.1 * (1 - item_relative_size)

    # Thresholds (Adaptive)
    fragmentation_threshold = 0.2 * bin_size * (1 + 0.5 * item_relative_size)
    almost_empty_threshold = 0.9 * bin_size * (1 - 0.3 * average_fill)

    # --- Feature: Bin Eligibility ---
    eligible_bins = bins_remain_cap >= item
    num_eligible_bins = np.sum(eligible_bins)

    if num_eligible_bins == 0:
        # No bin can fit, so prioritize the least full bin that is still closest to fitting
        closest_bin_index = np.argmin(bins_remain_cap)  # Find bin with smallest remaining capacity
        priorities[closest_bin_index] = -1.0  # Strongly discourage, but allow if necessary
        return priorities  # Return immediately if no bin fits
    
    # --- Fill Ratio Priority ---
    fill_ratio = item / (bins_remain_cap[eligible_bins] + 1e-6)
    priorities[eligible_bins] += fill_ratio_weight * fill_ratio

    # --- Best Fit Priority ---
    remaining_space = bins_remain_cap[eligible_bins] - item
    priorities[eligible_bins] += best_fit_weight * np.exp(-5 * remaining_space / bin_size)  # Exponential decay

    # --- Fragmentation Penalty ---
    remaining_space_all = bins_remain_cap - item
    fragmented_bins = (remaining_space_all > 0) & (remaining_space_all <= fragmentation_threshold)
    priorities[fragmented_bins] -= fragmentation_penalty_weight * (1 - average_fill) * (fragmentation_threshold - remaining_space_all[fragmented_bins]) / fragmentation_threshold

    # --- Reuse Almost Empty Bins ---
    almost_empty_bins = bins_remain_cap > almost_empty_threshold
    priorities[almost_empty_bins] += reuse_weight * (bins_remain_cap[almost_empty_bins] / bin_size)
    
    # --- Balance Bin Utilization ---
    bin_utilization = 1 - bins_remain_cap / bin_size
    priorities += 0.1 * (1 - bin_std)  # Encourage even utilization

    # --- Global Bin Balancing (New Feature) ---
    # Penalize bins that are outliers in terms of remaining capacity.
    capacity_median = np.median(bins_remain_cap)
    capacity_deviation = np.abs(bins_remain_cap - capacity_median)
    priorities -= 0.05 * capacity_deviation / bin_size
    
    # --- Exploration (Adaptive) ---
    exploration_factor = 0.01 * item_relative_size * (1 + bin_std)  # Adaptive exploration
    priorities += np.random.uniform(-exploration_factor, exploration_factor, size=num_bins)

    return priorities
```
