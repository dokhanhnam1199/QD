```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the wasted space if the item is placed in the bin.
    wasted_space = bins_remain_cap - item
    
    # High priority for bins where the item fits and minimizes wasted space.
    # If the item doesn't fit, assign a low priority.
    
    fit_mask = wasted_space >= 0
    
    if np.any(fit_mask):  # Check if there are bins that can accommodate the item
        # Rank bins based on how full they would be made *after* adding the item
        # Higher remaining capacity (lower waste) means a better fit (higher score)
        
        #normalized_remain_cap = bins_remain_cap[fit_mask] / bins_remain_cap[fit_mask].max() # Normalize so that large differences don't overshadow

        #priorities[fit_mask] = (1 / (wasted_space[fit_mask] + 0.000001)) # Avoid division by zero

        # Calculate a score based on the fullness of the bin after packing.  A fully packed bin is best.
        fullness_score = (bins_remain_cap[fit_mask] - wasted_space[fit_mask]) / bins_remain_cap[fit_mask]
        priorities[fit_mask] = fullness_score

        # Apply a stronger priority to bins that would be close to full
        # Close-to-full is better than almost empty
        close_to_full_threshold = 0.9
        priorities[fit_mask] = priorities[fit_mask] + (fullness_score >= close_to_full_threshold) * 1.5 # Give strong bonus to close-to-full
            
    else: # if the item doesn't fit into any of bins
        priorities = np.full(bins_remain_cap.shape, -np.inf)  # Set very low priority for those bins
        # Choose bin that's closest in size to current item
        closest_bin_index = np.argmin(bins_remain_cap)
        priorities[closest_bin_index] = -1 # Ensure at least one option for packing, give close size higher priority than all others
        
    return priorities
```
