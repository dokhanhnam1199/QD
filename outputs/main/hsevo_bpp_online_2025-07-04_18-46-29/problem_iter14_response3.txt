```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill-ratio, and adaptive fragmentation penalty.
    State-aware and balances bin usage with fill efficiency."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)
    potential_bins = bins_remain_cap >= item

    # Fill Ratio Preference (Adjusted)
    if np.any(potential_bins):
        fill_ratios = item / bins_remain_cap[potential_bins]
        priorities[potential_bins] += fill_ratios * (1 + 0.3 * (1 - np.mean(bins_remain_cap)))

    # Best Fit Encouragement (Stronger boost)
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += 2.0

    # Fragmentation Penalty (Adaptive Threshold)
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * (0.1 + 0.05 * np.mean(bins_remain_cap))
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= 1.3

    # Encourage re-use (Adjusted boost)
    used_bins = bins_remain_cap < 1.0
    if np.any(used_bins):
        priorities[used_bins] += 0.3

    # Fill percentage incentive
    if np.any(potential_bins):
        fill_percentage = item / (1 - bins_remain_cap[potential_bins]) if np.any(1-bins_remain_cap[potential_bins] > 0) else np.zeros_like(bins_remain_cap[potential_bins])
        fill_percentage_filter = (1- bins_remain_cap[potential_bins]) > 0
        high_fill_bins = fill_percentage > 0.7
        
        if np.any(high_fill_bins) and np.any(fill_percentage_filter):
            eligible_bins_index = np.where(potential_bins)[0][high_fill_bins & fill_percentage_filter]
            priorities[eligible_bins_index] += 0.5
    return priorities
```
