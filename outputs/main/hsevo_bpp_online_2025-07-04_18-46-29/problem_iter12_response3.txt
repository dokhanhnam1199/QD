```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, fill-ratio, fragmentation penalty, and bin-usage encouragement
    with adaptive weights and state-dependent logic.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    
    # Adaptive Weights (based on item size and bin availability)
    item_size_factor = min(1.0, item)  # Normalize item size
    bin_availability_factor = min(1.0, np.sum(bins_remain_cap >= item) / num_bins)

    fill_ratio_weight = 0.5 + 0.3 * item_size_factor
    best_fit_weight = 1.5 + 0.5 * bin_availability_factor
    fragmentation_penalty_weight = 1.0 + 0.2 * item_size_factor
    reuse_weight = 0.6 + 0.4*bin_availability_factor
    large_bin_bonus_weight = 0.3

    # 1. Fill Ratio Preference
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        priorities[potential_bins] += fill_ratio_weight * (item / bins_remain_cap[potential_bins])

    # 2. Best Fit Encouragement
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += best_fit_weight

    # 3. Fragmentation Penalty (Adaptive Threshold)
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * (0.1 + 0.1 * item_size_factor)  #Adaptive threshold
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= fragmentation_penalty_weight

    # 4. Encourage re-use of almost empty bins.
    almost_empty_threshold = 0.95  # If more than 95% empty give it a boost
    almost_empty = bins_remain_cap > (1 - almost_empty_threshold)  # bin size set to 1
    if np.any(almost_empty):
        priorities[almost_empty] += reuse_weight

    #5. Bonus for larger bins if item is small
    if item_size_factor < 0.3:
        large_bins = bins_remain_cap > 0.7
        if np.any(large_bins):
            priorities[large_bins] += large_bin_bonus_weight
    
    #6. Penalize bins that are close to full but can't fit the item
    too_full_bins = (bins_remain_cap < item) & (bins_remain_cap > (item-0.2))
    priorities[too_full_bins] -= 0.8
    
    return priorities
```
