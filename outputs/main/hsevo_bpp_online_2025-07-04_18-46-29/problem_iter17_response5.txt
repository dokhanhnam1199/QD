```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority function combining best-fit, target fill, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    average_fill = np.mean(1 - bins_remain_cap)

    if np.any(valid_bins):
        # Best-fit with adaptive item size impact
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] -= np.abs(waste) * (1 + 0.2 * item)

        # Target fill bonus, adaptive target
        target_fill = 0.7 + 0.1 * average_fill
        ideal_remaining = 1 - target_fill
        distance_to_ideal = np.abs((bins_remain_cap[valid_bins] - item) - ideal_remaining)
        priorities[valid_bins] += np.exp(-distance_to_ideal * 6)

        # Fragmentation penalty with adaptive threshold
        fragmentation_threshold = item * (0.1 + 0.05 * average_fill)
        remaining_space = bins_remain_cap - item
        fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
        fragmentation_penalty = 1.0 + 0.5 * (fragmentation_threshold - remaining_space[fragmented_bins]) / (fragmentation_threshold + 1e-9)
        priorities[fragmented_bins] -= fragmentation_penalty * (1 + 0.1 * average_fill)

        # Almost-empty bonus
        almost_empty_threshold = 0.9 - 0.05 * average_fill
        almost_empty = bins_remain_cap > almost_empty_threshold
        if np.any(almost_empty):
            almost_empty_bonus = 0.5 + 0.4 * (bins_remain_cap[almost_empty] - almost_empty_threshold) / (1 - almost_empty_threshold + 1e-9)
            priorities[almost_empty] += almost_empty_bonus

        # Exploration: Add a small amount of randomness
        exploration_factor = 0.005 * item * (1-average_fill)
        priorities += np.random.uniform(-exploration_factor, exploration_factor, size=num_bins)

    else:
        priorities[:] = -100

    return priorities
```
