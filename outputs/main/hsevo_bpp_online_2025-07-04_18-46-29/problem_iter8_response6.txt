```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using best fit, target fullness, and adaptive penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    potential_bins = bins_remain_cap >= item

    if np.any(potential_bins):
        # Best Fit Component: Prioritize bins with minimal waste.
        waste = bins_remain_cap[potential_bins] - item
        priorities[potential_bins] += np.exp(-waste)

        # Encourage filling bins closer to full, more directly.
        priorities[potential_bins] += (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]

        # Adaptive Fragmentation Penalty: Penalize near-full bins adaptively.
        near_full = (bins_remain_cap[potential_bins] < item * 1.1)
        priorities[potential_bins[near_full]] -= 0.5 

        # Introduce tiny Randomness for exploration
        priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    else:
        priorities[:] = -0.0001
    return priorities
```
