```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, best fit, fragmentation, and exploration with adaptive weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_size = 1.0

    # Fill Ratio Preference
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratio = (bins_remain_cap[potential_bins] - item) / bin_size
        priorities[potential_bins] += fill_ratio

    # Best Fit Encouragement (Adaptive Weight)
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        average_fill = np.mean((bin_size - bins_remain_cap) / bin_size) if num_bins > 0 else 0.0
        best_fit_weight = 1.0 + (1.0 - average_fill)
        priorities[best_fit_bins] += best_fit_weight

    # Fragmentation Penalty (Adaptive)
    remaining_space = bins_remain_cap - item
    average_remaining = np.mean(bins_remain_cap) if num_bins > 0 else 0.0
    fragmentation_threshold_multiplier = 0.2 * (1.0 - average_remaining / bin_size)
    fragmentation_threshold = item * fragmentation_threshold_multiplier
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    fragmentation_penalty = 0.5 + (item / bin_size)
    priorities[fragmented_bins] -= fragmentation_penalty
    
    # Exploration Bonus (Adaptive probability)
    exploration_prob = 0.05 * (1 + average_fill)
    if np.random.rand() < exploration_prob:
        exploration_bonus = (bin_size - bins_remain_cap) / bin_size
        priorities += exploration_bonus * 0.2
    
    # Fill percentage incentive
    if np.any(potential_bins):
        fill_percentage = item / (bin_size - bins_remain_cap[potential_bins])
        high_fill_bins = (fill_percentage > 0.7) & (fill_percentage <= 1.0)

        if np.any(high_fill_bins):
            eligible_bins_index = np.where(potential_bins)[0][high_fill_bins]
            priorities[eligible_bins_index] += 0.5

    # Target fill bonus, adaptive target (from v1)
    if np.any(potential_bins):
        target_fill = 0.7 + 0.1 * average_fill
        ideal_remaining = bin_size - target_fill
        distance_to_ideal = np.abs((bins_remain_cap[potential_bins] - item) - ideal_remaining)
        priorities[potential_bins] += np.exp(-distance_to_ideal * 6)

    return priorities
```
