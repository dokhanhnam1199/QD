```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive fill ratio, best fit, frag. penalty & reuse, exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_size = 1.0
    average_fill = np.mean((bin_size - bins_remain_cap) / bin_size) if num_bins > 0 else 0.0

    # Adaptive Fill Ratio
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        fill_ratio = item / (bins_remain_cap[eligible_bins] + 1e-6)
        fill_ratio_weight = 0.7 + 0.1 * item * (1 + average_fill)
        priorities[eligible_bins] += fill_ratio_weight * fill_ratio

    # Best Fit with Exponential Decay
    capacity_diff = bins_remain_cap - item
    if np.any(eligible_bins):
        remaining_space = bins_remain_cap[eligible_bins] - item
        best_fit_weight = 1.5 + 0.5 * (1 - average_fill)
        priorities[eligible_bins] += best_fit_weight * np.exp(-3 * remaining_space)

    # Adaptive Fragmentation Penalty
    remaining_space_all = bins_remain_cap - item
    fragmentation_threshold = item * (0.1 + 0.05 * item)
    fragmented_bins = (remaining_space_all > 0) & (remaining_space_all <= fragmentation_threshold)
    fragmentation_penalty = 1.3 + 0.2 * average_fill
    priorities[fragmented_bins] -= fragmentation_penalty

    # Reuse Almost Empty Bins
    almost_empty_threshold = 0.9 - 0.1 * average_fill
    almost_empty = bins_remain_cap > almost_empty_threshold
    if np.any(almost_empty):
        almost_empty_bonus = 0.2
        priorities[almost_empty] += almost_empty_bonus

    # State-Aware Exploration
    exploration_probability = 0.05 * (1.0 - average_fill)
    if np.random.rand() < exploration_probability:
        exploration_bonus = (bin_size - bins_remain_cap) / bin_size
        priorities += exploration_bonus * 0.1

    # High fill incentive
    if np.any(eligible_bins):
        fill_percentage = item / (bin_size - bins_remain_cap[eligible_bins])
        high_fill_bins = (fill_percentage > 0.7) & (fill_percentage <= 1.0) # Limit the value of fill_percentage to 1

        if np.any(high_fill_bins):
            eligible_bins_index = np.where(eligible_bins)[0][high_fill_bins]
            priorities[eligible_bins_index] += 0.3 # smaller bonus than v1

    return priorities
```
