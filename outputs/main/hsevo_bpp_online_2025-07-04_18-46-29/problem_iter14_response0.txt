```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill-ratio, fragmentation, and bin-use count adaptively."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    item_size_factor = min(1.0, item)

    # 1. Fill Ratio
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratios = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += fill_ratios * (0.7 + 0.3 * item_size_factor)

    # 2. Best Fit
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += 1.5 + 0.5 * item_size_factor

    # 3. Fragmentation Penalty
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * (0.2 + 0.1 * item_size_factor)
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= 1.0 + 0.2 * item_size_factor

    # 4. Encourage almost empty bin usage.
    almost_empty_threshold = 0.9
    almost_empty = bins_remain_cap > almost_empty_threshold
    if np.any(almost_empty):
        priorities[almost_empty] += 0.5 + 0.1 * item_size_factor

    # 5. Discourage too empty bins after packing.
    too_empty_threshold = 0.75
    too_empty = remaining_space > too_empty_threshold
    if np.any(too_empty):
        priorities[too_empty] -= 0.4 * item_size_factor

    #6. Add small bonus to bins that can accommodate the item (tie breaker).
    if np.any(eligible_bins):
      priorities[eligible_bins] += 0.01

    else:
       priorities[:] = -0.001 # Discourage if no suitable bin
        
    return priorities
```
