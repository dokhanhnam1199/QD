```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. First Fit Preference: Add a base preference for the first bin that fits. This encourages initial packing.
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        first_fit_index = np.argmax(potential_bins) # Finds the index of the first True value
        priorities[first_fit_index] += 0.75


    # 2. Best Fit Encouragement: Prioritize bins that are close to the item size, reducing fragmentation.
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        diffs = bins_remain_cap[eligible_bins] - item
        best_fit_index = np.argmin(diffs)
        indices = np.where(eligible_bins)[0]
        priorities[indices[best_fit_index]] += 1.0


    # 3. Capacity Utilization: Reward bins that will be filled significantly by adding the item.  Avoid bins that will be left with tiny slivers.
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        fill_ratios = item / bins_remain_cap[eligible_bins]
        priorities[eligible_bins] += fill_ratios * 0.5  # Scale the reward

    # 4. Avoidance of Small Remaining Space: Heavily penalize bins that will be left with very little space after adding the item.
    remaining_space = bins_remain_cap - item
    nearly_empty = (remaining_space > 0) & (remaining_space < 0.1)  # e.g., less than 10% remaining
    priorities[nearly_empty] -= 2.0 # High penalty


    # 5. Moderate penalty for almost full bins.
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap < item * 1.2)
    if np.any(almost_full):
        priorities[almost_full] -= 0.2

    return priorities
```
