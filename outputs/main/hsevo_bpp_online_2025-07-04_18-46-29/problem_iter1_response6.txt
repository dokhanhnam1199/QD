```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the event horizon and information paradox, we want to balance
    packing efficiency with preventing overly full bins (approaching singularity).
    Uses a modified sigmoid function to prioritize bins based on remaining capacity
    relative to item size, with a preference for bins slightly larger than the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero or negative values by adding a small epsilon.
    epsilon = 1e-9
    
    # Calculate a ratio of item size to remaining bin capacity.
    ratios = item / (bins_remain_cap + epsilon)

    # Sigmoid-like function to prioritize bins:
    #   - Near 1: Bin is only slightly larger than the item (high priority).
    #   - Approaching 0: Bin is much larger than the item (lower priority).
    #   - > 1: Item doesn't fit (very low priority).

    priorities = 1 / (1 + np.exp(5 * (ratios - 1)))  # Steep sigmoid around ratio = 1.

    # Add a small bonus to bins that *can* accommodate the item, but are not overflowing.
    can_fit = (bins_remain_cap >= item)
    priorities[can_fit] += 0.1 * (1 - ratios[can_fit]) #Smaller ratio gives bigger bonus for fitting bin. Ratio has to be smaller than 1.

    # Apply heavy penalization when item doesn't fit
    cannot_fit = (bins_remain_cap < item)
    priorities[cannot_fit] -= 10 # Big Penalty

    return priorities
```
