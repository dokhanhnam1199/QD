```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, best fit, fragmentation penalty and almost empty reuse."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Fill Ratio - adjusted for sensitivity
        fill_ratio = item / (bins_remain_cap[eligible_bins] + 0.0001)  # Avoid division by zero
        priorities[eligible_bins] += 0.8 * fill_ratio  #Reduced sensitivity

        # Best Fit - with exponential decay
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] += 1.2*np.exp(-2 * remaining_space) #Best fit bonus

    # Fragmentation Penalty - Dynamic threshold
    remaining_space_all = bins_remain_cap - item
    fragmentation_threshold = item * 0.2
    fragmented_bins = (remaining_space_all > 0) & (remaining_space_all <= fragmentation_threshold)
    priorities[fragmented_bins] -= 1.0  #Slightly decreased penalty

     # Almost empty reuse
    almost_empty_threshold = 0.95
    almost_empty = bins_remain_cap > almost_empty_threshold
    if np.any(almost_empty):
        priorities[almost_empty] += 0.7 #almost empty reuse bonus.

    #Balance the empty bins
    bin_capacity_normalized = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else np.zeros_like(bins_remain_cap)
    priorities += 0.05*bin_capacity_normalized

    return priorities
```
