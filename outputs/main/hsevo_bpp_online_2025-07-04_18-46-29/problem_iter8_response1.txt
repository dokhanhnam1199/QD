```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, adaptive waste penalty, and bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Fill Ratio (Sigmoid)
        fill_ratio = item / bins_remain_cap[eligible_bins]
        fill_ratio = 1 / (1 + np.exp(-5 * (fill_ratio - 0.5)))
        priorities[eligible_bins] += fill_ratio

        # Adaptive Waste Penalty
        waste = bins_remain_cap[eligible_bins] - item
        waste_penalty = np.exp(waste / np.mean(bins_remain_cap[eligible_bins])) - 1 if np.mean(bins_remain_cap[eligible_bins]) > 0 else 0
        priorities[eligible_bins] -= waste_penalty
        
    # Bin Balancing: Reward bins with capacity far from mean capacity
    bin_capacity_mean = np.mean(bins_remain_cap)
    capacity_difference = np.abs(bins_remain_cap - bin_capacity_mean)
    capacity_balance_reward = np.exp(-capacity_difference/np.std(bins_remain_cap)) if np.std(bins_remain_cap) > 0 else 0
    priorities += capacity_balance_reward * 0.1

    return priorities
```
