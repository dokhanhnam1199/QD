```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Capacity Utilization: Encourage filling bins effectively
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        utilization_ratio = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += (1 - utilization_ratio)**2  # Higher priority for better utilization

    # 2. Smallest Remaining Capacity: First-Fit Decreasing concept
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_remaining = np.min(bins_remain_cap[eligible_bins])
        priorities[bins_remain_cap == min_remaining] += 2  # High priority

    # 3. Fragmentation Penalty: Penalize bins that might lead to fragmentation
    fragmentation_risk = (bins_remain_cap - item)  # Remaining space after item placement
    priorities[potential_bins] -= np.exp(-5 * fragmentation_risk[potential_bins])  # Exponential penalty
    
    # 4. Balancing Factor:  Prioritize bins that are neither too full nor too empty
    bin_fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap)) #scale it
    priorities[potential_bins] += np.exp(-10 * np.abs(bin_fullness[potential_bins] - 0.5)) #middle range priority
    
    # 5. Item Size Consideration: Adapt based on item size
    priorities[potential_bins] += item / np.max(bins_remain_cap)   # Larger items get more priority
    
    # 6. Sigmoid Smoothing:  Smooth transitions for a more gradual effect
    priorities = 1 / (1 + np.exp(-priorities))
    
    return priorities
```
