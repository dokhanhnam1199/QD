```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return priorities #No valid bin for the item

    # Prioritize bins that have just enough space.
    diffs = bins_remain_cap - item
    diffs[diffs < 0 ] = np.inf #Mark invalid bins as infinity distance
    priorities = -diffs
    priorities[~possible_bins] = -np.inf

    #Boosting Priorities for Almost Full Bins: Scale remaining capacity
    almost_full_threshold = 0.1 #Threshold of capacity
    almost_full_bins = bins_remain_cap <= (1+almost_full_threshold) * item  # Bins where remaining space is little more than the current item's size
    priorities[almost_full_bins] += 1  # A nudge toward utilizing those spaces more optimally

    return priorities
```
