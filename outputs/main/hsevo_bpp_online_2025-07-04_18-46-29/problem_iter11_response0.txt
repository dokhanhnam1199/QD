```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, first fit bias, near fit bonus, and dynamic fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # First Fit Preference with a slight bias for fuller bins.
        priorities[eligible_bins] = 1 / (bins_remain_cap[eligible_bins] + 0.0001)

        # Best Fit Encouragement
        capacity_diff = np.abs(bins_remain_cap - item)
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = (capacity_diff == min_diff) & eligible_bins
        priorities[best_fit_bins] += 2

        # Near Fit bonus: Reward bins slightly larger than item
        near_fit_threshold_upper = item * 1.2
        near_fit_bins = (bins_remain_cap >= item) & (bins_remain_cap <= near_fit_threshold_upper)
        priorities[near_fit_bins] += 0.5 * priorities[near_fit_bins]

        # Adaptive Fragmentation Penalty: Penalize almost-full bins
        near_full_threshold = 0.95
        near_full = (bins_remain_cap >= item) & (bins_remain_cap - item <= (1 - near_full_threshold) * bins_remain_cap)
        if np.any(near_full):
            priorities[near_full] -= 1 / (1 + np.exp(-100*(bins_remain_cap[near_full] - item - (1 - near_full_threshold) * bins_remain_cap[near_full])))

    else:
        priorities[:] = -1  # Item doesn't fit

    return priorities
```
