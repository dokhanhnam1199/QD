```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, target fullness, and adaptive penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    potential_bins = bins_remain_cap >= item

    if np.any(potential_bins):
        # Best Fit Component: Prioritize bins with minimal waste.
        waste = bins_remain_cap[potential_bins] - item
        priorities[potential_bins] += np.exp(-waste) # Use exponential to prioritize close fits

        # Target Fullness Component: Encourage bins to reach a target fullness.
        fullness_after_packing = (bins_remain_cap[potential_bins] - waste) / np.max(bins_remain_cap)
        target_fullness = 0.8
        fullness_diff = np.abs(fullness_after_packing - target_fullness)
        priorities[potential_bins] += np.exp(-fullness_diff * 5)  # Prioritize fullness near target

        # Adaptive Fragmentation Penalty: Penalize bins based on remaining capacity relative to item size.
        frag_penalty = (bins_remain_cap[potential_bins] / np.max(bins_remain_cap)) * (item / np.max(bins_remain_cap))
        priorities[potential_bins] -= frag_penalty * 0.5  # Scale the penalty

        # Introduce tiny Randomness for exploration
        priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    else:
        priorities[:] = -0.0001
    return priorities
```
