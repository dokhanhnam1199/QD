```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill-ratio, and fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Fill Ratio Preference
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        priorities[potential_bins] = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        
    # 2. Best Fit Encouragement
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += 1.8

    # 3. Fragmentation Penalty (Adaptive)
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * 0.2  
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= 1.3

    # 4. Encourage re-use of almost empty bins.
    almost_empty_threshold = 0.95 #If more than 95% empty give it a boost
    almost_empty = bins_remain_cap > (1-almost_empty_threshold) #bin size set to 1
    if np.any(almost_empty):
        priorities[almost_empty] += 0.7
    
    return priorities
```
