```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, fill ratio, adaptive fragmentation, bin utilization and adaptive exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0
    num_bins = len(bins_remain_cap)

    # Fill Ratio Preference
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratio = (bins_remain_cap[potential_bins] - item) / bin_size
        priorities[potential_bins] += 0.7 * fill_ratio

    # Best Fit Encouragement (Adaptive Weight)
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        average_fill = np.mean((bin_size - bins_remain_cap) / bin_size) if num_bins > 0 else 0.0
        best_fit_weight = 1.5 + (1.0 - average_fill)  # Increase best-fit weight
        priorities[best_fit_bins] += best_fit_weight

    # Fragmentation Penalty (Adaptive)
    remaining_space = bins_remain_cap - item
    average_remaining = np.mean(bins_remain_cap) if num_bins > 0 else 0.0
    fragmentation_threshold_multiplier = 0.2 * (1.0 - average_remaining / bin_size)
    fragmentation_threshold = item * fragmentation_threshold_multiplier
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    fragmentation_penalty = 1.3 + (item / bin_size)
    priorities[fragmented_bins] -= fragmentation_penalty

    # Encourage re-use of almost empty bins
    almost_empty_threshold = 0.95
    almost_empty = bins_remain_cap > (bin_size - almost_empty_threshold)
    if np.any(almost_empty):
        priorities[almost_empty] += 0.8  # Consistent bonus

    # Bin Utilization Bonus
    utilization = (bin_size - bins_remain_cap) / bin_size
    fully_utilized_threshold = 0.8  # Tune this
    highly_utilized = utilization > fully_utilized_threshold
    utilization_bonus = 0.5
    priorities[highly_utilized] += utilization_bonus

    # Adaptive Exploration Bonus (State-Aware)
    exploration_rate = 0.05 * (1.0 - average_fill) #Exploration rate decreases with fill level

    if np.random.rand() < exploration_rate:
        exploration_bonus = (bin_size - bins_remain_cap) / bin_size
        priorities += exploration_bonus * 0.2

    return priorities
```
