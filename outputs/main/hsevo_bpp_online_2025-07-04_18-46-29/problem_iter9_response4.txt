```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Encourage filling bins closer to full, scaled by item size.
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
      priorities[potential_bins] = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins] * item

    # Prioritize bins with smallest remaining capacity that can still fit the item.
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
      min_remaining = np.min(bins_remain_cap[eligible_bins])
      priorities[bins_remain_cap == min_remaining] += 1.5 # slightly increased priority for smallest

    # Add a bonus for bins that would be filled to a "good" level. Target is 80% full.
    target_fill = 0.8
    ideal_remaining = 1 - target_fill # Assuming bin size is 1
    
    #Calculate the 'distance' to the ideal remaining capacity after placing the item
    distance_to_ideal = np.abs((bins_remain_cap - item) - ideal_remaining)
    
    #Give a bonus inversely proportional to the distance, but only to eligible bins.
    if np.any(eligible_bins):
      priorities[eligible_bins] += np.exp(-distance_to_ideal[eligible_bins] * 5) # Scale distance for better effect
    
    # Penalize near-full bins more heavily to allow more flexibility for the next item, mitigating fragmentation, and also bins that are almost empty.
    near_full = (bins_remain_cap < item * 1.1) & (bins_remain_cap >= item)
    near_empty = (bins_remain_cap > (1 - item * 0.1)) # Check if remaining capacity is close to full bin capacity after putting item
    
    if np.any(near_full):
        priorities[near_full] -= 1.0 #increased penalty
    
    if np.any(near_empty):
        priorities[near_empty] -= 0.75

    return priorities
```
