```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First-Fit Decreasing inspired: prioritize bins where item fits best
            space_utilization = item / cap
            waste = cap - item

            #Prioritize full bins if possible.
            if waste == 0:
                priorities[i] = 1000 #Max priority to indicate perfect fit

            #Prioritize the almost full ones.
            elif (waste / cap) < 0.1:
                priorities[i] = 100
                
            # Base priority increases as space utilization increases but penalize wasted space significantly.
            else:
                priorities[i] = space_utilization * (1 - (waste / np.sum(bins_remain_cap)))

        else:
            # Item does not fit: priority = 0.
            priorities[i] = -100 #Very Low prioirty.

    return priorities
```
