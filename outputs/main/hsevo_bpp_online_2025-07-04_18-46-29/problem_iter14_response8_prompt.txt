{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines best-fit, fill-ratio, fragmentation penalty, and bin-usage encouragement\n    with adaptive weights and state-dependent logic.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    num_bins = len(bins_remain_cap)\n    \n    # Adaptive Weights (based on item size and bin availability)\n    item_size_factor = min(1.0, item)  # Normalize item size\n    bin_availability_factor = min(1.0, np.sum(bins_remain_cap >= item) / num_bins)\n\n    fill_ratio_weight = 0.5 + 0.3 * item_size_factor\n    best_fit_weight = 1.5 + 0.5 * bin_availability_factor\n    fragmentation_penalty_weight = 1.0 + 0.2 * item_size_factor\n    reuse_weight = 0.6 + 0.4*bin_availability_factor\n    large_bin_bonus_weight = 0.3\n\n    # 1. Fill Ratio Preference\n    potential_bins = bins_remain_cap >= item\n    if np.any(potential_bins):\n        priorities[potential_bins] += fill_ratio_weight * (item / bins_remain_cap[potential_bins])\n\n    # 2. Best Fit Encouragement\n    capacity_diff = np.abs(bins_remain_cap - item)\n    eligible_bins = bins_remain_cap >= item\n    if np.any(eligible_bins):\n        min_diff = np.min(capacity_diff[eligible_bins])\n        best_fit_bins = capacity_diff == min_diff\n        priorities[best_fit_bins] += best_fit_weight\n\n    # 3. Fragmentation Penalty (Adaptive Threshold)\n    remaining_space = bins_remain_cap - item\n    fragmentation_threshold = item * (0.1 + 0.1 * item_size_factor)  #Adaptive threshold\n    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)\n    priorities[fragmented_bins] -= fragmentation_penalty_weight\n\n    # 4. Encourage re-use of almost empty bins.\n    almost_empty_threshold = 0.95  # If more than 95% empty give it a boost\n    almost_empty = bins_remain_cap > (1 - almost_empty_threshold)  # bin size set to 1\n    if np.any(almost_empty):\n        priorities[almost_empty] += reuse_weight\n\n    #5. Bonus for larger bins if item is small\n    if item_size_factor < 0.3:\n        large_bins = bins_remain_cap > 0.7\n        if np.any(large_bins):\n            priorities[large_bins] += large_bin_bonus_weight\n    \n    #6. Penalize bins that are close to full but can't fit the item\n    too_full_bins = (bins_remain_cap < item) & (bins_remain_cap > (item-0.2))\n    priorities[too_full_bins] -= 0.8\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines fill ratio, best fit, fragmentation penalty and almost empty reuse.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Fill Ratio - adjusted for sensitivity\n        fill_ratio = item / (bins_remain_cap[eligible_bins] + 0.0001)  # Avoid division by zero\n        priorities[eligible_bins] += 0.8 * fill_ratio  #Reduced sensitivity\n\n        # Best Fit - with exponential decay\n        remaining_space = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] += 1.2*np.exp(-2 * remaining_space) #Best fit bonus\n\n    # Fragmentation Penalty - Dynamic threshold\n    remaining_space_all = bins_remain_cap - item\n    fragmentation_threshold = item * 0.2\n    fragmented_bins = (remaining_space_all > 0) & (remaining_space_all <= fragmentation_threshold)\n    priorities[fragmented_bins] -= 1.0  #Slightly decreased penalty\n\n     # Almost empty reuse\n    almost_empty_threshold = 0.95\n    almost_empty = bins_remain_cap > almost_empty_threshold\n    if np.any(almost_empty):\n        priorities[almost_empty] += 0.7 #almost empty reuse bonus.\n\n    #Balance the empty bins\n    bin_capacity_normalized = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else np.zeros_like(bins_remain_cap)\n    priorities += 0.05*bin_capacity_normalized\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the first one uses fixed weights for different criteria (fill ratio, best fit, fragmentation, almost empty), while the last one uses adaptive weights based on bin capacity, item size, and the overall state of bins. (2nd best) vs (second worst) shows similar pattern.\nComparing (1st) vs (2nd), we observe that the second one introduces adaptive weighting based on item size and includes a discouragement for bins that are \"too empty\" after placement, which the first one doesn't have.\nComparing (3rd) vs (4th), the third uses the same approach as the second. The forth one introduces the concept of \"target fill\" and calculates the distance to the ideal fill, as well as using direct values instead of a scaling factor.\nComparing (second worst) vs (worst), they are nearly identical.\nOverall: The better heuristics tend to incorporate adaptive weighting mechanisms, state-dependent logic, and target specific fill levels, while also penalizing undesirable states like excessive fragmentation or near-empty bins after placement. The worse heuristics use fixed weights and lack a global perspective on the bin states.\n- \nOkay, let's refine \"Current self-reflection\" to design better bin packing heuristics, avoiding the pitfalls of \"Ineffective self-reflection.\"\n\nHere's a breakdown to guide your thinking:\n\n*   **Keywords:** Multi-objective, Adaptive, Balanced, Exploration, State-aware.\n\n*   **Advice:** Construct a clear objective function combining fill rate, waste, and fragmentation. Dynamically adjust weights and incentives based on the *global* state of bins. Incorporate controlled randomness.\n\n*   **Avoid:** Static weights, myopic optimization focusing only on individual bins, and overly complex heuristics from the start.\n\n*   **Explanation:** Effective heuristics require a balanced approach. Adaptive weighting, state awareness, and strategic exploration prevent getting stuck in local optima, while incremental complexity ensures understandability and tunability.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}