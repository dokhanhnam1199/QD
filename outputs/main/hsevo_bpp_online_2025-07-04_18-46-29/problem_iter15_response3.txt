```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill-ratio, fragmentation penalty, and bin utilization awareness with adaptive weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # ----------------------------------------------------------------------
    # --- Adaptive Weighting based on Bin Utilization ---
    # ----------------------------------------------------------------------
    avg_bin_utilization = np.mean(1 - bins_remain_cap)  # average fill level of bins
    utilization_factor = 1.0 + (avg_bin_utilization - 0.5)  # Adjust around 0.5 utilization

    # ----------------------------------------------------------------------
    # --- 1. Fill Ratio Preference (Enhanced) ---
    # ----------------------------------------------------------------------
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratios = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += fill_ratios * utilization_factor

    # ----------------------------------------------------------------------
    # --- 2. Best Fit Encouragement (Adaptive) ---
    # ----------------------------------------------------------------------
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        best_fit_weight = 1.5 * utilization_factor # Adaptive weight
        priorities[best_fit_bins] += best_fit_weight

    # ----------------------------------------------------------------------
    # --- 3. Fragmentation Penalty (Adaptive) ---
    # ----------------------------------------------------------------------
    remaining_space = bins_remain_cap - item
    fragmentation_threshold_multiplier = 0.2 - (avg_bin_utilization/5) #Dynamic Threshold
    fragmentation_threshold = item * fragmentation_threshold_multiplier
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    fragmentation_penalty = 1.3 * utilization_factor #Adaptive Penalty
    priorities[fragmented_bins] -= fragmentation_penalty

    # ----------------------------------------------------------------------
    # --- 4. Encourage re-use of almost empty bins (Adaptive) ---
    # ----------------------------------------------------------------------
    almost_empty_threshold = 0.9 + (avg_bin_utilization / 10)
    almost_empty = bins_remain_cap > (1 - almost_empty_threshold)  # bin size set to 1
    if np.any(almost_empty):
        almost_empty_bonus = 0.8 * utilization_factor
        priorities[almost_empty] += almost_empty_bonus

    # ----------------------------------------------------------------------
    # --- 5. Penalize bins that are too full ---
    # ----------------------------------------------------------------------
    too_full_threshold = item > bins_remain_cap
    priorities[too_full_threshold] = -np.inf

    # ----------------------------------------------------------------------
    # --- 6. Exploration: Add small random noise to encourage exploration ---
    # ----------------------------------------------------------------------
    noise = np.random.normal(0, 0.01, num_bins)  # Small Gaussian noise
    priorities += noise

    return priorities
```
