```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit and fill fraction, avoids overfilling."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Best-fit component (minimizes waste)
        waste = bins_remain_cap[eligible_bins] - item
        best_fit_priority = 1 / (waste + 1e-6)

        # Fill-fraction component (prioritizes efficient fills)
        fill_fraction = item / bins_remain_cap[eligible_bins]
        fill_fraction_priority = fill_fraction

        # Combined priority (weighted average)
        priorities[eligible_bins] = 0.6 * best_fit_priority + 0.4 * fill_fraction_priority

        # Penalize near-full bins to avoid overfilling
        near_full = bins_remain_cap[eligible_bins] < 1.1 * item  # Adjust the 1.1 factor if needed
        priorities[eligible_bins][near_full] *= 0.5  # Reduce priority for near-full bins
    else:
        # No bin can fit, prioritize larger capacity for the future.
        priorities = bins_remain_cap

    return priorities
```
