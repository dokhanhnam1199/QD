```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, target fill, and fragmentation penalty with tuning."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    
    if np.any(valid_bins):
        # Best-fit component (minimize waste)
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] -= np.abs(waste)  # Lower waste is better

        # Target fill bonus (around 80% full)
        target_fill = 0.8
        ideal_remaining = 1 - target_fill
        distance_to_ideal = np.abs((bins_remain_cap[valid_bins] - item) - ideal_remaining)
        priorities[valid_bins] += np.exp(-distance_to_ideal * 5)  # Closer to ideal is better
        
        # Fragmentation penalty (discourage near-full bins)
        near_full_threshold = 0.1
        near_full = (bins_remain_cap >= item) & (bins_remain_cap < (item * (1 + near_full_threshold)))
        priorities[near_full] -= 1.2 #Increased Penalty
        
        # Encourage near-empty reuse
        near_empty_threshold = 0.1
        near_empty = bins_remain_cap > (1 - item * near_empty_threshold)
        priorities[near_empty] -= 0.75
    else:
        priorities[:] = -100  # Discourage invalid placements
    
    return priorities
```
