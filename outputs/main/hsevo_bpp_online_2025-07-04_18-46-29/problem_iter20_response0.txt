```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive fill ratio, best-fit, fragmentation, and exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item
    num_bins = len(bins_remain_cap)
    average_fill = np.mean(1 - bins_remain_cap) if num_bins > 0 else 0.0
    item_size_factor = min(1.0, item)

    if np.any(eligible_bins):
        # 1. Adaptive Fill Ratio
        fill_ratio = item / bins_remain_cap[eligible_bins]
        priorities[eligible_bins] += (0.6 + 0.2 * item_size_factor) * fill_ratio

        # 2. Best Fit with Adaptive Item Size
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] += (0.7 + 0.1 * item_size_factor) * np.exp(-remaining_space)

        # 3. Adaptive Fragmentation Penalty
        max_bin_cap = np.max(bins_remain_cap) if np.any(bins_remain_cap) else 1.0
        fragmentation_penalty = 0.2 * (remaining_space / max_bin_cap) * (1 + item_size_factor)
        priorities[eligible_bins] -= fragmentation_penalty

        # 4. Encourage use of emptier bins
        bin_capacity_normalized = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else np.zeros_like(bins_remain_cap)
        priorities += 0.15 * (1-bin_capacity_normalized)

        # 5. Encourage re-use of almost empty bins
        almost_empty_threshold = 0.9 + 0.05 * item_size_factor
        almost_empty = bins_remain_cap > almost_empty_threshold
        if np.any(almost_empty):
            priorities[almost_empty] += 0.6 + 0.1 * item_size_factor
        
        # 6. Small bonus to eligible bins
        priorities[eligible_bins] += 0.01

    else:
       priorities[:] = -0.001 # Discourage if no suitable bin
    
    # 7. Exploration component
    exploration_factor = 0.005 * item * (1-average_fill)
    priorities += np.random.uniform(-exploration_factor, exploration_factor, size=num_bins)
    
    return priorities
```
