```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several heuristics:
    1.  Avoid bins that are too full (or will be too full) using a sigmoid function.
    2.  Prefer bins that have space close to the item size (first-fit-decreasing heuristic inspired).
    3.  Prioritize bins that are almost full after adding the item, but not overfull. This encourages bin completion.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Sigmoid function to penalize bins that are close to full.  Avoids excessive fragmentation.
    sigmoid = 1 / (1 + np.exp(10 * (item - bins_remain_cap))) # Sharp sigmoid around item = remaining capacity

    # Prioritize bins whose remaining capacity is close to the item size, but don't allow negatives
    capacity_difference = np.maximum(0, 1 - np.abs(bins_remain_cap - item) / np.max([1e-6, np.mean(bins_remain_cap)])) # Avoid div by 0

    # Boost priority for bins that become nearly full after packing the item.  Prioritize near-completion, not overflow.
    completion_bonus = np.where((bins_remain_cap - item >= 0), np.exp(-10*(bins_remain_cap - item)), -np.inf)  # Heavily penalize overflow

    priorities = sigmoid + 0.5 * capacity_difference + completion_bonus # Combine the heuristics.

    return priorities
```
