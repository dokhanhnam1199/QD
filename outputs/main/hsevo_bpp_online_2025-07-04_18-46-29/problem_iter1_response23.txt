```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Immediate Fit: Highest priority for bins that can fit perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # High priority for perfect fit

    # Next Fit Heuristic: If the last used bin can fit, give it a high priority.
    # This encourages using the same bin repeatedly when possible.
    if len(bins_remain_cap) > 0 and bins_remain_cap[0] >= item and not perfect_fit[0]:
        priorities[0] = 500

    # First Fit Decreasing (modified): Prioritize bins with enough space, but not too much
    # Avoids leaving very small spaces.  Balances bin utilization.

    enough_space = bins_remain_cap >= item
    small_space_left = bins_remain_cap - item < 0.1  # Arbitrary small value relative to bin size

    priorities[enough_space & ~perfect_fit] = (bins_remain_cap[enough_space & ~perfect_fit] - item) / np.max(bins_remain_cap)
    priorities[enough_space & ~perfect_fit] = 1 - priorities[enough_space & ~perfect_fit] #Higher score given to those that are less empty after insertion

    return priorities
```
