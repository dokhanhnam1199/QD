```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin.  Bins with insufficient capacity get large negative priority
    waste = bins_remain_cap - item
    priorities[waste < 0] = -np.inf
    waste[waste < 0] = np.inf  # Avoid further calculations for invalid bins

    # Prioritize bins with least waste (First Fit heuristic-like)
    priorities += 1.0 / (waste + 1e-6)  # Adding a small constant to avoid division by zero

    # Prioritize bins where the item fills a significant portion (fraction) of bin capacity.
    fill_fraction = item / bins_remain_cap
    priorities += fill_fraction

    # Slightly prioritize bins already containing items (reduces bin fragmentation, improves later packing)
    # Assuming empty bins have initial remaining capacity (i.e. equal to the bin size).  High remain capacity indicate empty
    # Prioritization increases as the bin becomes fuller
    priorities += (1 - bins_remain_cap / np.max(bins_remain_cap)) * 0.5

    return priorities
```
