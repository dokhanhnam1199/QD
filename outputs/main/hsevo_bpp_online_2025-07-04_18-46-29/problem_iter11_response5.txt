```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, best fit, bin balancing, and fragmentation avoidance."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Fill Ratio (Encourage fuller bins)
        fill_ratio = item / bins_remain_cap[eligible_bins]
        priorities[eligible_bins] += fill_ratio

        # Best Fit (Minimize wasted space)
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] += np.exp(-remaining_space * 2)

    # Bin Balancing (Distribute items across bins, avoid single bin domination)
    bin_capacity_normalized = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    priorities += 0.1 * bin_capacity_normalized

    # Fragmentation Penalty (Discourage leaving small spaces)
    near_full = (bins_remain_cap < item * 1.1) & (bins_remain_cap >= item)
    if np.any(near_full):
        priorities[near_full] -= 0.5

    # Target fill bonus.
    target_fill = 0.8
    ideal_remaining = 1 - target_fill
    distance_to_ideal = np.abs((bins_remain_cap - item) - ideal_remaining)

    if np.any(eligible_bins):
      priorities[eligible_bins] += np.exp(-distance_to_ideal[eligible_bins] * 5)
    return priorities
```
