```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, fill ratio, and fragmentation avoidance."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Fill Ratio - scale by a factor
        fill_ratio = item / bins_remain_cap[eligible_bins]
        priorities[eligible_bins] += fill_ratio * 0.7

        # Best Fit - encourage packing to tightest fitting bin
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] += np.exp(-5 * remaining_space)

        # Fragmentation Penalty-Adaptive-heavier penalty for very small remaining spaces
        remaining_space = bins_remain_cap - item
        nearly_empty = (remaining_space > 0) & (remaining_space < 0.1)
        priorities[nearly_empty] -= 3.0 # stronger penality

        #First fit preference
        first_fit_index = np.argmax(eligible_bins)
        priorities[first_fit_index] += 0.5


    return priorities
```
