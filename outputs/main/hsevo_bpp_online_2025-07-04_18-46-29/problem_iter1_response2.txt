```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: "Near Fit" - Bins with remaining capacity closest to the item size get higher priority.
    near_fit = np.abs(bins_remain_cap - item)
    near_fit_priority = -near_fit  # Lower difference means higher priority

    # Heuristic 2: "Capacity Usage" - Favor bins that can be filled reasonably well.
    capacity_usage = item / bins_remain_cap
    capacity_usage_priority = np.clip(capacity_usage, 0, 1) # Clip to avoid inf/NaN

    # Heuristic 3: Avoid excessive fragmentation. Add a penalty to bins that will have too much space after packing
    fragmentation_penalty = np.zeros_like(bins_remain_cap)
    too_much_space_mask = (bins_remain_cap - item) > 0.75  # e.g. More than 75% remaining after packing
    fragmentation_penalty[too_much_space_mask] = -1.0 # Penalize too much fragmentation
    cannot_fit = item > bins_remain_cap
    fragmentation_penalty[cannot_fit] = -np.inf

    # Combine the heuristics
    priorities = near_fit_priority + 0.5*capacity_usage_priority + fragmentation_penalty # tune the weights

    return priorities
```
