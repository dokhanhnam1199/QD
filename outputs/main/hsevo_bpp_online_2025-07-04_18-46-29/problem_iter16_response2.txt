import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                 fill_ratio_weight_base: float = 0.7015850492111375,
                 fill_ratio_weight_factor: float = 0.07369118267827224,
                 best_fit_weight_base: float = 1.6105821654509729,
                 best_fit_weight_factor: float = 0.4179222529272852,
                 fragmentation_penalty_weight_base: float = 0.6620007362928942,
                 fragmentation_penalty_weight_factor: float = 0.0511713961338372,
                 fragmentation_threshold_factor_base: float = 0.3933350310328125,
                 fragmentation_threshold_factor_item: float = 0.3090520894473386,
                 too_full_threshold: float = 0.042624629201415354,
                 too_full_penalty: float = 0.9126937059537394,
                 slightly_empty_threshold: float = 0.06067781205968209,
                 slightly_empty_penalty: float = 0.1046674639442996) -> np.ndarray:
    """Combines best-fit, fill-ratio, and adaptive fragmentation/waste penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    
    # Adaptive Weights (based on item size)
    item_size_factor = min(1.0, item)
    fill_ratio_weight = fill_ratio_weight_base + fill_ratio_weight_factor * item_size_factor
    best_fit_weight = best_fit_weight_base + best_fit_weight_factor * (1-item_size_factor)
    fragmentation_penalty_weight = fragmentation_penalty_weight_base + fragmentation_penalty_weight_factor * item_size_factor

    # 1. Fill Ratio Preference
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        priorities[potential_bins] += fill_ratio_weight * (item / bins_remain_cap[potential_bins])

    # 2. Best Fit Encouragement
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += best_fit_weight

    # 3. Fragmentation Penalty (Adaptive Threshold)
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * (fragmentation_threshold_factor_base + fragmentation_threshold_factor_item * item_size_factor)
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= fragmentation_penalty_weight

    # 4. Encourage utilization, discourage near-full but unusable bins
    too_full = (bins_remain_cap < item) & (bins_remain_cap > (item - too_full_threshold))
    priorities[too_full] -= too_full_penalty

    # 5. Slightly empty bin penalty
    slightly_empty = (bins_remain_cap > item) & (bins_remain_cap < (item + slightly_empty_threshold))
    priorities[slightly_empty] -= slightly_empty_penalty

    return priorities
