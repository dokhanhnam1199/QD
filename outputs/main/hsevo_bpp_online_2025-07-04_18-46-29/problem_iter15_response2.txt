```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """A multi-objective priority function for online bin packing, incorporating adaptive weighting and state awareness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # 1. Fill Ratio Priority (Normalized)
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratios = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += fill_ratios

    # 2. Best Fit Bonus (Adaptive Weight)
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        # Adaptive weight based on fill levels: Higher fill means a greater bonus
        average_fill = np.mean(1 - bins_remain_cap)  # Average fill level of bins
        best_fit_weight = 1.0 + (average_fill * 1.5) #Weight increases as bins become fuller
        priorities[best_fit_bins] += best_fit_weight

    # 3. Fragmentation Penalty (State-Aware)
    remaining_space = bins_remain_cap - item
    # Dynamically adjust fragmentation threshold based on the item size and number of bins
    fragmentation_threshold_multiplier = 0.2 / np.sqrt(num_bins)  #Smaller bins more susceptible to fragmentation
    fragmentation_threshold = item * fragmentation_threshold_multiplier
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    # Penalize fragmented bins less as the bins get fuller
    fragmentation_penalty = 1.0 - average_fill
    priorities[fragmented_bins] -= fragmentation_penalty

    # 4. Encourage Re-use of Almost Empty Bins (Dynamic Bonus)
    almost_empty_threshold = 0.05 + (0.05 * average_fill) # More selective for almost empty as bins fill
    almost_empty = bins_remain_cap > (1 - almost_empty_threshold)  # bin size is 1
    if np.any(almost_empty):
        almost_empty_bonus = 0.5 + average_fill * 0.5 #Bigger bonus as bins fill
        priorities[almost_empty] += almost_empty_bonus

    # 5. Exploration: Add a small amount of randomness, scaled to the item size.
    exploration_factor = 0.01 * item  # Scale randomness based on the item size
    priorities += np.random.uniform(-exploration_factor, exploration_factor, size=num_bins)

    return priorities
```
