```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive fill ratio, best fit, frag. penalty & reuse, exploration"""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    
    # Adaptive Weights - based on item size and global fill level
    item_size_factor = min(1.0, item)
    bin_availability_factor = min(1.0, np.sum(bins_remain_cap >= item) / num_bins)
    average_fill = np.mean(1 - bins_remain_cap)

    fill_ratio_weight = 0.5 + 0.3 * item_size_factor
    best_fit_weight = 1.5 + 0.5 * bin_availability_factor
    fragmentation_penalty_weight = 1.0 + 0.2 * item_size_factor
    reuse_weight = 0.6 + 0.4 * bin_availability_factor
    
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Fill Ratio - Adaptive
        fill_ratio = item / (bins_remain_cap[eligible_bins] + 0.0001)  # Avoid division by zero
        priorities[eligible_bins] += fill_ratio_weight * fill_ratio

        # Best Fit - Exponential decay
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] += best_fit_weight * np.exp(-2 * remaining_space) #Best fit bonus

    # Fragmentation Penalty - Dynamic threshold
    remaining_space_all = bins_remain_cap - item
    fragmentation_threshold_multiplier = 0.2 / np.sqrt(num_bins)
    fragmentation_threshold = item * (0.1 + 0.1 * item_size_factor) * fragmentation_threshold_multiplier
    fragmented_bins = (remaining_space_all > 0) & (remaining_space_all <= fragmentation_threshold)
    priorities[fragmented_bins] -= fragmentation_penalty_weight * (1-average_fill)

     # Almost empty reuse
    almost_empty_threshold = 0.95 - (0.1 * average_fill)
    almost_empty = bins_remain_cap > almost_empty_threshold
    if np.any(almost_empty):
        almost_empty_bonus = 0.5 + average_fill * 0.5
        priorities[almost_empty] += reuse_weight * almost_empty_bonus #almost empty reuse bonus.

    # Penalize bins that are close to full but can't fit the item
    too_full_bins = (bins_remain_cap < item) & (bins_remain_cap > (item-0.2))
    priorities[too_full_bins] -= 0.8

     # Exploration: Add a small amount of randomness, scaled to the item size.
    exploration_factor = 0.01 * item  # Scale randomness based on the item size
    priorities += np.random.uniform(-exploration_factor, exploration_factor, size=num_bins)

    return priorities
```
