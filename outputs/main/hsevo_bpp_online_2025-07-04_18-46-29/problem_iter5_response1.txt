```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, target fill, and residual capacity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Best Fit component: prioritize fuller bins
        remaining_space = bins_remain_cap[can_fit] - item
        fit_scores = 1 / (remaining_space + 1e-9)

        # Target fill ratio component (around 70%)
        fit_ratios = item / bins_remain_cap[can_fit]
        target_priority = np.exp(-np.abs(fit_ratios - 0.7))

        # Residual Capacity Penalty: Avoid leaving tiny spaces
        residual_penalty = np.abs(remaining_space / bins_remain_cap[can_fit])

        # Combine scores
        capacity_weights = bins_remain_cap[can_fit]/np.max(bins_remain_cap)
        combined_priority = (capacity_weights * fit_scores + (1 - capacity_weights) * target_priority) - 0.1*residual_penalty
        priorities[can_fit] = combined_priority

    else:
        # Prioritize larger bins when no fit exists
        priorities = bins_remain_cap

    return priorities
```
