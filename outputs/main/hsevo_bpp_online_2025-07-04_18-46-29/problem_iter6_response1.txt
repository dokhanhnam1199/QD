```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Objective Function: Combines multiple criteria for bin selection
    
    # 1. Fill Rate Priority: Prioritize bins that would be filled closest to a target fill rate.
    target_fill_rate = 0.9  # Aim for 90% fill
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        future_fill_levels = (bins_remain_cap[potential_bins] - item) / np.max(bins_remain_cap)
        fill_rate_diff = np.abs(future_fill_levels - (1 - target_fill_rate))
        priorities[potential_bins] += np.exp(-fill_rate_diff * 10)  # Exponential scaling for sensitivity


    # 2. Smallest Remaining Capacity (First Fit Decreasing Influence)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_remaining = np.min(bins_remain_cap[eligible_bins])
        priorities[bins_remain_cap == min_remaining] += 0.75  # A moderate boost

    # 3. Fragmentation Penalty: Penalize bins that, after adding the item, would leave a gap too small for common future items.
    # Define a 'small' item size as a fraction of the bin capacity
    small_item_threshold = np.max(bins_remain_cap) * 0.25
    remaining_after_fit = bins_remain_cap - item
    fragmentation_risk = (remaining_after_fit > 0) & (remaining_after_fit < small_item_threshold)
    priorities[fragmentation_risk] -= 0.5  # Moderate penalty

    # 4. Balance Remaining Capacity: Encourage using bins that leave a "useful" amount of space.
    useful_space_lower = np.max(bins_remain_cap) * 0.3
    useful_space_upper = np.max(bins_remain_cap) * 0.7
    useful_space = (remaining_after_fit >= useful_space_lower) & (remaining_after_fit <= useful_space_upper) & (remaining_after_fit > 0)
    priorities[useful_space] += 0.4  # Reward

    # 5. Smoothing using sigmoid function to promote exploration.

    priorities = priorities + 0.1 * (1 / (1 + np.exp(-(bins_remain_cap - item)))) # Sigmoid smoothing for exploration

    return priorities
```
