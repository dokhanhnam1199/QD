```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Primary Objective: Maximize bin utilization
    # Encourage filling bins as much as possible *without* overfilling.
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        # Higher score for bins that leave less waste after packing.
        priorities[potential_bins] = 1 - (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]

    # 2. Adaptive Penalty: Fragmentation Mitigation
    # Penalize bins that, after packing, leave a remaining capacity smaller than a threshold.
    # This threshold is dynamically adjusted based on the average item size.
    avg_item_size = item # assuming a single item.  If multiple items were considered, this should be the average size
    small_fragment_threshold = avg_item_size * 0.5  # Adjust this factor as needed

    remaining_after_pack = bins_remain_cap - item
    too_small_remaining = (remaining_after_pack > 0) & (remaining_after_pack < small_fragment_threshold)
    if np.any(too_small_remaining):
        priorities[too_small_remaining] -= 0.75  # Strong penalty for creating small fragments

    # 3. Exploration Bonus: Occasionally try less-optimal bins
    # Introduce a small probability of prioritizing a less-full bin to avoid local optima.
    # This is done by adding a tiny random value to all priorities.  Adjust probability as needed.
    if np.random.rand() < 0.05:
        priorities += np.random.rand(len(bins_remain_cap)) * 0.1

    # 4. Prioritize bins that are already reasonably full. Helps close them quickly
    reasonably_full = (bins_remain_cap > item) & (bins_remain_cap < item * 2)  # Adjust as needed
    if np.any(reasonably_full):
        priorities[reasonably_full] += 0.25

    # 5. First fit tiebreaker.
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        first_eligible_index = np.argmax(eligible_bins) # Select the index of the first true value
        priorities[first_eligible_index] += 0.01

    return priorities
```
