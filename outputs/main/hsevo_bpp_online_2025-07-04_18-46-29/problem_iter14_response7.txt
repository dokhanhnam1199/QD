```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority function balancing fill, waste, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Fill Ratio: Encourage higher fill
        fill_ratio = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] += fill_ratio * 0.5  # Reduced weight

        # Best Fit: Prioritize tightest fit
        remaining_space = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += np.exp(-5 * remaining_space) * 0.8 # Adjusted scaling & weight

        # Adaptive Fragmentation Penalty: Avoid small remaining spaces
        almost_empty_threshold = 0.2 # Increased threshold
        nearly_empty = (bins_remain_cap[valid_bins] - item > 0) & (bins_remain_cap[valid_bins] - item < almost_empty_threshold)
        priorities[valid_bins][nearly_empty] -= 2.5  # Reduced penalty

        # Global Fill Level Consideration: Target around 75% fill
        global_fill = np.sum((1 - bins_remain_cap/1)) / len(bins_remain_cap) # Assuming bin capacity is 1
        target_fill = 0.75
        distance_to_target = abs(global_fill - target_fill)
        # Weight based on how far global fill is from target.  Less penalty if close.
        priorities[valid_bins] -= distance_to_target * 0.3

    else:
        # Discourage if no bin fits
        priorities[:] = -0.001

    return priorities
```
