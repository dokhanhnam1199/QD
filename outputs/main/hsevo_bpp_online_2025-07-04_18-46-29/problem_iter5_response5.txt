```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit and target fill ratio, adaptive penalty for near-full, bonus for very good fit."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Encourage filling bins closer to full
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
      priorities[potential_bins] = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]

    # Prioritize bins with smallest remaining capacity that can still fit the item.
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
      min_remaining = np.min(bins_remain_cap[eligible_bins])
      priorities[bins_remain_cap == min_remaining] += 1

    # Einstein's Special Consideration
    priorities = priorities + np.exp(-np.abs(bins_remain_cap - item))
    
    # Penalize near-full bins, adaptive scaling
    near_full = (bins_remain_cap < item * 1.1) & (bins_remain_cap >= item)
    if np.any(near_full):
        priorities[near_full] -= 0.5 * (item/np.mean(bins_remain_cap))  #Adaptive penalty based on mean cap

    # Bonus for very good fit
    close_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.05)
    if np.any(close_fit):
        priorities[close_fit] += 0.75
      
    return priorities
```
