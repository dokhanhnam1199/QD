```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Capacity Utilization Encouragement (Similar to v1, but refined)
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        # Prioritize bins that result in higher utilization after packing.
        utilization = (item / (bins_remain_cap[potential_bins]))
        priorities[potential_bins] += utilization # Higher utilization gets higher priority


    # 2. Best Fit with a Twist (Prioritize near-perfect fits, but avoid overfilling)
    diff = bins_remain_cap - item
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        # Prioritize bins where the remaining space after packing is minimal.
        priorities[eligible_bins] += 1.0 / (1e-6 + diff[eligible_bins])  #Inverted diff, small diff get larger priority
    
    #3. Balancing Act: Moderate fragmentation penalty
    if np.any(potential_bins):
        priorities[potential_bins] -= (bins_remain_cap[potential_bins]/ np.sum(bins_remain_cap)) * 0.2 # Fragmentation cost is proportional to size of bins, and divided by total capacities
    
    
    #4. Empty Bin Consideration:  Use empty bin only when items are large
    empty_bins = bins_remain_cap == np.max(bins_remain_cap) # Bins that are empty
    if item > np.mean(bins_remain_cap) and np.any(empty_bins):
        priorities[empty_bins] += 0.5 # Encourage to use an empty bin only if item is large enough, prevent the empty bin from always being chosen for small item
    
    # 5. Diversity Boost: Introduce randomness to escape local optima
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
