```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Objective function: combination of fill-level, capacity, and adaptive penalty

    # 1. Fill-Level Preference (Sigmoid to smooth the preference curve)
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratio = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += 1 / (1 + np.exp(-10 * (fill_ratio - 0.5))) # Sigmoid centered around 0.5 fill ratio

    # 2. Capacity Consideration (Prioritize bins that are not too full or too empty after insertion)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        remaining_after_fit = bins_remain_cap[eligible_bins] - item
        capacity_score = np.exp(-0.5 * (remaining_after_fit - np.mean(remaining_after_fit))**2 / np.std(remaining_after_fit)**2) if np.std(remaining_after_fit) > 0 else np.ones_like(remaining_after_fit)  # Gaussian-like preference
        priorities[eligible_bins] += capacity_score
        

    # 3. Adaptive Penalty (Dynamically adjust penalty based on how full the bins are becoming)
    bin_utilization = 1 - bins_remain_cap / np.max(bins_remain_cap)  # or 1 - bins_remain_cap if bins have a fixed size
    penalty = np.exp(5 * (bin_utilization - 0.9)) # High penalty as bins become >90% full
    priorities -= penalty
    
    # 4. Encourage bins with space slightly greater than item
    near_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.2)
    if np.any(near_fit):
        priorities[near_fit] += 0.75

    return priorities
```
