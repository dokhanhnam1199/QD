```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Encourage filling bins closer to full, but with a steeper penalty as bins become very full
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratios = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] = 1 - fill_ratios**2 # Squaring emphasizes smaller remaining space

    # Prioritize bins with smallest remaining capacity that can still fit the item.
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_remaining = np.min(bins_remain_cap[eligible_bins])
        priorities[bins_remain_cap == min_remaining] += 2  # Increased priority for best fit

    # Introduce a capacity-aware exploration bonus to avoid getting stuck with similar bin states.
    # The bonus is inversely proportional to the bin's remaining capacity after adding the item
    # and proportional to the number of available bins.  This adds exploration by favoring
    # bins that are not already close to full and only when many options exist.
    num_eligible = np.sum(eligible_bins)
    if num_eligible > 1: # Only apply bonus if multiple bins can fit the item
        remaining_after_fit = bins_remain_cap[eligible_bins] - item
        exploration_bonus = num_eligible / (remaining_after_fit + 0.001) # Small constant to avoid division by zero
        priorities[eligible_bins] += 0.1 * exploration_bonus # Scale the bonus
    
    # Severe penalty for bins that are too small, even by a little. Avoids fragmentation early.
    ineligible_bins = bins_remain_cap < item
    if np.any(ineligible_bins):
        priorities[ineligible_bins] -= 10  # Large penalty.  Make these VERY unappealing.

    # Reduce priority for bins that are nearly full after the item is placed.
    near_full_threshold = 0.95 # Threshold for considering a bin near full
    near_full_after_fit = (bins_remain_cap - item) / np.max(bins_remain_cap) > near_full_threshold # Scale by max capacity so nearfull is normalized
    eligible_and_near_full = eligible_bins & near_full_after_fit
    if np.any(eligible_and_near_full):
        priorities[eligible_and_near_full] -= 1 # Moderate penalty for these, discourage but dont forbid
    
    return priorities
```
