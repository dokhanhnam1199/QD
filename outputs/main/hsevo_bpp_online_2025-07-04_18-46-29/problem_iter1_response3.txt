```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Prioritize bins that can fit the item reasonably well, but avoid very tight fits or wasted space.
    # We want bins where the item takes up a significant portion, but also leaves some room for future items.

    fit_ratios = item / bins_remain_cap  # How much of the bin the item would fill

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a strong preference to bins that can fit the item (fit_ratio <= 1), penalize otherwise.
    fit_penalty = 10.0  # A penalty value if the bin cannot fit
    priorities[fit_ratios > 1] = -fit_penalty

    # Among bins that fit, prioritize those where item fills reasonable amount
    # i.e. not too empty, and not too tightly fit.
    valid_bins = fit_ratios <= 1
    if np.any(valid_bins):
        priorities[valid_bins] = np.exp(-np.abs(fit_ratios[valid_bins] - 0.7)) # gaussian around 0.7

    return priorities
```
