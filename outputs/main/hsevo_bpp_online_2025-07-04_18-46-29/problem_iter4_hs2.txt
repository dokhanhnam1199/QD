import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, close_fit_threshold: float = 0.12716817833841096, almost_full_threshold: float = 0.12497054575587901, almost_full_penalty: float = 2.0407780248489513, remaining_after_fit_scale: float = 9.588339591410044, remaining_after_fit_exponent_scale: float = 0.2566104681585083, discourage_random_placement_value: float = 5.117227157630128e-05) -> np.ndarray:
    """Hybrid priority: balances wasted space, fullness, and fit."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        waste = bins_remain_cap - item
        priorities[valid_bins] = -np.abs(waste[valid_bins]) # Favors minimal waste

        close_fit = np.abs(waste[valid_bins]) < close_fit_threshold * item
        priorities[valid_bins][close_fit] += 1 # Bonus for very good fit

        almost_full = bins_remain_cap < (1 + almost_full_threshold) * item
        priorities[almost_full] -= almost_full_penalty # Penalty for nearly full

        # First Fit Decreasing - ish component to avoid fragmentation
        remaining_after_fit = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += np.exp(-remaining_after_fit_scale * remaining_after_fit / item) * remaining_after_fit_exponent_scale #Scale impact.
    else:
        priorities[:] = -discourage_random_placement_value # Discourage random placement
    return priorities
