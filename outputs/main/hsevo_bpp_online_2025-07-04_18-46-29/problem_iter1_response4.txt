```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
      # Score bins that can fit the item higher, inversely proportional to wasted space
      waste = bins_remain_cap - item
      priorities[valid_bins] = 1.0 / (waste[valid_bins] + 0.000001) # avoid division by zero
      # Also consider how full a bin becomes after adding the item. Favor bins
      # that become relatively fuller, but not too full.
      fullness = (item + (bins_remain_cap - item)) / 1.0 # assuming bin capacity is 1
      priorities[valid_bins] += np.clip(fullness[valid_bins],0,1)


    else:
      # No bin can fit the item. Assign a very low priority.
      priorities = -1e9 * np.ones_like(bins_remain_cap, dtype=float)

    return priorities
```
