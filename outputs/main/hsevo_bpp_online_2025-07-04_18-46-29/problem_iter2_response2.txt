```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit and residual capacity penalty."""

    fit_scores = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    # Best Fit component: prioritize fuller bins
    if np.any(can_fit):
        remaining_space = bins_remain_cap[can_fit] - item
        fit_scores[can_fit] = 1 / (remaining_space + 1e-9)

    # Residual Capacity Penalty: Avoid leaving tiny spaces
    residual_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    bins_after_fit = bins_remain_cap - item
    residual_penalty[can_fit] = np.abs(bins_after_fit[can_fit] / bins_remain_cap[can_fit])

    # Combine scores
    priorities = fit_scores - 0.1 * residual_penalty

    # Small bonus for almost full bins, using approach from priority_v1
    almost_full_bins = can_fit & (bins_after_fit < (0.1 * bins_remain_cap[can_fit]))
    priorities[almost_full_bins] *= 2

    if not np.any(can_fit):
        priorities = np.ones_like(bins_remain_cap) * 0.1

    return priorities
```
