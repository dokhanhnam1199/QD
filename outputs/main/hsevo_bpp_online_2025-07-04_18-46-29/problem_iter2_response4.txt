```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit and target fill ratio to prioritize bins."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Best-fit component
        remaining_space = bins_remain_cap[eligible_bins] - item
        best_fit_priority = 1 - (remaining_space / bins_remain_cap[eligible_bins])

        # Target fill ratio component (around 70%)
        fit_ratios = item / bins_remain_cap[eligible_bins]
        target_priority = np.exp(-np.abs(fit_ratios - 0.7))

        # Combine: weighted average, favoring best-fit if capacity low
        capacity_weights = bins_remain_cap[eligible_bins]/np.max(bins_remain_cap) # bigger bin has more weight on best fit since it has more capacity
        combined_priority = (capacity_weights * best_fit_priority + (1-capacity_weights) * target_priority)

        priorities[eligible_bins] = combined_priority

    else:
        # Prioritize larger bins when no fit exists
        priorities = bins_remain_cap

    return priorities
```
