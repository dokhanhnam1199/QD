import numpy as np

def priority_v2(item: float, 
                bins_remain_cap: np.ndarray,
                near_fit_factor: float = 1.3708357132292919,
                near_fit_bonus: float = 0.21749168960313814,
                near_full_threshold: float = 0.9760515260050684,
                sigmoid_steepness: float = 93.01523460793491,
                epsilon: float = 6.440137505586816e-09,
                doesnt_fit_penalty: float = -0.1522253982998334) -> np.ndarray:
    """Combines fullest bin, near fit bonus, and dynamic fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Fullest Bin: Prioritize smallest remaining space
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = 1 / (remaining_space + epsilon)

        # Near Fit bonus: Reward bins slightly larger than item
        near_fit_threshold_upper = item * near_fit_factor
        near_fit_bins = (bins_remain_cap >= item) & (bins_remain_cap <= near_fit_threshold_upper)
        priorities[near_fit_bins] += near_fit_bonus * priorities[near_fit_bins]

        # Adaptive Fragmentation Penalty: Penalize almost-full bins
        near_full = (bins_remain_cap >= item) & (bins_remain_cap - item <= (1 - near_full_threshold) * bins_remain_cap)
        if np.any(near_full):
            priorities[near_full] -= 1 / (1 + np.exp(-sigmoid_steepness*(bins_remain_cap[near_full] - item - (1 - near_full_threshold) * bins_remain_cap[near_full])))
    else:
        priorities[:] = doesnt_fit_penalty  # Item doesn't fit

    return priorities
