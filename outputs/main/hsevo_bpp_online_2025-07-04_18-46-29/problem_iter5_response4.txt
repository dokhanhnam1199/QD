```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Balances waste, fullness, and avoids near-full bins.
    Uses a smoothed waste penalty and adaptive bonus for good fit."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        # Smoothed penalty for waste, scaled by item size
        priorities[valid_bins] = -np.exp( -waste / item)

        # Adaptive bonus for close fit, relative to item size
        close_fit_threshold = 0.1 # Tune this
        close_fit = waste < close_fit_threshold * item
        priorities[valid_bins][close_fit] += 1

        # Penalize near-full bins
        almost_full_threshold = 0.1 # Tune this
        almost_full = bins_remain_cap[valid_bins] < (1 + almost_full_threshold) * item
        almost_full_penalty = 0.5 # Tune this
        priorities[valid_bins][almost_full] -= almost_full_penalty
    else:
        priorities[:] = bins_remain_cap  # Prioritize larger bins if no fit

    return priorities
```
