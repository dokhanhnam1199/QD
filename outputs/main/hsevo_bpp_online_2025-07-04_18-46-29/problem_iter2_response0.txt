```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines sigmoid-based bin fullness, capacity difference, and filling level."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility (same as v1)
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    feasible = ~infeasible

    # 2. Sigmoid for bin fullness (similar to v0, but applied only to feasible bins)
    sigmoid = np.zeros_like(bins_remain_cap, dtype=float)
    sigmoid[feasible] = 1 / (1 + np.exp(10 * (item - bins_remain_cap[feasible])))

    # 3. Capacity difference, focusing on feasible bins (similar to v0)
    capacity_difference = np.zeros_like(bins_remain_cap, dtype=float)
    if np.any(feasible):
        capacity_difference[feasible] = np.maximum(0, 1 - np.abs(bins_remain_cap[feasible] - item) / np.max([1e-6, np.mean(bins_remain_cap[feasible])]))

    # 4. Completion bonus, applied to only feasible bins (similar to v0)
    completion_bonus = np.zeros_like(bins_remain_cap, dtype=float)
    completion_bonus[feasible] = np.where((bins_remain_cap[feasible] - item >= 0), np.exp(-10 * (bins_remain_cap[feasible] - item)), -np.inf)

    # Combine, adjusting weights based on what was learned in analysis
    priorities = sigmoid + 0.6 * capacity_difference + 0.8 * completion_bonus

    return priorities
```
