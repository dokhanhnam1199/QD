```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining fill ratio, best fit, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Fill Ratio with item size influence
        fill_ratio = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] += fill_ratio * 0.6

        # Best Fit with non-linear encouragement
        remaining_space = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += np.exp(-4 * remaining_space) * 0.9

        # Adaptive Fragmentation Penalty
        avg_capacity = np.mean(bins_remain_cap)
        frag_threshold = 0.2 * avg_capacity
        nearly_empty = (bins_remain_cap[valid_bins] - item > 0) & (bins_remain_cap[valid_bins] - item < frag_threshold)
        priorities[valid_bins][nearly_empty] -= 2.0

        # Fill Percentage Incentive
        global_fill = np.sum((1 - bins_remain_cap/1)) / len(bins_remain_cap)
        target_fill = 0.75
        distance_to_target = abs(global_fill - target_fill)
        priorities[valid_bins] -= distance_to_target * 0.2
        
    else:
        priorities[:] = -0.001

    return priorities
```
