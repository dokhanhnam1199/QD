{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit, fill ratio, and adaptive fragmentation penalty.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        # Best-fit component: prioritize bins with smallest waste\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = -np.abs(waste)\n\n        # Fill ratio component: encourage higher fill\n        fill_fraction = item / bins_remain_cap[valid_bins]\n        fill_fraction_weight = 0.4\n        priorities[valid_bins] += fill_fraction * fill_fraction_weight\n\n        # Adaptive fragmentation penalty: penalize bins becoming almost full\n        almost_full_threshold = 0.1\n        almost_full = bins_remain_cap[valid_bins] < (1 + almost_full_threshold) * item\n        almost_full_penalty = 2.0 # Slightly reduced penalty from v1\n        priorities[valid_bins][almost_full] -= almost_full_penalty\n\n        # Non-linearity based on remaining capacity, gently encouraging tighter fits.\n        remaining_after_fit_scale = 5.0 # Adjusted scaling\n        remaining_after_fit_weight = 0.2\n        remaining_after_fit = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] += np.exp(-remaining_after_fit_scale * remaining_after_fit / item) * remaining_after_fit_weight\n\n        # Prioritize bins with smallest remaining capacity slightly\n        min_remaining_cap = np.min(bins_remain_cap[valid_bins])\n        priorities[bins_remain_cap == min_remaining_cap] += 0.1 # Small boost\n        \n    else:\n        # Discourage placement if no bin fits.\n        discourage_placement_value = 0.0008\n        priorities[:] = -discourage_placement_value\n        \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best fit, fill ratio, and fragmentation avoidance.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Fill Ratio - scale by a factor\n        fill_ratio = item / bins_remain_cap[eligible_bins]\n        priorities[eligible_bins] += fill_ratio * 0.7\n\n        # Best Fit - encourage packing to tightest fitting bin\n        remaining_space = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] += np.exp(-5 * remaining_space)\n\n        # Fragmentation Penalty-Adaptive-heavier penalty for very small remaining spaces\n        remaining_space = bins_remain_cap - item\n        nearly_empty = (remaining_space > 0) & (remaining_space < 0.1)\n        priorities[nearly_empty] -= 3.0 # stronger penality\n\n        #First fit preference\n        first_fit_index = np.argmax(eligible_bins)\n        priorities[first_fit_index] += 0.5\n\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the first one uses fixed weights for different criteria (fill ratio, best fit, fragmentation, almost empty), while the last one uses adaptive weights based on bin capacity, item size, and the overall state of bins. (2nd best) vs (second worst) shows similar pattern.\nComparing (1st) vs (2nd), we observe that the second one introduces adaptive weighting based on item size and includes a discouragement for bins that are \"too empty\" after placement, which the first one doesn't have.\nComparing (3rd) vs (4th), the third uses the same approach as the second. The forth one introduces the concept of \"target fill\" and calculates the distance to the ideal fill, as well as using direct values instead of a scaling factor.\nComparing (second worst) vs (worst), they are nearly identical.\nOverall: The better heuristics tend to incorporate adaptive weighting mechanisms, state-dependent logic, and target specific fill levels, while also penalizing undesirable states like excessive fragmentation or near-empty bins after placement. The worse heuristics use fixed weights and lack a global perspective on the bin states.\n- \nOkay, let's refine \"Current self-reflection\" to design better bin packing heuristics, avoiding the pitfalls of \"Ineffective self-reflection.\"\n\nHere's a breakdown to guide your thinking:\n\n*   **Keywords:** Multi-objective, Adaptive, Balanced, Exploration, State-aware.\n\n*   **Advice:** Construct a clear objective function combining fill rate, waste, and fragmentation. Dynamically adjust weights and incentives based on the *global* state of bins. Incorporate controlled randomness.\n\n*   **Avoid:** Static weights, myopic optimization focusing only on individual bins, and overly complex heuristics from the start.\n\n*   **Explanation:** Effective heuristics require a balanced approach. Adaptive weighting, state awareness, and strategic exploration prevent getting stuck in local optima, while incremental complexity ensures understandability and tunability.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}