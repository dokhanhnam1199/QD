```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, adaptive fragmentation,
    and a global bin state consideration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Best-fit component (minimize waste)
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = -np.abs(waste)

        # Fill ratio component (encourage high fill)
        fill_fraction = item / bins_remain_cap[valid_bins]
        fill_fraction_weight = 0.4
        priorities[valid_bins] += fill_fraction * fill_fraction_weight

        # Adaptive fragmentation penalty
        small_fragment_threshold = item * 0.6
        remaining_after_pack = bins_remain_cap[valid_bins] - item
        too_small_remaining = (remaining_after_pack > 0) & (remaining_after_pack < small_fragment_threshold)
        fragmentation_penalty = 0.7
        priorities[valid_bins][too_small_remaining] -= fragmentation_penalty

        # Global bin state: encourage using bins when *many* are empty
        num_almost_empty = np.sum(bins_remain_cap > 0.9)  # Count nearly empty bins
        if num_almost_empty > bins_remain_cap.size / 2: # if majority of bins are almost empty
            priorities[valid_bins] += 0.2  # Boost the priority

        # Nonlinearity to prefer slightly tighter fits
        remaining_after_fit_scale = 5.0
        remaining_after_fit_weight = 0.2
        remaining_after_fit = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += np.exp(-remaining_after_fit_scale * remaining_after_fit / item) * remaining_after_fit_weight

    else:
        # Discourage placement if no bin fits
        discourage_placement_value = 0.001
        priorities[:] = -discourage_placement_value

    return priorities
```
