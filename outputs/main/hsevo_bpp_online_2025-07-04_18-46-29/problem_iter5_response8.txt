```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit and target fill ratio with penalties.
    Balances waste, fullness, and fit using smooth functions.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = -np.abs(waste)

        close_fit = np.abs(waste) < 0.1 * item
        priorities[valid_bins][close_fit] += 1 # Bonus

        almost_full = bins_remain_cap[valid_bins] < (1 + 0.1) * item
        priorities[valid_bins][almost_full] -= 2 # Penalty

        # Target fill ratio (around 70%)
        fit_ratios = item / bins_remain_cap[valid_bins]
        target_priority = np.exp(-np.abs(fit_ratios - 0.7)) * 0.5 #Scale impact.
        priorities[valid_bins] += target_priority

    else:
        priorities[:] = -0.0001
    return priorities
```
