```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit with adaptive waste penalty and target fill."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_space = bins_remain_cap[can_fit] - item
        # Best Fit: prioritize smaller remaining space
        fit_scores = 1 / (remaining_space + 1e-9)

        # Adaptive Waste Penalty: Larger penalty for bigger waste relative to item size
        waste_ratio = remaining_space / item
        waste_penalty = np.exp( -waste_ratio)

        # Target fill ratio component (around 70%)
        fit_ratios = item / bins_remain_cap[can_fit]
        target_priority = np.exp(-np.abs(fit_ratios - 0.7))
        priorities[can_fit] = fit_scores - 0.5*waste_penalty + 0.3*target_priority

    else:
        # Prioritize larger bins when no fit exists
        priorities[:] = bins_remain_cap

    return priorities
```
