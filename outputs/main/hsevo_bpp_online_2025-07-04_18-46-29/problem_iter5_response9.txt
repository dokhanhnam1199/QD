```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid priority: balance waste, fullness, fit, and penalize almost full."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        waste = bins_remain_cap - item
        priorities[valid_bins] = -np.abs(waste[valid_bins]) # Favors minimal waste

        close_fit_threshold = 0.1
        close_fit = np.abs(waste[valid_bins]) < close_fit_threshold * item
        priorities[valid_bins][close_fit] += 1  # Bonus for very good fit

        almost_full_threshold = 0.1
        almost_full_penalty = 10
        almost_full = bins_remain_cap < (1 + almost_full_threshold) * item
        priorities[almost_full] -= almost_full_penalty # Penalty for nearly full

        # First Fit Decreasing - ish component to avoid fragmentation
        remaining_after_fit_scale = 2
        remaining_after_fit_exponent_scale = 0.5
        remaining_after_fit = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += np.exp(-remaining_after_fit_scale * remaining_after_fit / item) * remaining_after_fit_exponent_scale #Scale impact.

        # Sigmoid component for bin fullness
        sigmoid = 1 / (1 + np.exp(10 * (item - bins_remain_cap)))
        priorities += 0.5 * sigmoid # Combine sigmoid
    else:
        discourage_random_placement_value = 100
        priorities[:] = -discourage_random_placement_value  # Discourage random placement

    return priorities
```
