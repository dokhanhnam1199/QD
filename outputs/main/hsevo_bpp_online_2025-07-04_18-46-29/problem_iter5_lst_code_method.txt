{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Encourage filling bins closer to full\n    potential_bins = bins_remain_cap >= item\n    if np.any(potential_bins):\n      priorities[potential_bins] = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]\n\n    # Prioritize bins with smallest remaining capacity that can still fit the item.  This helps with the \"first fit decreasing\" concept if implemented online.\n    eligible_bins = bins_remain_cap >= item\n    if np.any(eligible_bins):\n      min_remaining = np.min(bins_remain_cap[eligible_bins])\n      priorities[bins_remain_cap == min_remaining] += 1\n\n    \n    # Einstein's Special Consideration: A touch of non-linearity to avoid local optima\n    priorities = priorities + np.exp(-np.abs(bins_remain_cap - item))  \n    \n    # Penalize near-full bins heavily to allow more flexibility for the next item, mitigating fragmentation.\n    near_full = (bins_remain_cap < item * 1.1) & (bins_remain_cap >= item)\n    if np.any(near_full):\n        priorities[near_full] -= 0.5 # A penalty score\n      \n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Hybrid priority: balances wasted space, fullness, and fit.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap - item\n        priorities[valid_bins] = -np.abs(waste[valid_bins]) # Favors minimal waste\n\n        close_fit = np.abs(waste[valid_bins]) < 0.1 * item\n        priorities[valid_bins][close_fit] += 1 # Bonus for very good fit\n\n        almost_full = bins_remain_cap < (1 + 0.1) * item\n        priorities[almost_full] -= 2 # Penalty for nearly full\n\n        # First Fit Decreasing - ish component to avoid fragmentation\n        remaining_after_fit = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] += np.exp(-10 * remaining_after_fit / item) * 0.5 #Scale impact.\n    else:\n        priorities[:] = -0.0001 # Discourage random placement\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, close_fit_threshold: float = 0.06083658291247351, almost_full_threshold: float = 0.09608740866512755, almost_full_penalty: float = 1.8788885829923652, remaining_after_fit_scale: float = 10.174564362938586, remaining_after_fit_exponent_scale: float = 0.7034000710867576, discourage_random_placement_value: float = 5.914627359872533e-05) -> np.ndarray:\n    \"\"\"Hybrid priority: balances wasted space, fullness, and fit.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap - item\n        priorities[valid_bins] = -np.abs(waste[valid_bins]) # Favors minimal waste\n\n        close_fit = np.abs(waste[valid_bins]) < close_fit_threshold * item\n        priorities[valid_bins][close_fit] += 1 # Bonus for very good fit\n\n        almost_full = bins_remain_cap < (1 + almost_full_threshold) * item\n        priorities[almost_full] -= almost_full_penalty # Penalty for nearly full\n\n        # First Fit Decreasing - ish component to avoid fragmentation\n        remaining_after_fit = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] += np.exp(-remaining_after_fit_scale * remaining_after_fit / item) * remaining_after_fit_exponent_scale #Scale impact.\n    else:\n        priorities[:] = -discourage_random_placement_value # Discourage random placement\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Hybrid priority: balances wasted space, fullness, and fit.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap - item\n        priorities[valid_bins] = -np.abs(waste[valid_bins]) # Favors minimal waste\n\n        close_fit = np.abs(waste[valid_bins]) < 0.1 * item\n        priorities[valid_bins][close_fit] += 1 # Bonus for very good fit\n\n        almost_full = bins_remain_cap < (1 + 0.1) * item\n        priorities[almost_full] -= 2 # Penalty for nearly full\n\n        # First Fit Decreasing - ish component to avoid fragmentation\n        remaining_after_fit = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] += np.exp(-10 * remaining_after_fit / item) * 0.5 #Scale impact.\n    else:\n        priorities[:] = -0.0001 # Discourage random placement\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, close_fit_threshold: float = 0.06083658291247351, almost_full_threshold: float = 0.09608740866512755, almost_full_penalty: float = 1.8788885829923652, remaining_after_fit_scale: float = 10.174564362938586, remaining_after_fit_exponent_scale: float = 0.7034000710867576, discourage_random_placement_value: float = 5.914627359872533e-05) -> np.ndarray:\n    \"\"\"Hybrid priority: balances wasted space, fullness, and fit.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap - item\n        priorities[valid_bins] = -np.abs(waste[valid_bins]) # Favors minimal waste\n\n        close_fit = np.abs(waste[valid_bins]) < close_fit_threshold * item\n        priorities[valid_bins][close_fit] += 1 # Bonus for very good fit\n\n        almost_full = bins_remain_cap < (1 + almost_full_threshold) * item\n        priorities[almost_full] -= almost_full_penalty # Penalty for nearly full\n\n        # First Fit Decreasing - ish component to avoid fragmentation\n        remaining_after_fit = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] += np.exp(-remaining_after_fit_scale * remaining_after_fit / item) * remaining_after_fit_exponent_scale #Scale impact.\n    else:\n        priorities[:] = -discourage_random_placement_value # Discourage random placement\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best fit and residual capacity penalty.\"\"\"\n\n    fit_scores = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    # Best Fit component: prioritize fuller bins\n    if np.any(can_fit):\n        remaining_space = bins_remain_cap[can_fit] - item\n        fit_scores[can_fit] = 1 / (remaining_space + 1e-9)\n\n    # Residual Capacity Penalty: Avoid leaving tiny spaces\n    residual_penalty = np.zeros_like(bins_remain_cap, dtype=float)\n    bins_after_fit = bins_remain_cap - item\n    residual_penalty[can_fit] = np.abs(bins_after_fit[can_fit] / bins_remain_cap[can_fit])\n\n    # Combine scores\n    priorities = fit_scores - 0.1 * residual_penalty\n\n    # Small bonus for almost full bins, using approach from priority_v1\n    almost_full_bins = can_fit & (bins_after_fit < (0.1 * bins_remain_cap[can_fit]))\n    priorities[almost_full_bins] *= 2\n\n    if not np.any(can_fit):\n        priorities = np.ones_like(bins_remain_cap) * 0.1\n\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best fit and fill fraction, avoids overfilling.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Best-fit component (minimizes waste)\n        waste = bins_remain_cap[eligible_bins] - item\n        best_fit_priority = 1 / (waste + 1e-6)\n\n        # Fill-fraction component (prioritizes efficient fills)\n        fill_fraction = item / bins_remain_cap[eligible_bins]\n        fill_fraction_priority = fill_fraction\n\n        # Combined priority (weighted average)\n        priorities[eligible_bins] = 0.6 * best_fit_priority + 0.4 * fill_fraction_priority\n\n        # Penalize near-full bins to avoid overfilling\n        near_full = bins_remain_cap[eligible_bins] < 1.1 * item  # Adjust the 1.1 factor if needed\n        priorities[eligible_bins][near_full] *= 0.5  # Reduce priority for near-full bins\n    else:\n        # No bin can fit, prioritize larger capacity for the future.\n        priorities = bins_remain_cap\n\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Capacity Utilization Encouragement (Similar to v1, but refined)\n    potential_bins = bins_remain_cap >= item\n    if np.any(potential_bins):\n        # Prioritize bins that result in higher utilization after packing.\n        utilization = (item / (bins_remain_cap[potential_bins]))\n        priorities[potential_bins] += utilization # Higher utilization gets higher priority\n\n\n    # 2. Best Fit with a Twist (Prioritize near-perfect fits, but avoid overfilling)\n    diff = bins_remain_cap - item\n    eligible_bins = bins_remain_cap >= item\n    if np.any(eligible_bins):\n        # Prioritize bins where the remaining space after packing is minimal.\n        priorities[eligible_bins] += 1.0 / (1e-6 + diff[eligible_bins])  #Inverted diff, small diff get larger priority\n    \n    #3. Balancing Act: Moderate fragmentation penalty\n    if np.any(potential_bins):\n        priorities[potential_bins] -= (bins_remain_cap[potential_bins]/ np.sum(bins_remain_cap)) * 0.2 # Fragmentation cost is proportional to size of bins, and divided by total capacities\n    \n    \n    #4. Empty Bin Consideration:  Use empty bin only when items are large\n    empty_bins = bins_remain_cap == np.max(bins_remain_cap) # Bins that are empty\n    if item > np.mean(bins_remain_cap) and np.any(empty_bins):\n        priorities[empty_bins] += 0.5 # Encourage to use an empty bin only if item is large enough, prevent the empty bin from always being chosen for small item\n    \n    # 5. Diversity Boost: Introduce randomness to escape local optima\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best fit and fill fraction, avoids overfilling.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Best-fit component (minimizes waste)\n        waste = bins_remain_cap[eligible_bins] - item\n        best_fit_priority = 1 / (waste + 1e-6)\n\n        # Fill-fraction component (prioritizes efficient fills)\n        fill_fraction = item / bins_remain_cap[eligible_bins]\n        fill_fraction_priority = fill_fraction\n\n        # Combined priority (weighted average)\n        priorities[eligible_bins] = 0.6 * best_fit_priority + 0.4 * fill_fraction_priority\n\n        # Penalize near-full bins to avoid overfilling\n        near_full = bins_remain_cap[eligible_bins] < 1.1 * item  # Adjust the 1.1 factor if needed\n        priorities[eligible_bins][near_full] *= 0.5  # Reduce priority for near-full bins\n    else:\n        # No bin can fit, prioritize larger capacity for the future.\n        priorities = bins_remain_cap\n\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Encourage filling bins closer to full, but with higher reward for bins that are already somewhat full\n    potential_bins = bins_remain_cap >= item\n    if np.any(potential_bins):\n        # This emphasizes filling bins that are already partially full\n        priorities[potential_bins] = (item / bins_remain_cap[potential_bins]) \n        priorities[potential_bins] += (bins_remain_cap[potential_bins] - item) / np.max(bins_remain_cap) #normalized remaining space\n        \n\n    # Prioritize bins with smallest remaining capacity that can still fit the item.\n    eligible_bins = bins_remain_cap >= item\n    if np.any(eligible_bins):\n        min_remaining = np.min(bins_remain_cap[eligible_bins])\n        min_bins = bins_remain_cap == min_remaining\n        priorities[min_bins] += 2 # Increased importance for smallest remaining\n\n\n    # Use a scaled exponential to provide a stronger, but still smooth, boost\n    priorities = priorities + 0.5 * np.exp(-np.abs((bins_remain_cap - item)) / np.mean(bins_remain_cap)) \n    \n\n    # Penalize bins that become TOO full after adding the item.  This is stronger than before.\n    near_full = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.2)\n    if np.any(near_full):\n        priorities[near_full] -= 1.5 * (item/bins_remain_cap[near_full]) # Strong penalty related to item size versus bin size\n    \n    # Add a slight bonus for bins that are nearly empty, encouraging their reuse\n    nearly_empty = bins_remain_cap > 0.75 * np.max(bins_remain_cap)\n    if np.any(nearly_empty):\n        priorities[nearly_empty] += 0.25\n\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First Fit Decreasing encouragement with a nuanced approach\n    eligible_bins = bins_remain_cap >= item\n    if np.any(eligible_bins):\n        # Prioritize bins with the smallest remaining capacity *after* adding the item.\n        remaining_after_fit = bins_remain_cap[eligible_bins] - item\n        min_remaining_after_fit = np.min(remaining_after_fit)\n        priorities[eligible_bins & (bins_remain_cap - item == min_remaining_after_fit)] += 2  # Higher initial priority\n\n        # Add a bonus for bins that are a \"good\" fit, but not too tight. This encourages using space efficiently without over-constraining future placements.\n        fit_ratio = item / bins_remain_cap[eligible_bins]\n        good_fit = (fit_ratio >= 0.5) & (fit_ratio <= 0.95)  # Adjust these bounds as needed\n        priorities[eligible_bins] += np.where(good_fit, 1.0, 0.0)\n\n    # Dynamic penalty for near-full bins, adjusted based on item size\n    near_full = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.2)\n    if np.any(near_full):\n        penalty = 0.75 * (item / np.max(bins_remain_cap))  # Scale penalty by relative item size\n        priorities[near_full] -= penalty\n\n    # Reward bins that are already relatively full (but can still fit the item)\n    # This helps consolidate items into fewer bins.\n    relatively_full = bins_remain_cap > item\n    if np.any(relatively_full):\n        priorities[relatively_full] += (1 - (bins_remain_cap[relatively_full] / np.max(bins_remain_cap))) * 0.5\n\n    # Exploration component: Introduce a small random element to prevent getting stuck.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.05\n\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines 'fullest bin' and 'near fit' strategies.\n    Prioritizes bins that minimize remaining space but avoids overly tight fits.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Fullest Bin component: Prioritize smallest remaining space\n        remaining_space = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = 1 / (remaining_space + 1e-9)\n\n        # Near Fit adjustment: Give bonus to bins with slightly larger capacity\n        near_fit_threshold_upper = item * 1.2\n        near_fit_bins = (bins_remain_cap >= item) & (bins_remain_cap <= near_fit_threshold_upper)\n        priorities[near_fit_bins] += 0.5 * priorities[near_fit_bins] # Near fit bonus (fraction of existing priority)\n    else:\n        priorities[:] = -1  # Very low priority if item doesn't fit\n\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines sigmoid-based bin fullness, capacity difference, and filling level.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility (same as v1)\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n    feasible = ~infeasible\n\n    # 2. Sigmoid for bin fullness (similar to v0, but applied only to feasible bins)\n    sigmoid = np.zeros_like(bins_remain_cap, dtype=float)\n    sigmoid[feasible] = 1 / (1 + np.exp(10 * (item - bins_remain_cap[feasible])))\n\n    # 3. Capacity difference, focusing on feasible bins (similar to v0)\n    capacity_difference = np.zeros_like(bins_remain_cap, dtype=float)\n    if np.any(feasible):\n        capacity_difference[feasible] = np.maximum(0, 1 - np.abs(bins_remain_cap[feasible] - item) / np.max([1e-6, np.mean(bins_remain_cap[feasible])]))\n\n    # 4. Completion bonus, applied to only feasible bins (similar to v0)\n    completion_bonus = np.zeros_like(bins_remain_cap, dtype=float)\n    completion_bonus[feasible] = np.where((bins_remain_cap[feasible] - item >= 0), np.exp(-10 * (bins_remain_cap[feasible] - item)), -np.inf)\n\n    # Combine, adjusting weights based on what was learned in analysis\n    priorities = sigmoid + 0.6 * capacity_difference + 0.8 * completion_bonus\n\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and target fullness for bin priority.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        # Minimize waste, but also target a fullness level.\n        priorities[valid_bins] = -np.abs(waste[valid_bins])  # Initial priority\n\n        # Calculate fullness after adding item\n        fullness = (bins_remain_cap[valid_bins] - waste[valid_bins]) / bins_remain_cap[valid_bins]\n\n        # Give a bonus to bins that become sufficiently full\n        target_fullness = 0.8\n        fullness_bonus = (fullness > target_fullness) * 1.0 #bonus increased\n        priorities[valid_bins] += fullness_bonus\n\n        #Penalize almost full bins\n        full_threshold = 0.1\n        almost_full = bins_remain_cap < (1 + full_threshold) * item\n        priorities[almost_full] -= 2 #penalty increased\n\n    else:\n        priorities[:] = -0.0001 #Small negative priority\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and target fullness for bin priority.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        # Minimize waste, but also target a fullness level.\n        priorities[valid_bins] = -np.abs(waste[valid_bins])  # Initial priority\n\n        # Calculate fullness after adding item\n        fullness = (bins_remain_cap[valid_bins] - waste[valid_bins]) / bins_remain_cap[valid_bins]\n\n        # Give a bonus to bins that become sufficiently full\n        target_fullness = 0.8\n        fullness_bonus = (fullness > target_fullness) * 1.0 #bonus increased\n        priorities[valid_bins] += fullness_bonus\n\n        #Penalize almost full bins\n        full_threshold = 0.1\n        almost_full = bins_remain_cap < (1 + full_threshold) * item\n        priorities[almost_full] -= 2 #penalty increased\n\n    else:\n        priorities[:] = -0.0001 #Small negative priority\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and target fullness for bin priority.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        # Minimize waste, but also target a fullness level.\n        priorities[valid_bins] = -np.abs(waste[valid_bins])  # Initial priority\n\n        # Calculate fullness after adding item\n        fullness = (bins_remain_cap[valid_bins] - waste[valid_bins]) / bins_remain_cap[valid_bins]\n\n        # Give a bonus to bins that become sufficiently full\n        target_fullness = 0.8\n        fullness_bonus = (fullness > target_fullness) * 1.0 #bonus increased\n        priorities[valid_bins] += fullness_bonus\n\n        #Penalize almost full bins\n        full_threshold = 0.1\n        almost_full = bins_remain_cap < (1 + full_threshold) * item\n        priorities[almost_full] -= 2 #penalty increased\n\n    else:\n        priorities[:] = -0.0001 #Small negative priority\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and target fullness for bin priority.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        # Minimize waste, but also target a fullness level.\n        priorities[valid_bins] = -np.abs(waste[valid_bins])  # Initial priority\n\n        # Calculate fullness after adding item\n        fullness = (bins_remain_cap[valid_bins] - waste[valid_bins]) / bins_remain_cap[valid_bins]\n\n        # Give a bonus to bins that become sufficiently full\n        target_fullness = 0.8\n        fullness_bonus = (fullness > target_fullness) * 1.0 #bonus increased\n        priorities[valid_bins] += fullness_bonus\n\n        #Penalize almost full bins\n        full_threshold = 0.1\n        almost_full = bins_remain_cap < (1 + full_threshold) * item\n        priorities[almost_full] -= 2 #penalty increased\n\n    else:\n        priorities[:] = -0.0001 #Small negative priority\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit and target fill ratio to prioritize bins.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Best-fit component\n        remaining_space = bins_remain_cap[eligible_bins] - item\n        best_fit_priority = 1 - (remaining_space / bins_remain_cap[eligible_bins])\n\n        # Target fill ratio component (around 70%)\n        fit_ratios = item / bins_remain_cap[eligible_bins]\n        target_priority = np.exp(-np.abs(fit_ratios - 0.7))\n\n        # Combine: weighted average, favoring best-fit if capacity low\n        capacity_weights = bins_remain_cap[eligible_bins]/np.max(bins_remain_cap) # bigger bin has more weight on best fit since it has more capacity\n        combined_priority = (capacity_weights * best_fit_priority + (1-capacity_weights) * target_priority)\n\n        priorities[eligible_bins] = combined_priority\n\n    else:\n        # Prioritize larger bins when no fit exists\n        priorities = bins_remain_cap\n\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit and target fill ratio to prioritize bins.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Best-fit component\n        remaining_space = bins_remain_cap[eligible_bins] - item\n        best_fit_priority = 1 - (remaining_space / bins_remain_cap[eligible_bins])\n\n        # Target fill ratio component (around 70%)\n        fit_ratios = item / bins_remain_cap[eligible_bins]\n        target_priority = np.exp(-np.abs(fit_ratios - 0.7))\n\n        # Combine: weighted average, favoring best-fit if capacity low\n        capacity_weights = bins_remain_cap[eligible_bins]/np.max(bins_remain_cap) # bigger bin has more weight on best fit since it has more capacity\n        combined_priority = (capacity_weights * best_fit_priority + (1-capacity_weights) * target_priority)\n\n        priorities[eligible_bins] = combined_priority\n\n    else:\n        # Prioritize larger bins when no fit exists\n        priorities = bins_remain_cap\n\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best features of v0 and v1 for bin packing.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get negative infinity.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    feasible_mask = ~infeasible_mask\n    if np.any(feasible_mask):\n        # Fit score based on closeness of item to remaining capacity\n        fit_scores = np.exp(-(bins_remain_cap[feasible_mask] - item))\n\n        # Bonus for almost empty bins.\n        empty_bin_bonus = bins_remain_cap[feasible_mask]\n        \n        # Penalty for almost full bins\n        almost_full_penalty = np.exp(10 * (1 - (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap))))\n\n        #Prioritize bins with smallest remaining capacity that can still fit the item.\n        min_remaining = np.min(bins_remain_cap[feasible_mask])\n        tight_fit_bonus = np.where(bins_remain_cap[feasible_mask] == min_remaining, 1.0, 0.0)\n\n        priorities[feasible_mask] = fit_scores + 0.1 * empty_bin_bonus - almost_full_penalty + tight_fit_bonus\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}