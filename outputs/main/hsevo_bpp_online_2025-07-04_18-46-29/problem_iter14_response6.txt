```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill-ratio, adaptive fragmentation penalty, and bin balancing."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # 1. Fill Ratio Preference
        fill_ratio = item / bins_remain_cap[eligible_bins]
        priorities[eligible_bins] += 0.5 * fill_ratio

        # 2. Best Fit Encouragement (Nonlinear)
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] += 0.6 * np.exp(-remaining_space)

        # 3. Adaptive Fragmentation Penalty
        max_bin_cap = np.max(bins_remain_cap) if np.any(bins_remain_cap) else 1.0
        fragmentation_penalty = 0.2 * (remaining_space / max_bin_cap)
        priorities[eligible_bins] -= fragmentation_penalty

    # 4. Bin Balancing (Encourage use of emptier bins)
    bin_capacity_normalized = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else np.zeros_like(bins_remain_cap)
    priorities += 0.1 * (1-bin_capacity_normalized)

    # 5. Encourage re-use of almost empty bins.
    almost_empty_threshold = 0.95 #If more than 95% empty give it a boost
    almost_empty = bins_remain_cap > (1-almost_empty_threshold) #bin size set to 1
    if np.any(almost_empty):
        priorities[almost_empty] += 0.7

    return priorities
```
