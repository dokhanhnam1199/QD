```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive fill ratio, best fit, and fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_size = 1.0  # Assuming bin size is normalized to 1

    # --- Parameters (Tunable) ---
    best_fit_weight = 1.5
    fragmentation_threshold_multiplier = 0.2
    fragmentation_penalty = 1.3
    almost_empty_threshold = 0.95
    almost_empty_bonus = 0.8
    fill_ratio_weight = 0.7
    underutilization_threshold = 0.1
    underutilization_penalty = 0.6

    # --- 1. Fill Ratio Preference (Weighted) ---
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratios = (bin_size - (bins_remain_cap[potential_bins] - item)) / bin_size
        priorities[potential_bins] += fill_ratios * fill_ratio_weight

    # --- 2. Best Fit Encouragement ---
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += best_fit_weight

    # --- 3. Fragmentation Penalty (Adaptive) ---
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * fragmentation_threshold_multiplier
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= fragmentation_penalty

    # --- 4. Encourage re-use of almost empty bins ---
    almost_empty = bins_remain_cap >= (bin_size * almost_empty_threshold)
    if np.any(almost_empty):
        priorities[almost_empty] += almost_empty_bonus

    # --- 5. Underutilization Penalty: Penalize creating almost empty bins with small items
    new_remaining_space = bins_remain_cap - item
    underutilized_bins = (new_remaining_space > 0) & (new_remaining_space / bin_size > (1 - underutilization_threshold)) & (item < (bin_size * 0.5))
    priorities[underutilized_bins] -= underutilization_penalty

    # --- Adaptive Exploration ---
    exploration_factor = 0.01 * item # scale with item size
    priorities += np.random.uniform(-exploration_factor, exploration_factor, size=num_bins)

    return priorities
```
