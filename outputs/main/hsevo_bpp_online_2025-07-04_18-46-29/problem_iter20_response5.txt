```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive fill ratio, best fit, fragmentation penalty, and global fill awareness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    potential_bins = bins_remain_cap >= item

    # 1. Adaptive Fill Ratio Preference
    if np.any(potential_bins):
        fill_ratios = item / bins_remain_cap[potential_bins]
        priorities[potential_bins] += fill_ratios * (0.7 + 0.3 * (1 - np.mean(bins_remain_cap))) # Adapt based on avg cap

    # 2. Stronger Best Fit Encouragement
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += 1.5 # Boost best fit

    # 3. Adaptive Fragmentation Penalty
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * (0.1 + 0.03 * np.mean(bins_remain_cap)) # Adaptive threshold
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= 1.0 #Penalize fragmented bins

    # 4. Almost Empty Bonus
    almost_empty_threshold = 0.9
    almost_empty = bins_remain_cap > almost_empty_threshold
    if np.any(almost_empty):
        priorities[almost_empty] += 0.3 # Reuse almost empty bin

    # 5. Global Fill Level Encouragement
    global_fill_level = np.sum(1 - bins_remain_cap) / num_bins # Global fill estimation
    if global_fill_level > 0.6: # High fill level encouragement
        exploration_bonus = 0.1 * bins_remain_cap # Linear bonus based on capacity
        priorities += exploration_bonus

    # 6. Discourage near empty for the first few items.
    if global_fill_level < 0.1:
        near_empty_threshold = 0.95
        near_empty = bins_remain_cap > near_empty_threshold
        if np.any(near_empty):
            priorities[near_empty] -= 0.2 # Reduce near-empty bin priority.
            
    return priorities
```
