```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function that combines best-fit, fill-ratio, 
    fragmentation penalty, and bin utilization awareness with adaptive elements.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0  # Assuming bin size is 1.0

    # --- Adaptive Parameters (Tunable) ---
    best_fit_weight = 1.5  # Increased weight for best-fit
    fragmentation_threshold_multiplier = 0.2  # Increased sensitivity to fragmentation
    fragmentation_penalty = 1.3
    almost_empty_threshold = 0.95
    almost_empty_bonus = 0.8
    fill_ratio_weight = 0.7  # Weight for fill ratio

    # --- 1. Fill Ratio Preference (Weighted) ---
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratios = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += fill_ratio_weight * fill_ratios

    # --- 2. Best Fit Encouragement (Stronger) ---
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += best_fit_weight

    # --- 3. Fragmentation Penalty (Adaptive & Enhanced) ---
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * fragmentation_threshold_multiplier
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= fragmentation_penalty

    # --- 4. Encourage re-use of almost empty bins (Consistent) ---
    almost_empty = bins_remain_cap > (bin_size - almost_empty_threshold)
    if np.any(almost_empty):
        priorities[almost_empty] += almost_empty_bonus

    # --- 5. Bin Utilization Bonus (NEW - Encourages filling bins) ---
    utilization = (bin_size - bins_remain_cap) / bin_size
    fully_utilized_threshold = 0.8  # Tune this
    highly_utilized = utilization > fully_utilized_threshold
    utilization_bonus = 0.5
    priorities[highly_utilized] += utilization_bonus

    # --- 6. Penalize bins that are too big for the item relative to other bins (NEW)---
    if np.any(eligible_bins):
        relative_diff = capacity_diff[eligible_bins] / np.max(capacity_diff[eligible_bins]) # Normalize the diff
        priorities[eligible_bins] -= relative_diff * 0.1 # Subtract a small amount based on how much larger than the best fit it is.

    return priorities
```
