```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. First Fit Preference with a slight bias for bins that are already somewhat full.
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        priorities[potential_bins] = 1 / (bins_remain_cap[potential_bins] + 0.0001) # Avoid division by zero

    # 2. Best Fit Encouragement: Reward bins with remaining capacity closest to the item size.
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += 2 # Give a higher priority to best fit

    # 3. Fragmentation Penalty: Discourage placing items in bins that leave small remaining space.
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * 0.2  # Adjust this threshold as needed.  Penalize if remaining capacity < 20% item size
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= 1.5 # Strong penalty to avoid small fragments

    # 4. Encourage re-use of almost empty bins.
    almost_empty_threshold = 0.95 #If more than 95% empty give it a boost
    almost_empty = bins_remain_cap > (1-almost_empty_threshold) #bin size set to 1
    if np.any(almost_empty):
        priorities[almost_empty] += 0.8

    return priorities
```
