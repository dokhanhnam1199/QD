```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill ratio, and adaptive fragmentation penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Best-fit component: prioritize bins with smallest waste
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = -np.abs(waste)

        # Fill ratio component: encourage higher fill
        fill_fraction = item / bins_remain_cap[valid_bins]
        fill_fraction_weight = 0.4
        priorities[valid_bins] += fill_fraction * fill_fraction_weight

        # Adaptive fragmentation penalty: penalize bins becoming almost full
        almost_full_threshold = 0.1
        almost_full = bins_remain_cap[valid_bins] < (1 + almost_full_threshold) * item
        almost_full_penalty = 2.0 # Slightly reduced penalty from v1
        priorities[valid_bins][almost_full] -= almost_full_penalty

        # Non-linearity based on remaining capacity, gently encouraging tighter fits.
        remaining_after_fit_scale = 5.0 # Adjusted scaling
        remaining_after_fit_weight = 0.2
        remaining_after_fit = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += np.exp(-remaining_after_fit_scale * remaining_after_fit / item) * remaining_after_fit_weight

        # Prioritize bins with smallest remaining capacity slightly
        min_remaining_cap = np.min(bins_remain_cap[valid_bins])
        priorities[bins_remain_cap == min_remaining_cap] += 0.1 # Small boost
        
    else:
        # Discourage placement if no bin fits.
        discourage_placement_value = 0.0008
        priorities[:] = -discourage_placement_value
        
    return priorities
```
