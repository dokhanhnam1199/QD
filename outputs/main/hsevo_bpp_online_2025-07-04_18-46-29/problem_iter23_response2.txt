```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, best fit, frag. penalty with adaptive weights."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_size = 1.0

    # Global State Awareness
    average_fill = np.mean(1 - bins_remain_cap)

    # Adaptive Weights - based on item size and global fill level
    item_size_factor = min(0.74, item) # 0.74
    bin_availability_factor = min(1.27, np.sum(bins_remain_cap >= item) / num_bins) # 1.27

    fill_ratio_weight = 0.07 + 0.09 * item_size_factor #0.07, 0.09
    best_fit_weight = 2.8 + 0.68 * bin_availability_factor #2.8, 0.68
    fragmentation_penalty_weight = 1.47 + 0.82 * item_size_factor #1.47, 0.82
    reuse_weight = 0.79 + 0.51 * bin_availability_factor #0.79, 0.51

    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Fill Ratio - Adaptive
        fill_ratio = item / (bins_remain_cap[eligible_bins] + 0.0008)  # Avoid division by zero
        priorities[eligible_bins] += fill_ratio_weight * fill_ratio

        # Best Fit - Exponential decay
        remaining_space = bins_remain_cap[eligible_bins] - item
        best_fit_priority = np.exp(-2.7 * remaining_space) #2.7
        priorities[eligible_bins] += best_fit_weight * best_fit_priority

        # Small Item Best Fit Boost
        if item < 0.2:
            priorities[eligible_bins] += 0.1 * (1 - remaining_space / (bins_remain_cap[eligible_bins]+0.0008))#0.1

    # Fragmentation Penalty - Dynamic threshold & Item Size Aware
    remaining_space_all = bins_remain_cap - item
    fragmentation_threshold = item * (0.45 + 0.04 * item_size_factor) * (0.2 / np.sqrt(num_bins)) #0.45, 0.04, 0.2
    fragmented_bins = (remaining_space_all > 0) & (remaining_space_all <= fragmentation_threshold)

    fragmentation_penalty = fragmentation_penalty_weight * (1-average_fill)

    # Large item penalty
    if item > 0.8:
        fragmentation_penalty *= 2.0 #2.0

    priorities[fragmented_bins] -= fragmentation_penalty

    # Almost empty reuse
    almost_empty_threshold = 0.93 - (0.2 * average_fill) #0.93, 0.2
    almost_empty = bins_remain_cap > almost_empty_threshold
    if np.any(almost_empty):
        almost_empty_bonus = 0.09 + average_fill * 0.57 #0.09, 0.57
        priorities[almost_empty] += reuse_weight * almost_empty_bonus

    #Penalize bins that are close to full but can't fit the item
    too_full_bins = (bins_remain_cap < item) & (bins_remain_cap > (item-0.42))#0.42
    priorities[too_full_bins] -= 0.08 #0.08

    # Exploration: Add a small amount of randomness, scaled to the item size.
    exploration_factor = 0.026 * item #0.026
    priorities += np.random.uniform(-exploration_factor, exploration_factor, size=num_bins)

    return priorities
```
