```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, best fit, fragmentation penalty, and adaptive exploration based on global fill level."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_size = 1.0

    # 1. Fill Ratio Preference
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratio = (bins_remain_cap[potential_bins] - item) / bin_size
        priorities[potential_bins] += fill_ratio * 0.7  # Weighted fill ratio

    # 2. Best Fit Encouragement
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += 1.5 # best_fit_weight

    # 3. Fragmentation Penalty (Adaptive)
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * 0.2 # fragmentation_threshold_multiplier
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= 1.3 # fragmentation_penalty

    # 4. Adaptive Exploration
    average_fill = np.mean((bin_size - bins_remain_cap) / bin_size) if num_bins > 0 else 0.0
    exploration_probability = 0.05 * (1.0 - average_fill)  # Explore more when bins are empty
    if np.random.rand() < exploration_probability:
        exploration_bonus = (bin_size - bins_remain_cap) / bin_size
        priorities += exploration_bonus * 0.2

    # 5. High fill incentive
    if np.any(potential_bins):
        fill_percentage = item / (bin_size - bins_remain_cap[potential_bins])
        high_fill_bins = (fill_percentage > 0.7) & (fill_percentage <= 1.0) # Limit the value of fill_percentage to 1

        if np.any(high_fill_bins):
            eligible_bins_index = np.where(potential_bins)[0][high_fill_bins]
            priorities[eligible_bins_index] += 0.5

    return priorities
```
