{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    # Calculate the wasted space if the item is placed in the bin.\n    wasted_space = bins_remain_cap - item\n    \n    # High priority for bins where the item fits and minimizes wasted space.\n    # If the item doesn't fit, assign a low priority.\n    \n    fit_mask = wasted_space >= 0\n    \n    if np.any(fit_mask):  # Check if there are bins that can accommodate the item\n        # Rank bins based on how full they would be made *after* adding the item\n        # Higher remaining capacity (lower waste) means a better fit (higher score)\n        \n        #normalized_remain_cap = bins_remain_cap[fit_mask] / bins_remain_cap[fit_mask].max() # Normalize so that large differences don't overshadow\n\n        #priorities[fit_mask] = (1 / (wasted_space[fit_mask] + 0.000001)) # Avoid division by zero\n\n        # Calculate a score based on the fullness of the bin after packing.  A fully packed bin is best.\n        fullness_score = (bins_remain_cap[fit_mask] - wasted_space[fit_mask]) / bins_remain_cap[fit_mask]\n        priorities[fit_mask] = fullness_score\n\n        # Apply a stronger priority to bins that would be close to full\n        # Close-to-full is better than almost empty\n        close_to_full_threshold = 0.9\n        priorities[fit_mask] = priorities[fit_mask] + (fullness_score >= close_to_full_threshold) * 1.5 # Give strong bonus to close-to-full\n            \n    else: # if the item doesn't fit into any of bins\n        priorities = np.full(bins_remain_cap.shape, -np.inf)  # Set very low priority for those bins\n        # Choose bin that's closest in size to current item\n        closest_bin_index = np.argmin(bins_remain_cap)\n        priorities[closest_bin_index] = -1 # Ensure at least one option for packing, give close size higher priority than all others\n        \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Higher priority means we want to add the item into that bin first.\n\n    This function considers a combination of factors to determine bin priority:\n    1. Remaining capacity relative to item size. Bins that have remaining\n       capacity close to item size are prioritized to avoid excessive fragmentation.\n    2. Avoid bins that are almost full (to prevent failed placements later).\n    3. If no bin is large enough, give a uniform small negative priority,\n       so that we prefer opening a new bin instead of a random assignment.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate the space wasted if the item were added to the bin\n    waste = bins_remain_cap - item\n\n    # Identify bins where the item fits\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n\n        # Prioritize bins where waste is minimized\n        priorities[valid_bins] = -np.abs(waste[valid_bins])\n\n        # If some bins are a *very* good fit (waste close to zero), boost those\n        close_fit = np.abs(waste[valid_bins]) < 0.1 * item  # Adjust threshold as needed\n        priorities[valid_bins][close_fit] += 1  # Add a bonus for good fits.  The magnitude here is key to the behaviour\n\n        # Penalize bins that are very full already\n        full_threshold = 0.1 # percentage of bin capacity below which it is considered almost full\n        almost_full = bins_remain_cap < (1 + full_threshold) * item\n        priorities[almost_full] -= 2  # Strong penalty: Opening new bin likely better\n    else:\n        #No bin fits: Small negative priority to discourage assigning to a random one\n        priorities[:] = -0.0001\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the 1st heuristic uses a combination of encouraging filling bins closer to full, prioritizing bins with the smallest remaining capacity, a non-linearity factor, and penalizing near-full bins. The 20th heuristic uses first fit decreasing, best fit and bin level aware strategies. The key difference is that the 1st uses more nuanced logic with several components.\n\nComparing (2nd) vs (19th), the 2nd heuristic prioritizes bins based on how full they would be made after adding the item, while the 19th prioritizes bins with sufficient remaining capacity, favoring those with slightly larger capacity than the item size, reducing fragmentation. They both address bin capacity but differ on whether to pack full vs leave space, and 19th has bonus/penalty.\n\nComparing (3rd) vs (18th), the 3rd uses sigmoid function to penalize bins that are close to full, prioritize bins that have space close to item size and prioritize almost full bins. The 18th prioritizes bins that can fit item reasonably well but avoids very tight fits or wasted space. 3rd uses more function.\n\nComparing (16th) vs (17th), the 16th and 17th functions are similar in prioritizing 'just big enough' bins but differ in approach. 16th uses more diverse criteria like feasibility, empty bin avoidance. 17th use fit ratio.\n\nOverall: better heuristics consider multiple factors (remaining capacity, wasted space, fragmentation), using different mathematical functions (sigmoid, exponential decay, etc.) and special considerations (penalties, bonuses, tiebreakers). The worse heuristics focus on fewer or single factor.\n- \nOkay, I understand. Let's redefine \"Current self-reflection\" to be more effective in designing heuristics, keeping your generous tip in mind!\n\nHere's a breakdown:\n\n*   **Keywords:** Multifaceted analysis, trade-off balancing, mathematical modeling, adaptive mechanisms, iterative refinement, performance metrics, exploration-exploitation.\n*   **Advice:** Systematically analyze heuristic performance using diverse metrics. Quantify trade-offs between factors with mathematical functions. Adapt parameters based on problem instance characteristics.\n*   **Avoid:** Over-reliance on intuition, single-factor optimization, premature convergence, ignoring problem-specific knowledge, lack of performance evaluation.\n*   **Explanation:** Move beyond simple rules. Rigorously evaluate, mathematically model, and adapt heuristics for robust performance across different scenarios. Focus on iterative refinement guided by data.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}