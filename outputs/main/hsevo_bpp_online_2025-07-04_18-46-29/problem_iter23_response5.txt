```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining fill ratio, best fit, and bin diversity with global awareness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    num_bins = len(bins_remain_cap)

    # Global fill level calculation
    total_bin_capacity = num_bins
    total_items_packed = total_bin_capacity - np.sum(bins_remain_cap)
    average_fill = total_items_packed / total_bin_capacity if total_bin_capacity > 0 else 0.0

    if np.any(valid_bins):
        # Adaptive Fill Ratio
        fill_ratio = item / bins_remain_cap[valid_bins]
        fill_ratio_weight = 0.6 * (1 - average_fill) # Decrease with higher fill
        priorities[valid_bins] += fill_ratio * fill_ratio_weight

        # Adaptive Best Fit
        remaining_space = bins_remain_cap[valid_bins] - item
        best_fit_weight = 0.9 * (1 + average_fill) # Increase with higher fill
        priorities[valid_bins] += np.exp(-4 * remaining_space) * best_fit_weight

        # Bin Diversity Bonus (adaptive)
        if len(bins_remain_cap) > 1:
            bin_std = np.std(bins_remain_cap)
            if bin_std > 0.1:
                diversity_bonus = 0.2 * (1 - average_fill) # Decrease with higher fill
                priorities[valid_bins] += diversity_bonus

        # Large item encouragement (adaptive)
        if item > 0.7:
            min_remaining = np.min(bins_remain_cap[valid_bins] - item)
            tight_fit = (bins_remain_cap[valid_bins] - item) == min_remaining
            tight_fit_bonus = 0.5 * (1 + average_fill) # Increase with higher fill
            priorities[valid_bins][tight_fit] += tight_fit_bonus

        # Fragmentation penalty
        remaining_space_all = bins_remain_cap - item
        fragmentation_threshold = 0.3
        fragmented_bins = (remaining_space_all > 0) & (remaining_space_all < fragmentation_threshold)
        fragmentation_penalty = 0.1 * average_fill  # Increase with higher fill
        priorities[fragmented_bins] -= fragmentation_penalty
        
        # Over-utilization penalty
        too_full_bins = (bins_remain_cap < item) & (bins_remain_cap > (item - 0.4))
        over_utilization_penalty = 0.05
        priorities[too_full_bins] -= over_utilization_penalty

    else:
        priorities[:] = -0.001  # Very low priority if item doesn't fit

    return priorities
```
