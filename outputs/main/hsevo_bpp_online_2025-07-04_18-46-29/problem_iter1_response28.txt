```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap)

    if np.any(eligible_bins):
        # Focus on bins where the item *can* fit
        remaining_space = bins_remain_cap[eligible_bins] - item
        
        # Heuristic 1: Try to fill bins as much as possible (minimize remaining space)
        #remaining_space_priority = 1 / (remaining_space + 1e-9) # Avoid division by zero, prioritize small remaining space

        # Heuristic 2: Use Best-Fit Decreasing strategy. Select bin that minimizes the wasted space,
        #but scaled by available bin size. Gives higher score to a better fit in a bigger bin, which should prevent
        #overfilling the small ones.
        remaining_space_priority = (bins_remain_cap[eligible_bins] - item) / bins_remain_cap[eligible_bins] 
        remaining_space_priority = 1 - remaining_space_priority  #Higher values mean less wasted space
        
        priorities[eligible_bins] = remaining_space_priority

    else:
        # No bin can fit. Give a slightly increasing score based on remaining capacity.
        # This is a fallback so that we choose bin with slightly larger size. 
        # Prioritize bins with larger remaining capacity to avoid overly concentrating on small bins when new bins cannot be allocated.
        priorities = bins_remain_cap #Prioritize the bin with the most remaining capacity
    
    return priorities
```
