```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive fill ratio, best fit, frag. penalty & reuse, exploration, and global awareness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    total_bin_capacity = num_bins  # Assuming each bin has capacity 1
    total_items_packed = total_bin_capacity - np.sum(bins_remain_cap)
    average_fill = total_items_packed / total_bin_capacity if total_bin_capacity > 0 else 0.0
    
    # Adaptive Weights - based on item size, bin availability and global fill level
    item_size_factor = min(0.75, item)  # Capped item size factor
    bin_availability_factor = min(1.27, np.sum(bins_remain_cap >= item) / num_bins)
    
    # Dynamic weight adjustments based on global fill
    fill_ratio_weight = 0.07 + 0.10 * item_size_factor * (1 + average_fill)
    best_fit_weight = 2.81 + 0.68 * bin_availability_factor * (1 - average_fill)
    fragmentation_penalty_weight = 1.47 + 0.82 * item_size_factor * (1 + average_fill)
    reuse_weight = 0.79 + 0.51 * bin_availability_factor * (1 - average_fill)

    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Fill Ratio - Adaptive
        fill_ratio = item / (bins_remain_cap[eligible_bins] + 1e-6)  # Avoid division by zero
        priorities[eligible_bins] += fill_ratio_weight * fill_ratio

        # Best Fit - Exponential decay
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] += best_fit_weight * np.exp(-2.73 * remaining_space)

    # Fragmentation Penalty - Dynamic threshold
    remaining_space_all = bins_remain_cap - item
    fragmentation_threshold = item * (0.45 + 0.04 * item_size_factor) * (0.2 / np.sqrt(num_bins))
    fragmented_bins = (remaining_space_all > 0) & (remaining_space_all <= fragmentation_threshold)
    priorities[fragmented_bins] -= fragmentation_penalty_weight * (1-average_fill)**2 # Squared penalty

    # Almost empty reuse
    almost_empty_threshold = 0.93 - (0.20 * average_fill)
    almost_empty = bins_remain_cap > almost_empty_threshold
    if np.any(almost_empty):
        almost_empty_bonus = 0.09 + average_fill * 0.57
        priorities[almost_empty] += reuse_weight * almost_empty_bonus

    # Penalize bins that are close to full but can't fit the item
    too_full_bins = (bins_remain_cap < item) & (bins_remain_cap > (item-0.42))
    priorities[too_full_bins] -= 0.08

    # Global Bin Balancing: Encourage filling emptier bins when average fill is high
    if average_fill > 0.7:
        empty_bin_bonus = (1-average_fill) * bins_remain_cap
        priorities += 0.1*empty_bin_bonus # Bonus for packing into more empty bins

    # Exploration: Adaptive exploration based on global fill level
    exploration_factor = 0.026 * item * (1-average_fill) # Reduced exploration as bins fill up
    priorities += np.random.uniform(-exploration_factor, exploration_factor, size=num_bins)

    return priorities
```
