```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: If the item doesn't fit, priority is -inf
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # 2. First Fit Decreasing-ish: Prioritize bins that are "just big enough".
    #    We want to fill bins as much as possible to avoid fragmentation.
    #    Use an exponential decay to heavily penalize larger bins.
    feasible = ~infeasible
    remaining_after_fit = bins_remain_cap[feasible] - item
    priorities[feasible] = np.exp(-10 * remaining_after_fit / item)

    # 3. Avoid Very Empty Bins (Except when necessary)
    # If almost empty and item does not fill to over certain value, penalize.
    almost_empty = bins_remain_cap > 0.9
    will_not_fill = bins_remain_cap - item > 0.1
    priorities[almost_empty & will_not_fill] -= 0.1 # small penalty

    # 4. Give a tiny nudge for the fullest bin to break ties.
    # This is like a 'best fit' tiebreaker
    if np.any(feasible): # Only if there ARE feasible bins...
        best_fit_idx = np.argmax(bins_remain_cap[feasible] - item)
        indices = np.where(feasible)[0] # Get indices that are True
        priorities[indices[best_fit_idx]] += 0.001 # very small bonus
    return priorities
```
