```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_size: float = 1.0) -> np.ndarray:
    """Adaptive heuristic combining fill ratio, best fit, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    average_fill = np.mean(1 - bins_remain_cap / bin_size) if num_bins > 0 else 0.0
    item_size_factor = min(1.0, item)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # 1. Adaptive Fill Ratio: Encourage higher fill
        fill_ratio = item / bins_remain_cap[eligible_bins]
        priorities[eligible_bins] += (0.6 + 0.2 * item_size_factor) * fill_ratio

        # 2. Best Fit: Reward tighter fits
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] += (0.7 + 0.1 * item_size_factor) * np.exp(-2 * remaining_space)

        # 3. Fragmentation Penalty: Discourage leaving small gaps
        fragmentation_threshold = 0.2
        fragmented_bins = remaining_space > 0.001 &(remaining_space <= fragmentation_threshold * item_size_factor)
        priorities[eligible_bins][fragmented_bins] -= (0.3 + 0.1 * item_size_factor) * (remaining_space[fragmented_bins] / item)

        # 4. Almost Empty Reuse: Prefer near-empty bins
        almost_empty_threshold = 0.9
        almost_empty = bins_remain_cap > (almost_empty_threshold * bin_size)
        priorities[almost_empty] += 0.4  #flat bonus for now.

    else:
        priorities[:] = -0.001 #small penalty.

    # 5. Exploration: Introduce controlled randomness
    exploration_factor = 0.01 * item * (1 - average_fill)
    priorities += np.random.uniform(-exploration_factor, exploration_factor, size=num_bins)

    # 6. Encourage utilization balancing:
    bin_utilization = 1 - bins_remain_cap / bin_size
    utilization_std = np.std(bin_utilization)
    priorities += (1 - utilization_std) * 0.05

    return priorities
```
