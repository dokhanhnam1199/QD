```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fullness, and adaptive penalties."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Minimize waste (smallest remaining capacity after adding the item)
        waste = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = -np.abs(waste)  # Initial priority

        # Target fullness bonus
        fullness = (bins_remain_cap[eligible_bins] - waste) / bins_remain_cap[eligible_bins]
        target_fullness = 0.8
        fullness_bonus = np.exp(-np.abs(fullness - target_fullness) * 5)  # Smoother bonus
        priorities[eligible_bins] += fullness_bonus

        # Adaptive penalty for near-full bins (scale penalty by item size)
        near_full = (bins_remain_cap[eligible_bins] <= item * 1.2)
        penalty_scale = item / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.1
        priorities[eligible_bins[near_full]] -= 2 * penalty_scale # Adaptive Penalty

        # Bonus for good fit
        fit_ratio = item / bins_remain_cap[eligible_bins]
        good_fit = (fit_ratio >= 0.5) & (fit_ratio <= 0.95)
        priorities[eligible_bins[good_fit]] += 1.0

    else:
        priorities[:] = -0.0001  # Small negative priority if no bin fits

    # Exploration: Add a small random noise
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01
    return priorities
```
