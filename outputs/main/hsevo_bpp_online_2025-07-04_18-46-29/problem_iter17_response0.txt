```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill-ratio, best-fit, adaptive fragmentation penalty, and bin balancing."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item
    item_size_factor = min(1.0, item)

    if np.any(eligible_bins):
        # 1. Fill Ratio Preference (adaptive)
        fill_ratio = item / bins_remain_cap[eligible_bins]
        priorities[eligible_bins] += (0.6 + 0.2 * item_size_factor) * fill_ratio

        # 2. Best Fit Encouragement (Nonlinear + adaptive)
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] += (0.7 + 0.1 * item_size_factor) * np.exp(-remaining_space)

        # 3. Adaptive Fragmentation Penalty
        max_bin_cap = np.max(bins_remain_cap) if np.any(bins_remain_cap) else 1.0
        fragmentation_penalty = 0.2 * (remaining_space / max_bin_cap) * (1 + item_size_factor)
        priorities[eligible_bins] -= fragmentation_penalty

    # 4. Bin Balancing (Encourage use of emptier bins)
    bin_capacity_normalized = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else np.zeros_like(bins_remain_cap)
    priorities += 0.15 * (1-bin_capacity_normalized)

    # 5. Encourage re-use of almost empty bins (adaptive threshold)
    almost_empty_threshold = 0.9 + 0.05 * item_size_factor
    almost_empty = bins_remain_cap > almost_empty_threshold
    if np.any(almost_empty):
        priorities[almost_empty] += 0.6 + 0.1 * item_size_factor

    #6. Add small bonus to bins that can accommodate the item (tie breaker).
    if np.any(eligible_bins):
      priorities[eligible_bins] += 0.01

    else:
       priorities[:] = -0.001 # Discourage if no suitable bin

    return priorities
```
