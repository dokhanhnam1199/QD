{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balances waste, fullness, and fit with adaptive scaling.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = -np.abs(waste)  # Favors minimal waste\n\n        close_fit = np.abs(waste) < 0.1 * item\n        priorities[valid_bins][close_fit] += 1  # Bonus for very good fit\n\n        almost_full = bins_remain_cap[valid_bins] < (1 + 0.1) * item\n        priorities[valid_bins][almost_full] -= 2  # Penalty for nearly full\n\n        # First Fit Decreasing component, scaled adaptively\n        remaining_after_fit = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] += np.exp(-10 * remaining_after_fit / item) * 0.5 #Scale impact\n        fill_fraction = item / bins_remain_cap[valid_bins]\n\n        priorities[valid_bins] += fill_fraction * 0.3\n    else:\n        priorities[:] = -0.0001  # Discourage random placement\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}