```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive heuristic combining best-fit, target fill, fragmentation,
    and state-aware adjustments based on bin fill levels.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    num_bins = len(bins_remain_cap)

    if np.any(valid_bins):
        # Best-fit component (minimize waste), scaled by item size
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] -= np.abs(waste) * (1 + 0.15 * item)

        # Target fill bonus (around 80% full)
        target_fill = 0.8
        ideal_remaining = 1 - target_fill
        distance_to_ideal = np.abs((bins_remain_cap[valid_bins] - item) - ideal_remaining)
        priorities[valid_bins] += np.exp(-distance_to_ideal * 6)

        # Fragmentation penalty, adaptive to remaining space and number of bins
        fragmentation_threshold = item * 0.12
        remaining_space = bins_remain_cap - item
        fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
        fragmentation_penalty = 1.0 + 0.6 * (fragmentation_threshold - remaining_space[fragmented_bins]) / (fragmentation_threshold + 1e-9)
        priorities[fragmented_bins] -= fragmentation_penalty * (1 + 0.07 * (num_bins / (np.sum(bins_remain_cap) + 1e-9)))

        # Encourage near-empty reuse
        almost_empty_threshold = 0.9
        almost_empty = bins_remain_cap > almost_empty_threshold
        if np.any(almost_empty):
            almost_empty_bonus = 0.6 + 0.5 * (bins_remain_cap[almost_empty] - almost_empty_threshold) / (1 - almost_empty_threshold + 1e-9)
            priorities[almost_empty] += almost_empty_bonus * (1 - item) # scale bonus with item size

        # Bin Diversity Bonus: Encourages using bins with different fill levels
        if num_bins > 1:  # Only apply when there is a choice
            bin_std = np.std(bins_remain_cap)
            if bin_std > 0.1:  # Diversity threshold, only apply if there is actual diversity
                priorities[valid_bins] += 0.2  # Add same bonus to all potential bins to be fair

    else:
        priorities[:] = -100  # Discourage invalid placements

    return priorities
```
