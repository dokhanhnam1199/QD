```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Objective Function: Combination of factors
    
    # 1. Space Utilization: Encourage filling bins closer to full but not overly full
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        utilization = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += (1 - utilization)  # Higher priority for better utilization

    # 2. Best Fit: Prioritize bins with smallest remaining capacity that can still fit the item
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] += np.exp(-remaining_space) # Exponential decay gives high priority to best fit

    # 3. Fragmentation Penalty: Penalize bins that would become too full after adding the item, leading to fragmentation. Sigmoid function used for smooth penalty.
    near_full_threshold = 0.95
    near_full = (bins_remain_cap >= item) & (bins_remain_cap - item <= (1 - near_full_threshold) * bins_remain_cap)

    if np.any(near_full):
        priorities[near_full] -= 1 / (1 + np.exp(-100*(bins_remain_cap[near_full] - item - (1 - near_full_threshold) * bins_remain_cap[near_full]))) # Sigmoid Penalty

    # 4. Bin Balancing: Encourage balancing the load across bins.
    bin_capacity_normalized = bins_remain_cap / np.max(bins_remain_cap)
    priorities += bin_capacity_normalized # Higher value = more remaining capacity

    return priorities
```
