```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive weights, best fit, fragmentation, reuse, global fill awareness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    average_fill = np.mean(1 - bins_remain_cap)
    std_fill = np.std(1 - bins_remain_cap)
    
    # 1. Adaptive Fill Ratio
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        fill_ratio = item / bins_remain_cap[eligible_bins]
        priorities[eligible_bins] += fill_ratio * (0.7 + 0.3 * (1 - average_fill))

    # 2. Enhanced Best Fit with exponential decay
    if np.any(eligible_bins):
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] += 1.5 * np.exp(-2.0 * remaining_space / item)

    # 3. Adaptive Fragmentation Penalty
    remaining_space_all = bins_remain_cap - item
    fragmentation_threshold = item * (0.1 + 0.03 * average_fill)
    fragmented_bins = (remaining_space_all > 0) & (remaining_space_all <= fragmentation_threshold)
    priorities[fragmented_bins] -= 1.0 * (1+ std_fill)

    # 4. Almost Empty Bonus
    almost_empty_threshold = 0.9
    almost_empty = bins_remain_cap > almost_empty_threshold
    if np.any(almost_empty):
        priorities[almost_empty] += 0.3

    # 5. Global Fill Level Encouragement
    global_fill_level = np.sum(1 - bins_remain_cap) / num_bins
    if global_fill_level > 0.6:
        exploration_bonus = 0.1 * bins_remain_cap
        priorities += exploration_bonus

    # 6. Discourage near empty early
    if global_fill_level < 0.1:
        near_empty_threshold = 0.95
        near_empty = bins_remain_cap > near_empty_threshold
        if np.any(near_empty):
            priorities[near_empty] -= 0.2

    # 7. State-aware Exploration
    exploration_factor = 0.05 * item * (1 + std_fill)
    priorities += np.random.uniform(-exploration_factor, exploration_factor, size=num_bins)
    return priorities
```
