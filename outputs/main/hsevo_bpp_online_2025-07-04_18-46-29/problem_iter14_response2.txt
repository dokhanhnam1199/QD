```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority: Best-fit, target fill, fragmentation, near-empty bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Best-fit: Minimize waste. Larger items get higher best-fit score
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] -= np.abs(waste) * (1 + item) # Item size scaling

        # Target fill: Encourage around 80% fill
        target_fill = 0.8
        ideal_remaining = 1 - target_fill
        distance_to_ideal = np.abs((bins_remain_cap[valid_bins] - item) - ideal_remaining)
        priorities[valid_bins] += np.exp(-distance_to_ideal * 5)

        # Fragmentation penalty: Discourage near-full bins, scaled by item size
        near_full_threshold = 0.1
        near_full = (bins_remain_cap[valid_bins] >= item) & (bins_remain_cap[valid_bins] < (item * (1 + near_full_threshold)))
        priorities[valid_bins][near_full] -= 1.2 + item  # Item size scaling

        # Encourage near-empty reuse with size condition
        near_empty_threshold = 0.1
        near_empty = bins_remain_cap > (1 - item * near_empty_threshold)
        priorities[near_empty] -= 0.75 * (1-item)
    else:
        priorities[:] = -100  # Very low for invalid placements
    return priorities
```
