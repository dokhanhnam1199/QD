```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates ideas of:
    1. **First Fit Decreasing (FFD)-ish**: Prioritize bins that can fit the item snugly, but penalize bins that are almost full to avoid fragmentation
    2. **Best Fit**: Prioritize bins that leave the least wasted space.
    3. **Bin Level Aware**:  A slight bias towards filling "more" empty bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign large negative priority to bins that can't fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Prioritize bins that fit but penalize very full bins
    feasible_mask = ~infeasible_mask

    if np.any(feasible_mask):

        # Reward "snug" fits, calculated by closeness of item to remaining capacity
        fit_scores = np.exp(-(bins_remain_cap[feasible_mask] - item))

        # Add bonus to "almost empty" bins - helps open new bins
        empty_bin_bonus = bins_remain_cap[feasible_mask]

        # Avoid bins almost full - higher number means lower priority. This should result in more even bin usage
        almost_full_penalty =  np.exp(10 * (1 - (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap))))

        priorities[feasible_mask] =  fit_scores + 0.1*empty_bin_bonus - almost_full_penalty

    return priorities
```
