```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item relatively closely,
    but also discourages using almost empty bins if others are available.
    It incorporates both a capacity fit score and a residual capacity penalty.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Capacity fit score: Higher if the item fits relatively snugly
    fit_scores = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item
    fit_scores[can_fit] = (bins_remain_cap[can_fit] - item) / bins_remain_cap[can_fit]
    fit_scores = 1 - fit_scores
    fit_scores[~can_fit] = -1  # Assign negative score if item doesn't fit

    # Residual capacity penalty: Lower if bin is mostly empty after adding item.

    residual_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    bins_after_fit = bins_remain_cap - item
    residual_penalty[can_fit] = np.abs(bins_after_fit[can_fit] / bins_remain_cap[can_fit])


    # Combine fit score and residual capacity penalty
    # Give fit a higher importance by scaling the penalty to have a minimal impact if the item does not fit.
    priorities = fit_scores - 0.1*residual_penalty

    return priorities
```
