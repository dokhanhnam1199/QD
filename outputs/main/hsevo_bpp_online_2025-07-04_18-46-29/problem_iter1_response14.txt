```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Prioritize bins that can fit the item closely (minimize wasted space).
    # Avoid bins that are too small or would be left with very little space.

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, capacity in enumerate(bins_remain_cap):
        if capacity < item:
            priorities[i] = -np.inf  # Cannot fit
        else:
            wasted_space = capacity - item
            if wasted_space < 0.1:  # Avoid leaving nearly empty space. This value could be tuned.
                priorities[i] = -np.inf # Prefer other bins to fill them better

            else:
                # Prioritize bins where wasted space is relatively small but not trivial
                # Inverse of wasted space favors tighter fits. Add capacity to favor bins with enough space.
                priorities[i] = (1 / (wasted_space + 0.001)) + (capacity * 0.1) # added small value for handling wasted space 0

    return priorities
```
