```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_size: float = 1.0) -> np.ndarray:
    """Improved priority function for online bin packing, focusing on adaptivity and multi-objective optimization."""

    num_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # --- Adaptive Parameters ---
    average_fill = np.mean(1 - bins_remain_cap / bin_size)
    item_size_relative = item / bin_size # Normalize item size.

    # The smaller items are, the stronger 'best fit' should be.
    best_fit_weight = 2.0 + (1 - item_size_relative) * 3.0
    # Fragmentation penalty should be stronger when bins are emptier.
    fragmentation_penalty_weight = 1.0 + average_fill * 2.0
    # Reuse empty bins more aggressively when there are few open bins.
    reuse_weight = 1.0 + (1 - np.sum(bins_remain_cap > 0) / num_bins) * 2.0

    # --- Fill Ratio ---
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        fill_ratio = item / (bins_remain_cap[eligible_bins] + 0.001) # Small constant to avoid division by zero
        priorities[eligible_bins] += fill_ratio * 0.7 # Weight fill ratio.

    # --- Best Fit ---
    if np.any(eligible_bins):
        remaining_space = bins_remain_cap[eligible_bins] - item
        # Exponential decay favors bins with the least remaining space.
        priorities[eligible_bins] += best_fit_weight * np.exp(-5 * remaining_space / bin_size)

    # --- Fragmentation Penalty ---
    # Penalize bins that, after placing the item, will have a small remaining space.
    remaining_space_all = bins_remain_cap - item
    fragmentation_threshold = 0.2 * item_size_relative  # Threshold as a fraction of item size.
    fragmented_bins = (remaining_space_all > 0) & (remaining_space_all <= fragmentation_threshold)
    priorities[fragmented_bins] -= fragmentation_penalty_weight * (1 - average_fill)

    # --- Reuse Almost Empty Bins ---
    almost_empty_threshold = 0.9 # Define "almost empty" as a fraction of bin size.
    almost_empty = bins_remain_cap > almost_empty_threshold * bin_size
    if np.any(almost_empty):
        priorities[almost_empty] += reuse_weight * 0.5

    # --- Penalize Too-Full Bins ---
    too_full_threshold = 0.1 # Penalize bins with insufficient space
    too_full_bins = (bins_remain_cap < item) & (bins_remain_cap > (bins_remain_cap.max() - too_full_threshold))
    priorities[too_full_bins] -= 0.3

    # --- Exploration ---
    # Add a small amount of randomness to encourage exploration of different solutions.
    exploration_factor = 0.01 * item  # Scale randomness based on item size.
    priorities += np.random.uniform(-exploration_factor, exploration_factor, size=num_bins)

    # --- Bin Utilization Balance ---
    bin_utilization = 1 - bins_remain_cap / bin_size
    utilization_std = np.std(bin_utilization)
    priorities += (1 - utilization_std) * 0.1

    return priorities
```
