```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap)

    if np.any(eligible_bins):
        # Focus on bins that can accommodate the item.
        remaining_space = bins_remain_cap[eligible_bins] - item
        # Prioritize bins that would be fullest after packing (smallest remaining space)
        priorities[eligible_bins] = 1 / (remaining_space + 1e-9)  # Adding small value to avoid division by zero

        #Boost priority to almost full bins.
        almost_full_bins = (bins_remain_cap[eligible_bins] - item) < (0.1 * bins_remain_cap[eligible_bins])

        priorities[np.where(eligible_bins)[0][almost_full_bins]] *= 2 #Double the priority


    else:
        #No bin is capable of containing item. Let's give them equal priority so a new bin will be open.
        priorities = np.ones_like(bins_remain_cap) *0.1


    return priorities
```
