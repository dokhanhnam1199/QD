[
  {
    "stdout_filepath": "problem_iter8_response0.txt_stdout.txt",
    "code_path": "problem_iter8_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best fit, utilization, and fragmentation penalty.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    potential_bins = bins_remain_cap >= item\n\n    if np.any(potential_bins):\n        # 1. Best Fit\n        remaining_space = bins_remain_cap[potential_bins] - item\n        priorities[potential_bins] += np.exp(-remaining_space)\n\n        # 2. Utilization\n        utilization = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]\n        priorities[potential_bins] += (1 - utilization)\n\n        # 3. Fragmentation Penalty\n        near_full_threshold = 0.95\n        near_full = (bins_remain_cap[potential_bins] - item <= (1 - near_full_threshold) * bins_remain_cap[potential_bins])\n        priorities[potential_bins][near_full] -= 1 / (1 + np.exp(-100*(bins_remain_cap[potential_bins][near_full] - item - (1 - near_full_threshold) * bins_remain_cap[potential_bins][near_full])))\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response1.txt_stdout.txt",
    "code_path": "problem_iter8_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fill ratio, adaptive waste penalty, and bin balancing.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Fill Ratio (Sigmoid)\n        fill_ratio = item / bins_remain_cap[eligible_bins]\n        fill_ratio = 1 / (1 + np.exp(-5 * (fill_ratio - 0.5)))\n        priorities[eligible_bins] += fill_ratio\n\n        # Adaptive Waste Penalty\n        waste = bins_remain_cap[eligible_bins] - item\n        waste_penalty = np.exp(waste / np.mean(bins_remain_cap[eligible_bins])) - 1 if np.mean(bins_remain_cap[eligible_bins]) > 0 else 0\n        priorities[eligible_bins] -= waste_penalty\n        \n    # Bin Balancing: Reward bins with capacity far from mean capacity\n    bin_capacity_mean = np.mean(bins_remain_cap)\n    capacity_difference = np.abs(bins_remain_cap - bin_capacity_mean)\n    capacity_balance_reward = np.exp(-capacity_difference/np.std(bins_remain_cap)) if np.std(bins_remain_cap) > 0 else 0\n    priorities += capacity_balance_reward * 0.1\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response2.txt_stdout.txt",
    "code_path": "problem_iter8_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity utilization, smallest remaining capacity, and adaptive penalty.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    potential_bins = bins_remain_cap >= item\n    if np.any(potential_bins):\n        # Capacity Utilization\n        utilization_ratio = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]\n        priorities[potential_bins] += (1 - utilization_ratio)**2\n\n        # Smallest Remaining Capacity\n        min_remaining = np.min(bins_remain_cap[potential_bins])\n        priorities[bins_remain_cap == min_remaining] += 2\n\n        # Adaptive Penalty based on fullness\n        bin_utilization = 1 - bins_remain_cap / np.max(bins_remain_cap)\n        penalty = np.exp(5 * (bin_utilization - 0.9))\n        priorities -= penalty\n        \n        # Item size consideration\n        priorities[potential_bins] += item / np.max(bins_remain_cap)\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response3.txt_stdout.txt",
    "code_path": "problem_iter8_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fullest bin, near fit bonus, and dynamic fragmentation penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Fullest Bin: Prioritize smallest remaining space\n        remaining_space = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = 1 / (remaining_space + 1e-9)\n\n        # Near Fit bonus: Reward bins slightly larger than item\n        near_fit_threshold_upper = item * 1.2\n        near_fit_bins = (bins_remain_cap >= item) & (bins_remain_cap <= near_fit_threshold_upper)\n        priorities[near_fit_bins] += 0.5 * priorities[near_fit_bins]\n\n        # Adaptive Fragmentation Penalty: Penalize almost-full bins\n        near_full_threshold = 0.95\n        near_full = (bins_remain_cap >= item) & (bins_remain_cap - item <= (1 - near_full_threshold) * bins_remain_cap)\n        if np.any(near_full):\n            priorities[near_full] -= 1 / (1 + np.exp(-100*(bins_remain_cap[near_full] - item - (1 - near_full_threshold) * bins_remain_cap[near_full])))\n    else:\n        priorities[:] = -1  # Item doesn't fit\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.038691663342641,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response4.txt_stdout.txt",
    "code_path": "problem_iter8_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins balancing waste, fullness, and fit.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = -np.abs(waste) # Favors minimal waste\n\n        close_fit_threshold = 0.1\n        close_fit = np.abs(waste) < close_fit_threshold * item\n        priorities[valid_bins][close_fit] += 1  # Bonus for very good fit\n\n        almost_full_threshold = 0.1\n        almost_full_penalty = 10\n        almost_full = bins_remain_cap < (1 + almost_full_threshold) * item\n        priorities[almost_full] -= almost_full_penalty # Penalty for nearly full\n\n        sigmoid = 1 / (1 + np.exp(10 * (item - bins_remain_cap)))\n        priorities += 0.5 * sigmoid\n    else:\n        discourage_random_placement_value = 100\n        priorities[:] = -discourage_random_placement_value\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 5.574391703230963,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response5.txt_stdout.txt",
    "code_path": "problem_iter8_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best fit, target fill, and residual capacity with adaptive penalty.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        # Best Fit component\n        remaining_space = bins_remain_cap[can_fit] - item\n        fit_scores = 1 / (remaining_space + 1e-9)\n\n        # Target fill ratio component (around 70%)\n        fit_ratios = item / bins_remain_cap[can_fit]\n        target_priority = np.exp(-np.abs(fit_ratios - 0.7))\n\n        # Residual Capacity Penalty: Avoid leaving tiny spaces\n        residual_penalty = np.abs(remaining_space / bins_remain_cap[can_fit])\n\n        # Capacity weights\n        capacity_weights = bins_remain_cap[can_fit]/np.max(bins_remain_cap)\n        \n        # Combined score with capacity weights for balancing\n        combined_priority = (capacity_weights * fit_scores + (1 - capacity_weights) * target_priority) - 0.1*residual_penalty\n\n        #Adaptive Penalty for bin utilization > 90%\n        bin_utilization = 1 - bins_remain_cap[can_fit] / np.max(bins_remain_cap)\n        adaptive_penalty = np.exp(5 * (bin_utilization - 0.9))\n        combined_priority -= adaptive_penalty\n\n        priorities[can_fit] = combined_priority\n    else:\n        # Prioritize larger bins when no fit exists\n        priorities = bins_remain_cap\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.587155963302752,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response6.txt_stdout.txt",
    "code_path": "problem_iter8_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using best fit, target fullness, and adaptive penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    potential_bins = bins_remain_cap >= item\n\n    if np.any(potential_bins):\n        # Best Fit Component: Prioritize bins with minimal waste.\n        waste = bins_remain_cap[potential_bins] - item\n        priorities[potential_bins] += np.exp(-waste)\n\n        # Encourage filling bins closer to full, more directly.\n        priorities[potential_bins] += (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]\n\n        # Adaptive Fragmentation Penalty: Penalize near-full bins adaptively.\n        near_full = (bins_remain_cap[potential_bins] < item * 1.1)\n        priorities[potential_bins[near_full]] -= 0.5 \n\n        # Introduce tiny Randomness for exploration\n        priorities += np.random.rand(len(bins_remain_cap)) * 0.001\n\n    else:\n        priorities[:] = -0.0001\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 18, in priority_v2\n    # Target fill ratio component (around 70%)\nIndexError: boolean index did not match indexed array along axis 0; size of axis is 4999 but size of corresponding boolean axis is 2\n"
  },
  {
    "stdout_filepath": "problem_iter8_response7.txt_stdout.txt",
    "code_path": "problem_iter8_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best fit with adaptive waste penalty and target fill.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        remaining_space = bins_remain_cap[can_fit] - item\n        # Best Fit: prioritize smaller remaining space\n        fit_scores = 1 / (remaining_space + 1e-9)\n\n        # Adaptive Waste Penalty: Larger penalty for bigger waste relative to item size\n        waste_ratio = remaining_space / item\n        waste_penalty = np.exp( -waste_ratio)\n\n        # Target fill ratio component (around 70%)\n        fit_ratios = item / bins_remain_cap[can_fit]\n        target_priority = np.exp(-np.abs(fit_ratios - 0.7))\n        priorities[can_fit] = fit_scores - 0.5*waste_penalty + 0.3*target_priority\n\n    else:\n        # Prioritize larger bins when no fit exists\n        priorities[:] = bins_remain_cap\n\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 60.13163143199043,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response8.txt_stdout.txt",
    "code_path": "problem_iter8_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fill optimization with adaptive penalties.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = -np.abs(waste)\n\n        close_fit_threshold = 0.1\n        close_fit = np.abs(waste) < close_fit_threshold * item\n        priorities[valid_bins][close_fit] += 1\n\n        almost_full_threshold = 0.1\n        almost_full_penalty = 2.79\n        almost_full = bins_remain_cap[valid_bins] < (1 + almost_full_threshold) * item\n        priorities[valid_bins][almost_full] -= almost_full_penalty\n\n        remaining_after_fit_scale = 6.44\n        remaining_after_fit_weight = 0.25\n\n        remaining_after_fit = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] += np.exp(-remaining_after_fit_scale * remaining_after_fit / item) * remaining_after_fit_weight\n\n        fill_fraction = item / bins_remain_cap[valid_bins]\n        fill_fraction_weight = 0.39\n        priorities[valid_bins] += fill_fraction * fill_fraction_weight\n\n    else:\n        discourage_placement_value = 0.0008\n        priorities[:] = -discourage_placement_value\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response9.txt_stdout.txt",
    "code_path": "problem_iter8_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by combining fill ratio, best fit, and bin balancing.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if np.any(eligible_bins):\n        # Fill Ratio\n        fill_ratio = item / bins_remain_cap[eligible_bins]\n        priorities[eligible_bins] += fill_ratio\n\n        # Best Fit\n        remaining_space = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] += np.exp(-remaining_space)\n\n    # Bin Balancing\n    bin_capacity_normalized = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else np.zeros_like(bins_remain_cap)\n    priorities += 0.1*bin_capacity_normalized\n\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.058635819704831,
    "exec_success": true
  }
]