```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, fill ratio, bin balancing, and fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Fill Ratio - encourages filling bins well
        fill_ratio = item / bins_remain_cap[eligible_bins]
        priorities[eligible_bins] += 0.5 * fill_ratio

        # Best Fit - minimizes wasted space
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] += 0.6 * np.exp(-remaining_space) #Nonlinear best fit

        # Fragmentation Penalty - discourages leaving small gaps
        priorities[eligible_bins] -= 0.2 * (remaining_space / np.max(bins_remain_cap)) # Normalize penalty

    # Bin Balancing - distributes items across bins
    bin_capacity_normalized = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else np.zeros_like(bins_remain_cap)
    priorities += 0.1 * bin_capacity_normalized

    return priorities
```
