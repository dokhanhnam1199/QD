```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill-ratio, fragmentation penalty, and bin-emptiness with adaptive weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # 1. Fill Ratio Preference (Weighted by remaining capacity)
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratios = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += fill_ratios * (1 + 0.5 * bins_remain_cap[potential_bins])  # Weight fill ratio

    # 2. Best Fit Encouragement (Adaptive Bonus)
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        best_fit_bonus = 1.5 + 0.7 * (1 - (min_diff / item))  # Adaptive bonus based on how "best" it is
        priorities[best_fit_bins] += best_fit_bonus

    # 3. Fragmentation Penalty (Adaptive Threshold and Penalty)
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * (0.15 + 0.05 * (num_bins / (np.sum(bins_remain_cap) + 1e-9))) #threshold shrinks as bin space increases
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    fragmentation_penalty = 1.0 + 0.5 * (fragmentation_threshold - remaining_space[fragmented_bins]) / (fragmentation_threshold + 1e-9) #penalty increases as space remaining nears the threshold
    priorities[fragmented_bins] -= fragmentation_penalty

    # 4. Encourage re-use of almost empty bins (Adaptive Bonus)
    almost_empty_threshold = 0.9
    almost_empty = bins_remain_cap > almost_empty_threshold
    if np.any(almost_empty):
        almost_empty_bonus = 0.5 + 0.4 * (bins_remain_cap[almost_empty] - almost_empty_threshold) / (1 - almost_empty_threshold + 1e-9)
        priorities[almost_empty] += almost_empty_bonus

    # 5. Penalize bins that are too full to discourage overfill
    too_full_threshold = item*1.1 # if bin is filled more than item size, penalize it.
    overfilled_bins = (bins_remain_cap < item) & (bins_remain_cap > 0)
    if np.any(overfilled_bins):
        priorities[overfilled_bins] -= 0.8 #slight penality to encourage use of other viable bins
        
    return priorities
```
