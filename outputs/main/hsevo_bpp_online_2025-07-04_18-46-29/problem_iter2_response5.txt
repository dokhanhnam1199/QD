```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines 'fullest bin' and 'near fit' strategies.
    Prioritizes bins that minimize remaining space but avoids overly tight fits.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Fullest Bin component: Prioritize smallest remaining space
        remaining_space = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = 1 / (remaining_space + 1e-9)

        # Near Fit adjustment: Give bonus to bins with slightly larger capacity
        near_fit_threshold_upper = item * 1.2
        near_fit_bins = (bins_remain_cap >= item) & (bins_remain_cap <= near_fit_threshold_upper)
        priorities[near_fit_bins] += 0.5 * priorities[near_fit_bins] # Near fit bonus (fraction of existing priority)
    else:
        priorities[:] = -1  # Very low priority if item doesn't fit

    return priorities
```
