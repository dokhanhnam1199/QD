```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing encouragement with a nuanced approach
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        # Prioritize bins with the smallest remaining capacity *after* adding the item.
        remaining_after_fit = bins_remain_cap[eligible_bins] - item
        min_remaining_after_fit = np.min(remaining_after_fit)
        priorities[eligible_bins & (bins_remain_cap - item == min_remaining_after_fit)] += 2  # Higher initial priority

        # Add a bonus for bins that are a "good" fit, but not too tight. This encourages using space efficiently without over-constraining future placements.
        fit_ratio = item / bins_remain_cap[eligible_bins]
        good_fit = (fit_ratio >= 0.5) & (fit_ratio <= 0.95)  # Adjust these bounds as needed
        priorities[eligible_bins] += np.where(good_fit, 1.0, 0.0)

    # Dynamic penalty for near-full bins, adjusted based on item size
    near_full = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.2)
    if np.any(near_full):
        penalty = 0.75 * (item / np.max(bins_remain_cap))  # Scale penalty by relative item size
        priorities[near_full] -= penalty

    # Reward bins that are already relatively full (but can still fit the item)
    # This helps consolidate items into fewer bins.
    relatively_full = bins_remain_cap > item
    if np.any(relatively_full):
        priorities[relatively_full] += (1 - (bins_remain_cap[relatively_full] / np.max(bins_remain_cap))) * 0.5

    # Exploration component: Introduce a small random element to prevent getting stuck.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.05

    return priorities
```
