```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, fill-ratio, fragmentation penalty, and bin utilization,
    with adaptive components.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0 # Assuming bin size is 1

    # 1. Fill Ratio Preference (Prioritize bins where item fits)
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratios = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += fill_ratios * 0.8  # Slightly reduced weight

    # 2. Best Fit Encouragement (Focuses on minimizing wasted space)
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += 2.0  # Increased weight for best fit

    # 3. Fragmentation Penalty (Adaptive based on item size)
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * 0.3 #Adaptive threshold
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= 1.5  #Increased penalty

    # 4. Encourage Re-use of Almost Empty Bins (More aggressive reuse)
    almost_empty_threshold = 0.9
    almost_empty = bins_remain_cap > (bin_size * almost_empty_threshold)
    if np.any(almost_empty):
        priorities[almost_empty] += 1.0 # Increased incentive

    # 5. Bin Utilization Preference (Encourage using bins with some content)
    partially_full_threshold_lower = 0.2
    partially_full_threshold_upper = 0.8
    partially_full = (bins_remain_cap < bin_size * partially_full_threshold_upper) & (bins_remain_cap > bin_size * partially_full_threshold_lower)

    if np.any(partially_full):
        priorities[partially_full] += 0.5

    # 6. Adaptive Adjustment for Large Items
    large_item_threshold = 0.6
    if item > large_item_threshold:
        # Heavily penalize fragmentation for large items
        fragmented_bins = remaining_space > 0 & remaining_space < bin_size*0.2
        priorities[fragmented_bins] -= 2.0
        # Favor almost empty bins even more for large items
        if np.any(almost_empty):
            priorities[almost_empty] += 1.5

    return priorities
```
