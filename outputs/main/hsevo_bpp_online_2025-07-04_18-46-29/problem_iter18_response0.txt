```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fill-ratio, fragmentation, and a novel bin-state awareness with dynamic weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # --- Parameters (Tunable) ---
    best_fit_weight = 1.5  # Slightly increased from v1
    fragmentation_threshold_multiplier = 0.2 # Slightly increased from v1
    fragmentation_penalty = 1.3 #Slightly increased from v1
    almost_empty_threshold = 0.95 #Slightly increased from v1
    almost_empty_bonus = 0.8 #Slightly increased from v1
    fill_ratio_weight = 1.0  # Weight for fill ratio importance
    bin_diversity_bonus = 0.2 # New: Reward using bins with different fill levels.
    large_item_threshold = 0.7 #Item Size above this, encourages tighter fits

    # --- 1. Fill Ratio Preference ---
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratios = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]
        priorities[potential_bins] += fill_ratios * fill_ratio_weight

    # --- 2. Best Fit Encouragement ---
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        priorities[best_fit_bins] += best_fit_weight
        
        #If Item is large try to pack as tightly as possible
        if item > large_item_threshold:
            tight_fit_bins = (capacity_diff[eligible_bins] == min_diff) & (bins_remain_cap[eligible_bins] - item < 0.1)
            priorities[eligible_bins][tight_fit_bins] += 0.5 #Additional bonus for very tight fits

    # --- 3. Fragmentation Penalty (Adaptive) ---
    remaining_space = bins_remain_cap - item
    fragmentation_threshold = item * fragmentation_threshold_multiplier
    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= fragmentation_penalty

    # --- 4. Encourage re-use of almost empty bins ---
    almost_empty = bins_remain_cap > (1 - almost_empty_threshold)
    if np.any(almost_empty):
        priorities[almost_empty] += almost_empty_bonus

    # --- 5. Bin Diversity Bonus (New: Encourages using bins with different fill levels) ---
    if num_bins > 1: #Only apply when there is a choice
        bin_std = np.std(bins_remain_cap)
        if bin_std > 0.1: #Diversity threshold, only apply if there is actual diversity
              priorities[potential_bins] += bin_diversity_bonus # Add same bonus to all potential bins to be fair

    return priorities
```
