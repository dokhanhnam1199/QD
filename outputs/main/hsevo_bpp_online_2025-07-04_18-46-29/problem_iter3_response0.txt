```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Encourage filling bins closer to full, but with higher reward for bins that are already somewhat full
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        # This emphasizes filling bins that are already partially full
        priorities[potential_bins] = (item / bins_remain_cap[potential_bins]) 
        priorities[potential_bins] += (bins_remain_cap[potential_bins] - item) / np.max(bins_remain_cap) #normalized remaining space
        

    # Prioritize bins with smallest remaining capacity that can still fit the item.
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_remaining = np.min(bins_remain_cap[eligible_bins])
        min_bins = bins_remain_cap == min_remaining
        priorities[min_bins] += 2 # Increased importance for smallest remaining


    # Use a scaled exponential to provide a stronger, but still smooth, boost
    priorities = priorities + 0.5 * np.exp(-np.abs((bins_remain_cap - item)) / np.mean(bins_remain_cap)) 
    

    # Penalize bins that become TOO full after adding the item.  This is stronger than before.
    near_full = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.2)
    if np.any(near_full):
        priorities[near_full] -= 1.5 * (item/bins_remain_cap[near_full]) # Strong penalty related to item size versus bin size
    
    # Add a slight bonus for bins that are nearly empty, encouraging their reuse
    nearly_empty = bins_remain_cap > 0.75 * np.max(bins_remain_cap)
    if np.any(nearly_empty):
        priorities[nearly_empty] += 0.25

    return priorities
```
