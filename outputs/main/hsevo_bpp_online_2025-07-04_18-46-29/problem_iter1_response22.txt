```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers the wasted space more explicitly, penalizing bins
    that would have a large amount of remaining space after the item is added.
    Also adds a boost for bins that have capacity close to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin is feasible only if its remaining capacity is >= item size.
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit the item, return very low priority for all bins.
        return np.full_like(bins_remain_cap, -np.inf)

    # Calculate remaining capacity after adding item, only for feasible bins.
    remaining_after = bins_remain_cap[feasible_bins] - item

    # Penalty for large remaining capacity (discourages excessive waste).
    waste_penalty = -remaining_after

    # Boost for bins whose capacity is close to the item size (encourages efficient packing).
    size_diff = np.abs(bins_remain_cap[feasible_bins] - item)
    proximity_boost = -size_diff # Smaller diff is better

    # Combine waste penalty and proximity boost for feasible bins.
    priorities[feasible_bins] = proximity_boost + waste_penalty

    # Set very low priority for infeasible bins.
    priorities[~feasible_bins] = -np.inf

    return priorities
```
