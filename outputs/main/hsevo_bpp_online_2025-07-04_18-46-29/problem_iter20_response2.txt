```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining fill ratio, best fit, and fragmentation."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Adaptive item size factor
    item_size_factor = min(1.0, item)

    # 1. Fill Ratio Preference (Adaptive)
    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins):
        fill_ratios = item / bins_remain_cap[potential_bins]
        priorities[potential_bins] += fill_ratios * (0.7 + 0.3 * item_size_factor)

    # 2. Best Fit Encouragement (Adaptive)
    capacity_diff = np.abs(bins_remain_cap - item)
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        min_diff = np.min(capacity_diff[eligible_bins])
        best_fit_bins = capacity_diff == min_diff
        # Adaptive best-fit weight based on remaining capacity
        average_remaining = np.mean(bins_remain_cap) if num_bins > 0 else 0.0
        best_fit_weight = 1.5 + 0.5 * item_size_factor * (1 - average_remaining)
        priorities[best_fit_bins] += best_fit_weight

    # 3. Fragmentation Penalty (Adaptive)
    remaining_space = bins_remain_cap - item
    # Adaptive threshold based on average remaining capacity
    average_remaining = np.mean(bins_remain_cap) if num_bins > 0 else 0.0
    fragmentation_threshold = item * (0.2 + 0.1 * item_size_factor) * (1 + average_remaining)

    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmented_bins] -= 1.0 + 0.2 * item_size_factor

    # 4. Encourage re-use of almost empty bins (Adaptive)
    almost_empty_threshold = 0.9
    almost_empty = bins_remain_cap > almost_empty_threshold
    if np.any(almost_empty):
        #Scale bonus by how many are almost empty, and item size
        almost_empty_count = np.sum(bins_remain_cap > almost_empty_threshold)
        bonus_scale = 0.5 / (1 + almost_empty_count)
        priorities[almost_empty] += bonus_scale + 0.1 * item_size_factor

    # 5. Discourage bins from being too empty after placing the item
    too_empty_threshold = 0.75
    too_empty = remaining_space > too_empty_threshold
    if np.any(too_empty):
        priorities[too_empty] -= 0.4 * item_size_factor

    # 6. Global Bin Balancing: Add small penalty to encourage distribution
    bin_utilization = (1.0 - bins_remain_cap) # Assuming bin size of 1
    utilization_std = np.std(bin_utilization) if num_bins > 1 else 0 # If there's only one bin, std is 0
    priorities -= 0.01 * utilization_std # Penalize bins with high stdev utilization

    # 7. If no suitable bin, slightly discourage all bins
    if not np.any(potential_bins):
        priorities[:] -= 0.001

    # 8. Large Item Tighter Fit Bonus
    large_item_threshold = 0.7
    if item > large_item_threshold and np.any(eligible_bins):
      capacity_diff_eligible = capacity_diff[eligible_bins]
      tight_fit_bins = (capacity_diff_eligible == np.min(capacity_diff_eligible)) & (bins_remain_cap[eligible_bins] - item < 0.1)
      priorities[eligible_bins[tight_fit_bins]] += 0.5

    return priorities
```
