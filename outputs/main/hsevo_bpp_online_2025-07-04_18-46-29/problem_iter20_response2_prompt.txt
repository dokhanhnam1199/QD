{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines adaptive fill ratio, best fit, fragmentation, and empty bin reuse with global state.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    num_bins = len(bins_remain_cap)\n\n    # Adaptive item size factor\n    item_size_factor = min(1.0, item)\n\n    # 1. Fill Ratio Preference\n    potential_bins = bins_remain_cap >= item\n    if np.any(potential_bins):\n        fill_ratios = item / bins_remain_cap[potential_bins]\n        priorities[potential_bins] += fill_ratios * (0.7 + 0.3 * item_size_factor)\n\n    # 2. Best Fit Encouragement (Adaptive)\n    capacity_diff = np.abs(bins_remain_cap - item)\n    eligible_bins = bins_remain_cap >= item\n    if np.any(eligible_bins):\n        min_diff = np.min(capacity_diff[eligible_bins])\n        best_fit_bins = capacity_diff == min_diff\n\n        # Adaptive best-fit weight based on average fill\n        average_fill = np.mean((1.0 - bins_remain_cap)) if num_bins > 0 else 0.0  # Assuming bin size = 1\n        best_fit_weight = 1.5 + 0.5 * item_size_factor + (0.5 * (1 - average_fill))\n        priorities[best_fit_bins] += best_fit_weight\n\n    # 3. Fragmentation Penalty (Adaptive)\n    remaining_space = bins_remain_cap - item\n    # Adaptive threshold based on average remaining capacity\n    average_remaining = np.mean(bins_remain_cap) if num_bins > 0 else 0.0\n    fragmentation_threshold = item * (0.2 + 0.1 * item_size_factor) * (1+ average_remaining)\n\n    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)\n    priorities[fragmented_bins] -= 1.0 + 0.2 * item_size_factor\n\n    # 4. Encourage re-use of almost empty bins (Adaptive)\n    almost_empty_threshold = 0.9\n    almost_empty = bins_remain_cap > almost_empty_threshold\n    if np.any(almost_empty):\n       #Scale bonus by how many are almost empty\n        almost_empty_count = np.sum(bins_remain_cap > almost_empty_threshold)\n        bonus_scale = 0.5 / (1 + almost_empty_count)\n        priorities[almost_empty] += bonus_scale + 0.1 * item_size_factor\n\n    # 5. Discourage bins from being too empty after placing the item\n    too_empty_threshold = 0.75\n    too_empty = remaining_space > too_empty_threshold\n    if np.any(too_empty):\n        priorities[too_empty] -= 0.4 * item_size_factor\n\n    # 6. Global Bin Balancing: Add small penalty to encourage distribution\n    bin_utilization = (1.0 - bins_remain_cap) # Assuming bin size of 1\n    utilization_std = np.std(bin_utilization) if num_bins > 1 else 0 # If there's only one bin, std is 0\n    priorities -= 0.01 * utilization_std # Penalize bins with high stdev utilization\n\n    # 7. If no suitable bin, slightly discourage all bins\n    if not np.any(potential_bins):\n        priorities[:] -= 0.001\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit, fill-ratio, fragmentation, and a novel bin-state awareness with dynamic weights.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    num_bins = len(bins_remain_cap)\n\n    # --- Parameters (Tunable) ---\n    best_fit_weight = 1.5  # Slightly increased from v1\n    fragmentation_threshold_multiplier = 0.2 # Slightly increased from v1\n    fragmentation_penalty = 1.3 #Slightly increased from v1\n    almost_empty_threshold = 0.95 #Slightly increased from v1\n    almost_empty_bonus = 0.8 #Slightly increased from v1\n    fill_ratio_weight = 1.0  # Weight for fill ratio importance\n    bin_diversity_bonus = 0.2 # New: Reward using bins with different fill levels.\n    large_item_threshold = 0.7 #Item Size above this, encourages tighter fits\n\n    # --- 1. Fill Ratio Preference ---\n    potential_bins = bins_remain_cap >= item\n    if np.any(potential_bins):\n        fill_ratios = (bins_remain_cap[potential_bins] - item) / bins_remain_cap[potential_bins]\n        priorities[potential_bins] += fill_ratios * fill_ratio_weight\n\n    # --- 2. Best Fit Encouragement ---\n    capacity_diff = np.abs(bins_remain_cap - item)\n    eligible_bins = bins_remain_cap >= item\n    if np.any(eligible_bins):\n        min_diff = np.min(capacity_diff[eligible_bins])\n        best_fit_bins = capacity_diff == min_diff\n        priorities[best_fit_bins] += best_fit_weight\n        \n        #If Item is large try to pack as tightly as possible\n        if item > large_item_threshold:\n            tight_fit_bins = (capacity_diff[eligible_bins] == min_diff) & (bins_remain_cap[eligible_bins] - item < 0.1)\n            priorities[eligible_bins][tight_fit_bins] += 0.5 #Additional bonus for very tight fits\n\n    # --- 3. Fragmentation Penalty (Adaptive) ---\n    remaining_space = bins_remain_cap - item\n    fragmentation_threshold = item * fragmentation_threshold_multiplier\n    fragmented_bins = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)\n    priorities[fragmented_bins] -= fragmentation_penalty\n\n    # --- 4. Encourage re-use of almost empty bins ---\n    almost_empty = bins_remain_cap > (1 - almost_empty_threshold)\n    if np.any(almost_empty):\n        priorities[almost_empty] += almost_empty_bonus\n\n    # --- 5. Bin Diversity Bonus (New: Encourages using bins with different fill levels) ---\n    if num_bins > 1: #Only apply when there is a choice\n        bin_std = np.std(bins_remain_cap)\n        if bin_std > 0.1: #Diversity threshold, only apply if there is actual diversity\n              priorities[potential_bins] += bin_diversity_bonus # Add same bonus to all potential bins to be fair\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the 1st uses much more sophisticated adaptive weighting and introduces exploration with randomness scaled by item size. It dynamically adjusts weights based on item size, bin availability, and average fill level. The 20th heuristic uses fixed weights and lacks fine-grained control. (2nd best) vs (second worst) shows a similar trend, with more complex adaptive parameters in the better heuristic. Comparing (1st) vs (2nd), we see the 1st introduces a large amount of parameter to finetune the algorithm and uses many thresholds to have a finer control of the output while the 2nd uses only a few parameters to define. (3rd) vs (4th) shows that the third heuristic gives bonus to bin with high utilization. Comparing (second worst) vs (worst), we see little to no difference. Overall: better heuristics utilize adaptive weighting, state-aware adjustments, and exploration strategies. They dynamically adjust parameters based on item size, bin availability, average fill level, and other relevant factors, offering finer control and better performance. The best heuristic uses a large amount of parameters.\n- \nHere's a redefined approach to \"Current Self-Reflection\" designed to build better heuristics, incorporating your feedback and aiming for clear, actionable advice:\n\n*   **Keywords:** Adaptive, Multi-Objective, State-Aware, Exploration-Exploitation.\n\n*   **Advice:** Design heuristics that dynamically adjust their behavior (weights, exploration) based on the *global* state of the bin packing problem, considering factors like item sizes, bin availability, and fill levels. Prioritize multi-objective optimization that explicitly balances competing goals, such as minimizing waste and maximizing bin utilization.\n\n*   **Avoid:** Over-reliance on purely local information or premature focus on fine-tuning a fixed set of parameters. Avoid getting stuck in local optima.\n\n*   **Explanation:** Effective heuristics are not rigid; they adapt. They use a combination of factors to choose the best action at any given time. Penalties and bonuses should react to the global state to guide the heuristic toward the best overall packing. Think of the global state as a summary of the entire packing problem (e.g., average fill level, distribution of item sizes, number of almost-full bins).\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}