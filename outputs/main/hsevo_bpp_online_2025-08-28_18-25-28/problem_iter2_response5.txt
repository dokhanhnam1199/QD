```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit (waste minimization) with probabilistic softmax selection."""
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        waste = remaining_capacities - item
        priorities[valid_bins] = np.exp(-waste / item)
        priorities[valid_bins] /= np.sum(np.exp(-waste / item))
    return priorities
```
