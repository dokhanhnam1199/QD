```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    fit_quality = (bins_remain_cap - item) / item
    
    temperature = 1.0
    
    softmax_inputs = np.stack([fullness, fit_quality], axis=1)
    
    weighted_sum = temperature * softmax_inputs[:, 0] + (1 - temperature) * softmax_inputs[:, 1]
    
    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = np.exp(weighted_sum[possible_bins]) / np.sum(np.exp(weighted_sum[possible_bins]))
    
    best_bin_index = np.argmax(priorities)
    
    priorities[best_bin_index] += 0.5
    
    return priorities
```
