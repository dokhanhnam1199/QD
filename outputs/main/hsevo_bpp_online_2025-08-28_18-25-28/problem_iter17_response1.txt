```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with adaptive temperature softmax, using bin utilization."""
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    remaining_capacities = bins_remain_cap[possible_bins]
    fit_scores = item / remaining_capacities
    avg_utilization = np.mean(1 - bins_remain_cap / bins_remain_cap.max())
    temperature = 1.0 / (1 + avg_utilization)
    probabilities = np.exp(-fit_scores / temperature)
    probabilities /= np.sum(probabilities)

    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = probabilities
    best_bin_index = np.argmax(priorities[possible_bins])
    best_bin_index = np.where(possible_bins)[0][best_bin_index]
    priorities[best_bin_index] += 0.2
    return priorities
```
