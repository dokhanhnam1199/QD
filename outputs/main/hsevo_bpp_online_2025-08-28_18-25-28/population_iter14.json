[
  {
    "stdout_filepath": "problem_iter14_response0.txt_stdout.txt",
    "code_path": "problem_iter14_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive softmax exploration based on bin utilization.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_caps = bins_remain_cap[possible_bins]\n    fit_scores = 1.0 / (remaining_caps - item + 1e-6)\n    bin_utilization = np.sum(bins_remain_cap) / (n_bins * np.max(bins_remain_cap))\n    temperature = 1.0 - bin_utilization\n    temperature = max(0.1, min(1.0, temperature))\n    exp_scores = np.exp(fit_scores / temperature)\n    probabilities = exp_scores / np.sum(exp_scores)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 5.534503390506582,
    "SLOC": 15.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 131.18329672565338,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response1.txt_stdout.txt",
    "code_path": "problem_iter14_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive temperature softmax exploration.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    fit_scores = - (bins_remain_cap[possible_bins] - item)\n    temperature = np.mean(bins_remain_cap[possible_bins]) / (item + 1e-6) if np.mean(bins_remain_cap[possible_bins]) > 0 else 1.0\n    probabilities = np.exp(fit_scores / temperature)\n    probabilities /= np.sum(probabilities)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    exploration_bonus = 1.0 / (np.sum(bins_remain_cap) + 1e-6)\n    best_bin_index = np.argmax(priorities[possible_bins])\n    best_bin_index_global = np.where(possible_bins)[0][best_bin_index]\n    priorities[best_bin_index_global] *= 2.0\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 161.66617507355795,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response2.txt_stdout.txt",
    "code_path": "problem_iter14_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive temperature-scaled softmax for exploration.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_quality = waste / item\n    temperature = 0.1 * np.mean(bins_remain_cap[possible_bins]) + 0.1\n    normalized_fit = 1.0 / (fit_quality + 1e-6)\n    exp_values = np.exp(normalized_fit / temperature)\n    softmax_values = exp_values / np.sum(exp_values)\n\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = softmax_values\n    best_bin_index = np.argmax(priorities[possible_bins])\n    best_bin_index = np.where(possible_bins)[0][best_bin_index]\n    priorities[best_bin_index] += 0.2\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 5.534503390506582,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 146.71880002307702,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response3.txt_stdout.txt",
    "code_path": "problem_iter14_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive softmax exploration, balancing exploitation and exploration.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    fit_scores = - (bins_remain_cap[possible_bins] - item)\n    temperature = np.mean(bins_remain_cap[possible_bins]) / item if np.mean(bins_remain_cap[possible_bins]) > 0 else 1.0\n    probabilities = np.exp(fit_scores / temperature)\n    probabilities /= np.sum(probabilities)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 11.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 91.73835003173087,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response4.txt_stdout.txt",
    "code_path": "problem_iter14_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive temperature softmax for exploration.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    waste = bins_remain_cap[possible_bins] - item\n    fit_quality = waste / item\n    temperature = 0.1 * np.mean(bins_remain_cap[possible_bins]) + 0.1\n    normalized_fit = 1.0 / (fit_quality + 1e-6)\n    exp_values = np.exp(normalized_fit / temperature)\n    softmax_values = exp_values / np.sum(exp_values)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = softmax_values\n    best_bin_index = np.argmax(priorities[possible_bins])\n    best_bin_index = np.where(possible_bins)[0][best_bin_index]\n    priorities[best_bin_index] += 0.2\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 5.534503390506582,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 146.71880002307702,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response5.txt_stdout.txt",
    "code_path": "problem_iter14_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive softmax exploration based on bin utilization.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    fit_scores = - (bins_remain_cap[possible_bins] - item)\n    temperature = np.mean(bins_remain_cap[possible_bins]) / item if np.mean(bins_remain_cap[possible_bins]) > 0 else 1.0\n    probabilities = np.exp(fit_scores / temperature)\n    probabilities /= np.sum(probabilities)\n\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    best_bin_index = np.argmax(priorities[possible_bins])\n    priorities[possible_bins] = probabilities\n    priorities[possible_bins[best_bin_index]] += 0.1\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 18, in priority_v2\n    priorities[possible_bins] = probabilities\nnumpy._core._exceptions._UFuncOutputCastingError: Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'\n14\n3\n109.80793556946902\n"
  },
  {
    "stdout_filepath": "problem_iter14_response6.txt_stdout.txt",
    "code_path": "problem_iter14_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive softmax exploration, balancing exploitation and exploration.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_capacities = bins_remain_cap[possible_bins]\n    waste = remaining_capacities - item\n    best_bin_index = np.argmin(waste)\n    avg_utilization = np.mean(1 - bins_remain_cap / bins_remain_cap.max())\n    temperature = 1.0 / (1 + avg_utilization)\n    probabilities = np.exp(-waste / temperature)\n    probabilities /= np.sum(probabilities)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    priorities[possible_bins[best_bin_index]] += 0.5\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 19, in priority_v2\n    return priorities\nnumpy._core._exceptions._UFuncOutputCastingError: Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'\n16\n2\n138.24238017775622\n"
  },
  {
    "stdout_filepath": "problem_iter14_response7.txt_stdout.txt",
    "code_path": "problem_iter14_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with temperature-scaled softmax exploration, adapting temperature based on bin utilization.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros(n_bins)\n    remaining_capacities = bins_remain_cap[possible_bins]\n    fit_scores = item / remaining_capacities\n    avg_utilization = np.mean(1 - bins_remain_cap / bins_remain_cap.max())\n    temperature = 1.0 / (1 + avg_utilization)\n    probabilities = np.exp(-fit_scores / temperature)\n    probabilities /= np.sum(probabilities)\n    priorities = np.zeros(n_bins)\n    priorities[possible_bins] = probabilities\n    best_bin_index = np.argmin(remaining_capacities)\n    priorities[possible_bins[best_bin_index]] += 0.3\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 138.24238017775622,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response8.txt_stdout.txt",
    "code_path": "problem_iter14_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive temperature-scaled softmax exploration.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_capacities = bins_remain_cap[possible_bins]\n    fit_scores = item / remaining_capacities\n    temperature = 0.1 * np.mean(remaining_capacities) + 0.1\n    normalized_fit = 1.0 / (fit_scores + 1e-6)\n    exp_values = np.exp(normalized_fit / temperature)\n    softmax_values = exp_values / np.sum(exp_values)\n\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = softmax_values\n    \n    best_bin_index = np.argmax(priorities[possible_bins])\n    best_bin_index = np.where(possible_bins)[0][best_bin_index]\n    priorities[best_bin_index] += 0.1\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 127.37720526058406,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response9.txt_stdout.txt",
    "code_path": "problem_iter14_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive softmax exploration, balancing exploitation and exploration.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    fit_scores = - (bins_remain_cap[possible_bins] - item)\n    temperature = np.mean(bins_remain_cap[possible_bins]) / item if np.mean(bins_remain_cap[possible_bins]) > 0 else 1.0\n    bin_utilization = np.sum(bins_remain_cap) / (len(bins_remain_cap) * np.max(bins_remain_cap))\n    temperature = max(0.1, min(1.0, temperature * (1.0 - bin_utilization)))\n    probabilities = np.exp(fit_scores / temperature)\n    probabilities /= np.sum(probabilities)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.2979656960510715,
    "SLOC": 13.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 159.81495041679716,
    "exec_success": true
  }
]