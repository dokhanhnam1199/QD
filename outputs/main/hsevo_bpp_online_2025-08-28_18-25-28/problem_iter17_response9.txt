```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit with probabilistic exploration using softmax,
    dynamically adjusting temperature based on bin utilization.
    """
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    bin_utilizations = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    temperature = 1.0 / (1.0 + np.mean(bin_utilizations))
    best_fit_scores = - (bins_remain_cap[possible_bins] - item)
    scores = np.zeros_like(bins_remain_cap)
    scores[possible_bins] = np.exp(best_fit_scores / temperature)

    priorities = scores / np.sum(scores) if np.sum(scores) > 0 else np.zeros_like(bins_remain_cap)

    return priorities
```
