```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit and probabilistic choice (softmax).
    Normalizes waste and applies softmax for bin selection.
    """
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap[possible_bins] - item
    priorities = np.zeros_like(bins_remain_cap)
    
    if np.any(possible_bins):
        normalized_waste = 1.0 / (waste + 1e-6)
        
        temperature = 1.0 
        exp_values = np.exp(normalized_waste / temperature)
        softmax_values = exp_values / np.sum(exp_values)
        priorities[possible_bins] = softmax_values
    
    return priorities
```
