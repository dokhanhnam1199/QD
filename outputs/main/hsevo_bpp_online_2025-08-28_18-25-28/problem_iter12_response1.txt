```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return priorities

    remaining_capacities = bins_remain_cap[possible_bins]
    waste = remaining_capacities - item
    
    best_bin_index = np.argmin(waste)
    
    priorities[possible_bins] = 1.0
    priorities[possible_bins[best_bin_index]] = 2.0

    utilization = np.sum(bins_remain_cap) / (n_bins * np.max(bins_remain_cap))
    temperature = 1.0 - utilization
    
    if temperature > 0:
        exploration_bonus = np.exp(-waste / temperature)
        priorities[possible_bins] += exploration_bonus
        best_bin_index_explore = np.argmax(priorities[possible_bins])
        priorities[possible_bins[best_bin_index_explore]] = max(priorities[possible_bins[best_bin_index_explore]], 2.5)
    
    return priorities
```
