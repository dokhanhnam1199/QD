import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, temperature_scale: float = 1.7691303159587746, softmax_scale: float = 1.4186552195993185) -> np.ndarray:
    """Combines best-fit with temperature-scaled softmax exploration, adapting temperature based on bin utilization."""
    n_bins = len(bins_remain_cap)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros(n_bins)
    remaining_capacities = bins_remain_cap[possible_bins]
    fit_scores = - (bins_remain_cap[possible_bins] - item)
    bin_utilizations = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    temperature = temperature_scale / (1.0 + np.mean(bin_utilizations))
    probabilities = np.exp(fit_scores / temperature) / np.sum(np.exp(fit_scores / temperature))
    priorities = np.zeros(n_bins)
    priorities[possible_bins] = probabilities
    best_bin_index = np.argmax(priorities)
    priorities[best_bin_index] *= softmax_scale
    return priorities
