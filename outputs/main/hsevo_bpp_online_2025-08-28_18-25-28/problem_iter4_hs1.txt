import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, exploration_factor: float = 0.2264228160449431) -> np.ndarray:
    """Combines softmax prioritization with a small exploration bonus."""
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)
    remaining_capacities = bins_remain_cap[possible_bins]
    scores = 1.0 / (1.0 + np.exp(-(remaining_capacities - item) / (item * exploration_factor)))
    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = scores
    probabilities = np.exp(priorities) / np.sum(np.exp(priorities))
    return probabilities
