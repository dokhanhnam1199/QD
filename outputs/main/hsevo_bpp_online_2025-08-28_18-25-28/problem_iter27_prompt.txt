{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    \n    best_bin_index = np.argmin(bins_remain_cap[possible_bins] - item)\n    priorities[possible_bins] = 1.0\n    priorities[best_bin_index] = 2.0\n    \n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's distill this into actionable heuristic design guidance. Given the substantial incentive, here's a focused response:\n\n* **Keywords:** Adaptive Exploration, Robustness, Bin Utilization, Softmax Temperature.\n* **Advice:** Focus on *dynamic* temperature scaling in softmax selection, directly linked to bin utilization. Prioritize stable, division-free fit score calculations. Rigorously test for performance consistency.\n* **Avoid:** Static bonuses, arbitrary constants, `argmax` selection, over-normalization, and complexity beyond what's demonstrably beneficial.\n* **Explanation:** The core theme is balancing exploitation (best fit) with *adaptive* exploration. Bin utilization provides a natural signal for adjusting exploration intensity; crowded bins should discourage further items. Robustness demands stability and avoids pitfalls of naive optimization.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}