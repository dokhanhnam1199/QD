```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit (v2) with a temperature-scaled softmax (v1) for improved exploration."""
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, -1.0)

    waste = bins_remain_cap[valid_bins] - item
    priorities = 1.0 / (waste + 1e-6)
    temperature = 1.0
    exp_priorities = np.exp(priorities / temperature)
    probabilities = exp_priorities / np.sum(exp_priorities)
    result = np.zeros_like(bins_remain_cap)
    result[valid_bins] = probabilities
    return result
```
