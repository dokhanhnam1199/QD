import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, temperature_base: float = 1.2937725625776362, temperature_min: float = 0.0454428247070054, temperature_max: float = 0.717574393919463, best_bin_boost: float = 1.6811177575175673) -> np.ndarray:
    """Combines best-fit with adaptive temperature-scaled softmax exploration."""
    n_bins = len(bins_remain_cap)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros(n_bins)
    remaining_capacities = bins_remain_cap[possible_bins]
    fit_scores = - (bins_remain_cap[possible_bins] - item)
    bin_utilizations = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    temperature = 1.0 / (1.0 + np.mean(bin_utilizations))
    temperature = max(temperature_min, min(temperature_max, temperature))
    probabilities = np.exp(fit_scores / temperature) / np.sum(np.exp(fit_scores / temperature))
    priorities = np.zeros(n_bins)
    priorities[possible_bins] = probabilities
    best_bin_index = np.argmax(priorities)
    priorities[best_bin_index] *= best_bin_boost
    return priorities
