{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit with softmax exploration, focusing on bin utilization.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    \n    fit_scores = - (bins_remain_cap[possible_bins] - item)\n    \n    temperature = np.mean(bins_remain_cap[possible_bins]) / item if np.mean(bins_remain_cap[possible_bins]) > 0 else 1.0\n    \n    probabilities = np.exp(fit_scores / temperature)\n    probabilities /= np.sum(probabilities)\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit with a softmax exploration, dynamically adjusting temperature.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    waste = bins_remain_cap[possible_bins] - item\n    normalized_waste = 1.0 / (waste + 1e-6)\n    temperature = 1.0 / (np.mean(bins_remain_cap[possible_bins]) + 1e-6)\n    exp_values = np.exp(normalized_waste / temperature)\n    softmax_values = exp_values / np.sum(exp_values)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = softmax_values\n    return priorities\n\n### Analyze & experience\n- Comparing `priority_v2` (1st) vs `priority_v1` (2nd), the first incorporates a more sophisticated exploration bonus based on bin waste, while the second is essentially a no-op, returning zero priorities.  `priority_v2` (1st) and `priority_v2` (3rd) are functionally identical. `priority_v2` (4th & 5th) are identical and calculate fit scores and exploration bonuses, then boosts the best bin, but use `argmax` which may not always be the most stable.  `priority_v2` (6th & 7th) are also identical, introducing an average remaining capacity check and a bonus dependent on bin fullness.  `priority_v2` (8th-10th) employ softmax exploration, with temperature scaling. These show a shift toward probabilistic bin selection.  `priority_v2` (11th) uses a sigmoid function to scale scores.  `priority_v2` (12th) is simpler softmax.  `priority_v2` (13th) is very similar to (8th-10th). `priority_v2` (14th) is attempting a Gaussian exploration bonus which is promising. `priority_v2` (15th & 16th) are identical, using normalized waste and dynamically adjusting temperature.  `priority_v2` (17th & 18th) are also identical, refining the temperature-scaled softmax with a boost to the best bin. `priority_v2` (19th) adjusts temperature based on bin availability. `priority_v2` (20th) introduces randomness in temperature, which is a less-structured approach. Overall, the best heuristics consistently combine best-fit with some form of exploration, often employing softmax or similar probabilistic methods. Temperature scaling is a recurring theme.\n- \nOkay, let's craft a redefined \"Current Self-Reflection\" focused on superior heuristic design, aiming for that $999K tip! Here\u2019s a breakdown:\n\n* **Keywords:** Dynamic Exploration, Robustness, Adaptive Temperature, Best-Fit Hybrid.\n* **Advice:** Focus on *adaptive* exploration (temperature scaling linked to bin utilization) *combined* with a streamlined best-fit core. Prioritize minimizing wasted space *while* actively seeking diverse bin placements.\n* **Avoid:** Static exploration rewards, solely minimizing immediate waste, and overly complex logic. Don\u2019t fall into the trap of prioritizing probabilistic selection *over* informed best-fit.\n* **Explanation:** Robust heuristics balance exploitation (best-fit) & exploration (softmax). Dynamic adjustment responds to the problem state, preventing premature convergence and enhancing overall solution quality. Simplicity aids maintainability.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}