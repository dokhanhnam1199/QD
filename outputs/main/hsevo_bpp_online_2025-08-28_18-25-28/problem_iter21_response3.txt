```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)
    possible_bins = bins_remain_cap >= item

    if not np.any(possible_bins):
        return priorities

    remaining_capacities = bins_remain_cap[possible_bins]
    bin_indices = np.where(possible_bins)[0]

    fit_scores = 1.0 / (remaining_capacities - item + 1e-6)
    
    bin_utilizations = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    utilization_bonus = bin_utilizations[possible_bins]
    
    temperature = np.mean(bins_remain_cap) / np.max(bins_remain_cap)
    
    softmax_scores = np.exp(fit_scores / temperature)
    
    priorities[possible_bins] = softmax_scores * utilization_bonus
    
    best_bin_index = bin_indices[np.argmax(priorities[possible_bins])]
    priorities[best_bin_index] *= 2.0

    return priorities
```
