```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with a temperature-scaled softmax for exploration."""
    num_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)
    possible_bins = bins_remain_cap >= item

    if not np.any(possible_bins):
        return priorities

    waste = bins_remain_cap[possible_bins] - item
    fit_quality = waste / item
    temperature = 0.1 * np.mean(bins_remain_cap[possible_bins]) + 0.1
    normalized_fit = 1.0 / (fit_quality + 1e-6)
    exp_values = np.exp(normalized_fit / temperature)
    softmax_values = exp_values / np.sum(exp_values)
    priorities[possible_bins] = softmax_values
    best_bin_index = np.argmax(priorities[possible_bins])
    best_bin_index = np.where(possible_bins)[0][best_bin_index]
    priorities[best_bin_index] += 0.5
    return priorities
```
