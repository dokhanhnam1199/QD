```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n_bins = len(bins_remain_cap)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    remaining_capacities = bins_remain_cap[possible_bins]
    waste = remaining_capacities - item
    
    avg_utilization = 1 - (np.sum(bins_remain_cap) / (n_bins * np.max(bins_remain_cap)))
    temperature = 1.0 + 2.0 * avg_utilization
    
    priorities = np.zeros_like(bins_remain_cap)
    
    if len(possible_bins) == 1:
        priorities[possible_bins] = 1.0
        return priorities
        
    
    scaled_waste = waste / np.max(waste)
    
    
    probabilities = np.exp(-scaled_waste / temperature)
    probabilities /= np.sum(probabilities)
    
    best_bin_index_within_possible = np.argmin(waste)
    
    priorities[possible_bins] = probabilities
    priorities[possible_bins[best_bin_index_within_possible]] += 0.5
    
    return priorities
```
