```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    bin_utilizations = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    
    temperature = np.exp(-bin_utilizations)

    scores = np.zeros_like(bins_remain_cap)
    
    best_fit_scores = np.zeros_like(bins_remain_cap)
    best_fit_scores[possible_bins] = - (bins_remain_cap[possible_bins] - item)

    scores[possible_bins] = best_fit_scores[possible_bins] + np.random.normal(0, temperature[possible_bins], size=np.sum(possible_bins))

    priorities = np.zeros_like(bins_remain_cap)
    
    if np.any(possible_bins):
      max_score_index = np.argmax(scores[possible_bins])
      best_bin_index = np.where(possible_bins)[0][max_score_index]
      priorities[best_bin_index] = 1.0
      
      second_best_score = np.sort(scores[possible_bins])[-2] if len(scores[possible_bins]) > 1 else -np.inf
      second_best_indices = np.where(scores[possible_bins] == second_best_score)[0]
      
      if len(second_best_indices) > 0:
        second_best_bin_index = np.where(possible_bins)[0][second_best_indices[0]]
        priorities[second_best_bin_index] = 0.5
      
    return priorities
```
