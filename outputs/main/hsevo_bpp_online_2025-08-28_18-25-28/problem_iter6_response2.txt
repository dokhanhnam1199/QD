```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)
    possible_bins = bins_remain_cap >= item

    if not np.any(possible_bins):
        return priorities

    fullness = 1 - bins_remain_cap / np.max(bins_remain_cap)
    fit_quality = (bins_remain_cap - item) / item
    
    temperature = 0.5 + (np.sum(possible_bins) / n_bins) * 0.5
    
    combined_scores = (0.6 * fit_quality + 0.4 * fullness) * possible_bins
    
    softmax_scores = np.exp(combined_scores / temperature)
    softmax_scores = softmax_scores / np.sum(softmax_scores)

    priorities[possible_bins] = softmax_scores
    
    return priorities
```
