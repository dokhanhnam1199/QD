import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, temperature: float = 3.8947107242691814, max_bin_cap_factor: float = 0.22802703415392278) -> np.ndarray:
    """
    Calculates priorities for placing an item into bins based on remaining capacity and a temperature parameter.

    Args:
        item (float): The size of the item to be placed.
        bins_remain_cap (np.ndarray): The remaining capacity of each bin.
        temperature (float, optional): Temperature parameter for score calculation. Defaults to 1.0.
        max_bin_cap_factor (float, optional): Factor used to calculate maximum bin capacity. Defaults to 1.0.

    Returns:
        np.ndarray: The priority scores for each bin.
    """
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)
    bin_utilizations = 1.0 - (bins_remain_cap / (np.max(bins_remain_cap) * max_bin_cap_factor))
    temperature = 1.0 / (1.0 + np.mean(bin_utilizations))
    best_fit_scores = - (bins_remain_cap[possible_bins] - item)
    scores = np.zeros_like(bins_remain_cap)
    scores[possible_bins] = np.exp(best_fit_scores / temperature)
    priorities = scores / np.sum(scores) if np.sum(scores) > 0 else np.zeros_like(bins_remain_cap)
    return priorities
