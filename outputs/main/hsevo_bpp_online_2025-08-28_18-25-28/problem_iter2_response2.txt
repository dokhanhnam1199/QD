```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit (waste minimization) with a softmax for probabilistic bin selection."""
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        min_waste = np.min(waste)
        priorities[feasible_bins] = 1.0 / (min_waste + 1e-6)
        
        exp_priorities = np.exp(priorities)
        probabilities = exp_priorities / np.sum(exp_priorities)
        priorities = probabilities
    return priorities
```
