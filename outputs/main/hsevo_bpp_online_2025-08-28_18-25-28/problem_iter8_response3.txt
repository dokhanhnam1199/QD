```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with softmax prioritization for balanced bin packing."""
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)
    remaining_capacities = bins_remain_cap[possible_bins]
    fit_scores = item / remaining_capacities
    scores = 1.0 / (1.0 + np.exp(-fit_scores * 2.0))
    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = scores
    probabilities = priorities[possible_bins] / np.sum(priorities[possible_bins])
    priorities[possible_bins] = probabilities
    return priorities
```
