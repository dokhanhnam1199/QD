```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    fill_levels = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    fit_quality = (bins_remain_cap - item) / item
    fit_quality[~possible_bins] = -1

    temperature = 0.5
    priorities = np.zeros_like(bins_remain_cap)

    softmax_input = temperature * fill_levels + (1 - temperature) * fit_quality
    exp_values = np.exp(softmax_input - np.max(softmax_input))
    probabilities = exp_values / np.sum(exp_values)

    priorities[possible_bins] = probabilities[possible_bins]
    
    if np.sum(priorities) == 0:
        best_bin_index = np.argmin(bins_remain_cap[possible_bins] - item)
        priorities[possible_bins] = 0.0
        priorities[possible_bins[best_bin_index]] = 1.0
        
    return priorities
```
