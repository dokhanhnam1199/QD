import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, temperature: float = 1.6279339092948681, best_bin_boost: float = 0.7157052529809611) -> np.ndarray:
    """
    Calculates priorities for placing an item into bins based on remaining capacity.

    Args:
        item (float): The size of the item to be placed.
        bins_remain_cap (np.ndarray): An array representing the remaining capacity of each bin.
        temperature (float, optional): Temperature parameter for probability calculation. Defaults to 1.0.
        best_bin_boost (float, optional): Boost applied to the best bin's priority. Defaults to 0.5.

    Returns:
        np.ndarray: An array of priorities for each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return priorities
    remaining_capacities = bins_remain_cap[possible_bins]
    waste = remaining_capacities - item
    best_bin_index = np.argmin(waste)
    avg_utilization = np.mean(1 - bins_remain_cap / bins_remain_cap.max())
    temperature = 1.0 / (1 + avg_utilization)
    probabilities = np.exp(-waste / temperature)
    probabilities /= np.sum(probabilities)
    priorities[possible_bins] = probabilities
    priorities[possible_bins[best_bin_index]] += best_bin_boost
    return priorities
