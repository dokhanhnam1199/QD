```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines softmax-based prioritization (from heuristics 6, 8, 9) with a waste-based component
    to encourage both good fit and bin diversity.
    """
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return np.zeros_like(bins_remain_cap)

    remaining_capacities = bins_remain_cap[feasible_bins]
    waste = remaining_capacities - item
    
    scores = 1.0 / (waste + 1e-6)
    
    exp_scores = np.exp(scores)
    probabilities = exp_scores / np.sum(exp_scores)

    priorities = np.zeros_like(bins_remain_cap)
    priorities[feasible_bins] = probabilities

    return priorities
```
