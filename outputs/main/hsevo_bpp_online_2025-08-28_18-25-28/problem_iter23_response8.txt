```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with adaptive softmax exploration,
    considering bin utilization and temperature. Improved temperature scaling."""
    n_bins = len(bins_remain_cap)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)
    remaining_caps = bins_remain_cap[possible_bins]
    fit_scores = - (remaining_caps - item)
    bin_utilization = np.sum(bins_remain_cap) / (n_bins * np.max(bins_remain_cap))
    temperature = np.mean(remaining_caps) / item if np.mean(remaining_caps) > 0 else 1.0
    temperature = max(0.1, min(1.0, temperature * (1.0 - bin_utilization)))
    probabilities = np.exp(fit_scores / temperature)
    probabilities /= np.sum(probabilities)
    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = probabilities
    best_bin_index = np.argmax(probabilities)
    if possible_bins[best_bin_index]:
        priorities[best_bin_index] += 0.1
    return priorities
```
