```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a softmax of inverse waste, encouraging exploration."""
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, -1.0)

    waste = bins_remain_cap[valid_bins] - item
    priorities = 1.0 / (waste + 1e-6)
    
    temperature = 1.0
    probabilities = np.exp(priorities / temperature)
    probabilities /= np.sum(probabilities)
    
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = probabilities
    
    return priorities
```
