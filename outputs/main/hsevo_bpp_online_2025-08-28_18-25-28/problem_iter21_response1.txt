```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return priorities

    bin_utilizations = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    avg_utilization = np.mean(bin_utilizations[possible_bins])

    temperature = 1.0 / (1 + avg_utilization)
    
    fit_scores = (bins_remain_cap[possible_bins] - item)
    
    exp_scores = np.exp(-fit_scores / temperature)
    
    softmax_probs = exp_scores / np.sum(exp_scores)
    
    priorities[possible_bins] = softmax_probs
    
    
    
    best_bin_index = np.argmax(priorities)
    
    
    
    exploration_bonus = 0.1 if np.random.rand() < 0.2 else 0
    priorities[best_bin_index] += exploration_bonus

    return priorities
```
