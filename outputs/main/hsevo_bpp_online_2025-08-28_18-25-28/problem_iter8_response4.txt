```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with a softmax exploration based on remaining capacity."""
    num_bins = len(bins_remain_cap)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap[possible_bins] - item
    normalized_waste = 1.0 / (waste + 1e-6)
    temperature = 0.1 + 0.9 * (1.0 - np.sum(possible_bins) / num_bins)
    exp_values = np.exp(normalized_waste / temperature)
    softmax_values = exp_values / np.sum(exp_values)
    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = softmax_values
    return priorities
```
