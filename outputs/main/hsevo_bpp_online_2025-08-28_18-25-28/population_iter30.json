[
  {
    "stdout_filepath": "problem_iter29_response0.txt_stdout.txt",
    "code_path": "problem_iter29_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with temperature-scaled softmax, clipping temperature for stability.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros(n_bins)\n    remaining_capacities = bins_remain_cap[possible_bins]\n    fit_scores = - (bins_remain_cap[possible_bins] - item)\n    bin_utilizations = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))\n    temperature = 1.0 / (1.0 + np.mean(bin_utilizations))\n    temperature = np.clip(temperature, 0.1, 1.0)\n    probabilities = np.exp(fit_scores / temperature) / np.sum(np.exp(fit_scores / temperature))\n    priorities = np.zeros(n_bins)\n    priorities[possible_bins] = probabilities\n    best_bin_index = np.argmax(priorities)\n    priorities[best_bin_index] *= 1.2\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 153.80110650593844,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response1.txt_stdout.txt",
    "code_path": "problem_iter29_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive softmax exploration and robust temperature.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_caps = bins_remain_cap[possible_bins]\n    fit_scores = 1.0 / (remaining_caps - item + 1e-6)\n    bin_utilization = np.sum(bins_remain_cap) / (n_bins * np.max(bins_remain_cap))\n    temperature = np.clip(1.0 - bin_utilization, 0.1, 1.0)\n    exp_scores = np.exp(fit_scores / temperature)\n    probabilities = exp_scores / np.sum(exp_scores)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    best_bin_index = np.argmax(priorities)\n    priorities[best_bin_index] += 0.2\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 5.534503390506582,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 148.60339807279118,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response2.txt_stdout.txt",
    "code_path": "problem_iter29_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive softmax, using bin utilization for temperature and clipping.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    remaining_caps = bins_remain_cap[possible_bins]\n    fit_scores = - (remaining_caps - item)\n    bin_utilization = np.sum(bins_remain_cap) / (n_bins * np.max(bins_remain_cap))\n    temperature = np.mean(remaining_caps) / item if np.mean(remaining_caps) > 0 else 1.0\n    temperature = np.clip(temperature * (1.0 - bin_utilization), 0.1, 1.0)\n    probabilities = np.exp(fit_scores / temperature)\n    probabilities /= np.sum(probabilities)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    best_bin_index = np.argmax(probabilities)\n    if possible_bins[best_bin_index]:\n        priorities[best_bin_index] += 0.1\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.2979656960510715,
    "SLOC": 18.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 179.74529681972018,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response3.txt_stdout.txt",
    "code_path": "problem_iter29_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with utilization-based adaptive softmax temperature.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    remaining_caps = bins_remain_cap[possible_bins]\n    fit_scores = 1.0 / (remaining_caps - item + 1e-6)\n    bin_utilization = np.mean(1.0 - (bins_remain_cap / np.max(bins_remain_cap)))\n    temperature = np.clip(1.0 - bin_utilization, 0.1, 1.0)\n    probabilities = np.exp(fit_scores / temperature)\n    probabilities /= np.sum(probabilities)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 5.534503390506582,
    "SLOC": 14.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 125.33591475173351,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response4.txt_stdout.txt",
    "code_path": "problem_iter29_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive softmax temperature, prioritizing bin utilization and robustness.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    remaining_caps = bins_remain_cap[possible_bins]\n    fit_scores = - (remaining_caps - item)\n    bin_utilization = np.sum(bins_remain_cap) / (n_bins * np.max(bins_remain_cap))\n    temperature = np.mean(remaining_caps) / item if np.mean(remaining_caps) > 0 else 1.0\n    temperature = np.clip(temperature * (1.0 - bin_utilization), 0.1, 1.0)\n    probabilities = np.exp(fit_scores / temperature)\n    probabilities /= np.sum(probabilities)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    best_bin_index = np.argmax(probabilities)\n    if possible_bins[best_bin_index]:\n        priorities[best_bin_index] += 0.1\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.2979656960510715,
    "SLOC": 18.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 179.74529681972018,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response5.txt_stdout.txt",
    "code_path": "problem_iter29_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive softmax exploration and utilization-based temperature.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    remaining_caps = bins_remain_cap[possible_bins]\n    fit_scores = 1.0 / (remaining_caps - item + 1e-6)\n    bin_utilization = np.sum(bins_remain_cap) / (n_bins * np.max(bins_remain_cap))\n    temperature = 1.0 - bin_utilization\n    temperature = np.clip(temperature, 0.1, 1.0)\n    exp_scores = np.exp(fit_scores / temperature)\n    probabilities = exp_scores / np.sum(exp_scores)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 5.534503390506582,
    "SLOC": 15.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 131.18329672565338,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response6.txt_stdout.txt",
    "code_path": "problem_iter29_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with temperature-scaled softmax, prioritizing bin utilization and robustness.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros(n_bins)\n\n    remaining_capacities = bins_remain_cap[possible_bins]\n    fit_scores = - (bins_remain_cap[possible_bins] - item)\n    bin_utilizations = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))\n    temperature = 1.0 / (1.0 + np.mean(bin_utilizations))\n    temperature = np.clip(temperature, 0.1, 1.0)\n    probabilities = np.exp(fit_scores / temperature) / np.sum(np.exp(fit_scores / temperature))\n    priorities = np.zeros(n_bins)\n    priorities[possible_bins] = probabilities\n    best_bin_index = np.argmax(priorities)\n    priorities[best_bin_index] *= 1.2\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 153.80110650593844,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response7.txt_stdout.txt",
    "code_path": "problem_iter29_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with temperature-scaled softmax, clipping temperature for robustness.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros(n_bins)\n    remaining_capacities = bins_remain_cap[possible_bins]\n    fit_scores = - (bins_remain_cap[possible_bins] - item)\n    bin_utilizations = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))\n    temperature = 1.0 / (1.0 + np.mean(bin_utilizations))\n    temperature = np.clip(temperature, 0.1, 1.0)\n    probabilities = np.exp(fit_scores / temperature) / np.sum(np.exp(fit_scores / temperature))\n    priorities = np.zeros(n_bins)\n    priorities[possible_bins] = probabilities\n    best_bin_index = np.argmax(priorities)\n    priorities[best_bin_index] *= 1.2\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 153.80110650593844,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter29_response8.txt_stdout.txt",
    "code_path": "problem_iter29_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive softmax exploration, temperature scaled by bin utilization with robustness.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    remaining_caps = bins_remain_cap[possible_bins]\n    fit_scores = 1.0 / (remaining_caps - item + 1e-6)\n    bin_utilization = np.sum(bins_remain_cap) / (n_bins * np.max(bins_remain_cap))\n    temperature = 1.0 - bin_utilization\n    temperature = np.clip(temperature, 0.1, 1.0)\n    exp_scores = np.exp(fit_scores / temperature)\n    probabilities = exp_scores / np.sum(exp_scores)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    best_bin_index = np.argmax(priorities)\n    if possible_bins[best_bin_index]:\n        priorities[best_bin_index] *= 1.2\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 21, in priority_v2\nOverflowError: Python int too large to convert to C long\n18\n3\n148.60339807279118\n"
  },
  {
    "stdout_filepath": "problem_iter29_response9.txt_stdout.txt",
    "code_path": "problem_iter29_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with adaptive softmax exploration and utilization-based temperature.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    remaining_caps = bins_remain_cap[possible_bins]\n    fit_scores = 1.0 / (remaining_caps - item + 1e-6)\n    bin_utilization = np.sum(bins_remain_cap) / (n_bins * np.max(bins_remain_cap))\n    temperature = np.clip(1.0 - bin_utilization, 0.1, 1.0)\n    exp_scores = np.exp(fit_scores / temperature)\n    probabilities = exp_scores / np.sum(exp_scores)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    best_bin_index = np.argmax(priorities)\n    priorities[best_bin_index] += 0.2\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 5.534503390506582,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 148.60339807279118,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter30_response0.txt_stdout.txt",
    "code_path": "problem_iter30_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    \n    fit_scores = np.zeros_like(bins_remain_cap)\n    fit_scores[possible_bins] = 1.0 / (bins_remain_cap[possible_bins] - item + 1e-6)\n\n    bin_utilization = bins_remain_cap / np.sum(bins_remain_cap)\n    \n    temperature = 1.0 - np.mean(bin_utilization)\n    \n    probabilities = np.exp(fit_scores / temperature)\n    probabilities = probabilities / np.sum(probabilities)\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities[possible_bins]\n    \n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 5.534503390506582,
    "SLOC": 14.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 110.44611534953322,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter30_response1.txt_stdout.txt",
    "code_path": "problem_iter30_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    bin_utilization = bins_remain_cap[possible_bins] / bins_remain_cap[possible_bins].max()\n    fit_scores = (bins_remain_cap[possible_bins] - item)\n    \n    temperature = 1.0 - np.mean(bin_utilization)\n    \n    temperature = max(0.1, temperature)\n    \n    exp_scores = np.exp(fit_scores / temperature)\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = exp_scores / np.sum(exp_scores)\n    \n    \n    best_bin_index = np.argmax(priorities[possible_bins])\n    priorities[possible_bins] = 0.0\n    priorities[possible_bins[best_bin_index]] = 1.0\n    \n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 15.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 80.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter30_response2.txt_stdout.txt",
    "code_path": "problem_iter30_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    \n    bin_utilizations = bins_remain_cap[possible_bins] / (np.max(bins_remain_cap) + 1e-9)\n    \n    fit_scores = (bins_remain_cap[possible_bins] - item)\n    \n    temperature = 1.0 - np.mean(bin_utilizations)\n    temperature = max(0.1, temperature)\n    \n    exp_scores = np.exp(fit_scores / temperature)\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = exp_scores / np.sum(exp_scores)\n    \n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 97.70233280920246,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter30_response3.txt_stdout.txt",
    "code_path": "problem_iter30_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    bin_utilizations = bins_remain_cap[possible_bins] / (np.max(bins_remain_cap) + 1e-9)\n    fit_scores = 1.0 / (bins_remain_cap[possible_bins] - item + 1e-9)\n    \n    temperature = 1.0 / (np.mean(bin_utilizations) + 1e-9)\n\n    probabilities = np.exp(temperature * fit_scores) / np.sum(np.exp(temperature * fit_scores))\n\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    \n    best_bin_index = np.argmax(priorities[possible_bins])\n    priorities[possible_bins] = probabilities\n    priorities[possible_bins[best_bin_index]] += 0.1 \n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 20, in priority_v2\n    best_bin_index = np.argmax(priorities[possible_bins])\nnumpy._core._exceptions._UFuncOutputCastingError: Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'\n14\n2\n176.46653521143952\n"
  },
  {
    "stdout_filepath": "problem_iter30_response4.txt_stdout.txt",
    "code_path": "problem_iter30_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    bin_utilizations = bins_remain_cap[possible_bins] / (np.max(bins_remain_cap) or 1e-6)\n    temperature = 1.0 - np.mean(bin_utilizations)\n    temperature = max(0.1, min(temperature, 2.0))\n\n    fit_scores = (bins_remain_cap[possible_bins] - item)\n    \n    normalized_scores = np.exp(-fit_scores / temperature)\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = normalized_scores / np.sum(normalized_scores)\n\n    best_bin_index = np.argmax(priorities[possible_bins])\n    priorities[possible_bins] = 0.0\n    priorities[possible_bins[best_bin_index]] = 1.0\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.487435181491823,
    "SLOC": 16.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 109.80793556946902,
    "exec_success": true
  }
]