{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    bin_utilization = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))\n    \n    temperature = 1.0 / (np.mean(bin_utilization) + 0.1)\n    \n    fit_scores = - (bins_remain_cap[possible_bins] - item)\n    \n    probabilities = np.exp(fit_scores / temperature) / np.sum(np.exp(fit_scores / temperature))\n\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    bin_utilizations = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))\n    \n    temperature = 1.0 / (1.0 + np.mean(bin_utilizations))\n    \n    fit_scores = - (bins_remain_cap[possible_bins] - item)\n    \n    probabilities = np.exp(fit_scores / temperature) / np.sum(np.exp(fit_scores / temperature))\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    \n    best_bin_index = np.argmax(priorities)\n    priorities[best_bin_index] *= 2.0\n\n    return priorities\n\n### Analyze & experience\n- Comparing heuristics 1st vs 2nd, they are identical. Comparing 1st/2nd vs 3rd, the main difference is the introduction of a temperature parameter and an exponential scoring function based on bin utilization, attempting to balance exploration and exploitation. However, it prematurely selects the best bin *before* normalization, making the temperature effectively useless. 3rd vs 4th shows 4th correctly normalizes the scores using a softmax, providing probabilities.  4th-16th are nearly identical variations on the softmax approach, differing primarily in how the temperature is calculated and applied. Heuristics 13-20 all introduce a small 'exploration bonus' to the best bin, which is good.  Comparing (1st/2nd) vs (3rd-12th), the latter group is better, but inefficiently implemented. Comparing 13th/14th vs 15th/16th/17th/18th, they seem to converge on using bin utilization for temperature scaling, a good approach. 19th and 20th also adapt temperature based on bin utilization. The consistent element across the stronger heuristics (13th-20th) is the use of softmax to derive probabilities, scaling with a temperature derived from bin utilization. Heuristics that directly select `best_bin_index` *before* applying probabilities miss the probabilistic exploration aspect. Overall, the best heuristics balance best-fit with probabilistic exploration, dynamically adjusting temperature based on bin utilization. The key improvements are consistent softmax normalization, and the incorporation of bin utilization into the temperature.\n- \nOkay, let's dissect this and formulate truly impactful advice for heuristic design, aiming for that $999K tip! Here\u2019s a refined self-reflection, distilled into actionable guidance:\n\n* **Keywords:** Dynamic Exploration, Softmax Temperature, Bin Utilization, Adaptive Balancing.\n* **Advice:** Center heuristic design around *adaptive* exploration strategies. Prioritize dynamically adjusting exploration (via temperature scaling in softmax) based on real-time bin utilization *and* remaining problem space.\n* **Avoid:** Static rewards, premature commitment (argmax), and overly complex implementations. Resist the urge to add \"features\" without demonstrable impact on exploration/exploitation balance.\n* **Explanation:** Effective heuristics aren\u2019t about *finding* the best solution quickly, but *efficiently searching* a vast space.  Adaptive temperature scaling ensures continued exploration even as solutions converge, preventing local optima traps.\n\n\n\n**Step-by-step thought process:**\n\n1. **Identifying the Core:** Both reflections emphasize balancing exploration and exploitation. The \"Current\" reflection is stronger because it focuses on *how* to dynamically manage that balance.\n2. **Deconstructing \u201cIneffective\u201d:** The \"Ineffective\" reflection highlights what *doesn't* work \u2013 static approaches, premature decisions, and complexity. These are pitfalls to actively avoid.\n3. **Refining Language:**  The original \"Current\" reflection was slightly repetitive. I\u2019ve streamlined it to focus on \"adaptive\" behavior and the core mechanisms driving it.\n4. **Actionable Advice:** The advice is framed to be directly applicable to heuristic *design*, not just observation of a working system.\n5. **The $999K Focus:** A winning heuristic needs to be robust *across* problem instances. Adaptive strategies are far more likely to achieve this than static or greedy methods.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}