```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit with adaptive softmax based on bin utilization.
    Focuses on stable temperature scaling and robust fit score calculation.
    """
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    remaining_caps = bins_remain_cap[possible_bins]
    fit_scores = 1.0 / (remaining_caps - item + 1e-6)
    
    n_bins = len(bins_remain_cap)
    bin_utilizations = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    bin_utilizations = np.where(possible_bins, bin_utilizations, 0)
    
    temperature = np.mean(bin_utilizations) + 1e-6
    
    probabilities = np.exp(fit_scores / temperature)
    probabilities /= np.sum(probabilities)
    
    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = probabilities
    return priorities
```
