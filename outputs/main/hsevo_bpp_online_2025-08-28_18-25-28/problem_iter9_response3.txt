```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return priorities

    bin_utilizations = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    
    best_fit_scores = np.where(possible_bins, bins_remain_cap - item, np.inf)
    best_bin_index = np.argmin(best_fit_scores)
    
    exploration_factor = 0.1
    
    priorities[possible_bins] = 1.0 / (best_fit_scores[possible_bins] + 1e-6)
    priorities[best_bin_index] += exploration_factor
    
    return priorities
```
