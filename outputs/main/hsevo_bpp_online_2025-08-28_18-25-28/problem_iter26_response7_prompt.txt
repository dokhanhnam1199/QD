{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit with adaptive softmax exploration,\n    considering bin utilization and temperature. Improved temperature scaling.\"\"\"\n    n_bins = len(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    remaining_caps = bins_remain_cap[possible_bins]\n    fit_scores = - (remaining_caps - item)\n    bin_utilization = np.sum(bins_remain_cap) / (n_bins * np.max(bins_remain_cap))\n    temperature = np.mean(remaining_caps) / item if np.mean(remaining_caps) > 0 else 1.0\n    temperature = max(0.1, min(1.0, temperature * (1.0 - bin_utilization)))\n    probabilities = np.exp(fit_scores / temperature)\n    probabilities /= np.sum(probabilities)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n    best_bin_index = np.argmax(probabilities)\n    if possible_bins[best_bin_index]:\n        priorities[best_bin_index] += 0.1\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    bin_utilizations = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))\n    bin_utilizations = np.where(possible_bins, bin_utilizations, 0.0)\n\n    temperature = 1.0 / (np.mean(bin_utilizations) + 1e-6)\n\n    probabilities = np.exp((bins_remain_cap[possible_bins] - item) / temperature)\n    probabilities /= np.sum(probabilities)\n\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = probabilities\n\n    return priorities\n\n### Analyze & experience\n- Comparing `priority_v2` (1st) vs `priority_v2` (2nd), `priority_v2` (3rd), and `priority_v2` (4th) - these are identical implementations. They represent a very basic 'first fit' approach with minimal prioritization.  `priority_v2` (4th) begins to introduce sophistication with temperature-scaled softmax based on fit and bin utilization.  It\u2019s a step up but the temperature calculation is simplistic.\n\nComparing `priority_v2` (4th) / (5th) vs `priority_v2` (6th), the latter introduces `np.clip` to the temperature, ensuring it remains within reasonable bounds, enhancing stability. The fit score calculation is more robust using `- (bins_remain_cap[possible_bins] - item)`.\n\n`priority_v2` (7th) - (10th) refine the temperature scaling using bin utilization, but the utilization calculation `np.sum(bins_remain_cap) / (n_bins * np.max(bins_remain_cap))` seems flawed \u2013 it doesn't accurately reflect individual bin utilization and relies heavily on the maximum capacity.\n\n`priority_v2` (11th) - (13th) try a different approach with temperature based directly on bin utilization, and utilizing softmax. The logic is clearer.\n\n`priority_v2` (14th) and (15th) are nearly identical. They attempt to use `1.0 / (np.mean(bin_utilizations) + 1e-6)` as temperature.\n\n`priority_v2` (16th) - (19th) improve the fit score using `1.0 / (remaining_caps - item + 1e-6)`. Adding a small constant prevents division by zero.  Bin utilization-based temperature scaling is used.\n\n`priority_v2` (20th) incorporates a waste/fit quality ratio and adds an exploration bonus. While attempting more sophistication, the introduction of constants (0.1, 0.2) is arbitrary and lacks theoretical justification. The temperature scaling is also less refined than earlier versions.\n\nOverall: The best heuristics incrementally build upon best-fit with adaptive softmax, emphasizing temperature scaling based on bin utilization. The ranking highlights the importance of stable temperature control, robust fit score calculation, and avoiding arbitrary constants. Later versions add complexity without significant improvements, and in some cases, introduce potential instability.\n- \nOkay, let's distill this into actionable heuristic design guidance. Given the substantial incentive, here's a focused response:\n\n* **Keywords:** Adaptive Exploration, Robustness, Bin Utilization, Softmax Temperature.\n* **Advice:** Focus on *dynamic* temperature scaling in softmax selection, directly linked to bin utilization. Prioritize stable, division-free fit score calculations. Rigorously test for performance consistency.\n* **Avoid:** Static bonuses, arbitrary constants, `argmax` selection, over-normalization, and complexity beyond what's demonstrably beneficial.\n* **Explanation:** The core theme is balancing exploitation (best fit) with *adaptive* exploration. Bin utilization provides a natural signal for adjusting exploration intensity; crowded bins should discourage further items. Robustness demands stability and avoids pitfalls of naive optimization.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}