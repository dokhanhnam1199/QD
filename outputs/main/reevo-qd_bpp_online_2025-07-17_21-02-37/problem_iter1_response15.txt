```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority if the item fits well (small waste)
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap - item
    priorities[fit_mask] = 1.0 / (waste[fit_mask] + 0.0001)  # Avoid division by zero
    # Small amount of waste implies large value, large waste implies small value.

    # Negative priority if it doesn't fit
    non_fit_mask = bins_remain_cap < item
    priorities[non_fit_mask] = -item/(bins_remain_cap[non_fit_mask]+0.0001) #Prioritize small remaining cap when the item cannot fit.

    #Boost priority of bins that are nearly full when they fit the item
    nearly_full_mask = (bins_remain_cap > item) & (bins_remain_cap <= 2*item)

    priorities[nearly_full_mask] = priorities[nearly_full_mask] + 2 # Try to fill partially full bins

    return priorities
```
