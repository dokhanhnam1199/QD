```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # First Fit Decreasing-like: Prefer bins with tighter fit. Reward small waste.
            waste = cap - item
            priorities[i] = 1 / (waste + 0.0001)  # Avoid division by zero

            #Consider relative fullness to avoid filling a near-empty bin if a tighter fit is available elsewhere.
            fullness = item / cap
            priorities[i] *= (1 + fullness)  #Boost priority the closer the fit
            
            # Penalize bins nearing fullness if the current item causes them to overflow when combined with some small items that appear later.
            if cap < 2 * item:
                 priorities[i] *= 1.1 # increase it slightly

        else:
            priorities[i] = -1  # Bin is not feasible

    return priorities
```
