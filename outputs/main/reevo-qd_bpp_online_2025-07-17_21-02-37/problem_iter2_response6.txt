```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Improved First-Fit Decreasing heuristic inspired priority
    # Prioritize bins with minimal waste, but also consider bin utilization
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_space = cap - item
            # Higher priority for smaller remaining space, scaled by utilization
            utilization = (cap - remaining_space) / cap  # Ratio of used space
            priorities[i] = utilization / (remaining_space + 1e-9) #Avoid division by zero
            #priorities[i] = 1.0 / (remaining_space + 1e-9) #Original FFD priority
        else:
            priorities[i] = -1e9  # Very low priority if item doesn't fit

    return priorities
```
