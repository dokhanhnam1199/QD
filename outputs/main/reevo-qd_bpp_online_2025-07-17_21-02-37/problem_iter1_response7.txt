```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins where the item fits with minimal waste.
    # Avoids fragmentation by preferring bins that will be filled more completely.
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap - item
    priorities[fit_mask] = 1 / (waste[fit_mask] + 1e-9)  # Smaller waste, higher priority

    # If no bins can fit, assign a very negative priority
    if not np.any(fit_mask):
        priorities[:] = -np.inf # Prevents selection

    return priorities
```
