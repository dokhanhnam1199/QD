```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Give very low priority to bins that cannot accommodate the item
    priorities[remaining_after_add < 0] = -np.inf

    # Calculate the fill ratio (item size / bin capacity)
    fill_ratio = item / bins_remain_cap
    
    # Bins with remaining capacity close to item size are prioritized higher.
    # Try to fill bins tightly without wasting too much space.
    
    priorities[remaining_after_add >= 0] = (bins_remain_cap[remaining_after_add >= 0] / (abs(remaining_after_add[remaining_after_add >= 0] - item) + 0.00001))
    
    
    # Scale by remaining capacity, which helps prefer bins that were already filled partially,
    # without focusing solely on almost-full bins if others are more appropriate.
    priorities[remaining_after_add >= 0] *= bins_remain_cap[remaining_after_add >= 0]
    

    return priorities
```
