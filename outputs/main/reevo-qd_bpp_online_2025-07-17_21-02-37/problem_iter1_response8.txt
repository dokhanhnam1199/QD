```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing Heuristic-inspired: Prefer bins that can accommodate the item.
    # and prefer the fuller ones

    eligible_bins = bins_remain_cap >= item
    
    if np.any(eligible_bins):
        priorities[eligible_bins] = bins_remain_cap[eligible_bins] - item # Remaining capacity after inserting
        priorities[eligible_bins] = 1 / (priorities[eligible_bins] + 1e-9) # To favor bins with smallest remaining capacity
        
    else:
        #If no bin can fit, then assign low score for all bins, so that we can create new one if possible.
        priorities[:] = -1 
            
    return priorities
```
