{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing (FFD) Inspired: Prefer bins with just enough space\n    residual_space = bins_remain_cap - item\n    fit_scores = np.where(residual_space >= 0, np.exp(-np.abs(residual_space)), -np.inf)\n\n    # Give penalty to bins that are already too full\n    priorities = fit_scores\n\n    # Smallest-Fit Inspired: Fill up bins that have less capacity\n    priorities += -0.01 * bins_remain_cap # Adding a small factor since we prefer 'exact' fit\n\n    # Large item penalty: If item size is above the threshold, penalize bins.\n    large_item_threshold = 0.7\n    if item > large_item_threshold:\n      priorities -= (item - large_item_threshold)\n\n    # Avoid creating too many near-empty bins. Reward larger utilization of current bins\n    priorities += bins_remain_cap / np.sum(bins_remain_cap) if np.sum(bins_remain_cap) > 0 else 0.0\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can fit the item\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        # Base priority for bins that can fit\n        priorities[can_fit] = 1.0\n\n        # Calculate remaining capacity after placing the item\n        remaining_after_placement = bins_remain_cap[can_fit] - item\n\n        # Prioritize tighter fits using a score based on the inverse of remaining space.  Add small constant to prevent divide by zero\n        priorities[can_fit] += 2.0 / (remaining_after_placement + 0.01*np.mean(bins_remain_cap))\n\n        # Bonus for bins that become nearly full after placing the item (reduces fragmentation). More generous window than before.\n        nearly_full = (remaining_after_placement >= 0) & (remaining_after_placement <= 0.2 * np.max(bins_remain_cap))\n        priorities[can_fit][nearly_full] += 3.0\n\n        # Discourage using empty bins unless the item is very large relative to bin size.\n        # If item is more than half full the empty bins can be useful.\n        empty_bin_indices = np.where(bins_remain_cap == np.max(bins_remain_cap))[0]  # Assuming initial capacity is max.\n        empty_and_fits = np.intersect1d(np.where(can_fit)[0], empty_bin_indices)\n\n        if item <= 0.5 * np.max(bins_remain_cap):\n            priorities[empty_and_fits] -= 1.0 # Slightly discourage\n\n        # Add small random value to break ties\n        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.1\n\n    else:\n        # No bin can fit the item. Assign very low priority.\n        priorities[:] = -10.0  # Significantly lower than before.\n\n    return priorities\n\n[Reflection]\nPrioritize fitting bins, reward near-full bins, and penalize excessive fragmentation. Adapt penalties based on item size.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}