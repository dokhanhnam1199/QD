{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate remaining capacity after adding the item\n    remaining_after_add = bins_remain_cap - item\n\n    # Give very low priority to bins that cannot accommodate the item\n    priorities[remaining_after_add < 0] = -np.inf\n\n    # Calculate the fill ratio (item size / bin capacity)\n    fill_ratio = item / bins_remain_cap\n    \n    # Bins with remaining capacity close to item size are prioritized higher.\n    # Try to fill bins tightly without wasting too much space.\n    \n    priorities[remaining_after_add >= 0] = (bins_remain_cap[remaining_after_add >= 0] / (abs(remaining_after_add[remaining_after_add >= 0] - item) + 0.00001))\n    \n    \n    # Scale by remaining capacity, which helps prefer bins that were already filled partially,\n    # without focusing solely on almost-full bins if others are more appropriate.\n    priorities[remaining_after_add >= 0] *= bins_remain_cap[remaining_after_add >= 0]\n    \n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First Fit Decreasing Heuristic-inspired: Prefer bins that can accommodate the item.\n    # and prefer the fuller ones\n\n    eligible_bins = bins_remain_cap >= item\n    \n    if np.any(eligible_bins):\n        priorities[eligible_bins] = bins_remain_cap[eligible_bins] - item # Remaining capacity after inserting\n        priorities[eligible_bins] = 1 / (priorities[eligible_bins] + 1e-9) # To favor bins with smallest remaining capacity\n        \n    else:\n        #If no bin can fit, then assign low score for all bins, so that we can create new one if possible.\n        priorities[:] = -1 \n            \n    return priorities\n\n[Reflection]\nFocus on remaining capacity after insertion. Prioritize fuller bins. If no fit, allow new bin creation.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}