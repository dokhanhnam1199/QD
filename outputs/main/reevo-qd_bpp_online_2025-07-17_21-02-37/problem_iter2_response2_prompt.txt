{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Assign high priority to bins that can fit the item with minimal waste\n    fit_mask = bins_remain_cap >= item\n    \n    if np.any(fit_mask):  # Check if any bin can fit the item\n        waste = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = 1 / (waste + 0.00001) # high priority when waste is low (avoid zero division)\n\n        # Prioritize bins closer to item size (First-Fit Decreasing inspired)\n        priorities[fit_mask] += (bins_remain_cap[fit_mask] - item) / np.max(bins_remain_cap) \n\n    # Give bins close to full a negative priority if item doesn't fit (try to fill new bins)\n    almost_full = (bins_remain_cap > 0) & (bins_remain_cap < item)\n    priorities[almost_full] = -1 * (item - bins_remain_cap[almost_full])  # Give negative priority if bin is not useful\n\n    # Very low priority for empty/zero bins (to avoid useless computation if no bins work)\n    empty_bins = bins_remain_cap == 0\n    priorities[empty_bins] = -1000 #very small number\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Give a high priority to bins that can fit the item snugly\n    fit_snugly = (bins_remain_cap >= item) & (bins_remain_cap <= 1.2 * item)\n    priorities[fit_snugly] += 10  # Significant boost for snug fits\n    \n    # Prioritize bins that have enough space to avoid fragmentation\n    enough_space = (bins_remain_cap >= item) & (bins_remain_cap >= 0.5)  # Avoid small fragments\n    priorities[enough_space] += 5  # Moderate boost for enough space\n\n    # Penalize bins where the item barely fits\n    barely_fits = (bins_remain_cap >= item) & (bins_remain_cap < 1.01 * item)\n    priorities[barely_fits] -= 2  # Slight penalty\n\n    # Penalize bins which are already quite full\n    full_bins = bins_remain_cap < 0.95\n    priorities[full_bins] -= (1 - bins_remain_cap[full_bins]) * 10 #More penalty on the bins more closer to the full\n\n    # Avoid bins that are too empty if we can avoid it\n    empty_ish = (bins_remain_cap >= item) & (bins_remain_cap >= 0.8)\n    priorities[empty_ish] += bins_remain_cap[empty_ish] * 0.1\n\n    # Disqualify bins that cannot fit the item\n    cannot_fit = bins_remain_cap < item\n    priorities[cannot_fit] = -np.inf\n\n    return priorities\n\n[Reflection]\nPrioritize snug fits, discourage fragmentation, and use stricter bin capacity thresholds with larger penalties.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}