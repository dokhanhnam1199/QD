```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing (FFD) Inspired: Prefer bins with just enough space
    residual_space = bins_remain_cap - item
    fit_scores = np.where(residual_space >= 0, np.exp(-10 * np.abs(residual_space)), -np.inf)  # Sharper fit preference

    priorities = fit_scores

    # Smallest-Fit Inspired: Fill up bins that have less capacity
    priorities += -0.001 * bins_remain_cap # Adding a small factor since we prefer 'exact' fit. Reduced factor.

    # Large item penalty: If item size is above the threshold, penalize bins.
    large_item_threshold = 0.7
    if item > large_item_threshold:
      priorities -= 5 * (item - large_item_threshold) # Increased the penalty

    # Avoid creating too many near-empty bins. Reward larger utilization of current bins
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity > 0:
        priorities += 0.1 * bins_remain_cap / total_capacity  # Increased reward, added small factor
    else:
        priorities += 0.0 # Add a small factor when total_capacity is zero

    # Additional term to encourage use of fuller bins (avoid fragmentation)
    priorities += 0.0001 * (bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap)>0 else 0.0
    
    # Give preference to bins where item can fit perfectly if any such bin exists
    perfect_fit = np.where(residual_space == 0)[0]
    if len(perfect_fit) > 0:
        priorities[perfect_fit] += 1 # Large Preference

    return priorities
```
