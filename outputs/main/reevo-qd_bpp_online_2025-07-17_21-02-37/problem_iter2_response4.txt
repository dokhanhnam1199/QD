```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspired priority
    # Prioritize bins that can fit the item and minimize wasted space.
    eligible_bins = bins_remain_cap >= item
    if np.any(eligible_bins):
        remaining_space = bins_remain_cap[eligible_bins] - item
        # Smaller remaining space gets a higher priority.  Use inverse to achieve this.
        priorities[eligible_bins] = 1.0 / (remaining_space + 1e-9)  # Add small constant to avoid division by zero

        # Optionally, add a small random component to break ties
        priorities[eligible_bins] += np.random.rand(np.sum(eligible_bins)) * 0.01

    else:
        # If no bin can fit, assign a very low priority to all bins.
        priorities[:] = -1e9

    return priorities
```
