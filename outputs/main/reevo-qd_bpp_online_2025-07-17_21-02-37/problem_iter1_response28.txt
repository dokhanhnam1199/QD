```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing-esque: Prefer bins that can fit the item well.
            # Avoid fragmentation.
            priorities[i] = (cap - item) / cap

            #Improvement: Prioritize bins close to full AFTER placing the item, reducing external fragmentation
            priorities[i] += 1 - (cap-item)/np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1.0 # Avoid division by zero

            # Slight encouragement to use less full bins first, when all other things are equal
            # A smaller bonus
            priorities[i] += 0.1 * (1 - cap/np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.0)


        else:
            priorities[i] = -1e9  # Very low priority if it doesn't fit
    return priorities
```
