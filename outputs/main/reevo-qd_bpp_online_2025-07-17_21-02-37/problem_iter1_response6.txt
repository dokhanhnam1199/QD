```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item
    
    # Give high priority to bins where the item fits and the remaining capacity is minimized, but not zero or negative.
    fit_mask = remaining_after_add >= 0
    
    if np.any(fit_mask):
        priorities[fit_mask] = 1 / (remaining_after_add[fit_mask] + 1e-9) # Adding a small constant to prevent division by zero
        
        # If some bins have exactly the item size, give them highest priority
        exact_fit_mask = (bins_remain_cap - item) == 0
        if np.any(exact_fit_mask):
             priorities[exact_fit_mask] = np.max(priorities) + 1
    else:
         priorities = np.zeros_like(bins_remain_cap) # if item doesn't fit anywhere, assign lowest priority to all bins
         
    return priorities
```
