```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_bin_capacity = np.max(bins_remain_cap)

    # Identify bins that can fit the item
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Base priority for bins that can fit
        priorities[can_fit] = 1.0

        # Calculate remaining capacity after placing the item
        remaining_after_placement = bins_remain_cap[can_fit] - item

        # Prioritize tighter fits, stronger reward
        priorities[can_fit] += 5.0 / (remaining_after_placement + 0.01 * max_bin_capacity)

        # Bonus for bins that become nearly full after placing the item (reduces fragmentation), stronger reward. Window adjusted.
        nearly_full = (remaining_after_placement >= 0) & (remaining_after_placement <= 0.15 * max_bin_capacity) #Slightly wider window
        priorities[can_fit][nearly_full] += 12.0 # stronger bonus

        # Discourage using empty bins unless the item is very large relative to bin size. Stronger penalty. Adaptive threshold.
        empty_bin_indices = np.where(bins_remain_cap == max_bin_capacity)[0]  # Assuming initial capacity is max.
        empty_and_fits = np.intersect1d(np.where(can_fit)[0], empty_bin_indices)

        if item <= 0.3 * max_bin_capacity: # more conservative on when to penalize
            priorities[empty_and_fits] -= 7.0  # Stronger discouragement
        elif len(empty_and_fits) > 0:
            priorities[empty_and_fits] += 2.0 # encourage if item is large and fits in an empty bin, stronger encouragement

        # Add small value to break ties, only when needed. Smaller randomness
        
        max_priority = np.max(priorities[can_fit])
        close_to_max = np.isclose(priorities[can_fit], max_priority)
        if np.sum(close_to_max) > 1:

            priorities[can_fit][close_to_max] += np.random.rand(np.sum(close_to_max)) * 0.0005 # Even Smaller randomness

    else:
        # No bin can fit the item. Assign very low priority.
        priorities[:] = -10.0

    # Adaptive penalty for larger remaining capacities, focusing on variance reduction.  Stronger at lower capacities.
    mean_cap = np.mean(bins_remain_cap)
    penalty_strength = 0.002 * (1 + mean_cap / (bins_remain_cap + 1e-9)) # Increased sensitivity at lower remaining capacity. stronger penalty
    priorities -= penalty_strength * bins_remain_cap

    # Incentive to use more full bins. This should help finish open bins.
    bins_utilization = (max_bin_capacity - bins_remain_cap)/max_bin_capacity
    priorities += 2 * bins_utilization

    return priorities
```
