```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Assign high priority to bins that can fit the item snugly
    fit_threshold = 0.1  # Adjust this threshold as needed
    snug_fit = np.where((remaining_after_add >= 0) & (remaining_after_add <= fit_threshold))[0]
    priorities[snug_fit] += 10  # Give snug fits a significant boost

    # Assign medium priority to bins that can fit the item
    can_fit = np.where(remaining_after_add >= 0)[0]
    priorities[can_fit] += 5

    # Penalize bins that cannot fit the item (make them less desirable)
    cannot_fit = np.where(remaining_after_add < 0)[0]
    priorities[cannot_fit] -= 1

    # Give higher priority to bins with less remaining capacity if they can fit.
    # This encourages filling bins up before opening new ones.
    priorities[can_fit] += 1 / (bins_remain_cap[can_fit] + 0.0001)  # Avoid division by zero

    # Refine priority based on the percentage of the bin that the item would fill
    fill_percentage = item / bins_remain_cap
    fill_percentage[remaining_after_add < 0] = 0  # Only consider bins where it fits.
    priorities += fill_percentage  # the bigger the percentage the higher priority

    return priorities
```
