```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]
    priorities[fit_mask] = 1 - priorities[fit_mask] # higher values for smaller remaining space after placement
    
    # Penalize bins that are too full or won't fit the item at all
    not_fit_mask = bins_remain_cap < item
    priorities[not_fit_mask] = -np.inf # ensure that bins too small are not considered
    
    # Add a small bonus for bins that are not completely empty (to favor using partially filled bins first)
    non_empty_mask = bins_remain_cap < 1.0
    priorities[non_empty_mask] += 0.001
    
    return priorities
```
