```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)  # Assuming the maximum is the initial capacity.

    # 1. Feasibility: Only consider bins that can fit the item.
    eligible_bins = bins_remain_cap >= item
    priorities[~eligible_bins] = -np.inf

    # 2. Desired Fill Level: Reward bins that, after adding the item, have a remaining capacity
    #    within a specific range (e.g., between 10% and 30% of the bin's capacity).
    remaining_after_pack = bins_remain_cap - item
    desired_fill = (remaining_after_pack >= 0.1 * max_cap) & (remaining_after_pack <= 0.3 * max_cap) & eligible_bins
    priorities[desired_fill] += 3.0

    # 3. Almost Full: Give a bonus to bins that are nearly full after packing, encouraging closure.
    almost_full = (remaining_after_pack > 0) & (remaining_after_pack <= 0.05 * max_cap) & eligible_bins
    priorities[almost_full] += 4.0

    # 4. Penalize Empty Bins: Slightly discourage using empty bins if other partially filled bins are viable.
    empty_bins = bins_remain_cap == max_cap
    priorities[empty_bins & eligible_bins] -= 0.5 * np.mean(eligible_bins)

    # 5. Fill Ratio consideration
    fill_ratios = item / bins_remain_cap
    good_fill = (fill_ratios >= 0.6) & (fill_ratios <= 0.95) & eligible_bins
    priorities[good_fill] += 2.0

    # 6. Random Component: Add a small random component to break ties and explore the solution space.
    priorities[eligible_bins] += np.random.rand(np.sum(eligible_bins)) * 0.1

    return priorities
```
