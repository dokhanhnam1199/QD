```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give a high priority to bins that can fit the item snugly
    fit_snugly = (bins_remain_cap >= item) & (bins_remain_cap <= 1.2 * item)
    priorities[fit_snugly] += 10  # Significant boost for snug fits
    
    # Prioritize bins that have enough space to avoid fragmentation
    enough_space = (bins_remain_cap >= item) & (bins_remain_cap >= 0.5)  # Avoid small fragments
    priorities[enough_space] += 5  # Moderate boost for enough space

    # Penalize bins where the item barely fits
    barely_fits = (bins_remain_cap >= item) & (bins_remain_cap < 1.01 * item)
    priorities[barely_fits] -= 2  # Slight penalty

    # Penalize bins which are already quite full
    full_bins = bins_remain_cap < 0.95
    priorities[full_bins] -= (1 - bins_remain_cap[full_bins]) * 10 #More penalty on the bins more closer to the full

    # Avoid bins that are too empty if we can avoid it
    empty_ish = (bins_remain_cap >= item) & (bins_remain_cap >= 0.8)
    priorities[empty_ish] += bins_remain_cap[empty_ish] * 0.1

    # Disqualify bins that cannot fit the item
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = -np.inf

    return priorities
```
