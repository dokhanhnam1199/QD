```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First-Fit-Decreasing-like heuristic: Prefer bins that can fit the item closely
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
      priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Remaining capacity after fit
      priorities[fit_mask] = 1 / (1e-9 + priorities[fit_mask]) # Avoid division by zero, invert for closer fits

    # If no bin can fit, consider overflow (less preferred, avoid only if possible)
    else:
      priorities = -1 * (item - bins_remain_cap) # penalty for overflow, bigger penalty if overflow is bigger.
      

    # Bonus for bins that are already somewhat full, but still have some space
    # This tries to consolidate existing partially filled bins.
    partial_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < np.max(bins_remain_cap)) # Avoid empty or max capacity bins
    if np.any(partial_full_mask):
      priorities[partial_full_mask] += 0.1 * (1 - bins_remain_cap[partial_full_mask]/np.max(bins_remain_cap)) #higher when less remains

    return priorities
```
