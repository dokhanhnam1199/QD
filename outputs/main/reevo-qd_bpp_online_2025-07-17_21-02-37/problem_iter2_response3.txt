```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Calculate remaining capacity after inserting the item into eligible bins
        remaining_capacity = bins_remain_cap[eligible_bins] - item

        # Prioritize bins with smaller remaining capacity (fuller bins) using inverse
        priorities[eligible_bins] = 1 / (remaining_capacity + 1e-9)

        # Further refine priority: Give preference to bins that were already somewhat full
        # This helps to avoid creating too many almost-empty bins
        priorities[eligible_bins] *= (bins_remain_cap[eligible_bins] / np.max(bins_remain_cap))


    else:
        # If no bin can fit, assign a very low priority so a new bin is likely created
        priorities[:] = -1.0

    return priorities
```
