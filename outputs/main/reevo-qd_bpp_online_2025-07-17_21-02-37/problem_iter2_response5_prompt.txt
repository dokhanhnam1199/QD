{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Prioritize bins where the item fits\n    fit_mask = bins_remain_cap >= item\n    \n    # If no bin fits, assign a low priority to all bins\n    if not np.any(fit_mask):\n        return priorities\n\n    # Calculate fill ratio for bins where the item fits\n    fill_ratio = item / bins_remain_cap\n    fill_ratio[~fit_mask] = 0  # Set to 0 for bins where it doesn't fit\n\n    # Prioritize bins with a fill ratio close to 1 (but not exceeding 1)\n    priorities[fit_mask] = 1 - np.abs(1 - fill_ratio[fit_mask])\n    \n    # Add a small bonus for bins that are nearly full before adding the item\n    nearly_full_bonus_mask = (bins_remain_cap > item) & (bins_remain_cap < item * 1.2) # Slightly more than needed\n    priorities[nearly_full_bonus_mask] += 0.1 # Add some bonus. It will never dominate completely full bins.\n    \n    # Slightly penalize bins with significantly larger capacity than item size\n    large_capacity_penalty_mask = (bins_remain_cap > item * 3) & fit_mask\n    priorities[large_capacity_penalty_mask] -= 0.05 # Small penalty if the space left over will be excessive. \n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if item <= cap:\n            # Encourage filling bins as much as possible, but prioritize bins that are close to full after adding the item\n            fill_ratio = item / cap\n            remaining_cap_after_add = cap - item\n            #Prioritize bins that will be almost full\n            if remaining_cap_after_add > 0:\n              priorities[i] = 1/(remaining_cap_after_add + 1e-9) # add small epsilon to avoid division by zero\n            else:\n              priorities[i] = 100 # high priority if item fits exactly\n        else:\n            priorities[i] = -1  # Cannot fit, assign very low priority\n    return priorities\n\n[Reflection]\nThe better code directly prioritizes bins based on *remaining* capacity after item placement, driving higher fill rates.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}