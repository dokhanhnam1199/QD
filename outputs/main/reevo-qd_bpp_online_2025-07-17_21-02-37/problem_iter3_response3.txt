```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Base priority: Remaining capacity acts as a reward
        priorities[can_fit] = bins_remain_cap[can_fit]

        # Tighter fits get higher priority
        remaining_after_placement = bins_remain_cap[can_fit] - item
        priorities[can_fit] += 5.0 / (remaining_after_placement + 0.001) # Inverse remains important

        # Penalize empty bins: unless item is large
        empty_bin_indices = np.where(bins_remain_cap == np.max(bins_remain_cap))[0]
        empty_and_fits = np.intersect1d(np.where(can_fit)[0], empty_bin_indices)

        if item <= 0.6 * np.max(bins_remain_cap):
             priorities[empty_and_fits] -= 2.0

        # Randomness for exploration (small)
        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.05
    else:
        # No bin can fit the item. Massive penalty.
        priorities[:] = -100.0

    return priorities
```
