```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) # Assuming all bins have same capacity

    # Identify bins that can fit the item
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Base priority for bins that can fit
        priorities[can_fit] = 1.0

        # Calculate remaining capacity after placing the item
        remaining_after_placement = bins_remain_cap[can_fit] - item

        # Strongly reward near-full bins: Higher score when remaining space is small.
        priorities[can_fit] += 5.0 * (1 - (remaining_after_placement / bin_capacity))

        # Bonus for bins that become nearly full after placing the item (reduces fragmentation).
        nearly_full = (remaining_after_placement >= 0) & (remaining_after_placement <= 0.1 * bin_capacity)
        priorities[can_fit][nearly_full] += 8.0  # Higher bonus

        # Penalize emptier bins depending on item size.
        empty_bin_indices = np.where(bins_remain_cap == bin_capacity)[0]  # Assuming initial capacity is max.
        empty_and_fits = np.intersect1d(np.where(can_fit)[0], empty_bin_indices)
        
        # Dynamic penalty based on relative item size.
        if item <= 0.3 * bin_capacity:
            priorities[empty_and_fits] -= 2.0 # Stronger penalty
        elif item <= 0.6 * bin_capacity and len(empty_and_fits) > 0:
            priorities[empty_and_fits] -= 0.5 # Moderate penalty
        elif len(empty_and_fits) > 0:
            priorities[empty_and_fits] += 1.0 # Reward putting larger items in empty bins


        # Add small random value ONLY to break ties, not for exploration
        max_priority = np.max(priorities)
        ties = np.where(priorities == max_priority)[0]
        if len(ties) > 1:
             priorities[ties] += np.random.rand(len(ties)) * 0.001


    else:
        # No bin can fit the item. Assign very low priority.
        priorities[:] = -10.0  # Significantly lower than before.

    return priorities
```
