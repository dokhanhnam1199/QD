```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Base priority for bins that can fit
        priorities[can_fit] = 1.0

        # Calculate remaining capacity after placing the item
        remaining_after_placement = bins_remain_cap[can_fit] - item

        # Prioritize tighter fits, stronger reward, and adaptive scaling
        mean_remaining = np.mean(bins_remain_cap)
        priorities[can_fit] += 7.0 / (remaining_after_placement + 0.01 * mean_remaining)

        # Bonus for bins that become nearly full after placing the item (reduces fragmentation), stronger reward. Window adjusted.
        max_capacity = np.max(bins_remain_cap)
        nearly_full = (remaining_after_placement >= 0) & (remaining_after_placement <= 0.15 * max_capacity) #Slightly wider window.
        priorities[can_fit][nearly_full] += 12.0 #Increased reward

        # Discourage using empty bins unless the item is very large relative to bin size. Stronger penalty. Adaptive threshold.
        empty_bin_indices = np.where(bins_remain_cap == max_capacity)[0]  # Assuming initial capacity is max.
        empty_and_fits = np.intersect1d(np.where(can_fit)[0], empty_bin_indices)

        if item <= 0.3 * max_capacity: #Reduced threshold slightly
            priorities[empty_and_fits] -= 8.0  # Stronger discouragement
        elif len(empty_and_fits) > 0:
            priorities[empty_and_fits] += 2.0 #Encourage a bit more if large

        # Add small random value to break ties, only when needed.
        feasible_indices = np.where(can_fit)[0] #Use indices instead of boolean
        if len(feasible_indices) > 1:
             priorities[feasible_indices] += np.random.rand(len(feasible_indices)) * 0.01 # Smaller randomness

    else:
        # No bin can fit the item. Assign very low priority.
        priorities[:] = -10.0

    #Penalize bins with larger remaining capacity, but less strongly than rewards.
    priorities -= 0.0005 * bins_remain_cap

    return priorities
```
