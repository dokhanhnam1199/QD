```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired heuristic: prioritize bins that can fit the item,
    # but among those, prefer bins with less remaining capacity. This tries to
    # fill bins before opening new ones.

    # Very large number so it goes to the end if it can't fit
    penalty = 1e9

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Give a priority based on how well the item fits (lower remaining capacity after insertion is better).
            # Add a small constant to ensure positive values and avoid division by zero.
            priorities[i] = 1.0 / (cap - item + 0.0001)  # Higher priority for smaller remaining space
        else:
            priorities[i] = -penalty # Very Low Priority
    return priorities
```
