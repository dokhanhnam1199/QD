```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Prioritize bins that can actually fit the item.
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] += 1  # Give feasible bins a base priority

    # 2. Remaining Capacity: Prioritize bins with less remaining capacity
    #    after placing the item (First Fit Decreasing principle).
    remaining_capacity_after_fit = bins_remain_cap - item
    remaining_capacity_after_fit[remaining_capacity_after_fit < 0] = np.inf # Penalize infeasible bins. Set remaining capacity to infinity

    # Convert remaining capacity to priority: the lower the capacity, the better. Subtract from max capacity
    max_cap = np.max(bins_remain_cap) # Normalize so bins with high capacity aren't penalized as much.
    capacity_priority = max_cap - remaining_capacity_after_fit 
    capacity_priority[~feasible_bins] = -np.inf # Give very low priority if item doesn't fit

    priorities += capacity_priority

    # 3. Bonus for being nearly full: A bin that has just enough space.
    nearly_full_threshold = item * 1.1 # Bins that only have ~10% more than the item should be selected
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= nearly_full_threshold)
    priorities[nearly_full] += 2 # Significant bonus for being near-full

    return priorities
```
