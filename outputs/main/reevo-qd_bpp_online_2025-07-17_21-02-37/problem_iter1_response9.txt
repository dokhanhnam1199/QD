```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: can the item fit?  Infeasible bins get -inf priority.
    feasible = bins_remain_cap >= item
    priorities[~feasible] = -np.inf

    # For feasible bins:
    # 1. Maximize space utilization: fill the bin as much as possible.
    # 2. Minimize wasted space: penalize bins with too much remaining capacity after adding the item.
    # 3. Small bins get priority (First Fit Decreasing style influence)
    # Normalized remaining capacity after adding the item.
    remaining_capacity_after = bins_remain_cap[feasible] - item
    normalized_remaining = remaining_capacity_after / np.max(bins_remain_cap) # normalize with respect to largest bin. avoids scale issues
    
    # Score is composed of utilization and waste factors
    utilization_score =  1- normalized_remaining
    waste_penalty = - (normalized_remaining)**2 # Quadratic penalty for wasted space
    
    # Combine scores
    priorities[feasible] = utilization_score + waste_penalty 
   

    return priorities
```
