```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Large enough bins that can accommodate the item get a baseline priority.
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] = 1.0

    # Favor bins where the item fills a large portion of the remaining capacity,
    # but not too large, so as to avoid leaving too little space.
    fill_ratios = item / bins_remain_cap
    good_fill = (fill_ratios >= 0.5) & (fill_ratios <= 0.95) & eligible_bins  # Target fill range
    priorities[good_fill] += 2.0 # Give high priority if fill is good.

    # Add a small bonus for bins that are nearly full after packing. This
    # encourages the algorithm to close out bins.
    remaining_after_pack = bins_remain_cap - item
    almost_full = (remaining_after_pack > 0) & (remaining_after_pack <= 0.1) & eligible_bins
    priorities[almost_full] += 1.5

    # Slightly discourage using empty bins if other partially filled bins are viable.
    empty_bins = bins_remain_cap == np.max(bins_remain_cap)  # Assuming 'max' is initial capacity.
    priorities[empty_bins & eligible_bins] -= 0.5 * np.mean(eligible_bins)

    # Add a random component to break ties and explore the solution space
    priorities[eligible_bins] += np.random.rand(np.sum(eligible_bins)) * 0.1

    return priorities
```
