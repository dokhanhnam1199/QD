```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins where the item fits
    fit_mask = bins_remain_cap >= item
    
    # If no bin fits, assign a low priority to all bins
    if not np.any(fit_mask):
        return priorities

    # Calculate fill ratio for bins where the item fits
    fill_ratio = item / bins_remain_cap
    fill_ratio[~fit_mask] = 0  # Set to 0 for bins where it doesn't fit

    # Prioritize bins with a fill ratio close to 1 (but not exceeding 1)
    priorities[fit_mask] = 1 - np.abs(1 - fill_ratio[fit_mask])
    
    # Add a small bonus for bins that are nearly full before adding the item
    nearly_full_bonus_mask = (bins_remain_cap > item) & (bins_remain_cap < item * 1.2) # Slightly more than needed
    priorities[nearly_full_bonus_mask] += 0.1 # Add some bonus. It will never dominate completely full bins.
    
    # Slightly penalize bins with significantly larger capacity than item size
    large_capacity_penalty_mask = (bins_remain_cap > item * 3) & fit_mask
    priorities[large_capacity_penalty_mask] -= 0.05 # Small penalty if the space left over will be excessive. 

    return priorities
```
