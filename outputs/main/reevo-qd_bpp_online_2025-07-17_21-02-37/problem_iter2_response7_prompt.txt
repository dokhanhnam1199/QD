{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Large enough bins that can accommodate the item get a baseline priority.\n    eligible_bins = bins_remain_cap >= item\n    priorities[eligible_bins] = 1.0\n\n    # Favor bins where the item fills a large portion of the remaining capacity,\n    # but not too large, so as to avoid leaving too little space.\n    fill_ratios = item / bins_remain_cap\n    good_fill = (fill_ratios >= 0.5) & (fill_ratios <= 0.95) & eligible_bins  # Target fill range\n    priorities[good_fill] += 2.0 # Give high priority if fill is good.\n\n    # Add a small bonus for bins that are nearly full after packing. This\n    # encourages the algorithm to close out bins.\n    remaining_after_pack = bins_remain_cap - item\n    almost_full = (remaining_after_pack > 0) & (remaining_after_pack <= 0.1) & eligible_bins\n    priorities[almost_full] += 1.5\n\n    # Slightly discourage using empty bins if other partially filled bins are viable.\n    empty_bins = bins_remain_cap == np.max(bins_remain_cap)  # Assuming 'max' is initial capacity.\n    priorities[empty_bins & eligible_bins] -= 0.5 * np.mean(eligible_bins)\n\n    # Add a random component to break ties and explore the solution space\n    priorities[eligible_bins] += np.random.rand(np.sum(eligible_bins)) * 0.1\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First Fit Decreasing heuristic adaptation: prioritize bins that can fit the item\n    # and have the least remaining capacity after placing the item.  If no bin can fit the item, then return 0\n    \n    # Assign a base priority if the bin can fit the item\n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):  # at least one bin can fit\n        priorities[can_fit] = 1.0  # Base priority\n\n        # Prioritize bins with smaller remaining capacity after placement\n        remaining_after_placement = bins_remain_cap[can_fit] - item\n        priorities[can_fit] += 1.0 / (remaining_after_placement + 1e-9)  # Avoid division by zero\n\n        # Bonus for near-perfect fit (reduces fragmentation)\n        near_perfect_fit = (remaining_after_placement >= 0) & (remaining_after_placement <= 0.1 * np.max(bins_remain_cap))\n        priorities[can_fit][near_perfect_fit] += 2.0\n        \n    else:\n        # if no bins can fit return a small value that makes it be last\n        priorities[:] = -1.0\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits, avoid empty bins unless necessary, and adapt classic heuristics like First Fit Decreasing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}