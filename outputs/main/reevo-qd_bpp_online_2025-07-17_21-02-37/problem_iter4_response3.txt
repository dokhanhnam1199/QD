```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Identify bins that can fit the item
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Base priority for bins that can fit
        priorities[can_fit] = 1.0

        # Calculate remaining capacity after placing the item
        remaining_after_placement = bins_remain_cap[can_fit] - item

        # Prioritize tighter fits using a score based on the inverse of remaining space.  Add small constant to prevent divide by zero
        priorities[can_fit] += 2.0 / (remaining_after_placement + 0.01 * bin_capacity)

        # Reward bins that become nearly full after placing the item (reduces fragmentation).
        nearly_full = (remaining_after_placement >= 0) & (remaining_after_placement <= 0.2 * bin_capacity)
        priorities[can_fit][nearly_full] += 3.0

        # Discourage using empty bins unless the item is very large relative to bin size.
        empty_bin_indices = np.where(bins_remain_cap == bin_capacity)[0]  # Assuming initial capacity is bin_capacity.
        empty_and_fits = np.intersect1d(np.where(can_fit)[0], empty_bin_indices)

        if item <= 0.5 * bin_capacity:
            priorities[empty_and_fits] -= 0.5  # Slightly discourage

        # Bonus for bins with higher utilization *after* placement
        utilization = (bin_capacity - remaining_after_placement) / bin_capacity
        priorities[can_fit] += utilization * 0.5  # Encourage higher utilization

        # Add small random value to break ties
        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.1

    else:
        # No bin can fit the item. Assign very low priority.
        priorities[:] = -10.0  # Significantly lower than before.

    return priorities
```
