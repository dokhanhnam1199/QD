```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, disqualify bins that cannot fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # Calculate the waste if the item is placed in the bin
    waste = bins_remain_cap - item
    
    # Prioritize bins with smaller waste, but only if they are feasible
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins): #check if any feasible bin exists
        priorities[feasible_bins] = -waste[feasible_bins]

        #Boost score for almost full bin to pack items as densely as possible.
        almost_full_threshold = 0.1 * np.max(bins_remain_cap) #within 10% of fullest bin
        almost_full_bins = (waste >= 0) & (waste <= almost_full_threshold) & feasible_bins
        priorities[almost_full_bins] += 10  # Boost priority if it almost fills the bin. The boosting value is chosen emperically.

        # A further enhancement is to consider that it may be useful to open up new bins.
        # Add a small bias to each eligible bin to promote the "new bin" option.
        priorities[feasible_bins] += 0.001 # Bias to not use existing bins.

    return priorities
```
