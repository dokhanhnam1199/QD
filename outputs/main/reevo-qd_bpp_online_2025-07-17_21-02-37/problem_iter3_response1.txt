```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Base priority for bins that can fit
        priorities[can_fit] = 1.0

        # Calculate remaining capacity after placing the item
        remaining_after_placement = bins_remain_cap[can_fit] - item

        # Prioritize tighter fits using a score based on the inverse of remaining space. Add a small constant to prevent divide by zero. More influence than before
        priorities[can_fit] += 3.0 / (remaining_after_placement + 0.01 * np.mean(bins_remain_cap))

        # Bonus for bins that become nearly full after placing the item (reduces fragmentation)
        nearly_full = (remaining_after_placement >= 0) & (remaining_after_placement <= 0.1 * np.max(bins_remain_cap))  # Tighter threshold
        priorities[can_fit][nearly_full] += 5.0 # Stronger bonus

        # Discourage using empty bins unless the item is very large relative to bin size.  Stricter penalty
        empty_bin_indices = np.where(bins_remain_cap == np.max(bins_remain_cap))[0]  # Assuming initial capacity is max.
        empty_and_fits = np.intersect1d(np.where(can_fit)[0], empty_bin_indices)

        if item <= 0.6 * np.max(bins_remain_cap):  # Higher threshold
            priorities[empty_and_fits] -= 2.0 # Stronger discouragement
        
        # Add small random value to break ties. Smaller randomness.
        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.05

    else:
        # No bin can fit the item. Assign very low priority.
        priorities[:] = -10.0  # Significantly lower than before.

    return priorities
```
