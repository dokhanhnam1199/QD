```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # If the item fits, prioritize bins with less remaining capacity, but not too close to full
            # Use a combination of remaining capacity and waste after packing.
            waste = cap - item
            priorities[i] = (1 / (waste + 1e-6)) * (1 - (waste / cap)) # Avoid division by zero and prioritize less waste
            #priorities[i] = 1 / (cap + 1e-6)
        else:
            # If the item doesn't fit, assign a very low priority.
            priorities[i] = -1e9 # Very low priority
    return priorities
```
