```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Huge penalty if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf
    
    # If item fits, prioritize bins with tighter fit (minimize wasted space), but not too tight
    
    # Option 1: Linear Reward, penalized by waste
    waste = bins_remain_cap - item
    
    # Penalize bins nearing completion. High priority for bins that are just large enough
    # but also incentivize filling already decently filled bins

    # Attempt a non-linear scaling
    priorities[bins_remain_cap >= item] = np.exp(-waste[bins_remain_cap >= item]) * (bins_remain_cap[bins_remain_cap >= item]/ bins_remain_cap.max()) 
    
    return priorities
```
