```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing (FFD) Inspired: Prefer bins with just enough space
    residual_space = bins_remain_cap - item
    fit_scores = np.where(residual_space >= 0, np.exp(-np.abs(residual_space)), -np.inf)

    # Give penalty to bins that are already too full
    priorities = fit_scores

    # Smallest-Fit Inspired: Fill up bins that have less capacity
    priorities += -0.01 * bins_remain_cap # Adding a small factor since we prefer 'exact' fit

    # Large item penalty: If item size is above the threshold, penalize bins.
    large_item_threshold = 0.7
    if item > large_item_threshold:
      priorities -= (item - large_item_threshold)

    # Avoid creating too many near-empty bins. Reward larger utilization of current bins
    priorities += bins_remain_cap / np.sum(bins_remain_cap) if np.sum(bins_remain_cap) > 0 else 0.0

    return priorities
```
