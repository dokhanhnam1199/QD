```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Assign lowest priority to infeasible bins

    # 2. Remaining Capacity: Prefer bins with less remaining capacity after adding the item,
    #    but avoid bins that will become too full (e.g., remaining capacity < item/2, can be tuned)
    remaining_after_fit = bins_remain_cap - item
    too_full = remaining_after_fit < 0.1 * np.max(bins_remain_cap) # or < item/2 if you have a known reasonable upper bound of item size, avoids creating many near-full bins. Original paper use 0.
    priorities[too_full & feasible_bins] = -np.inf

    # 3. Fill Ratio: Calculate the fill ratio if the item is added
    fill_ratio = item / bins_remain_cap[feasible_bins & ~too_full]

    # 4. Score based on fill_ratio and remaining after fit. The idea is to prioritize to fully use the bin without making it over-full.
    priorities[feasible_bins & ~too_full] = fill_ratio + 0.01 * remaining_after_fit[feasible_bins & ~too_full]/np.max(bins_remain_cap)
    return priorities
```
