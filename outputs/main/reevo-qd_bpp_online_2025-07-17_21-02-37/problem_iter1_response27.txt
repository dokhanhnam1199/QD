```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Can the item fit in the bin?
    feasible = bins_remain_cap >= item
    priorities[~feasible] = -np.inf  # Make infeasible bins have very low priority

    # 2. Remaining Capacity: Prioritize bins with less remaining capacity after placing the item, 
    #    but only for feasible bins
    remaining_capacity = bins_remain_cap - item
    priorities[feasible] = -remaining_capacity[feasible]  # Minimize remaining capacity

    # 3. Fill percentage: Give a boost to bins that will be filled nicely.
    fill_percentage = (bins_remain_cap - remaining_capacity) / 1.0  # Assuming bin capacity is 1
    
    # 4. Bonus for bins close to full.
    close_to_full = (fill_percentage > 0.75) & feasible  
    priorities[close_to_full] += 10  

    # 5. If no bin has space give a slight preference to bins that were most full
    if np.all(priorities == -np.inf):
        priorities = bins_remain_cap
        priorities = -priorities
    
    return priorities
```
