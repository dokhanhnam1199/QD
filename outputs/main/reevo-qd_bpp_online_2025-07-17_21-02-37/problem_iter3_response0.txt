```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Reward tight fits based on remaining capacity, but prevent division by zero
        remaining_capacity = bins_remain_cap[can_fit] - item
        priorities[can_fit] = 1.0 / (remaining_capacity + 0.0001)  # Invert remaining capacity

        # Penalize empty bins (high remaining capacity) unless the item is large
        empty_bin_indices = np.where(bins_remain_cap == np.max(bins_remain_cap))[0]
        empty_and_fits = np.intersect1d(np.where(can_fit)[0], empty_bin_indices)

        if item <= 0.6 * np.max(bins_remain_cap):  # Adjust threshold slightly
            priorities[empty_and_fits] -= 0.5  # Reduce priority, not eliminate

        # Add a small amount of randomness to encourage exploration
        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.01

    else:
        # If no bin can fit, heavily penalize all existing bins to encourage a new bin.
        priorities[:] = -100.0  # Extreme penalty to discourage use.

    return priorities
```
