```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Can the item fit in the bin?
    feasible = bins_remain_cap >= item
    priorities[~feasible] = -np.inf  # Make infeasible bins have very low priority

    # 2. Minimize Waste (Remaining Capacity): Prioritize bins with less remaining capacity after placing the item,
    #    but only for feasible bins. Add a small constant to avoid division by zero in the next step.
    remaining_capacity = bins_remain_cap - item
    priorities[feasible] = -remaining_capacity[feasible]

    # 3. Fill Percentage: Reward bins that will be filled nicely (high fill percentage).
    fill_percentage = (bins_remain_cap - remaining_capacity) / 1.0  # Assuming bin capacity is 1

    # 4. Bonus for Bins Close to Full: Heavily prioritize bins that will be almost full after adding the item.
    close_to_full = (fill_percentage > 0.75) & feasible
    priorities[close_to_full] += 100  # Large bonus to prioritize filling bins near full.
    
    # 5. Slight bonus for bins that were already somewhat full.
    somewhat_full = (fill_percentage > 0.25) & feasible # Only above a certain threshold
    priorities[somewhat_full] += fill_percentage[somewhat_full] * 10

    # 6. Handle No-Fit Scenario: If no bin can fit, slightly prefer bins with larger remaining capacity
    #    (to reduce the number of new bins opened later).
    if np.all(priorities == -np.inf):
        priorities = bins_remain_cap #Give the smaller bins negative value, so larger bins can be chosen first.
        priorities = -priorities # Invert to prioritize larger remaining capacity (less negative)

    return priorities
```
