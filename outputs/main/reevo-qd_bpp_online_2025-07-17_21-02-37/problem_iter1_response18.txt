```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign high priority to bins that can fit the item with minimal waste
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):  # Check if any bin can fit the item
        waste = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (waste + 0.00001) # high priority when waste is low (avoid zero division)

        # Prioritize bins closer to item size (First-Fit Decreasing inspired)
        priorities[fit_mask] += (bins_remain_cap[fit_mask] - item) / np.max(bins_remain_cap) 

    # Give bins close to full a negative priority if item doesn't fit (try to fill new bins)
    almost_full = (bins_remain_cap > 0) & (bins_remain_cap < item)
    priorities[almost_full] = -1 * (item - bins_remain_cap[almost_full])  # Give negative priority if bin is not useful

    # Very low priority for empty/zero bins (to avoid useless computation if no bins work)
    empty_bins = bins_remain_cap == 0
    priorities[empty_bins] = -1000 #very small number

    return priorities
```
