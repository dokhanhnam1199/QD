```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Base priority for bins that can fit
        priorities[can_fit] = 1.0

        # Calculate remaining capacity after placing the item
        remaining_after_placement = bins_remain_cap[can_fit] - item

        # Prioritize tighter fits, stronger reward, and prevent division by zero
        priorities[can_fit] += 5.0 / (remaining_after_placement + 0.001)

        # Bonus for bins that become nearly full after placing the item (reduces fragmentation), stronger reward. Window adjusted.
        nearly_full = (remaining_after_placement >= 0) & (remaining_after_placement <= 0.1 * np.max(bins_remain_cap))
        priorities[can_fit][nearly_full] += 10.0

        # Discourage using empty bins unless the item is very large relative to bin size. Stronger penalty. Adaptive threshold.
        empty_bin_indices = np.where(bins_remain_cap == np.max(bins_remain_cap))[0]  # Assuming initial capacity is max.
        empty_and_fits = np.intersect1d(np.where(can_fit)[0], empty_bin_indices)

        max_bin_cap = np.max(bins_remain_cap)

        if item <= 0.3 * max_bin_cap:
            priorities[empty_and_fits] -= 7.0  # Stronger discouragement
        elif item <= 0.6 * max_bin_cap:
            priorities[empty_and_fits] -= 2.0 #moderate discouragement
        elif len(empty_and_fits) > 0:
            priorities[empty_and_fits] += 1.0 # encourage if item is large and fits in an empty bin

        # Add small random value to break ties, only when needed.
        if np.sum(can_fit) > 1:
             priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.01 # Smaller randomness

    else:
        # No bin can fit the item. Assign very low priority.
        priorities[:] = -10.0

    #Penalize bins with larger remaining capacity, but less strongly than rewards.  Reduced Penalty
    priorities -= 0.0001 * bins_remain_cap

    return priorities
```
