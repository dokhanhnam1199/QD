```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # First-Fit Decreasing inspired: Prefer bins that can accommodate the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Fill the almost full bins first, but only if it fits
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap < 2 * item)  #Try to fill bins nearing capacity, but that can still fit the item.
    priorities[almost_full] += 2 # Give them higher priority than just bins that can fit.

    # Avoid bins with very little remaining capacity after placing the item, unless its the ONLY bin that can fit
    too_small = (bins_remain_cap - item) < 0.1 #if only 10% left.
    only_option = (can_fit.sum() ==1) & can_fit  # make it so its okay to have only 10% remain, but only if only ONE can fit
    too_small = too_small & (~only_option) # avoid almost full bins ONLY if not the ONLY option

    priorities[too_small] -= 10  # Very negative to really discourage using them, as long as not the ONLY one that will work.
    

    # Prefer to use bins with largest capacity
    priorities += bins_remain_cap / bins_remain_cap.max() #normalizes to value between 0-1. Helps diversify bins used

    #Normalize so priorities cant be negative.
    min_prio = priorities.min()
    priorities -= min_prio

    return priorities
```
