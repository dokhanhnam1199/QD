{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can fit the item\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        # Base priority for bins that can fit\n        priorities[can_fit] = 1.0\n\n        # Calculate remaining capacity after placing the item\n        remaining_after_placement = bins_remain_cap[can_fit] - item\n\n        # Prioritize tighter fits, stronger reward\n        priorities[can_fit] += 5.0 / (remaining_after_placement + 0.01*np.mean(bins_remain_cap))\n\n        # Bonus for bins that become nearly full after placing the item (reduces fragmentation), stronger reward. Window adjusted.\n        nearly_full = (remaining_after_placement >= 0) & (remaining_after_placement <= 0.1 * np.max(bins_remain_cap))\n        priorities[can_fit][nearly_full] += 10.0\n\n        # Discourage using empty bins unless the item is very large relative to bin size. Stronger penalty. Adaptive threshold.\n        empty_bin_indices = np.where(bins_remain_cap == np.max(bins_remain_cap))[0]  # Assuming initial capacity is max.\n        empty_and_fits = np.intersect1d(np.where(can_fit)[0], empty_bin_indices)\n\n        if item <= 0.4 * np.max(bins_remain_cap):\n            priorities[empty_and_fits] -= 5.0  # Stronger discouragement\n        elif len(empty_and_fits) > 0:\n            priorities[empty_and_fits] += 1.0 # encourage if item is large and fits in an empty bin\n\n        # Add small value to break ties, only when needed. Smaller randomness\n        \n        max_priority = np.max(priorities[can_fit])\n        close_to_max = np.isclose(priorities[can_fit], max_priority)\n        if np.sum(close_to_max) > 1:\n\n            priorities[can_fit][close_to_max] += np.random.rand(np.sum(close_to_max)) * 0.001 # Smaller randomness\n\n    else:\n        # No bin can fit the item. Assign very low priority.\n        priorities[:] = -10.0\n\n    # Adaptive penalty for larger remaining capacities, focusing on variance reduction.  Stronger at lower capacities.\n    mean_cap = np.mean(bins_remain_cap)\n    penalty_strength = 0.001 * (1 + mean_cap / (bins_remain_cap + 1e-9)) # Increased sensitivity at lower remaining capacity.\n    priorities -= penalty_strength * bins_remain_cap\n\n\n    return priorities\n\n[Reflection]\nThe better code uses explicit rules, adaptive thresholds, and prioritized tighter fits, fragmentation reduction, and empty bin handling.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}