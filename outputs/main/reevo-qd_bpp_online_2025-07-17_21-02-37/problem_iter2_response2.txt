```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority for snug fits (item fits well with minimal waste)
    snug_fit = (bins_remain_cap >= item) & (bins_remain_cap <= 1.1 * item)
    priorities[snug_fit] += 20

    # Moderate priority for bins with enough space to avoid small fragments
    enough_space = (bins_remain_cap >= item) & (bins_remain_cap >= 0.3)
    priorities[enough_space] += 5

    # Penalize bins where the item barely fits, promoting better distribution
    barely_fits = (bins_remain_cap >= item) & (bins_remain_cap <= 1.01 * item)
    priorities[barely_fits] -= 5

    # Stricter penalty for bins that are almost full to encourage using new bins
    almost_full = bins_remain_cap < 0.9
    priorities[almost_full] -= (1 - bins_remain_cap[almost_full]) * 20

    # Discourage using relatively empty bins, especially if better fits exist
    relatively_empty = (bins_remain_cap >= item) & (bins_remain_cap >= 0.7)
    priorities[relatively_empty] -= bins_remain_cap[relatively_empty] * 0.05

    # Completely disqualify bins that cannot fit the item
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = -np.inf

    return priorities
```
