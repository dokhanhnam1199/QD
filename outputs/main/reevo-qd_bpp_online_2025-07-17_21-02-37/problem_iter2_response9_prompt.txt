{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Give a high priority to bins that can fit the item snugly\n    fit_snugly = (bins_remain_cap >= item) & (bins_remain_cap <= 1.2 * item)\n    priorities[fit_snugly] += 10  # Significant boost for snug fits\n    \n    # Prioritize bins that have enough space to avoid fragmentation\n    enough_space = (bins_remain_cap >= item) & (bins_remain_cap >= 0.5)  # Avoid small fragments\n    priorities[enough_space] += 5  # Moderate boost for enough space\n\n    # Penalize bins where the item barely fits\n    barely_fits = (bins_remain_cap >= item) & (bins_remain_cap < 1.01 * item)\n    priorities[barely_fits] -= 2  # Slight penalty\n\n    # Penalize bins which are already quite full\n    full_bins = bins_remain_cap < 0.95\n    priorities[full_bins] -= (1 - bins_remain_cap[full_bins]) * 10 #More penalty on the bins more closer to the full\n\n    # Avoid bins that are too empty if we can avoid it\n    empty_ish = (bins_remain_cap >= item) & (bins_remain_cap >= 0.8)\n    priorities[empty_ish] += bins_remain_cap[empty_ish] * 0.1\n\n    # Disqualify bins that cannot fit the item\n    cannot_fit = bins_remain_cap < item\n    priorities[cannot_fit] = -np.inf\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing inspired heuristic: prioritize bins that can fit the item,\n    # but among those, prefer bins with less remaining capacity. This tries to\n    # fill bins before opening new ones.\n\n    # Very large number so it goes to the end if it can't fit\n    penalty = 1e9\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Give a priority based on how well the item fits (lower remaining capacity after insertion is better).\n            # Add a small constant to ensure positive values and avoid division by zero.\n            priorities[i] = 1.0 / (cap - item + 0.0001)  # Higher priority for smaller remaining space\n        else:\n            priorities[i] = -penalty # Very Low Priority\n    return priorities\n\n[Reflection]\nSimplicity and direct optimization towards filling bins are key. Avoid complex rules and prioritize tighter fits.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}