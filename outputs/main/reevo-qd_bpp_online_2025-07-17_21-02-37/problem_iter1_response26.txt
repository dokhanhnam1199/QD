```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Prioritize bins that can fit the item
            space_waste = cap - item
            # Prioritize bins with less space waste (First-Fit Decreasing inspired)
            priorities[i] = 1 / (space_waste + 1e-6)  # Adding a small constant to avoid division by zero
            # Prioritize bins that are fuller (Almost-Full strategy)
            priorities[i] += (1 - cap / np.max(bins_remain_cap))  # Bias towards fuller bins relative to fullest bin
        else:
            # Very negative priority if item doesn't fit.
            priorities[i] = -1e9  # Very low priority for bins that can't fit
    return priorities
```
