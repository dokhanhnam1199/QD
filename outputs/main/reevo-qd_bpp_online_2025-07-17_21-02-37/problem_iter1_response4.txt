```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic adaptation: prioritize bins that can fit the item
    # and have the least remaining capacity after placing the item.  If no bin can fit the item, then return 0
    
    # Assign a base priority if the bin can fit the item
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):  # at least one bin can fit
        priorities[can_fit] = 1.0  # Base priority

        # Prioritize bins with smaller remaining capacity after placement
        remaining_after_placement = bins_remain_cap[can_fit] - item
        priorities[can_fit] += 1.0 / (remaining_after_placement + 1e-9)  # Avoid division by zero

        # Bonus for near-perfect fit (reduces fragmentation)
        near_perfect_fit = (remaining_after_placement >= 0) & (remaining_after_placement <= 0.1 * np.max(bins_remain_cap))
        priorities[can_fit][near_perfect_fit] += 2.0
        
    else:
        # if no bins can fit return a small value that makes it be last
        priorities[:] = -1.0

    return priorities
```
