{
     "algorithm": "This algorithm constructs a heuristic matrix by assigning higher probabilities to shorter distances based on an inverse power law, adjusted by a global scaling factor.",
     "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm constructs a heuristic matrix by assigning higher probabilities to shorter distances based on an inverse power law, adjusted by a global scaling factor.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Apply inverse power law to the distances\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = distance_matrix[i, j]\n            # Inverse power law with exponent 2\n            if distance > 0:\n              heuristics_matrix[i, j] = 1.0 / (distance**2)\n              heuristics_matrix[j, i] = heuristics_matrix[i, j]\n            else:\n              heuristics_matrix[i, j] = np.inf\n              heuristics_matrix[j, i] = np.inf\n\n    # Scale the heuristics matrix to [0, 1]\n    max_heuristic = np.max(heuristics_matrix[np.isfinite(heuristics_matrix)])\n    heuristics_matrix[np.isfinite(heuristics_matrix)] /= max_heuristic\n\n    return heuristics_matrix",
     "objective": 5.90229,
     "other_inf": null
}