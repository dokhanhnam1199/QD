{
     "algorithm": "This algorithm prioritizes edges that appear in shorter tours found by a simplified local search, weighting edges inversely proportional to the tour length and directly proportional to their frequency.",
     "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm prioritizes edges that appear in shorter tours found by a simplified local search, weighting edges inversely proportional to the tour length and directly proportional to their frequency.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n    edge_weights = np.zeros_like(distance_matrix, dtype=float)\n    num_samples = 50\n    neighborhood_size = 10\n\n    for _ in range(num_samples):\n        # Generate a random initial tour\n        nodes = list(range(n))\n        np.random.shuffle(nodes)\n        tour = nodes + [nodes[0]]\n\n        # Simplified 2-opt local search\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, n - 1):\n                for j in range(i + 2, n + 1):\n                    if j - i == 1: continue # ensures edges are distinct\n                    current_distance = distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j-1], tour[j]]\n                    new_distance = distance_matrix[tour[i-1], tour[j-1]] + distance_matrix[tour[i], tour[j]]\n                    if new_distance < current_distance:\n                        tour[i:j] = reversed(tour[i:j])\n                        improved = True\n\n        # Calculate tour length\n        tour_length = 0\n        for i in range(n):\n            tour_length += distance_matrix[tour[i], tour[i+1]]\n\n        # Update edge weights based on tour length and edge frequency\n        for i in range(n):\n            node1 = tour[i]\n            node2 = tour[i+1]\n            edge_weights[node1, node2] += 1 / tour_length\n            edge_weights[node2, node1] += 1 / tour_length\n\n    # Normalize edge weights to create the heuristics matrix\n    max_weight = np.max(edge_weights)\n    if max_weight > 0:\n        heuristics_matrix = edge_weights / max_weight\n    else:\n        heuristics_matrix = np.ones_like(distance_matrix) / n # Avoid division by zero\n\n    return heuristics_matrix",
     "objective": 5.75163,
     "other_inf": null
}