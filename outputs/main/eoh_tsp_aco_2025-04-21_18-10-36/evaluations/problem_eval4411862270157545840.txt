import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs multiple tours using a weighted combination of greedy and random node selection, then updates a heuristic matrix by reinforcing edges present in shorter tours while penalizing edges in longer ones, thereby adaptively learning edge importance.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix)
    num_tours = 50
    greediness = 0.7  # Adjust for greedy vs. random balance
    learning_rate = 0.1  # Adjust for heuristic update strength

    for _ in range(num_tours):
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]
        tour_length = 0

        while unvisited_nodes:
            candidates = list(unvisited_nodes)
            probabilities = []

            for neighbor in candidates:
                distance = distance_matrix[current_node, neighbor]
                heuristic = heuristics_matrix[current_node, neighbor]

                # Weighted combination of greedy and random selection
                probability = (greediness * (heuristic / distance) + (1 - greediness) * (1 / len(candidates)))
                probabilities.append(probability)

            probabilities = np.array(probabilities)
            probabilities /= np.sum(probabilities)
            next_node = np.random.choice(candidates, p=probabilities)

            tour.append(next_node)
            tour_length += distance_matrix[current_node, next_node]
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour.append(tour[0])
        tour_length += distance_matrix[current_node, tour[0]]

        # Update heuristic matrix: reward edges in short tours, penalize in long ones
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += learning_rate / tour_length
            heuristics_matrix[node2, node1] += learning_rate / tour_length
            
    return heuristics_matrix
