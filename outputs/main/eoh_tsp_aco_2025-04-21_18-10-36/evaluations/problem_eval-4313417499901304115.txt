import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively samples random tours, evaluates their lengths, and updates a heuristic matrix that favors edges frequently present in short tours, normalized by their length.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000  # Number of tour samples

    for _ in range(num_iterations):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to starting node

        # Calculate tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i + 1]]

        # Update heuristic matrix based on tour quality
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i + 1]
            heuristics_matrix[node1, node2] += (1 / tour_length)
            heuristics_matrix[node2, node1] += (1 / tour_length) # Ensure symmetry

    return heuristics_matrix
