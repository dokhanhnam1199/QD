import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by applying a kernel density estimation (KDE) on the distances, favoring shorter distances with higher density estimates as promising edge indicators.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Apply kernel density estimation to the distances
    for i in range(n):
        for j in range(i + 1, n):
            distance = distance_matrix[i, j]
            # Gaussian kernel with bandwidth proportional to the mean distance
            bandwidth = np.mean(distance_matrix) / 5 #Adjusted bandwidth 
            kde_value = np.exp(-0.5 * (distance / bandwidth)**2)
            heuristics_matrix[i, j] = kde_value
            heuristics_matrix[j, i] = kde_value

    return heuristics_matrix
