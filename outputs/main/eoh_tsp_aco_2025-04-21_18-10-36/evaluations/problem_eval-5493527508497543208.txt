import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively refines a heuristic matrix by favoring edges present in high-quality tours constructed using a combination of a greedy approach and random swaps to escape local optima.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix)  # Initialize with equal probabilities
    num_iterations = 50
    num_neighbors = 10

    for iteration in range(num_iterations):
        for start_node in range(n):
            # Greedy tour construction
            current_node = start_node
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(start_node)
            tour = [start_node]
            tour_length = 0

            while unvisited_nodes:
                # Heuristic-biased nearest neighbor selection
                probabilities = []
                candidates = list(unvisited_nodes)
                for neighbor in candidates:
                    heuristic = heuristics_matrix[current_node, neighbor]
                    distance = distance_matrix[current_node, neighbor]
                    probabilities.append(heuristic / distance)
                probabilities = np.array(probabilities)
                probabilities /= np.sum(probabilities)
                next_node = np.random.choice(candidates, p=probabilities)

                tour.append(next_node)
                tour_length += distance_matrix[current_node, next_node]
                unvisited_nodes.remove(next_node)
                current_node = next_node

            tour.append(start_node)
            tour_length += distance_matrix[current_node, start_node]

            # Random swap neighborhood search
            for _ in range(num_neighbors):
                i, j = np.random.choice(range(1, n), 2, replace=False)  # Avoid swapping start node
                new_tour = tour[:]
                new_tour[i], new_tour[j] = new_tour[j], new_tour[i]

                new_tour_length = 0
                for k in range(n):
                    new_tour_length += distance_matrix[new_tour[k], new_tour[k+1]]

                if new_tour_length < tour_length:
                    tour = new_tour
                    tour_length = new_tour_length
            
            # Update heuristic matrix based on the tour
            for i in range(n):
                node1 = tour[i]
                node2 = tour[i+1]
                heuristics_matrix[node1, node2] += 1.0 / tour_length
                heuristics_matrix[node2, node1] += 1.0 / tour_length

    return heuristics_matrix
