import numpy as np

def heuristics_v3(distance_matrix):
  """{This algorithm combines inverse distance with edge appearance frequency in near-optimal solutions found through iterative local search to guide edge selection.}"""
  n = distance_matrix.shape[0]
  num_samples = 500
  edge_counts = np.zeros_like(distance_matrix)

  def two_opt_swap(tour, i, k):
      new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
      return new_tour

  def tour_cost(tour):
      cost = 0
      for i in range(n):
          cost += distance_matrix[tour[i], tour[(i + 1) % n]]
      return cost

  for _ in range(num_samples):
    # Generate a random initial tour
    tour = list(np.random.permutation(n))
    
    # Perform 2-opt local search
    improved = True
    while improved:
      improved = False
      for i in range(n):
        for k in range(i + 2, n):
          new_tour = two_opt_swap(tour, i, k)
          if tour_cost(new_tour) < tour_cost(tour):
            tour = new_tour
            improved = True
            break
        if improved:
          break

    # Update edge counts based on the resulting tour
    for i in range(n):
      u = tour[i]
      v = tour[(i + 1) % n]
      edge_counts[u, v] += 1
      edge_counts[v, u] += 1

  edge_frequencies = edge_counts / num_samples
  inverse_distances = 1.0 / (distance_matrix + 1e-9)  # Avoid division by zero
  heuristics_matrix = edge_frequencies * inverse_distances
  return heuristics_matrix
