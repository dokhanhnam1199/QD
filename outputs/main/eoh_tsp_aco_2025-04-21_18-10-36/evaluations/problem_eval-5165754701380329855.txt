import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple nearest-neighbor tours from each city and averages the inverse of the edge distances used across all tours to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 10

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for start_node in range(n):
        for _ in range(num_samples):
            current_node = start_node
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(start_node)
            path = [start_node]

            while unvisited_nodes:
                distances = np.array([distance_matrix[current_node, neighbor] for neighbor in unvisited_nodes])
                next_node = list(unvisited_nodes)[np.argmin(distances)]

                path.append(next_node)
                unvisited_nodes.remove(next_node)
                current_node = next_node

            path.append(start_node)

            for i in range(n):
                node1 = path[i]
                node2 = path[i+1]
                heuristics_matrix[node1, node2] += 1 / distance_matrix[node1, node2]
                heuristics_matrix[node2, node1] += 1 / distance_matrix[node2, node1]

    heuristics_matrix /= (n * num_samples)
    return heuristics_matrix
