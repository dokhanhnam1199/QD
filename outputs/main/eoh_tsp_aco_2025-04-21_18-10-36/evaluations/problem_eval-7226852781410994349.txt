import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a weighted sum of edge frequency in short tours and inverse distance to create a heuristic matrix, biasing towards frequent and short edges.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    edge_counts = np.zeros_like(distance_matrix, dtype=int)
    num_samples = 50
    
    # Weight for combining frequency and inverse distance
    frequency_weight = 0.7
    distance_weight = 0.3

    for _ in range(num_samples):
        # Generate a random initial tour
        nodes = list(range(n))
        np.random.shuffle(nodes)
        tour = nodes + [nodes[0]]

        # Simplified 2-opt local search
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for j in range(i + 2, n + 1):
                    if j - i == 1: continue # ensures edges are distinct
                    current_distance = distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j-1], tour[j]]
                    new_distance = distance_matrix[tour[i-1], tour[j-1]] + distance_matrix[tour[i], tour[j]]
                    if new_distance < current_distance:
                        tour[i:j] = reversed(tour[i:j])
                        improved = True

        # Update edge counts based on the improved tour
        tour_length = 0
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            edge_counts[node1, node2] += 1
            edge_counts[node2, node1] += 1
            tour_length += distance_matrix[node1, node2]

    # Normalize edge counts
    max_count = np.max(edge_counts)
    if max_count > 0:
        normalized_counts = edge_counts / max_count
    else:
        normalized_counts = np.ones_like(distance_matrix) / n

    # Combine frequency and inverse distance
    for i in range(n):
        for j in range(i + 1, n):
            if distance_matrix[i, j] > 0:
                heuristics_matrix[i, j] = (frequency_weight * normalized_counts[i, j]) + (distance_weight / distance_matrix[i, j])
                heuristics_matrix[j, i] = heuristics_matrix[i, j]
            else:
                heuristics_matrix[i, j] = 0  # Avoid division by zero for zero-distance edges
                heuristics_matrix[j, i] = 0

    return heuristics_matrix
