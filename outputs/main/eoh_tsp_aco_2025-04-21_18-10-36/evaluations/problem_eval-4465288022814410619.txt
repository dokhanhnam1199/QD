import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm iteratively refines a heuristic matrix by favoring edges frequently used in short paths between randomly chosen node pairs, gradually converging towards edges likely to be in the optimal TSP tour.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float) 

    num_iterations = 10
    num_paths = 10

    for _ in range(num_iterations):
        for _ in range(num_paths):
            start_node = np.random.randint(n)
            end_node = np.random.randint(n)

            # Find a short path between start and end using Dijkstra-like approach based on heuristics
            unvisited = set(range(n))
            distances = {node: float('inf') for node in range(n)}
            distances[start_node] = 0
            previous = {node: None for node in range(n)}

            while unvisited:
                current_node = min(unvisited, key=distances.get)
                if distances[current_node] == float('inf'):
                    break 
                unvisited.remove(current_node)

                for neighbor in range(n):
                    if neighbor != current_node:
                        alternative_distance = distances[current_node] + distance_matrix[current_node, neighbor] / heuristics_matrix[current_node, neighbor]
                        if alternative_distance < distances[neighbor]:
                            distances[neighbor] = alternative_distance
                            previous[neighbor] = current_node

            # Reconstruct the path
            path = []
            current = end_node
            while current is not None:
                path.insert(0, current)
                current = previous[current]

            # Update heuristics: boost edges in the path
            if len(path) > 1:
                for i in range(len(path) - 1):
                    node1 = path[i]
                    node2 = path[i+1]
                    heuristics_matrix[node1, node2] += 0.1
                    heuristics_matrix[node2, node1] += 0.1

    return heuristics_matrix
