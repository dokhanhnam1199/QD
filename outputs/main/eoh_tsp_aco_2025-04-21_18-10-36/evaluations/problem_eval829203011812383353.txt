import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively samples random tours, evaluates their lengths, and updates a heuristic matrix that favors edges present in shorter tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        
        # Calculate the tour length
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[n-1], tour[0]]
        
        # Update the heuristics matrix: edges in shorter tours get higher scores
        if tour_length > 0:  # Avoid division by zero
            weight = 1.0 / tour_length  # Higher weight for shorter tours
            for i in range(n - 1):
                heuristics_matrix[tour[i], tour[i+1]] += weight
                heuristics_matrix[tour[i+1], tour[i]] += weight #make symmetric
            heuristics_matrix[tour[n-1], tour[0]] += weight
            heuristics_matrix[tour[0], tour[n-1]] += weight #make symmetric

    return heuristics_matrix
