import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple tours using a greedy approach guided by a weighted combination of distance and a learned edge importance, updating edge importance based on tour performance, with adaptive alpha and stochastic edge selection.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    edge_importance = np.ones_like(distance_matrix)
    alpha = 0.5
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(current_node)
        tour = [current_node]
        total_distance = 0

        while unvisited:
            probabilities = np.zeros(n)
            for neighbor in unvisited:
                cost = alpha * distance_matrix[current_node, neighbor] - (1 - alpha) * edge_importance[current_node, neighbor]
                probabilities[neighbor] = np.exp(-cost)  # Convert cost to probability-like value

            probabilities /= np.sum(probabilities) # Normalize to create valid probabilities

            #Stochastic Selection
            nearest_neighbor = np.random.choice(n, p=probabilities)
            if nearest_neighbor not in unvisited:
                available_neighbors = list(unvisited)
                nearest_neighbor = available_neighbors[np.argmin([distance_matrix[current_node,neighbor] for neighbor in available_neighbors])]



            tour.append(nearest_neighbor)
            total_distance += distance_matrix[current_node, nearest_neighbor]
            current_node = nearest_neighbor
            unvisited.remove(current_node)

        total_distance += distance_matrix[current_node, start_node]
        tour.append(start_node)

        # Update edge importance based on tour length
        reward = 1 / total_distance
        for i in range(n):
            edge_importance[tour[i], tour[(i + 1) % n]] += reward
            edge_importance[tour[(i + 1) % n], tour[i]] += reward

        # Update heuristics matrix
        for i in range(n):
            heuristics_matrix[tour[i], tour[(i + 1) % n]] += 1
            heuristics_matrix[tour[(i + 1) % n], tour[i]] += 1

        alpha = min(1, alpha * 1.01) #Adaptively change alpha

    heuristics_matrix /= num_samples
    return heuristics_matrix
