import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple random tours, evaluates their lengths, and assigns higher probabilities to edges that appear in shorter tours, ultimately creating a heuristics matrix representing the likelihood of each edge being part of an optimal solution.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[n-1], tour[0]]

        # Assign higher probabilities to edges in shorter tours
        if tour_length > 0:  # Avoid division by zero
            weight = 1.0 / tour_length
        else:
            weight = 1.0
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += weight
            heuristics_matrix[tour[i+1], tour[i]] += weight
        heuristics_matrix[tour[n-1], tour[0]] += weight
        heuristics_matrix[tour[0], tour[n-1]] += weight

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
