import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a greedy approach with random restarts, employing a stochastic acceptance criterion based on tour length to update edge frequencies.}"""
    n = distance_matrix.shape[0]
    num_restarts = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    temperature = 10.0  # Parameter for stochastic acceptance

    for _ in range(num_restarts):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        tour = [start_node]

        tour_distance = 0.0
        while unvisited_nodes:
            nearest_neighbor = -1
            min_distance = np.inf
            for neighbor in unvisited_nodes:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor

            tour.append(nearest_neighbor)
            tour_distance += distance_matrix[current_node, nearest_neighbor]
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor
            
        # Complete the tour by returning to the start
        tour.append(start_node)
        tour_distance += distance_matrix[current_node, start_node]

        # Stochastic acceptance based on tour length (shorter tours are more likely to update)
        probability = np.exp(-tour_distance / temperature)
        if np.random.rand() < probability:
            # Update heuristics matrix
            for i in range(n):
                heuristics_matrix[tour[i], tour[i+1]] += 1
                heuristics_matrix[tour[i+1], tour[i]] += 1

    heuristics_matrix /= np.sum(heuristics_matrix)
    return heuristics_matrix
