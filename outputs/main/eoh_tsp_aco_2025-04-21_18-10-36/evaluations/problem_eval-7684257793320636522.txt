import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines random path sampling with local search to iteratively improve path quality and generate a heuristics matrix based on edge occurrence in sampled paths.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    num_iterations = 50
    local_search_iterations = 10

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    def random_path(start_node):
        nodes = list(range(n))
        nodes.remove(start_node)
        np.random.shuffle(nodes)
        path = [start_node] + nodes + [start_node]
        return path

    def path_length(path):
        length = 0
        for i in range(len(path) - 1):
            length += distance_matrix[path[i], path[i+1]]
        return length
    
    def two_opt_swap(path, i, k):
        new_path = path[:i] + path[i:k+1][::-1] + path[k+1:]
        return new_path

    def local_search(path):
        best_path = path
        best_length = path_length(path)
        
        for _ in range(local_search_iterations):
            improved = False
            for i in range(1, len(path) - 2):
                for k in range(i + 1, len(path) - 1):
                    new_path = two_opt_swap(path, i, k)
                    new_length = path_length(new_path)
                    if new_length < best_length:
                        best_path = new_path
                        best_length = new_length
                        path = new_path
                        improved = True
            if not improved:
                break
        return best_path

    for _ in range(num_iterations):
        sampled_paths = []
        for _ in range(num_samples):
            start_node = np.random.randint(n)
            path = random_path(start_node)
            path = local_search(path)
            sampled_paths.append(path)
        
        for path in sampled_paths:
            for i in range(len(path) - 1):
                node1 = path[i]
                node2 = path[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
