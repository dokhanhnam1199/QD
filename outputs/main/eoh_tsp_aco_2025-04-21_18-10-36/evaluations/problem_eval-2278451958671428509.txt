import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs multiple TSP solutions using a greedy approach with a biased random selection of the next node based on distance, then averages the edge usage across these samples to create a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(current_node)
        tour = [current_node]
        
        while unvisited:
            probabilities = np.zeros(n)
            for neighbor in unvisited:
                probabilities[neighbor] = 1 / distance_matrix[current_node, neighbor]  # Bias towards closer nodes

            probabilities /= np.sum(probabilities[list(unvisited)]) # Normalize to probabilities

            next_node = np.random.choice(list(unvisited), p=probabilities[list(unvisited)])

            tour.append(next_node)
            current_node = next_node
            unvisited.remove(current_node)

        tour.append(start_node)

        # Update heuristics matrix
        for i in range(n):
            heuristics_matrix[tour[i], tour[(i + 1) % n]] += 1
            heuristics_matrix[tour[(i + 1) % n], tour[i]] += 1 #Ensure symmetry

    heuristics_matrix /= num_samples

    return heuristics_matrix
