import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple near-greedy solutions to the TSP, and averages the edge usage across these solutions to produce a heuristic matrix favoring frequently used edges.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            nearest_neighbor = None
            min_distance = float('inf')
            
            # Limit the search to a subset of nodes to avoid truly greedy solutions
            candidate_nodes = np.random.choice(list(unvisited_nodes), size=min(5, len(unvisited_nodes)), replace=False)

            for neighbor in candidate_nodes:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor

            
            path.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor

        path.append(path[0])  # Return to starting node

        # Update heuristics matrix based on edge usage in this path
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
