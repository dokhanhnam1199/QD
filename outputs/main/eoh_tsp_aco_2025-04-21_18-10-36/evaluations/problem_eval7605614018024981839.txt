import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm iteratively refines edge probabilities by combining local search results with a pheromone-inspired reinforcement mechanism, guiding exploration towards promising regions of the solution space.}
    """
    n = distance_matrix.shape[0]
    pheromone = np.ones_like(distance_matrix)
    edge_probabilities = np.ones_like(distance_matrix) / n  # Initialize with uniform probability
    alpha = 0.8
    beta = 1.2
    num_iterations = 50
    num_local_searches = 10

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for iteration in range(num_iterations):
        local_search_results = np.zeros_like(distance_matrix, dtype=int)
        
        for _ in range(num_local_searches):
            start_node = np.random.randint(n)
            tour = [start_node]
            unvisited = set(range(n))
            unvisited.remove(start_node)

            while unvisited:
                current_node = tour[-1]
                probabilities = np.zeros(n)
                for neighbor in unvisited:
                        probabilities[neighbor] = (pheromone[current_node, neighbor]**alpha) * ((1 / (distance_matrix[current_node, neighbor] + 1e-6))**beta) * edge_probabilities[current_node, neighbor]

                if np.sum(probabilities) == 0:
                    next_node = np.random.choice(list(unvisited))
                else:
                    probabilities = probabilities / np.sum(probabilities)
                    next_node = np.random.choice(list(range(n)), p=probabilities)

                if next_node in unvisited:
                    tour.append(next_node)
                    unvisited.remove(next_node)
                else:
                    next_node = np.random.choice(list(unvisited))


            tour.append(tour[0])

            for i in range(n):
                local_search_results[tour[i], tour[i+1]] += 1
                local_search_results[tour[i+1], tour[i]] += 1


        # Update edge probabilities based on local search results
        edge_probabilities = 0.5 * edge_probabilities + 0.5 * (local_search_results / num_local_searches)

        # Pheromone update
        pheromone = (1 - 0.1) * pheromone + 0.1 * edge_probabilities

        # Update heuristics matrix
        heuristics_matrix += edge_probabilities

    return heuristics_matrix
