import numpy as np

def heuristics_v3(distance_matrix):
    """{This algorithm constructs a heuristic matrix by assigning probabilities to shorter distances based on an exponential decay, adjusted by a global scaling factor.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Apply exponential decay to the distances
    for i in range(n):
        for j in range(i + 1, n):
            distance = distance_matrix[i, j]
            # Exponential decay
            if distance > 0:
              heuristics_matrix[i, j] = np.exp(-distance)
              heuristics_matrix[j, i] = heuristics_matrix[i, j]
            else:
              heuristics_matrix[i, j] = np.inf
              heuristics_matrix[j, i] = np.inf

    # Scale the heuristics matrix to [0, 1]
    max_heuristic = np.max(heuristics_matrix[np.isfinite(heuristics_matrix)])
    heuristics_matrix[np.isfinite(heuristics_matrix)] /= max_heuristic

    return heuristics_matrix
