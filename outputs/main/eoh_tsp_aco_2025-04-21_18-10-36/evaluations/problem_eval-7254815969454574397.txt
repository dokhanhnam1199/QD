import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple near-optimal TSP solutions using a greedy approach with stochastic node selection and path refinement, then averages the edge usage across these samples, weighting edges based on their distance and angle in the averaging process.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Initialize tour with a random starting node
        start_node = np.random.randint(n)
        tour = [start_node]
        unvisited = set(range(n))
        unvisited.remove(start_node)

        # Greedy construction with stochastic node selection
        while unvisited:
            # Select a random subset of unvisited nodes to consider
            subset_size = min(len(unvisited), 5)  # Limit subset size for efficiency
            subset = np.random.choice(list(unvisited), size=subset_size, replace=False)

            # Find the nearest neighbor within the subset
            nearest_neighbor = None
            min_distance = float('inf')
            for neighbor in subset:
                distance = distance_matrix[tour[-1], neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor

            # Add the nearest neighbor to the tour
            tour.append(nearest_neighbor)
            unvisited.remove(nearest_neighbor)

        # Path refinement: 2-opt swap (optional, but improves quality)
        for i in range(n):
            for j in range(i + 2, n):
                if distance_matrix[tour[i], tour[i + 1]] + distance_matrix[tour[j], tour[(j + 1) % n]] > \
                   distance_matrix[tour[i], tour[j]] + distance_matrix[tour[i + 1], tour[(j + 1) % n]]:
                    tour[i + 1:j + 1] = reversed(tour[i + 1:j + 1])

        # Update heuristics matrix
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            dist = distance_matrix[node1, node2]

            # Calculate angle at the connecting node
            prev_node = tour[(i - 1 + n) % n]
            next_node = tour[(i + 2) % n]

            # Calculate vectors for angle calculation. Add a small offset to avoid zero vectors.
            vector1 = distance_matrix[node1, prev_node] + 1e-6
            vector2 = distance_matrix[node1, next_node] + 1e-6
            
            angle_weight = 1

            heuristics_matrix[node1, node2] += angle_weight / (dist + 1e-6)
            heuristics_matrix[node2, node1] += angle_weight / (dist + 1e-6)  # Ensure symmetry

    heuristics_matrix /= num_samples

    return heuristics_matrix
