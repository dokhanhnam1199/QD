import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines edge prioritization by incorporating a simulated annealing-inspired acceptance probability based on tour length differences to escape local optima and explore diverse solutions.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    edge_weights = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 50
    neighborhood_size = 10
    initial_temperature = 100
    cooling_rate = 0.95

    for _ in range(num_samples):
        # Generate a random initial tour
        nodes = list(range(n))
        np.random.shuffle(nodes)
        tour = nodes + [nodes[0]]

        # Calculate initial tour length
        current_tour_length = 0
        for i in range(n):
            current_tour_length += distance_matrix[tour[i], tour[i+1]]

        temperature = initial_temperature
        # Simplified 2-opt local search with simulated annealing
        for annealing_step in range(100):
            i = np.random.randint(1, n - 1)
            j = np.random.randint(i + 2, n + 1)
            if j - i == 1: continue # ensures edges are distinct

            new_tour = tour[:]
            new_tour[i:j] = reversed(new_tour[i:j])

            new_tour_length = 0
            for k in range(n):
                new_tour_length += distance_matrix[new_tour[k], new_tour[k+1]]

            delta = new_tour_length - current_tour_length
            
            if delta < 0 or np.random.rand() < np.exp(-delta / temperature):
                tour = new_tour
                current_tour_length = new_tour_length

            temperature *= cooling_rate

        # Update edge weights based on tour length and edge frequency
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            edge_weights[node1, node2] += 1 / current_tour_length
            edge_weights[node2, node1] += 1 / current_tour_length

    # Normalize edge weights to create the heuristics matrix
    max_weight = np.max(edge_weights)
    if max_weight > 0:
        heuristics_matrix = edge_weights / max_weight
    else:
        heuristics_matrix = np.ones_like(distance_matrix) / n # Avoid division by zero

    return heuristics_matrix
