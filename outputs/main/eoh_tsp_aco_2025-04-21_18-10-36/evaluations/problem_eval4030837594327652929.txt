import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm combines the greedy exploration of nearest neighbors with the pheromone update mechanism of ant colony optimization to generate a heuristics matrix.}"""
  n = distance_matrix.shape[0]
  pheromone = np.ones_like(distance_matrix)
  alpha = 0.7
  beta = 1.3
  rho = 0.3
  num_iterations = 50
  num_ants = 5

  heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

  for _ in range(num_iterations):
    for _ in range(num_ants):
      start_node = np.random.randint(n)
      current_node = start_node
      unvisited_nodes = set(range(n))
      unvisited_nodes.remove(start_node)
      tour = [start_node]

      while unvisited_nodes:
        probabilities = np.zeros(n)
        for neighbor in unvisited_nodes:
          probabilities[neighbor] = (pheromone[current_node, neighbor]**alpha) / (distance_matrix[current_node, neighbor]**beta)
        probabilities /= np.sum(probabilities)

        if np.sum(probabilities) == 0:
            next_node = np.random.choice(list(unvisited_nodes))
        else:
            next_node = np.random.choice(n, p=probabilities)

        if next_node not in unvisited_nodes:
            available_nodes = list(unvisited_nodes)
            if len(available_nodes) > 0:
                next_node = available_nodes[0]
            else:
                next_node = tour[0]

        tour.append(next_node)
        unvisited_nodes.remove(next_node)
        current_node = next_node

      tour.append(start_node)

      tour_length = 0
      for i in range(n):
          tour_length += distance_matrix[tour[i], tour[i+1]]

      for i in range(n):
          heuristics_matrix[tour[i], tour[i+1]] += 1/tour_length
          heuristics_matrix[tour[i+1], tour[i]] += 1/tour_length

      delta_pheromone = np.zeros_like(distance_matrix)
      for i in range(n):
        node1 = tour[i]
        node2 = tour[i+1]
        delta_pheromone[node1, node2] += 1/tour_length
        delta_pheromone[node2, node1] += 1/tour_length

      pheromone = (1 - rho) * pheromone + delta_pheromone

  heuristics_matrix /= np.sum(heuristics_matrix)

  return heuristics_matrix
