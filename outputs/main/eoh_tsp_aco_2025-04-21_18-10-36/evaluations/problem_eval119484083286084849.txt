import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a hybrid approach combining ant colony optimization with a nearest neighbor heuristic for path construction and pheromone update based on path quality.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)
    alpha = 0.7  # Pheromone influence
    beta = 2  # Distance influence
    rho = 0.3  # Evaporation rate
    Q = 10  # Pheromone deposit constant
    num_ants = n
    num_iterations = 50

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for iteration in range(num_iterations):
        all_paths = []
        all_path_lengths = []

        for ant in range(num_ants):
            start_node = ant % n
            current_node = start_node
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(start_node)
            path = [start_node]
            path_length = 0

            while unvisited_nodes:
                # Hybrid approach: combine ACO with nearest neighbor
                if np.random.rand() < 0.7:  #70% ACO, 30% Nearest Neighbor
                    probabilities = []
                    candidates = list(unvisited_nodes)
                    for neighbor in candidates:
                        pheromone = pheromone_matrix[current_node, neighbor]
                        distance = distance_matrix[current_node, neighbor]
                        probabilities.append((pheromone**alpha) / (distance**beta))
                    probabilities = np.array(probabilities)
                    probabilities /= np.sum(probabilities)
                    next_node = np.random.choice(candidates, p=probabilities)
                else:
                    # Nearest Neighbor
                    nearest_neighbor = -1
                    min_distance = np.inf
                    for neighbor in unvisited_nodes:
                        distance = distance_matrix[current_node, neighbor]
                        if distance < min_distance:
                            min_distance = distance
                            nearest_neighbor = neighbor
                    next_node = nearest_neighbor

                path.append(next_node)
                path_length += distance_matrix[current_node, next_node]
                unvisited_nodes.remove(next_node)
                current_node = next_node

            path.append(start_node)
            path_length += distance_matrix[current_node, start_node]
            all_paths.append(path)
            all_path_lengths.append(path_length)

        # Pheromone update based on path quality (all paths contribute)
        pheromone_matrix *= (1 - rho)  # Evaporation
        for path, path_length in zip(all_paths, all_path_lengths):
            for i in range(n):
                node1 = path[i]
                node2 = path[i+1]
                pheromone_matrix[node1, node2] += Q / path_length  # Pheromone deposit inversely proportional to path length
                pheromone_matrix[node2, node1] += Q / path_length


    # Aggregate pheromone information into the heuristics matrix
    heuristics_matrix = pheromone_matrix
    return heuristics_matrix
