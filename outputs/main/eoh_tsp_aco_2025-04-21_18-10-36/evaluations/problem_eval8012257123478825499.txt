import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm employs a clustering approach, prioritizing edges within the same cluster and penalizing edges connecting distant clusters to guide the TSP solution towards locally optimal paths.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Perform hierarchical clustering
    from scipy.cluster.hierarchy import linkage, fcluster

    # Use complete linkage for clustering
    linkage_matrix = linkage(distance_matrix, method='complete')

    # Determine the number of clusters based on the average distance
    avg_distance = np.mean(distance_matrix)
    num_clusters = max(2, int(n / 3)) # Adjust the factor (3) to control cluster size, min 2 clusters

    # Assign nodes to clusters
    clusters = fcluster(linkage_matrix, t=num_clusters, criterion='maxclust')

    # Calculate cluster centroids (approximation using node positions)
    cluster_centroids = {}
    for i in range(1, num_clusters + 1):
        cluster_nodes = np.where(clusters == i)[0]
        cluster_centroids[i] = np.mean(cluster_nodes)

    # Define weights for intra-cluster and inter-cluster edges
    intra_cluster_weight = 1.5 # Increased weight for intra-cluster edges
    inter_cluster_weight = 0.5 # Decreased weight for inter-cluster edges

    # Populate the heuristics matrix based on cluster membership and distance
    for i in range(n):
        for j in range(i + 1, n):
            if clusters[i] == clusters[j]:
                heuristics_matrix[i, j] = intra_cluster_weight / (distance_matrix[i, j] + 1e-6) #Adding small value for numerical stability
                heuristics_matrix[j, i] = heuristics_matrix[i, j]
            else:
                # Penalize edges between distant clusters based on centroid distance
                cluster_i = clusters[i]
                cluster_j = clusters[j]
                centroid_distance = abs(cluster_centroids[cluster_i] - cluster_centroids[cluster_j])
                heuristics_matrix[i, j] = inter_cluster_weight / (distance_matrix[i, j] + centroid_distance + 1e-6) #Adding small value for numerical stability
                heuristics_matrix[j, i] = heuristics_matrix[i, j]

    return heuristics_matrix
