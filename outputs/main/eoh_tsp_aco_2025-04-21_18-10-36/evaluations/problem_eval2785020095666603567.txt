import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a large number of random tours, selects the best tours based on length, and then averages the frequency with which each edge appears in these best tours to create a heuristic matrix.}"""
    num_nodes = distance_matrix.shape[0]
    num_samples = 1000  # Number of random tours to generate
    num_best = 100  # Number of best tours to keep

    all_tours = []
    all_tour_lengths = []

    for _ in range(num_samples):
        tour = np.random.permutation(num_nodes)
        tour_length = 0
        for i in range(num_nodes - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]  # Return to starting node

        all_tours.append(tour)
        all_tour_lengths.append(tour_length)

    # Select the best tours
    sorted_indices = np.argsort(all_tour_lengths)
    best_tours = [all_tours[i] for i in sorted_indices[:num_best]]

    # Create heuristic matrix
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    for tour in best_tours:
        for i in range(num_nodes - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1 #Symmetric Matrix
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1  #Symmetric Matrix

    heuristics_matrix /= num_best
    
    return heuristics_matrix
