import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by scaling the inverse of the distance matrix by a factor proportional to the maximum distance, effectively emphasizing shorter distances while still allowing for some consideration of longer edges.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    max_distance = np.max(distance_matrix)

    for i in range(n):
        for j in range(i + 1, n):
            distance = distance_matrix[i, j]
            heuristics_matrix[i, j] = max_distance / (distance + 1e-9)  # Avoid division by zero
            heuristics_matrix[j, i] = heuristics_matrix[i, j]
    return heuristics_matrix
