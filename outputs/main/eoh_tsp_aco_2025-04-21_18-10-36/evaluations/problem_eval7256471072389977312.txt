import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples random tours, and updates a heuristic matrix based on the frequency with which each edge appears in the sampled tours that fall within a percentile of shortest tour lengths.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    sampled_tour_lengths = np.zeros(num_samples)
    sampled_tours = np.zeros((num_samples, n), dtype=int)
    
    for i in range(num_samples):
        tour = np.random.permutation(n)
        sampled_tours[i, :] = tour
        tour_length = 0
        for j in range(n - 1):
            tour_length += distance_matrix[tour[j], tour[j+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        sampled_tour_lengths[i] = tour_length

    percentile = 25
    threshold_length = np.percentile(sampled_tour_lengths, percentile)

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(num_samples):
        if sampled_tour_lengths[i] <= threshold_length:
            tour = sampled_tours[i, :]
            for j in range(n - 1):
                heuristics_matrix[tour[j], tour[j+1]] += 1
                heuristics_matrix[tour[j+1], tour[j]] += 1
            heuristics_matrix[tour[-1], tour[0]] += 1
            heuristics_matrix[tour[0], tour[-1]] += 1

    return heuristics_matrix
