import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving solutions through edge swaps guided by a combination of edge distance and the frequency of edge appearances in locally optimized tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 100
    num_swaps = n // 2

    def calculate_path_length(path):
        length = 0
        for i in range(n):
            length += distance_matrix[path[i], path[(i + 1) % n]]
        return length

    def swap_edges(path, i, j):
        new_path = path[:]
        new_path[i+1:j+1] = reversed(new_path[i+1:j+1])
        return new_path

    for _ in range(num_iterations):
        # Start with a random path
        path = list(np.random.permutation(n))
        original_path = path[:]
        best_path = path[:]
        best_length = calculate_path_length(path)

        # Local search with edge swaps
        for _ in range(num_swaps):
            improved = False
            for i in range(n - 1):
                for j in range(i + 2, n):
                    new_path = swap_edges(path, i, j)
                    new_length = calculate_path_length(new_path)
                    if new_length < best_length:
                        best_length = new_length
                        best_path = new_path[:]
                        path = new_path[:]
                        improved = True
            if not improved:
                break

        # Update heuristics matrix based on the best path found
        for i in range(n):
            node1 = best_path[i]
            node2 = best_path[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    # Incorporate distance information
    heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)
    heuristics_matrix = (1 - heuristics_matrix) + (1 / (1 + distance_matrix))

    return heuristics_matrix
