import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines a heuristic matrix by iteratively constructing tours using a weighted random selection of edges based on a combination of distance and pheromone-like values, then reinforcing edges present in shorter tours while evaporating others.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix)
    alpha = 1  # Influence of pheromone
    beta = 2  # Influence of distance
    rho = 0.1  # Evaporation rate
    Q = 100  # Pheromone deposit constant
    num_iterations = 50
    num_ants = 10

    for iteration in range(num_iterations):
        all_tours = []
        all_tour_lengths = []

        for ant in range(num_ants):
            start_node = np.random.randint(n)
            current_node = start_node
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(start_node)
            tour = [start_node]
            tour_length = 0

            while unvisited_nodes:
                probabilities = []
                candidates = list(unvisited_nodes)
                for neighbor in candidates:
                    pheromone = heuristics_matrix[current_node, neighbor]
                    distance = distance_matrix[current_node, neighbor]
                    probabilities.append((pheromone**alpha) / (distance**beta))
                probabilities = np.array(probabilities)
                probabilities /= np.sum(probabilities)
                next_node = np.random.choice(candidates, p=probabilities)

                tour.append(next_node)
                tour_length += distance_matrix[current_node, next_node]
                unvisited_nodes.remove(next_node)
                current_node = next_node

            tour.append(start_node)
            tour_length += distance_matrix[current_node, start_node]
            all_tours.append(tour)
            all_tour_lengths.append(tour_length)

        # Update pheromones (heuristic matrix)
        heuristics_matrix *= (1 - rho)  # Evaporation

        best_tour_index = np.argmin(all_tour_lengths)
        best_tour = all_tours[best_tour_index]
        best_tour_length = all_tour_lengths[best_tour_index]

        for i in range(n):
            node1 = best_tour[i]
            node2 = best_tour[i+1]
            heuristics_matrix[node1, node2] += Q / best_tour_length
            heuristics_matrix[node2, node1] += Q / best_tour_length
            
    return heuristics_matrix
