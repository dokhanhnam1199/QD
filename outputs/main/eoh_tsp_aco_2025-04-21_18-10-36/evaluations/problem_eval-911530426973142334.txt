import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, progressively reinforces edges that appear in shorter tours, and returns a matrix indicating the frequency each edge appears in relatively short tours.}
    """
    n = len(distance_matrix)
    num_samples = 1000
    heuristics_matrix = np.zeros((n, n))

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_distance = 0
        for i in range(n - 1):
            tour_distance += distance_matrix[tour[i], tour[i + 1]]
        tour_distance += distance_matrix[tour[-1], tour[0]]

        # Reinforce edges in shorter tours
        threshold = np.mean([distance_matrix[i,j] for i in range(n) for j in range(n)]) * n
        if tour_distance < threshold*1.2:  # consider top tours
            for i in range(n - 1):
                heuristics_matrix[tour[i], tour[i + 1]] += 1
                heuristics_matrix[tour[i+1], tour[i]] += 1
            heuristics_matrix[tour[-1], tour[0]] += 1
            heuristics_matrix[tour[0], tour[-1]] += 1
                
    return heuristics_matrix
