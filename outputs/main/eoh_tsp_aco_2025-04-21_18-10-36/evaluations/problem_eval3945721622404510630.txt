import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs tours using a nearest neighbor approach, then updates edge weights based on tour quality, favoring edges in shorter tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    edge_weights = np.ones_like(distance_matrix, dtype=float)
    num_samples = 50

    for _ in range(num_samples):
        # Nearest Neighbor Tour Construction
        start_node = np.random.randint(n)
        unvisited = list(range(n))
        unvisited.remove(start_node)
        tour = [start_node]

        while unvisited:
            last_node = tour[-1]
            nearest_neighbor = min(unvisited, key=lambda node: edge_weights[last_node, node] * distance_matrix[last_node, node])
            tour.append(nearest_neighbor)
            unvisited.remove(nearest_neighbor)

        tour.append(start_node)

        # Calculate tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # Update edge weights based on tour length
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            edge_weights[node1, node2] += 1 / tour_length
            edge_weights[node2, node1] += 1 / tour_length

    # Normalize edge weights to create the heuristics matrix
    max_weight = np.max(edge_weights)
    if max_weight > 0:
        heuristics_matrix = edge_weights / max_weight
    else:
        heuristics_matrix = np.ones_like(distance_matrix) / n

    return heuristics_matrix
