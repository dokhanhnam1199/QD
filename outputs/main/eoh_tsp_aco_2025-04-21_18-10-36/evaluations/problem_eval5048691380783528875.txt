import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple near-optimal TSP solutions using a greedy approach with a fixed subset size for stochastic node selection, path refinement with 3-opt swaps, and weighted edge usage averaging based on tour length and edge distance to create a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Initialize tour with a random starting node
        start_node = np.random.randint(n)
        tour = [start_node]
        unvisited = set(range(n))
        unvisited.remove(start_node)

        # Greedy construction with stochastic node selection with fixed subset size
        subset_size = 3  # Fixed subset size
        while unvisited:
            # Adjust subset size based on remaining unvisited nodes
            subset_size = min(len(unvisited), subset_size)
            subset = np.random.choice(list(unvisited), size=subset_size, replace=False)

            # Find the nearest neighbor within the subset
            nearest_neighbor = None
            min_distance = float('inf')
            for neighbor in subset:
                distance = distance_matrix[tour[-1], neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor

            # Add the nearest neighbor to the tour
            tour.append(nearest_neighbor)
            unvisited.remove(nearest_neighbor)

        # Path refinement: 3-opt swap
        improved = True
        while improved:
            improved = False
            for i in range(n):
                for j in range(i + 2, n):
                    for k in range(j + 2, n + (i > 0)):
                        if k >= n:
                            k -= n
                        a, b, c, d, e, f = tour[i], tour[i + 1], tour[j], tour[j + 1], tour[k], tour[(k + 1) % n]
                        d0 = distance_matrix[a, b] + distance_matrix[c, d] + distance_matrix[e, f]
                        d1 = distance_matrix[a, c] + distance_matrix[b, d] + distance_matrix[e, f]
                        d2 = distance_matrix[a, b] + distance_matrix[c, e] + distance_matrix[d, f]
                        d3 = distance_matrix[a, e] + distance_matrix[d, c] + distance_matrix[b, f]
                        d4 = distance_matrix[a, c] + distance_matrix[e, b] + distance_matrix[d, f]

                        if d0 > d1:
                            tour[i + 1:j + 1] = reversed(tour[i + 1:j + 1])
                            improved = True
                        elif d0 > d2:
                            tour[j + 1:k + 1] = reversed(tour[j + 1:k + 1])
                            improved = True
                        elif d0 > d3:
                            tour[i + 1:k + 1] = reversed(tour[i + 1:k + 1])
                            improved = True
                        elif d0 > d4:
                            tmp = tour[j + 1:k + 1]
                            tour[j + 1:k + 1] = tour[i + 1:j + 1]
                            tour[i + 1:j + 1] = tmp
                            improved = True

        # Calculate tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[(i + 1) % n]]

        # Weighting factor based on tour length and edge distance
        for i in range(n):
            edge_distance = distance_matrix[tour[i], tour[(i + 1) % n]]
            weight = 1.0 / (tour_length + 1e-6) * (1.0 / (edge_distance + 1e-6))

            # Update heuristics matrix
            heuristics_matrix[tour[i], tour[(i + 1) % n]] += weight
            heuristics_matrix[tour[(i + 1) % n], tour[i]] += weight  # Ensure symmetry

    heuristics_matrix /= num_samples

    return heuristics_matrix
