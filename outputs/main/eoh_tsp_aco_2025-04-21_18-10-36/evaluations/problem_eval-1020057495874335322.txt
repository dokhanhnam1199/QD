import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm iteratively constructs tours by probabilistically selecting the next node based on a combination of distance and pheromone-like values, updating these values based on tour length, and adds a local search for tour improvement.}"""
  n = distance_matrix.shape[0]
  pheromone = np.ones_like(distance_matrix)
  alpha = 1.5
  beta = 2.5
  rho = 0.6
  num_iterations = 120
  num_ants = 12
  q = 2

  for _ in range(num_iterations):
    all_paths = []
    all_path_lengths = []

    for _ in range(num_ants):
      current_node = np.random.randint(n)
      unvisited_nodes = set(range(n))
      unvisited_nodes.remove(current_node)
      path = [current_node]

      while unvisited_nodes:
        probabilities = np.zeros(n)
        for neighbor in unvisited_nodes:
          probabilities[neighbor] = (pheromone[current_node, neighbor]**alpha) / (distance_matrix[current_node, neighbor]**beta)
        probabilities /= np.sum(probabilities)

        next_node = np.random.choice(n, p=probabilities)
        if next_node not in unvisited_nodes:
          available_nodes = list(unvisited_nodes)
          next_node = available_nodes[0] if len(available_nodes) > 0 else path[0]

        path.append(next_node)
        unvisited_nodes.remove(next_node)
        current_node = next_node

      path.append(path[0])
      all_paths.append(path)

      path_length = 0
      for i in range(n):
        path_length += distance_matrix[path[i], path[i+1]]
      all_path_lengths.append(path_length)

        #2-opt local search improvement
      for i in range(1, n):
        for j in range(i + 2, n + 1):
          new_path = path[:i] + path[i:j][::-1] + path[j:]
          new_path_length = 0
          for k in range(n):
            new_path_length += distance_matrix[new_path[k], new_path[k + 1]]
          if new_path_length < path_length:
            path = new_path
            path_length = new_path_length

    # Update pheromones
    delta_pheromone = np.zeros_like(distance_matrix)
    for k in range(num_ants):
      path = all_paths[k]
      path_length = all_path_lengths[k]
      for i in range(n):
        node1 = path[i]
        node2 = path[i+1]
        delta_pheromone[node1, node2] += q/path_length
        delta_pheromone[node2, node1] += q/path_length

    pheromone = (1 - rho) * pheromone + delta_pheromone

  heuristics_matrix = pheromone
  return heuristics_matrix
