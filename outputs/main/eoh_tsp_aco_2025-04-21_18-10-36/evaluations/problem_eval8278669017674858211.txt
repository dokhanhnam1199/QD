import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples a set of random tours, and for each edge, it calculates the frequency with which it appears in the sampled tours, which serves as an indicator of the edge's desirability.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        
        # Update heuristics matrix
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    # Normalize the matrix by number of samples
    heuristics_matrix /= num_samples
    
    return heuristics_matrix
