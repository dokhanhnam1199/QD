import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines edge frequency analysis from short local searches with a diversification strategy that penalizes frequently used edges to explore alternative solutions.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    edge_counts = np.zeros_like(distance_matrix, dtype=int)
    num_samples = 50
    penalty_factor = 0.1

    for _ in range(num_samples):
        # Generate a random initial tour
        nodes = list(range(n))
        np.random.shuffle(nodes)
        tour = nodes + [nodes[0]]

        # Simplified 2-opt local search
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for j in range(i + 2, n + 1):
                    if j - i == 1: continue # ensures edges are distinct
                    current_distance = distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j-1], tour[j]]
                    new_distance = distance_matrix[tour[i-1], tour[j-1]] + distance_matrix[tour[i], tour[j]]
                    if new_distance < current_distance:
                        tour[i:j] = reversed(tour[i:j])
                        improved = True

        # Update edge counts based on the improved tour
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            edge_counts[node1, node2] += 1
            edge_counts[node2, node1] += 1

    # Normalize edge counts and apply penalty
    max_count = np.max(edge_counts)
    if max_count > 0:
        normalized_counts = edge_counts / max_count
        heuristics_matrix = 1.0 - normalized_counts  # Invert: prefer less frequent edges
        # Introduce a penalty based on distance to diversify search
        for i in range(n):
            for j in range(i + 1, n):
                heuristics_matrix[i, j] -= penalty_factor * distance_matrix[i, j] / np.max(distance_matrix)
                heuristics_matrix[j, i] = heuristics_matrix[i, j]
        heuristics_matrix = np.clip(heuristics_matrix, 0, 1) # Ensure values are within [0, 1]
    else:
        heuristics_matrix = np.ones_like(distance_matrix) / n # Avoid division by zero

    return heuristics_matrix
