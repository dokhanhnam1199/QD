import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines shortest-edge preference with edge reinforcement based on sampled tour quality, favoring edges present in shorter sampled tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random tour using nearest neighbor heuristic
        current_node = np.random.randint(n)
        tour = [current_node]
        unvisited = set(range(n))
        unvisited.remove(current_node)

        while unvisited:
            nearest_neighbor = -1
            min_distance = np.inf
            for neighbor in unvisited:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor

            tour.append(nearest_neighbor)
            unvisited.remove(nearest_neighbor)
            current_node = nearest_neighbor

        tour.append(tour[0])  # Return to starting node

        # Calculate tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # Update heuristics matrix - shorter tours give higher edge scores
        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += 1.0 / (tour_length + 1e-6)
            heuristics_matrix[tour[i+1], tour[i]] += 1.0 / (tour_length + 1e-6)

    # Normalize heuristics matrix
    max_heuristic = np.max(heuristics_matrix)
    if max_heuristic > 0:
        heuristics_matrix /= max_heuristic

    return heuristics_matrix
