import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm combines the nearest neighbor approach with edge sampling and inverse distance weighting to create a more balanced heuristic.}"""
  n = distance_matrix.shape[0]
  num_samples = 50
  edge_counts = np.zeros_like(distance_matrix)

  for _ in range(num_samples):
    start_node = np.random.randint(n)
    current_node = start_node
    unvisited_nodes = set(range(n))
    unvisited_nodes.remove(start_node)
    tour = [start_node]

    while unvisited_nodes:
      nearest_neighbors = []
      distances = []
      for neighbor in unvisited_nodes:
        distance = distance_matrix[current_node, neighbor]
        nearest_neighbors.append(neighbor)
        distances.append(distance)

      # Select a neighbor probabilistically, favoring closer neighbors
      probabilities = np.exp(-np.array(distances))
      probabilities /= np.sum(probabilities)
      
      try:
          nearest_neighbor = np.random.choice(nearest_neighbors, p=probabilities)
      except ValueError:
          # Handle cases where probabilities might be all zero due to large distances
          nearest_neighbor = np.random.choice(nearest_neighbors)

      tour.append(nearest_neighbor)
      unvisited_nodes.remove(nearest_neighbor)
      current_node = nearest_neighbor

    # Complete the tour
    tour.append(start_node)

    # Update edge counts
    for i in range(n):
      u = tour[i]
      v = tour[i+1]
      edge_counts[u, v] += 1
      edge_counts[v, u] += 1
  
  edge_probabilities = edge_counts / num_samples
  heuristics_matrix = edge_probabilities / (distance_matrix + 1e-9)
  return heuristics_matrix
