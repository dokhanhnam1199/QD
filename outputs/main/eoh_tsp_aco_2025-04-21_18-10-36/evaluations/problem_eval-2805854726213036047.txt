import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm employs a randomized nearest neighbor approach with a bias towards shorter distances and a mechanism to escape local optima.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 50 # Reduced samples

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        path = [start_node]

        while unvisited_nodes:
            distances = np.array([distance_matrix[current_node, neighbor] for neighbor in unvisited_nodes])
            min_distance = np.min(distances)
            # Bias towards shorter distances using an exponential function
            probabilities = np.exp(-distances / min_distance)
            probabilities /= np.sum(probabilities)

            # Introduce a chance to escape local optima by adding a small uniform probability
            epsilon = 0.05
            probabilities = (1 - epsilon) * probabilities + epsilon / len(unvisited_nodes)
            probabilities /= np.sum(probabilities)

            next_node = list(unvisited_nodes)[np.random.choice(len(unvisited_nodes), p=probabilities)]
            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(start_node)

        # Update heuristics matrix: favor edges that appear frequently in good paths
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    # Normalize heuristics matrix to be between 0 and 1
    max_value = np.max(heuristics_matrix)
    if max_value > 0:
        heuristics_matrix /= max_value

    return heuristics_matrix
