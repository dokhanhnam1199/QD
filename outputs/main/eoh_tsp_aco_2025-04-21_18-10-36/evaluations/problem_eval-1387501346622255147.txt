import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm combines edge frequency from sampled nearest-neighbor tours with inverse distance to generate edge selection heuristics.}"""
  n = distance_matrix.shape[0]
  num_samples = 1000
  edge_counts = np.zeros_like(distance_matrix)

  for _ in range(num_samples):
    start_node = np.random.randint(n)
    tour = [start_node]
    unvisited = list(range(n))
    unvisited.remove(start_node)

    while unvisited:
      current_node = tour[-1]
      nearest_neighbor = min(unvisited, key=lambda x: distance_matrix[current_node, x])
      tour.append(nearest_neighbor)
      unvisited.remove(nearest_neighbor)
    
    for i in range(n):
      u = tour[i]
      v = tour[(i + 1) % n]
      edge_counts[u, v] += 1
      edge_counts[v, u] += 1

  edge_probabilities = edge_counts / num_samples
  heuristics_matrix = edge_probabilities / (distance_matrix + 1e-9)
  return heuristics_matrix
