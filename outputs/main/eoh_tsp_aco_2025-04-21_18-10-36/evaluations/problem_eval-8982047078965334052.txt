import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining shortest path distances with node centrality measures to guide tour construction.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate shortest path matrix (using Floyd-Warshall) as one heuristic
    shortest_path_matrix = distance_matrix.copy()
    for k in range(n):
        for i in range(n):
            for j in range(n):
                shortest_path_matrix[i, j] = min(shortest_path_matrix[i, j], shortest_path_matrix[i, k] + shortest_path_matrix[k, j])

    # Calculate node centrality (degree centrality) as another heuristic
    degree_centrality = np.sum(1.0 / (1.0 + distance_matrix), axis=1)

    # Combine heuristics
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (1.0 / (1.0 + shortest_path_matrix[i, j])) + degree_centrality[i] + degree_centrality[j]

    return heuristics_matrix
