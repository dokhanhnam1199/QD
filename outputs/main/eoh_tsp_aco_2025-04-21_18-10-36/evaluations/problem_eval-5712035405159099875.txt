import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm adaptively combines edge sampling based on distance and pheromone-inspired reinforcement to construct a heuristic matrix for TSP solutions.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 50
    pheromone_matrix = np.ones_like(distance_matrix)
    alpha = 0.5
    beta = 2
    rho = 0.2

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        tour = [start_node]
        unvisited = set(range(n))
        unvisited.remove(start_node)

        while unvisited:
            probabilities = []
            candidates = list(unvisited)
            for neighbor in candidates:
                pheromone = pheromone_matrix[tour[-1], neighbor]
                distance = distance_matrix[tour[-1], neighbor]
                probabilities.append((pheromone**alpha) / (distance**beta))

            probabilities = np.array(probabilities)
            probabilities /= np.sum(probabilities)
            next_node = np.random.choice(candidates, p=probabilities)
            tour.append(next_node)
            unvisited.remove(next_node)

        tour.append(start_node)
        tour_length = sum(distance_matrix[tour[i], tour[i+1]] for i in range(n))

        # Update heuristics and pheromone
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            dist = distance_matrix[node1, node2]
            heuristics_matrix[node1, node2] += 1.0 / (dist + 1e-6)
            heuristics_matrix[node2, node1] += 1.0 / (dist + 1e-6)

            pheromone_matrix[node1, node2] = (1 - rho) * pheromone_matrix[node1, node2] + rho * (1 / (dist+1e-6))
            pheromone_matrix[node2, node1] = (1 - rho) * pheromone_matrix[node2, node1] + rho * (1 / (dist+1e-6))
    heuristics_matrix /= num_samples
    return heuristics_matrix
