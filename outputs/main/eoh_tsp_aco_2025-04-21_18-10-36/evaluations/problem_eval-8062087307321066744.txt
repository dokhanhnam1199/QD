import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples many random tours, and then scores each edge by how often it appears in the shortest sampled tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    sampled_tour_lengths = np.zeros(num_samples)
    sampled_tours = np.zeros((num_samples, n), dtype=int)

    for i in range(num_samples):
        tour = np.random.permutation(n)
        sampled_tours[i, :] = tour
        tour_length = 0
        for j in range(n - 1):
            tour_length += distance_matrix[tour[j], tour[j+1]]
        tour_length += distance_matrix[tour[n-1], tour[0]]
        sampled_tour_lengths[i] = tour_length

    # Find the indices of the shortest tours
    num_best = int(num_samples * 0.1) # Consider the top 10% as "best"
    best_tour_indices = np.argsort(sampled_tour_lengths)[:num_best]

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Score edges based on their frequency in the best tours
    for i in best_tour_indices:
        tour = sampled_tours[i, :]
        for j in range(n - 1):
            heuristics_matrix[tour[j], tour[j+1]] += 1
            heuristics_matrix[tour[j+1], tour[j]] += 1  # Ensure symmetry
        heuristics_matrix[tour[n-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[n-1]] += 1

    # Normalize to get probabilities/indicators
    heuristics_matrix = heuristics_matrix / num_best
    
    return heuristics_matrix
