import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple tours using a greedy approach guided by a weighted combination of distance and a pheromone matrix, updating pheromone based on tour performance and evaporation.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    pheromone = np.ones_like(distance_matrix)
    alpha = 0.7
    beta = 0.3
    evaporation_rate = 0.1
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(current_node)
        tour = [current_node]
        total_distance = 0

        while unvisited:
            probabilities = np.zeros(n)
            for neighbor in unvisited:
                probabilities[neighbor] = (pheromone[current_node, neighbor]**alpha) / (distance_matrix[current_node, neighbor]**beta)
            
            probabilities /= np.sum(probabilities)
            
            next_node = np.random.choice(list(unvisited), p=probabilities[list(unvisited)])
            
            tour.append(next_node)
            total_distance += distance_matrix[current_node, next_node]
            current_node = next_node
            unvisited.remove(current_node)

        total_distance += distance_matrix[current_node, start_node]
        tour.append(start_node)

        # Update pheromone based on tour length
        pheromone *= (1 - evaporation_rate)
        reward = 1 / total_distance
        for i in range(n):
            pheromone[tour[i], tour[(i + 1) % n]] += reward
            pheromone[tour[(i + 1) % n], tour[i]] += reward

        # Update heuristics matrix
        for i in range(n):
            heuristics_matrix[tour[i], tour[(i + 1) % n]] += 1
            heuristics_matrix[tour[(i + 1) % n], tour[i]] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
