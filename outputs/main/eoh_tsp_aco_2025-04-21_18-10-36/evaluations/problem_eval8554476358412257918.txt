import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm creates a heuristic matrix by combining a nearest neighbor approach with a random factor to diversify the search process.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    nearest_neighbors = np.zeros((n, n), dtype=float)

    for i in range(n):
        distances = distance_matrix[i, :]
        sorted_indices = np.argsort(distances)
        
        # nearest neighbor bonus
        for j in sorted_indices[1:min(4,n)]: #consider top 3 nearest neighbors. Excluding itself.
            nearest_neighbors[i,j] = 0.7
            nearest_neighbors[j,i] = 0.7

    # Add a random component.
    random_matrix = np.random.rand(n, n) * 0.3 # Random numbers between 0 and 0.3

    heuristics_matrix = nearest_neighbors + random_matrix

    return heuristics_matrix
