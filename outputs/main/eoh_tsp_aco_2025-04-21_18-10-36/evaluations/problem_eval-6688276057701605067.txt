import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm combines inverse distance with edge appearance frequency in sampled nearest neighbor tours, biased towards edges with nodes of high degree in minimum spanning tree.}"""
  n = distance_matrix.shape[0]
  num_samples = 1000
  edge_counts = np.zeros_like(distance_matrix)

  # Compute Minimum Spanning Tree (MST) and node degrees
  from scipy.sparse import csr_matrix
  from scipy.sparse.csgraph import minimum_spanning_tree
  mst = minimum_spanning_tree(csr_matrix(distance_matrix))
  degrees = np.array(mst.toarray().sum(axis=0)).flatten()
  
  for _ in range(num_samples):
    start_node = np.random.randint(n)
    tour = [start_node]
    unvisited = list(range(n))
    unvisited.remove(start_node)

    while unvisited:
      current_node = tour[-1]
      #Nearest neighbor selection with bias
      weights = np.array([distance_matrix[current_node, neighbor] for neighbor in unvisited])
      degree_bias = np.array([degrees[neighbor] for neighbor in unvisited])
      
      #Combine distance and degree bias
      combined_metric = weights - 0.1 * degree_bias
      nearest_neighbor = unvisited[np.argmin(combined_metric)]
      
      tour.append(nearest_neighbor)
      unvisited.remove(nearest_neighbor)
    
    for i in range(n):
      u = tour[i]
      v = tour[(i + 1) % n]
      edge_counts[u, v] += 1
      edge_counts[v, u] += 1

  edge_frequencies = edge_counts / num_samples
  inverse_distances = 1.0 / (distance_matrix + 1e-9)  # Avoid division by zero
  heuristics_matrix = edge_frequencies * inverse_distances
  return heuristics_matrix
