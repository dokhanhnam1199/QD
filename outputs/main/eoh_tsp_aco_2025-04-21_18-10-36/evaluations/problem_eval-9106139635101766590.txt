import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a greedy approach combined with edge sampling based on their distance to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for i in range(n):
        for j in range(i + 1, n):
            # Sample based on inverse of distance: closer edges have higher probability
            probability = 1 / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0
            
            #Use the greedy method: shorter distance, larger prob
            heuristics_matrix[i, j] = probability
            heuristics_matrix[j, i] = probability
    
    # Normalize the matrix
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix = heuristics_matrix / max_val
    else:
        heuristics_matrix = np.ones_like(distance_matrix) / n
    
    return heuristics_matrix
