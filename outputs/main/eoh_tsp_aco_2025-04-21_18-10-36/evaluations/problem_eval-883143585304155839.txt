import numpy as np
from scipy.stats import rankdata

def heuristics_v2(distance_matrix):
    """{This algorithm ranks edges based on distance and connectivity, assigning higher scores to shorter edges connected to nodes with high edge density.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Rank distances: lower distance gets higher rank
    distance_ranks = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        distance_ranks[i] = rankdata(distance_matrix[i], method='ordinal')
    distance_ranks = np.max(distance_ranks) - distance_ranks + 1 # Invert ranks so smaller distances have higher ranks

    # Calculate node connectivity: number of relatively short edges connected to each node
    connectivity = np.zeros(n)
    threshold = np.mean(distance_matrix) # Define "short" edges relative to average distance
    for i in range(n):
        for j in range(n):
            if distance_matrix[i, j] < threshold:
                connectivity[i] += 1

    # Combine distance rank and connectivity
    for i in range(n):
        for j in range(i + 1, n):
            heuristics_matrix[i, j] = distance_ranks[i, j] * (connectivity[i] + connectivity[j])
            heuristics_matrix[j, i] = heuristics_matrix[i, j]

    return heuristics_matrix
