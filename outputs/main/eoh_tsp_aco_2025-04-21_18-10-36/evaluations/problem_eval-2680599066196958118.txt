import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple near-optimal TSP solutions by iteratively improving a random tour using 2-opt swaps, and biases edge usage counts based on tour length.}
    """
    n = distance_matrix.shape[0]
    num_samples = 50
    num_iterations = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random initial tour
        tour = np.random.permutation(n)
        tour = list(tour)
        tour.append(tour[0]) # close the cycle

        # 2-opt improvement
        for _ in range(num_iterations):
            i = np.random.randint(1, n)
            k = np.random.randint(i + 1, n + 1)

            # Calculate the change in distance
            delta = (distance_matrix[tour[i - 1], tour[k - 1]] + distance_matrix[tour[i], tour[k]] -
                     distance_matrix[tour[i - 1], tour[i]] - distance_matrix[tour[k - 1], tour[k]])

            # If the swap improves the tour, apply it
            if delta < 0:
                tour[i:k] = reversed(tour[i:k])

        # Calculate the total distance of the tour
        total_distance = 0
        for i in range(n):
            total_distance += distance_matrix[tour[i], tour[(i + 1) % (n+0)]]

        # Weight the contribution of this tour based on its total distance
        weight = max(0, 1 - (total_distance / (np.mean(distance_matrix) * n * 2)))
        
        # Update heuristics matrix
        for i in range(n):
            heuristics_matrix[tour[i], tour[(i + 1) % n]] += weight
            heuristics_matrix[tour[(i + 1) % n], tour[i]] += weight  # Ensure symmetry

    heuristics_matrix /= num_samples

    return heuristics_matrix
