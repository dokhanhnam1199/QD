import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses edge frequency within sampled tours, weighted by an exponentially decaying function of tour length, to prioritize edges in shorter tours more strongly.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    edge_weights = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 50
    decay_factor = 0.9

    for _ in range(num_samples):
        # Generate a random initial tour
        nodes = list(range(n))
        np.random.shuffle(nodes)
        tour = nodes + [nodes[0]]

        # Simplified 2-opt local search
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for j in range(i + 2, n + 1):
                    if j - i == 1: continue # ensures edges are distinct
                    current_distance = distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j-1], tour[j]]
                    new_distance = distance_matrix[tour[i-1], tour[j-1]] + distance_matrix[tour[i], tour[j]]
                    if new_distance < current_distance:
                        tour[i:j] = reversed(tour[i:j])
                        improved = True

        # Calculate tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # Update edge weights based on tour length and edge frequency
        weight = decay_factor ** tour_length
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            edge_weights[node1, node2] += weight
            edge_weights[node2, node1] += weight

    # Normalize edge weights to create the heuristics matrix
    max_weight = np.max(edge_weights)
    if max_weight > 0:
        heuristics_matrix = edge_weights / max_weight
    else:
        heuristics_matrix = np.ones_like(distance_matrix) / n # Avoid division by zero

    return heuristics_matrix
