import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm iteratively refines an initial set of random tours by applying local search operators (2-opt and insertion) and probabilistically selecting the best tours to influence edge importance, emphasizing shorter edges and frequent connections.}
    """
    n = distance_matrix.shape[0]
    num_tours = 50
    num_iterations = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    tours = []
    tour_lengths = []

    # Initialize tours randomly
    for _ in range(num_tours):
        tour = np.random.permutation(n).tolist()
        tour.append(tour[0])
        tours.append(tour)
        tour_length = sum(distance_matrix[tour[i], tour[i + 1]] for i in range(n))
        tour_lengths.append(tour_length)

    for _ in range(num_iterations):
        # Local search: 2-opt and insertion
        for i in range(num_tours):
            # 2-opt
            for _ in range(2):
                idx1 = np.random.randint(1, n)
                idx2 = np.random.randint(idx1 + 1, n + 1)
                
                new_tour = tours[i][:idx1] + tours[i][idx1:idx2][::-1] + tours[i][idx2:]
                new_tour_length = sum(distance_matrix[new_tour[i], new_tour[i + 1]] for i in range(n))
                if new_tour_length < tour_lengths[i]:
                    tours[i] = new_tour
                    tour_lengths[i] = new_tour_length

            # Insertion
            for _ in range(2):
                idx1 = np.random.randint(1, n)
                idx2 = np.random.randint(1, n)
                
                if idx1 == idx2:
                    continue
                
                node_to_insert = tours[i].pop(idx1)
                if idx1 < idx2:
                    idx2 -= 1
                    
                tours[i].insert(idx2, node_to_insert)
                
                tour_lengths[i] = sum(distance_matrix[tours[i][k], tours[i][k + 1]] for k in range(n))


        # Probabilistic selection based on tour length
        probabilities = np.array(tour_lengths)
        probabilities = np.max(probabilities) / probabilities  # Inverse length
        probabilities /= np.sum(probabilities)

        # Update heuristics matrix based on selected tours
        selected_tour_indices = np.random.choice(num_tours, size=num_tours // 2, replace=False, p=probabilities)
        
        for tour_index in selected_tour_indices:
            tour = tours[tour_index]
            for i in range(n):
                dist = distance_matrix[tour[i], tour[i + 1]]
                heuristics_matrix[tour[i], tour[i + 1]] += 1.0 / (dist + 1e-6)
                heuristics_matrix[tour[i + 1], tour[i]] += 1.0 / (dist + 1e-6)

    heuristics_matrix /= (num_iterations * num_tours // 2)

    return heuristics_matrix
