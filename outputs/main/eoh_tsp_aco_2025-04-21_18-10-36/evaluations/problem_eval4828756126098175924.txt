import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines the heuristic matrix by iteratively constructing solutions using a greedy approach guided by edge desirability and penalizing edges present in longer tours, thereby promoting better edge selection.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix)

    num_iterations = 100

    for iteration in range(num_iterations):
        all_paths = []
        all_path_lengths = []

        for start_node in range(n):
            current_node = start_node
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(start_node)
            path = [start_node]
            path_length = 0

            while unvisited_nodes:
                best_neighbor = None
                best_heuristic = -1
                for neighbor in unvisited_nodes:
                    heuristic_value = heuristics_matrix[current_node, neighbor] / distance_matrix[current_node, neighbor]
                    if heuristic_value > best_heuristic:
                        best_heuristic = heuristic_value
                        best_neighbor = neighbor

                path.append(best_neighbor)
                path_length += distance_matrix[current_node, best_neighbor]
                unvisited_nodes.remove(best_neighbor)
                current_node = best_neighbor

            path.append(start_node)
            path_length += distance_matrix[current_node, start_node]
            all_paths.append(path)
            all_path_lengths.append(path_length)

        # Update heuristics matrix based on tour length
        for i in range(n):
            path = all_paths[i]
            path_length = all_path_lengths[i]
            for j in range(n):
                node1 = path[j]
                node2 = path[(j + 1) % n]
                heuristics_matrix[node1, node2] *= (0.9 + 0.1 * (np.mean(all_path_lengths) / path_length))
                heuristics_matrix[node2, node1] *= (0.9 + 0.1 * (np.mean(all_path_lengths) / path_length))


    return heuristics_matrix
