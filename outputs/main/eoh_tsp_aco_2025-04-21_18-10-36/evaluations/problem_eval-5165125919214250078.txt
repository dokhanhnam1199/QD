import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a large number of random paths, biases the sampling towards shorter paths using a temperature parameter, and then averages the occurrence frequency of each edge across these sampled paths to estimate edge importance.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    temperature = 1.0
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random path
        path = np.random.permutation(n)
        
        # Calculate the path length
        path_length = 0
        for i in range(n - 1):
            path_length += distance_matrix[path[i], path[i+1]]
        path_length += distance_matrix[path[-1], path[0]]

        # Calculate probability based on path length and temperature
        probability = np.exp(-path_length / temperature)

        # Update heuristics matrix based on the path and its probability
        for i in range(n - 1):
            heuristics_matrix[path[i], path[i+1]] += probability
            heuristics_matrix[path[i+1], path[i]] += probability  # Ensure symmetry
        heuristics_matrix[path[-1], path[0]] += probability
        heuristics_matrix[path[0], path[-1]] += probability  # Ensure symmetry

    # Normalize the heuristics matrix
    heuristics_matrix /= num_samples

    return heuristics_matrix
