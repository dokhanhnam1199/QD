import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples many random tours, and then populates a matrix representing the frequency with which each edge appears in the shortest tours from the sample.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        permutation = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[permutation[i], permutation[i+1]]
        tour_length += distance_matrix[permutation[-1], permutation[0]]

        # Store the best tour found so far (for comparison)
        if 'best_tour_length' not in locals() or tour_length < best_tour_length:
            best_tour_length = tour_length
            best_permutation = permutation

    # Iterate again through the best permutations and update the heuristics_matrix
    for _ in range(num_samples):
        permutation = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[permutation[i], permutation[i+1]]
        tour_length += distance_matrix[permutation[-1], permutation[0]]

        if tour_length <= best_tour_length * 1.1: # Consider only close to optimal tours.
            for i in range(n - 1):
                heuristics_matrix[permutation[i], permutation[i+1]] += 1
                heuristics_matrix[permutation[i+1], permutation[i]] += 1
            heuristics_matrix[permutation[-1], permutation[0]] += 1
            heuristics_matrix[permutation[0], permutation[-1]] += 1


    # Normalize the matrix so that the entries are probabilities
    heuristics_matrix /= np.sum(heuristics_matrix)
    return heuristics_matrix
