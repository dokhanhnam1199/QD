import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs multiple TSP solutions by iteratively adding the shortest edge that doesn't create a cycle or exceed node degree constraints, then averages the edge usage across these samples, weighting edges based on a combination of their distance and a pheromone-like value that's updated based on tour quality.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    pheromone_matrix = np.ones_like(distance_matrix)  # Initialize pheromone levels

    for _ in range(num_samples):
        edges = []
        for i in range(n):
            for j in range(i + 1, n):
                edges.append((i, j))

        # Sort edges based on a combination of distance and pheromone
        edges.sort(key=lambda edge: distance_matrix[edge[0], edge[1]] / (pheromone_matrix[edge[0], edge[1]] + 1e-9))

        parent = list(range(n))  # Initialize disjoint set data structure
        degree = [0] * n

        def find(i):
            if parent[i] == i:
                return i
            parent[i] = find(parent[i])
            return parent[i]

        def union(i, j):
            root_i = find(i)
            root_j = find(j)
            if root_i != root_j:
                parent[root_i] = root_j
                return True
            return False

        tour_edges = []
        tour_length = 0
        for u, v in edges:
            if degree[u] < 2 and degree[v] < 2 and find(u) != find(v):
                if union(u, v):
                    tour_edges.append((u, v))
                    degree[u] += 1
                    degree[v] += 1
                    tour_length += distance_matrix[u, v]
                    if len(tour_edges) == n:
                        break # Check if a tour is formed after each edge addition

        # Update pheromone levels based on tour quality
        if len(tour_edges) == n:  # Only update if a complete tour was formed
            for u, v in tour_edges:
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1
                pheromone_matrix[u, v] += 1.0 / (tour_length + 1e-6)  # Add pheromone inversely proportional to tour length
                pheromone_matrix[v, u] += 1.0 / (tour_length + 1e-6)


        pheromone_matrix *= 0.9  # Evaporation

    heuristics_matrix /= num_samples
    return heuristics_matrix
