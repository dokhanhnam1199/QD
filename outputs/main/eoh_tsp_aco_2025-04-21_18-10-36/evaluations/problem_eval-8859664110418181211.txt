import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple TSP solutions using a nearest neighbor heuristic with randomized starting nodes and edge selection probabilities biased towards shorter distances, then aggregates the edge frequencies across these samples to create a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        path = [start_node]

        while unvisited_nodes:
            # Probabilistically choose the next node based on distance
            probabilities = []
            candidates = list(unvisited_nodes)
            for neighbor in candidates:
                probabilities.append(1 / distance_matrix[current_node, neighbor])
            probabilities = np.array(probabilities)
            probabilities /= np.sum(probabilities)
            
            next_node = np.random.choice(candidates, p=probabilities)

            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(start_node)  # Return to the starting node

        # Update heuristics matrix: increment counts for edges in the path
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples  # Normalize to get frequencies

    return heuristics_matrix
