import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple near-optimal TSP solutions using a nearest neighbor heuristic with stochastic restarts and edge perturbation, then averages the edge usage across these samples to create a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(current_node)
        tour = [current_node]
        total_distance = 0

        while unvisited:
            nearest_neighbor = None
            min_distance = float('inf')

            #Perturb the distances to introduce stochasticity
            perturbed_distances = distance_matrix[current_node, :].copy() + np.random.normal(0, np.std(distance_matrix) / 10, size=n)
            perturbed_distances[current_node] = float('inf') #Ensure not to revisit current node
            
            for neighbor in unvisited:
                if perturbed_distances[neighbor] < min_distance:
                    min_distance = perturbed_distances[neighbor]
                    nearest_neighbor = neighbor

            tour.append(nearest_neighbor)
            total_distance += distance_matrix[current_node, nearest_neighbor]
            current_node = nearest_neighbor
            unvisited.remove(current_node)

        total_distance += distance_matrix[current_node, start_node]
        tour.append(start_node) # Complete the cycle

        # Update heuristics matrix
        for i in range(n):
            heuristics_matrix[tour[i], tour[(i + 1) % n]] += 1
            heuristics_matrix[tour[(i + 1) % n], tour[i]] += 1 #Ensure symmetry

    heuristics_matrix /= num_samples

    return heuristics_matrix
