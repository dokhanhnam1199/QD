import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively refines a heuristic matrix by combining shortest path estimations with edge importance sampling based on path diversity.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 50
    num_samples = 100

    for iteration in range(num_iterations):
        paths = []
        path_lengths = []

        for _ in range(num_samples):
            start_node = np.random.randint(n)
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(start_node)
            path = [start_node]
            current_node = start_node
            path_length = 0

            while unvisited_nodes:
                distances = [distance_matrix[current_node, neighbor] for neighbor in unvisited_nodes]
                probabilities = [1 / (d + 1e-6) for d in distances] # Avoid division by zero
                probabilities = np.array(probabilities)
                probabilities /= np.sum(probabilities)
                
                next_node = np.random.choice(list(unvisited_nodes), p=probabilities)
                path.append(next_node)
                path_length += distance_matrix[current_node, next_node]
                current_node = next_node
                unvisited_nodes.remove(next_node)
                
            path.append(start_node)
            path_length += distance_matrix[current_node, start_node]
            paths.append(path)
            path_lengths.append(path_length)

        # Update heuristics matrix based on path frequency
        for path in paths:
            for i in range(n):
                node1 = path[i]
                node2 = path[(i + 1) % n]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

        # Normalize heuristics matrix
        heuristics_matrix /= np.max(heuristics_matrix) + 1e-6 #avoid division by zero.
        
        # Incorporate distance information
        heuristics_matrix = 0.7 * heuristics_matrix + 0.3 * (1 / (distance_matrix + 1e-6))

    return heuristics_matrix
