import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm uses ant colony optimization principles to build pheromone trails based on random walks, biasing edge selection toward shorter distances.}"""
  n = distance_matrix.shape[0]
  pheromone_matrix = np.ones_like(distance_matrix)
  alpha = 1
  beta = 2
  num_ants = n
  num_iterations = 100

  for _ in range(num_iterations):
    for ant in range(num_ants):
      current_node = ant % n
      unvisited = set(range(n))
      unvisited.remove(current_node)
      tour = [current_node]

      while unvisited:
        probabilities = np.zeros(n)
        for neighbor in unvisited:
          probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) / ((distance_matrix[current_node, neighbor] + 1e-9)**beta)
        probabilities /= np.sum(probabilities)

        next_node = np.random.choice(list(unvisited), p=probabilities[list(range(n))])
        tour.append(next_node)
        unvisited.remove(next_node)
        current_node = next_node

      tour.append(tour[0])
      tour_length = 0
      for i in range(n):
        tour_length += distance_matrix[tour[i], tour[i+1]]

      delta_pheromone = 1 / tour_length
      for i in range(n):
        u = tour[i]
        v = tour[i+1]
        pheromone_matrix[u, v] += delta_pheromone
        pheromone_matrix[v, u] += delta_pheromone

    pheromone_matrix *= 0.9 

  heuristics_matrix = pheromone_matrix / (distance_matrix + 1e-9)
  return heuristics_matrix
