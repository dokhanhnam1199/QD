import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a simplified pheromone update rule based solely on the best path found in each iteration, emphasizing the strongest edges.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)
    alpha = 1.0  # Increased pheromone influence
    beta = 1.0  # Distance influence
    rho = 0.1  # Lower evaporation rate
    Q = 100  # Higher pheromone deposit constant
    num_ants = int(n * 0.5)  # Reduced number of ants
    num_iterations = 100  # Increased number of iterations

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for iteration in range(num_iterations):
        all_paths = []
        all_path_lengths = []

        for ant in range(num_ants):
            start_node = ant % n
            current_node = start_node
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(start_node)
            path = [start_node]
            path_length = 0

            while unvisited_nodes:
                # Nearest Neighbor biased by Pheromones
                probabilities = []
                candidates = list(unvisited_nodes)
                for neighbor in candidates:
                    pheromone = pheromone_matrix[current_node, neighbor]
                    distance = distance_matrix[current_node, neighbor]
                    probabilities.append((pheromone**alpha) / (distance**beta))
                probabilities = np.array(probabilities)
                probabilities /= np.sum(probabilities)
                next_node = np.random.choice(candidates, p=probabilities)

                path.append(next_node)
                path_length += distance_matrix[current_node, next_node]
                unvisited_nodes.remove(next_node)
                current_node = next_node

            path.append(start_node)
            path_length += distance_matrix[current_node, start_node]
            all_paths.append(path)
            all_path_lengths.append(path_length)

        # Find the best path in this iteration
        best_path_index = np.argmin(all_path_lengths)
        best_path = all_paths[best_path_index]
        best_path_length = all_path_lengths[best_path_index]

        # Evaporate pheromones
        pheromone_matrix *= (1 - rho)

        # Deposit pheromone only on the best path
        for i in range(n):
            node1 = best_path[i]
            node2 = best_path[i+1]
            pheromone_matrix[node1, node2] += Q / best_path_length
            pheromone_matrix[node2, node1] += Q / best_path_length

    # Aggregate pheromone information into the heuristics matrix
    heuristics_matrix = pheromone_matrix
    return heuristics_matrix
