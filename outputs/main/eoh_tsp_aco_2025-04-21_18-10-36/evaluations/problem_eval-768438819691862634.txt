import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, calculates the frequency of each edge appearing in the shortest tours, and uses this frequency as a heuristic indicator for edge inclusion.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    shortest_tours = []
    shortest_distance = float('inf')

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        distance = 0
        for i in range(n - 1):
            distance += distance_matrix[tour[i], tour[i + 1]]
        distance += distance_matrix[tour[-1], tour[0]]

        if distance < shortest_distance:
            shortest_distance = distance
            shortest_tours = [tour]
        elif distance == shortest_distance:
            shortest_tours.append(tour)

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for tour in shortest_tours:
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i + 1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1

    heuristics_matrix = heuristics_matrix / len(shortest_tours)

    return heuristics_matrix
