import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving random tours using 2-opt swaps, biasing the matrix towards edges frequently present in shorter tours.}"""
    n = distance_matrix.shape[0]
    num_iterations = 100
    num_samples = 50
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour
    
    def two_opt(tour):
        best_tour = tour
        best_length = calculate_tour_length(tour)
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for k in range(i + 1, n):
                    new_tour = two_opt_swap(best_tour, i, k)
                    new_length = calculate_tour_length(new_tour)
                    if new_length < best_length:
                        best_tour = new_tour
                        best_length = new_length
                        improved = True
                        break
                if improved:
                    break
        return best_tour


    for _ in range(num_iterations):
        tours = []
        for _ in range(num_samples):
            # Generate a random tour
            tour = np.random.permutation(n).tolist()
            
            # Improve the tour using 2-opt
            tour = two_opt(tour)
            tours.append(tour)

        # Update the heuristic matrix
        for tour in tours:
            for i in range(n):
                node1 = tour[i]
                node2 = tour[(i + 1) % n]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1
    
    return heuristics_matrix
