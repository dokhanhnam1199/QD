import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple random tours and biases the edge usage count based on the inverse rank of the tour length, giving more weight to better (shorter) tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    all_tours = []

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Complete the cycle
        all_tours.append(tour)

    tour_lengths = np.array([sum(distance_matrix[all_tours[i][j], all_tours[i][j + 1]] for j in range(n)) for i in range(num_samples)])
    ranked_indices = np.argsort(tour_lengths)

    for rank, index in enumerate(ranked_indices):
        tour = all_tours[index]
        weight = num_samples - rank  # Linear ranking weight

        for i in range(n):
            heuristics_matrix[tour[i], tour[i + 1]] += weight
            heuristics_matrix[tour[i + 1], tour[i]] += weight  # Ensure symmetry

    heuristics_matrix /= np.sum(range(1, num_samples + 1)) # Normalize by sum of weights

    return heuristics_matrix
