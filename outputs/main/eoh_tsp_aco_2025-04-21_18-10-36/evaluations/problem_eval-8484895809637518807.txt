import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates the probability of an edge being in an optimal TSP tour by sampling random tours and calculating how often each edge appears in those tours, then normalizes these frequencies to get the heuristics matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    edge_counts = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        permutation = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            u = permutation[i]
            v = permutation[i+1]
            edge_counts[u, v] += 1
            edge_counts[v, u] += 1
        u = permutation[n-1]
        v = permutation[0]
        edge_counts[u, v] += 1
        edge_counts[v, u] += 1

    heuristics_matrix = edge_counts / num_samples
    return heuristics_matrix
