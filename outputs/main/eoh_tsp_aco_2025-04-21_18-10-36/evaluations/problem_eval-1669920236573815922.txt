import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples random tours, and for each tour, updates a matrix indicating how frequently each edge appears in short tours, effectively biasing towards edges that are often part of good solutions.}"""
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(num_nodes)
        
        # Calculate the tour length
        tour_length = 0
        for i in range(num_nodes - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        # Update heuristics matrix based on tour length
        # Favor edges in shorter tours
        weight = np.exp(-tour_length / (np.mean(distance_matrix) * num_nodes)) # Adjust weight as needed

        for i in range(num_nodes - 1):
            heuristics_matrix[tour[i], tour[i+1]] += weight
            heuristics_matrix[tour[i+1], tour[i]] += weight # Assuming symmetric matrix
        heuristics_matrix[tour[-1], tour[0]] += weight
        heuristics_matrix[tour[0], tour[-1]] += weight

    # Normalize the heuristics matrix
    total_weight = np.sum(heuristics_matrix)
    if total_weight > 0:
      heuristics_matrix = heuristics_matrix / total_weight

    return heuristics_matrix
