import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining shortest path information with edge frequency observed from iteratively perturbed minimum spanning trees.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 100

    # Shortest path heuristics
    shortest_paths = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                shortest_paths[i, j] = -distance_matrix[i, j]
            else:
                shortest_paths[i, j] = np.inf

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if shortest_paths[i, j] < shortest_paths[i, k] + shortest_paths[k, j]:
                    continue
                else:
                     shortest_paths[i, j] = shortest_paths[i, k] + shortest_paths[k, j]

    shortest_paths = np.abs(shortest_paths)
    shortest_paths = 1 / (1 + shortest_paths)  # Convert distances to heuristic values

    # Minimum spanning tree (MST) based frequency heuristics
    for _ in range(num_iterations):
        # Perturb the distance matrix slightly
        perturbed_matrix = distance_matrix + np.random.normal(0, 0.1, size=(n, n))
        perturbed_matrix = np.maximum(perturbed_matrix, 0)  # Ensure non-negative distances

        # Kruskal's algorithm for MST
        edges = []
        for i in range(n):
            for j in range(i + 1, n):
                edges.append((perturbed_matrix[i, j], i, j))
        edges.sort()

        parent = list(range(n))

        def find(i):
            if parent[i] == i:
                return i
            parent[i] = find(parent[i])
            return parent[i]

        def union(i, j):
            root_i = find(i)
            root_j = find(j)
            if root_i != root_j:
                parent[root_i] = root_j
                return True
            return False

        mst_edges = []
        for cost, u, v in edges:
            if union(u, v):
                mst_edges.append((u, v))

        # Update heuristics matrix based on MST edges
        for u, v in mst_edges:
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

    heuristics_matrix /= num_iterations

    # Combine shortest path information with MST frequency
    heuristics_matrix = 0.5 * shortest_paths + 0.5 * heuristics_matrix #Combine to give equal weight
    return heuristics_matrix
