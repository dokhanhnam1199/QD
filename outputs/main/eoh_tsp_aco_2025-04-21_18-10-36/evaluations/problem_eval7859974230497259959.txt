import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm employs a simplified ant colony optimization approach, focusing on enhanced exploration with a higher evaporation rate and a modified pheromone update rule that emphasizes recent best tours.}
    """
    n = distance_matrix.shape[0]
    num_ants = 30
    pheromone = np.ones_like(distance_matrix)
    alpha = 0.5
    beta = 1
    rho = 0.7  # Higher evaporation rate
    Q = 50

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for iteration in range(50):
        tours = []
        tour_lengths = []
        for ant in range(num_ants):
            start_node = np.random.randint(n)
            tour = [start_node]
            unvisited = set(range(n))
            unvisited.remove(start_node)

            while unvisited:
                current_node = tour[-1]
                probabilities = np.zeros(n)
                for neighbor in unvisited:
                    probabilities[neighbor] = (pheromone[current_node, neighbor]**alpha) * ((1 / (distance_matrix[current_node, neighbor] + 1e-6))**beta)
                
                if np.sum(probabilities) == 0:
                    next_node = np.random.choice(list(unvisited))
                else:
                    probabilities = probabilities / np.sum(probabilities)
                    next_node = np.random.choice(list(range(n)), p=probabilities)
                
                if next_node in unvisited:
                    tour.append(next_node)
                    unvisited.remove(next_node)
                else:
                    next_node = np.random.choice(list(unvisited))

            tour.append(tour[0])
            tours.append(tour)
            tour_length = sum(distance_matrix[tour[i], tour[i+1]] for i in range(n))
            tour_lengths.append(tour_length)

        # Update pheromone trails
        pheromone *= (1 - rho)

        # Emphasize best tours of this iteration
        best_tour_index = np.argmin(tour_lengths)
        best_tour = tours[best_tour_index]
        best_tour_length = tour_lengths[best_tour_index]

        for i in range(n):
            pheromone[best_tour[i], best_tour[i+1]] += Q / best_tour_length
            pheromone[best_tour[i+1], best_tour[i]] += Q / best_tour_length
            
        #Update heuristic_matrix
        for i in range(n):
            heuristics_matrix[best_tour[i], best_tour[i+1]] += 1
            heuristics_matrix[best_tour[i+1], best_tour[i]] += 1

    heuristics_matrix /= 50
    return heuristics_matrix
