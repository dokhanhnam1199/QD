import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively refines a heuristic matrix by probabilistically exploring and exploiting promising edges based on their frequency in short, randomly sampled paths.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix)
    num_iterations = 100
    num_samples = 50
    exploration_prob = 0.1

    for iteration in range(num_iterations):
        edge_counts = np.zeros_like(distance_matrix)

        for _ in range(num_samples):
            current_node = np.random.randint(n)
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(current_node)
            path = [current_node]

            while unvisited_nodes:
                probabilities = []
                candidates = list(unvisited_nodes)
                for neighbor in candidates:
                    if np.random.rand() < exploration_prob:
                        probabilities.append(1.0)  # Explore randomly
                    else:
                        probabilities.append(heuristics_matrix[current_node, neighbor]) #Exploit
                probabilities = np.array(probabilities)
                probabilities /= np.sum(probabilities)

                next_node = np.random.choice(candidates, p=probabilities)
                path.append(next_node)
                unvisited_nodes.remove(next_node)
                current_node = next_node

            path.append(path[0]) # Return to start

            path_length = 0
            for i in range(n):
                 path_length += distance_matrix[path[i], path[i+1]]
            
            for i in range(n):
                node1 = path[i]
                node2 = path[i+1]
                edge_counts[node1, node2] += 1/path_length
                edge_counts[node2, node1] += 1/path_length
        
        heuristics_matrix = 0.9 * heuristics_matrix + 0.1 * edge_counts #Update heuristrics

    return heuristics_matrix
