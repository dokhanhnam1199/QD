import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm samples random tours, calculates edge frequencies, and combines this with inverse distance to provide edge selection heuristics.}"""
  n = distance_matrix.shape[0]
  num_samples = 1000
  edge_counts = np.zeros_like(distance_matrix)

  for _ in range(num_samples):
    permutation = np.random.permutation(n)
    for i in range(n):
      u = permutation[i]
      v = permutation[(i + 1) % n]
      edge_counts[u, v] += 1
      edge_counts[v, u] += 1

  edge_probabilities = edge_counts / num_samples

  heuristics_matrix = edge_probabilities / (distance_matrix + 1e-9)
  return heuristics_matrix
