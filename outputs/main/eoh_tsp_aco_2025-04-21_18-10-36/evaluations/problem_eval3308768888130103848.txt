import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a simplified ant colony optimization approach with adjusted parameters to emphasize distance over pheromone and a different pheromone update rule based on rank.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)
    alpha = 0.5  # Pheromone influence (reduced)
    beta = 3  # Distance influence (increased)
    rho = 0.2  # Evaporation rate
    Q = 10  # Pheromone deposit constant (reduced)
    num_ants = n
    num_iterations = 50 #Reduced iteration

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for iteration in range(num_iterations):
        all_paths = []
        all_path_lengths = []

        for ant in range(num_ants):
            start_node = ant % n
            current_node = start_node
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(start_node)
            path = [start_node]
            path_length = 0

            while unvisited_nodes:
                probabilities = []
                candidates = list(unvisited_nodes)
                for neighbor in candidates:
                    pheromone = pheromone_matrix[current_node, neighbor]
                    distance = distance_matrix[current_node, neighbor]
                    probabilities.append((pheromone**alpha) / (distance**beta))
                probabilities = np.array(probabilities)
                probabilities /= np.sum(probabilities)

                next_node = np.random.choice(candidates, p=probabilities)

                path.append(next_node)
                path_length += distance_matrix[current_node, next_node]
                unvisited_nodes.remove(next_node)
                current_node = next_node

            path.append(start_node)
            path_length += distance_matrix[current_node, start_node]
            all_paths.append(path)
            all_path_lengths.append(path_length)

        # Rank-based pheromone update
        ranked_paths = np.argsort(all_path_lengths)
        pheromone_matrix *= (1 - rho)  # Evaporation

        for rank in range(min(5, num_ants)):  # Top 5 ants deposit pheromone
            best_path = all_paths[ranked_paths[rank]]
            best_path_length = all_path_lengths[ranked_paths[rank]]
            for i in range(n):
                node1 = best_path[i]
                node2 = best_path[i+1]
                pheromone_matrix[node1, node2] += (Q / best_path_length) * (5 - rank)  # Higher rank = more pheromone
                pheromone_matrix[node2, node1] += (Q / best_path_length) * (5 - rank)

    # Aggregate pheromone information into the heuristics matrix
    heuristics_matrix = pheromone_matrix
    return heuristics_matrix
