```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    It also penalizes bins that are too large or too small.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure that we don't divide by zero
    zeros = (bins_remain_cap == 0)
    # Calculate the denominator to avoid division by zero
    denominator = np.where(zeros, 1e-8, bins_remain_cap)
    
    # Calculate priority score based on the ratio
    ratio_score = np.where(zeros, 0, bins_remain_cap / np.maximum(item, denominator))
    
    # Calculate penalty score for extreme bin sizes
    penalty_score = -np.abs(bins_remain_cap - item)
    
    # Calculate the final priority score by combining the ratio score and penalty score
    priority = ratio_score + 0.1 * penalty_score
    
    # Ensure that bins that cannot hold the item have a priority of 0
    priority = np.where(bins_remain_cap < item, 0, priority)
    
    return priority
```
