```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on their relative remaining capacity to the item size,
    emphasizing balance between utilization efficiency and size harmony.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Balance ratio calculations, favoring near-full bins relative to item size
                              (bins_remain_cap / (bins_remain_cap + item)) * 
                              # Relative penalty for size mismatch, favoring bins with capacity closer to item size
                              (1 / (1 + np.abs((bins_remain_cap - item) / item))))
    # Apply a soft, relative penalty for extreme bin sizes to maintain balance
    priority_score *= np.where(np.abs(bins_remain_cap - item) > (bins_remain_cap * 0.5), 0.7, 1)
    return priority_score
```
