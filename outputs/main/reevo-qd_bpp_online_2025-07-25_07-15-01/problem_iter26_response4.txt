```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    It introduces nuanced penalties and bonuses to optimize online BPP heuristics, moderating extremes and size mismatches for better performance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Simplify ratio calculations and prioritize balance
                              (bins_remain_cap / (bins_remain_cap + item)) ** 0.6)
    
    # Moderately penalize extremes and size mismatches with a nuanced approach
    mismatch_penalty = 0.8
    priority_score = np.where((bins_remain_cap - item) > (bins_remain_cap / 2), mismatch_penalty * priority_score, priority_score)
    priority_score = np.where((bins_remain_cap - item) < -(bins_remain_cap / 2), mismatch_penalty * priority_score, priority_score)
    
    # Prioritize near-full bins with a bonus
    near_full_bonus = 1.3
    priority_score = np.where(np.abs(bins_remain_cap - item) < item * 0.1, near_full_bonus * priority_score, priority_score)
    
    # Introduce a penalty for bins that are too empty
    too_empty_penalty = 0.9
    priority_score = np.where(bins_remain_cap > item * 5, too_empty_penalty * priority_score, priority_score)
    
    # Introduce a bonus for bins that are relatively full compared to others
    relative_fullness = bins_remain_cap / np.max(bins_remain_cap)
    priority_score = priority_score * (1 + relative_fullness * 0.2)
    
    # Additional penalty for bins that are almost full but not quite
    almost_full_penalty = 0.95
    priority_score = np.where((bins_remain_cap - item) > 0, 
                              np.where((bins_remain_cap - item) < item * 0.2, almost_full_penalty * priority_score, priority_score), 
                              priority_score)
    
    # Additional bonus for bins that have been recently used
    recent_usebonus = np.where(bins_remain_cap > item * 0.5, 1.05, 1)
    priority_score = priority_score * recent_usebonus
    
    # Introduce a penalty for bins with a large remaining capacity compared to the item size
    large_capacity_penalty = 0.8
    priority_score = np.where(bins_remain_cap > item * 10, large_capacity_penalty * priority_score, priority_score)
    
    # Introduce a bonus for bins with a small remaining capacity compared to the item size
    small_capacity_bonus = 1.1
    priority_score = np.where(bins_remain_cap < item * 0.2, small_capacity_bonus * priority_score, priority_score)
    
    return priority_score
```
