```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    It prioritizes near-full bins, penalizes extremes and size mismatches, and balances ratio calculations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Balance ratio calculations and prioritize near-full bins
                              ((bins_remain_cap - item) / bins_remain_cap) * 
                              # Penalize size mismatches
                              (1 / (1 + np.abs((bins_remain_cap - item) / bins_remain_cap))))
    # Prioritize ratios
    priority_score = np.where(bins_remain_cap > item, 
                              # Near-full bins are prioritized
                              priority_score * (1 - (bins_remain_cap - item) / bins_remain_cap), 
                              priority_score)
    # Penalize extremes
    priority_score = np.where((bins_remain_cap - item) > (bins_remain_cap / 2), 
                              # Very large gaps are penalized
                              0.25 * priority_score, 
                              priority_score)
    priority_score = np.where((bins_remain_cap - item) < -(bins_remain_cap / 2), 
                              # Very small gaps are penalized
                              0.25 * priority_score, 
                              priority_score)
    return priority_score
```
