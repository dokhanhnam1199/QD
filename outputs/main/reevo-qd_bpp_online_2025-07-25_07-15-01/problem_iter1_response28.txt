```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to encourage the packing of items into bins 
    where the item size is close to the remaining capacity, thereby minimizing waste 
    and reducing the number of bins needed.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity of each bin
    remaining_cap = bins_remain_cap
    
    # If the item size is larger than the bin's remaining capacity, set the priority to -inf
    # to discourage packing into this bin
    priority = np.where(remaining_cap < item, -np.inf, remaining_cap)
    
    # Calculate the efficiency of packing the item into each bin
    # The efficiency is defined as the remaining capacity after packing the item
    efficiency = np.where(remaining_cap < item, 0, remaining_cap - item)
    
    # Calculate the priority score as the product of remaining capacity and efficiency
    # This prioritizes bins where the item size is close to the remaining capacity
    priority = np.where(priority != -np.inf, priority * efficiency, priority)
    
    # Define the decay rate for bins with lower priority
    decay_rate = 0.5
    
    # Calculate the decayed priority for bins where the item size is larger than the remaining capacity
    priority = np.where(priority != -np.inf, priority, np.power(decay_rate, np.arange(len(priority))))
    
    return priority
```
