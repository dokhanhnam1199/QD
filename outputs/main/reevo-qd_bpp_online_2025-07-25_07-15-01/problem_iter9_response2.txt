```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    It prioritizes near-full bins, penalizes extremes and size mismatches, and balances ratio calculations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Balance ratio calculations with a moderate penalty for size mismatches
                              ((bins_remain_cap / (bins_remain_cap + item)) * 
                               (1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))) + 
                               # Priority is higher for near-full bins
                               0.5 * (1 - (bins_remain_cap - item) / bins_remain_cap)))
    # Penalize extremes with a moderate penalty
    extreme_penalty = np.where((bins_remain_cap - item) > (bins_remain_cap / 2), 0.2, 0)
    extreme_penalty = np.where((bins_remain_cap - item) < -(bins_remain_cap / 2), 0.2, extreme_penalty)
    priority_score = (1 - extreme_penalty) * priority_score
    return priority_score
```
