```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes balance, moderately penalizes extremes, 
    size mismatches, and underfilled bins, while favoring near-full bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Prioritize balance and similarity between item and bin capacity
                              (bins_remain_cap / (bins_remain_cap + item)) ** 0.7)
    
    # Penalize extremes and size disparities while favoring near-full bins
    priority_score = np.where(np.abs(bins_remain_cap - item) > item, 0.5 * priority_score, priority_score)
    priority_score = np.where(np.abs(bins_remain_cap - item) < item * 0.2, 1.1 * priority_score, priority_score)
    priority_score = np.where(bins_remain_cap > item * 2.5, 0.2 * priority_score, priority_score)
    
    # Maintain a minimum priority to avoid extreme values
    priority_score = np.maximum(priority_score, 0.005)
    
    return priority_score
```
