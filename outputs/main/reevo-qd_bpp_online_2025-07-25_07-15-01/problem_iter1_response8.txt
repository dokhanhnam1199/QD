```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    If a bin has a remaining capacity close to the item size, it will have a higher priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # calculate the ratio of the remaining capacity and the item size for each bin
    # a higher ratio means a bin has less spare capacity after adding the item
    ratio = bins_remain_cap / item
    
    # the ratio is clamped to a minimum value of 1 to avoid very large ratio values
    # this helps to prevent underflow when calculating the priority scores
    ratio = np.maximum(ratio, 1.0)
    
    # the priority score for each bin is the inverse of its ratio
    # a lower ratio means a bin has a higher priority score
    priority = np.power(1.0 / ratio, 2.0)
    
    # return the priority score for each bin
    return priority
```
