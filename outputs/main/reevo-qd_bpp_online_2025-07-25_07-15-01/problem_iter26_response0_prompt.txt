{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.\n    It introduces nuanced penalties and bonuses to optimize online BPP heuristics, moderating extremes and size mismatches for better performance.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins with less capacity than the item get zero priority\n    priority_score = np.where(bins_remain_cap < item, 0, \n                              # Simplify ratio calculations and prioritize balance\n                              (bins_remain_cap / (bins_remain_cap + item)) ** 0.7)\n    # Moderately penalize extremes and size mismatches\n    priority_score = np.where((bins_remain_cap - item) > (bins_remain_cap / 2), 0.9 * priority_score, priority_score)\n    priority_score = np.where((bins_remain_cap - item) < -(bins_remain_cap / 2), 0.9 * priority_score, priority_score)\n    # Prioritize near-full bins with a bonus\n    priority_score = np.where(np.abs(bins_remain_cap - item) < item * 0.15, 1.2 * priority_score, priority_score)\n    # Introduce a penalty for bins that are too empty\n    priority_score = np.where(bins_remain_cap > item * 6, 0.92 * priority_score, priority_score)\n    # Introduce a bonus for bins that are relatively full compared to others\n    relative_fullness = bins_remain_cap / np.max(bins_remain_cap)\n    priority_score = priority_score * (1 + relative_fullness * 0.25)\n    # Additional penalty for bins that are almost full but not quite\n    priority_score = np.where((bins_remain_cap - item) > 0, \n                              np.where((bins_remain_cap - item) < item * 0.25, 0.96 * priority_score, priority_score), \n                              priority_score)\n    # Additional bonus for bins that have been recently used\n    recent_use_bonus = np.where(bins_remain_cap > item * 0.6, 1.08, 1)\n    priority_score = priority_score * recent_use_bonus\n    # Prioritize bins with the smallest size mismatch\n    size_mismatch = np.abs(bins_remain_cap - item)\n    priority_score = priority_score / (1 + size_mismatch / item)\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.\n    It introduces nuanced penalties and bonuses to optimize online BPP heuristics, moderating extremes and size mismatches for better performance.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins with less capacity than the item get zero priority\n    priority_score = np.where(bins_remain_cap < item, 0, \n                              # Simplify ratio calculations and prioritize balance\n                              (bins_remain_cap / (bins_remain_cap + item)) ** 0.7)\n    \n    # Moderately penalize extremes and size mismatches\n    priority_score = np.where((bins_remain_cap - item) > (bins_remain_cap / 2), 0.85 * priority_score, priority_score)\n    priority_score = np.where((bins_remain_cap - item) < -(bins_remain_cap / 2), 0.85 * priority_score, priority_score)\n    \n    # Prioritize near-full bins with a bonus\n    priority_score = np.where(np.abs(bins_remain_cap - item) < item * 0.1, 1.4 * priority_score, priority_score)\n    \n    # Introduce a penalty for bins that are too empty\n    priority_score = np.where(bins_remain_cap > item * 6, 0.85 * priority_score, priority_score)\n    \n    # Introduce a bonus for bins that are relatively full compared to others\n    relative_fullness = bins_remain_cap / np.max(bins_remain_cap)\n    priority_score = priority_score * (1 + relative_fullness * 0.25)\n    \n    # Additional penalty for bins that are almost full but not quite\n    priority_score = np.where((bins_remain_cap - item) > 0, \n                              np.where((bins_remain_cap - item) < item * 0.2, 0.9 * priority_score, priority_score), \n                              priority_score)\n    \n    # Additional bonus for bins that have been recently used\n    recent_use_bonus = np.where(bins_remain_cap > item * 0.6, 1.1, 1)\n    priority_score = priority_score * recent_use_bonus\n    \n    # Penalize bins with small remaining capacities to avoid fragmenting items\n    priority_score = np.where(bins_remain_cap < item * 0.15, 0.75 * priority_score, priority_score)\n    \n    # Bonus for bins that can fit the item with minimal waste\n    priority_score = np.where(np.abs(bins_remain_cap - item) < item * 0.03, 1.2 * priority_score, priority_score)\n    \n    # New: Encourage diversity by penalizing bins with similar remaining capacities\n    diversity_penalty = np.where(np.abs(bins_remain_cap - np.mean(bins_remain_cap)) < np.std(bins_remain_cap) / 2, 0.95, 1)\n    priority_score = priority_score * diversity_penalty\n    \n    return priority_score\n\n[Reflection]\nTune penalties and bonuses to balance bin utilization and size mismatches.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}