```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    It prioritizes near-full bins and penalizes extremes and size mismatches.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Priority is higher for bins that can just hold the item and are near-full
                              (1 - np.abs((bins_remain_cap - item) / bins_remain_cap)) * (1 - (item / bins_remain_cap)))
    # Penalize extremes and size mismatches
    priority_score = np.where((bins_remain_cap - item) > (bins_remain_cap / 2), 0.5 * priority_score, priority_score)
    return priority_score
```
