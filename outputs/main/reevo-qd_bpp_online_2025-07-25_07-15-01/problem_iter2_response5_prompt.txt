{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to encourage the packing of items into bins \n    where the item size is close to the remaining capacity, thereby minimizing waste \n    and reducing the number of bins needed.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity of each bin\n    remaining_cap = bins_remain_cap\n    \n    # If the item size is larger than the bin's remaining capacity, set the priority to -inf\n    # to discourage packing into this bin\n    priority = np.where(remaining_cap < item, -np.inf, remaining_cap)\n    \n    # Calculate the efficiency of packing the item into each bin\n    # The efficiency is defined as the remaining capacity after packing the item\n    efficiency = np.where(remaining_cap < item, 0, remaining_cap - item)\n    \n    # Calculate the priority score as the product of remaining capacity and efficiency\n    # This prioritizes bins where the item size is close to the remaining capacity\n    priority = np.where(priority != -np.inf, priority * efficiency, priority)\n    \n    # Define the decay rate for bins with lower priority\n    decay_rate = 0.5\n    \n    # Calculate the decayed priority for bins where the item size is larger than the remaining capacity\n    priority = np.where(priority != -np.inf, priority, np.power(decay_rate, np.arange(len(priority))))\n    \n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have enough capacity to hold the item and \n    that have the least remaining capacity after the item is packed. This approach is known as the \n    'Best Fit' strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize the priority array with zeros\n    priority = np.zeros_like(bins_remain_cap)\n    \n    # Mask the bins that have enough capacity to hold the item\n    enough_capacity_mask = bins_remain_cap >= item\n    \n    # If there are no bins with enough capacity, fill the item into the bin with the most capacity\n    if not np.any(enough_capacity_mask):\n        priority[np.argmax(bins_remain_cap)] = 1\n    else:\n        # Calculate the remaining capacity of each bin after the item is packed\n        remaining_cap = bins_remain_cap[enough_capacity_mask] - item\n        \n        # Assign higher priority to bins with less remaining capacity\n        priority[enough_capacity_mask] = 1 / (remaining_cap + 1)\n    \n    return priority\n\n[Reflection]\nPrioritize simplicity and relevant problem features.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}