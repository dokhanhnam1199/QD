```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function favors bins that have the most available capacity,
    while being cautious of bins that would have less than half of their capacity
    remaining after adding the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the difference between each bin's remaining capacity and the item size
    remaining_cap_diffs = bins_remain_cap - item
    
    # Set priorities to the reciprocal of the difference, ensuring a higher priority for bins with more available capacity
    # If a bin cannot hold the item, set its priority to a very low value
    for i in range(len(remaining_cap_diffs)):
        if remaining_cap_diffs[i] < 0:
            priorities[i] = -1  # Item doesn't fit
        else:
            priorities[i] = 1 / np.exp((remaining_cap_diffs[i] - item) / bins_remain_cap[i])
    
    # Adjust priorities to discourage bins with less than half of their capacity remaining
    priorities = np.multiply(priorities, np.where(bins_remain_cap > 2 * item, 1, 0.5))
    
    return priorities
```
