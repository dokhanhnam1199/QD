```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have enough capacity to hold the item and 
    that have the least remaining capacity after the item is packed. This approach is known as the 
    'Best Fit' strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize the priority array with zeros
    priority = np.zeros_like(bins_remain_cap)
    
    # Mask the bins that have enough capacity to hold the item
    enough_capacity_mask = bins_remain_cap >= item
    
    # If there are no bins with enough capacity, fill the item into the bin with the most capacity
    if not np.any(enough_capacity_mask):
        priority[np.argmax(bins_remain_cap)] = 1
    else:
        # Calculate the remaining capacity of each bin after the item is packed
        remaining_cap = bins_remain_cap[enough_capacity_mask] - item
        
        # Assign higher priority to bins with less remaining capacity
        priority[enough_capacity_mask] = 1 / (remaining_cap + 1)
    
    return priority
```
