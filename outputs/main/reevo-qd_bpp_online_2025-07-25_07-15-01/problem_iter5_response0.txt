```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function simplifies and prioritizes ratios, near-full bins, 
    and penalizes extremes. It balances calculations and combines key factors 
    for more effective heuristics.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Simplify and prioritize ratios
                              (bins_remain_cap - item) / bins_remain_cap)
    
    # Prioritize near-full bins
    near_full_priority = np.where(bins_remain_cap - item > 0, 
                                  1 / (1 + (bins_remain_cap - item) / bins_remain_cap), 0)
    priority_score += near_full_priority

    # Penalize extremes
    priority_score = np.where((bins_remain_cap - item) / bins_remain_cap > 0.5, 
                              0.5 * priority_score, priority_score)
    priority_score = np.where((bins_remain_cap - item) / bins_remain_cap < -0.5, 
                              0.5 * priority_score, priority_score)

    # Normalize priority scores
    priority_score = priority_score / np.sum(np.abs(priority_score)) if np.sum(np.abs(priority_score)) > 0 else priority_score

    return priority_score
```
