```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function balances efficiency and penalties for size mismatches,
    prioritizing bins that can efficiently hold the item while discouraging extreme size differences.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Balance efficiency and size mismatch penalties
                              (bins_remain_cap / (bins_remain_cap + item)) * 
                              # Penalty for size mismatch, favoring bins that can just hold the item
                              np.exp(-np.abs((bins_remain_cap - item) / (bins_remain_cap + 1e-8))))

    # Apply a bonus for bins that are nearly full to encourage efficient use of space
    priority_score *= np.where((bins_remain_cap - item) < (bins_remain_cap / 10), 1.2, 1)

    # Apply a penalty for extreme bin sizes to discourage very large or very small bins
    priority_score *= np.where(np.abs(bins_remain_cap - item) > (bins_remain_cap / 2), 
                               # soft penalty, reducing priority but not eliminating it
                               0.5, 
                               # medium penalty for bins that are too large or too small
                               np.where(np.abs(bins_remain_cap - item) > (bins_remain_cap / 4), 0.8, 1))

    return priority_score
```
