{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function simplifies and prioritizes ratios, near-full bins, \n    and penalizes extremes. It balances calculations and combines key factors \n    for more effective heuristics.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins with less capacity than the item get zero priority\n    priority_score = np.where(bins_remain_cap < item, 0, \n                              # Simplify and prioritize ratios\n                              (bins_remain_cap - item) / bins_remain_cap)\n    \n    # Prioritize near-full bins\n    near_full_priority = np.where(bins_remain_cap - item > 0, \n                                  1 / (1 + (bins_remain_cap - item) / bins_remain_cap), 0)\n    priority_score += near_full_priority\n\n    # Penalize extremes\n    priority_score = np.where((bins_remain_cap - item) / bins_remain_cap > 0.5, \n                              0.5 * priority_score, priority_score)\n    priority_score = np.where((bins_remain_cap - item) / bins_remain_cap < -0.5, \n                              0.5 * priority_score, priority_score)\n\n    # Normalize priority scores\n    priority_score = priority_score / np.sum(np.abs(priority_score)) if np.sum(np.abs(priority_score)) > 0 else priority_score\n\n    return priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function combines multiple factors with penalties for extreme bin sizes.\n    The factors include the ratio of the remaining capacity to the item size, \n    the remaining capacity after the item is packed, and penalties for bins that are too large or too small.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Mask the bins that have enough capacity to hold the item\n    enough_capacity_mask = bins_remain_cap >= item\n    \n    # Initialize the priority array with zeros\n    priority = np.zeros_like(bins_remain_cap)\n    \n    # If there are no bins with enough capacity, fill the item into the bin with the most capacity\n    if not np.any(enough_capacity_mask):\n        priority[np.argmax(bins_remain_cap)] = 1\n    else:\n        # Calculate the ratio of the remaining capacity to the item size\n        ratio = bins_remain_cap / np.maximum(item, bins_remain_cap)\n        \n        # Calculate the remaining capacity of each bin after the item is packed\n        remaining_cap = np.where(enough_capacity_mask, bins_remain_cap - item, 1e8)\n        \n        # Assign higher priority to bins with less remaining capacity\n        remaining_cap_score = 1 / (remaining_cap + 1)\n        \n        # Calculate penalty score for extreme bin sizes\n        penalty_score = -np.abs(bins_remain_cap - item)\n        \n        # Calculate the final priority score by combining the ratio score, remaining capacity score, and penalty score\n        priority = np.where(enough_capacity_mask, \n                            0.5 * ratio + 0.3 * remaining_cap_score + 0.2 * penalty_score, \n                            0)\n    \n    return priority\n\n[Reflection]\nCombine multiple factors with balanced weights.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}