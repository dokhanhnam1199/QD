{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins with the most remaining capacity,\n    while preventing bins from being overfilled.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Ensure the item can fit in the bin\n    can_fit = remaining_cap_after_addition >= 0\n    \n    # Set priority to 0 for bins that cannot fit the item\n    priority = np.where(can_fit, remaining_cap_after_addition, -np.inf)\n    \n    # Add a small random value to the priority to break ties randomly\n    priority += np.random.uniform(0, 1e-9, size=priority.shape)\n    \n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.\n    If a bin has a higher remaining capacity compared to the item size, it gets a higher priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that we don't divide by zero\n    zeros = (bins_remain_cap == 0)\n    # Calculate the denominator to avoid division by zero\n    denominator = np.where(zeros, 1e-8, bins_remain_cap)\n    \n    # Calculate priority score based on the ratio\n    priority = np.where(zeros, 0, bins_remain_cap / np.maximum(item, denominator))\n    \n    # Add additional scoring to penalize bins that are too large or too small\n    priority -= (bins_remain_cap - item) ** 2\n    \n    return priority\n\n[Reflection]\nConsider ratio-based scoring and penalize size mismatches.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}