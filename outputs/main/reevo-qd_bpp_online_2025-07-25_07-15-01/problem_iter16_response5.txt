```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on their remaining capacity relative to the item size,
    balancing between utilizing space efficiently and avoiding extreme bin sizes with simplified calculations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Simplify and prioritize balance
                              bins_remain_cap / (bins_remain_cap + item))
    
    # Apply moderate penalties for size mismatches and extremes
    priority_score *= np.where(np.abs(bins_remain_cap - item) > item, 0.5, 1)
    priority_score *= np.where((bins_remain_cap - item) < (item * 0.1), 1.2, 1)
    priority_score *= np.where(bins_remain_cap > item * 2, 0.75, 1)
    
    return priority_score
```
