```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function simplifies and balances ratio calculations, 
    prioritizes bins based on their ability to hold the item, and penalizes size mismatches.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Simplify and balance ratio calculations
                              (bins_remain_cap / (bins_remain_cap + item)) * 
                              # Priority is higher for bins that can just hold the item
                              (1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))))
    # Penalize extremes and size mismatches
    priority_score = np.where(np.abs(bins_remain_cap - item) > bins_remain_cap / 2, 0.5 * priority_score, priority_score)
    return priority_score
```
