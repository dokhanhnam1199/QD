```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    It introduces nuanced penalties and bonuses to optimize online BPP heuristics, moderating extremes and size mismatches for better performance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Simplify ratio calculations and prioritize balance
                              (bins_remain_cap / (bins_remain_cap + item)) ** 0.6)
    # Moderately penalize extremes and size mismatches
    priority_score = np.where((bins_remain_cap - item) > (bins_remain_cap * 0.6), 0.7 * priority_score, priority_score)
    priority_score = np.where((bins_remain_cap - item) < -(bins_remain_cap * 0.6), 0.7 * priority_score, priority_score)
    # Prioritize near-full bins
    priority_score = np.where(np.abs(bins_remain_cap - item) < item * 0.2, 1.3 * priority_score, priority_score)
    # Introduce bonus for bins with similar size to the item
    priority_score = np.where(np.abs(bins_remain_cap - item) < item * 0.05, 1.5 * priority_score, priority_score)
    # Penalize bins with very low remaining capacity
    priority_score = np.where(bins_remain_cap < item * 0.1, 0.5 * priority_score, priority_score)
    return priority_score
```
