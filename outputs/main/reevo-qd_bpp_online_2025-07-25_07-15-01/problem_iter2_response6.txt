```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    If a bin has a higher remaining capacity compared to the item size, it gets a higher priority score.
    It also penalizes bins that are too large or too small compared to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure that we don't divide by zero
    zeros = (bins_remain_cap == 0)
    # Calculate the denominator to avoid division by zero
    denominator = np.where(zeros, 1e-8, bins_remain_cap)
    
    # Calculate priority score based on the ratio
    ratio = bins_remain_cap / (item + 1e-8)  # Add 1e-8 to item to avoid division by zero
    
    # Penalize bins that are too large or too small
    penalty = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item + 1e-8))
    
    # Calculate final priority score
    priority = ratio * penalty
    
    # Ensure the item can fit in the bin
    can_fit = bins_remain_cap >= item
    priority = np.where(can_fit, priority, -np.inf)
    
    # Add a small random value to the priority to break ties randomly
    priority += np.random.uniform(0, 1e-9, size=priority.shape)
    
    return priority
```
