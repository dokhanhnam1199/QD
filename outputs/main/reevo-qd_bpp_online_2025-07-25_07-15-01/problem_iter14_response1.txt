```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on their remaining capacity relative to the item size,
    balancing between utilizing space efficiently and avoiding extreme bin sizes.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Balance ratio calculations, prioritizing near-full bins
                              (bins_remain_cap / (bins_remain_cap + item)) * 
                              # Penalty for size mismatch, favoring bins that can just hold the item
                              (1 / (1 + np.abs((bins_remain_cap - item) / (bins_remain_cap + 1e-8)))))

    # Apply a penalty for extreme bin sizes to discourage very large or very small bins
    size_diff = np.abs(bins_remain_cap - item)
    rel_size_diff = size_diff / (bins_remain_cap + 1e-8)
    extreme_penalty = 1 / (1 + rel_size_diff)
    priority_score *= extreme_penalty

    # Further soft penalty for bins that are too full or too empty
    too_full_penalty = np.where(bins_remain_cap < item * 0.2, 0.5, 1)
    too_empty_penalty = np.where(bins_remain_cap > item * 5, 0.5, 1)
    priority_score *= too_full_penalty * too_empty_penalty

    return priority_score
```
