```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on their remaining capacity relative to the item size,
    emphasizing balance between utilization efficiency and size harmony with simplified calculations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Simplify ratio calculations to favor near-full bins
                              bins_remain_cap / (bins_remain_cap + item))
    # Moderately penalize size mismatches
    priority_score *= np.where(np.abs(bins_remain_cap - item) > (bins_remain_cap * 0.5), 0.8, 1)
    # Slightly prioritize near-full bins
    priority_score *= np.where(np.abs(bins_remain_cap - item) < (item * 0.1), 1.05, 1)
    return priority_score
```
