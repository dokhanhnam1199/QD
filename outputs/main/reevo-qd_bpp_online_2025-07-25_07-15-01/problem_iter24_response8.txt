```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on their remaining capacity relative to the item size,
    balancing between utilizing space efficiently and avoiding extreme bin sizes with nuanced penalties and bonuses.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Prioritize near-full bins, balancing efficiency and size mismatch
                              (bins_remain_cap / (bins_remain_cap + item)) * 
                              # Nuanced penalty for size mismatch, favoring bins that can just hold the item
                              (1 / (1 + np.abs((bins_remain_cap - item) / (bins_remain_cap + 1e-8)))))

    # Apply graduated penalties for extreme bin sizes to discourage very large or very small bins
    extreme_penalty = np.interp(np.abs(bins_remain_cap - item), [0, bins_remain_cap/4, bins_remain_cap/2, bins_remain_cap], [1, 0.8, 0.5, 0.2])
    priority_score *= extreme_penalty

    # Apply a bonus for bins that are nearly full to encourage efficient use of space
    near_full_bonus = np.interp(bins_remain_cap - item, [-bins_remain_cap, -bins_remain_cap/10, 0], [1, 1.2, 1])
    priority_score *= near_full_bonus

    # Soften extreme scores to maintain flexibility
    priority_score = np.clip(priority_score, 1e-6, 1)

    return priority_score
```
