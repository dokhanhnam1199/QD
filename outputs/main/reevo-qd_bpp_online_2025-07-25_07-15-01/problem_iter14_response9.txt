```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function simplifies and balances calculations, moderately penalizes extremes and size mismatches, 
    and prioritizes near-full bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Simplify ratio calculations and prioritize balance
                              (bins_remain_cap / (bins_remain_cap + item)) ** 0.5 * 
                              # Prioritize near-full bins
                              (1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + item)) ** 0.5)
    # Moderately penalize extremes and size mismatches
    priority_score = np.where(np.abs(bins_remain_cap - item) > bins_remain_cap * 0.5, 0.75 * priority_score, priority_score)
    # Further prioritize near-full bins
    priority_score = np.where(np.abs(bins_remain_cap - item) < item * 0.1, 1.1 * priority_score, priority_score)
    return priority_score
```
