{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.\n    If a bin has a higher remaining capacity compared to the item size, it gets a higher priority score.\n    It also penalizes bins that are too large or too small compared to the item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that we don't divide by zero\n    zeros = (bins_remain_cap == 0)\n    # Calculate the denominator to avoid division by zero\n    denominator = np.where(zeros, 1e-8, bins_remain_cap)\n    \n    # Calculate priority score based on the ratio\n    ratio = bins_remain_cap / (item + 1e-8)  # Add 1e-8 to item to avoid division by zero\n    \n    # Penalize bins that are too large or too small\n    penalty = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item + 1e-8))\n    \n    # Calculate final priority score\n    priority = ratio * penalty\n    \n    # Ensure the item can fit in the bin\n    can_fit = bins_remain_cap >= item\n    priority = np.where(can_fit, priority, -np.inf)\n    \n    # Add a small random value to the priority to break ties randomly\n    priority += np.random.uniform(0, 1e-9, size=priority.shape)\n    \n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.\n    It prioritizes near-full bins and penalizes extremes and size mismatches.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Bins with less capacity than the item get zero priority\n    priority_score = np.where(bins_remain_cap < item, 0, \n                              # Priority is higher for bins that can just hold the item and are near-full\n                              (1 - np.abs((bins_remain_cap - item) / bins_remain_cap)) / (1 + np.abs(bins_remain_cap - item)))\n    # Penalize bins that are too empty or too full\n    priority_score = np.where(bins_remain_cap / (bins_remain_cap + item) < 0.2, priority_score * 0.5, \n                              np.where(bins_remain_cap / (bins_remain_cap + item) > 0.8, priority_score * 0.8, priority_score))\n    return priority_score\n\n[Reflection]\nPenalize extremes, prioritize near-full bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}