```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function simplifies and balances ratio calculations, 
    moderately penalizes extremes and size mismatches, and prioritizes near-full bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Simplify ratio calculations and prioritize balance
                              (bins_remain_cap / (bins_remain_cap + item)) ** 0.6)
    
    # Moderately penalize extremes and size disparities
    priority_score = np.where(np.abs(bins_remain_cap - item) > item, 0.6 * priority_score, priority_score)
    
    # Prioritize near-full bins and penalize underfilled bins
    priority_score = np.where(np.abs(bins_remain_cap - item) < item * 0.1, 1.2 * priority_score, priority_score)
    priority_score = np.where(bins_remain_cap > item * 2, 0.3 * priority_score, priority_score)
    
    # Avoid extremely small priority scores
    priority_score = np.maximum(priority_score, 0.01)
    
    return priority_score
```
