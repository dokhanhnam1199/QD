```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity to the item size
    and the absolute difference between the remaining capacity and the item size.
    If a bin has just enough capacity to hold the item, it gets the highest priority.
    Bins with less capacity than the item get zero priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Mask for bins with sufficient capacity
    sufficient_capacity = bins_remain_cap >= item
    
    # Calculate the ratio of the remaining capacity to the item size
    ratio = np.where(sufficient_capacity, bins_remain_cap / item, 0)
    
    # Calculate the absolute difference between the remaining capacity and the item size
    abs_diff = np.where(sufficient_capacity, np.abs(bins_remain_cap - item), np.inf)
    
    # Priority is higher for bins with a ratio close to 1 and an absolute difference close to 0
    priority_score = np.where(sufficient_capacity, 1 / (1 + abs_diff) * ratio, 0)
    
    return priority_score
```
