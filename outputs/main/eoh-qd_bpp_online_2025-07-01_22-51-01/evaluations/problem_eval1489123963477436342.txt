def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin for an item based on remaining capacity, penalizing bins that are too full or too empty relative to the item size, favoring bins with capacity slightly larger than the item.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap < item:
      priority = -1000  # Very low priority if item doesn't fit
    else:
      # Calculate wasted space if the item is placed in this bin
      wasted_space = cap - item
      
      # Calculate a score based on how well the item fits:
      #  - Ideal fit: wasted_space is small
      #  - Poor fit: wasted_space is large (bin is too big)
      # Also penalize bins that are almost full (cap close to item size)
      
      priority = 100 - wasted_space - abs(cap - 2 * item)
      
      
    priorities.append(priority)
  return priority
