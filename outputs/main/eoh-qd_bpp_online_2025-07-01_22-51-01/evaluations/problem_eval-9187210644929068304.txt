def priority_v2(item, bins_remain_cap):
    """{Assign a priority score to each bin based on how well the item fits, favoring bins with remaining capacity close to the item size and avoiding bins that would be filled beyond a certain threshold.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            # Calculate the waste if the item is placed in this bin
            waste = cap - item
            # Give a higher priority to bins with smaller waste, but penalize if waste is too small 
            # or if it causes the bin to be filled beyond a threshold (e.g., 90% full).
            if item / cap > 0.9:
                priority = -100 # Huge penalty
            else:
                priority = 1 / (waste + 0.1) # Avoid division by zero
        else:
            priority = -float('inf')  # Cannot fit in this bin

        priorities.append(priority)
    return priority
