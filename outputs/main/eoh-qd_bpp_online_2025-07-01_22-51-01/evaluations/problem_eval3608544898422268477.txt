def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority based on the remaining capacity of bins after hypothetically placing the item, favoring bins with smaller remaining capacity but penalizing bins that would become too full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining = cap - item
      priority_score = 1 / (remaining + 0.1) - (remaining > 0.8 * cap) * 100  # Smaller remaining, higher priority, penalize very full bins
    else:
      priority_score = -float('inf')  # Cannot fit, lowest priority
    priority.append(priority_score)
  return priority
