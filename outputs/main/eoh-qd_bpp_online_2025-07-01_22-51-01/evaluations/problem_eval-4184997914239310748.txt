def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on a combination of remaining capacity and the amount of wasted space after packing the item, favoring bins that are sufficiently full but avoid excessive wasted space.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      priority = (item / cap) + (1 / (wasted_space + 1))
      priorities.append(priority)
    else:
      priorities.append(-1)  # Assign low priority if item doesn't fit
  return priority
