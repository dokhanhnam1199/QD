def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on a combination of remaining capacity and wasted space, favoring bins that can accommodate the item with minimal wasted space while also considering bins that are nearly full to avoid excessive fragmentation.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      # Give higher priority to bins that can fit the item with minimal wasted space
      priority_score = 1.0 / (wasted_space + 0.1) 
      # Slightly favor bins that are already relatively full (to avoid fragmentation)
      priority_score += 0.1 * (1 - (cap / sum(bins_remain_cap)))
    else:
      priority_score = -1  # Assign negative priority if item doesn't fit
    priority.append(priority_score)
  return priority
