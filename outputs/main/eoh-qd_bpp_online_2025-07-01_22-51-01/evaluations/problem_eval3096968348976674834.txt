def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority score for each bin based on a combination of remaining capacity and waste, favoring bins that can accommodate the item with minimal waste, and penalizing bins with very low remaining capacity to avoid fragmentation.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      priority_score = (cap * 0.7) - (waste * 0.3) # Higher cap, lower waste = higher priority
      priority.append(priority_score)
    else:
      priority.append(-1)  # Impossible to fit, lowest priority
  return priority
