{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for each bin in an online bin\u2011packing setting.\n\n    The score favours bins where the item fits exactly (slack = 0) by using\n    the inverse of the slack plus an adaptive epsilon.  An adaptive epsilon,\n    proportional to the total remaining capacity, guards against division by\n    zero and scales the scores to the current waste.  A tiny random perturbation\n    (scaled by epsilon) is added only to bins that are tied for the tightest\n    fit, and a deterministic index\u2011based penalty resolves any remaining ties\n    in favour of lower\u2011indexed bins.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        1\u2011D array of priority scores (same length as ``bins_remain_cap``).\n        Infeasible bins (capacity < item) receive ``-np.inf``.\n    \"\"\"\n    # Ensure we are working with a float array.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Feasibility mask: bins that can accommodate the item.\n    feasible = caps >= item\n\n    # Initialise priority vector with -inf for infeasible bins.\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No bin can hold the item; return all -inf.\n        return priorities\n\n    # Slack (unused capacity) if the item were placed in each bin.\n    slack = caps - item\n\n    # Adaptive epsilon: small positive number that grows with the total\n    # remaining capacity (i.e., current waste).  This keeps scores numerically\n    # stable across problem scales.\n    total_remain = caps.sum()\n    epsilon = max(1e-12, total_remain * 1e-12)\n\n    # Base score: inverse slack (higher for tighter fits; exact fits get\n    # the maximal value 1/epsilon).\n    base_score = np.zeros_like(caps, dtype=float)\n    base_score[feasible] = 1.0 / (slack[feasible] + epsilon)\n\n    # Identify bins with the smallest slack among feasible bins (tightest fits).\n    min_slack = np.min(slack[feasible])\n    tie_mask = feasible & np.isclose(slack, min_slack, atol=1e-12)\n\n    # Add a tiny random noise only to the tied bins to break stochastic ties.\n    # Scale the noise by epsilon so it never overwhelms the base score.\n    noise_scale = epsilon * 1e-6\n    random_noise = np.random.rand(np.sum(tie_mask)) * noise_scale\n    base_score[tie_mask] += random_noise\n\n    # Deterministic tie\u2011breaker: small penalty proportional to bin index.\n    # The penalty is far smaller than any meaningful score difference.\n    index_penalty = np.arange(caps.size, dtype=float) * (epsilon * 1e-7)\n    base_score[feasible] -= index_penalty[feasible]\n\n    # Assign the computed scores to the output array.\n    priorities[feasible] = base_score[feasible]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global RNG for tie\u2011breaking\n_rng = np.random.default_rng()\n\n    \"\"\"\n    Compute a priority score for each bin in the online Bin Packing Problem.\n    The score is biased toward bins with smaller slack (remaining capacity after\n    placing the item) by using an inverse\u2011slack weighting. The weights are\n    normalised to avoid extreme values, a tiny random perturbation is added\n    for deterministic tie\u2011breaking, and infeasible bins receive -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. The bin with the highest score should be\n        selected for the item.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.size\n    priority = np.full_like(caps, -np.inf, dtype=float)\n\n    if n == 0:\n        return priority\n\n    slack = caps - item\n    feasible = slack >= 0\n    if not np.any(feasible):\n        return priority\n\n    eps = 1e-12\n    slack_f = slack[feasible]\n    # Inverse\u2011slack weighting (larger when slack is smaller)\n    inv_slack = 1.0 / (slack_f + eps)\n\n    # Normalise to keep values bounded (max weight becomes 1.0)\n    max_inv = np.max(inv_slack)\n    if max_inv > 0:\n        inv_slack /= max_inv\n\n    # Random component to bias the decision while retaining some randomness\n    rand = _rng.random(inv_slack.shape)\n\n    # Combine bias with randomness; tiny tie\u2011breaker added for deterministic tie\u2011breaks\n    scores = inv_slack * rand\n    scores += _rng.random(inv_slack.shape) * 1e-12\n\n    priority[feasible] = scores\n    return priority\n\n[Reflection]\nUse normalized inverse slack, constant epsilon, vectorized computation, reproducible RNG tie\u2011breaks, and minimal deterministic penalties.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}