{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    random_state: Optional[int] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for online Bin Packing.\n\n    Each feasible bin (i.e. a bin with enough remaining capacity) receives a\n    score that blends a tight\u2011fit bias with a random component.  The relative\n    weight of the bias adapts online based on the current packing situation:\n    when few bins can accommodate the item we trust the bias more (tight fit);\n    when many bins are feasible we rely more on randomness to explore diverse\n    placements.\n\n    Infeasible bins receive a score of -inf so they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n    random_state : int, optional\n        Seed for reproducibility.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better) for each bin.\n    \"\"\"\n    eps = 1e-12                     # avoid division by zero\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n_bins = caps.size\n\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    # Identify feasible bins\n    feasible = caps >= item\n    if not np.any(feasible):\n        # Nothing fits \u2013 return all -inf\n        return priorities\n\n    # Slack after placing the item in each feasible bin\n    slack = caps - item\n\n    # ---- 1. Tight\u2011fit bias -------------------------------------------------\n    # Bias is higher when the remaining slack is small.\n    bias = np.zeros_like(caps)\n    bias[feasible] = 1.0 / (slack[feasible] + eps)\n\n    # Normalise bias to the range [0, 1] for a fair combination with randomness.\n    max_bias = bias[feasible].max()\n    bias_norm = np.zeros_like(caps)\n    bias_norm[feasible] = bias[feasible] / (max_bias + eps)\n\n    # ---- 2. Random component -----------------------------------------------\n    rng = np.random.default_rng(random_state)\n    rand_scores = rng.random(n_bins)          # uniform [0, 1) for every bin\n\n    # ---- 3. Adaptive weighting -----------------------------------------------\n    # Weight of the tight\u2011fit bias depends on how many bins are feasible.\n    # Few feasible bins \u2192 high bias weight (focus on tight fit).\n    # Many feasible bins \u2192 lower bias weight (more exploration).\n    feasible_frac = feasible.sum() / n_bins          # \u2208 (0, 1]\n    w_bias = 1.0 - feasible_frac                      # larger when few bins fit\n\n    # Clamp the weight to avoid extreme domination of one term.\n    w_bias = np.clip(w_bias, 0.1, 0.9)\n\n    # ---- 4. Combine bias and randomness ---------------------------------------\n    # Linear blend of the two components for feasible bins.\n    combined = np.zeros_like(caps)\n    combined[feasible] = (\n        w_bias * bias_norm[feasible] + (1.0 - w_bias) * rand_scores[feasible]\n    )\n\n    # ---- 5. Tiny random tie\u2011breaker (numerical stability) --------------------\n    tie_eps = 1e-8\n    combined[feasible] += rng.random(combined[feasible].shape) * tie_eps\n\n    # Fill the output array\n    priorities[feasible] = combined[feasible]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    low_percentile: float = 0.10,\n    boost_factor: float = 5.0,\n    random_state: Optional[int] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem (BPP).\n\n    For each existing bin the function returns a score; the bin with the highest\n    score is selected for the incoming ``item``.  The heuristic combines:\n\n    1. **Adaptive inverse\u2011slack bias** \u2013 bins that would have less remaining\n       capacity after placement receive a larger base score.\n    2. **Low\u2011percentile slack boost** \u2013 bins whose post\u2011placement slack falls\n       below a low percentile (default 10\u202f%) are boosted, encouraging the\n       algorithm to fill \u201calmost full\u2019\u2019 bins.\n    3. **Tiny random tie\u2011breaker** \u2013 a minute random perturbation to break ties\n       while preserving the deterministic bias.\n\n    Infeasible bins (those that cannot accommodate the item) receive ``-np.inf``,\n    guaranteeing they are never chosen.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n    low_percentile : float, optional\n        Percentile (0\u20111) used to define \u201calmost full\u2019\u2019 bins. Default is 0.10.\n    boost_factor : float, optional\n        Multiplier controlling the magnitude of the low\u2011percentile boost.\n        Default is 5.0.\n    random_state : int, optional\n        Seed for reproducible random tie\u2011breaking.\n\n    Returns\n    -------\n    np.ndarray\n        1\u2011D array of priority scores (higher is better). Infeasible bins are\n        marked with ``-np.inf``.\n    \"\"\"\n    # Convert to float array and handle empty input\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    if caps.size == 0:\n        return np.array([], dtype=float)\n\n    # Slack after hypothetically placing the item\n    slack = caps - item\n    feasible = slack >= 0\n\n    # Initialise all scores as -inf (infeasible)\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # Early exit if no bin can accommodate the item\n    if not np.any(feasible):\n        return priorities\n\n    # ------------------------------------------------------------------\n    # 1) Adaptive epsilon and inverse\u2011slack bias\n    # ------------------------------------------------------------------\n    slack_feas = slack[feasible]\n    mean_slack = np.mean(slack_feas)\n    # Scale epsilon with typical slack magnitude to avoid division\u2011by\u2011zero\n    eps = max(1e-12, 1e-6 * mean_slack)\n    inv_slack = 1.0 / (slack_feas + eps)  # larger when slack is smaller\n\n    # ------------------------------------------------------------------\n    # 2) Low\u2011percentile slack boost\n    # ------------------------------------------------------------------\n    # Determine threshold below which bins are considered \u201calmost full\u201d\n    if slack_feas.size > 0:\n        threshold = np.quantile(slack_feas, low_percentile)\n    else:\n        threshold = 0.0\n\n    # Linear boost proportional to distance below the threshold\n    boost = np.zeros_like(slack_feas)\n    low_mask = slack_feas <= threshold\n    boost[low_mask] = boost_factor * (threshold - slack_feas[low_mask])\n\n    # ------------------------------------------------------------------\n    # 3) Combine deterministic components\n    # ------------------------------------------------------------------\n    combined = inv_slack + boost\n\n    # Normalise to the range [0, 1] (preserves ordering)\n    max_combined = np.max(combined) + eps\n    combined_norm = combined / max_combined\n\n    # ------------------------------------------------------------------\n    # 4) Tiny random tie\u2011breaker\n    # ------------------------------------------------------------------\n    rng = np.random.default_rng(random_state)\n    tie_eps = 1e-8\n    jitter = tie_eps * rng.random(combined_norm.shape)\n    final_score = combined_norm + jitter\n\n    # Store the computed scores back into the full array\n    priorities[feasible] = final_score\n\n    return priorities\n\n[Reflection]\nUse inverse\u2011slack bias, percentile boosts, adaptive weighting, normalise scores, and tiny random tie\u2011breakers.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}