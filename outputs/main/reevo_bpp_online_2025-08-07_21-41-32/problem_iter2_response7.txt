```python
import numpy as np

_rng = np.random.default_rng()

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online bin packing that blends residual capacity
    with a stochastic tie‑breaker. Feasible bins receive a score that is a
    weighted sum of their normalized residual capacity and a uniform random
    value. Infeasible bins are assigned -inf so they are never chosen.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array with the remaining capacity of each existing bin.

    Returns
    -------
    np.ndarray
        Array of priority scores of the same shape as `bins_remain_cap`.
    """
    caps = np.asarray(bins_remain_cap, dtype=float)
    can_fit = caps >= item

    # If no feasible bins, return all -inf
    if not np.any(can_fit):
        return np.full_like(caps, -np.inf)

    residual = caps - item

    # Normalize residuals among feasible bins to [0, 1]
    max_res = residual[can_fit].max()
    if max_res > 0:
        residual_norm = residual / max_res
    else:
        residual_norm = np.zeros_like(residual)

    # Random component uniform in [0, 1)
    random_comp = _rng.random(size=caps.shape)

    # Weight between deterministic residual and stochastic tie‑breaker
    alpha = 0.9
    priority = np.where(can_fit,
                        alpha * residual_norm + (1 - alpha) * random_comp,
                        -np.inf)

    return priority
```
