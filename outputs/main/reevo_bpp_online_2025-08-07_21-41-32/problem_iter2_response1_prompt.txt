{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for each bin based on a First-Fit strategy.\n\n    The bin with the highest priority score will be chosen for packing the item.\n    Here we give higher priority to bins that can accommodate the item and\n    that appear earlier in the list (smaller index).  Bins that cannot\n    accommodate the item receive a very low priority.\n\n    Args:\n        item: Size of the item to be packed.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of priority scores for each bin.  The higher the value, the\n        more preferable the bin.\n    \"\"\"\n    n = bins_remain_cap.size\n    # Determine which bins can hold the item\n    can_fit = bins_remain_cap >= item\n    # Assign high priority to earlier bins that can fit\n    # Using a large constant so that later bins still have priority > -inf,\n    # but earlier bins dominate\n    LARGE_PRIO = 1e9\n    priorities = np.full(n, -np.inf, dtype=float)\n    indices = np.arange(n)\n    if np.any(can_fit):\n        priorities[can_fit] = LARGE_PRIO - indices[can_fit]\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns a priority vector for each bin using an epsilon\u2011greedy strategy.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of the remaining capacities of the bins.\n        epsilon: Exploration probability (0 \u2264 epsilon \u2264 1). With probability `epsilon`\n                 the function assigns random priorities to encourage exploration.\n                 Otherwise it uses a best\u2011fit exploitation rule.\n\n    Returns:\n        A NumPy array of the same shape as `bins_remain_cap` with a priority score for\n        each bin. Higher scores are preferred. Infeasible bins receive `-np.inf`.\n    \"\"\"\n    # Ensure bins_remain_cap is a 1\u2011D NumPy array of floats\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float).ravel()\n\n    # Feasibility mask: bin can accommodate the item\n    feasible = bins_remain_cap >= item\n\n    # Initialise priorities with -inf (so infeasible bins are never chosen)\n    priorities = np.full_like(bins_remain_cap, fill_value=-np.inf, dtype=float)\n\n    # If no bin can accommodate the item, return all -inf\n    if not np.any(feasible):\n        return priorities\n\n    # Decide whether to explore or exploit this step\n    if np.random.rand() < epsilon:\n        # Exploration: assign a random score to each feasible bin\n        priorities[feasible] = np.random.rand(np.sum(feasible))\n    else:\n        # Exploitation: Best\u2011Fit \u2013 minimise leftover space after packing\n        # leftover capacity if the item were placed\n        leftover = bins_remain_cap[feasible] - item\n        # Larger priority for smaller leftover; perfect fit (leftover=0) gets priority 0\n        priorities[feasible] = -leftover\n\n    return priorities\n\n[Reflection]\nAdapt epsilon, balance best\u2011fit with exploration, penalize waste, consider bin age, use random tie\u2011breaking.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}