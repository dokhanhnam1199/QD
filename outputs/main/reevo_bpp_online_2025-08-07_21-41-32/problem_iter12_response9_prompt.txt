{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for each bin in an online Bin Packing setting.\n\n    The priority blends a random component with an inverse\u2011slack bias,\n    normalises the result, and adds a deterministic tie\u2011breaker based on the\n    bin index. Infeasible bins (insufficient remaining capacity) receive\n    ``-np.inf`` so they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better) for each bin.\n    \"\"\"\n    # Constants\n    _TOL = 1e-12          # feasibility tolerance\n    _EPS = 1e-12          # to avoid division by zero\n    _TIE = 1e-12          # deterministic tie\u2011breaker magnitude\n\n    # Ensure a 1\u2011D float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask (allow a tiny tolerance)\n    feasible = caps >= (item - _TOL)\n\n    # Initialise all priorities to -inf (infeasible bins)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placing the item (non\u2011negative)\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Inverse\u2011slack bias: larger for tighter fits\n    bias = 1.0 / (slack + _EPS)\n\n    # Normalise bias to [0, 1] (max bias gets 1)\n    bias_norm = bias / (bias.max() + _EPS)\n\n    # Random component in [0, 1)\n    rng = np.random.default_rng()\n    rand_scores = rng.random(caps.shape)\n    rand_feas = rand_scores[feasible]\n\n    # Blend bias and randomness multiplicatively (emphasises both)\n    blended = bias_norm * rand_feas\n\n    # Normalise blended scores to [0, 1] (max gets 1)\n    blended_norm = blended / (blended.max() + _EPS)\n\n    # Deterministic tie\u2011breaker: lower index \u2192 slightly higher priority\n    tie_breaker = -np.arange(n_bins)[feasible] * _TIE\n\n    # Final priority for feasible bins\n    priorities[feasible] = blended_norm + tie_breaker\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                bins_remain_cap: np.ndarray,\n                tolerance: float = 1e-12,\n                tie_breaker: float = 1e-12,\n                epsilon: float = 1e-12) -> np.ndarray:\n    \"\"\"\n    Priority for online bin packing that biases towards tight fits and adds\n    random diversification.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n    tolerance : float, optional\n        Acceptable negative slack due to floating point errors.\n    tie_breaker : float, optional\n        Small value used to break ties in favor of lower index bins.\n    epsilon : float, optional\n        Small constant added to slack to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores; larger is better.  Feasible bins get a finite score,\n        infeasible bins get -inf.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n = caps.size\n\n    # Feasible bins: can accommodate the item (within tolerance)\n    feasible = caps >= (item - tolerance)\n\n    # Default: infeasible bins get -inf\n    priorities = np.full(n, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack: remaining capacity after packing the item\n    slack = caps[feasible] - item\n    # Clip tiny negative values caused by numerical noise\n    slack = np.maximum(slack, 0.0)\n\n    # Bias: higher for tighter fits\n    bias = 1.0 / (slack + epsilon)\n\n    # Random component for diversification\n    rand = np.random.rand(n)\n\n    # Indices of feasible bins (to apply tie\u2011breaker)\n    idx = np.nonzero(feasible)[0]\n\n    # Combine bias and randomness; higher score is better\n    priorities[feasible] = bias * rand[feasible] - idx * tie_breaker\n\n    return priorities\n\n[Reflection]\nMultiply bias by random; avoid extra normalizations; subtract index*epsilon for tie\u2011break; keep everything fully vectorized.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}