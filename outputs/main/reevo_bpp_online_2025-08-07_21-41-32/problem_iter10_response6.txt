```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, *, eps: float = 1e-12, rng: np.random.Generator = None) -> np.ndarray:
    """
    Compute priority scores for each bin in an online bin‑packing setting.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.
    eps : float, optional
        Small constant to avoid division by zero when computing bias.
    rng : numpy.random.Generator, optional
        Random number generator used for tie‑breaking.  If ``None`` a
        default generator is created.

    Returns
    -------
    np.ndarray
        Priority scores (higher = more attractive).  Bins that cannot
        accommodate the item receive ``-np.inf`` so they are never
        selected.
    """
    # Ensure we work with a flat float array.
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # Feasibility mask.
    feasible = caps >= item

    # All bins start with an impossible score.
    priorities = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        return priorities

    # Slack after placing the item in each feasible bin.
    slack = caps[feasible] - item

    # Bias that prefers tighter fits: larger when slack is smaller.
    bias = 1.0 / (slack + eps)

    # Random component for tie‑breaking.
    if rng is None:
        rng = np.random.default_rng()
    rand_factor = rng.random(bias.shape[0])

    # Combine bias and random factor.
    scores = bias * rand_factor

    # Assign scores back to the full priority vector.
    priorities[feasible] = scores

    return priorities
```
