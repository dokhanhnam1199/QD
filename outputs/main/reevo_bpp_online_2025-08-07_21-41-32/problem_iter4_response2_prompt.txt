{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that blends worst\u2011fit,\n    slack\u2011biased randomness, and an anticipation term based on the\n    distribution of current slack values.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. The bin with the maximum score\n        will be chosen to hold the item. Bins that cannot accommodate\n        the item receive a score of -np.inf.\n    \"\"\"\n    # Ensure a float array for calculations\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Feasible bins that can accommodate the item\n    feasible = caps >= item\n\n    # Initialise all priorities to -inf (ensures infeasible bins are never selected)\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bin, return the -inf array\n        return priorities\n\n    # Extract capacities and slack for feasible bins\n    rem = caps[feasible]\n    slack = rem - item\n    eps = 1e-12\n\n    # Normalise remaining capacity (worst\u2011fit component)\n    rem_min, rem_max = rem.min(), rem.max()\n    norm_rem = (rem - rem_min) / (rem_max - rem_min + eps)\n\n    # Normalise inverse slack (tight\u2011fit component)\n    inv_slack = 1.0 / (slack + eps)\n    inv_min, inv_max = inv_slack.min(), inv_slack.max()\n    norm_inv_slack = (inv_slack - inv_min) / (inv_max - inv_min + eps)\n\n    # Anticipation term: bins whose slack is close to the mean slack\n    slack_mean = slack.mean()\n    slack_std = slack.std() + eps\n    closeness = 1.0 - np.abs(slack - slack_mean) / slack_std\n    closeness = np.clip(closeness, 0.0, 1.0)\n\n    # Weight parameters (can be tuned)\n    alpha, beta, gamma = 0.4, 0.4, 0.2   # sum to 1\n    exploration_factor = 0.05\n\n    # Combine components\n    score = (\n        alpha * norm_rem\n        + beta * norm_inv_slack\n        + gamma * closeness\n    )\n\n    # Add small random exploration noise\n    rng = np.random.default_rng()\n    noise = rng.random(size=score.size) * exploration_factor\n    score += noise\n\n    # Assign the computed priorities to the feasible bins\n    priorities[feasible] = score\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    bin_ages: Optional[np.ndarray] = None,\n    temperature: float = 1.0,\n    lookahead_items: Optional[np.ndarray] = None,\n) -> np.ndarray:\n    \"\"\"\n    Compute a priority score for each bin in an online bin\u2011packing setting.\n\n    The heuristic blends an exact\u2011fit bias with a weighted worst\u2011fit component,\n    optionally incorporates look\u2011ahead information, bin age, and a temperature\n    parameter for exploration/exploitation control.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n    bin_ages : np.ndarray or None, optional\n        1\u2011D array (same length as bins_remain_cap) indicating the age of each bin\n        (e.g., number of items already placed). Older bins receive a small boost\n        to encourage closing them.\n    temperature : float, optional\n        Controls the softness of the selection. Lower values make the algorithm\n        greedier (higher scores dominate). Must be > 0.\n    lookahead_items : np.ndarray or None, optional\n        Array of sizes of upcoming items. A bin that can still accommodate many\n        look\u2011ahead items receives a boost.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better). Infeasible bins receive -inf.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # 1. Prepare inputs and guard against pathological values\n    # ------------------------------------------------------------------\n    eps = 1e-12                     # tiny epsilon to avoid division by zero\n    temperature = max(temperature, eps)\n\n    caps = np.asarray(bins_remain_cap, dtype=float).copy()\n    n_bins = caps.size\n\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    # Feasibility mask\n    feasible = caps >= item\n    if not np.any(feasible):\n        return priorities  # nothing fits\n\n    # ------------------------------------------------------------------\n    # 2. Core exact\u2011fit / worst\u2011fit scores\n    # ------------------------------------------------------------------\n    slack = caps - item                     # remaining space after placement\n    slack_feas = slack[feasible]\n\n    # Exact\u2011fit component: larger when slack is tiny\n    exact_fit = 1.0 / (slack_feas + eps)    # 1/(waste+eps)\n\n    # Worst\u2011fit component: larger when slack is large (normalized)\n    max_cap = np.max(caps) + eps\n    worst_fit = slack_feas / max_cap        # in [0,1]\n\n    # Blend the two with configurable weights\n    w_exact = 0.6\n    w_worst = 0.4\n    core_score = w_exact * exact_fit + w_worst * worst_fit\n\n    # ------------------------------------------------------------------\n    # 3. Optional look\u2011ahead boost\n    # ------------------------------------------------------------------\n    if lookahead_items is not None and lookahead_items.size > 0:\n        # Count how many future items could still fit after placing the current one\n        lookahead = np.asarray(lookahead_items, dtype=float)\n        # Broadcast: (n_feasible, n_lookahead) -> bool matrix\n        fits = lookahead[None, :] <= slack_feas[:, None]\n        # Fraction of look\u2011ahead items that fit each bin\n        lookahead_frac = fits.mean(axis=1)      # in [0,1]\n        lookahead_weight = 0.3\n        core_score *= (1.0 + lookahead_weight * lookahead_frac)\n\n    # ------------------------------------------------------------------\n    # 4. Optional bin\u2011age boost\n    # ------------------------------------------------------------------\n    if bin_ages is not None:\n        ages = np.asarray(bin_ages, dtype=float)\n        if ages.shape != caps.shape:\n            raise ValueError(\"bin_ages must have the same shape as bins_remain_cap\")\n        # Normalise ages to [0,1]\n        age_norm = ages / (np.max(ages) + eps)\n        age_weight = 0.2\n        age_factor = 1.0 + age_weight * age_norm\n        # Apply only to feasible bins\n        core_score *= age_factor[feasible]\n\n    # ------------------------------------------------------------------\n    # 5. Temperature\u2011scaled softmax (or exponential) for exploration\n    # ------------------------------------------------------------------\n    # Using exponential scaling; higher temperature smooths differences\n    exp_score = np.exp(core_score / temperature)\n\n    # ------------------------------------------------------------------\n    # 6. Tiny random tie\u2011breaker for numerical stability\n    # ------------------------------------------------------------------\n    tie_eps = 1e-8\n    exp_score += np.random.rand(exp_score.size) * tie_eps\n\n    # Fill the priority array\n    priorities[feasible] = exp_score\n\n    return priorities\n\n[Reflection]\nBlend exact\u2011fit and worst\u2011fit, add lookahead and age, normalise, temperature\u2011scale, tune weights, add noise.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}