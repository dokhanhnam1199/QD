{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    tie_breaker: float = 1e-12,\n    random_state: Optional[Union[int, np.random.Generator]] = None,\n) -> np.ndarray:\n    \"\"\"\n    Blend exact\u2011fit scoring with a random bias for online bin packing.\n\n    For each bin the function returns a priority score (higher = more attractive).\n    Infeasible bins receive ``-np.inf`` so they are never chosen.\n\n    The priority consists of three parts:\n      * Exact\u2011fit component: prefers bins with smaller remaining slack.\n      * Random bias component: 1/(slack+\u03b5) gives a larger random boost to tighter\n        fits, encouraging diversification when no near\u2011exact fit exists.\n      * Deterministic tie\u2011breaker: a tiny index\u2011dependent penalty ensures\n        reproducible ordering for otherwise equal scores.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacity for each currently open bin.\n    tolerance : float, optional\n        Numerical tolerance for feasibility checks and exact\u2011fit detection.\n    tie_breaker : float, optional\n        Tiny positive constant used to break ties deterministically\n        (lower\u2011indexed bins are slightly preferred).\n    random_state : int or np.random.Generator, optional\n        Seed or generator for reproducible randomness. If ``None`` the global\n        NumPy RNG is used.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores, one per bin (shape matches ``bins_remain_cap``).\n    \"\"\"\n    # Normalise input to a flat float array.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask: bins that can accommodate the item (within tolerance).\n    feasible = caps >= (item - tolerance)\n\n    # Initialise priorities with -inf (infeasible bins).\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    # Early exit if nothing fits.\n    if not np.any(feasible):\n        return priorities\n\n    # Slack for feasible bins (non\u2011negative, with tiny negatives clipped).\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Exact\u2011fit score: larger when slack is smaller (exact fit => 0).\n    exact_score = -slack\n\n    # Random bias: larger for tighter fits.\n    epsilon = tolerance\n    bias = 1.0 / (slack + epsilon)               # shape = (n_feasible,)\n    # Normalise bias to [0, 1] to keep the random term comparable across bins.\n    bias_norm = bias / bias.max()\n\n    # Random generator handling.\n    if isinstance(random_state, np.random.Generator):\n        rng = random_state\n    else:\n        rng = np.random.default_rng(random_state)\n\n    rand_vals = rng.random(n_bins)               # one random number per bin\n    rand_feasible = rand_vals[feasible]\n\n    random_component = bias_norm * rand_feasible  # in [0, 1]\n\n    # Adaptive weighting of the random part.\n    # If an (almost) exact fit exists, we reduce randomness to favour it.\n    if np.min(slack) <= tolerance:\n        w_random = 0.1   # favour exact fits\n    else:\n        w_random = 0.5 if False else 0.5  # balanced exploration\n\n    # Deterministic tie\u2011breaker (lower index slightly preferred).\n    idx_feasible = np.where(feasible)[0]\n    tie_term = idx_feasible.astype(float) * tie_breaker\n\n    # Combine the components.\n    combined = exact_score + w_random * random_component - tie_term\n\n    # Populate the result array.\n    priorities[feasible] = combined\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Random Fit priority for online bin packing.\n\n    Each feasible bin (with enough remaining capacity) receives a random score.\n    Infeasible bins receive -inf so they are never selected. This implements a\n    pure random fit strategy, optionally biased toward tighter fits.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities for each bin.\n\n    Returns:\n        A 1\u2011D array of priority scores, one per bin.\n    \"\"\"\n    # Ensure capacities are a float array.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    feasible = caps >= item\n\n    # Initialise all priorities to -inf (so infeasible bins are never chosen).\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # Generate independent random numbers for each bin.\n    rand_scores = np.random.rand(caps.size)\n\n    # Bias towards tighter fits: less slack -> larger bias.\n    # Small epsilon avoids division by zero for exact fits.\n    epsilon = 1e-12\n    slack = caps - item\n    bias = np.zeros_like(caps)\n    bias[feasible] = 1.0 / (slack[feasible] + epsilon)  # higher when slack is small\n\n    # Combine random component with bias.\n    # Multiplying emphasizes bins with higher bias while preserving randomness.\n    priorities[feasible] = bias[feasible] * rand_scores[feasible]\n\n    return priorities\n\n[Reflection]\nPrioritise exact fit, dampen randomness when slack is tiny. Normalise bias. Seed RNG per bin. Add deterministic tie\u2011breaker.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}