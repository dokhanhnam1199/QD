```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    *,
    tolerance: float = 1e-12,
    tie_breaker: float = 1e-12,
) -> np.ndarray:
    """
    Priority function for online bin packing that favours an exact fit.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array containing the remaining capacity of each open bin.
    tolerance : float, optional
        Numerical tolerance when deciding feasibility.  Bins whose remaining
        capacity is at least ``item - tolerance`` are considered feasible.
    tie_breaker : float, optional
        Small deterministic bias to break ties between bins with the same
        leftover capacity.  The bias is proportional to the bin index, so
        lower‑indexed bins are favoured when the leftovers are equal.

    Returns
    -------
    np.ndarray
        Priority scores (higher is better).  Infeasible bins receive ``-np.inf``.
    """
    # Ensure a 1‑D float array
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()

    # Feasibility mask
    feasible = caps >= (item - tolerance)

    # Prepare the priority array with -inf for infeasible bins
    priorities = np.full_like(caps, -np.inf, dtype=float)

    if not np.any(feasible):
        return priorities

    # Leftover capacity after placing the item (never negative)
    leftover = caps[feasible] - item
    leftover = np.maximum(leftover, 0.0)

    # Deterministic tie‑breaker: lower index => higher priority
    indices = np.arange(caps.size)
    priorities[feasible] = -leftover - indices[feasible] * tie_breaker

    return priorities
```
