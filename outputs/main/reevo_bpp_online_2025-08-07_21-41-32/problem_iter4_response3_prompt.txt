{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    bin_ages: Optional[np.ndarray] = None,\n    temperature: float = 1.0,\n    lookahead_items: Optional[np.ndarray] = None,\n) -> np.ndarray:\n    \"\"\"\n    Compute a priority score for each bin in an online bin\u2011packing setting.\n\n    The heuristic blends an exact\u2011fit bias with a weighted worst\u2011fit component,\n    optionally incorporates look\u2011ahead information, bin age, and a temperature\n    parameter for exploration/exploitation control.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n    bin_ages : np.ndarray or None, optional\n        1\u2011D array (same length as bins_remain_cap) indicating the age of each bin\n        (e.g., number of items already placed). Older bins receive a small boost\n        to encourage closing them.\n    temperature : float, optional\n        Controls the softness of the selection. Lower values make the algorithm\n        greedier (higher scores dominate). Must be > 0.\n    lookahead_items : np.ndarray or None, optional\n        Array of sizes of upcoming items. A bin that can still accommodate many\n        look\u2011ahead items receives a boost.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better). Infeasible bins receive -inf.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # 1. Prepare inputs and guard against pathological values\n    # ------------------------------------------------------------------\n    eps = 1e-12                     # tiny epsilon to avoid division by zero\n    temperature = max(temperature, eps)\n\n    caps = np.asarray(bins_remain_cap, dtype=float).copy()\n    n_bins = caps.size\n\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    # Feasibility mask\n    feasible = caps >= item\n    if not np.any(feasible):\n        return priorities  # nothing fits\n\n    # ------------------------------------------------------------------\n    # 2. Core exact\u2011fit / worst\u2011fit scores\n    # ------------------------------------------------------------------\n    slack = caps - item                     # remaining space after placement\n    slack_feas = slack[feasible]\n\n    # Exact\u2011fit component: larger when slack is tiny\n    exact_fit = 1.0 / (slack_feas + eps)    # 1/(waste+eps)\n\n    # Worst\u2011fit component: larger when slack is large (normalized)\n    max_cap = np.max(caps) + eps\n    worst_fit = slack_feas / max_cap        # in [0,1]\n\n    # Blend the two with configurable weights\n    w_exact = 0.6\n    w_worst = 0.4\n    core_score = w_exact * exact_fit + w_worst * worst_fit\n\n    # ------------------------------------------------------------------\n    # 3. Optional look\u2011ahead boost\n    # ------------------------------------------------------------------\n    if lookahead_items is not None and lookahead_items.size > 0:\n        # Count how many future items could still fit after placing the current one\n        lookahead = np.asarray(lookahead_items, dtype=float)\n        # Broadcast: (n_feasible, n_lookahead) -> bool matrix\n        fits = lookahead[None, :] <= slack_feas[:, None]\n        # Fraction of look\u2011ahead items that fit each bin\n        lookahead_frac = fits.mean(axis=1)      # in [0,1]\n        lookahead_weight = 0.3\n        core_score *= (1.0 + lookahead_weight * lookahead_frac)\n\n    # ------------------------------------------------------------------\n    # 4. Optional bin\u2011age boost\n    # ------------------------------------------------------------------\n    if bin_ages is not None:\n        ages = np.asarray(bin_ages, dtype=float)\n        if ages.shape != caps.shape:\n            raise ValueError(\"bin_ages must have the same shape as bins_remain_cap\")\n        # Normalise ages to [0,1]\n        age_norm = ages / (np.max(ages) + eps)\n        age_weight = 0.2\n        age_factor = 1.0 + age_weight * age_norm\n        # Apply only to feasible bins\n        core_score *= age_factor[feasible]\n\n    # ------------------------------------------------------------------\n    # 5. Temperature\u2011scaled softmax (or exponential) for exploration\n    # ------------------------------------------------------------------\n    # Using exponential scaling; higher temperature smooths differences\n    exp_score = np.exp(core_score / temperature)\n\n    # ------------------------------------------------------------------\n    # 6. Tiny random tie\u2011breaker for numerical stability\n    # ------------------------------------------------------------------\n    tie_eps = 1e-8\n    exp_score += np.random.rand(exp_score.size) * tie_eps\n\n    # Fill the priority array\n    priorities[feasible] = exp_score\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    tie_breaker: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Deterministic Exact\u2011Fit\u2011First priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array (or array\u2011like) of remaining capacities of the currently open bins.\n    tolerance : float, optional\n        Numerical tolerance for feasibility and exact\u2011fit detection.\n        Bins whose remaining capacity is at least ``item - tolerance`` are considered feasible.\n        A leftover smaller than ``tolerance`` is treated as an exact fit.\n    tie_breaker : float, optional\n        Tiny value used to break ties deterministically in favour of lower\u2011indexed bins.\n        Must be sufficiently smaller than the smallest possible leftover.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).\n        Higher values indicate more attractive bins. Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # Ensure a flat NumPy array of floats.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n\n    # Feasibility mask: bins that can accommodate the item within tolerance.\n    feasible = caps >= (item - tolerance)\n\n    # Initialise priorities with -inf for infeasible bins.\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bin; return all -inf.\n        return priorities\n\n    # Compute leftover capacity for feasible bins.\n    leftover = caps[feasible] - item\n    # Clip tiny negative leftovers caused by tolerance to zero.\n    leftover = np.maximum(leftover, 0.0)\n\n    # Indices of feasible bins (used for deterministic tie\u2011breaking).\n    idx = np.where(feasible)[0]\n\n    # Exact\u2011Fit\u2011First: smaller leftover \u2192 higher priority.\n    # Use negative leftover so exact fit (leftover == 0) yields the highest raw score.\n    # Subtract a tiny index\u2011dependent term to break ties in favour of lower\u2011indexed bins.\n    priorities[feasible] = -leftover - idx * tie_breaker\n\n    return priorities\n\n[Reflection]\nFavor deterministic exact\u2011fit with simple tie\u2011breakers; drop random, temperature, look\u2011ahead, age for speed and predictability.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}