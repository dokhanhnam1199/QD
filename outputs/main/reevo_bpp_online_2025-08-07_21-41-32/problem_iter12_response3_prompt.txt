{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global, reproducible RNG for optional stochastic tie\u2011breaking\n_rng = np.random.default_rng(12345)\n\n\n    \"\"\"Priority function for online bin packing (v2).\n\n    Computes a score for each bin such that feasible bins (remaining capacity\n    >= ``item``) receive higher scores when they provide a tighter fit\n    (i.e., smaller slack). The score is based directly on the slack value,\n    with a tiny random perturbation for stochastic tie\u2011breaking and a\n    deterministic index penalty to guarantee a strict total ordering.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the existing bins.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same length as ``bins_remain_cap``). Infeasible\n        bins have ``-np.inf`` so they are never selected.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.size\n\n    # Initialise all scores to -inf (infeasible by default)\n    priorities = np.full(n, -np.inf, dtype=float)\n    if n == 0:\n        return priorities\n\n    slack = caps - item\n    feasible = slack >= 0\n    if not np.any(feasible):\n        return priorities\n\n    # Base score: negative slack (higher for tighter fits)\n    base_score = -slack[feasible]\n\n    # Tiny random noise for stochastic tie\u2011breaking (reduced magnitude)\n    rand_noise = _rng.random(base_score.shape) * 1e-12\n\n    # Deterministic index penalty (very small) to break any remaining ties\n    idx = np.nonzero(feasible)[0].astype(float)\n    idx_penalty = idx * 1e-15\n\n    # Final scores for feasible bins\n    scores = base_score + rand_noise - idx_penalty\n    priorities[feasible] = scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for each bin in an online Bin Packing setting.\n\n    The priority blends a random component with an inverse\u2011slack bias,\n    normalises the result, and adds a deterministic tie\u2011breaker based on the\n    bin index. Infeasible bins (insufficient remaining capacity) receive\n    ``-np.inf`` so they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better) for each bin.\n    \"\"\"\n    # Constants\n    _TOL = 1e-12          # feasibility tolerance\n    _EPS = 1e-12          # to avoid division by zero\n    _TIE = 1e-12          # deterministic tie\u2011breaker magnitude\n\n    # Ensure a 1\u2011D float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask (allow a tiny tolerance)\n    feasible = caps >= (item - _TOL)\n\n    # Initialise all priorities to -inf (infeasible bins)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placing the item (non\u2011negative)\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Inverse\u2011slack bias: larger for tighter fits\n    bias = 1.0 / (slack + _EPS)\n\n    # Normalise bias to [0, 1] (max bias gets 1)\n    bias_norm = bias / (bias.max() + _EPS)\n\n    # Random component in [0, 1)\n    rng = np.random.default_rng()\n    rand_scores = rng.random(caps.shape)\n    rand_feas = rand_scores[feasible]\n\n    # Blend bias and randomness multiplicatively (emphasises both)\n    blended = bias_norm * rand_feas\n\n    # Normalise blended scores to [0, 1] (max gets 1)\n    blended_norm = blended / (blended.max() + _EPS)\n\n    # Deterministic tie\u2011breaker: lower index \u2192 slightly higher priority\n    tie_breaker = -np.arange(n_bins)[feasible] * _TIE\n\n    # Final priority for feasible bins\n    priorities[feasible] = blended_norm + tie_breaker\n\n    return priorities\n\n[Reflection]\nNormalize inverse\u2011slack bias, blend with tiny random noise, add minuscule index tie\u2011breaker, respect feasibility tolerance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}