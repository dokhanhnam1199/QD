{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    eps: float = 1e-12,\n    rng: np.random.Generator = None\n) -> np.ndarray:\n    \"\"\"\n    Priority function for online bin packing.\n\n    Combines a bias for tighter fits, weighting by the fraction of feasible bins,\n    a random component for stochastic tie\u2011breaking, and a deterministic tie\u2011breaker\n    that prefers lower\u2011indexed bins. Infeasible bins receive -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each currently open bin.\n    eps : float, optional\n        Small constant to avoid division by zero.\n    rng : np.random.Generator, optional\n        Random number generator for reproducibility. If None, a default RNG is created.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better) for each bin.\n    \"\"\"\n    # Normalise input to a flat float array.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask (allow a tiny tolerance for floating\u2011point errors).\n    tolerance = eps\n    feasible = caps >= (item - tolerance)\n\n    # Initialise all priorities as -inf (infeasible bins).\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No bin can accommodate the item.\n        return priorities\n\n    # Slack after placing the item (clip to zero to avoid negative values).\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Bias toward tighter fits: larger when slack is smaller.\n    bias = 1.0 / (slack + eps)\n\n    # Weight the bias by the fraction of feasible bins.\n    feasible_frac = feasible.sum() / n_bins\n    weighted_bias = bias * feasible_frac\n\n    # Random component for stochastic tie\u2011breaking.\n    if rng is None:\n        rng = np.random.default_rng()\n    rand_scores = rng.random(weighted_bias.shape)\n\n    # Combine bias and randomness \u2013 bias dominates but randomness perturbs the order.\n    combined = weighted_bias * rand_scores\n\n    # Deterministic tie\u2011breaker: favour lower\u2011index bins by a tiny decreasing term.\n    indices = np.arange(n_bins)\n    tie_breaker = 1e-12\n    deterministic = -indices[feasible] * tie_breaker\n\n    # Assign the final scores to the feasible bins.\n    priorities[feasible] = combined + deterministic\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    epsilon: float = 1e-12,\n    tie_breaker: float = 1e-12,\n    random_state: Optional[np.random.Generator] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem.\n\n    For each currently open bin we compute a score; the bin with the highest\n    score will receive the incoming item.  The score favours:\n      * Feasibility (the bin must have enough remaining capacity).\n      * Tight fits (small slack after insertion).\n      * A small deterministic tie\u2011breaker based on the bin index.\n      * Random diversification to avoid pathological deterministic behaviour.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each open bin.\n    tolerance : float, optional\n        Numerical tolerance for feasibility checks (default 1e-12).\n    epsilon : float, optional\n        Small constant added to slack to avoid division by zero\n        (default 1e-12).\n    tie_breaker : float, optional\n        Weight applied to the bin index to break ties deterministically.\n        Must be small enough not to outweigh the main bias (default 1e-12).\n    random_state : np.random.Generator, optional\n        Random number generator for reproducibility. If ``None`` a new\n        default generator is created.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (higher is better). Infeasible bins\n        receive ``-np.inf`` (negative infinity) and will never be selected.\n    \"\"\"\n    # Ensure a random generator is available.\n    rng = random_state if random_state is not None else np.random.default_rng()\n\n    # Flatten and cast capacities to float.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Determine which bins can accommodate the item (within tolerance).\n    feasible = caps >= (item - tolerance)\n\n    # Initialise all scores to -inf (infeasible by default).\n    scores = np.full(n_bins, -np.inf, dtype=float)\n\n    # Early exit if no bin can hold the item.\n    if not np.any(feasible):\n        return scores\n\n    # Compute slack (remaining capacity after the item would be placed).\n    # Clip negative values caused by floating\u2011point noise.\n    slack = np.maximum(caps - item, 0.0)\n\n    # Bias: larger for tighter fits (smaller slack). Adding epsilon avoids div\u2011by\u20110.\n    bias = 1.0 / (slack + epsilon)\n\n    # Random component: one uniform number per bin.\n    rand = rng.random(n_bins)\n\n    # Deterministic tie\u2011breaker: smaller index => slightly higher score.\n    idx_factor = np.arange(n_bins, dtype=float) * tie_breaker\n\n    # Combine the three components.\n    #   bias * rand   -> favours tight fits while still randomising.\n    #   - idx_factor  -> breaks exact ties in favour of lower indices.\n    scores[feasible] = bias[feasible] * rand[feasible] - idx_factor[feasible]\n\n    return scores\n\n[Reflection]\nEmphasise tightness, normalize slack, weight feasible bins, limit randomness, deterministic tie\u2011breakers, early infeasible cutoff.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}