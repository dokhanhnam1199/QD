{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                bins_remain_cap: np.ndarray,\n                *,\n                tolerance: float = 1e-12,\n                tie_breaker: float = 1e-12,\n                eps: float = 1e-12) -> np.ndarray:\n    \"\"\"\n    Deterministic priority function for the online bin packing problem.\n\n    The function assigns a priority score to each bin based on how tightly the\n    incoming ``item`` would fit (i.e., the slack after placement) and a small\n    deterministic tie\u2011breaker that favours bins with lower indices.\n\n    Features:\n    - Feasibility check with a tolerance.\n    - Slack (remaining space after placing the item) is normalised to [0, 1].\n    - Slack influence is weighted by the fraction of feasible bins: when many\n      bins can accommodate the item, tighter fits are strongly preferred; when\n      few bins are feasible, the influence of slack diminishes and the tie\u2011breaker\n      dominates.\n    - Infeasible bins receive ``-np.inf`` so they are never selected.\n    - No random components \u2192 reproducible behaviour.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each open bin.\n    tolerance : float, optional\n        Numerical tolerance for feasibility (default 1e-12).\n    tie_breaker : float, optional\n        Small deterministic bias to break ties; lower indices receive higher\n        priority (default 1e-12).\n    eps : float, optional\n        Small constant to avoid division by zero when normalising slack\n        (default 1e-12).\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better) for each bin.  Infeasible bins have\n        ``-np.inf``.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    if n_bins == 0:\n        # No bins available \u2013 return an empty array.\n        return np.empty(0, dtype=float)\n\n    # Feasibility mask (allow a tiny tolerance for floating\u2011point errors)\n    feasible = caps >= (item - tolerance)\n\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bin \u2013 return priorities as all -inf.\n        return priorities\n\n    # Slack after placing the item (non\u2011negative)\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Normalise slack to the interval [0, 1].\n    max_slack = slack.max()\n    slack_norm = slack / (max_slack + eps)  # Avoid division by zero.\n\n    # Adaptive weighting: more weight on slack when many bins are feasible.\n    feasible_frac = feasible.sum() / n_bins  # \u2208 (0, 1]\n    w_slack = feasible_frac  # Larger when many bins can accommodate the item.\n\n    # Base score: tighter fit (smaller slack) gets a larger (less negative) score.\n    base_score = -slack_norm\n    weighted_score = w_slack * base_score\n\n    # Deterministic tie\u2011breaker: lower index \u2192 slightly higher priority.\n    indices = np.arange(n_bins)\n    tie = -indices[feasible] * tie_breaker\n\n    # Combine weighted slack score and tie\u2011breaker.\n    priorities[feasible] = weighted_score + tie\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                bins_remain_cap: np.ndarray,\n                tolerance: float = 1e-12,\n                tie_breaker: float = 1e-12,\n                epsilon: float = 1e-12) -> np.ndarray:\n    \"\"\"\n    Priority for online bin packing that biases towards tight fits and adds\n    random diversification.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n    tolerance : float, optional\n        Acceptable negative slack due to floating point errors.\n    tie_breaker : float, optional\n        Small value used to break ties in favor of lower index bins.\n    epsilon : float, optional\n        Small constant added to slack to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores; larger is better.  Feasible bins get a finite score,\n        infeasible bins get -inf.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n = caps.size\n\n    # Feasible bins: can accommodate the item (within tolerance)\n    feasible = caps >= (item - tolerance)\n\n    # Default: infeasible bins get -inf\n    priorities = np.full(n, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack: remaining capacity after packing the item\n    slack = caps[feasible] - item\n    # Clip tiny negative values caused by numerical noise\n    slack = np.maximum(slack, 0.0)\n\n    # Bias: higher for tighter fits\n    bias = 1.0 / (slack + epsilon)\n\n    # Random component for diversification\n    rand = np.random.rand(n)\n\n    # Indices of feasible bins (to apply tie\u2011breaker)\n    idx = np.nonzero(feasible)[0]\n\n    # Combine bias and randomness; higher score is better\n    priorities[feasible] = bias * rand[feasible] - idx * tie_breaker\n\n    return priorities\n\n[Reflection]\nBias toward(1) tight(2) fit(3) via(4) 1/(slack+\u03b5),(5) scale(6) by(7) random,(8) weight(9) by(10) feasible(11) fraction,(12) small(13) index(14) tie\u2011breaker.(15)\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}