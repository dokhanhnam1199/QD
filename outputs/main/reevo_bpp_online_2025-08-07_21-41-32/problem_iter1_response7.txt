```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Random Fit priority. For each bin that can accommodate the item, assigns a random priority score.
    Bins that cannot accommodate are assigned -np.inf so they are never selected.
    
    Selecting the bin with the maximum priority effectively chooses one of the
    feasible bins uniformly at random, because the maximum of independent
    uniform draws over the set of feasible bins has a uniform distribution.
    
    Args:
        item: Size of the incoming item.
        bins_remain_cap: Current remaining capacities of all bins.
    
    Returns:
        An array of priority scores where larger score indicates higher priority.
        Only feasible bins receive a score in [0, 1), others are -np.inf.
    """
    can_fit = bins_remain_cap >= item
    # Allocate an array of -inf so infeasible bins get lowest priority
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    # Generate random values for feasible bins
    random_scores = np.random.rand(np.count_nonzero(can_fit))
    priorities[can_fit] = random_scores
    return priorities
```
