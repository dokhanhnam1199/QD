```python
import numpy as np
from typing import Optional

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    tolerance: float = 1e-12,
    tie_breaker: float = 1e-12,
) -> np.ndarray:
    """
    Deterministic tight‑fit priority for the online Bin Packing Problem.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array (or array‑like) of remaining capacities of the currently open bins.
    tolerance : float, optional
        Numerical tolerance for feasibility checks; a bin is feasible if its
        remaining capacity is at least ``item - tolerance``.
    tie_breaker : float, optional
        Tiny positive value used to break ties deterministically in favour of
        bins with smaller original indices.  Must be smaller than any meaningful
        leftover value (e.g., ``tolerance``).

    Returns
    -------
    np.ndarray
        Priority scores for each bin. Higher scores indicate more attractive bins.
        Infeasible bins receive ``-np.inf``.
    """
    # Ensure a 1‑D float array
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # Feasibility mask: bins that can hold the item (within tolerance)
    feasible = caps >= (item - tolerance)

    # Initialise all priorities to -inf (infeasible by default)
    priorities = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        # No feasible bin – return all -inf
        return priorities

    # Compute leftover capacity for feasible bins
    leftover = caps[feasible] - item
    # Clip tiny negative leftovers caused by floating‑point noise
    leftover = np.maximum(leftover, 0.0)

    # Original indices of feasible bins (preserve order)
    idx_feas = np.nonzero(feasible)[0]

    # Tight‑fit bias: smaller leftover → higher priority.
    # Subtract a tiny index‑dependent term to break ties in favour of lower indices.
    # The overall priority is negative leftover (so larger is better) minus tie_breaker*index.
    priorities[feasible] = -leftover - idx_feas * tie_breaker

    return priorities
```
