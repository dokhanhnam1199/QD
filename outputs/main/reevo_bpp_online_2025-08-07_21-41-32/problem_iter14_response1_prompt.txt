{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global RNG for reproducible stochastic tie\u2011breaking, used when no RNG is supplied.\n_GLOBAL_RNG = np.random.default_rng(123456789)\n\n\n                bins_remain_cap: np.ndarray,\n                *,\n                eps: float = 1e-12,\n                noise_scale: float = 1e-6,\n                idx_penalty: float = 1e-15,\n                rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online bin\u2011packing setting.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n    eps : float, optional\n        Small constant added to slack to avoid division by zero.\n    noise_scale : float, optional\n        Relative magnitude of the stochastic tie\u2011breaking noise. The actual\n        noise added to a bin is ``U(0,1) * noise_scale * inverse_slack``.\n    idx_penalty : float, optional\n        Deterministic penalty proportional to the bin index used to break any\n        remaining ties (very small to preserve the order dictated by the\n        inverse\u2011slack bias).\n    rng : numpy.random.Generator, optional\n        Random number generator for stochastic tie\u2011breaking. If ``None`` a\n        global reproducible generator is used.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher = more attractive). Bins that cannot accommodate\n        the item receive ``-np.inf`` so they are never selected.\n    \"\"\"\n    # Ensure a flat float array.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Start with infeasible scores.\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    # Feasibility mask.\n    feasible = caps >= item\n    if not np.any(feasible):\n        return priorities\n\n    # Slack that would remain after placing the item.\n    slack = caps[feasible] - item\n\n    # Inverse\u2011slack bias: larger when slack is smaller (tighter fit).\n    inv_slack = 1.0 / (slack + eps)\n\n    # Stochastic tie\u2011breaking: small random perturbation scaled to the bias.\n    if rng is None:\n        rng = _GLOBAL_RNG\n    rand = rng.random(inv_slack.shape)          # Uniform [0, 1)\n    noise = rand * noise_scale * inv_slack\n\n    # Deterministic index penalty for any remaining ties.\n    idx = np.nonzero(feasible)[0].astype(float)  # indices of feasible bins\n    penalty = idx * idx_penalty\n\n    # Final priority: bias + noise \u2013 penalty.\n    scores = inv_slack + noise - penalty\n    priorities[feasible] = scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for each bin in an online Bin Packing setting.\n\n    The priority blends an inverse\u2011slack bias (tight fits) with a random factor\n    and a tiny deterministic tie\u2011breaker based on the bin index. Bins that\n    cannot accommodate the item receive ``-np.inf`` so they are never chosen.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better) for each bin.\n    \"\"\"\n    # Constants\n    _TOL = 1e-12   # feasibility tolerance\n    _EPS = 1e-12   # to avoid division by zero\n    _TIE = 1e-12   # deterministic tie\u2011breaker magnitude\n\n    # Ensure a 1\u2011D float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask (allow a tiny tolerance)\n    feasible = caps >= (item - _TOL)\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placing the item (non\u2011negative)\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Inverse\u2011slack bias: larger for tighter fits\n    bias = 1.0 / (slack + _EPS)\n\n    # Normalise bias to [0, 1]\n    bias_norm = bias / (bias.max() + _EPS)\n\n    # Random component in [0, 1) for feasible bins\n    rng = np.random.default_rng()\n    rand_vals = rng.random(bias_norm.shape)\n\n    # Blend bias and randomness multiplicatively\n    blended = bias_norm * rand_vals\n\n    # Normalise blended scores to [0, 1]\n    blended_norm = blended / (blended.max() + _EPS)\n\n    # Deterministic tie\u2011breaker: lower index gets a slight advantage\n    tie_breaker = -np.arange(n_bins)[feasible] * _TIE\n\n    # Final priority for feasible bins\n    priorities[feasible] = blended_norm + tie_breaker\n\n    return priorities\n\n[Reflection]\nNormalize bias, blend with tiny random noise, add minute index tie\u2011breaker, use epsilon, enforce feasibility tolerance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}