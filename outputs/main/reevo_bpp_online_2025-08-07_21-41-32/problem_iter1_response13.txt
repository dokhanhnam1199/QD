```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Compute priority for each bin according to an Almost Full Fit strategy.

    The algorithm prioritises bins that, after placing the incoming item,
    will be left with the smallest residual capacity.  This mimics the
    best‑fit principle: use a bin that is already quite full, thereby
    creating as little wasted space as possible.

    Bins that cannot accommodate the item receive an extremely low
    priority (`-np.inf`) to effectively remove them from consideration.

    Parameters
    ----------
    item : float
        Size of the item to be packed.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each open bin.

    Returns
    -------
    np.ndarray
        Array of the same shape as ``bins_remain_cap`` containing the
        priority score for each bin; the bin with the highest score is
        chosen by the calling routine.
    """
    # Ensure a numeric one‑dimensional array
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Bin eligibility mask
    fits = bins_remain_cap >= item

    # Start with a low priority for all bins; –np.inf guarantees that
    # any fitting bin will dominate
    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)

    # Residual capacity that would remain after adding the item
    residuals = bins_remain_cap - item

    # Higher priority → smaller residual (better fit)
    # A residual of 0 (perfect fill) gives the maximum score of 0.
    # Bins with a positive residual give progressively lower scores.
    priorities[fits] = -residuals[fits]

    return priorities
```
