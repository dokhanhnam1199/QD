{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for assigning ``item`` to each bin in ``bins_remain_cap``.\n\n    This heuristic blends a tight\u2011fit bias (inverse slack) with a controlled\n    random component.  The boost for \u201calmost full\u201d bins is set dynamically\n    based on a low\u2011percentile slack threshold, and the epsilon used in the\n    inverse\u2011slack term adapts to the typical slack magnitude.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n\n    Returns\n    -------\n    np.ndarray\n        A 1\u2011D array of priority scores (higher is better).  Infeasible bins\n        receive ``-np.inf`` so they are never selected.\n    \"\"\"\n    # Ensure a float array\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Slack after hypothetically placing the item\n    slack = caps - item\n\n    # Feasibility mask: only bins that can hold the item\n    feasible = slack >= 0\n\n    # Initialise all priorities to -inf (infeasible bins)\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # If no feasible bin exists, return the all -inf array early\n    if not np.any(feasible):\n        return priorities\n\n    # ------------------------------------------------------------------\n    # 1) Tight\u2011fit bias: inverse of slack (smaller slack \u2192 larger priority)\n    #    epsilon adapts to the typical slack magnitude to avoid division\u2011by\u2011zero\n    # ------------------------------------------------------------------\n    mean_slack = np.mean(slack[feasible]) if np.any(feasible) else 0.0\n    eps = max(1e-12, 1e-6 * mean_slack)               # adaptive epsilon\n    inv_slack = 1.0 / (slack[feasible] + eps)        # larger for tighter fits\n\n    # ------------------------------------------------------------------\n    # 2) Dynamic boost for \u201calmost full\u201d bins\n    #    Use a low percentile (e.g., 10th) of the slack distribution as a threshold\n    # ------------------------------------------------------------------\n    low_percentile = 0.10\n    slack_feas = slack[feasible]\n    threshold = np.quantile(slack_feas, low_percentile) if slack_feas.size > 0 else 0.0\n\n    boost_factor = 5.0                               # magnitude of boost\n    boost = np.zeros_like(slack_feas)\n    low_slack_mask = slack_feas <= threshold\n    boost[low_slack_mask] = boost_factor * (threshold - slack_feas[low_slack_mask])\n\n    # ------------------------------------------------------------------\n    # 3) Combine bias and boost\n    # ------------------------------------------------------------------\n    combined = inv_slack + boost\n\n    # ------------------------------------------------------------------\n    # 4) Controlled randomness: a random factor close to 1 (e.g., [0.8, 1.0])\n    #    This keeps the bias dominant while providing tie\u2011breaking randomness.\n    # ------------------------------------------------------------------\n    rand_vals = np.random.rand(caps.size)\n    rand_factor = 0.8 + 0.2 * rand_vals               # range [0.8, 1.0]\n    final_feasible = combined * rand_factor[feasible]\n\n    # Assign computed priorities back to the full array\n    priorities[feasible] = final_feasible\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for each bin for the online Bin Packing Problem.\n\n    The heuristic favours bins that become *almost full* after placing the item,\n    applying an adaptive boost that grows when the leftover capacity is small.\n    Infeasible bins receive a large negative priority so they are never chosen.\n    A tiny random perturbation is added to break ties in a non\u2011deterministic way.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores, one per bin. The bin with the highest score\n        should be selected for the item.\n    \"\"\"\n    # Ensure a floating point array\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Leftover capacity after hypothetically placing the item\n    leftover = caps - item\n\n    # Feasibility mask: True if the bin can accommodate the item\n    feasible = leftover >= 0\n\n    # Base priority: higher when leftover is smaller (negative leftover)\n    base_priority = -leftover\n\n    # Adaptive boost: decays quickly as leftover grows.\n    # Use a scale (eps) that adapts to the current distribution of feasible leftovers.\n    if np.any(feasible):\n        # Use a low percentile of feasible leftovers as a scale.\n        # This makes the boost more aggressive when many bins are nearly full.\n        eps = np.percentile(leftover[feasible], 25)  # 25th percentile\n        # Guard against eps being zero (e.g., when a perfect fit exists)\n        eps = max(eps, 1e-6)\n    else:\n        eps = 0.05  # fallback scale when no bin can hold the item\n\n    boost_factor = 5.0  # magnitude of the boost\n\n    # Exponential decay boost: maximum boost_factor when leftover \u2248 0,\n    # decays to near\u2011zero for leftover \u226b eps.\n    boost = boost_factor * np.exp(-leftover / eps)\n\n    # Combine base priority and boost, penalise infeasible bins with -inf\n    priority = np.where(feasible, base_priority + boost, -np.inf)\n\n    # Add a tiny random perturbation for tie\u2011breaking (only on feasible bins)\n    rng = np.random.default_rng()\n    tie_break = rng.random(priority.shape) * 1e-12\n    priority = np.where(feasible, priority + tie_break, priority)\n\n    return priority\n\n[Reflection]\nUse adaptive exponential boost, tiny tie\u2011breaking noise; keep computation lightweight, avoid extra percentile/inverse\u2011slack calculations.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}