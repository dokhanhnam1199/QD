```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    tolerance: float = 1e-12,
    tie_breaker: float = 1e-12,
) -> np.ndarray:
    """
    Exact‑Fit‑First priority function for online bin packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacities of the open bins.
    tolerance : float, optional
        Numerical tolerance for feasibility and exact‑fit detection.
        Bins whose remaining capacity is at least ``item - tolerance`` are considered
        feasible.  A leftover smaller than ``tolerance`` is treated as an exact fit.
    tie_breaker : float, optional
        Tiny value used to break ties deterministically in favour of lower‑indexed bins.
        Must be sufficiently smaller than the smallest possible leftover.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (same shape as ``bins_remain_cap``).
        Higher values indicate more attractive bins.  Infeasible bins receive
        ``-np.inf``.
    """
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()

    # Feasibility mask
    feasible = caps >= (item - tolerance)

    # Initialise priorities with -inf for infeasible bins
    priorities = np.full_like(caps, -np.inf, dtype=float)

    if not np.any(feasible):
        # No feasible bin; return all -inf
        return priorities

    # Leftover capacity for feasible bins (ensure non‑negative)
    leftover = np.clip(caps[feasible] - item, 0.0, None)

    # Indices of feasible bins (for deterministic tie‑breaking)
    idx = np.where(feasible)[0]

    # Exact‑Fit‑First: smaller leftover → higher priority
    # Use negative leftover so that exact fit (leftover == 0) has the highest raw score.
    priorities[feasible] = -leftover - idx * tie_breaker

    return priorities
```
