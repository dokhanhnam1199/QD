{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator for tie\u2011breaking\n_rng = np.random.default_rng()\n\n\n    \"\"\"\n    Compute a priority score for each bin in the online Bin Packing Problem.\n\n    The heuristic favours bins that become almost full after placing the item,\n    applying an exponential boost that decays with the leftover capacity.\n    Infeasible bins receive a -inf priority so they are never selected.\n    A tiny random perturbation is added to break ties non\u2011deterministically.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. The bin with the highest score should be\n        selected for the item.\n    \"\"\"\n    # Convert to a float array (handles list, tuple, etc.)\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Edge case: no bins available\n    if caps.size == 0:\n        return np.empty_like(caps)\n\n    # Leftover capacity if the item were placed in each bin\n    leftover = caps - item\n\n    # Feasibility mask: True where the bin can accommodate the item\n    feasible = leftover >= 0\n\n    # Initialise all priorities to -inf (infeasible by default)\n    priority = np.full_like(caps, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bins \u2013 return all -inf\n        return priority\n\n    # Extract leftovers for feasible bins only\n    leftover_feas = leftover[feasible]\n\n    # Base priority: larger when leftover is smaller (i.e., -leftover)\n    base_priority = -leftover_feas\n\n    # Adaptive epsilon: low percentile of feasible leftovers acts as scale\n    eps = np.percentile(leftover_feas, 25)          # 25th percentile\n    eps = max(eps, 1e-6)                            # guard against zero\n\n    # Exponential boost: maximal boost when leftover \u2248 0, decays quickly\n    boost_factor = 5.0\n    boost = boost_factor * np.exp(-leftover_feas / eps)\n\n    # Tiny random tie\u2011breaker (only on feasible bins)\n    tie_break = _rng.random(leftover_feas.shape) * 1e-12\n\n    # Combine components and write back to the full priority array\n    priority[feasible] = np.where(feasible, base_priority + boost + tie_break, priority)\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Random Fit priority for online bin packing.\n\n    Each feasible bin (with enough remaining capacity) receives a random score.\n    Infeasible bins receive -inf so they are never selected. This implements a\n    pure random fit strategy, optionally biased toward tighter fits.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities for each bin.\n\n    Returns:\n        A 1\u2011D array of priority scores, one per bin.\n    \"\"\"\n    # Ensure capacities are a float array.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    feasible = caps >= item\n\n    # Initialise all priorities to -inf (so infeasible bins are never chosen).\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # Generate independent random numbers for each bin.\n    rand_scores = np.random.rand(caps.size)\n\n    # Bias towards tighter fits: less slack -> larger bias.\n    # Small epsilon avoids division by zero for exact fits.\n    epsilon = 1e-12\n    slack = caps - item\n    bias = np.zeros_like(caps)\n    bias[feasible] = 1.0 / (slack[feasible] + epsilon)  # higher when slack is small\n\n    # Combine random component with bias.\n    # Multiplying emphasizes bins with higher bias while preserving randomness.\n    priorities[feasible] = bias[feasible] * rand_scores[feasible]\n\n    return priorities\n\n[Reflection]\nBias random scores by inverse slack, adapt boost scale, keep tie\u2011breakers tiny, avoid extreme exponentials.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}