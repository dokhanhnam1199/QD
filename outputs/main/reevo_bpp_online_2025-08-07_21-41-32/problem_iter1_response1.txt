```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Return a priority array that implements the Best‑Fit strategy.

    For each bin compute the leftover capacity if the item is added:
        leftover = bins_remain_cap - item
    A bin is a candidate only if leftover >= 0.  The priority of a candidate bin
    is the negative of the leftover, i.e. `-(bins_remain_cap - item)`.  
    This yields a higher priority for bins that would have less free space after
    packing the item (i.e., "best fit").  Infeasible bins are assigned
    `-np.inf` so they cannot be selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the current remaining capacity in each bin.

    Returns
    -------
    np.ndarray
        Array of priority scores; the bin with the largest score will be chosen.
    """
    # Calculate potential leftover after adding the item
    leftover = bins_remain_cap - item

    # Identify bins that cannot fit the item
    infeasible = leftover < 0

    # Base priority: negative leftover, i.e. smallest leftover gets the highest score
    priority = -leftover

    # Mask infeasible bins with negative infinity so they will not be selected
    priority[infeasible] = -np.inf

    return priority
```
