{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Compute Worst\u2011Fit priority for each bin.\n\n    The worst\u2011fit strategy always places the next item into the bin with\n    the *largest* remaining free capacity that is large enough to hold\n    the item.  This function returns a score array; the bin with the\n    maximum score is chosen for the item.  Bins that cannot accommodate\n    the item are given a score of -np.inf, ensuring they are never\n    selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacity of each bin (positive numbers).  Must be 1\u2011D.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores of the same shape as `bins_remain_cap`.  The\n        highest score corresponds to the bin that should receive the\n        item under the worst\u2011fit policy.\n    \"\"\"\n    # Only bins that have enough capacity are considered; others get -inf score\n    valid = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priorities[valid] = bins_remain_cap[valid]\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Random Fit priority for online bin packing.\n\n    Each feasible bin (with enough remaining capacity) receives a random score.\n    Infeasible bins receive -inf so they are never selected. This implements a\n    pure random fit strategy, optionally biased toward tighter fits.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities for each bin.\n\n    Returns:\n        A 1\u2011D array of priority scores, one per bin.\n    \"\"\"\n    # Ensure capacities are a float array.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    feasible = caps >= item\n\n    # Initialise all priorities to -inf (so infeasible bins are never chosen).\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # Generate independent random numbers for each bin.\n    rand_scores = np.random.rand(caps.size)\n\n    # Bias towards tighter fits: less slack -> larger bias.\n    # Small epsilon avoids division by zero for exact fits.\n    epsilon = 1e-12\n    slack = caps - item\n    bias = np.zeros_like(caps)\n    bias[feasible] = 1.0 / (slack[feasible] + epsilon)  # higher when slack is small\n\n    # Combine random component with bias.\n    # Multiplying emphasizes bins with higher bias while preserving randomness.\n    priorities[feasible] = bias[feasible] * rand_scores[feasible]\n\n    return priorities\n\n[Reflection]\nBlend worst\u2011fit with slack\u2011biased randomness; normalize, weight components, add exploration, anticipate future items.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}