```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for each bin in an online Bin Packing setting.

    The priority blends an inverse‑slack bias (tight fits) with a random factor
    and a tiny deterministic tie‑breaker based on the bin index. Infeasible
    bins (capacity < item) receive ``-np.inf`` so they are never selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Priority scores (higher is better) for each bin.
    """
    # Constants
    _TOL = 1e-12   # feasibility tolerance
    _EPS = 1e-12   # to avoid division by zero
    _TIE = 1e-12   # deterministic tie‑breaker magnitude

    # Ensure a 1‑D float array
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # Feasibility mask
    feasible = caps >= (item - _TOL)

    # Initialise priorities with -inf for infeasible bins
    priorities = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        return priorities

    # Slack after placement (non‑negative)
    slack = np.maximum(caps[feasible] - item, 0.0)

    # Inverse‑slack bias: larger for tighter fits
    bias = 1.0 / (slack + _EPS)

    # Normalise bias to [0, 1]
    bias_norm = bias / (bias.max() + _EPS)

    # Random component in [0, 1) for feasible bins
    rand_vals = np.random.random(bias_norm.shape)

    # Blend bias and randomness multiplicatively
    blended = bias_norm * rand_vals

    # Tiny deterministic tie‑breaker: lower index gets a small advantage
    tie_breaker = -np.arange(n_bins, dtype=float)[feasible] * _TIE

    # Final priority for feasible bins
    priorities[feasible] = blended + tie_breaker

    return priorities
```
