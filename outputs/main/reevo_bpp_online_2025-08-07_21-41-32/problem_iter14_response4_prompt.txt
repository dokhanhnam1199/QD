{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global RNG for reproducible stochastic tie\u2011breaking, used when no RNG is supplied.\n_GLOBAL_RNG = np.random.default_rng(123456789)\n\n\n                bins_remain_cap: np.ndarray,\n                *,\n                eps: float = 1e-12,\n                noise_scale: float = 1e-6,\n                idx_penalty: float = 1e-15,\n                rng: np.random.Generator = None) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online bin\u2011packing setting.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n    eps : float, optional\n        Small constant added to slack to avoid division by zero.\n    noise_scale : float, optional\n        Relative magnitude of the stochastic tie\u2011breaking noise. The actual\n        noise added to a bin is ``U(0,1) * noise_scale * inverse_slack``.\n    idx_penalty : float, optional\n        Deterministic penalty proportional to the bin index used to break any\n        remaining ties (very small to preserve the order dictated by the\n        inverse\u2011slack bias).\n    rng : numpy.random.Generator, optional\n        Random number generator for stochastic tie\u2011breaking. If ``None`` a\n        global reproducible generator is used.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher = more attractive). Bins that cannot accommodate\n        the item receive ``-np.inf`` so they are never selected.\n    \"\"\"\n    # Ensure a flat float array.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Start with infeasible scores.\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    # Feasibility mask.\n    feasible = caps >= item\n    if not np.any(feasible):\n        return priorities\n\n    # Slack that would remain after placing the item.\n    slack = caps[feasible] - item\n\n    # Inverse\u2011slack bias: larger when slack is smaller (tighter fit).\n    inv_slack = 1.0 / (slack + eps)\n\n    # Stochastic tie\u2011breaking: small random perturbation scaled to the bias.\n    if rng is None:\n        rng = _GLOBAL_RNG\n    rand = rng.random(inv_slack.shape)          # Uniform [0, 1)\n    noise = rand * noise_scale * inv_slack\n\n    # Deterministic index penalty for any remaining ties.\n    idx = np.nonzero(feasible)[0].astype(float)  # indices of feasible bins\n    penalty = idx * idx_penalty\n\n    # Final priority: bias + noise \u2013 penalty.\n    scores = inv_slack + noise - penalty\n    priorities[feasible] = scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    epsilon: float = 1e-12,\n    tie_breaker: float = 1e-12,\n    random_state: Optional[np.random.Generator] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem.\n\n    For each currently open bin we compute a score; the bin with the highest\n    score will receive the incoming item.  The score favours:\n      * Feasibility (the bin must have enough remaining capacity).\n      * Tight fits (small slack after insertion).\n      * A small deterministic tie\u2011breaker based on the bin index.\n      * Random diversification to avoid pathological deterministic behaviour.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each open bin.\n    tolerance : float, optional\n        Numerical tolerance for feasibility checks (default 1e-12).\n    epsilon : float, optional\n        Small constant added to slack to avoid division by zero\n        (default 1e-12).\n    tie_breaker : float, optional\n        Weight applied to the bin index to break ties deterministically.\n        Must be small enough not to outweigh the main bias (default 1e-12).\n    random_state : np.random.Generator, optional\n        Random number generator for reproducibility. If ``None`` a new\n        default generator is created.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (higher is better). Infeasible bins\n        receive ``-np.inf`` (negative infinity) and will never be selected.\n    \"\"\"\n    # Ensure a random generator is available.\n    rng = random_state if random_state is not None else np.random.default_rng()\n\n    # Flatten and cast capacities to float.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Determine which bins can accommodate the item (within tolerance).\n    feasible = caps >= (item - tolerance)\n\n    # Initialise all scores to -inf (infeasible by default).\n    scores = np.full(n_bins, -np.inf, dtype=float)\n\n    # Early exit if no bin can hold the item.\n    if not np.any(feasible):\n        return scores\n\n    # Compute slack (remaining capacity after the item would be placed).\n    # Clip negative values caused by floating\u2011point noise.\n    slack = np.maximum(caps - item, 0.0)\n\n    # Bias: larger for tighter fits (smaller slack). Adding epsilon avoids div\u2011by\u20110.\n    bias = 1.0 / (slack + epsilon)\n\n    # Random component: one uniform number per bin.\n    rand = rng.random(n_bins)\n\n    # Deterministic tie\u2011breaker: smaller index => slightly higher score.\n    idx_factor = np.arange(n_bins, dtype=float) * tie_breaker\n\n    # Combine the three components.\n    #   bias * rand   -> favours tight fits while still randomising.\n    #   - idx_factor  -> breaks exact ties in favour of lower indices.\n    scores[feasible] = bias[feasible] * rand[feasible] - idx_factor[feasible]\n\n    return scores\n\n[Reflection]\nAdd deterministic tie\u2011breaking, scale random noise with bias, enforce feasibility tolerance, vectorize, evaluate slack thresholds.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}