{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    tie_breaker: float = 1e-15,\n) -> np.ndarray:\n    \"\"\"\n    Deterministic exact\u2011fit\u2011first priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n    tolerance : float, optional\n        Numerical tolerance for feasibility detection. Bins whose remaining\n        capacity is at least ``item - tolerance`` are considered feasible.\n    tie_breaker : float, optional\n        Tiny value used to break ties deterministically in favour of lower\u2011indexed\n        bins. Must be smaller than ``tolerance``.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``). Higher\n        values indicate more attractive bins. Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # Ensure a flat NumPy array of floats.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n\n    # Feasibility mask: bins that can accommodate the item within tolerance.\n    feasible = caps >= (item - tolerance)\n\n    # Initialise priorities with -inf for infeasible bins.\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bin; return all -inf.\n        return priorities\n\n    # Compute leftover capacity for feasible bins.\n    leftover = caps[feasible] - item\n    # Clip tiny negative leftovers caused by tolerance to zero.\n    leftover = np.maximum(leftover, 0.0)\n\n    # Indices of feasible bins (used for deterministic tie\u2011breaking).\n    idx = np.where(feasible)[0]\n\n    # Exact\u2011fit\u2011first: smaller leftover \u2192 higher priority.\n    # Use negative leftover so exact fit (leftover == 0) yields the highest raw score.\n    # Subtract a tiny index\u2011dependent term to break ties in favour of lower\u2011indexed bins.\n    priorities[feasible] = -leftover - idx * tie_breaker\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Random Fit priority for online bin packing.\n\n    Each feasible bin (with enough remaining capacity) receives a random score.\n    Infeasible bins receive -inf so they are never selected. This implements a\n    pure random fit strategy, optionally biased toward tighter fits.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities for each bin.\n\n    Returns:\n        A 1\u2011D array of priority scores, one per bin.\n    \"\"\"\n    # Ensure capacities are a float array.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    feasible = caps >= item\n\n    # Initialise all priorities to -inf (so infeasible bins are never chosen).\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # Generate independent random numbers for each bin.\n    rand_scores = np.random.rand(caps.size)\n\n    # Bias towards tighter fits: less slack -> larger bias.\n    # Small epsilon avoids division by zero for exact fits.\n    epsilon = 1e-12\n    slack = caps - item\n    bias = np.zeros_like(caps)\n    bias[feasible] = 1.0 / (slack[feasible] + epsilon)  # higher when slack is small\n\n    # Combine random component with bias.\n    # Multiplying emphasizes bins with higher bias while preserving randomness.\n    priorities[feasible] = bias[feasible] * rand_scores[feasible]\n\n    return priorities\n\n[Reflection]\nUse slack\u2011based bias, incorporate stochastic tie\u2011breaking, and adapt bias over time based on bin fill levels.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}