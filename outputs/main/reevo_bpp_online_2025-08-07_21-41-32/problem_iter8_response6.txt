```python
import numpy as np
from typing import Optional, Union


def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    tolerance: float = 1e-12,
    tie_breaker: float = 1e-12,
    random_state: Optional[Union[int, np.random.Generator]] = None,
) -> np.ndarray:
    """
    Compute a priority score for each bin in an online Bin Packing setting.

    The score favours bins with the smallest remaining slack (tight fits) while
    adding a random component to break ties and promote diversification.
    Infeasible bins (insufficient capacity) receive ``-np.inf`` so they are
    never selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.
    tolerance : float, optional
        Numerical tolerance used for feasibility checks and to avoid division
        by zero when computing the bias.
    tie_breaker : float, optional
        Tiny positive constant to break ties deterministically; lower‑indexed
        bins are slightly preferred.
    random_state : int or np.random.Generator, optional
        Seed or generator for reproducible randomness. If ``None`` the global
        NumPy RNG is used.

    Returns
    -------
    np.ndarray
        Array of priority scores (shape matches ``bins_remain_cap``). Higher
        scores indicate more attractive bins.
    """
    # Ensure a flat float array.
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # Early exit for empty input.
    if n_bins == 0:
        return np.empty_like(caps, dtype=float)

    # Feasibility mask (allow a small tolerance for floating‑point errors).
    feasible = caps >= (item - tolerance)

    # Initialise all priorities as -inf (infeasible bins).
    priorities = np.full(n_bins, -np.inf, dtype=float)

    # If no bin can accommodate the item, return early.
    if not np.any(feasible):
        return priorities

    # Slack for feasible bins (non‑negative, clipped to zero if slightly negative).
    slack = caps[feasible] - item
    slack = np.maximum(slack, 0.0)

    # Bias: larger for tighter fits (smaller slack). Add tolerance to avoid div‑by‑zero.
    bias = np.zeros_like(caps, dtype=float)
    bias[feasible] = 1.0 / (slack + tolerance)

    # Normalise bias across feasible bins so the maximum becomes 1.
    max_bias = bias[feasible].max()
    if max_bias > 0:
        bias_norm = np.zeros_like(caps, dtype=float)
        bias_norm[feasible] = bias[feasible] / max_bias
    else:
        bias_norm = bias  # all zeros (should not happen for feasible bins)

    # Random component.
    if isinstance(random_state, np.random.Generator):
        rng = random_state
    else:
        rng = np.random.default_rng(random_state)
    rand_vals = rng.random(n_bins)

    # Combine bias and randomness.
    combined = bias_norm * rand_vals

    # Deterministic tie‑breaker: lower index gets a tiny advantage.
    idx_feasible = np.where(feasible)[0].astype(float)
    tie_term = np.zeros_like(caps, dtype=float)
    tie_term[feasible] = idx_feasible * tie_breaker

    # Final priority for feasible bins.
    priorities[feasible] = combined[feasible] - tie_term[feasible]

    return priorities
```
