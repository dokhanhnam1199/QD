```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for bins in an online bin‑packing setting.

    The priority favours bins where the item fits tightly (small slack),
    adds a tiny random perturbation to break ties probabilistically,
    and includes a deterministic tie‑breaker that gives a minute advantage
    to lower‑index bins. Bins that cannot accommodate the item receive
    ``-np.inf`` and are never selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Priority V2 scores (higher = more attractive). Infeasible bins are
        assigned ``-np.inf``.
    """
    # constants
    _TOL = 1e-12          # feasibility tolerance
    _EPS = 1e-9           # epsilon for inverse‑slack to avoid division by zero
    _RND_SCALE = 1e-10    # tiny random noise scale
    _TIE_BREAK = 1e-12    # deterministic tie‑breaker magnitude

    # flatten capacity array to 1‑D float vector
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # feasibility mask (allow a tiny tolerance for floating‑point errors)
    feasible = caps >= (item - _TOL)

    # initialise priorities: infeasible bins get -inf
    priorities = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        # no bin can accommodate the item
        return priorities

    # slack that would remain after placing the item (non‑negative)
    slack = caps[feasible] - item
    slack = np.maximum(slack, 0.0)

    # inverse‑slack bias: larger when slack is smaller (tighter fit)
    bias = 1.0 / (slack + _EPS)

    # tiny random perturbation
    rng = np.random.default_rng()
    noise = rng.random(bias.shape) * _RND_SCALE

    # deterministic tie‑breaker: lower index → slight advantage
    tie_breaker = -np.arange(n_bins)[feasible] * _TIE_BREAK

    # final priority for feasible bins
    priorities[feasible] = bias + noise + tie_breaker

    return priorities
```
