```python
import numpy as np

def priority_v2(item: float, np.ndarray) -> np.ndarray:
    """
    Compute priority scores for online bin packing using inverse waste.

    For each bin that can accommodate the item, the priority is proportional to
    1 / (remaining_capacity - item + eps).  Bins that cannot accommodate the
    item receive a priority of -inf, ensuring they are never selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each bin.

    Returns
    -------
    np.ndarray
        Priority scores (same shape as ``bins_remain_cap``).  Higher values
        indicate more desirable bins.
    """
    eps = 1e-12  # tiny constant to avoid division by zero

    # Ensure a 1‑D float array for vectorized operations
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()

    # Feasibility mask: bins that can hold the item
    feasible = caps >= item

    # Compute waste (remaining capacity after placing the item)
    waste = caps - item

    # Initialise all priorities to -inf (infeasible bins stay -inf)
    priorities = np.full_like(caps, -np.inf, dtype=float)

    # Inverse waste for feasible bins (larger priority for tighter fits)
    priorities[feasible] = 1.0 / (waste[feasible] + eps)

    return priorities
```
