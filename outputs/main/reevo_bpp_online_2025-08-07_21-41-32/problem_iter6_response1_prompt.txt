{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    bin_ages: Optional[np.ndarray] = None,\n    temperature: float = 1.0,\n    lookahead_items: Optional[np.ndarray] = None,\n    random_state: Optional[int] = None,\n) -> np.ndarray:\n    \"\"\"\n    Compute a priority score for each bin in an online bin\u2011packing setting.\n\n    The heuristic blends an exact\u2011fit bias with a worst\u2011fit component,\n    optionally incorporates look\u2011ahead information and bin (age) information,\n    and finally applies a temperature\u2011scaled exponential transformation to\n    encourage exploration. Infeasible bins receive a score of -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n    bin_ages : np.ndarray, optional\n        1\u2011D array (same length as ``bins_remain_cap``) indicating the age of\n        each bin (e.g., number of items already placed). Older bins receive a\n        small boost to encourage closing them.\n    temperature : float, default 1.0\n        Controls the softness of the exponential scaling. Must be > 0.\n        Lower values make the algorithm greedier.\n    lookahead_items : np.ndarray, optional\n        Array of sizes of upcoming items. A bin that can still accommodate many\n        look\u2011ahead items receives a boost.\n    random_state : int, optional\n        Seed for the internal RNG used for tie\u2011breaking noise.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better). Infeasible bins have -inf.\n    \"\"\"\n    eps = 1e-12  # tiny epsilon to avoid division by zero\n\n    # Guard temperature\n    temperature = max(temperature, eps)\n\n    # Prepare capacities\n    caps = np.asarray(bins_remain_cap, dtype=float).copy()\n    n_bins = caps.size\n\n    # Initialise priorities with -inf (infeasible by default)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    # Feasibility mask\n    feasible = caps >= item\n    if not np.any(feasible):\n        return priorities  # nothing fits\n\n    # ------------------------------------------------------------------\n    # 1. Core exact\u2011fit / worst\u2011fit scores\n    # ------------------------------------------------------------------\n    slack = caps - item                     # remaining space after placement\n    slack_feas = slack[feasible]\n\n    # Exact\u2011fit: prefers tiny slack (i.e., tight fit)\n    exact_fit = 1.0 / (slack_feas + eps)    # larger when waste is small\n\n    # Worst\u2011fit: prefers large slack (i.e., keep space for future large items)\n    worst_fit = slack_feas / (np.max(caps) + eps)  # normalized to [0, 1]\n\n    # Blend them (weights sum to 1)\n    w_exact = 0.6\n    w_worst = 0.4\n    core_score = w_exact * exact_fit + w_worst * worst_fit\n\n    # ------------------------------------------------------------------\n    # 2. Optional look\u2011ahead boost\n    # ------------------------------------------------------------------\n    if lookahead_items is not None and lookahead_items.size > 0:\n        lookahead = np.asarray(lookahead_items, dtype=float)\n\n        # Boolean matrix: (n_feasible, n_lookahead) \u2013 True if lookahead item fits\n        fits = lookahead[None, :] <= slack_feas[:, None]\n        # Fraction of look\u2011ahead items that could still be placed after this item\n        lookahead_frac = fits.mean(axis=1)  # in [0, 1]\n\n        lookahead_weight = 0.3\n        core_score *= (1.0 + lookahead_weight * lookahead_frac)\n\n    # ------------------------------------------------------------------\n    # 3. Optional bin\u2011age boost\n    # ------------------------------------------------------------------\n    if bin_ages is not None:\n        ages = np.asarray(bin_ages, dtype=float)\n        if ages.shape != caps.shape:\n            raise ValueError(\"bin_ages must have the same shape as bins_remain_cap\")\n        # Normalise ages to [0, 1]\n        age_norm = ages / (np.max(ages) + eps)\n        age_weight = 0.2\n        age_factor = 1.0 + age_weight * age_norm\n        core_score *= age_factor[feasible]\n\n    # ------------------------------------------------------------------\n    # 4. Temperature\u2011scaled exponential scaling (softmax\u2011like)\n    # ------------------------------------------------------------------\n    exp_score = np.exp(core_score / temperature)\n\n    # ------------------------------------------------------------------\n    # 5. Tiny random tie\u2011breaker for numerical stability / exploration\n    # ------------------------------------------------------------------\n    rng = np.random.default_rng(random_state)\n    tie_eps = 1e-8\n    exp_score += rng.random(exp_score.shape) * tie_eps\n\n    # Fill the priorities array for feasible bins\n    priorities[feasible] = exp_score\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for the online Bin Packing Problem.\n\n    For each existing bin the function returns a score; the bin with the\n    highest score is selected for the incoming ``item``.  The heuristic\n    combines three ingredients:\n\n    1. **Inverse\u2011slack bias** \u2013 bins with less remaining capacity after the\n       item (i.e. tighter fits) receive a larger base score.\n    2. **Percentile\u2011based boost** \u2013 bins whose slack falls below a low\u2011percentile\n       (default 10\u202f%) are further boosted, encouraging the algorithm to fill\n       \u201calmost full\u2019\u2019 bins.\n    3. **Controlled randomness** \u2013 a mild random factor in the range\n       [0.9,\u202f1.0] breaks ties while keeping the deterministic bias dominant.\n\n    Infeasible bins (those that cannot accommodate the item) obtain ``-np.inf``,\n    guaranteeing they are never chosen.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n\n    Returns\n    -------\n    np.ndarray\n        1\u2011D array of priority scores (higher is better).  Infeasible bins are\n        marked with ``-np.inf``.\n    \"\"\"\n    # Ensure we work with a float array\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Slack after hypothetically placing the item\n    slack = caps - item\n    feasible = slack >= 0\n\n    # Initialise all scores as -inf (infeasible)\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # If no bin can hold the item, return early\n    if not np.any(feasible):\n        return priorities\n\n    # ------------------------------------------------------------------\n    # 1) Adaptive epsilon and inverse\u2011slack bias\n    # ------------------------------------------------------------------\n    # Typical slack magnitude \u2013 use mean of feasible slacks\n    mean_slack = np.mean(slack[feasible])\n    # epsilon scales with the typical slack to avoid division\u2011by\u2011zero\n    eps = max(1e-12, 1e-6 * mean_slack)\n    inv_slack = 1.0 / (slack[feasible] + eps)   # larger when slack is smaller\n\n    # ------------------------------------------------------------------\n    # 2) Percentile\u2011based boost for \u201calmost full\u2019\u2019 bins\n    # ------------------------------------------------------------------\n    low_percentile = 0.10                     # 10\u202f% percentile\n    slack_feas = slack[feasible]\n    # Threshold slack value below which bins receive a boost\n    threshold = np.quantile(slack_feas, low_percentile) if slack_feas.size else 0.0\n\n    # Linear boost proportional to distance below the threshold\n    boost_factor = 5.0                         # magnitude of boost\n    boost = np.zeros_like(slack_feas)\n    low_slack_mask = slack_feas <= threshold\n    boost[low_slack_mask] = boost_factor * (threshold - slack_feas[low_slack_mask])\n\n    # ------------------------------------------------------------------\n    # 3) Combine deterministic components\n    # ------------------------------------------------------------------\n    combined = inv_slack + boost\n\n    # ------------------------------------------------------------------\n    # 4) Controlled random tie\u2011breaker (range [0.9, 1.0])\n    # ------------------------------------------------------------------\n    rand_vals = np.random.rand(caps.size)      # one random number per bin\n    rand_factor = 0.9 + 0.1 * rand_vals         # maps to [0.9, 1.0]\n    # Apply only to feasible bins\n    final_score = combined * rand_factor[feasible]\n\n    # Store the computed scores back into the full array\n    priorities[feasible] = final_score\n\n    return priorities\n\n[Reflection]\nAdaptive epsilon, combine inverse\u2011slack with low\u2011percentile boost, normalize scores, tiny random tie\u2011breaker, avoid heavy lookahead.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}