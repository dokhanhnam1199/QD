```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online bin packing that:
    - Biases random scores by the inverse of the slack (remaining capacity minus item size).
    - Adapts the weight of the bias based on the fraction of feasible bins.
    - Adds a deterministic tie‑breaker that favors lower indexed bins.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each open bin.

    Returns
    -------
    np.ndarray
        Priority scores (higher is better) for each bin.
    """
    caps = np.asarray(bins_remain_cap, dtype=float)
    n_bins = caps.size

    # Feasibility mask (allow a tiny tolerance)
    tolerance = 1e-12
    feasible = caps >= (item - tolerance)

    # Initialize all priorities to -inf for infeasible bins
    priorities = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        return priorities

    # Slack after placing the item (non‑negative)
    slack = caps[feasible] - item
    slack = np.maximum(slack, 0.0)

    # Inverse slack bias (higher bias for tighter fits)
    eps = 1e-12
    bias = 1.0 / (slack + eps)

    # Weight bias by the fraction of feasible bins
    feasible_frac = feasible.sum() / n_bins
    weighted_bias = bias * feasible_frac

    # Random component
    rand_scores = np.random.rand(feasible.sum())

    # Combine bias and randomness
    combined = weighted_bias * rand_scores

    # Deterministic tie‑breaker: lower index → higher priority
    indices = np.arange(n_bins)
    tie_breaker = 1e-12
    tie = -indices[feasible] * tie_breaker

    # Assign priorities for feasible bins
    priorities[feasible] = combined + tie

    return priorities
```
