```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Best‑Fit inspired priority for online Bin Packing.

    The priority is higher when a bin would be left with as little free
    capacity as possible after placing ``item`` – i.e. the bin that fits the
    item most tightly.  Bins that cannot accommodate the item receive a
    score of ``-np.inf`` so they are never selected.  In case of ties,
    a deterministic tie‑breaker favouring bins with smaller indices is
    applied.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        One‑dimensional array of remaining free capacity for each open bin.

    Returns
    -------
    np.ndarray
        Array of the same shape as ``bins_remain_cap`` containing a priority
        score for each bin.  The bin with the highest score should be chosen.
    """
    # Ensure a NumPy array with float dtype for safe arithmetic
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Slack that would remain if we placed the item into each bin
    slack = bins_remain_cap - item               # feasible if slack >= 0
    feasible = slack >= 0

    # Linear indices for deterministic tie‑breaking (same shape as bins)
    idx = np.arange(bins_remain_cap.size, dtype=float).reshape(bins_remain_cap.shape)

    # Base priority: negative slack (larger = tighter fit)
    # Infeasible bins get -inf so they are never chosen
    base_priority = np.where(feasible, -slack, -np.inf)

    # Tiny index‑based penalty to break ties in favour of lower indices
    # 1e-12 is negligible compared to typical slack magnitudes.
    tie_breaker = 1e-12 * idx

    priorities = base_priority - tie_breaker
    return priorities
```
