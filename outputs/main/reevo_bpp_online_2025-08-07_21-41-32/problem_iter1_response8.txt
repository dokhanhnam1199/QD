```python
import numpy as np

# Global configuration for the epsilon‑greedy strategy
_INITIAL_EPSILON = 0.2   # Starting probability of exploration
_MIN_EPSAY = 0.02       # Minimum exploration probability after decay
_CALL_COUNT = 0         # Number of times the priority function has been invoked

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Epsilon‑greedy priority for online bin packing.

    Exploits a best‑fit rule (minimises waste) with probability (1‑ε) and
    explores random feasible bins with probability ε. ε decays with the
    number of calls to gradually favour exploitation.

    Returns:
        np.ndarray: Priority scores for each bin; higher scores denote more
        desirable bins. Infeasible bins receive -inf priority.
    """
    global _CALL_COUNT
    _CALL_COUNT += 1

    # Decaying epsilon: ε = max(_MIN_EPSILON, _INITIAL_EPSILON / sqrt(call_count))
    epsilon = max(_MIN_EPSILON, _INITIAL_EPSILON / np.sqrt(_CALL_COUNT))

    # Mask for bins that can accommodate the item
    feasible = bins_remain_cap >= item

    # Initialise priorities with -inf for infeasible bins
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # If no bin can hold the item, return all -inf (caller may open a new bin)
    if not feasible.any():
        return priorities

    # --- Exploitation: best‑fit (least residual capacity) ---
    residual = bins_remain_cap - item            # space left after placement
    best_fit_score = -residual                   # higher score → less waste
    best_fit_score[~feasible] = -np.inf

    # --- Exploration: random scoring among feasible bins ---
    rng = np.random.default_rng()
    if rng.random() < epsilon:
        random_score = rng.random(bins_remain_cap.shape)
        random_score[~feasible] = -np.inf
        priorities = random_score
    else:
        priorities = best_fit_score

    # Tiny jitter to break exact ties deterministically
    jitter = rng.random(bins_remain_cap.shape) * 1e-8
    priorities += jitter
    return priorities
```
