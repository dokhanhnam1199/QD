{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for bins in an online bin packing setting.\n\n    The priority is calculated as follows:\n    1. Feasibility check with a tiny tolerance.\n    2. Inverse\u2011slack bias (larger for tighter fits).\n    3. Normalise bias to [0, 1].\n    4. Weight bias by the fraction of feasible bins.\n    5. Multiply the weighted bias by a uniform random number in [0, 1).\n    6. Re\u2011normalise the blended value to [0, 1].\n    7. Add a deterministic tie\u2011breaker that slightly favours lower\u2011index bins.\n    8. Infeasible bins receive -np.inf so they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; the bin with the highest score will\n        be selected for the item.\n    \"\"\"\n    # Constants\n    _TOL = 1e-12          # Feasibility tolerance\n    _EPS = 1e-12          # Small epsilon to avoid division by zero\n    _TIE = 1e-12          # Deterministic tie\u2011breaker magnitude\n\n    # Ensure a 1\u2011D float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask (allow a tiny tolerance)\n    feasible = caps >= (item - _TOL)\n\n    # Initialise all priorities to -inf (infeasible bins)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placing the item\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Inverse\u2011slack bias: larger for tighter fits\n    bias = 1.0 / (slack + _EPS)\n\n    # Normalise bias to [0, 1]\n    bias_norm = bias / (bias.max() + _EPS)\n\n    # Weight bias by the fraction of feasible bins\n    feasible_frac = feasible.sum() / n_bins\n    weighted_bias = bias_norm * feasible_frac\n\n    # Random component in [0, 1)\n    rng = np.random.default_rng()\n    rand = rng.random(feasible.sum())\n\n    # Blend bias and randomness multiplicatively\n    blended = weighted_bias * rand\n\n    # Re\u2011normalise blended scores to [0, 1]\n    blended_norm = blended / (blended.max() + _EPS)\n\n    # Deterministic tie\u2011breaker: lower index \u2192 slightly higher priority\n    indices = np.arange(n_bins)[feasible]\n    tie_breaker = -indices * _TIE\n\n    # Final priority for feasible bins\n    priorities[feasible] = blended_norm + tie_breaker\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for bins in an online bin\u2011packing setting.\n\n    The priority is based on an inverse\u2011slack bias, a small random perturbation,\n    and a minute deterministic tie\u2011breaker based on the bin index. Bins that\n    cannot accommodate the item receive ``-np.inf`` and are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher = more attractive). Infeasible bins are\n        assigned ``-np.inf``.\n    \"\"\"\n    # constants\n    _TOL = 1e-12          # tolerance for feasibility\n    _EPS = 1e-12          # epsilon to avoid division by zero\n    _RND_SCALE = 1e-12    # scale of random noise\n    _TIE_BREAK = 1e-12    # deterministic index tie\u2011breaker magnitude\n\n    # Flatten caps\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask (allow tiny tolerance)\n    feasible = caps >= (item - _TOL)\n\n    # Initialize priorities\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placing the item (non\u2011negative)\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Inverse\u2011slack bias: larger when slack is smaller\n    bias = 1.0 / (slack + _EPS)\n\n    # Normalize bias to [0, 1]\n    bias_norm = bias / (bias.max() + _EPS)\n\n    # Small random noise in [0, 1)\n    rng = np.random.default_rng()\n    noise = rng.random(bias_norm.shape) * _RND_SCALE\n\n    # Deterministic tie\u2011breaker: lower index -> slight advantage\n    tie_breaker = -np.arange(n_bins)[feasible] * _TIE_BREAK\n\n    # Final priority\n    priorities[feasible] = bias_norm + noise + tie_breaker\n\n    return priorities\n\n[Reflection]\nPrioritize tight slack; keep noise tiny; avoid re\u2011normalization; add a tiny deterministic tie\u2011breaker; experiment with epsilon values.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}