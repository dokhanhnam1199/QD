```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for each bin in an online Bin Packing setting.

    The priority favours bins that provide a tight fit (small slack) while
    retaining a stochastic component to diversify choices. Infeasible bins
    receive ``-np.inf`` so they are never selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each open bin.

    Returns
    -------
    np.ndarray
        Priority scores (higher is better) for each bin.
    """
    # ---- Constants ---------------------------------------------------------
    _TOL = 1e-12   # Feasibility tolerance
    _EPS = 1e-12   # Avoid division by zero
    _TIE = 1e-12   # Tiny index‑based tie‑breaker

    # ---- Input sanitisation ------------------------------------------------
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # ---- Feasibility mask --------------------------------------------------
    feasible = caps >= (item - _TOL)

    # Initialise all priorities as infeasible
    priorities = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        return priorities

    # ---- Slack (remaining capacity after placing the item) ------------------
    slack = caps[feasible] - item
    slack = np.maximum(slack, 0.0)  # Guard against tiny negative slacks

    # ---- Inverse‑slack bias (tight fits get larger bias) -------------------
    bias = 1.0 / (slack + _EPS)

    # Normalise bias to the unit interval [0, 1]
    bias_norm = bias / (bias.max() + _EPS)

    # ---- Random component ---------------------------------------------------
    rng = np.random.default_rng()
    rand_vals = rng.random(bias_norm if (bias_norm := bias_norm).shape else bias.shape)

    # ---- Multiplicative blend of bias and randomness ------------------------
    blended = bias_norm * rand_vals

    # Normalise blended scores to [0, 1] for comparability
    blended_norm = blended / (blended.max() + _EPS)

    # ---- Tie‑breaker (lower index → slight advantage) -----------------------
    tie_breaker = -np.arange(n_bins)[feasible] * _TIE

    # ---- Assemble final priority vector ------------------------------------
    priorities[feasible] = blended_norm + tie_breaker

    return priorities
```
