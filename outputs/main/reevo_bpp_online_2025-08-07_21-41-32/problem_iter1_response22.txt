```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Worst‑Fit priority for online bin packing.

    The function returns a score for each bin; the bin with the highest score
    (i.e. the most free space after the item would be placed) is selected.
    Infeasible bins (those that cannot accommodate the item) receive a very
    low priority so they are never chosen.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array with the remaining capacity of each bin.

    Returns:
        An ndarray of the same shape as ``bins_remain_cap`` containing priority
        scores.
    """
    # Ensure we are working with a float array (required for inf handling)
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Feasibility mask: True if the bin can hold the item
    feasible = caps >= item

    # Residual capacity after hypothetically placing the item
    residual = caps - item

    # Assign -inf to infeasible bins so they are never the argmax
    low_priority = -np.inf
    priorities = np.where(feasible, residual, low_priority)

    # Tiny random tie‑breaker to avoid deterministic ties when residuals are equal
    # (adds a negligible epsilon that does not affect ordering)
    epsilon = np.random.rand(priorities.size) * 1e-12
    priorities = np.where(feasible, priorities + epsilon, priorities)

    return priorities
```
