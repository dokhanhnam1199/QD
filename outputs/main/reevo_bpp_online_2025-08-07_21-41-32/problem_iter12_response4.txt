```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online bin packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each open bin.

    Returns
    -------
    np.ndarray
        Priority scores (higher is better) for each bin.  Infeasible bins
        receive ``-np.inf``.
    """
    caps = np.asarray(bins_remain_cap, dtype=float)
    n_bins = caps.size

    # Feasibility check with a tiny tolerance
    tol = 1e-12
    slack = caps - item
    feasible = slack >= -tol

    # No feasible bin → all priorities are -inf
    if not feasible.any():
        return np.full(n_bins, -np.inf, dtype=float)

    # Slack after placement (non‑negative for feasible bins)
    slack = np.maximum(slack, 0.0)

    # Inverse‑slack bias, zero for infeasible bins
    bias = np.zeros_like(slack)
    bias[feasible] = 1.0 / (slack[feasible] + tol)

    # Weight bias by fraction of feasible bins
    feasible_frac = feasible.sum() / n_bins
    bias *= feasible_frac

    # Random multiplier (higher bias gets larger random factor)
    rand = np.random.rand(feasible.sum())
    score = bias[feasible] * rand

    # Deterministic tie‑breaker: lower index → higher priority
    idx = np.arange(n_bins)[feasible]
    score += -idx * 1e-12

    # Assemble final priority array
    priorities = np.full(n_bins, -np.inf, dtype=float)
    priorities[feasible] = score
    return priorities
```
