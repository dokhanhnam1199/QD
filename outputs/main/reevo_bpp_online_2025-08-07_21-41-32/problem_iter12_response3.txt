```python
import numpy as np

# Global reproducible RNG for stochastic tie‑breaking
_rng = np.random.default_rng(12345)


def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute a priority score for each bin in an online Bin Packing setting.

    The score favours feasible bins (capacity >= item) that give a tighter fit,
    normalises the inverse‑slack bias, adds a tiny random perturbation for
    stochastic tie‑breaking, and finally adds a deterministic index penalty
    to guarantee a strict total ordering.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the current bins.

    Returns
    -------
    np.ndarray
        Priority scores (higher is better) for each bin.
        Infeasible bins receive ``-np.inf``.
    """
    # Constants
    _TOL = 1e-12      # feasibility tolerance
    _EPS = 1e-12      # avoid division by zero
    _RND_EPS = 1e-12  # magnitude of random perturbation
    _TIE = 1e-15      # deterministic tie‑breaker magnitude

    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # Feasibility mask (allow a tiny tolerance)
    feasible = caps >= (item - _TOL)

    # Initialise all priorities to -inf (infeasible bins)
    priorities = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        return priorities

    # Slack after placing the item (clip to non‑negative)
    slack = caps[feasible] - item
    slack = np.maximum(slack, 0.0)

    # Inverse‑slack bias: larger for tighter fits
    bias in feasible bins:
    bias = 1.0 / (slack + _EPS)

    # Normalise bias to (0, 1]
    bias_norm = bias / (bias.max() + _EPS)

    # Tiny random component for stochastic tie‑breaking
    rand_noise = _rng.random(bias.shape) * _RND_EPS

    # Blend bias with random noise (addition)
    blended = bias_norm + rand_noise

    # Deterministic tie‑breaker: lower index → slightly higher priority
    tie_breaker = -np.arange(n_bins)[feasible] * _TIE

    # Final priority for feasible bins
    priorities[feasible] = blended + tie_breaker

    return priorities
```
