```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    eps: float = 1e-12,
    rng: np.random.Generator = None
) -> np.ndarray:
    """
    Priority function for online bin packing.

    Combines a bias for tighter fits, weighting by the fraction of feasible bins,
    a random component for stochastic tie‑breaking, and a deterministic tie‑breaker
    that prefers lower‑indexed bins. Infeasible bins receive -inf.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each currently open bin.
    eps : float, optional
        Small constant to avoid division by zero.
    rng : np.random.Generator, optional
        Random number generator for reproducibility. If None, a default RNG is created.

    Returns
    -------
    np.ndarray
        Priority scores (higher is better) for each bin.
    """
    # Normalise input to a flat float array.
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # Feasibility mask (allow a tiny tolerance for floating‑point errors).
    tolerance = eps
    feasible = caps >= (item - tolerance)

    # Initialise all priorities as -inf (infeasible bins).
    priorities = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        # No bin can accommodate the item.
        return priorities

    # Slack after placing the item (clip to zero to avoid negative values).
    slack = caps[feasible] - item
    slack = np.maximum(slack, 0.0)

    # Bias toward tighter fits: larger when slack is smaller.
    bias = 1.0 / (slack + eps)

    # Weight the bias by the fraction of feasible bins.
    feasible_frac = feasible.sum() / n_bins
    weighted_bias = bias * feasible_frac

    # Random component for stochastic tie‑breaking.
    if rng is None:
        rng = np.random.default_rng()
    rand_scores = rng.random(weighted_bias.shape)

    # Combine bias and randomness – bias dominates but randomness perturbs the order.
    combined = weighted_bias * rand_scores

    # Deterministic tie‑breaker: favour lower‑index bins by a tiny decreasing term.
    indices = np.arange(n_bins)
    tie_breaker = 1e-12
    deterministic = -indices[feasible] * tie_breaker

    # Assign the final scores to the feasible bins.
    priorities[feasible] = combined + deterministic

    return priorities
```
