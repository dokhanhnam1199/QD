{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for bins in an online bin packing setting.\n\n    The priority is calculated as follows:\n    1. Feasibility check with a tiny tolerance.\n    2. Inverse\u2011slack bias (larger for tighter fits).\n    3. Normalise bias to [0, 1].\n    4. Weight bias by the fraction of feasible bins.\n    5. Multiply the weighted bias by a uniform random number in [0, 1).\n    6. Re\u2011normalise the blended value to [0, 1].\n    7. Add a deterministic tie\u2011breaker that slightly favours lower\u2011index bins.\n    8. Infeasible bins receive -np.inf so they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; the bin with the highest score will\n        be selected for the item.\n    \"\"\"\n    # Constants\n    _TOL = 1e-12          # Feasibility tolerance\n    _EPS = 1e-12          # Small epsilon to avoid division by zero\n    _TIE = 1e-12          # Deterministic tie\u2011breaker magnitude\n\n    # Ensure a 1\u2011D float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask (allow a tiny tolerance)\n    feasible = caps >= (item - _TOL)\n\n    # Initialise all priorities to -inf (infeasible bins)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placing the item\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Inverse\u2011slack bias: larger for tighter fits\n    bias = 1.0 / (slack + _EPS)\n\n    # Normalise bias to [0, 1]\n    bias_norm = bias / (bias.max() + _EPS)\n\n    # Weight bias by the fraction of feasible bins\n    feasible_frac = feasible.sum() / n_bins\n    weighted_bias = bias_norm * feasible_frac\n\n    # Random component in [0, 1)\n    rng = np.random.default_rng()\n    rand = rng.random(feasible.sum())\n\n    # Blend bias and randomness multiplicatively\n    blended = weighted_bias * rand\n\n    # Re\u2011normalise blended scores to [0, 1]\n    blended_norm = blended / (blended.max() + _EPS)\n\n    # Deterministic tie\u2011breaker: lower index \u2192 slightly higher priority\n    indices = np.arange(n_bins)[feasible]\n    tie_breaker = -indices * _TIE\n\n    # Final priority for feasible bins\n    priorities[feasible] = blended_norm + tie_breaker\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for each bin in an online Bin Packing setting.\n\n    This priority function follows the principles outlined in the reflection:\n    * Feasibility is determined with a small tolerance.\n    * A bias based on inverse slack (tight fit) is normalised to [0,1].\n    * The bias is blended with a random component by multiplication.\n    * A tiny deterministic tie\u2011breaker based on bin index resolves ties.\n    * Infeasible bins receive ``-np.inf``.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better) for each bin.\n    \"\"\"\n    # Constants\n    _TOL = 1e-12   # Feasibility tolerance\n    _EPS = 1e-12   # For division by zero avoidance\n    _TIE = 1e-12   # Tie\u2011breaker magnitude\n\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility check: allow a tiny negative slack due to numeric errors\n    feasible = caps >= (item - _TOL)\n\n    # Initialise with -inf for infeasible bins\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placing the item (>= 0 for feasible bins)\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Inverse\u2011slack bias: larger for tighter fits\n    bias = 1.0 / (slack + _EPS)\n\n    # Normalise bias to [0, 1]\n    bias_norm = bias / (bias.max() + _EPS)\n\n    # Random factor in [0, 1)\n    rng = np.random.default_rng()\n    rand_vals = rng.random(bias_norm.shape)\n\n    # Blend bias and randomness multiplicatively\n    blended = bias_norm * rand_vals\n\n    # Normalise blended score to [0, 1]\n    blended_norm = blended / (blended.max() + _EPS)\n\n    # Deterministic tie\u2011breaker: lower index gets slight advantage\n    tie_breaker = -np.arange(n_bins)[feasible] * _TIE\n\n    # Final priority: blend + tie\u2011breaker\n    priorities[feasible] = blended_norm + tie_breaker\n\n    return priorities\n\n[Reflection]\nNormalize once, omit feasible\u2011fraction scaling; bias\u202f\u00d7\u202frandom suffices, tiny index tie\u2011breaker resolves ties.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}