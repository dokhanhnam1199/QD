{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for assigning ``item`` to each bin in ``bins_remain_cap``.\n\n    This heuristic blends a tight\u2011fit bias (inverse slack) with a controlled\n    random component.  The boost for \u201calmost full\u201d bins is set dynamically\n    based on a low\u2011percentile slack threshold, and the epsilon used in the\n    inverse\u2011slack term adapts to the typical slack magnitude.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n\n    Returns\n    -------\n    np.ndarray\n        A 1\u2011D array of priority scores (higher is better).  Infeasible bins\n        receive ``-np.inf`` so they are never selected.\n    \"\"\"\n    # Ensure a float array\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Slack after hypothetically placing the item\n    slack = caps - item\n\n    # Feasibility mask: only bins that can hold the item\n    feasible = slack >= 0\n\n    # Initialise all priorities to -inf (infeasible bins)\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # If no feasible bin exists, return the all -inf array early\n    if not np.any(feasible):\n        return priorities\n\n    # ------------------------------------------------------------------\n    # 1) Tight\u2011fit bias: inverse of slack (smaller slack \u2192 larger priority)\n    #    epsilon adapts to the typical slack magnitude to avoid division\u2011by\u2011zero\n    # ------------------------------------------------------------------\n    mean_slack = np.mean(slack[feasible]) if np.any(feasible) else 0.0\n    eps = max(1e-12, 1e-6 * mean_slack)               # adaptive epsilon\n    inv_slack = 1.0 / (slack[feasible] + eps)        # larger for tighter fits\n\n    # ------------------------------------------------------------------\n    # 2) Dynamic boost for \u201calmost full\u201d bins\n    #    Use a low percentile (e.g., 10th) of the slack distribution as a threshold\n    # ------------------------------------------------------------------\n    low_percentile = 0.10\n    slack_feas = slack[feasible]\n    threshold = np.quantile(slack_feas, low_percentile) if slack_feas.size > 0 else 0.0\n\n    boost_factor = 5.0                               # magnitude of boost\n    boost = np.zeros_like(slack_feas)\n    low_slack_mask = slack_feas <= threshold\n    boost[low_slack_mask] = boost_factor * (threshold - slack_feas[low_slack_mask])\n\n    # ------------------------------------------------------------------\n    # 3) Combine bias and boost\n    # ------------------------------------------------------------------\n    combined = inv_slack + boost\n\n    # ------------------------------------------------------------------\n    # 4) Controlled randomness: a random factor close to 1 (e.g., [0.8, 1.0])\n    #    This keeps the bias dominant while providing tie\u2011breaking randomness.\n    # ------------------------------------------------------------------\n    rand_vals = np.random.rand(caps.size)\n    rand_factor = 0.8 + 0.2 * rand_vals               # range [0.8, 1.0]\n    final_feasible = combined * rand_factor[feasible]\n\n    # Assign computed priorities back to the full array\n    priorities[feasible] = final_feasible\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Random Fit priority for online bin packing.\n\n    Each feasible bin (with enough remaining capacity) receives a random score.\n    Infeasible bins receive -inf so they are never selected. This implements a\n    pure random fit strategy, optionally biased toward tighter fits.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities for each bin.\n\n    Returns:\n        A 1\u2011D array of priority scores, one per bin.\n    \"\"\"\n    # Ensure capacities are a float array.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    feasible = caps >= item\n\n    # Initialise all priorities to -inf (so infeasible bins are never chosen).\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # Generate independent random numbers for each bin.\n    rand_scores = np.random.rand(caps.size)\n\n    # Bias towards tighter fits: less slack -> larger bias.\n    # Small epsilon avoids division by zero for exact fits.\n    epsilon = 1e-12\n    slack = caps - item\n    bias = np.zeros_like(caps)\n    bias[feasible] = 1.0 / (slack[feasible] + epsilon)  # higher when slack is small\n\n    # Combine random component with bias.\n    # Multiplying emphasizes bins with higher bias while preserving randomness.\n    priorities[feasible] = bias[feasible] * rand_scores[feasible]\n\n    return priorities\n\n[Reflection]\nPrefer tight\u2011fit bias with modest random factor, adapt epsilon to slack, skip costly quantiles, keep computation linear.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}