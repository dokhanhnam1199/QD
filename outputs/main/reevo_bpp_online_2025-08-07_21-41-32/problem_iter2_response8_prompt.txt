{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Worst\u2011Fit priority for online bin packing.\n\n    The function returns a score for each bin; the bin with the highest score\n    (i.e. the most free space after the item would be placed) is selected.\n    Infeasible bins (those that cannot accommodate the item) receive a very\n    low priority so they are never chosen.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array with the remaining capacity of each bin.\n\n    Returns:\n        An ndarray of the same shape as ``bins_remain_cap`` containing priority\n        scores.\n    \"\"\"\n    # Ensure we are working with a float array (required for inf handling)\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Feasibility mask: True if the bin can hold the item\n    feasible = caps >= item\n\n    # Residual capacity after hypothetically placing the item\n    residual = caps - item\n\n    # Assign -inf to infeasible bins so they are never the argmax\n    low_priority = -np.inf\n    priorities = np.where(feasible, residual, low_priority)\n\n    # Tiny random tie\u2011breaker to avoid deterministic ties when residuals are equal\n    # (adds a negligible epsilon that does not affect ordering)\n    epsilon = np.random.rand(priorities.size) * 1e-12\n    priorities = np.where(feasible, priorities + epsilon, priorities)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Softmax\u2011Based Fit priority function for online Bin Packing.\n\n    For each bin we compute the waste (remaining capacity after placing the item).\n    Smaller waste is preferable, so we use a softmax over the negative waste to\n    obtain a probability\u2011like priority. Infeasible bins (remaining capacity < item)\n    receive a priority of zero.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each existing bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin, summing to 1 over all feasible bins.\n        Bins that cannot accommodate the item receive a score of 0.\n    \"\"\"\n    # ---- hyper\u2011parameters -------------------------------------------------\n    temperature = 1.0   # larger -> softer distribution, smaller -> greedier\n    gamma = 1.0         # scale of waste penalty (higher = stronger bias to tight fits)\n\n    # Ensure floating point arithmetic\n    caps = bins_remain_cap.astype(np.float64, copy=False)\n\n    # Feasibility mask: only bins that can fit the item are considered\n    feasible = caps >= item\n\n    # Early exit when no bin can hold the item\n    if not np.any(feasible):\n        return np.zeros_like(caps, dtype=np.float64)\n\n    # Compute waste for feasible bins (remaining capacity after the item)\n    waste = caps - item\n\n    # Logits for the softmax: -\u03b3 * waste / temperature (lower waste \u2192 higher logit)\n    logits = np.full_like(caps, -np.inf, dtype=np.float64)\n    logits[feasible] = -gamma * waste[feasible] / temperature\n\n    # Numerical stability: shift logits by their maximum before exponentiation\n    max_logit = np.max(logits)          # finite because at least one feasible bin exists\n    exp_vals = np.exp(logits - max_logit)\n\n    # Normalise to obtain probabilities (priority scores)\n    priorities = exp_vals / np.sum(exp_vals)\n\n    return priorities\n\n[Reflection]\nSoftmax over negative waste with temperature; assign zero to infeasible bins; adapt gamma/temperature to balance exploration\u2011exploitation.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}