```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online bin‑packing.

    For each bin the score is based on how tight the fit would be
    (lower leftover → higher score), normalised between 0 and 1 for
    all feasible bins.  Infeasible bins receive a score of -∞.  A
    tiny bias that favours bins with larger remaining capacity is
    added to break ties.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacities of each bin.

    Returns
    -------
    np.ndarray
        Priority scores, same shape as ``bins_remain_cap``.
    """
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Remaining capacity after placing the item
    leftover = bins_remain_cap - item
    # Feasibility mask
    feasible = leftover >= 0

    # No feasible bin – return -inf for all
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Normalise leftover: 1.0 for perfect fit (leftover = 0),
    # 0.0 for the largest leftover among feasible bins
    max_leftover = leftover[feasible].max()
    eps = 1e-12
    denom = max_leftover if max_leftover > eps else eps
    norm_scores = np.where(
        feasible,
        1.0 - leftover / denom,
        -np.inf
    )

    # Tiny bias that prefers bins with larger remaining capacity
    bias = 1e-6 * bins_remain_cap

    return norm_scores + bias
```
