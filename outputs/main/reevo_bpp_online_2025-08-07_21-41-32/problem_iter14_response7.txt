```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for each bin in an online Bin Packing setting.

    This priority function follows the principles outlined in the reflection:
    * Feasibility is determined with a small tolerance.
    * A bias based on inverse slack (tight fit) is normalised to [0,1].
    * The bias is blended with a random component by multiplication.
    * A tiny deterministic tie‑breaker based on bin index resolves ties.
    * Infeasible bins receive ``-np.inf``.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each open bin.

    Returns
    -------
    np.ndarray
        Priority scores (higher is better) for each bin.
    """
    # Constants
    _TOL = 1e-12   # Feasibility tolerance
    _EPS = 1e-12   # For division by zero avoidance
    _TIE = 1e-12   # Tie‑breaker magnitude

    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # Feasibility check: allow a tiny negative slack due to numeric errors
    feasible = caps >= (item - _TOL)

    # Initialise with -inf for infeasible bins
    priorities = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        return priorities

    # Slack after placing the item (>= 0 for feasible bins)
    slack = caps[feasible] - item
    slack = np.maximum(slack, 0.0)

    # Inverse‑slack bias: larger for tighter fits
    bias = 1.0 / (slack + _EPS)

    # Normalise bias to [0, 1]
    bias_norm = bias / (bias.max() + _EPS)

    # Random factor in [0, 1)
    rng = np.random.default_rng()
    rand_vals = rng.random(bias_norm.shape)

    # Blend bias and randomness multiplicatively
    blended = bias_norm * rand_vals

    # Normalise blended score to [0, 1]
    blended_norm = blended / (blended.max() + _EPS)

    # Deterministic tie‑breaker: lower index gets slight advantage
    tie_breaker = -np.arange(n_bins)[feasible] * _TIE

    # Final priority: blend + tie‑breaker
    priorities[feasible] = blended_norm + tie_breaker

    return priorities
```
