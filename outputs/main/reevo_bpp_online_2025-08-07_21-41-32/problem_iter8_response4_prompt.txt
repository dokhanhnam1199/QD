{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing.\n\n    For each feasible bin, compute a bias based on the remaining slack\n    (1 / (slack + eps)), optionally amplified for bins that are already\n    more full (smaller remaining capacity).  The amplification factor\n    grows over time to encourage tighter packing as the problem progresses.\n\n    A small random perturbation is added to the scores to break ties\n    stochastically.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (higher = more attractive).  Infeasible\n        bins receive ``-np.inf``.\n    \"\"\"\n    # Ensure a flat float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask\n    feasible = caps >= item\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Compute slack and bias\n    slack = caps[feasible] - item\n    eps = 1e-12\n    bias = 1.0 / (slack + eps)  # larger when slack is small\n\n    # Adaptation over time: progressively emphasize bins that are already\n    # more full (smaller remaining capacity).  The adaptation factor\n    # grows linearly with the number of calls up to a maximum.\n    if not hasattr(priority_v2, \"_call_count\"):\n        priority_v2._call_count = 0\n    priority_v2._call_count += 1\n    alpha = min(1.0, priority_v2._call_count / 2000.0)  # increase over ~2000 calls\n\n    # Weight factor based on remaining capacity relative to the maximum\n    # among feasible bins.  Bins with smaller remaining get a higher weight.\n    max_remain = caps[feasible].max()\n    weight_factor = 1.0 + alpha * (max_remain - caps[feasible]) / max_remain\n\n    # Combine bias and weight\n    scores = bias * weight_factor\n\n    # Stochastic tie\u2011breaking: add tiny random noise.\n    rng = np.random.default_rng()\n    # Scale noise relative to the magnitude of the scores to keep it small.\n    max_score = np.max(scores)\n    noise_scale = 1e-6 * (max_score if max_score > 0 else 1.0)\n    noise = rng.uniform(-noise_scale, noise_scale, size=scores.shape)\n    scores += noise\n\n    # Assign to the output array\n    priorities[feasible] = scores\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Random Fit priority for online bin packing.\n\n    Each feasible bin (with enough remaining capacity) receives a random score.\n    Infeasible bins receive -inf so they are never selected. This implements a\n    pure random fit strategy, optionally biased toward tighter fits.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities for each bin.\n\n    Returns:\n        A 1\u2011D array of priority scores, one per bin.\n    \"\"\"\n    # Ensure capacities are a float array.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    feasible = caps >= item\n\n    # Initialise all priorities to -inf (so infeasible bins are never chosen).\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # Generate independent random numbers for each bin.\n    rand_scores = np.random.rand(caps.size)\n\n    # Bias towards tighter fits: less slack -> larger bias.\n    # Small epsilon avoids division by zero for exact fits.\n    epsilon = 1e-12\n    slack = caps - item\n    bias = np.zeros_like(caps)\n    bias[feasible] = 1.0 / (slack[feasible] + epsilon)  # higher when slack is small\n\n    # Combine random component with bias.\n    # Multiplying emphasizes bins with higher bias while preserving randomness.\n    priorities[feasible] = bias[feasible] * rand_scores[feasible]\n\n    return priorities\n\n[Reflection]\nUse random scores biased by slack; skip per\u2011call state and heavy weighting for fast, effective online decisions.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}