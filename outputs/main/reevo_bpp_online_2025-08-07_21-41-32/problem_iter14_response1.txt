```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for bins in an online bin‑packing setting.

    The priority is based on an inverse‑slack bias, a small random perturbation,
    and a minute deterministic tie‑breaker based on the bin index. Bins that
    cannot accommodate the item receive ``-np.inf`` and are never selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Priority scores (higher = more attractive). Infeasible bins are
        assigned ``-np.inf``.
    """
    # constants
    _TOL = 1e-12          # tolerance for feasibility
    _EPS = 1e-12          # epsilon to avoid division by zero
    _RND_SCALE = 1e-12    # scale of random noise
    _TIE_BREAK = 1e-12    # deterministic index tie‑breaker magnitude

    # Flatten caps
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # Feasibility mask (allow tiny tolerance)
    feasible = caps >= (item - _TOL)

    # Initialize priorities
    priorities = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        return priorities

    # Slack after placing the item (non‑negative)
    slack = caps[feasible] - item
    slack = np.maximum(slack, 0.0)

    # Inverse‑slack bias: larger when slack is smaller
    bias = 1.0 / (slack + _EPS)

    # Normalize bias to [0, 1]
    bias_norm = bias / (bias.max() + _EPS)

    # Small random noise in [0, 1)
    rng = np.random.default_rng()
    noise = rng.random(bias_norm.shape) * _RND_SCALE

    # Deterministic tie‑breaker: lower index -> slight advantage
    tie_breaker = -np.arange(n_bins)[feasible] * _TIE_BREAK

    # Final priority
    priorities[feasible] = bias_norm + noise + tie_breaker

    return priorities
```
