{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for each bin in an online bin\u2011packing setting.\n\n    This version uses a simple leftover\u2011based exponential boost with an\n    adaptive epsilon. Infeasible bins receive ``-np.inf`` so they are never\n    selected. A tiny random perturbation is added for deterministic\n    tie\u2011breaking.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each currently open bin.\n    random_state : int, optional\n        Seed for the random number generator used for tie\u2011breaking noise.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; higher values indicate a more\n        desirable placement. Infeasible bins have ``-np.inf``.\n    \"\"\"\n    # Ensure capacities are a float array\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Compute leftover capacity after placing the item\n    leftover = caps - item\n\n    # Feasible bins are those that can accommodate the item\n    feasible = leftover >= 0\n\n    # Adaptive epsilon: use mean leftover of feasible bins, with a lower bound\n    if np.any(feasible):\n        eps = max(np.mean(leftover[feasible]), 1e-9)\n    else:\n        # No feasible bin \u2013 epsilon is irrelevant but must be > 0\n        eps = 1e-9\n\n    # Exponential boost: highest when leftover \u2248 0, decays for larger leftovers\n    boost = np.exp(-leftover / eps)\n\n    # Assemble priority: boost for feasible bins, -inf otherwise\n    priority = np.where(feasible, boost, -np.inf)\n\n    # Tiny random noise for tie\u2011breaking (deterministic if random_state set)\n    rng = np.random.default_rng(random_state)\n    noise = rng.random(priority.shape) * 1e-12\n    priority[feasible] += noise[feasible]\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Random Fit priority for online bin packing.\n\n    Each feasible bin (with enough remaining capacity) receives a random score.\n    Infeasible bins receive -inf so they are never selected. This implements a\n    pure random fit strategy, optionally biased toward tighter fits.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities for each bin.\n\n    Returns:\n        A 1\u2011D array of priority scores, one per bin.\n    \"\"\"\n    # Ensure capacities are a float array.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    feasible = caps >= item\n\n    # Initialise all priorities to -inf (so infeasible bins are never chosen).\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # Generate independent random numbers for each bin.\n    rand_scores = np.random.rand(caps.size)\n\n    # Bias towards tighter fits: less slack -> larger bias.\n    # Small epsilon avoids division by zero for exact fits.\n    epsilon = 1e-12\n    slack = caps - item\n    bias = np.zeros_like(caps)\n    bias[feasible] = 1.0 / (slack[feasible] + epsilon)  # higher when slack is small\n\n    # Combine random component with bias.\n    # Multiplying emphasizes bins with higher bias while preserving randomness.\n    priorities[feasible] = bias[feasible] * rand_scores[feasible]\n\n    return priorities\n\n[Reflection]\nCombine inverse\u2011slack bias with random scores; adapt \u03b5 to capacity distribution for stability and exploration.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}