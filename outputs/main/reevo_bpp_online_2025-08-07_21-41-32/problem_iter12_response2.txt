```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    *,
    eps: float = 1e-12,
    tolerance: float = 1e-12,
) -> np.ndarray:
    """
    Priority function for the online Bin Packing Problem.

    The function assigns a higher score to bins that can accommodate the incoming
    item and favours tighter fits (smaller remaining slack). Random numbers are
    used as tie‑breakers, guaranteeing a deterministic selection only when the
    random seed is fixed.

    Parameters
    :param item: Size of the incoming item.
    :param bins_remain_cap: 1‑D array of remaining capacities of currently open bins.
    :param eps: Small constant to avoid division by zero for exact fits.
    :param tolerance: Numerical tolerance when checking feasibility.

    Returns
    -------
    np.ndarray
        Priority scores (higher is better) for each bin; infeasible bins receive
        ``-np.inf`` so they are never selected.
    """
    # Ensure a flat float array.
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # Determine which bins can actually host the item (allowing a tiny tolerance).
    feasible = caps >= (item - tolerance)

    # Initialise all priorities to -inf (infeasible by default).
    priorities = np.full(n_bins, -np.inf, dtype=float)

    # Early exit if nothing fits.
    if not np.any(feasible):
        return priorities

    # Compute slack (remaining space after placing the item) for feasible bins.
    slack = caps[feasible] - item
    # Numerical noise may produce tiny negative values; clip to zero.
    slack = np.maximum(slack, dtype=float, where=slack > 0, out=np.zeros_like(slack))
    # Bias toward tighter fits: larger when slack is smaller.
    bias = 1.0 / (slack + eps)

    # Random tie‑breaker: a uniform random number in (0, 1) for each feasible bin.
    rand = np.random.rand(bias.size)

    # Combine bias with randomness. Multiplication preserves the bias ordering
    # while still randomising ties.
    priorities[feasible] = bias * rand

    return priorities
```
