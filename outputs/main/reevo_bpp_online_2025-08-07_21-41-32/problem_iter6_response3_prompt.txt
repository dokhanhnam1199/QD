{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for the online Bin Packing Problem.\n\n    For each existing bin the function returns a score; the bin with the\n    highest score is selected for the incoming ``item``.  The heuristic\n    combines three ingredients:\n\n    1. **Inverse\u2011slack bias** \u2013 bins with less remaining capacity after the\n       item (i.e. tighter fits) receive a larger base score.\n    2. **Percentile\u2011based boost** \u2013 bins whose slack falls below a low\u2011percentile\n       (default 10\u202f%) are further boosted, encouraging the algorithm to fill\n       \u201calmost full\u2019\u2019 bins.\n    3. **Controlled randomness** \u2013 a mild random factor in the range\n       [0.9,\u202f1.0] breaks ties while keeping the deterministic bias dominant.\n\n    Infeasible bins (those that cannot accommodate the item) obtain ``-np.inf``,\n    guaranteeing they are never chosen.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n\n    Returns\n    -------\n    np.ndarray\n        1\u2011D array of priority scores (higher is better).  Infeasible bins are\n        marked with ``-np.inf``.\n    \"\"\"\n    # Ensure we work with a float array\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Slack after hypothetically placing the item\n    slack = caps - item\n    feasible = slack >= 0\n\n    # Initialise all scores as -inf (infeasible)\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # If no bin can hold the item, return early\n    if not np.any(feasible):\n        return priorities\n\n    # ------------------------------------------------------------------\n    # 1) Adaptive epsilon and inverse\u2011slack bias\n    # ------------------------------------------------------------------\n    # Typical slack magnitude \u2013 use mean of feasible slacks\n    mean_slack = np.mean(slack[feasible])\n    # epsilon scales with the typical slack to avoid division\u2011by\u2011zero\n    eps = max(1e-12, 1e-6 * mean_slack)\n    inv_slack = 1.0 / (slack[feasible] + eps)   # larger when slack is smaller\n\n    # ------------------------------------------------------------------\n    # 2) Percentile\u2011based boost for \u201calmost full\u2019\u2019 bins\n    # ------------------------------------------------------------------\n    low_percentile = 0.10                     # 10\u202f% percentile\n    slack_feas = slack[feasible]\n    # Threshold slack value below which bins receive a boost\n    threshold = np.quantile(slack_feas, low_percentile) if slack_feas.size else 0.0\n\n    # Linear boost proportional to distance below the threshold\n    boost_factor = 5.0                         # magnitude of boost\n    boost = np.zeros_like(slack_feas)\n    low_slack_mask = slack_feas <= threshold\n    boost[low_slack_mask] = boost_factor * (threshold - slack_feas[low_slack_mask])\n\n    # ------------------------------------------------------------------\n    # 3) Combine deterministic components\n    # ------------------------------------------------------------------\n    combined = inv_slack + boost\n\n    # ------------------------------------------------------------------\n    # 4) Controlled random tie\u2011breaker (range [0.9, 1.0])\n    # ------------------------------------------------------------------\n    rand_vals = np.random.rand(caps.size)      # one random number per bin\n    rand_factor = 0.9 + 0.1 * rand_vals         # maps to [0.9, 1.0]\n    # Apply only to feasible bins\n    final_score = combined * rand_factor[feasible]\n\n    # Store the computed scores back into the full array\n    priorities[feasible] = final_score\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    tie_breaker: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Deterministic priority function for the online Bin Packing Problem.\n\n    The function prefers bins that fit the item exactly (or as close as\n    numerically possible), penalises any leftover capacity, and breaks ties\n    deterministically in favour of lower\u2011indexed bins. No randomness is used.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array (or array\u2011like) of remaining capacities of the currently open\n        bins.\n    tolerance : float, optional\n        Numerical tolerance for feasibility and exact\u2011fit detection.\n        Bins whose remaining capacity is at least ``item - tolerance`` are\n        considered feasible. A leftover smaller than ``tolerance`` is treated\n        as an exact fit.\n    tie_breaker : float, optional\n        Tiny positive value used to break ties deterministically. It must be\n        smaller than the smallest meaningful leftover (e.g., ``tolerance``).\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).\n        Higher values indicate more attractive bins. Infeasible bins receive\n        ``-np.inf``.\n    \"\"\"\n    # Convert input to a flat NumPy array of floats.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n\n    # Feasibility mask: bins that can accommodate the item within tolerance.\n    feasible = caps >= (item - tolerance)\n\n    # Initialise all priorities as -inf (infeasible bins).\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # If there are no feasible bins, return the -inf array immediately.\n    if not np.any(feasible):\n        return priorities\n\n    # Compute leftover capacity for feasible bins.\n    # Clip tiny negatives (caused by tolerance) to zero.\n    leftover = caps[feasible] - item\n    leftover = np.maximum(leftover, 0.0)\n\n    # Indices of feasible bins (preserves original ordering).\n    idx = np.where(feasible)[0]\n\n    # Exact\u2011fit\u2011first: smaller leftover \u2192 higher priority.\n    # Use negative leftover so that a perfect fit (leftover == 0) yields the\n    # highest raw score. Subtract a tiny index\u2011dependent term to break ties in\n    # favour of lower\u2011indexed bins.\n    priorities[feasible] = -leftover - idx * tie_breaker\n\n    return priorities\n\n[Reflection]\nExact\u2011fit first, penalize leftover, deterministic index tie\u2011break, small tolerance, no random/percentile boosts.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}