{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Compute Worst\u2011Fit priority for each bin.\n\n    The worst\u2011fit strategy always places the next item into the bin with\n    the *largest* remaining free capacity that is large enough to hold\n    the item.  This function returns a score array; the bin with the\n    maximum score is chosen for the item.  Bins that cannot accommodate\n    the item are given a score of -np.inf, ensuring they are never\n    selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacity of each bin (positive numbers).  Must be 1\u2011D.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores of the same shape as `bins_remain_cap`.  The\n        highest score corresponds to the bin that should receive the\n        item under the worst\u2011fit policy.\n    \"\"\"\n    # Only bins that have enough capacity are considered; others get -inf score\n    valid = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priorities[valid] = bins_remain_cap[valid]\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Inverse Distance (Proximity Fit) priority for online Bin Packing.\n\n    For each bin we compute how closely the remaining capacity matches the\n    item size. Bins that can accommodate the item receive a priority proportional\n    to the inverse of the leftover space after placement (i.e., the smaller the\n    waste, the higher the priority). Bins that cannot fit the item receive a\n    very low priority so they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array with the remaining capacity of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores, one per bin. Higher values indicate a more\n        desirable bin for the item.\n    \"\"\"\n    # Numerical stability constant: prevents division by zero when item exactly fills a bin\n    eps = 1e-9\n\n    # Identify bins that can accommodate the item\n    feasible = bins_remain_cap >= item\n\n    # Compute waste (remaining capacity after the item would be placed)\n    waste = np.where(feasible, bins_remain_cap - item, np.nan)\n\n    # Inverse distance: higher score for smaller waste\n    # Bins that cannot fit receive -inf to guarantee they are never chosen\n    priorities = np.where(feasible,\n                          1.0 / (waste + eps),\n                          -np.inf)\n\n    # Optional: Scale to non\u2011negative values for downstream components that expect >=0\n    # Shift all finite priorities up by the absolute value of the most negative priority\n    if np.any(np.isfinite(priorities)):\n        min_finite = np.min(priorities[np.isfinite(priorities)])\n        if min_finite < 0:\n            priorities = np.where(np.isfinite(priorities), priorities - min_finite, priorities)\n\n    return priorities\n\n[Reflection]\nUse inverse\u2011waste scoring, assign \u2013inf to infeasible bins, add epsilon for stability, normalize scores to non\u2011negative.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}