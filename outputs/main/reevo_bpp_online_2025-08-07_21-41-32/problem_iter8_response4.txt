```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for each bin in an online bin‑packing setting.

    - Infeasible bins (remaining capacity < item) receive ``-np.inf`` so they are never chosen.
    - Feasible bins receive a score proportional to a bias that favours tighter fits
      (smaller slack) and a random factor for stochastic tie‑breaking.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Priority scores (higher = more attractive) for each bin.
    """
    # Ensure a flat float array of capacities.
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # Feasibility mask.
    feasible = caps >= item

    # Initialise all priorities to -inf (infeasible bins).
    priorities = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        # No bin can accommodate the item.
        return priorities

    # Slack after placing the item in each feasible bin.
    slack = caps[feasible] - item

    # Bias: larger when slack is small (tighter fit).
    eps = 1e-12
    bias = 1.0 / (slack + eps)

    # Random component for stochastic tie‑breaking.
    # Using the default RNG; callers can set the global seed if reproducibility is needed.
    rand_scores = np.random.rand(bias.shape[0])

    # Combine bias and randomness.
    scores = bias * rand_scores

    # Assign scores back to the full priority vector.
    priorities[feasible] = scores

    return priorities
```
