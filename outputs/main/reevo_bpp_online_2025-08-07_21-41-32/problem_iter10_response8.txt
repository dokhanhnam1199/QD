```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute a priority score for each bin in an online Bin Packing setting.

    The priority blends a random component with an inverse‑slack bias,
    normalises the result, and adds a deterministic tie‑breaker based on the
    bin index. Infeasible bins (insufficient remaining capacity) receive
    ``-np.inf`` so they are never selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each open bin.

    Returns
    -------
    np.ndarray
        Priority scores (higher is better) for each bin.
    """
    # Constants
    _TOL = 1e-12          # feasibility tolerance
    _EPS = 1e-12          # to avoid division by zero
    _TIE = 1e-12          # deterministic tie‑breaker magnitude

    # Ensure a 1‑D float array
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # Feasibility mask (allow a tiny tolerance)
    feasible = caps >= (item - _TOL)

    # Initialise all priorities to -inf (infeasible bins)
    priorities = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        return priorities

    # Slack after placing the item (non‑negative)
    slack = caps[feasible] - item
    slack = np.maximum(slack, 0.0)

    # Inverse‑slack bias: larger for tighter fits
    bias = 1.0 / (slack + _EPS)

    # Normalise bias to [0, 1] (max bias gets 1)
    bias_norm = bias / (bias.max() + _EPS)

    # Random component in [0, 1)
    rng = np.random.default_rng()
    rand_scores = rng.random(caps.shape)
    rand_feas = rand_scores[feasible]

    # Blend bias and randomness multiplicatively (emphasises both)
    blended = bias_norm * rand_feas

    # Normalise blended scores to [0, 1] (max gets 1)
    blended_norm = blended / (blended.max() + _EPS)

    # Deterministic tie‑breaker: lower index → slightly higher priority
    tie_breaker = -np.arange(n_bins)[feasible] * _TIE

    # Final priority for feasible bins
    priorities[feasible] = blended_norm + tie_breaker

    return priorities
```
