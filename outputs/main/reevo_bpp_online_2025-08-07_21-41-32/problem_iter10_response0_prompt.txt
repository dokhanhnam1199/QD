{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global, reproducible RNG for tie\u2011breaking\n_rng = np.random.default_rng(12345)\n\n\n    \"\"\"\n    Compute a priority score for each bin in an online Bin Packing setting.\n\n    The score favours bins with the smallest remaining slack after placing the\n    item.  It uses a normalized inverse\u2011slack weighting, adds a tiny\n    reproducible random perturbation for stochastic tie\u2011breaking, and applies a\n    minimal deterministic index\u2011based penalty to guarantee a total ordering.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (same length as ``bins_remain_cap``).  Infeasible bins\n        (capacity < item) receive ``-np.inf``; the bin with the highest score\n        should be selected for the item.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.size\n\n    # Initialise all scores as infeasible\n    priorities = np.full(n, -np.inf, dtype=float)\n    if n == 0:\n        return priorities\n\n    slack = caps - item\n    feasible = slack >= 0\n    if not np.any(feasible):\n        return priorities\n\n    # Constant epsilon to avoid division by zero\n    eps = 1e-12\n    slack_feas = slack[feasible]\n\n    # Inverse slack (larger for tighter fits)\n    inv_slack = 1.0 / (slack_feas + eps)\n\n    # Normalise to keep scores bounded in [0, 1]\n    max_inv = inv_slack.max()\n    inv_norm = inv_slack / max_inv if max_inv > 0 else inv_slack\n\n    # Small reproducible random perturbation for stochastic tie\u2011breaking\n    rand_noise = _rng.random(inv_norm.shape) * 1e-9\n\n    # Deterministic tiny penalty based on bin index to resolve any remaining ties\n    idx = np.nonzero(feasible)[0].astype(float)\n    idx_penalty = idx * 1e-12\n\n    # Final scores for feasible bins\n    scores = inv_norm + rand_noise - idx_penalty\n    priorities[feasible] = scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Random Fit priority for online bin packing.\n\n    Each feasible bin (with enough remaining capacity) receives a random score.\n    Infeasible bins receive -inf so they are never selected. This implements a\n    pure random fit strategy, optionally biased toward tighter fits.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities for each bin.\n\n    Returns:\n        A 1\u2011D array of priority scores, one per bin.\n    \"\"\"\n    # Ensure capacities are a float array.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    feasible = caps >= item\n\n    # Initialise all priorities to -inf (so infeasible bins are never chosen).\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # Generate independent random numbers for each bin.\n    rand_scores = np.random.rand(caps.size)\n\n    # Bias towards tighter fits: less slack -> larger bias.\n    # Small epsilon avoids division by zero for exact fits.\n    epsilon = 1e-12\n    slack = caps - item\n    bias = np.zeros_like(caps)\n    bias[feasible] = 1.0 / (slack[feasible] + epsilon)  # higher when slack is small\n\n    # Combine random component with bias.\n    # Multiplying emphasizes bins with higher bias while preserving randomness.\n    priorities[feasible] = bias[feasible] * rand_scores[feasible]\n\n    return priorities\n\n[Reflection]\nWeight slack directly; reduce random noise; use index penalty; avoid normalizing by max.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}