{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for assigning ``item`` to each bin in ``bins_remain_cap``.\n    \n    The heuristic follows the *Almost Full Fit* principle:\n      * Prefer bins where the item fits and leaves the *smallest* leftover space,\n        i.e., bins that become almost full after insertion.\n      * If the resulting leftover is below a small threshold (``eps``), an\n        additional boost is added to strongly favour such bins.\n      * Bins that cannot accommodate the item receive a large negative priority.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    #\"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Remaining capacity after (hypothetical) placement\n    leftover = bins_remain_cap - item\n\n    # Feasibility mask: bins that can actually hold the item\n    feasible = leftover >= 0\n\n    # Base priority: higher when the resulting leftover is smaller\n    base_priority = -leftover\n\n    # Extra boost for bins that become \u201calmost full\u201d\n    eps = 0.1               # tolerance defining \u201calmost full\u201d\n    boost_factor = 10.0     # magnitude of the boost\n    boost = np.where(leftover <= eps, (eps - leftover) * boost_factor, 0.0)\n\n    # Combine base priority and boost; infeasible bins get -inf\n    priorities = np.where(feasible, base_priority + boost, -np.inf)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Random Fit priority for online bin packing.\n\n    Each feasible bin (with enough remaining capacity) receives a random score.\n    Infeasible bins receive -inf so they are never selected. This implements a\n    pure random fit strategy, optionally biased toward tighter fits.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities for each bin.\n\n    Returns:\n        A 1\u2011D array of priority scores, one per bin.\n    \"\"\"\n    # Ensure capacities are a float array.\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    feasible = caps >= item\n\n    # Initialise all priorities to -inf (so infeasible bins are never chosen).\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # Generate independent random numbers for each bin.\n    rand_scores = np.random.rand(caps.size)\n\n    # Bias towards tighter fits: less slack -> larger bias.\n    # Small epsilon avoids division by zero for exact fits.\n    epsilon = 1e-12\n    slack = caps - item\n    bias = np.zeros_like(caps)\n    bias[feasible] = 1.0 / (slack[feasible] + epsilon)  # higher when slack is small\n\n    # Combine random component with bias.\n    # Multiplying emphasizes bins with higher bias while preserving randomness.\n    priorities[feasible] = bias[feasible] * rand_scores[feasible]\n\n    return priorities\n\n[Reflection]\nBlend tight-fit bias with controlled randomness; weight inverse slack, adapt epsilon/boost thresholds dynamically.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}