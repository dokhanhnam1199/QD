{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Compute Worst\u2011Fit priority for each bin.\n\n    The worst\u2011fit strategy always places the next item into the bin with\n    the *largest* remaining free capacity that is large enough to hold\n    the item.  This function returns a score array; the bin with the\n    maximum score is chosen for the item.  Bins that cannot accommodate\n    the item are given a score of -np.inf, ensuring they are never\n    selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacity of each bin (positive numbers).  Must be 1\u2011D.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores of the same shape as `bins_remain_cap`.  The\n        highest score corresponds to the bin that should receive the\n        item under the worst\u2011fit policy.\n    \"\"\"\n    # Only bins that have enough capacity are considered; others get -inf score\n    valid = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priorities[valid] = bins_remain_cap[valid]\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Return a priority array that implements the Best\u2011Fit strategy.\n\n    For each bin compute the leftover capacity if the item is added:\n        leftover = bins_remain_cap - item\n    A bin is a candidate only if leftover >= 0.  The priority of a candidate bin\n    is the negative of the leftover, i.e. `-(bins_remain_cap - item)`.  \n    This yields a higher priority for bins that would have less free space after\n    packing the item (i.e., \"best fit\").  Infeasible bins are assigned\n    `-np.inf` so they cannot be selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the current remaining capacity in each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores; the bin with the largest score will be chosen.\n    \"\"\"\n    # Calculate potential leftover after adding the item\n    leftover = bins_remain_cap - item\n\n    # Identify bins that cannot fit the item\n    infeasible = leftover < 0\n\n    # Base priority: negative leftover, i.e. smallest leftover gets the highest score\n    priority = -leftover\n\n    # Mask infeasible bins with negative infinity so they will not be selected\n    priority[infeasible] = -np.inf\n\n    return priority\n\n[Reflection]\nScore bins by negative leftover; use adaptive penalty; blend best\u2011fit with worst\u2011fit; add lookahead.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}