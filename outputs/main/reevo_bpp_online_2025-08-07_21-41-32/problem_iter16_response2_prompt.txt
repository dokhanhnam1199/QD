{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for each bin in an online Bin Packing setting.\n\n    The priority blends an inverse\u2011slack bias (tight fits) with a random factor\n    and a tiny deterministic tie\u2011breaker based on the bin index. Infeasible\n    bins (capacity < item) receive ``-np.inf`` so they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better) for each bin.\n    \"\"\"\n    # Constants\n    _TOL = 1e-12   # feasibility tolerance\n    _EPS = 1e-12   # to avoid division by zero\n    _TIE = 1e-12   # deterministic tie\u2011breaker magnitude\n\n    # Ensure a 1\u2011D float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask\n    feasible = caps >= (item - _TOL)\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placement (non\u2011negative)\n    slack = np.maximum(caps[feasible] - item, 0.0)\n\n    # Inverse\u2011slack bias: larger for tighter fits\n    bias = 1.0 / (slack + _EPS)\n\n    # Normalise bias to [0, 1]\n    bias_norm = bias / (bias.max() + _EPS)\n\n    # Random component in [0, 1) for feasible bins\n    rand_vals = np.random.random(bias_norm.shape)\n\n    # Blend bias and randomness multiplicatively\n    blended = bias_norm * rand_vals\n\n    # Tiny deterministic tie\u2011breaker: lower index gets a small advantage\n    tie_breaker = -np.arange(n_bins, dtype=float)[feasible] * _TIE\n\n    # Final priority for feasible bins\n    priorities[feasible] = blended + tie_breaker\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    epsilon: float = 1e-12,\n    tie_breaker: float = 1e-6,\n    tiny_rand_range: float = 1e-6,\n    random_state: Optional[np.random.Generator] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each open bin.\n    tolerance : float, optional\n        Numerical tolerance for feasibility checks (default 1e-12).\n    epsilon : float, optional\n        Small constant added to slack to avoid division by zero\n        (default 1e-12).\n    tie_breaker : float, optional\n        Weight applied to the bin index to break ties deterministically.\n        Must be small enough not to outweigh the main bias (default 1e-6).\n    tiny_rand_range : float, optional\n        Scale of the tiny random perturbation added to each bin.\n        Keeps randomness low (default 1e-6).\n    random_state : np.random.Generator, optional\n        Random number generator for reproducibility. If ``None`` a new\n        default generator is created.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (higher is better). Infeasible bins\n        receive ``-np.inf`` and will never be selected.\n    \"\"\"\n    # Ensure a random generator is available.\n    rng = random_state if random_state is not None else np.random.default_rng()\n\n    # Flatten and cast capacities to float.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Compute slack (remaining capacity after placing the item).\n    slack = caps - item\n\n    # Determine which bins can accommodate the item (within tolerance).\n    feasible = slack >= -tolerance\n\n    # If no bin can hold the item, return all -inf scores.\n    if not np.any(feasible):\n        return np.full(n_bins, -np.inf, dtype=float)\n\n    # For feasible bins, compute slack_pos (non\u2011negative slack).\n    slack_pos = np.maximum(slack[feasible], 0.0)\n\n    # Base score inversely proportional to slack (higher for tighter fits).\n    base = 1.0 / (slack_pos + epsilon)\n\n    # Normalize base scores to the range [0, 1].\n    base_norm = base / base.max() if base.max() > 0 else base\n\n    # Weight by the fraction of bins that are feasible.\n    feasible_fraction = feasible.sum() / n_bins\n    weight = base_norm * feasible_fraction\n\n    # Tiny random component to diversify decisions.\n    rand_small = rng.random(n_bins) * tiny_rand_range\n\n    # Deterministic tie\u2011breaker: lower index gets slightly higher score.\n    idx_factor = np.arange(n_bins, dtype=float) * tie_breaker\n\n    # Assemble final scores, initializing infeasible bins to -inf.\n    final_score = np.full(n_bins, -np.inf, dtype=float)\n    final_score[feasible] = weight + rand_small[feasible] - idx_factor[feasible]\n\n    # Re\u2011normalize feasible scores to the range [0, 1] (keeps ranking robust).\n    feasible_scores = final_score[feasible]\n    min_score = feasible_scores.min()\n    max_score = feasible_scores.max()\n    if max_score > min_score:\n        normalized_scores = (feasible_scores - min_score) / (max_score - min_score)\n    else:\n        normalized_scores = feasible_scores  # all equal; keep as is\n\n    final_score[feasible] = normalized_scores\n\n    return final_score\n\n[Reflection]\nNormalize bias, add tiny random perturbation, weight by feasible fraction, use deterministic tie\u2011breaker, vectorize, protect against division\u2011by\u2011zero.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}