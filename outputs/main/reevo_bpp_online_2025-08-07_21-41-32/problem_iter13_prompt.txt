{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrioritize exact\u2011fit bins; score feasible bins by\u202f1/(slack+\u03b5); multiply by feasible\u2011bin fraction; add tiny random noise seeded per bin plus deterministic index tie\u2011breaker; clip negative slack; vectorize, guard division\u2011by\u2011zero, use tolerance\u202f\u03b5, avoid heavy normalizations.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    epsilon: float = 1e-12,\n    tie_breaker: float = 1e-12,\n    random_state: Optional[np.random.Generator] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem.\n\n    For each currently open bin we compute a score; the bin with the highest\n    score will receive the incoming item.  The score favours:\n      * Feasibility (the bin must have enough remaining capacity).\n      * Tight fits (small slack after insertion).\n      * A small deterministic tie\u2011breaker based on the bin index.\n      * Random diversification to avoid pathological deterministic behaviour.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each open bin.\n    tolerance : float, optional\n        Numerical tolerance for feasibility checks (default 1e-12).\n    epsilon : float, optional\n        Small constant added to slack to avoid division by zero\n        (default 1e-12).\n    tie_breaker : float, optional\n        Weight applied to the bin index to break ties deterministically.\n        Must be small enough not to outweigh the main bias (default 1e-12).\n    random_state : np.random.Generator, optional\n        Random number generator for reproducibility. If ``None`` a new\n        default generator is created.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (higher is better). Infeasible bins\n        receive ``-np.inf`` (negative infinity) and will never be selected.\n    \"\"\"\n    # Ensure a random generator is available.\n    rng = random_state if random_state is not None else np.random.default_rng()\n\n    # Flatten and cast capacities to float.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Determine which bins can accommodate the item (within tolerance).\n    feasible = caps >= (item - tolerance)\n\n    # Initialise all scores to -inf (infeasible by default).\n    scores = np.full(n_bins, -np.inf, dtype=float)\n\n    # Early exit if no bin can hold the item.\n    if not np.any(feasible):\n        return scores\n\n    # Compute slack (remaining capacity after the item would be placed).\n    # Clip negative values caused by floating\u2011point noise.\n    slack = np.maximum(caps - item, 0.0)\n\n    # Bias: larger for tighter fits (smaller slack). Adding epsilon avoids div\u2011by\u20110.\n    bias = 1.0 / (slack + epsilon)\n\n    # Random component: one uniform number per bin.\n    rand = rng.random(n_bins)\n\n    # Deterministic tie\u2011breaker: smaller index => slightly higher score.\n    idx_factor = np.arange(n_bins, dtype=float) * tie_breaker\n\n    # Combine the three components.\n    #   bias * rand   -> favours tight fits while still randomising.\n    #   - idx_factor  -> breaks exact ties in favour of lower indices.\n    scores[feasible] = bias[feasible] * rand[feasible] - idx_factor[feasible]\n\n    return scores\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}