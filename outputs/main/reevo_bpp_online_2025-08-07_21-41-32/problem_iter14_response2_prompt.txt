{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    tie_breaker: float = 1e-12,\n    epsilon: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each open bin.\n    tolerance : float, optional\n        Numerical tolerance for feasibility checks.\n    tie_breaker : float, optional\n        Small bias to favor lower\u2011index bins when priorities are equal.\n    epsilon : float, optional\n        Small constant added to slack to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin.  Higher scores indicate more desirable bins.\n        Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # Feasible bins: capacity is enough to accommodate the item\n    feasible = caps >= (item - tolerance)\n\n    # Default priorities: -inf for infeasible bins\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placing the item (non\u2011negative)\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Bias toward tight fits: 1/(slack + epsilon)\n    bias = 1.0 / (slack + epsilon)\n\n    # Weight bias by the fraction of feasible bins\n    feasible_frac = feasible.sum() / n_bins\n    weighted_bias = feasible_frac * bias\n\n    # Random diversification factor (0 to 1)\n    rand = np.random.rand(n_bins)\n\n    # Indices of feasible bins (used for tie\u2011breaking)\n    idx = np.nonzero(feasible)[0]\n\n    # Combine weighted bias, random factor, and tie\u2011breaker\n    priorities[feasible] = weighted_bias * rand[feasible] - idx * tie_breaker\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for each bin in an online Bin Packing setting.\n\n    The priority blends an inverse\u2011slack bias with a random component,\n    normalises the result, and adds a deterministic tie\u2011breaker based on the\n    bin index. Infeasible bins (insufficient remaining capacity) receive\n    ``-np.inf`` so they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better) for each bin.\n    \"\"\"\n    # Constants\n    _TOL = 1e-12          # feasibility tolerance\n    _EPS = 1e-12          # to avoid division by zero\n    _TIE = 1e-12          # deterministic tie\u2011breaker magnitude\n\n    # Ensure a 1\u2011D float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask (allow a tiny tolerance)\n    feasible = caps >= (item - _TOL)\n\n    # Initialise all priorities to -inf (infeasible bins)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placing the item (non\u2011negative)\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Inverse\u2011slack bias: larger for tighter fits\n    bias = 1.0 / (slack + _EPS)\n\n    # Normalise bias to [0, 1] (max bias gets 1)\n    bias_norm = bias / (bias.max() + _EPS)\n\n    # Random component in [0, 1) for feasible bins\n    rng = np.random.default_rng()\n    rand_feas = rng.random(feasible.sum())\n\n    # Blend bias and randomness multiplicatively (emphasises both)\n    blended = bias_norm * rand_feas\n\n    # Normalise blended scores to [0, 1] (max gets 1)\n    blended_norm = blended / (blended.max() + _EPS)\n\n    # Deterministic tie\u2011breaker: lower index \u2192 slightly higher priority\n    indices = np.arange(n_bins)[feasible]\n    tie_breaker = -indices * _TIE\n\n    # Final priority for feasible bins\n    priorities[feasible] = blended_norm + tie_breaker\n\n    return priorities\n\n[Reflection]\nNormalize bias, blend multiplicatively with randomness, re-normalize, tie-break by index, adjust epsilon, weigh bias by feasible fraction.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}