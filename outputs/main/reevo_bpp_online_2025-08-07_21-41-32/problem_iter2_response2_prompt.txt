{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns a priority vector for each bin using an epsilon\u2011greedy strategy.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of the remaining capacities of the bins.\n        epsilon: Exploration probability (0 \u2264 epsilon \u2264 1). With probability `epsilon`\n                 the function assigns random priorities to encourage exploration.\n                 Otherwise it uses a best\u2011fit exploitation rule.\n\n    Returns:\n        A NumPy array of the same shape as `bins_remain_cap` with a priority score for\n        each bin. Higher scores are preferred. Infeasible bins receive `-np.inf`.\n    \"\"\"\n    # Ensure bins_remain_cap is a 1\u2011D NumPy array of floats\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float).ravel()\n\n    # Feasibility mask: bin can accommodate the item\n    feasible = bins_remain_cap >= item\n\n    # Initialise priorities with -inf (so infeasible bins are never chosen)\n    priorities = np.full_like(bins_remain_cap, fill_value=-np.inf, dtype=float)\n\n    # If no bin can accommodate the item, return all -inf\n    if not np.any(feasible):\n        return priorities\n\n    # Decide whether to explore or exploit this step\n    if np.random.rand() < epsilon:\n        # Exploration: assign a random score to each feasible bin\n        priorities[feasible] = np.random.rand(np.sum(feasible))\n    else:\n        # Exploitation: Best\u2011Fit \u2013 minimise leftover space after packing\n        # leftover capacity if the item were placed\n        leftover = bins_remain_cap[feasible] - item\n        # Larger priority for smaller leftover; perfect fit (leftover=0) gets priority 0\n        priorities[feasible] = -leftover\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Exact\u2011Fit\u2011First priority function for online Bin Packing.\n\n    The bin with the highest returned score will be chosen for ``item``.\n    Bins that cannot accommodate the item receive ``-np.inf`` so they are\n    never selected. Among feasible bins, a smaller leftover capacity\n    (i.e. a tighter fit) yields a larger priority, and an exact fit\n    (remaining capacity == item) gets the highest possible priority.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).\n        Higher values indicate more attractive bins.\n    \"\"\"\n    # Tiny tolerance to guard against floating\u2011point noise.\n    eps = 1e-12\n\n    # Feasibility mask: bins that have enough space for the item.\n    feasible = bins_remain_cap >= (item - eps)\n\n    # Initialise all priorities to -inf (unfeasible bins).\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Compute leftover capacity if the item were placed.\n    leftover = bins_remain_cap[feasible] - item   # guaranteed >= 0\n\n    # Index\u2011based tiny offset to break ties deterministically\n    # (preferring lower\u2011indexed bins when leftovers are equal).\n    tiny = 1e-12\n    idx = np.where(feasible)[0]\n\n    # Exact\u2011Fit\u2011First: a smaller leftover means higher priority.\n    # Using negative leftover makes an exact fit (leftover == 0) obtain\n    # the largest score (0 before tie\u2011breaking). All other feasible\n    # bins receive negative scores proportional to wasted space.\n    priorities[feasible] = -leftover - idx * tiny\n\n    return priorities\n\n[Reflection]\nPrefer deterministic exact\u2011fit first, remove random epsilon; add tiny tie\u2011breaker and floating\u2011point tolerance for stable priorities.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}