{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that blends worst\u2011fit,\n    slack\u2011biased randomness, and an anticipation term based on the\n    distribution of current slack values.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. The bin with the maximum score\n        will be chosen to hold the item. Bins that cannot accommodate\n        the item receive a score of -np.inf.\n    \"\"\"\n    # Ensure a float array for calculations\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Feasible bins that can accommodate the item\n    feasible = caps >= item\n\n    # Initialise all priorities to -inf (ensures infeasible bins are never selected)\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bin, return the -inf array\n        return priorities\n\n    # Extract capacities and slack for feasible bins\n    rem = caps[feasible]\n    slack = rem - item\n    eps = 1e-12\n\n    # Normalise remaining capacity (worst\u2011fit component)\n    rem_min, rem_max = rem.min(), rem.max()\n    norm_rem = (rem - rem_min) / (rem_max - rem_min + eps)\n\n    # Normalise inverse slack (tight\u2011fit component)\n    inv_slack = 1.0 / (slack + eps)\n    inv_min, inv_max = inv_slack.min(), inv_slack.max()\n    norm_inv_slack = (inv_slack - inv_min) / (inv_max - inv_min + eps)\n\n    # Anticipation term: bins whose slack is close to the mean slack\n    slack_mean = slack.mean()\n    slack_std = slack.std() + eps\n    closeness = 1.0 - np.abs(slack - slack_mean) / slack_std\n    closeness = np.clip(closeness, 0.0, 1.0)\n\n    # Weight parameters (can be tuned)\n    alpha, beta, gamma = 0.4, 0.4, 0.2   # sum to 1\n    exploration_factor = 0.05\n\n    # Combine components\n    score = (\n        alpha * norm_rem\n        + beta * norm_inv_slack\n        + gamma * closeness\n    )\n\n    # Add small random exploration noise\n    rng = np.random.default_rng()\n    noise = rng.random(size=score.size) * exploration_factor\n    score += noise\n\n    # Assign the computed priorities to the feasible bins\n    priorities[feasible] = score\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for online Bin Packing using inverse waste.\n\n    For each bin that can accommodate the item, the priority is proportional\n    to 1/(remaining_capacity - item + eps). Bins that cannot accommodate the \n    item receive -inf. Scores are shifted to be non\u2011negative.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (same shape as bins_remain_cap). Higher values indicate\n        more desirable bins.\n    \"\"\"\n    eps = 1e-9  # avoid division by zero when waste is zero\n\n    # Ensure a 1\u2011D float array\n    caps = np.asarray(bins_remain_cap, dtype=float).reshape(-1)\n\n    # Feasibility mask\n    feasible = caps >= item\n\n    # Compute waste (remaining capacity after placing the item)\n    waste = caps - item\n\n    # Inverse waste priority for feasible bins, -inf otherwise\n    priorities = np.where(feasible, 1.0 / (waste + eps), -np.inf)\n\n    # Shift to non\u2011negative values if any finite priority is negative\n    if np.any(np.isfinite(priorities)):\n        min_finite = np.min(priorities[np.isfinite(priorities)])\n        if min_finite < 0:\n            priorities = np.where(\n                np.isfinite(priorities),\n                priorities - min_finite,\n                priorities\n            )\n\n    return priorities\n\n[Reflection]\nPrefer inverse waste only; avoid complex normalisation, random noise; minimal tunable parameters.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}