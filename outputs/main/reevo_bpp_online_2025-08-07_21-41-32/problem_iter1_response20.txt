```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin based on a First-Fit strategy.

    The bin with the highest priority score will be chosen for packing the item.
    Here we give higher priority to bins that can accommodate the item and
    that appear earlier in the list (smaller index).  Bins that cannot
    accommodate the item receive a very low priority.

    Args:
        item: Size of the item to be packed.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.  The higher the value, the
        more preferable the bin.
    """
    n = bins_remain_cap.size
    # Determine which bins can hold the item
    can_fit = bins_remain_cap >= item
    # Assign high priority to earlier bins that can fit
    # Using a large constant so that later bins still have priority > -inf,
    # but earlier bins dominate
    LARGE_PRIO = 1e9
    priorities = np.full(n, -np.inf, dtype=float)
    indices = np.arange(n)
    if np.any(can_fit):
        priorities[can_fit] = LARGE_PRIO - indices[can_fit]
    return priorities
```
