{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that blends worst\u2011fit,\n    slack\u2011biased randomness, and an anticipation term based on the\n    distribution of current slack values.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. The bin with the maximum score\n        will be chosen to hold the item. Bins that cannot accommodate\n        the item receive a score of -np.inf.\n    \"\"\"\n    # Ensure a float array for calculations\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Feasible bins that can accommodate the item\n    feasible = caps >= item\n\n    # Initialise all priorities to -inf (ensures infeasible bins are never selected)\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bin, return the -inf array\n        return priorities\n\n    # Extract capacities and slack for feasible bins\n    rem = caps[feasible]\n    slack = rem - item\n    eps = 1e-12\n\n    # Normalise remaining capacity (worst\u2011fit component)\n    rem_min, rem_max = rem.min(), rem.max()\n    norm_rem = (rem - rem_min) / (rem_max - rem_min + eps)\n\n    # Normalise inverse slack (tight\u2011fit component)\n    inv_slack = 1.0 / (slack + eps)\n    inv_min, inv_max = inv_slack.min(), inv_slack.max()\n    norm_inv_slack = (inv_slack - inv_min) / (inv_max - inv_min + eps)\n\n    # Anticipation term: bins whose slack is close to the mean slack\n    slack_mean = slack.mean()\n    slack_std = slack.std() + eps\n    closeness = 1.0 - np.abs(slack - slack_mean) / slack_std\n    closeness = np.clip(closeness, 0.0, 1.0)\n\n    # Weight parameters (can be tuned)\n    alpha, beta, gamma = 0.4, 0.4, 0.2   # sum to 1\n    exploration_factor = 0.05\n\n    # Combine components\n    score = (\n        alpha * norm_rem\n        + beta * norm_inv_slack\n        + gamma * closeness\n    )\n\n    # Add small random exploration noise\n    rng = np.random.default_rng()\n    noise = rng.random(size=score.size) * exploration_factor\n    score += noise\n\n    # Assign the computed priorities to the feasible bins\n    priorities[feasible] = score\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin\u2011packing that scores each bin by\n    how *tight* the fit would be, normalised between 0 and 1 for\n    feasible bins, with a tiny tie\u2011breaking bias and a hard penalty\n    for infeasible bins.\n\n    The score is highest for a bin that would become the most full\n    after placing the item (i.e. the smallest leftover capacity).\n    Bins that cannot accommodate the item receive -\u221e and are never\n    chosen.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be packed.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacities of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        An array of the same shape as ``bins_remain_cap`` containing\n        a priority score for each bin.\n    \"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Compute leftover capacity after placing the item.\n    leftover = bins_remain_cap - item\n\n    # Which bins can accept the item?\n    feasible = leftover >= 0\n\n    # Handle the case where no bin can fit the item.\n    if not np.any(feasible):\n        # All bins are infeasible \u2013 return a constant negative score\n        # (or -np.inf) for every bin.\n        return np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Normalise feasible leftovers to a 0\u20111 range:\n    # 1.0 corresponds to zero leftover (perfect fit).\n    # 0.0 corresponds to the largest leftover among feasible bins.\n    max_leftover = leftover[feasible].max()\n    eps = 1e-12  # avoid division by zero\n    denom = max_leftover if max_leftover > eps else eps\n    norm_scores = np.where(\n        feasible,\n        1.0 - leftover / denom,  # higher score for smaller leftover\n        -np.inf\n    )\n\n    # Tiny bias that prefers bins with *larger* remaining capacity\n    # (i.e. smaller indices when bins are sorted by capacity).\n    bias = 1e-6 * (bins_remain_cap.max() - bins_remain_cap)\n    return norm_scores + bias\n\n[Reflection]\nNormalize leftover for tightness, penalise infeasible bins, add tiny bias, avoid heavy stats or randomness.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}