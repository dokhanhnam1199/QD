```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for placing an item into each bin based on the Inverse Distance (Proximity Fit) strategy.
    The score is inversely proportional to the leftover capacity after adding the item.
    Bins that cannot accommodate the item receive a very low priority.

    Parameters
    ----------
    item : float
        Size of the item to be added.
    bins_remain_cap : np.ndarray
        Array of remaining capacities for each bin.

    Returns
    -------
    np.ndarray
        Array of priority scores, one for each bin, with higher values indicating better fit.
    """
    # Small epsilon to avoid division by zero when the leftover is zero.
    eps = 1e-12

    # Boolean mask for bins that can accommodate the item
    can_fit = bins_remain_cap >= item

    # Compute leftover capacity after adding the item
    leftover = bins_remain_cap - item

    # Inverse distance priority: larger when leftover is small
    # Non-fitting bins are assigned a large negative constant
    inv_priority = np.where(
        can_fit,
        1.0 / (leftover + eps),   # priority grows as leftover shrinks
        -1e12                      # severe penalty for infeasible bins
    )

    # Optional exploration bias: prefer emptier bins when priorities tie.
    # The bias is tiny compared to the inverse terms and favors smaller bin indices.
    bias = 1e-6 * (np.max(bins_remain_cap) - bins_remain_cap)
    priorities = inv_priority + bias

    return priorities
```
