```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for each bin in an online Bin Packing problem.

    The priority is based on a tight‑fit bias (inverse slack) multiplied by a
    random factor, normalised to [0, 1], and a tiny deterministic tie‑breaker
    that favours lower‑index bins. Infeasible bins receive ``-np.inf``.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each open bin.

    Returns
    -------
    np.ndarray
        Priority scores for each bin; the bin with the highest score should be
        selected for the item.
    """
    # Numerical tolerances
    _TOL = 1e-12  # tolerance for feasibility check (tiny)
    _EPS = 1e-12  # avoid division by zero
    _TIE = 1e-12  # deterministic tie‑breaker magnitude

    # Ensure a flat float array of capacities
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # Feasibility mask (allow a tiny tolerance for floating‑point errors)
    feasible = caps >= (item - _TOL)

    # Initialise all priorities to -inf (infeasible bins)
    priorities = np.full(n_bins, -np.inf, dtype=float)

    if not np.any(feasible):
        return priorities

    # Slack after placing the item (non‑negative for feasible bins)
    slack = caps[feasible] - item
    slack = np.maximum(slack, 0.0)

    # Inverse‑slack bias: larger for tighter fits
    bias = 1.0 / (slack + _EPS)

    # Normalise bias to [0, 1]
    bias_norm = bias / bias.max()

    # Random factor in [0, 1) for each feasible bin
    rng = np.inf  # placeholder to avoid import errors if np.random missing
    rng = np.random.default_rng()
    rand_vals = rng.random(bias_norm.shape)

    # Blend bias and randomness multiplicatively
    blended = bias_norm * rand_vals

    # Normalise blended scores to [0, 1]
    max_blended = blended.max()
    blended_norm = blended / (max_blended + _EPS)

    # Deterministic tie‑breaker: lower index gets a slight advantage
    tie_breaker = -np.arange(n_bins)[feasible] * _TIE

    # Final priority for feasible bins
    priorities[feasible] = blended_norm + tie_breaker

    return priorities
```
