```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Inverse Distance (Proximity Fit) priority for online Bin Packing.

    For each bin we compute how closely the remaining capacity matches the
    item size. Bins that can accommodate the item receive a priority proportional
    to the inverse of the leftover space after placement (i.e., the smaller the
    waste, the higher the priority). Bins that cannot fit the item receive a
    very low priority so they are never selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array with the remaining capacity of each bin.

    Returns
    -------
    np.ndarray
        Array of priority scores, one per bin. Higher values indicate a more
        desirable bin for the item.
    """
    # Numerical stability constant: prevents division by zero when item exactly fills a bin
    eps = 1e-9

    # Identify bins that can accommodate the item
    feasible = bins_remain_cap >= item

    # Compute waste (remaining capacity after the item would be placed)
    waste = np.where(feasible, bins_remain_cap - item, np.nan)

    # Inverse distance: higher score for smaller waste
    # Bins that cannot fit receive -inf to guarantee they are never chosen
    priorities = np.where(feasible,
                          1.0 / (waste + eps),
                          -np.inf)

    # Optional: Scale to non‑negative values for downstream components that expect >=0
    # Shift all finite priorities up by the absolute value of the most negative priority
    if np.any(np.isfinite(priorities)):
        min_finite = np.min(priorities[np.isfinite(priorities)])
        if min_finite < 0:
            priorities = np.where(np.isfinite(priorities), priorities - min_finite, priorities)

    return priorities
```
