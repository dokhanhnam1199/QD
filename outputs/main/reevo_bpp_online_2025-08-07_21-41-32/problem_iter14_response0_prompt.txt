{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    epsilon: float = 1e-12,\n    tie_breaker: float = 1e-12,\n    random_state: Optional[np.random.Generator] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem (v2).\n\n    Computes a priority score for each currently open bin. Higher scores\n    indicate a more desirable bin for placing the incoming item.\n\n    The scoring favours:\n      * Feasibility (bin must have enough remaining capacity).\n      * Exact fits (small slack after insertion).\n      * Larger fraction of the bin's capacity being utilized by the item.\n      * Tiny random noise (seeded per bin) to break pathological ties.\n      * Deterministic tie\u2011breaker based on bin index.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of open bins.\n    tolerance : float, optional\n        Numerical tolerance for feasibility check (default 1e-12).\n    epsilon : float, optional\n        Small constant to avoid division by zero (default 1e-12).\n    tie_breaker : float, optional\n        Weight for deterministic index tie\u2011breaker (default 1e-12).\n    random_state : np.random.Generator, optional\n        Random generator for reproducibility. If None, a default generator\n        is created.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # Ensure we have a random generator.\n    rng = random_state if random_state is not None else np.random.default_rng()\n\n    # Convert capacities to a 1\u2011D float array.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Determine feasibility.\n    feasible = caps >= (item - tolerance)\n\n    # Initialise scores with -inf for infeasible bins.\n    scores = np.full(n_bins, -np.inf, dtype=float)\n\n    # Early exit if no feasible bin exists.\n    if not np.any(feasible):\n        return scores\n\n    # Compute slack after insertion (clip negative values to zero).\n    slack = np.maximum(caps - item, 0.0)\n\n    # Bias favouring tight fits.\n    bias = 1.0 / (slack + epsilon)\n\n    # Fraction of the bin's capacity that the item would occupy.\n    # Guard against division by zero using epsilon.\n    cap_denominator = np.maximum(caps, epsilon)\n    fill_fraction = np.zeros_like(caps)\n    fill_fraction[feasible] = item / cap_denominator[feasible]\n\n    # Base score: bias weighted by how much of the bin is filled.\n    base_score = bias * fill_fraction\n\n    # Tiny random noise to diversify decisions (scaled by epsilon).\n    random_noise = rng.random(n_bins) * epsilon\n\n    # Deterministic tie\u2011breaker: lower index gets a slight advantage.\n    idx_factor = np.arange(n_bins, dtype=float) * tie_breaker\n\n    # Final score for feasible bins.\n    scores[feasible] = base_score[feasible] + random_noise[feasible] - idx_factor[feasible]\n\n    return scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for each bin in an online Bin Packing setting.\n\n    The priority blends an inverse\u2011slack bias (tight fits) with a random factor\n    and a tiny deterministic tie\u2011breaker based on the bin index. Bins that\n    cannot accommodate the item receive ``-np.inf`` so they are never chosen.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better) for each bin.\n    \"\"\"\n    # Constants\n    _TOL = 1e-12   # feasibility tolerance\n    _EPS = 1e-12   # to avoid division by zero\n    _TIE = 1e-12   # deterministic tie\u2011breaker magnitude\n\n    # Ensure a 1\u2011D float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask (allow a tiny tolerance)\n    feasible = caps >= (item - _TOL)\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placing the item (non\u2011negative)\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Inverse\u2011slack bias: larger for tighter fits\n    bias = 1.0 / (slack + _EPS)\n\n    # Normalise bias to [0, 1]\n    bias_norm = bias / (bias.max() + _EPS)\n\n    # Random component in [0, 1) for feasible bins\n    rng = np.random.default_rng()\n    rand_vals = rng.random(bias_norm.shape)\n\n    # Blend bias and randomness multiplicatively\n    blended = bias_norm * rand_vals\n\n    # Normalise blended scores to [0, 1]\n    blended_norm = blended / (blended.max() + _EPS)\n\n    # Deterministic tie\u2011breaker: lower index gets a slight advantage\n    tie_breaker = -np.arange(n_bins)[feasible] * _TIE\n\n    # Final priority for feasible bins\n    priorities[feasible] = blended_norm + tie_breaker\n\n    return priorities\n\n[Reflection]\nNormalize inverse\u2011slack bias, multiply by random, keep index tie\u2011breaker tiny, vectorize operations, minimize extra divisions.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}