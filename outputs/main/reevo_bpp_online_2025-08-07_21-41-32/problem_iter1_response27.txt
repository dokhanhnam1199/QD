```python
import numpy as np

# Global random generator (you can seed it externally if reproducibility is needed)
_rng = np.random.default_rng()

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Random Fit priority function for online Bin Packing.

    Each bin that can accommodate the incoming item receives a random priority, while
    bins that cannot fit the item are assigned a very low priority (negative infinity)
    so they are never selected.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1â€‘D array of remaining capacities for each existing bin.

    Returns:
        A NumPy array of the same shape as ``bins_remain_cap`` containing priority
        scores for each bin. The bin with the highest priority will be chosen.
    """
    # Ensure we are working with a NumPy array of floats
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Boolean mask: True where the bin can hold the item
    can_fit = caps >= item

    # Random priority for every bin (uniform in [0, 1))
    random_priorities = _rng.random(size=caps.shape)

    # Infeasible bins get -inf to guarantee they are never the max
    priorities = np.where(can_fit, random_priorities, -np.inf)

    return priorities
```
