{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that:\n    - Prioritises exact\u2011fit bins.\n    - Scores feasible bins by 1/(slack+\u03b5) (higher for tighter fits).\n    - Adds a tiny deterministic random tie\u2011breaker seeded per bin.\n    - Falls back to a deterministic index tie\u2011breaker (lower index wins).\n    - Vectorised, with tolerance checks and guard against division\u2011by\u2011zero.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n_bins = caps.size\n\n    # Tolerance for feasibility check\n    tolerance = 1e-12\n    feasible = caps >= (item - tolerance)\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Compute slack for feasible bins, ensuring non\u2011negative values\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Bias: higher when slack is smaller\n    eps = 1e-12\n    bias = 1.0 / (slack + eps)\n\n    # Optional weighting by the fraction of feasible bins\n    feasible_frac = feasible.sum() / n_bins\n    weighted_bias = bias * feasible_frac\n\n    # Deterministic tiny random component per bin (seeded by index)\n    indices = np.arange(n_bins)\n    # Use a simple hash\u2011like function for reproducibility\n    rand_vals = np.sin(indices[feasible] * 12.9898 + 78.233) * 43758.5453\n    rand_vals = rand_vals % 1.0\n    rand_component = rand_vals * 1e-6  # tiny magnitude\n\n    # Deterministic index tie\u2011breaker (lower index gets a slight advantage)\n    index_tie = -indices[feasible] * 1e-12\n\n    # Combine all components to form final priority scores\n    priorities[feasible] = weighted_bias + rand_component + index_tie\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online bin packing that:\n    - Biases random scores by the inverse of the slack (remaining capacity minus item size).\n    - Adapts the weight of the bias based on the fraction of feasible bins.\n    - Adds a deterministic tie\u2011breaker that favors lower indexed bins.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better) for each bin.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n_bins = caps.size\n\n    # Feasibility mask (allow a tiny tolerance)\n    tolerance = 1e-12\n    feasible = caps >= (item - tolerance)\n\n    # Initialize all priorities to -inf for infeasible bins\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placing the item (non\u2011negative)\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Inverse slack bias (higher bias for tighter fits)\n    eps = 1e-12\n    bias = 1.0 / (slack + eps)\n\n    # Weight bias by the fraction of feasible bins\n    feasible_frac = feasible.sum() / n_bins\n    weighted_bias = bias * feasible_frac\n\n    # Random component\n    rand_scores = np.random.rand(feasible.sum())\n\n    # Combine bias and randomness\n    combined = weighted_bias * rand_scores\n\n    # Deterministic tie\u2011breaker: lower index \u2192 higher priority\n    indices = np.arange(n_bins)\n    tie_breaker = 1e-12\n    tie = -indices[feasible] * tie_breaker\n\n    # Assign priorities for feasible bins\n    priorities[feasible] = combined + tie\n\n    return priorities\n\n[Reflection]\nWeight inverse slack by feasible fraction, multiply by random, add tiny index tie\u2011breaker; keep calculations minimal.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}