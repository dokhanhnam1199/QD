{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n_rng = np.random.default_rng()\n\n    \"\"\"\n    Priority function for online bin packing that blends residual capacity\n    with a stochastic tie\u2011breaker. Feasible bins receive a score that is a\n    weighted sum of their normalized residual capacity and a uniform random\n    value. Infeasible bins are assigned -inf so they are never chosen.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array with the remaining capacity of each existing bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores of the same shape as `bins_remain_cap`.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    can_fit = caps >= item\n\n    # If no feasible bins, return all -inf\n    if not np.any(can_fit):\n        return np.full_like(caps, -np.inf)\n\n    residual = caps - item\n\n    # Normalize residuals among feasible bins to [0, 1]\n    max_res = residual[can_fit].max()\n    if max_res > 0:\n        residual_norm = residual / max_res\n    else:\n        residual_norm = np.zeros_like(residual)\n\n    # Random component uniform in [0, 1)\n    random_comp = _rng.random(size=caps.shape)\n\n    # Weight between deterministic residual and stochastic tie\u2011breaker\n    alpha = 0.9\n    priority = np.where(can_fit,\n                        alpha * residual_norm + (1 - alpha) * random_comp,\n                        -np.inf)\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for each bin for the online Bin Packing Problem.\n\n    The heuristic favours bins that become *almost full* after placing the item,\n    applying an adaptive boost that grows when the leftover capacity is small.\n    Infeasible bins receive a large negative priority so they are never chosen.\n    A tiny random perturbation is added to break ties in a non\u2011deterministic way.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores, one per bin. The bin with the highest score\n        should be selected for the item.\n    \"\"\"\n    # Ensure a floating point array\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Leftover capacity after hypothetically placing the item\n    leftover = caps - item\n\n    # Feasibility mask: True if the bin can accommodate the item\n    feasible = leftover >= 0\n\n    # Base priority: higher when leftover is smaller (negative leftover)\n    base_priority = -leftover\n\n    # Adaptive boost: decays quickly as leftover grows.\n    # Use a scale (eps) that adapts to the current distribution of feasible leftovers.\n    if np.any(feasible):\n        # Use a low percentile of feasible leftovers as a scale.\n        # This makes the boost more aggressive when many bins are nearly full.\n        eps = np.percentile(leftover[feasible], 25)  # 25th percentile\n        # Guard against eps being zero (e.g., when a perfect fit exists)\n        eps = max(eps, 1e-6)\n    else:\n        eps = 0.05  # fallback scale when no bin can hold the item\n\n    boost_factor = 5.0  # magnitude of the boost\n\n    # Exponential decay boost: maximum boost_factor when leftover \u2248 0,\n    # decays to near\u2011zero for leftover \u226b eps.\n    boost = boost_factor * np.exp(-leftover / eps)\n\n    # Combine base priority and boost, penalise infeasible bins with -inf\n    priority = np.where(feasible, base_priority + boost, -np.inf)\n\n    # Add a tiny random perturbation for tie\u2011breaking (only on feasible bins)\n    rng = np.random.default_rng()\n    tie_break = rng.random(priority.shape) * 1e-12\n    priority = np.where(feasible, priority + tie_break, priority)\n\n    return priority\n\n[Reflection]\nBoost nearly\u2011full bins via exponential decay with adaptive epsilon; add tiny random tie\u2011breaker; avoid normalizing residuals.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}