{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n_rng = np.random.default_rng()\n\n    \"\"\"\n    Priority function for online bin packing that blends residual capacity\n    with a stochastic tie\u2011breaker. Feasible bins receive a score that is a\n    weighted sum of their normalized residual capacity and a uniform random\n    value. Infeasible bins are assigned -inf so they are never chosen.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array with the remaining capacity of each existing bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores of the same shape as `bins_remain_cap`.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    can_fit = caps >= item\n\n    # If no feasible bins, return all -inf\n    if not np.any(can_fit):\n        return np.full_like(caps, -np.inf)\n\n    residual = caps - item\n\n    # Normalize residuals among feasible bins to [0, 1]\n    max_res = residual[can_fit].max()\n    if max_res > 0:\n        residual_norm = residual / max_res\n    else:\n        residual_norm = np.zeros_like(residual)\n\n    # Random component uniform in [0, 1)\n    random_comp = _rng.random(size=caps.shape)\n\n    # Weight between deterministic residual and stochastic tie\u2011breaker\n    alpha = 0.9\n    priority = np.where(can_fit,\n                        alpha * residual_norm + (1 - alpha) * random_comp,\n                        -np.inf)\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    tie_breaker: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Deterministic Exact\u2011Fit\u2011First priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array (or array\u2011like) of remaining capacities of the currently open bins.\n    tolerance : float, optional\n        Numerical tolerance for feasibility and exact\u2011fit detection.\n        Bins whose remaining capacity is at least ``item - tolerance`` are considered feasible.\n        A leftover smaller than ``tolerance`` is treated as an exact fit.\n    tie_breaker : float, optional\n        Tiny value used to break ties deterministically in favour of lower\u2011indexed bins.\n        Must be sufficiently smaller than the smallest possible leftover.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).\n        Higher values indicate more attractive bins. Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # Ensure a flat NumPy array of floats.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n\n    # Feasibility mask: bins that can accommodate the item within tolerance.\n    feasible = caps >= (item - tolerance)\n\n    # Initialise priorities with -inf for infeasible bins.\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bin; return all -inf.\n        return priorities\n\n    # Compute leftover capacity for feasible bins.\n    leftover = caps[feasible] - item\n    # Clip tiny negative leftovers caused by tolerance to zero.\n    leftover = np.maximum(leftover, 0.0)\n\n    # Indices of feasible bins (used for deterministic tie\u2011breaking).\n    idx = np.where(feasible)[0]\n\n    # Exact\u2011Fit\u2011First: smaller leftover \u2192 higher priority.\n    # Use negative leftover so exact fit (leftover == 0) yields the highest raw score.\n    # Subtract a tiny index\u2011dependent term to break ties in favour of lower\u2011indexed bins.\n    priorities[feasible] = -leftover - idx * tie_breaker\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, penalize leftover, use tiny deterministic tie\u2011breakers, avoid randomness.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}