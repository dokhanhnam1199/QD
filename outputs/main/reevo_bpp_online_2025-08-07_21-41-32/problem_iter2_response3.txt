```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for online Bin Packing using inverse waste.

    For each bin that can accommodate the item, the priority is proportional
    to 1/(remaining_capacity - item + eps). Bins that cannot accommodate the 
    item receive -inf. Scores are shifted to be non‑negative.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each bin.

    Returns
    -------
    np.ndarray
        Priority scores (same shape as bins_remain_cap). Higher values indicate
        more desirable bins.
    """
    eps = 1e-9  # avoid division by zero when waste is zero

    # Ensure a 1‑D float array
    caps = np.asarray(bins_remain_cap, dtype=float).reshape(-1)

    # Feasibility mask
    feasible = caps >= item

    # Compute waste (remaining capacity after placing the item)
    waste = caps - item

    # Inverse waste priority for feasible bins, -inf otherwise
    priorities = np.where(feasible, 1.0 / (waste + eps), -np.inf)

    # Shift to non‑negative values if any finite priority is negative
    if np.any(np.isfinite(priorities)):
        min_finite = np.min(priorities[np.isfinite(priorities)])
        if min_finite < 0:
            priorities = np.where(
                np.isfinite(priorities),
                priorities - min_finite,
                priorities
            )

    return priorities
```
