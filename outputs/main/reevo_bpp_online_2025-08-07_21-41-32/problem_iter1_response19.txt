```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Compute Softmax-based priority scores for each bin.

    The function penalizes bins by the leftover space after packing `item`.
    Bins that cannot accommodate `item` receive zero priority.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each bin.

    Returns
    -------
    np.ndarray
        Priority scores with shape equal to bins_remain_cap.
        Larger scores indicate bins that fit `item` more tightly.
    """
    bins = bins_remain_cap
    mask = bins >= item
    if not mask.any():
        # No bin can fit the item – the algorithm will create a new bin
        return np.zeros_like(bins, dtype=float)
    # Compute a score that is larger for a bin with a smaller leftover
    base = np.full_like(bins, -np.inf, dtype=float)
    base[mask] = -(bins[mask] - item)  # -leftover
    # Numerical stability
    max_base = np.max(base[mask])
    exp_val = np.zeros_like(base)
    exp_val[mask] = np.exp((base[mask] - max_base))
    return exp_val / np.sum(exp_val)
```
