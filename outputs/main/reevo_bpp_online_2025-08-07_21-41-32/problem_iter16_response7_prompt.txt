{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for each bin in an online Bin Packing setting.\n\n    The priority blends an inverse\u2011slack bias (tight fits) with a random factor\n    and a tiny deterministic tie\u2011breaker based on the bin index. Infeasible\n    bins (capacity < item) receive ``-np.inf`` so they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better) for each bin.\n    \"\"\"\n    # Constants\n    _TOL = 1e-12   # feasibility tolerance\n    _EPS = 1e-12   # to avoid division by zero\n    _TIE = 1e-12   # deterministic tie\u2011breaker magnitude\n\n    # Ensure a 1\u2011D float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask\n    feasible = caps >= (item - _TOL)\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placement (non\u2011negative)\n    slack = np.maximum(caps[feasible] - item, 0.0)\n\n    # Inverse\u2011slack bias: larger for tighter fits\n    bias = 1.0 / (slack + _EPS)\n\n    # Normalise bias to [0, 1]\n    bias_norm = bias / (bias.max() + _EPS)\n\n    # Random component in [0, 1) for feasible bins\n    rand_vals = np.random.random(bias_norm.shape)\n\n    # Blend bias and randomness multiplicatively\n    blended = bias_norm * rand_vals\n\n    # Tiny deterministic tie\u2011breaker: lower index gets a small advantage\n    tie_breaker = -np.arange(n_bins, dtype=float)[feasible] * _TIE\n\n    # Final priority for feasible bins\n    priorities[feasible] = blended + tie_breaker\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    tolerance: float = 1e-12,\n    eps: float = 1e-12,\n    rand_scale: float = 1e-3,\n    tie_breaker: float = 1e-12,\n    random_state: Optional[np.random.Generator] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for online Bin Packing that:\n        * only considers bins that can fit the item,\n        * favours tighter fits (smaller slack),\n        * normalises slack to compare bins fairly,\n        * slightly weights all feasible bins together,\n        * adds a tiny random perturbation to avoid deterministic loops,\n        * uses a deterministic tie\u2011breaker favouring lower indices.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each open bin.\n    tolerance : float, optional\n        Numerical tolerance for feasibility checks.\n    eps : float, optional\n        Small constant to avoid division by zero.\n    rand_scale : float, optional\n        Maximum scale of the random perturbation (kept small).\n    tie_breaker : float, optional\n        Weight applied to the bin index for deterministic tie\u2011breaking.\n    random_state : np.random.Generator, optional\n        RNG for reproducibility; if None a default RNG is used.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better). Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    rng = random_state if random_state is not None else np.random.default_rng()\n\n    # Ensure a flat float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Feasibility mask\n    feasible = caps >= (item - tolerance)\n\n    # Scores: infeasible bins get -inf\n    scores = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return scores\n\n    # Slack after placing the item\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Normalise slack so that the largest slack among feasible bins is 1\n    max_slack = slack.max() + eps\n    norm_slack = slack / max_slack\n\n    # Bias: tighter fit \u2192 larger value\n    bias = 1.0 / (norm_slack + eps)\n\n    # Weight the bias by the fraction of feasible bins (encourages opening new bins when many options)\n    feasible_frac = feasible.sum() / n_bins\n    bias *= feasible_frac\n\n    # Small random factor to diversify choices\n    rand_factor = 1.0 + rng.random(feasible.sum()) * rand_scale\n\n    # Deterministic tie\u2011breaker: lower index gets a tiny advantage\n    indices = np.arange(n_bins)\n    tie = indices[feasible] * tie_breaker\n\n    # Final score: bias + randomness, then break ties\n    scores[feasible] = bias * rand_factor - tie\n\n    return scores\n\n[Reflection]\nNormalize slack, favor tighter fits, weight by feasible\u2011fraction, add tiny random perturbation, deterministic tie\u2011breaker.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}