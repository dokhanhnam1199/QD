```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Exact Fit First priority function for online Bin Packing.

    For each bin this function returns a score that is extremely high if the
    item would fill the bin exactly.  If the bin is not an exact fit, the
    score decreases as the remaining capacity after placement increases,
    thereby preferring bins that will leave the smallest leftover space.

    Parameters
    ----------
    item : float
        The size of the incoming item to pack.
    bins_remain_cap : np.ndarray
        1â€‘D array containing the remaining capacity of each bin.

    Returns
    -------
    np.ndarray
        Same shape as `bins_remain_cap`; larger values indicate a higher
        priority to add the item to that bin.
    """
    EPS = 1e-12          # tolerance for numerical equality
    INF_HIGH = 1e6       # a large value that outranks all other scores

    # Ensure numeric numpy array
    bins = np.asarray(bins_remain_cap, dtype=float)

    # Mask of bins that can accommodate the item
    usable = bins >= item - EPS
    # Remaining capacity after placing the item
    remaining_after = bins - item

    # Initialise priorities with -inf (unfit bins)
    priorities = np.full_like(bins, -np.inf, dtype=float)

    # Bins where the item will fit exactly
    exact_fit = np.abs(remaining_after) <= EPS
    if np.any(exact_fit):
        priorities[exact_fit] = INF_HIGH

    # Other usable bins: prioritize smallest leftover space
    other_usable = usable & ~exact_fit
    if np.any(other_usable):
        # 1/(remaining+1) is larger when remaining is smaller.
        priorities[other_usable] = 1.0 / (remaining_after[other_usable] + 1.0)

    return priorities
```
