```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Almost Full Fit priority function.

    For each bin, compute how tightly the item would fill it.
    Bins that can accommodate the item receive a priority equal to the
    negative of the remaining capacity after insertion (so a smaller leftover
    yields a higher priority). Bins that cannot accommodate the item receive
    -inf, ensuring they are never selected.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array of remaining capacities of the current bins.

    Returns:
        A 1‑D NumPy array of priority scores (same shape as bins_remain_cap).
    """
    # Convert to NumPy array for vectorised operations (if not already)
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Identify feasible bins
    feasible = caps >= item

    # Compute remaining space if the item were placed (only for feasible bins)
    remaining_after = caps - item
    remaining_after[~feasible] = np.nan  # Mask out infeasible entries

    # Priority: larger (i.e., less negative) for smaller remaining space.
    # Use -inf for infeasible bins to guarantee they are not chosen.
    priorities = np.where(feasible, -remaining_after, -np.inf)

    return priorities
```
