{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Compute Worst\u2011Fit priority for each bin.\n\n    The worst\u2011fit strategy always places the next item into the bin with\n    the *largest* remaining free capacity that is large enough to hold\n    the item.  This function returns a score array; the bin with the\n    maximum score is chosen for the item.  Bins that cannot accommodate\n    the item are given a score of -np.inf, ensuring they are never\n    selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacity of each bin (positive numbers).  Must be 1\u2011D.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores of the same shape as `bins_remain_cap`.  The\n        highest score corresponds to the bin that should receive the\n        item under the worst\u2011fit policy.\n    \"\"\"\n    # Only bins that have enough capacity are considered; others get -inf score\n    valid = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priorities[valid] = bins_remain_cap[valid]\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for placing an item into each bin based on the Inverse Distance (Proximity Fit) strategy.\n    The score is inversely proportional to the leftover capacity after adding the item.\n    Bins that cannot accommodate the item receive a very low priority.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be added.\n    bins_remain_cap : np.ndarray\n        Array of remaining capacities for each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores, one for each bin, with higher values indicating better fit.\n    \"\"\"\n    # Small epsilon to avoid division by zero when the leftover is zero.\n    eps = 1e-12\n\n    # Boolean mask for bins that can accommodate the item\n    can_fit = bins_remain_cap >= item\n\n    # Compute leftover capacity after adding the item\n    leftover = bins_remain_cap - item\n\n    # Inverse distance priority: larger when leftover is small\n    # Non-fitting bins are assigned a large negative constant\n    inv_priority = np.where(\n        can_fit,\n        1.0 / (leftover + eps),   # priority grows as leftover shrinks\n        -1e12                      # severe penalty for infeasible bins\n    )\n\n    # Optional exploration bias: prefer emptier bins when priorities tie.\n    # The bias is tiny compared to the inverse terms and favors smaller bin indices.\n    bias = 1e-6 * (np.max(bins_remain_cap) - bins_remain_cap)\n    priorities = inv_priority + bias\n\n    return priorities\n\n[Reflection]\nUse normalized scores, heavily penalize infeasible bins, add tiny tie\u2011breaking bias, guard against division\u2011by\u2011zero.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}