{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    tie_breaker: float = 1e-12,\n    epsilon: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each open bin.\n    tolerance : float, optional\n        Numerical tolerance for feasibility checks.\n    tie_breaker : float, optional\n        Small bias to favor lower\u2011index bins when priorities are equal.\n    epsilon : float, optional\n        Small constant added to slack to avoid division by zero.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin.  Higher scores indicate more desirable bins.\n        Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # Feasible bins: capacity is enough to accommodate the item\n    feasible = caps >= (item - tolerance)\n\n    # Default priorities: -inf for infeasible bins\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # Slack after placing the item (non\u2011negative)\n    slack = caps[feasible] - item\n    slack = np.maximum(slack, 0.0)\n\n    # Bias toward tight fits: 1/(slack + epsilon)\n    bias = 1.0 / (slack + epsilon)\n\n    # Weight bias by the fraction of feasible bins\n    feasible_frac = feasible.sum() / n_bins\n    weighted_bias = feasible_frac * bias\n\n    # Random diversification factor (0 to 1)\n    rand = np.random.rand(n_bins)\n\n    # Indices of feasible bins (used for tie\u2011breaking)\n    idx = np.nonzero(feasible)[0]\n\n    # Combine weighted bias, random factor, and tie\u2011breaker\n    priorities[feasible] = weighted_bias * rand[feasible] - idx * tie_breaker\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    epsilon: float = 1e-12,\n    tie_breaker: float = 1e-12,\n    random_state: Optional[np.random.Generator] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for the online Bin Packing Problem (v2).\n\n    Computes a priority score for each currently open bin. Higher scores\n    indicate a more desirable bin for placing the incoming item.\n\n    The scoring favours:\n      * Feasibility (bin must have enough remaining capacity).\n      * Exact fits (small slack after insertion).\n      * Larger fraction of the bin's capacity being utilized by the item.\n      * Tiny random noise (seeded per bin) to break pathological ties.\n      * Deterministic tie\u2011breaker based on bin index.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of open bins.\n    tolerance : float, optional\n        Numerical tolerance for feasibility check (default 1e-12).\n    epsilon : float, optional\n        Small constant to avoid division by zero (default 1e-12).\n    tie_breaker : float, optional\n        Weight for deterministic index tie\u2011breaker (default 1e-12).\n    random_state : np.random.Generator, optional\n        Random generator for reproducibility. If None, a default generator\n        is created.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # Ensure we have a random generator.\n    rng = random_state if random_state is not None else np.random.default_rng()\n\n    # Convert capacities to a 1\u2011D float array.\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Determine feasibility.\n    feasible = caps >= (item - tolerance)\n\n    # Initialise scores with -inf for infeasible bins.\n    scores = np.full(n_bins, -np.inf, dtype=float)\n\n    # Early exit if no feasible bin exists.\n    if not np.any(feasible):\n        return scores\n\n    # Compute slack after insertion (clip negative values to zero).\n    slack = np.maximum(caps - item, 0.0)\n\n    # Bias favouring tight fits.\n    bias = 1.0 / (slack + epsilon)\n\n    # Fraction of the bin's capacity that the item would occupy.\n    # Guard against division by zero using epsilon.\n    cap_denominator = np.maximum(caps, epsilon)\n    fill_fraction = np.zeros_like(caps)\n    fill_fraction[feasible] = item / cap_denominator[feasible]\n\n    # Base score: bias weighted by how much of the bin is filled.\n    base_score = bias * fill_fraction\n\n    # Tiny random noise to diversify decisions (scaled by epsilon).\n    random_noise = rng.random(n_bins) * epsilon\n\n    # Deterministic tie\u2011breaker: lower index gets a slight advantage.\n    idx_factor = np.arange(n_bins, dtype=float) * tie_breaker\n\n    # Final score for feasible bins.\n    scores[feasible] = base_score[feasible] + random_noise[feasible] - idx_factor[feasible]\n\n    return scores\n\n[Reflection]\nPrioritize feasible tight fits, weight by fill\u2011fraction, add tiny random noise, break ties by index, normalize component weights.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}