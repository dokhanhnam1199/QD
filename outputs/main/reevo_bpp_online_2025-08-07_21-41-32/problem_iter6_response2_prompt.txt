{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    bin_ages: Optional[np.ndarray] = None,\n    temperature: float = 1.0,\n    lookahead_items: Optional[np.ndarray] = None,\n    random_state: Optional[int] = None,\n) -> np.ndarray:\n    \"\"\"\n    Compute a priority score for each bin in an online bin\u2011packing setting.\n\n    The heuristic blends an exact\u2011fit bias with a worst\u2011fit component,\n    optionally incorporates look\u2011ahead information and bin (age) information,\n    and finally applies a temperature\u2011scaled exponential transformation to\n    encourage exploration. Infeasible bins receive a score of -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n    bin_ages : np.ndarray, optional\n        1\u2011D array (same length as ``bins_remain_cap``) indicating the age of\n        each bin (e.g., number of items already placed). Older bins receive a\n        small boost to encourage closing them.\n    temperature : float, default 1.0\n        Controls the softness of the exponential scaling. Must be > 0.\n        Lower values make the algorithm greedier.\n    lookahead_items : np.ndarray, optional\n        Array of sizes of upcoming items. A bin that can still accommodate many\n        look\u2011ahead items receives a boost.\n    random_state : int, optional\n        Seed for the internal RNG used for tie\u2011breaking noise.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher is better). Infeasible bins have -inf.\n    \"\"\"\n    eps = 1e-12  # tiny epsilon to avoid division by zero\n\n    # Guard temperature\n    temperature = max(temperature, eps)\n\n    # Prepare capacities\n    caps = np.asarray(bins_remain_cap, dtype=float).copy()\n    n_bins = caps.size\n\n    # Initialise priorities with -inf (infeasible by default)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    # Feasibility mask\n    feasible = caps >= item\n    if not np.any(feasible):\n        return priorities  # nothing fits\n\n    # ------------------------------------------------------------------\n    # 1. Core exact\u2011fit / worst\u2011fit scores\n    # ------------------------------------------------------------------\n    slack = caps - item                     # remaining space after placement\n    slack_feas = slack[feasible]\n\n    # Exact\u2011fit: prefers tiny slack (i.e., tight fit)\n    exact_fit = 1.0 / (slack_feas + eps)    # larger when waste is small\n\n    # Worst\u2011fit: prefers large slack (i.e., keep space for future large items)\n    worst_fit = slack_feas / (np.max(caps) + eps)  # normalized to [0, 1]\n\n    # Blend them (weights sum to 1)\n    w_exact = 0.6\n    w_worst = 0.4\n    core_score = w_exact * exact_fit + w_worst * worst_fit\n\n    # ------------------------------------------------------------------\n    # 2. Optional look\u2011ahead boost\n    # ------------------------------------------------------------------\n    if lookahead_items is not None and lookahead_items.size > 0:\n        lookahead = np.asarray(lookahead_items, dtype=float)\n\n        # Boolean matrix: (n_feasible, n_lookahead) \u2013 True if lookahead item fits\n        fits = lookahead[None, :] <= slack_feas[:, None]\n        # Fraction of look\u2011ahead items that could still be placed after this item\n        lookahead_frac = fits.mean(axis=1)  # in [0, 1]\n\n        lookahead_weight = 0.3\n        core_score *= (1.0 + lookahead_weight * lookahead_frac)\n\n    # ------------------------------------------------------------------\n    # 3. Optional bin\u2011age boost\n    # ------------------------------------------------------------------\n    if bin_ages is not None:\n        ages = np.asarray(bin_ages, dtype=float)\n        if ages.shape != caps.shape:\n            raise ValueError(\"bin_ages must have the same shape as bins_remain_cap\")\n        # Normalise ages to [0, 1]\n        age_norm = ages / (np.max(ages) + eps)\n        age_weight = 0.2\n        age_factor = 1.0 + age_weight * age_norm\n        core_score *= age_factor[feasible]\n\n    # ------------------------------------------------------------------\n    # 4. Temperature\u2011scaled exponential scaling (softmax\u2011like)\n    # ------------------------------------------------------------------\n    exp_score = np.exp(core_score / temperature)\n\n    # ------------------------------------------------------------------\n    # 5. Tiny random tie\u2011breaker for numerical stability / exploration\n    # ------------------------------------------------------------------\n    rng = np.random.default_rng(random_state)\n    tie_eps = 1e-8\n    exp_score += rng.random(exp_score.shape) * tie_eps\n\n    # Fill the priorities array for feasible bins\n    priorities[feasible] = exp_score\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    tolerance: float = 1e-12,\n    tie_breaker: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Exact\u2011Fit\u2011First priority function for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacities of the open bins.\n    tolerance : float, optional\n        Numerical tolerance for feasibility and exact\u2011fit detection.\n        Bins whose remaining capacity is at least ``item - tolerance`` are considered\n        feasible.  A leftover smaller than ``tolerance`` is treated as an exact fit.\n    tie_breaker : float, optional\n        Tiny value used to break ties deterministically in favour of lower\u2011indexed bins.\n        Must be sufficiently smaller than the smallest possible leftover.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).\n        Higher values indicate more attractive bins.  Infeasible bins receive\n        ``-np.inf``.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n\n    # Feasibility mask\n    feasible = caps >= (item - tolerance)\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bin; return all -inf\n        return priorities\n\n    # Leftover capacity for feasible bins (ensure non\u2011negative)\n    leftover = np.clip(caps[feasible] - item, 0.0, None)\n\n    # Indices of feasible bins (for deterministic tie\u2011breaking)\n    idx = np.where(feasible)[0]\n\n    # Exact\u2011Fit\u2011First: smaller leftover \u2192 higher priority\n    # Use negative leftover so that exact fit (leftover == 0) has the highest raw score.\n    priorities[feasible] = -leftover - idx * tie_breaker\n\n    return priorities\n\n[Reflection]\nPrefer exact\u2011fit, simple linear scoring; avoid exponential scaling and noisy look\u2011ahead; deterministic tie\u2011breakers; keep computation cheap.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}