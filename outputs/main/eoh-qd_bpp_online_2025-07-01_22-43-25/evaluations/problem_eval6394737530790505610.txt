def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on the remaining capacity, favoring bins with remaining capacity close to the item size but avoiding bins that would become too full or too empty.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      score = 1.0 / abs(cap - item + 0.00001) # Prefer bins close to item size

      if cap - item < item/2:
        score = score * 0.5 #Reduce priority of bins that will become too full after packing.
      if cap - item > item * 2:
        score = score * 0.5 # Reduce priority if remaining space is too big after packing

      priority.append(score)
    else:
      priority.append(0)
  return priority
