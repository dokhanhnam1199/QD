def priority_v2(item, bins_remain_cap):
  """
  {This algorithm calculates the priority score for each bin based on the remaining capacity of the bin and the item size, favoring bins that can accommodate the item with minimal wasted space and penalizing bins that cannot fit the item.}
  """
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      priorities.append(1.0 / (cap - item + 0.0001))  # Higher priority for bins with smaller wasted space
    else:
      priorities.append(-1000.0)  # Very low priority for bins that cannot fit the item
  return priority
