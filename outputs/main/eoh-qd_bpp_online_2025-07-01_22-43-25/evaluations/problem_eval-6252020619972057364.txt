def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on a combination of remaining capacity and wasted space after packing the item, favoring bins that can accommodate the item with minimal wasted space.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      priority.append(1.0 / (wasted_space + 0.0001))  # Avoid division by zero; smaller wasted space, higher priority
    else:
      priority.append(-1.0)  # Assign a negative priority if the item doesn't fit

  return priority
