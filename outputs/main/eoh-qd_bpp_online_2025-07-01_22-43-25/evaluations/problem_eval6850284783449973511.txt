def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority score for each bin based on a combination of remaining capacity and waste, favoring bins that can accommodate the item with minimal wasted space and avoiding near-full bins.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      if cap < 0.2 * item:
        priority.append(-1) # Avoid bins nearing full capacity that barely fit the item
      else:
        priority.append(1 / (waste + 0.0001))  # Favor bins with less waste
    else:
      priority.append(-1) # Not feasible
  return priority
