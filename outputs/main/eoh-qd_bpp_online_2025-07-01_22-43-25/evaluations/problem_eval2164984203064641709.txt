def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on remaining capacity, penalizing bins that would become too full or too empty after packing the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_ratio = (item) / 100  #scale down, assume bin size is 100
      rem_cap = cap - item
      empty_ratio = (rem_cap) / 100 #scale down, assume bin size is 100
      
      # Heuristic to penalize bins that become too full or too empty
      score = 1 - abs(fill_ratio - 0.5) - abs(empty_ratio - 0.5)
      priority.append(score)
    else:
      priority.append(-1) # Assign lowest priority if item doesn't fit
  return priority
