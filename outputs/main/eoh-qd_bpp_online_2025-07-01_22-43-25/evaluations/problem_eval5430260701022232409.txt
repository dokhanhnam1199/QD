def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin based on a combination of remaining capacity and wasted space if the item is placed in the bin, favoring bins with closer remaining capacity to the item size while avoiding excessive wasted space.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            # Prioritize bins with remaining capacity close to the item size, but penalize high wasted space
            score = (1 / (wasted_space + 0.1)) * (1 + (item/cap)) # Avoid division by zero, and favor bins where the item fills a larger proportion of the bin
        else:
            score = -1  # Invalid bin
        priority.append(score)
    return priority
