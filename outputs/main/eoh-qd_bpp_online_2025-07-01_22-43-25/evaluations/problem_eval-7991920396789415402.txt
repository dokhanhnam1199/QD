def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on how well the item fits, favoring bins that would be filled more completely and avoiding bins where the item would leave very little space.}"""
  priorities = []
  for cap in bins_remain_cap:
    if item <= cap:
      fill_ratio = item / cap
      remaining_ratio = (cap - item) / cap

      # Give higher priority to bins that the item fills well
      priority = fill_ratio * 2.0  # Favor better fills

      # Penalize bins where the item would leave very little space. Prevents bad fits
      if remaining_ratio < 0.1:  # Adjust 0.1 threshold as needed
        priority -= 0.5

      priorities.append(priority)
    else:
      priorities.append(-1.0)  # Impossible fit receives low priority.
  return priority
