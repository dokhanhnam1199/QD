def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a combination of remaining capacity and the wasted space after packing the item, favoring bins where the item fits well without excessive waste.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            priority = cap + (1.0 / (wasted_space + 0.0001))  # Avoid division by zero
        else:
            priority = -1  # Bin cannot fit the item
        priorities.append(priority)
    return priority
