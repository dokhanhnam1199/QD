{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Exact Fit First strategy.\n\n    The Exact Fit First strategy prioritizes bins that have a remaining capacity\n    exactly equal to the item's size. If no such bin exists, it prioritizes\n    bins that have the smallest remaining capacity greater than or equal to\n    the item's size. This aims to minimize wasted space by finding the tightest fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate higher priority.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the difference between remaining capacity and item size for bins that can fit\n    differences = bins_remain_cap[can_fit_mask] - item\n\n    # Exact Fit: Assign a high priority if the remaining capacity exactly matches the item size\n    exact_fit_mask = (differences == 0)\n    priorities[can_fit_mask][exact_fit_mask] = 1000.0  # High priority for exact fit\n\n    # Approximate Fit: For bins that don't offer an exact fit, prioritize those with the smallest positive difference.\n    # We can achieve this by inverting the difference (larger difference becomes smaller priority)\n    # and adding a small offset to distinguish them from exact fits.\n    non_exact_fit_mask = ~exact_fit_mask\n    if np.any(can_fit_mask[can_fit_mask][non_exact_fit_mask]):\n        # Calculate a score based on how \"close\" the fit is.\n        # Smaller positive difference is better. We can use 1/(difference + epsilon)\n        # or simply a large negative number for differences to sort them.\n        # A simpler approach is to use a value that decreases as the difference increases,\n        # but still higher than the non-fitting bins (which have priority 0).\n        # We can use a large negative number for difference, and then \"invert\" it\n        # to make smaller positive differences have higher priority.\n\n        # Example: If item is 5 and capacities are [10, 7, 12, 8]\n        # Can fit: [True, True, True, True]\n        # Differences: [5, 2, 7, 3]\n        # Exact fit: None\n        # We want to prioritize bins with differences [2, 3, 5, 7].\n        # Smallest positive difference should have highest priority among non-exact fits.\n\n        # A simple scoring mechanism: assign a score that is inversely proportional to the difference.\n        # To make smaller differences have higher priority, we can use a formula like:\n        # score = MAX_PRIORITY - difference\n        # where MAX_PRIORITY is a value larger than the exact fit priority, or a value\n        # that allows for differentiation between non-exact fits.\n        # Here, we use a scoring based on the inverse of the difference, scaled.\n        # Add a small epsilon to avoid division by zero if the difference were zero (though handled by exact_fit_mask)\n\n        # Assign priority for non-exact fits, giving higher priority to smaller remaining capacity\n        # The values should be less than the exact fit priority (1000)\n        relevant_indices = np.where(can_fit_mask)[0]\n        relevant_non_exact_indices = np.where(can_fit_mask & ~exact_fit_mask)[0]\n\n        if len(relevant_non_exact_indices) > 0:\n            # Assign priorities inversely proportional to the remaining capacity that is greater than item size.\n            # Or, more directly, proportional to the negative of the difference, but this would give\n            # negative priorities which might be confusing.\n            # A better approach: make priority decrease as the difference increases.\n            # A score like `1 / (difference + 1e-9)` would work, but then we need to scale it.\n            # Alternatively, sort the differences and assign decreasing priorities.\n            \n            # Let's assign priority such that smaller difference means higher priority among non-exact fits.\n            # A simple way is to assign a score like `1000 - difference`. This makes smaller differences\n            # closer to 1000, and larger differences further away, while still below the exact fit.\n            \n            # Get the differences for the non-exact fits\n            non_exact_differences = bins_remain_cap[relevant_non_exact_indices] - item\n            \n            # Assign priorities. A higher value means higher priority.\n            # We want smaller `non_exact_differences` to have higher priority.\n            # So, `K - non_exact_differences` where K is a large enough constant.\n            # Let's use K = 100, so priorities range from 99 (for difference 1) down to values near 0.\n            priorities[relevant_non_exact_indices] = 100 - non_exact_differences\n\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using First Fit strategy.\n\n    In this First Fit strategy, we prioritize bins that can accommodate the item.\n    Among those that can, we prefer bins that will have the least remaining capacity\n    after placing the item (to try and fill bins as much as possible). If multiple\n    bins offer the same \"tightest fit\", the one with the lower index is prioritized.\n    Bins that cannot accommodate the item are given a priority of 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item\n    suitable_bins_mask = bins_remain_cap >= item\n\n    # Calculate the remaining capacity if the item is placed in a suitable bin\n    remaining_caps_if_placed = bins_remain_cap[suitable_bins_mask] - item\n\n    # We want to prioritize bins that result in the smallest remaining capacity\n    # This means we want the smallest (remaining_caps_if_placed) to have the highest priority.\n    # To achieve this with maximization, we can use a negative of the remaining capacity,\n    # or a large number minus the remaining capacity. Let's use a large number minus\n    # the remaining capacity to ensure positive priorities for suitable bins.\n    # We also need to ensure that bins that CANNOT fit the item get a priority of 0.\n\n    # Assign a priority based on the \"tightest fit\" for suitable bins\n    # A higher score indicates a better fit (less remaining capacity)\n    # We can use 1 / (remaining_cap + 1) to give higher priority to smaller remaining caps,\n    # ensuring that the denominator is not zero.\n    # Adding a small epsilon to the remaining capacity before division avoids division by zero\n    # and also ensures that bins with exactly 0 remaining capacity after placement are prioritized.\n    epsilon = 1e-9\n    priorities[suitable_bins_mask] = 1.0 / (remaining_caps_if_placed + epsilon)\n\n    # To implement the \"first fit\" aspect (preferring lower index bins for ties),\n    # we can introduce a small penalty based on the bin index.\n    # A lower index should have a slightly higher priority if all else is equal.\n    # We can subtract a small value proportional to the index from the priority.\n    # Let's make this penalty small enough not to override the fit priority.\n    bin_indices = np.arange(len(bins_remain_cap))\n    priorities[suitable_bins_mask] -= bin_indices[suitable_bins_mask] * 1e-7 # Small penalty for higher index\n\n    return priorities\n\n[Reflection]\nPrioritize tightness, use simple scoring, and break ties with bin index.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}