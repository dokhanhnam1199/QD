```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.

    The priority is calculated based on the "fit" of the item into the bin.
    A better fit (less remaining capacity after packing) results in a higher priority.
    The Softmax function is used to convert these "fits" into probabilities (priorities).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate potential remaining capacity if the item is placed in each bin
    potential_remaining_caps = bins_remain_cap - item

    # We want bins with smaller remaining capacity to have higher priority.
    # So, we'll invert the potential remaining capacities.
    # Adding a small epsilon to avoid division by zero or log of zero if all remaining caps are exactly the item size.
    epsilon = 1e-9
    inverted_fits = 1.0 / (potential_remaining_caps + epsilon)

    # Apply the softmax function to get priorities.
    # Softmax makes larger values (better fits) more dominant.
    # To make smaller remaining capacities (better fits) more dominant, we use the inverted fits.
    # The formula for softmax is exp(x_i) / sum(exp(x_j)).
    exp_fits = np.exp(inverted_fits)
    priorities = exp_fits / np.sum(exp_fits)

    # Ensure that we only assign positive priorities to bins that can actually accommodate the item.
    # Bins with remaining capacity less than the item size should have a priority of 0.
    priorities[bins_remain_cap < item] = 0

    return priorities
```
