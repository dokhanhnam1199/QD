```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a refined Best Fit strategy.

    This strategy prioritizes bins that can fit the item. Among those that can fit,
    it assigns higher priority to bins that result in a smaller remaining capacity
    after the item is placed. This is achieved by assigning a score that is the
    negative of the remaining capacity. Bins that cannot fit the item are assigned
    a priority of 0, effectively making them least preferable.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority (better fit).
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that have enough capacity for the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity for bins that can fit the item
    # For bins that can fit, the priority is the negative of the remaining capacity.
    # This is because we want to minimize the remaining capacity (best fit).
    # A larger negative number (meaning a smaller remaining capacity) will thus
    # have a higher priority score.
    potential_remaining_capacities = bins_remain_cap - item
    priorities[can_fit_mask] = -potential_remaining_capacities[can_fit_mask]

    return priorities
```
