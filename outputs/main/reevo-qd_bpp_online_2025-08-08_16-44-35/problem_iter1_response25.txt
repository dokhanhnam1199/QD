```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance strategy.

    The Inverse Distance strategy prioritizes bins that are a "closer fit" to the item.
    A closer fit means that after placing the item, the remaining capacity is as small
    as possible, without being negative. The priority is inversely proportional to
    this "gap" (remaining capacity after placing the item).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item is placed in each bin
    potential_remaining_caps = bins_remain_cap - item

    # We only consider bins where the item can actually fit
    # For bins where it doesn't fit, the priority should be effectively zero.
    # We use a small epsilon to avoid division by zero if a perfect fit occurs.
    epsilon = 1e-9

    # Calculate the "gap" which is the remaining capacity after placing the item.
    # If potential_remaining_caps is negative, it means the item doesn't fit,
    # so we want to assign a very low priority (or zero). We can do this by
    # assigning a very large "gap" to these bins.
    gaps = np.where(potential_remaining_caps >= 0, potential_remaining_caps, np.inf)

    # The priority is inversely proportional to the gap.
    # A smaller gap (closer fit) should result in a higher priority.
    # We add epsilon to the denominator to prevent division by zero for perfect fits.
    priorities = 1.0 / (gaps + epsilon)

    # For bins where the item does not fit (gaps = inf), the priority will be 0.
    # This is handled by the division by infinity.

    return priorities
```
