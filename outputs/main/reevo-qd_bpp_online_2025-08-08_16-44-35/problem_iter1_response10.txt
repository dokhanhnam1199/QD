```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using First Fit strategy.

    The First Fit strategy prioritizes bins that have just enough capacity to fit the item,
    then those with more capacity, to minimize wasted space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the difference between remaining capacity and item size
    # Only consider bins where the item fits
    fitting_bins_mask = bins_remain_cap >= item
    differences = bins_remain_cap[fitting_bins_mask] - item

    # We want to prioritize bins where the difference is smallest (i.e., a tight fit)
    # Assign a high priority to these bins. For bins that don't fit, priority is 0.
    # To make smaller differences have higher priority, we can invert the differences
    # and scale them. Adding 1 to the difference before inverting ensures that
    # bins that fit perfectly (difference is 0) get a high priority.
    # A small epsilon is added to avoid division by zero if differences could be zero.
    epsilon = 1e-9
    priorities[fitting_bins_mask] = 1.0 / (differences + epsilon)

    # Normalize priorities to have a more consistent range, although not strictly necessary for selection
    # if len(priorities[fitting_bins_mask]) > 0:
    #     max_priority = np.max(priorities[fitting_bins_mask])
    #     if max_priority > 0:
    #         priorities[fitting_bins_mask] /= max_priority

    return priorities
```
