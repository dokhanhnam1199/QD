```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    Exact Fit First prioritizes bins that can accommodate the item with the *least* remaining capacity
    after the item is placed. This aims to "fill up" bins as much as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority. Bins that cannot fit the item get a score of 0.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    
    # Calculate the remaining capacity if the item is placed in a bin
    # We want to minimize remaining capacity after placement, so we maximize the negative of it.
    # Higher priority is given to bins that have the smallest remaining capacity *after* the item is placed.
    remaining_after_placement = bins_remain_cap - item
    
    # Assign priority: negative of remaining capacity after placement for fitting bins.
    # This way, a smaller remaining capacity (which is good for Exact Fit) becomes a larger (less negative) number,
    # or closer to zero if it becomes a perfect fit.
    # We use a large negative number for bins that don't fit, effectively giving them zero priority.
    priorities[can_fit_mask] = -remaining_after_placement[can_fit_mask]
    
    # To further refine "Exact Fit", we can give a bonus to perfect fits.
    # Let's give a small positive bonus (e.g., 1.0) to bins that result in exactly zero remaining capacity.
    # This ensures that among bins with the same *minimal* remaining capacity, the perfect fit is chosen.
    perfect_fit_mask = np.isclose(remaining_after_placement, 0, atol=1e-9) & can_fit_mask
    priorities[perfect_fit_mask] += 1.0
    
    return priorities
```
