```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First strategy.

    The Exact Fit First strategy prioritizes bins that have a remaining capacity
    exactly equal to the item's size. If no such bin exists, it prioritizes
    bins that have the smallest remaining capacity greater than or equal to
    the item's size. This aims to minimize wasted space by finding the tightest fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate the difference between remaining capacity and item size for bins that can fit
    differences = bins_remain_cap[can_fit_mask] - item

    # Exact Fit: Assign a high priority if the remaining capacity exactly matches the item size
    exact_fit_mask = (differences == 0)
    priorities[can_fit_mask][exact_fit_mask] = 1000.0  # High priority for exact fit

    # Approximate Fit: For bins that don't offer an exact fit, prioritize those with the smallest positive difference.
    # We can achieve this by inverting the difference (larger difference becomes smaller priority)
    # and adding a small offset to distinguish them from exact fits.
    non_exact_fit_mask = ~exact_fit_mask
    if np.any(can_fit_mask[can_fit_mask][non_exact_fit_mask]):
        # Calculate a score based on how "close" the fit is.
        # Smaller positive difference is better. We can use 1/(difference + epsilon)
        # or simply a large negative number for differences to sort them.
        # A simpler approach is to use a value that decreases as the difference increases,
        # but still higher than the non-fitting bins (which have priority 0).
        # We can use a large negative number for difference, and then "invert" it
        # to make smaller positive differences have higher priority.

        # Example: If item is 5 and capacities are [10, 7, 12, 8]
        # Can fit: [True, True, True, True]
        # Differences: [5, 2, 7, 3]
        # Exact fit: None
        # We want to prioritize bins with differences [2, 3, 5, 7].
        # Smallest positive difference should have highest priority among non-exact fits.

        # A simple scoring mechanism: assign a score that is inversely proportional to the difference.
        # To make smaller differences have higher priority, we can use a formula like:
        # score = MAX_PRIORITY - difference
        # where MAX_PRIORITY is a value larger than the exact fit priority, or a value
        # that allows for differentiation between non-exact fits.
        # Here, we use a scoring based on the inverse of the difference, scaled.
        # Add a small epsilon to avoid division by zero if the difference were zero (though handled by exact_fit_mask)

        # Assign priority for non-exact fits, giving higher priority to smaller remaining capacity
        # The values should be less than the exact fit priority (1000)
        relevant_indices = np.where(can_fit_mask)[0]
        relevant_non_exact_indices = np.where(can_fit_mask & ~exact_fit_mask)[0]

        if len(relevant_non_exact_indices) > 0:
            # Assign priorities inversely proportional to the remaining capacity that is greater than item size.
            # Or, more directly, proportional to the negative of the difference, but this would give
            # negative priorities which might be confusing.
            # A better approach: make priority decrease as the difference increases.
            # A score like `1 / (difference + 1e-9)` would work, but then we need to scale it.
            # Alternatively, sort the differences and assign decreasing priorities.
            
            # Let's assign priority such that smaller difference means higher priority among non-exact fits.
            # A simple way is to assign a score like `1000 - difference`. This makes smaller differences
            # closer to 1000, and larger differences further away, while still below the exact fit.
            
            # Get the differences for the non-exact fits
            non_exact_differences = bins_remain_cap[relevant_non_exact_indices] - item
            
            # Assign priorities. A higher value means higher priority.
            # We want smaller `non_exact_differences` to have higher priority.
            # So, `K - non_exact_differences` where K is a large enough constant.
            # Let's use K = 100, so priorities range from 99 (for difference 1) down to values near 0.
            priorities[relevant_non_exact_indices] = 100 - non_exact_differences


    return priorities
```
