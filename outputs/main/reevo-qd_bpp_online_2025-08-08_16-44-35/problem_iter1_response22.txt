```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    In Worst Fit, we want to place the item in the bin that has the most remaining capacity
    such that it can still accommodate the item. This leaves larger gaps in other bins for
    potentially larger future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority of 0.
    """
    # Initialize priorities to zeros
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, assign their remaining capacity as the priority.
    # This ensures that bins with more remaining capacity get higher priority
    # under the Worst Fit strategy.
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]

    return priorities
```
