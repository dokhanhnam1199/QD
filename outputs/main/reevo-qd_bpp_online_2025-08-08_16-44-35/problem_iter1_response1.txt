```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit.

    The Best Fit strategy aims to place the item into the bin where it fits
    most snugly, leaving the smallest remaining capacity. This heuristic tries
    to minimize wasted space in each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher priority means a better fit. Bins that cannot accommodate the
        item are given a priority of 0.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the remaining capacity if the item is placed in each bin
    potential_remaining_capacities = bins_remain_cap - item

    # Only consider bins that have enough capacity for the item
    # For these bins, the priority is the *negative* of the remaining capacity.
    # This is because we want to minimize the remaining capacity (best fit).
    # A larger negative number (smaller remaining capacity) will have a higher
    # priority score.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = -potential_remaining_capacities[fit_mask]

    return priorities
```
