```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an epsilon-greedy strategy.

    In this strategy, with probability epsilon, we choose a random bin that can
    accommodate the item. With probability (1 - epsilon), we choose the bin that
    minimizes the remaining capacity after placing the item (best fit approach).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    epsilon = 0.2  # Probability of choosing a random bin

    priorities = np.zeros_like(bins_remain_cap)
    
    # Identify bins that can accommodate the item
    suitable_bins_indices = np.where(bins_remain_cap >= item)[0]
    
    if len(suitable_bins_indices) == 0:
        # No bin can accommodate the item, return all zeros (or handle as error)
        return priorities

    if np.random.rand() < epsilon:
        # Epsilon-greedy: choose a random suitable bin
        chosen_bin_index = np.random.choice(suitable_bins_indices)
        priorities[chosen_bin_index] = 1.0  # Assign a high priority to the chosen bin
    else:
        # Best fit: choose the bin that minimizes remaining capacity
        # Calculate remaining capacities if the item is placed in each suitable bin
        remaining_capacities_after_placement = bins_remain_cap[suitable_bins_indices] - item
        
        # Find the index of the bin that results in the smallest remaining capacity
        # This corresponds to the bin that fits the item most snugly.
        best_fit_bin_local_index = np.argmin(remaining_capacities_after_placement)
        chosen_bin_index = suitable_bins_indices[best_fit_bin_local_index]
        
        priorities[chosen_bin_index] = 1.0  # Assign a high priority to the chosen bin

    return priorities
```
