```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    In Worst Fit, we want to place the item in the bin that has the most remaining capacity.
    This strategy aims to leave larger remaining spaces in other bins for potentially larger future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority (i.e., more remaining capacity).
    """
    # For Worst Fit, the priority is directly proportional to the remaining capacity.
    # We can simply return the remaining capacities.
    # We should only consider bins that can actually fit the item.
    priorities = np.zeros_like(bins_remain_cap)
    
    # Create a boolean mask for bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item
    
    # For bins that can fit the item, their priority is their remaining capacity.
    # For bins that cannot fit, their priority is 0 (or effectively ignored).
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]
    
    return priorities
```
