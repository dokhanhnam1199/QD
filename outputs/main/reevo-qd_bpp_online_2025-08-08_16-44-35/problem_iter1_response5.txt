```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance strategy.

    The Inverse Distance strategy prioritizes bins that have a remaining capacity
    closely matching the item's size. A bin with remaining capacity `c` will
    receive a higher priority if `c - item` is close to zero.
    This is implemented by calculating the inverse of `abs(c - item)` for
    bins where `c >= item`. Bins with insufficient capacity will have a priority of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can accommodate the item
    available_bins_mask = bins_remain_cap >= item
    
    # Calculate the difference in capacity for available bins
    capacity_diff = bins_remain_cap[available_bins_mask] - item
    
    # Calculate inverse distance. Add a small epsilon to avoid division by zero
    # for bins that perfectly fit the item.
    epsilon = 1e-9
    priorities[available_bins_mask] = 1.0 / (np.abs(capacity_diff) + epsilon)
    
    return priorities
```
