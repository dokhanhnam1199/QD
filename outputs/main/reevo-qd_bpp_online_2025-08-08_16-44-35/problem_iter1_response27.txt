```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit strategy.

    In Random Fit, the algorithm iterates through the available bins and assigns
    a priority to each bin. For the online bin packing problem, a common
    heuristic is to prioritize bins that have *just enough* capacity to fit the item,
    aiming to leave larger gaps in other bins for future, potentially larger items.
    However, for a "Random Fit" strategy, the primary idea is to introduce
    randomness into the selection process.

    Here, we implement a strategy that gives higher priority to bins that can fit
    the item, and among those, assigns random priorities. This still allows for
    some degree of exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value for bins that cannot fit the item
    # and to 0 for bins that can fit the item.
    priorities = np.full_like(bins_remain_cap, -float('inf'))

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item
    priorities[can_fit_mask] = 0.0

    # Add a random component to the priority of bins that can fit the item.
    # This is the core of the "Random Fit" idea. We generate random numbers
    # and add them to the base priority (which is 0 for bins that fit).
    # The higher the random number, the more likely that bin is to be chosen.
    # We scale the random numbers to avoid overpowering the fitting heuristic if
    # one were to be added later. For pure random fit, this random component
    # is sufficient to drive the selection.
    random_scores = np.random.rand(len(bins_remain_cap))
    priorities[can_fit_mask] += random_scores[can_fit_mask]

    return priorities
```
