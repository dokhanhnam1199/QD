```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit strategy.

    The Almost Full Fit (AFF) strategy prioritizes bins that are almost full.
    It selects the bin with the smallest remaining capacity that can still
    accommodate the item, encouraging fuller bins to be used first, which
    can lead to fewer bins being opened overall.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority.
    """
    # Initialize priorities to a very low value (effectively -infinity for maximization)
    # This ensures that bins that cannot fit the item receive no priority.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, assign a priority based on their remaining capacity.
    # The strategy is to prioritize bins that are *almost full*.
    # This means we want to select bins with the smallest positive remaining capacity
    # after placing the item.
    # A higher priority should be given to bins with *less* remaining capacity
    # after the item is placed, but only if they can still accommodate it.
    #
    # The remaining capacity after placing the item is `bins_remain_cap - item`.
    # To give higher priority to smaller remaining capacities, we can use the
    # negative of the remaining capacity.
    #
    # Example:
    # If bin_remain_cap = [5, 3, 7] and item = 2:
    #   - Bin 0: can_fit = True, remaining_after_item = 3. Priority: -3
    #   - Bin 1: can_fit = True, remaining_after_item = 1. Priority: -1 (HIGHER PRIORITY)
    #   - Bin 2: can_fit = True, remaining_after_item = 5. Priority: -5
    #
    # So, the priority is `-(bins_remain_cap - item)`.

    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    # To further refine AFF, we might want to break ties.
    # A common tie-breaking mechanism for bin packing is to prefer bins that have
    # been used for longer, or simply the first encountered bin.
    # In this implementation, numpy's default behavior will handle ties by
    # returning the indices in the order they appear, which implicitly favors
    # earlier bins in case of identical priority scores.

    return priorities
```
