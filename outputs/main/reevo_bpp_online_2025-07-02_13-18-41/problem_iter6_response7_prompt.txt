{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Initialize with a small negative value for bins that can't fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Calculate remaining capacity after placing item.\n    remaining_capacities = bins_remain_cap - item\n\n    # Define the available bins (bins where item fits).\n    available_bins = ~infeasible_bins\n\n    # Prioritize bins that are a good fit (not too much waste, not too little space).\n    # A bin is a good fit if (remaining_capacities / item) is close to 0\n    # and item/bin_remain_cap is close to 1.\n    waste_ratio = remaining_capacities[available_bins] / bins_remain_cap[available_bins]\n    fill_ratio = item / bins_remain_cap[available_bins]\n\n    priorities[available_bins] = 1 - np.abs(waste_ratio - 0.0) - np.abs(fill_ratio - 1.0)\n\n\n    # Scale by inverse bin size to prefer filling smaller bins first.\n    priorities[available_bins] /= (bins_remain_cap[available_bins] + 0.1)\n\n    # Add small noise to break ties.\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Infeasible bins get a large negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Rule 2: Quantify \"good fit\" using relative wasted space.\n    # A good fit minimizes the *ratio* of wasted space to the item size.\n    available_bins = bins_remain_cap >= item\n    if np.any(available_bins):\n        wasted_space = bins_remain_cap[available_bins] - item\n        relative_wasted_space = wasted_space / item\n        \n        # Good fit = low relative wasted space.  Invert and scale.\n        # Add a small constant to the denominator to avoid division by zero and smooth the function.\n        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)\n\n        #Further improve good fit by considering bin occupancy, penalize bins which are empty or almost full.\n        occupancy = 1.0 - bins_remain_cap[available_bins] / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1.0 #handle edge case where max cap is zero\n        occupancy_penalty = np.abs(occupancy - 0.5) #Bins that are near half full are preferable.\n\n        priorities[available_bins] -= occupancy_penalty * 0.2\n\n    # Rule 3: Prioritize almost full bins to complete them\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1)\n    priorities[almost_full] += 10  # Give a significant bonus to almost full bins\n    \n    # Rule 4: Add some noise to break ties randomly.\n    available_bins = bins_remain_cap >= item\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Reflection]\nPrioritize relative waste, reward near-full bins, and penalize extremes in occupancy.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}