{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Infeasible bins get a very negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Rule 2: Quantify \"good fit\" using relative wasted space and bin capacity ratio.\n    available_bins = bins_remain_cap >= item\n    max_cap = np.max(bins_remain_cap) if np.any(bins_remain_cap) else 0.0  # Handle edge case where all bins are infeasible.\n\n    if np.any(available_bins):\n        wasted_space = bins_remain_cap[available_bins] - item\n        relative_wasted_space = wasted_space / (item + 1e-9)  # avoid division by zero if item is 0\n\n        # Bin capacity ratio (remaining capacity / total capacity)\n        bin_capacity_ratio = bins_remain_cap[available_bins] / max_cap if max_cap > 0 else 0.0\n\n        # Good fit = low relative wasted space and large bin capacity ratio. Invert and scale.\n        priority_good_fit = 1.0 / (0.01 + relative_wasted_space)\n        priority_capacity_ratio = bin_capacity_ratio * 0.5\n        priorities[available_bins] = priority_good_fit + priority_capacity_ratio\n\n        # Penalize bins which are empty or almost full, scaled by item size ratio\n        occupancy = 1.0 - bin_capacity_ratio\n        occupancy_penalty = np.abs(occupancy - 0.5) * (item / max_cap if max_cap > 0 else 0.0)\n        priorities[available_bins] -= occupancy_penalty * 0.2\n\n        # Reward bins approaching a target fullness (e.g., 75%), scaled by item size.\n        target_fullness = 0.75 * max_cap if max_cap > 0 else 0.0\n        target_range = 0.1 * max_cap if max_cap > 0 else 0.1  # Scale relative to maximum bin size.\n\n        remaining_after_pack = bins_remain_cap[available_bins] - item\n        target_bonus = np.exp(-((remaining_after_pack - (max_cap - target_fullness))**2) / (2 * target_range**2))\n        priorities[available_bins] += target_bonus * 0.5 * (item / max_cap if max_cap > 0 else 0.0)\n\n    # Rule 3: Prioritize almost full bins to complete them, scale based on remaining cap\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1 * max_cap if max_cap > 0 else (bins_remain_cap >= item))\n    if np.any(almost_full):\n        priorities[almost_full] += 10 * (1 - bins_remain_cap[almost_full] / max_cap if max_cap > 0 else 1) * (item / max_cap if max_cap > 0 else 0.0) #Scale by item size.\n\n    # Rule 4: Add some noise to break ties randomly, scaled by item size.\n    available_bins = bins_remain_cap >= item\n    if np.any(available_bins):\n        priorities[available_bins] += np.random.normal(0, 1e-6 * (item / max_cap if max_cap > 0 else 1), size=np.sum(available_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Infeasible bins get a very negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    available_bins = ~infeasible_bins\n\n    if np.any(available_bins):\n        # Calculate wasted space\n        wasted_space = bins_remain_cap[available_bins] - item\n        max_cap = np.max(bins_remain_cap)\n\n        # Relative Wasted Space Priority (Minimize)\n        relative_wasted_space = wasted_space / (item + 1e-9)\n        priorities[available_bins] -= relative_wasted_space * 5\n\n        # Target Fullness Reward (Target around 75% full)\n        target_fullness = 0.75 * max_cap if max_cap > 0 else 0.0\n        target_range = 0.2 * max_cap if max_cap > 0 else 0.1\n        fullness = bins_remain_cap[available_bins] - item\n        target_bonus = np.exp(-((fullness - target_fullness) ** 2) / (2 * target_range ** 2))\n        priorities[available_bins] += target_bonus * 3\n\n        # Large Gap Penalty (Scaled relative to item size)\n        large_gap_threshold = 0.6 * item\n        large_gap_penalty = (wasted_space > large_gap_threshold) * (wasted_space / max_cap) if max_cap > 0 else (wasted_space > large_gap_threshold) * wasted_space\n        priorities[available_bins] -= large_gap_penalty * 2\n\n        # Almost Full Bonus\n        almost_full_threshold = 0.1 * max_cap if max_cap > 0 else 0.1\n        almost_full_bonus = (wasted_space <= almost_full_threshold) * 7\n        priorities[available_bins] += almost_full_bonus\n\n        # Small Waste Bonus (Tight Fit)\n        small_waste_threshold = 0.2 * item\n        small_waste_bonus = (wasted_space <= small_waste_threshold) * (item / max_cap) if max_cap > 0 else (wasted_space <= small_waste_threshold) * item\n        priorities[available_bins] += small_waste_bonus * 4\n\n        # Fill Level Bonus (Avoid Empty or Too Full Bins)\n        fill_level = (max_cap - bins_remain_cap[available_bins] + item) / max_cap if max_cap > 0 else 0\n        fill_level_penalty = np.abs(fill_level - 0.7)\n        priorities[available_bins] -= fill_level_penalty * 1.5\n\n        # Reward higher occupancy\n        occupancy_bonus = fill_level\n        priorities[available_bins] += occupancy_bonus * 1\n\n    # Tie-breaking Noise\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Reflection]\nFocus on relative wasted space, target fullness, gap penalties, and direct occupancy rewards with tuned weights.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}