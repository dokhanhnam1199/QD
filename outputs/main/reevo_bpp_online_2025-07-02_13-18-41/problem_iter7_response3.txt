```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get a very negative priority.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Rule 2: Quantify "good fit" using relative wasted space.
    # A good fit minimizes the *ratio* of wasted space to the item size.
    available_bins = bins_remain_cap >= item
    if np.any(available_bins):
        wasted_space = bins_remain_cap[available_bins] - item
        relative_wasted_space = wasted_space / (item + 1e-9) # avoid division by zero if item is 0

        # Good fit = low relative wasted space.  Invert and scale.
        # Add a small constant to the denominator to avoid division by zero and smooth the function.
        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)

        # Further improve good fit by considering bin occupancy, penalize bins which are empty or almost full.
        bin_size = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1.0
        occupancy = 1.0 - bins_remain_cap[available_bins] / bin_size
        occupancy_penalty = np.abs(occupancy - 0.5) #Bins that are near half full are preferable.

        priorities[available_bins] -= occupancy_penalty * 0.2

        #Reward bins approaching a target fullness (e.g., 75%)
        target_fullness = 0.75 * bin_size
        target_range = 0.1 * bin_size
        
        target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness)**2) / (2 * target_range**2))
        priorities[available_bins] += target_bonus * 0.5


    # Rule 3: Prioritize almost full bins to complete them, but make it relative to bin size.
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1 * bin_size)
    priorities[almost_full] += 10  # Give a significant bonus to almost full bins

    # Rule 4: Add some noise to break ties randomly.
    available_bins = bins_remain_cap >= item
    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    # Adaptive penalty based on item and bin size
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            # Fragmentation penalty
            fragmentation_penalty = (item / bin_size) * (bins_remain_cap[i] - item) / bin_size
            priorities[i] -= fragmentation_penalty * 0.1 # Scale down penalty for sensitivity.

            # Bonus for near perfect fit
            near_perfect_fit_threshold = 0.05 * bin_size
            if abs(bins_remain_cap[i] - item) <= near_perfect_fit_threshold:
              priorities[i] += 2 # small bonus

    return priorities
```
