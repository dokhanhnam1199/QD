```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get a very negative priority.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Rule 2: Quantify "good fit" using relative wasted space.
    available_bins = bins_remain_cap >= item
    if np.any(available_bins):
        wasted_space = bins_remain_cap[available_bins] - item
        relative_wasted_space = wasted_space / (item + 1e-9)  # avoid division by zero

        # Good fit = low relative wasted space. Invert.
        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)

        max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1.0 #Avoid division by zero, and handle empty input array

        # Penalize large gaps, scaled relative to item size
        large_gap_threshold = 0.5 * item
        large_gap_penalty = (wasted_space > large_gap_threshold) * (wasted_space / max_cap)
        priorities[available_bins] -= large_gap_penalty * 0.3

        # Reward tight fits, especially for larger items.
        tight_fit_threshold = 0.1 * item
        tight_fit_bonus = (wasted_space <= tight_fit_threshold) * (item / max_cap)
        priorities[available_bins] += tight_fit_bonus * 0.4

    # Rule 3: Prioritize almost full bins.
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else bins_remain_cap >= item)
    priorities[almost_full] += 5 #Significant bonus

    # Rule 4: Add some noise to break ties randomly.
    available_bins = bins_remain_cap >= item
    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
