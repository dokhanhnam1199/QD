```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get a very negative priority.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Rule 2: Prioritize bins that minimize relative wasted space (relative to item size).
    available_bins = bins_remain_cap >= item
    if np.any(available_bins):
        wasted_space = bins_remain_cap[available_bins] - item
        relative_wasted_space = wasted_space / (item + 1e-9)  # Wasted space relative to *item* size

        # Good fit = low relative wasted space. Invert and scale.
        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)

        # Penalize near-empty bins based on occupancy.
        total_capacity = bins_remain_cap + item  # Estimate total capacity.
        if np.any(total_capacity > 0):
            occupancy = (total_capacity[available_bins] - bins_remain_cap[available_bins]) / np.max(total_capacity)
            occupancy_penalty = (1 - occupancy)**2 * 0.1  # Stronger penalty for near-empty bins.
            priorities[available_bins] -= occupancy_penalty
        else:
             priorities[available_bins] -= 0.05 #Slight penality if all bins are effectively zero sized.

        # Reward bins approaching a target fullness (e.g., 75% of max bin size).
        max_cap = np.max(total_capacity) if np.any(total_capacity>0) else 1.0
        target_fullness = 0.75 * max_cap
        target_range = 0.1 * max_cap

        target_bonus = np.exp(-((bins_remain_cap[available_bins] - target_fullness + item)**2) / (2 * target_range**2))
        priorities[available_bins] += target_bonus * 0.5


    # Rule 3: Prioritize almost full bins to complete them.
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1 * np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else bins_remain_cap >= item)
    priorities[almost_full] += 10  # Give a significant bonus to almost full bins.

    # Rule 4: Add some noise to break ties randomly.
    available_bins = bins_remain_cap >= item
    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
