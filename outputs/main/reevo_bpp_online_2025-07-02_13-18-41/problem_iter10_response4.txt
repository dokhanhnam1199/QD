```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get a very negative priority.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    available_bins = ~infeasible_bins

    if np.any(available_bins):
        # Calculate wasted space
        wasted_space = bins_remain_cap[available_bins] - item
        max_cap = np.max(bins_remain_cap)

        # Relative Wasted Space Priority (Minimize)
        relative_wasted_space = wasted_space / (item + 1e-9)
        priorities[available_bins] -= relative_wasted_space * 8

        # Target Fullness Reward (Target around 75% full)
        target_fullness = 0.75 * max_cap if max_cap > 0 else 0.0
        target_range = 0.2 * max_cap if max_cap > 0 else 0.1
        fullness = bins_remain_cap[available_bins] - item
        target_bonus = np.exp(-((fullness - (max_cap - target_fullness)) ** 2) / (2 * target_range ** 2))
        priorities[available_bins] += target_bonus * 5

        # Large Gap Penalty (Scaled relative to item size)
        large_gap_threshold = 0.6 * item
        large_gap_penalty = (wasted_space > large_gap_threshold) * (wasted_space / max_cap) if max_cap > 0 else (wasted_space > large_gap_threshold) * wasted_space
        priorities[available_bins] -= large_gap_penalty * 3

        # Occupancy Reward
        fill_level = (max_cap - bins_remain_cap[available_bins] + item) / max_cap if max_cap > 0 else 0
        priorities[available_bins] += fill_level * 4

        # Small Waste Bonus
        small_waste_threshold = 0.2 * item
        small_waste_bonus = (wasted_space <= small_waste_threshold) * 6
        priorities[available_bins] += small_waste_bonus

        # Tight fit bonus, prioritize bins that fit snugly
        tight_fit_threshold = 0.05 * item
        tight_fit_bonus = (wasted_space <= tight_fit_threshold) * 8
        priorities[available_bins] += tight_fit_bonus

        # Very Small Gap Penalty
        very_small_threshold = 0.01 * max_cap if max_cap > 0 else 0.01
        very_small_gap_penalty = (wasted_space <= very_small_threshold) * 5
        priorities[available_bins] -= very_small_gap_penalty

    # Tie-breaking Noise
    if np.any(available_bins):
        priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
