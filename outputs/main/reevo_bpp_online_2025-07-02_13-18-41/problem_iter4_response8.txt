```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Initialize with a small negative value for bins that can't fit the item.
    priorities[bins_remain_cap < item] = -1e9

    # Calculate remaining capacity after placing item.
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[remaining_capacities < 0] = -1  # Handle cases where item does not fit

    # Define the available bins (bins where item fits).
    available_bins = bins_remain_cap >= item

    # Prioritize bins that are a good fit (not too much waste, not too little space).
    # A bin is a good fit if (remaining_capacities / bins_remain_cap) is small.
    # Penalize bins that are nearly full after placing the item.
    
    if np.any(available_bins):
      waste_ratio = remaining_capacities[available_bins] / bins_remain_cap[available_bins]
      
      # Favor bins with smaller waste ratio
      priorities[available_bins] = 1 - waste_ratio
      
      # Penalize near-full bins to encourage spreading items across bins.
      near_full_penalty = (remaining_capacities[available_bins] < 0.1 * bins_remain_cap[available_bins]) * 0.5
      priorities[available_bins] -= near_full_penalty
      
      # Normalize by the initial bin capacity (Encourage using smaller bins when possible)
      priorities[available_bins] /= bins_remain_cap[available_bins]

      # Add small noise to break ties.
      priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
