```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a large negative priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = 0  # Ensure no negative wasted space

    # Capacity ratio: item size relative to remaining bin capacity
    capacity_ratio = item / bins_remain_cap
    capacity_ratio[infeasible_bins] = 0  # Avoid division by zero and irrelevant ratios

    # Tight fit bonus: higher when wasted space is small relative to item size
    tight_fit_bonus = np.exp(-wasted_space / item)

    # Penalize near-full bins to avoid fragmentation, with added small constant for stability.
    near_full_penalty = np.exp(-10 * (1- capacity_ratio))

    # Combine metrics to create the priority score. Remove influence of infeasible bins.
    available_bins = ~infeasible_bins
    priorities[available_bins] = tight_fit_bonus[available_bins] - near_full_penalty[available_bins]

    # Add a bit of randomness to break ties.
    priorities[available_bins] += np.random.normal(0, 1e-7, size=np.sum(available_bins))

    return priorities
```
