```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a large negative priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = np.inf  # Mark infeasible bins

    # Tight fit priority: Inverted wasted space, normalized by bin capacity
    # and item size. Higher is better (less waste).
    tight_fit_priority = (bins_remain_cap[~infeasible_bins] > 0) / (wasted_space[~infeasible_bins] * item) if np.any(~infeasible_bins & (bins_remain_cap > 0)) else 0

    if isinstance(tight_fit_priority, (int, float)):
        priorities[~infeasible_bins] = tight_fit_priority
    else:
        priorities[~infeasible_bins] = tight_fit_priority

    # Avoid near-full bins penalty: Penalize bins that become almost full after placement.
    near_full_threshold = 0.95
    almost_full = (bins_remain_cap - item) / bins_remain_cap < (1 - near_full_threshold)
    priorities[almost_full] -= 10  # Substantial penalty

    # Fill density: encourage bins to be as close to full as possible.
    fill_density = item / bins_remain_cap
    priorities[~infeasible_bins] += fill_density[~infeasible_bins]

    # Add tiny noise for tie-breaking
    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))

    return priorities
```
