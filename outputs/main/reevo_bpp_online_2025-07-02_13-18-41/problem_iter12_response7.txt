```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get a very negative priority.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Rule 2: Quantify "good fit" using relative wasted space.
    available_bins = bins_remain_cap >= item
    if np.any(available_bins):
        wasted_space = bins_remain_cap[available_bins] - item
        relative_wasted_space = wasted_space / (bins_remain_cap[available_bins] + 1e-9)

        # Good fit = low relative wasted space.  Invert and scale.
        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)

        # Reward bins approaching a target fullness (e.g., 75%)
        max_cap = np.max(bins_remain_cap)
        target_fullness = 0.75 if max_cap > 0 else 0.0  # Use a ratio instead of scaled value
        target_range = 0.2  #Keep target range relative, independent of max_cap

        fullness_deviation = np.abs((bins_remain_cap[available_bins] - item) / (max_cap + 1e-9) - target_fullness) if max_cap > 0 else 0 #deviation from target ratio
        target_bonus = np.exp(-(fullness_deviation**2) / (2 * target_range**2))
        priorities[available_bins] += target_bonus * 0.5


    # Rule 3: Prioritize almost full bins to complete them, but make it relative to bin size.
    max_cap = np.max(bins_remain_cap)
    almost_full_threshold = 0.1 #Relative almost full threshold.
    almost_full = (bins_remain_cap >= item) & ((bins_remain_cap - item) / (max_cap + 1e-9) < almost_full_threshold) if max_cap > 0 else (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1)
    priorities[almost_full] += 20  # Give a significant bonus to almost full bins, relatively

    # Rule 4: Add some noise to break ties randomly.
    available_bins = bins_remain_cap >= item
    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
