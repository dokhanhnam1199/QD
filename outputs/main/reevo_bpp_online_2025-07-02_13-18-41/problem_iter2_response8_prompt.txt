{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing heuristic inspired priority\n    # Give bins that can fit the item a base priority.\n\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] = 1.0\n\n    #Prioritize bins with less remaining capacity (but that can fit item). Fill them first\n\n    priorities[can_fit] += (1 - (bins_remain_cap[can_fit] - item) / bins_remain_cap[can_fit])\n\n\n    # Bonus: Slightly penalize bins that are almost full after packing\n    almost_full = (bins_remain_cap - item) < 0.1  # Threshold for \"almost full\"\n    priorities[almost_full] -= 0.2\n\n    #If nothing fits, assign min priority\n    if np.all(bins_remain_cap < item):\n       priorities[:] = -1.0\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Very high priority for bins that can fit the item perfectly (or almost perfectly)\n    perfect_fit = np.isclose(bins_remain_cap, item, atol=1e-6)\n    priorities[perfect_fit] = 1000  # Assign a very high priority\n    \n    # High priority for bins where the item fits and the remaining space is small\n    # This helps to fill up the bins as much as possible\n    fits = bins_remain_cap >= item\n    remaining_space = bins_remain_cap - item\n    \n    priorities[fits] = 100 / (remaining_space[fits] + 0.001) #Avoid division by zero; the smaller remaining space gets higher priority.\n\n    # Prioritize bins with larger remaining capacity to avoid creating too many nearly-full bins early.\n    priorities[fits] += bins_remain_cap[fits] / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n    \n    #Assign a very small negative priority to bins where the item doesn't fit, ensuring that fitting bins are always prioritized.\n    priorities[~fits] = -0.00001\n    \n    return priorities\n\n[Reflection]\nPrioritize near-perfect fits and filling bins well. Balance packing density with leaving usable space.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}