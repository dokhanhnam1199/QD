{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a very low priority\n    priorities[bins_remain_cap < item] = -1e9\n\n    # Calculate remaining capacity\n    remaining_capacities = bins_remain_cap - item\n\n    # Only consider feasible bins\n    available_bins = bins_remain_cap >= item\n\n    # Best Fit Criterion with a relative waste metric\n    # Prioritize bins where the ratio of remaining capacity to item size is small\n    waste_ratio = remaining_capacities[available_bins] / item\n    priorities[available_bins] = -waste_ratio\n\n    # Fill Rate Criterion:\n    # Also, prioritize bins where the item fills a significant portion of the bin\n    fill_rate = item / bins_remain_cap[available_bins]\n    priorities[available_bins] += fill_rate\n\n    # Combination of waste and fill rate, balanced with bin capacity\n    combined_metric = (fill_rate - np.abs(waste_ratio)) / (1 + bins_remain_cap[available_bins])\n    priorities[available_bins] = combined_metric\n  \n    # Bonus for using bins that are neither too full nor too empty.  Balances fragmentation and efficiency.\n    # A good range for the fill rate might be between 0.5 and 0.9.\n    good_fill_bins = available_bins & (fill_rate >= 0.5) & (fill_rate <= 0.9)\n    priorities[good_fill_bins] += 0.1 # Small constant bonus\n    \n    # Add small random noise to break ties\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities  # No bin can fit the item\n\n    # Calculate remaining capacity after placing the item (for feasible bins only)\n    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item\n\n    # Heuristic 1: Try to fill bins as much as possible (minimize wasted space).\n    # Prioritize bins where remaining capacity after placement is small.\n    priorities[feasible_bins] = -remaining_capacity_after_placement\n\n    # Heuristic 2: Avoid creating bins with tiny remaining capacities (fragmentation).\n    # Penalize bins that result in very small remaining capacity after placement.\n    tiny_capacity_threshold = 0.1\n    fragmentation_penalty = -100\n    priorities[feasible_bins & (remaining_capacity_after_placement < tiny_capacity_threshold)] += fragmentation_penalty\n\n    # Heuristic 3: Give a bonus for near-full bins after placement. Incentivize finishing bins.\n    near_full_bonus_threshold = 0.05  # If the remaining space is less than 5% of bin size, strongly prioritize this bin. Assume bin_size = 1.\n    near_full_bonus = 100\n    priorities[feasible_bins & (remaining_capacity_after_placement <= near_full_bonus_threshold)] += near_full_bonus\n\n    # Heuristic 4: If an item fills a bin, highly prioritize it\n    exact_fit_bonus = 500\n    priorities[feasible_bins & (remaining_capacity_after_placement == 0)] += exact_fit_bonus\n\n    # Heuristic 5: Moderate Fragmentation Penalty Adjustment\n    moderate_frag_threshold = 0.25\n    moderate_frag_penalty = -20\n    priorities[feasible_bins & (remaining_capacity_after_placement > tiny_capacity_threshold) & (remaining_capacity_after_placement <= moderate_frag_threshold)] += moderate_frag_penalty\n\n    # Adaptive penalty based on item size and remaining capacity\n    item_size_factor = item\n    remaining_cap_factor = np.mean(bins_remain_cap[feasible_bins]) if np.any(feasible_bins) else 0.5\n\n    # Adjust fragmentation penalty based on item size\n    adjusted_frag_penalty = fragmentation_penalty * (1 + item_size_factor)\n    priorities[feasible_bins & (remaining_capacity_after_placement < tiny_capacity_threshold)] += adjusted_frag_penalty\n\n    # Adjust near full bonus based on remaining capacity of other bins\n    adjusted_near_full_bonus = near_full_bonus * (1 - remaining_cap_factor)\n    priorities[feasible_bins & (remaining_capacity_after_placement <= near_full_bonus_threshold)] += adjusted_near_full_bonus\n\n    return priorities\n\n[Reflection]\nPrioritize filling bins, penalize fragmentation, and adapt penalties based on item/bin sizes.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}