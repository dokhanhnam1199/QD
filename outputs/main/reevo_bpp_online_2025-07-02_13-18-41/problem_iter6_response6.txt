```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Infeasibility: Assign a very large negative priority to infeasible bins
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # 2. Remaining Capacity Ratio: Encourage bins where item fills a significant portion
    capacity_ratio = item / bins_remain_cap
    # Apply sigmoid-like function centered around 1 to prioritize bins where item nearly fills it
    fill_priority = 1 / (1 + np.exp(-10 * (capacity_ratio - 0.95)))  # Higher if closer to full
    priorities[~infeasible_bins] += fill_priority[~infeasible_bins] * 50

    # 3. Waste Ratio Penalty: Penalize large remaining space after placing the item
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = 0  # Treat infeasible bins as no waste for calculation

    waste_ratio = wasted_space / bins_remain_cap
    waste_penalty = waste_ratio**2 * 20  # Square it to penalize even larger waste more
    priorities[~infeasible_bins] -= waste_penalty[~infeasible_bins]
    
    # 4. Near Full Reward: Bonus for filling up bins close to their max
    near_full_threshold = 0.98
    near_full_bonus = ((bins_remain_cap - item) / bins_remain_cap < (1 - near_full_threshold)) * 100
    priorities[~infeasible_bins] += near_full_bonus[~infeasible_bins]
    

    # 5. Adaptive Scaling: Adjust the magnitude of priority based on remaining capacity
    remaining_capacity_ratio = bins_remain_cap / np.max(bins_remain_cap) # Scale remaining capacity

    priorities[~infeasible_bins] *= (1+ remaining_capacity_ratio[~infeasible_bins] * 0.1)  # slight preference for bins with larger remaining capacity

    # 6. Noise for Tie-breaking: Add tiny random noise to break ties
    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))

    return priorities
```
