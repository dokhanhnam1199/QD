{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: High priority for bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n    priorities[feasible_bins] += 1\n\n    # 2. Remaining capacity after placing the item:\n    remaining_capacity = bins_remain_cap - item\n    remaining_capacity[~feasible_bins] = -1  # Mark infeasible bins\n\n    # 3. Fill percentage: Prioritize bins that will be filled reasonably well.\n    fill_percentage = item / bins_remain_cap\n    priorities[feasible_bins] += (1 - np.abs(fill_percentage[feasible_bins] - 0.7)) # prefer 70%\n    # 4. Bins that are almost full (but can still accommodate) are good choices\n    almost_full = (bins_remain_cap > item) & (bins_remain_cap <= item * 1.2)\n    priorities[almost_full] += 2\n\n    # 5. Bonus for nearly full bins. Gives preference to almost empty bins to consolidate items, and discourage nearly full bins which might lead to fragments.\n    nearly_empty = bins_remain_cap > (item * 3) # try to find an empty enough bin\n    priorities[nearly_empty] -= 0.5\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility: Assign very low priority to bins that cannot fit the item\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf  # Extremely low priority\n\n    # Best Fit Criterion: Prioritize bins where the remaining capacity is close to zero after adding the item.\n    # Avoid fragmentation. Use smaller bins first to save bigger bins for potentially larger items in the future\n    feasible_mask = bins_remain_cap >= item\n    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_capacity_after_fit  # Smaller remaining capacity is preferred (higher priority)\n\n    # Level the bins with respect to fillness so that some bins are not negligibly used\n    fill_ratios = (bins_remain_cap - item) / bins_remain_cap\n\n    # Bonus for bins that fit well without wasting too much space. Balance between best fit and fragmentation.\n    bonus_mask = (fill_ratios > 0) & (fill_ratios < 0.2) # can be hyper-parameter tuned.\n    priorities[bonus_mask] += 1 # add bonus to give these bin priority\n\n    return priorities\n\n[Reflection]\nThe better code uses negative infinity for infeasibility, prioritizes best fit directly, and balances fillness, avoiding fragmentation.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}