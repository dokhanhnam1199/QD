{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a large negative priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    wasted_space[wasted_space < 0] = np.inf  # Mark infeasible bins\n\n    # Refined fit priority based on capacity ratio: reward near-fits, penalize waste\n    capacity_ratio = item / bins_remain_cap\n    fit_priority = np.exp(-5 * np.abs(1 - capacity_ratio))  # Gaussian-like preference for capacity_ratio close to 1\n    priorities[~infeasible_bins] += fit_priority[~infeasible_bins] * 10 # Scale it\n\n    # Adaptive penalty for bins becoming nearly full\n    near_full_threshold = 0.95\n    remaining_ratio = (bins_remain_cap - item) / bins_remain_cap\n    almost_full = remaining_ratio < (1 - near_full_threshold)\n    penalty_strength = 10 * (1 - remaining_ratio[almost_full])  # Higher penalty for bins *very* close to full\n    priorities[almost_full] -= penalty_strength\n\n    # Encourage bins that are more than halfway to be completely full\n    halfway_threshold = 0.5\n    more_than_halfway = remaining_ratio < halfway_threshold\n    bonus_strength = 5 * (halfway_threshold - remaining_ratio[more_than_halfway])  # Higher bonus if much greater than half\n    priorities[more_than_halfway] += bonus_strength\n\n    # Directly penalize large gaps\n    large_gap_threshold = 0.2\n    large_gap = wasted_space / bins_remain_cap > large_gap_threshold\n    gap_penalty = 2 * wasted_space[large_gap] / bins_remain_cap[large_gap] # Scale penalty by size of gap\n    priorities[large_gap] -= gap_penalty\n\n    # Fill density: encourage bins to be as close to full as possible.\n    fill_density = item / bins_remain_cap\n    priorities[~infeasible_bins] += fill_density[~infeasible_bins] * 2 # scale fill_density to have better impact\n\n    # Adaptive bonus for nearly full bins, scaled to remaining capacity\n    nearly_full_threshold = 0.9\n    nearly_full = (bins_remain_cap - item) / bins_remain_cap > nearly_full_threshold\n    bonus_near_full = 5*(bins_remain_cap[nearly_full] - item)\n    priorities[nearly_full] += bonus_near_full\n\n    # Add small noise for tie-breaking, scaled by bin capacity\n    noise_std = 1e-6 * bins_remain_cap[~infeasible_bins] # noise is proportional to capacity\n    priorities[~infeasible_bins] += np.random.normal(0, noise_std, size=np.sum(~infeasible_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a large negative priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Calculate remaining space after placing the item\n    remaining_space = bins_remain_cap - item\n    remaining_space[remaining_space < 0] = np.inf  # Mark infeasible bins\n\n    # Capacity ratio\n    capacity_ratio = item / bins_remain_cap\n\n    # Reward near-full bins, penalize large gaps\n    near_full_threshold = 0.9\n    large_gap_threshold = 0.1\n\n    near_full_bonus = 5.0\n    large_gap_penalty = -3.0\n\n    near_full_bins = (remaining_space / bins_remain_cap) < (1 - near_full_threshold)\n    large_gap_bins = (remaining_space / bins_remain_cap) > large_gap_threshold\n    \n    priorities[near_full_bins & ~infeasible_bins] += near_full_bonus\n    priorities[large_gap_bins & ~infeasible_bins] += large_gap_penalty\n\n    # Fill density reward\n    priorities[~infeasible_bins] += capacity_ratio[~infeasible_bins] * 2\n\n    # Adaptive penalty for excessive waste relative to item size\n    waste_ratio = remaining_space / item\n    excessive_waste = waste_ratio > 1.0\n    priorities[excessive_waste & ~infeasible_bins] -= 2 * waste_ratio[excessive_waste & ~infeasible_bins]\n\n    # Adaptive bonus for filling close to the bin's capacity\n    fullness_ratio = item / bins_remain_cap\n    high_fullness = fullness_ratio > 0.7\n    priorities[high_fullness & ~infeasible_bins] += 3 * fullness_ratio[high_fullness & ~infeasible_bins]\n\n    # Noise for tie-breaking\n    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))\n\n    return priorities\n\n[Reflection]\nClear thresholds, focused rewards/penalties based on ratios, and adaptive scaling improve bin packing heuristics.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}