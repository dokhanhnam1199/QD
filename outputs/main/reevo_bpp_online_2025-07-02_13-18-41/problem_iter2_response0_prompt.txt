{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Big enough, and fits best -> high priority\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item)  # Remaining space after adding. Smaller is better (First Fit Decreasing heuristic intuition). So remaining space contributes negatively to the priority\n\n    # If it doesn't fit, assign a very low priority\n    priorities[~fit_mask] = -np.inf \n    \n    #Boost the bins closer to full. Prioritize filling partially full bins more than very empty bins or bins very close to full\n    priorities = priorities + (bins_remain_cap / np.max(bins_remain_cap))\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Immediate Fit: High priority if item fits perfectly\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000  # Max priority for perfect fit\n\n    # Best Fit: High priority for bins where item nearly fills bin\n    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap < 2 * item)\n    priorities[almost_fit] = 100 / (bins_remain_cap[almost_fit] - item + 0.001)  # Prioritize smaller wasted space\n\n    # Worst Fit: Low priority (but still possible) for bins with lots of space\n    large_capacity = bins_remain_cap >= 2 * item\n    priorities[large_capacity] = 1 / bins_remain_cap[large_capacity] # Slightly encourage using emptier bins, but not by much\n    \n    # Penalize bins that are too small. Make them extremely undesirable.\n    too_small = bins_remain_cap < item\n    priorities[too_small] = -1000 # Extremely low priority; avoid at all costs\n    \n    return priorities\n\n[Reflection]\nThe better code prioritizes perfect and almost-perfect fits, while strongly penalizing infeasible and worst fits.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}