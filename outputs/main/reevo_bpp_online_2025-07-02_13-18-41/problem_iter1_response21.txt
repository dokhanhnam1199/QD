```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # First-Fit Decreasing Inspired: Prefer bins that can accommodate the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Give these bins a base priority of 1

    # Best-Fit Inspired:  Among bins that can fit, prefer the fullest one (least remaining space after adding the item).
    remaining_after_fit = bins_remain_cap[can_fit] - item
    
    #Avoid errors from empty slices
    if remaining_after_fit.size > 0:
        priorities[can_fit] += np.max(remaining_after_fit) - remaining_after_fit # smaller remaining capacity means higher priority

    # Penalize bins where the item would leave too little space
    too_little_space = (bins_remain_cap > item) & (bins_remain_cap - item < 0.1) # Avoid bins if less than 0.1 remain
    priorities[too_little_space] -= 10  # Heavily penalize bins that lead to very little remaining capacity

    #Penalize bins which do not fit at all
    does_not_fit = bins_remain_cap < item
    priorities[does_not_fit] -= 100
    
    return priorities
```
