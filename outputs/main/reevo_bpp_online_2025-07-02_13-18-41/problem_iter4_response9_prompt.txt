{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a large negative priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    wasted_space[wasted_space < 0] = 0  # Ensure no negative wasted space\n\n    # Capacity ratio: item size relative to remaining bin capacity\n    capacity_ratio = item / bins_remain_cap\n    capacity_ratio[infeasible_bins] = 0  # Avoid division by zero and irrelevant ratios\n\n    # Tight fit bonus: higher when wasted space is small relative to item size\n    tight_fit_bonus = np.exp(-wasted_space / item)\n\n    # Penalize near-full bins to avoid fragmentation, with added small constant for stability.\n    near_full_penalty = np.exp(-10 * (1- capacity_ratio))\n\n    # Combine metrics to create the priority score. Remove influence of infeasible bins.\n    available_bins = ~infeasible_bins\n    priorities[available_bins] = tight_fit_bonus[available_bins] - near_full_penalty[available_bins]\n\n    # Add a bit of randomness to break ties.\n    priorities[available_bins] += np.random.normal(0, 1e-7, size=np.sum(available_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasibility penalty: very low priority if item doesn't fit\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Calculate remaining capacity after placing item.\n    remaining_capacities = bins_remain_cap - item\n    remaining_capacities[remaining_capacities < 0] = -1 # To avoid -inf in subsequent calculations. Necessary for zero-sized items.\n\n    # Available bins (where item fits).\n    available_bins = bins_remain_cap >= item\n\n    if np.any(available_bins): # Prevents errors if all bins are infeasible\n        # Tight-fit bonus: prioritize bins where the item fills a large portion\n        # Prioritize based on the ratio of the item size to the bin's remaining capacity.\n        capacity_ratio = item / bins_remain_cap[available_bins]\n        priorities[available_bins] += capacity_ratio\n\n        # Waste penalty: reduce priority if too much space is wasted. Invert wasted space\n        # Penalize bins with a lot of wasted space after placing the item.\n        waste_ratio = remaining_capacities[available_bins] / bins_remain_cap[available_bins]\n        priorities[available_bins] += (1 - waste_ratio) # Inverse of wasted space.\n\n        # Near-full avoidance: avoid bins that become nearly full, balancing fill density and fragmentation\n        near_full_threshold = 0.95\n        near_full_bins = (bins_remain_cap[available_bins] - item) / bins_remain_cap[available_bins] < (1 - near_full_threshold)\n        priorities[available_bins][near_full_bins] -= 0.5  # Mild penalty.\n\n        # Add a small random noise to break ties\n        priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n\n    return priorities\n\n[Reflection]\nPrioritize capacity ratio, penalize waste, and softly avoid near-full bins for better packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}