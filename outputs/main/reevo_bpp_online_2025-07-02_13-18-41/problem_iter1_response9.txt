```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Assign 0 priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf 
    
    # Score based on remaining capacity after packing
    remaining_after_pack = bins_remain_cap - item
    
    # Prioritize bins where the item fits snugly, but avoid perfect fit.
    # A near-perfect fit may block us from packing another larger item.
    # remaining_after_pack + item is bins_remain_cap
    priorities[bins_remain_cap >= item] = np.exp(-np.abs(remaining_after_pack[bins_remain_cap >= item] - (0.1 * bins_remain_cap[bins_remain_cap >= item])))

    # Bonus for almost full bins if item can fit
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= 2 * item)
    priorities[almost_full] += 1.0

    # Big penalty if item would lead to near-empty bin
    near_empty = (bins_remain_cap >= item) & (remaining_after_pack < 0.2)
    priorities[near_empty] -= 0.5

    return priorities
```
