```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get a very negative priority.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Rule 2:  Prioritize bins based on relative waste, and target fullness.
    available_bins = bins_remain_cap >= item
    if np.any(available_bins):
        wasted_space = bins_remain_cap[available_bins] - item
        bin_capacity = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1.0
        relative_wasted_space = wasted_space / bin_capacity # Scale wasted space by bin size

        priorities[available_bins] = -relative_wasted_space # Lower waste is better

        # Bonus for bins close to target fullness (75% full)
        target_fullness = 0.75 * bin_capacity
        fullness_deviation = np.abs((bin_capacity - bins_remain_cap[available_bins]) - target_fullness)

        # Apply a bonus that decays with the square of the deviation from target fullness
        target_bonus = np.exp(-(fullness_deviation**2) / (2 * (0.1 * bin_capacity)**2)) # std dev = 10% of bin capacity.
        priorities[available_bins] += target_bonus * 0.5

    # Rule 3: Extra priority for almost-full bins.
    almost_full_threshold = 0.1 * bin_capacity  # Considered almost full if within 10% of max capacity
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item <= almost_full_threshold)
    priorities[almost_full] += 5  # Significant bonus for almost full.

    # Rule 4: Add some noise to break ties randomly.
    available_bins = bins_remain_cap >= item
    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
