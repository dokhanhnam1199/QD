{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Feasibility - Bins that cannot fit the item get negative infinity priority.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Rule 2: Prioritize fitting - Give a substantial base priority to feasible bins\n    feasible_mask = bins_remain_cap >= item\n    priorities[feasible_mask] += 1.0\n\n    # Rule 3: Invert wasted space - Higher priority to tighter fits (smaller wasted space)\n    wasted_space = bins_remain_cap - item\n    wasted_space[~feasible_mask] = np.inf  # penalize infeasible bins by making their wasted space infinite\n    priorities[feasible_mask] += 1.0 / (1.0 + wasted_space[feasible_mask])  # smaller wasted space -> higher priority\n\n    # Rule 4: Penalize near-full bins (but only if the item fits)\n    almost_full = feasible_mask & (bins_remain_cap - item <= 0.1)\n    priorities[almost_full] -= 0.5\n\n    # Rule 5: Small items prefer low occupancy\n    if item < 0.2:\n        occupancy = 1.0 - bins_remain_cap / np.max(bins_remain_cap) # Occupancy level of each bin normalized\n        priorities[feasible_mask] += (1.0 - occupancy[feasible_mask]) * 0.3\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities  # No bin can fit the item\n\n    # Calculate remaining capacity after placing the item (for feasible bins only)\n    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item\n\n    # Heuristic 1: Try to fill bins as much as possible (minimize wasted space).\n    # Prioritize bins where remaining capacity after placement is small.\n    priorities[feasible_bins] = -remaining_capacity_after_placement\n\n    # Heuristic 2: Avoid creating bins with tiny remaining capacities (fragmentation).\n    # Penalize bins that result in very small remaining capacity after placement.\n    tiny_capacity_threshold = 0.1  # Adjust this threshold as needed\n    fragmentation_penalty = -100  # Adjust this penalty as needed\n    priorities[feasible_bins & (remaining_capacity_after_placement < tiny_capacity_threshold)] += fragmentation_penalty\n\n    # Heuristic 3: Give a bonus for near-full bins after placement. Incentivize finishing bins.\n    near_full_bonus_threshold = 0.05  # If the remaining space is less than 5% of bin size, strongly prioritize this bin. Assume bin_size = 1.\n    near_full_bonus = 100\n    priorities[feasible_bins & (remaining_capacity_after_placement <= near_full_bonus_threshold)] += near_full_bonus\n\n    # Heuristic 4: If an item fills a bin, highly prioritize it\n    exact_fit_bonus = 500\n    priorities[feasible_bins & (remaining_capacity_after_placement == 0)] += exact_fit_bonus\n\n    # Heuristic 5: Moderate Fragmentation Penalty Adjustment\n    moderate_frag_threshold = 0.25\n    moderate_frag_penalty = -20\n    priorities[feasible_bins & (remaining_capacity_after_placement > tiny_capacity_threshold) & (remaining_capacity_after_placement <= moderate_frag_threshold)] += moderate_frag_penalty\n    return priorities\n\n[Reflection]\nPrioritize filling, avoid fragmentation, and strongly incentivize bin completion with adaptive penalties/bonuses.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}