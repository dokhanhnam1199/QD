{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a very low priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Calculate remaining capacity after placing the item\n    remaining_capacity = bins_remain_cap - item\n    remaining_capacity[remaining_capacity < 0] = np.inf\n\n    # Fill ratio\n    fill_ratio = item / bins_remain_cap\n\n    # Tight-Fit Reward (scaled)\n    tight_fit_reward_scale = 5  # Adjust scaling factor as needed\n    tight_fit_reward = (1 - remaining_capacity / bins_remain_cap) * fill_ratio * tight_fit_reward_scale\n    priorities[~infeasible_bins] += tight_fit_reward[~infeasible_bins]\n\n    # Fragmentation Penalty (Adaptive)\n    fragmentation_penalty_scale = -2  # Adjust scaling factor as needed\n    fragmentation_threshold = 0.8  # Adjust threshold for large fragmentation\n\n    fragmentation_penalty = np.where(remaining_capacity / bins_remain_cap > fragmentation_threshold,\n                                      (remaining_capacity / bins_remain_cap) * fragmentation_penalty_scale,\n                                      0)\n\n    priorities[~infeasible_bins] += fragmentation_penalty[~infeasible_bins]\n\n    # Near-Full Reward (Adaptive)\n    near_full_reward_scale = 3  # Adjust scaling factor as needed\n    near_full_threshold = 0.95  # Adjust threshold for near-full\n\n    near_full_reward = np.where((bins_remain_cap - item) / bins_remain_cap > near_full_threshold,\n                                  near_full_reward_scale,\n                                  0)\n\n    priorities[~infeasible_bins] += near_full_reward[~infeasible_bins]\n\n    # Balanced Fill Level Bonus (Adaptive)\n    balanced_fill_bonus_scale = 1 # Adjust scaling factor as needed\n    balanced_lower_threshold = 0.6\n    balanced_upper_threshold = 0.9\n\n    balanced_fill_bonus = np.where(\n        (~infeasible_bins) & (fill_ratio >= balanced_lower_threshold) & (fill_ratio <= balanced_upper_threshold),\n        balanced_fill_bonus_scale,\n        0\n    )\n    priorities[~infeasible_bins] += balanced_fill_bonus[~infeasible_bins]\n\n    # Tie-breaking Noise\n    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Infeasible bins get a very negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Rule 2: Quantify \"good fit\" using relative wasted space.\n    # A good fit minimizes the *ratio* of wasted space to the item size.\n    available_bins = bins_remain_cap >= item\n    if np.any(available_bins):\n        wasted_space = bins_remain_cap[available_bins] - item\n        relative_wasted_space = wasted_space / (item + 1e-9)  # avoid division by zero if item is 0\n\n        # Good fit = low relative wasted space.  Invert and scale.\n        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)\n\n        # Further improve good fit by considering bin occupancy, penalize bins which are empty or almost full.\n        occupancy = 1.0 - bins_remain_cap[available_bins] / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.0  # handle edge case where max cap is zero\n        occupancy_penalty = np.abs(occupancy - 0.5)  # Bins that are near half full are preferable.\n\n        priorities[available_bins] -= occupancy_penalty * 0.2\n\n        # Reward bins approaching a target fullness (e.g., 75%)\n        max_cap = np.max(bins_remain_cap)\n        target_fullness = 0.75 * max_cap if max_cap > 0 else 0.0\n        target_range = 0.1 * max_cap if max_cap > 0 else 0.1  # Scale relative to maximum bin size.\n\n        target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness) ** 2) / (2 * target_range ** 2))\n        priorities[available_bins] += target_bonus * 0.5\n\n        # Penalize large gaps, scaled relative to item size\n        large_gap_threshold = 0.5 * item\n        large_gap_penalty = (wasted_space > large_gap_threshold) * (wasted_space / max_cap) if max_cap > 0 else (wasted_space > large_gap_threshold) * wasted_space #Relative to max bin size\n        priorities[available_bins] -= large_gap_penalty * 0.3\n\n        # Reward tight fits, especially for large items.\n        tight_fit_threshold = 0.1 * item\n        tight_fit_bonus = (wasted_space <= tight_fit_threshold) * (item / max_cap) if max_cap > 0 else (wasted_space <= tight_fit_threshold) * item #relative to max bin size\n        priorities[available_bins] += tight_fit_bonus * 0.4\n\n    # Rule 3: Prioritize almost full bins to complete them, but make it relative to bin size.\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else bins_remain_cap >= item)\n    priorities[almost_full] += 10  # Give a significant bonus to almost full bins\n\n    # Rule 4: Add some noise to break ties randomly.\n    available_bins = bins_remain_cap >= item\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Reflection]\nPrioritize relative wasted space, target fullness, and penalize large gaps. Adapt bonuses/penalties relative to item/bin size.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}