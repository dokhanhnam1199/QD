```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins that can accommodate the item
    # but are not too much larger than the item (to avoid fragmentation).
    
    # First, identify feasible bins
    feasible_bins = bins_remain_cap >= item
    
    if np.any(feasible_bins):
        # Calculate the wasted space if the item is placed in each feasible bin
        wasted_space = bins_remain_cap[feasible_bins] - item
        
        # Give higher priority to bins where the wasted space is small
        # This encourages filling bins more completely
        priority_for_feasible = np.exp(-wasted_space)
        
        # Assign priorities to feasible bins
        priorities[feasible_bins] = priority_for_feasible
    else:
        # If no bins can accommodate the item, assign a small negative priority
        # This discourages using a new bin unless necessary
        priorities[:] = -1.0  # Or a small negative value

    return priorities
```
