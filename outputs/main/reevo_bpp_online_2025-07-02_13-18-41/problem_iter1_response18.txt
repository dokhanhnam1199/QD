```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Remaining space after fit. smaller value is better, thus higher priority

    # Give huge negative score to bins that can't fit
    priorities[~fit_mask] = -np.inf

    # Normalize the fitting score
    max_val = np.max(priorities[fit_mask]) if np.any(fit_mask) else 0  # prevent warning in rare case when fit_mask is empty
    if max_val > 0:
        priorities[fit_mask] = max_val - priorities[fit_mask] # larger diff value is better

    # Prefer bins that are not empty
    non_empty_bins = bins_remain_cap < np.max(bins_remain_cap) # Assume same size of bins

    priorities[non_empty_bins & fit_mask] += 1 # slight bump

    return priorities
```
