```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get a very negative priority.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    available_bins = bins_remain_cap >= item
    if np.any(available_bins):
        # Rule 2: Good fit based on relative wasted space.
        wasted_space = bins_remain_cap[available_bins] - item
        relative_wasted_space = wasted_space / (item + 1e-9)
        priorities[available_bins] = -relative_wasted_space # Lower is better

        max_cap = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 1.0  # Handle empty array
        if max_cap > 0:

            # Rule 3: Bin occupancy penalty (prefer bins near half-full).
            occupancy = 1.0 - bins_remain_cap[available_bins] / max_cap
            occupancy_penalty = np.abs(occupancy - 0.5)
            priorities[available_bins] -= occupancy_penalty * 0.1

            # Rule 4: Target fullness bonus.
            target_fullness = 0.75 * max_cap
            target_range = 0.1 * max_cap
            target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness) ** 2) / (2 * target_range ** 2))
            priorities[available_bins] += target_bonus * 0.3

            # Rule 5: Penalize high remaining capacity.
            high_capacity_threshold = 0.9 * max_cap
            high_capacity_penalty = (bins_remain_cap[available_bins] > high_capacity_threshold) * (bins_remain_cap[available_bins] / max_cap) * 0.1
            priorities[available_bins] -= high_capacity_penalty

            # Rule 6: Prioritize almost full bins.
            almost_full_threshold = 0.1 * max_cap
            almost_full = (wasted_space <= almost_full_threshold)
            priorities[available_bins][almost_full] += 5

        # Rule 7: Noise for tie-breaking. Reduced magnitude.
        noise_std = 1e-7 * max_cap if max_cap > 0 else 1e-7
        priorities[available_bins] += np.random.normal(0, noise_std, size=np.sum(available_bins))

    return priorities
```
