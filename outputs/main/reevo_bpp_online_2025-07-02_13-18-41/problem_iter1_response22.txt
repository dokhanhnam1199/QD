```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspired priority
    # Give bins that can fit the item a base priority.

    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1.0

    #Prioritize bins with less remaining capacity (but that can fit item). Fill them first

    priorities[can_fit] += (1 - (bins_remain_cap[can_fit] - item) / bins_remain_cap[can_fit])


    # Bonus: Slightly penalize bins that are almost full after packing
    almost_full = (bins_remain_cap - item) < 0.1  # Threshold for "almost full"
    priorities[almost_full] -= 0.2

    #If nothing fits, assign min priority
    if np.all(bins_remain_cap < item):
       priorities[:] = -1.0

    return priorities
```
