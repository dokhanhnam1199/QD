```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1.0

    # Rule 1: Infeasible bins get a very negative priority.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Rule 2: Quantify "good fit" using relative wasted space and reward smaller wasted space
    available_bins = bins_remain_cap >= item
    if np.any(available_bins):
        wasted_space = bins_remain_cap[available_bins] - item
        relative_wasted_space = wasted_space / (max_cap + 1e-9)  # Scale to bin capacity

        priorities[available_bins] = 5.0 / (0.01 + relative_wasted_space)  # Higher initial priority

        # Rule 3: Reward bins approaching a target fullness (e.g., 90% of bin capacity)
        target_fullness = 0.9 * max_cap # Adjusted Target
        target_range = 0.1 * max_cap

        target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness)**2) / (2 * target_range**2))
        priorities[available_bins] += target_bonus * 10 # Increased target bonus

        # Rule 4: Penalize bins with very large remaining capacity.
        large_waste = bins_remain_cap[available_bins] - item > 0.6 * max_cap  # Threshold
        priorities[available_bins][large_waste] -= 3 #Penalty for Large Waste.

    # Rule 5: Prioritize almost full bins to complete them
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1 * max_cap if max_cap > 0 else bins_remain_cap >=item) #Tuned Value
    priorities[almost_full] += 20 # Increased almost full bonus

    # Rule 6: Adaptive penalty for bins when item size is large.
    large_item_penalty = -item/max_cap *5 if max_cap >0 else 0
    priorities[available_bins] += large_item_penalty

    # Rule 7: Add small noise for tie-breaking.
    available_bins = bins_remain_cap >= item
    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
