{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Assign -inf priority to bins that can't fit the item\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n    \n    # 2. First-Fit-Decreasing Inspired: Give higher priority to bins with smaller remaining capacity that *can* fit the item.\n    #    Rationale: Prefer filling bins that are already somewhat full to avoid creating many near-empty bins.\n    #    We want to penalize large gaps, so use a decreasing function of the *available* space *after* adding the item.\n    #    Note that we're only considering feasible bins at this point.\n    \n    feasible_bins = ~infeasible_bins\n    remaining_space_after_fit = bins_remain_cap[feasible_bins] - item\n    # A small constant is added to remaining space after fit to avoid possible division by zero error\n    priorities[feasible_bins] = -remaining_space_after_fit + (1/(bins_remain_cap[feasible_bins]+1e-9))  # linear penalty scaled by inverse bin size\n\n    # 3. Avoidance of near-full bins: slightly reduced priorities for near full bins\n    near_full_bins = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1) #Bins close to being full after fitting the item\n    priorities[near_full_bins] -=0.05\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Initialize with a small negative value for bins that can't fit the item.\n    priorities[bins_remain_cap < item] = -1e9\n\n    # Calculate remaining capacity after placing item.\n    remaining_capacities = bins_remain_cap - item\n    remaining_capacities[remaining_capacities < 0] = -1 # Handle cases where item does not fit, to avoid -inf in the calculations. This assignment is necessary for handling zero-sized items.\n\n    # Define the available bins (bins where item fits).\n    available_bins = bins_remain_cap >= item\n\n    # Prioritize bins that are a good fit (not too much waste, not too little space).\n    # A bin is a good fit if (remaining_capacities / item) < some threshold and item/bin_remain_cap < threshold.\n    fit_threshold = 0.2\n    priorities[available_bins] = (1 - np.abs(remaining_capacities[available_bins] / item - 1))/(1 + bins_remain_cap[available_bins]) + (1 - np.abs(item/bins_remain_cap[available_bins] -1))/(1 + bins_remain_cap[available_bins])\n    # Add small noise to break ties.\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Reflection]\nBetter code uses relative remaining capacity and item size for \"good fit\" prioritization, and tie-breaking noise.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}