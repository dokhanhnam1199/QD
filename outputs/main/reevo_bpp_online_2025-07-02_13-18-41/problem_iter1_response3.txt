```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1  # Give bins that can fit a base priority

    # Rule 2: Prioritize bins with less remaining capacity (among those that fit)
    #         This encourages filling bins that are already partially full.
    remaining_capacity_priority = 1 / (bins_remain_cap[fit_mask] + 1e-6)  # Avoid division by zero
    priorities[fit_mask] += remaining_capacity_priority

    # Rule 3: Add a bonus for bins where the item fills them up nicely (not too much waste)
    fill_ratio = item / bins_remain_cap[fit_mask]
    # We want fill_ratio to be close to 1, but not too close (avoid near-perfect fit if many options exist)
    fill_quality = np.exp(-10 * np.abs(fill_ratio - 0.95)) # Gaussian-like penalty
    priorities[fit_mask] += fill_quality
    
    # Rule 4: Negative priority for bins that cannot fit (discourage exceeding capacity)
    priorities[~fit_mask] = -1e9 # A very large negative priority if it can't fit

    return priorities
```
