```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Initialize with a small negative value for bins that can't fit the item.
    priorities[bins_remain_cap < item] = -1e9

    # Calculate remaining capacity after placing item.
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[remaining_capacities < 0] = -1 # Handle cases where item does not fit, to avoid -inf in the calculations. This assignment is necessary for handling zero-sized items.

    # Define the available bins (bins where item fits).
    available_bins = bins_remain_cap >= item

    # Prioritize bins that are a good fit (not too much waste, not too little space).
    # A bin is a good fit if (remaining_capacities / item) < some threshold and item/bin_remain_cap < threshold.
    fit_threshold = 0.2
    priorities[available_bins] = (1 - np.abs(remaining_capacities[available_bins] / item - 1))/(1 + bins_remain_cap[available_bins]) + (1 - np.abs(item/bins_remain_cap[available_bins] -1))/(1 + bins_remain_cap[available_bins])
    # Add small noise to break ties.
    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
