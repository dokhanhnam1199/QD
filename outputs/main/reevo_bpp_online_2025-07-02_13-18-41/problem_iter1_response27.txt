```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after placing the item
    remaining_after_placement = bins_remain_cap - item
    
    # Prioritize bins where the item fits
    fit_mask = remaining_after_placement >= 0
    
    # Prioritize based on how much space is left after placement.
    # Smaller remaining space suggests a better fit. Use a reversed exponential decay.
    priorities[fit_mask] = np.exp(-remaining_after_placement[fit_mask] / item)

    #Bonus for Almost Full Bins: Bins with capacity very close to the item size get the highest bonus
    almost_full_bonus_mask = np.logical_and(bins_remain_cap >= item, bins_remain_cap <= (item*1.1)) #1.1 gives a small tolerance
    priorities[almost_full_bonus_mask] += 1.0

    return priorities
```
