```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Rule out bins that can't fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Or a very small negative number

    # 2. Encourage bins with remaining capacity close to item size (First-Fit Decreasing variant)
    # Calculate waste if the item is placed in the bin
    waste = bins_remain_cap - item

    # Give higher priority to bins with smaller waste (but only if feasible)
    priorities[~infeasible_mask] = -np.abs(waste[~infeasible_mask]) # or 1 / (np.abs(waste[~infeasible_mask]) + 0.00001) or  np.exp(-np.abs(waste[~infeasible_mask]))
    # Add a small bonus for bins that are almost full after adding the item to prefer packing more tightly
    almost_full_bonus = np.where((bins_remain_cap - item) < 0.1, 0.5, 0) #if bin is left with less than 0.1 after adding item

    priorities[~infeasible_mask] += almost_full_bonus[~infeasible_mask] # only add bonus to bins where item fits

    # 3. Consider the utilization rate of the bin
    utilization = item / bins_remain_cap
    priorities[~infeasible_mask] += utilization[~infeasible_mask]

    return priorities
```
