```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a large negative priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = np.inf  # Mark infeasible bins

    # Refined fit priority based on capacity ratio: reward near-fits, penalize waste
    capacity_ratio = item / bins_remain_cap
    fit_priority = np.exp(-5 * np.abs(1 - capacity_ratio))  # Gaussian-like preference for capacity_ratio close to 1
    priorities[~infeasible_bins] += fit_priority[~infeasible_bins] * 10 # Scale it

    # Adaptive penalty for bins becoming nearly full
    near_full_threshold = 0.95
    remaining_ratio = (bins_remain_cap - item) / bins_remain_cap
    almost_full = remaining_ratio < (1 - near_full_threshold)
    penalty_strength = 10 * (1 - remaining_ratio[almost_full])  # Higher penalty for bins *very* close to full
    priorities[almost_full] -= penalty_strength

    # Encourage bins that are more than halfway to be completely full
    halfway_threshold = 0.5
    more_than_halfway = remaining_ratio < halfway_threshold
    bonus_strength = 5 * (halfway_threshold - remaining_ratio[more_than_halfway])  # Higher bonus if much greater than half
    priorities[more_than_halfway] += bonus_strength

    # Directly penalize large gaps
    large_gap_threshold = 0.2
    large_gap = wasted_space / bins_remain_cap > large_gap_threshold
    gap_penalty = 2 * wasted_space[large_gap] / bins_remain_cap[large_gap] # Scale penalty by size of gap
    priorities[large_gap] -= gap_penalty

    # Fill density: encourage bins to be as close to full as possible.
    fill_density = item / bins_remain_cap
    priorities[~infeasible_bins] += fill_density[~infeasible_bins] * 2 # scale fill_density to have better impact

    # Adaptive bonus for nearly full bins, scaled to remaining capacity
    nearly_full_threshold = 0.9
    nearly_full = (bins_remain_cap - item) / bins_remain_cap > nearly_full_threshold
    bonus_near_full = 5*(bins_remain_cap[nearly_full] - item)
    priorities[nearly_full] += bonus_near_full

    # Add small noise for tie-breaking, scaled by bin capacity
    noise_std = 1e-6 * bins_remain_cap[~infeasible_bins] # noise is proportional to capacity
    priorities[~infeasible_bins] += np.random.normal(0, noise_std, size=np.sum(~infeasible_bins))

    return priorities
```
