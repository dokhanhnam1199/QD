```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Rule 1: Prefer bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1

    # Rule 2: Among bins that can fit, prefer bins with less remaining capacity after packing
    remaining_after_pack = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1 / (remaining_after_pack + 0.0001)  # Avoid division by zero

    # Rule 3: Give a small bonus to bins that are almost full.
    almost_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < 0.2) # Remaining cap less than 20%
    priorities[almost_full_mask] += 0.5
    
    # Rule 4: Large item should be allocated to larger bin if possible
    priority_add = (item/ np.max(bins_remain_cap)) * bins_remain_cap
    priorities += priority_add
    

    return priorities
```
