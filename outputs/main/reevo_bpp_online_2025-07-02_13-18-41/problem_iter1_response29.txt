```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining space after adding the item
    remaining_space = bins_remain_cap - item

    # Give high priority to bins where the item fits, but leaves little space.
    fit_mask = remaining_space >= 0
    priorities[fit_mask] = 1 / (remaining_space[fit_mask] + 1e-9) # Avoid division by zero

    # Give a lower, but non-zero priority to bins where the item does *not* fit,
    # This might allow later algorithms to consider bins which have the *smallest* wasted space.
    no_fit_mask = ~fit_mask
    priorities[no_fit_mask] = - item + bins_remain_cap[no_fit_mask] # Smaller negative values = higher priority


    # Add a term that pushes towards filling bins completely (First Fit Decreasing logic)
    priorities += bins_remain_cap / np.sum(bins_remain_cap + 1e-9) # Normalize capacity to avoid scaling issues


    return priorities
```
