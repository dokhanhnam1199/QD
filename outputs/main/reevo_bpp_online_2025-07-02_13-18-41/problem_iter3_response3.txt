```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility penalty: very low priority if item doesn't fit
    priorities[bins_remain_cap < item] = -1e9

    available_bins = bins_remain_cap >= item

    if not np.any(available_bins):
        return priorities  # No feasible bin

    remaining_capacities = bins_remain_cap[available_bins] - item

    # Tight-fit bonus: Higher priority for bins where the item fits snugly
    capacity_ratio = item / bins_remain_cap[available_bins]
    waste_ratio = remaining_capacities / bins_remain_cap[available_bins]

    # Combine tightness and wasted space.  Invert waste to *reward* less waste.
    # Add penalty if it nearly fills the bin (risk of future items not fitting).
    priorities[available_bins] = (
        capacity_ratio
        + (1 - waste_ratio)
        - 10 * (remaining_capacities < 0.1 * bins_remain_cap[available_bins])  # Avoid near-full bins
    )


    # Normalize and add a small noise to break ties.
    priorities[available_bins] = priorities[available_bins] / np.max(priorities[available_bins])
    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
