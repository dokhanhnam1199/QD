{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Initialize with a small negative value for bins that can't fit the item.\n    priorities[bins_remain_cap < item] = -1e9\n\n    # Calculate remaining capacity after placing item.\n    remaining_capacities = bins_remain_cap - item\n    remaining_capacities[remaining_capacities < 0] = -1  # Handle cases where item does not fit\n\n    # Define the available bins (bins where item fits).\n    available_bins = bins_remain_cap >= item\n\n    # Prioritize bins that are a good fit (not too much waste, not too little space).\n    # A bin is a good fit if (remaining_capacities / bins_remain_cap) is small.\n    # Penalize bins that are nearly full after placing the item.\n    \n    if np.any(available_bins):\n      waste_ratio = remaining_capacities[available_bins] / bins_remain_cap[available_bins]\n      \n      # Favor bins with smaller waste ratio\n      priorities[available_bins] = 1 - waste_ratio\n      \n      # Penalize near-full bins to encourage spreading items across bins.\n      near_full_penalty = (remaining_capacities[available_bins] < 0.1 * bins_remain_cap[available_bins]) * 0.5\n      priorities[available_bins] -= near_full_penalty\n      \n      # Normalize by the initial bin capacity (Encourage using smaller bins when possible)\n      priorities[available_bins] /= bins_remain_cap[available_bins]\n\n      # Add small noise to break ties.\n      priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a large negative priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    wasted_space[wasted_space < 0] = np.inf  # Mark infeasible bins\n\n    # Capacity ratio\n    capacity_ratio = item / bins_remain_cap\n    # Tight fit reward, scaled by item size and capacity ratio\n    tight_fit_reward = (1 - wasted_space / bins_remain_cap) * item * capacity_ratio\n    priorities[~infeasible_bins] += tight_fit_reward[~infeasible_bins] * 2\n\n    # Large gap penalty\n    large_gap_threshold = 0.75\n    large_gap_penalty = -10  # Increased penalty\n    large_gap = wasted_space / bins_remain_cap > large_gap_threshold\n    priorities[large_gap] += large_gap_penalty\n\n    # Near-full reward: Bins close to full get a bonus\n    near_full_threshold = 0.95\n    near_full_reward = 5  # Increased reward\n    near_full = (bins_remain_cap - item) / bins_remain_cap > near_full_threshold\n    priorities[near_full] += near_full_reward\n\n    # Adaptive penalty/bonus based on fill level\n    fill_level = 1 - wasted_space / bins_remain_cap\n    adaptive_factor = np.clip(fill_level * 5, -2, 2)  # Scale and clip for stability\n    priorities[~infeasible_bins] += adaptive_factor[~infeasible_bins]\n\n    # Noise for tie-breaking\n    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))\n\n    return priorities\n\n[Reflection]\nFocus on tight-fit rewards, gap penalties, fill-level adaptation, and infeasibility handling.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}