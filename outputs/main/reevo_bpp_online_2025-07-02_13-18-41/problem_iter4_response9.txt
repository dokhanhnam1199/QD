```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility penalty: very low priority if item doesn't fit
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Calculate remaining capacity after placing item.
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[remaining_capacities < 0] = -1  # To avoid -inf in subsequent calculations. Necessary for zero-sized items.

    # Available bins (where item fits).
    available_bins = bins_remain_cap >= item

    if np.any(available_bins):  # Prevents errors if all bins are infeasible
        # Tight-fit bonus: prioritize bins where the item fills a large portion
        # Prioritize based on the ratio of the item size to the bin's remaining capacity.
        capacity_ratio = item / bins_remain_cap[available_bins]
        priorities[available_bins] += 2 * capacity_ratio  # Increased weight

        # Waste penalty: reduce priority if too much space is wasted. Invert wasted space
        # Penalize bins with a lot of wasted space after placing the item.
        waste_ratio = remaining_capacities[available_bins] / bins_remain_cap[available_bins]
        priorities[available_bins] += (1 - waste_ratio)**2  # More aggressive penalty

        # Near-full avoidance: avoid bins that become nearly full, balancing fill density and fragmentation
        near_full_threshold = 0.95
        near_full_bins = (bins_remain_cap[available_bins] - item) / bins_remain_cap[available_bins] < (1 - near_full_threshold)
        priorities[available_bins][near_full_bins] -= 0.75  # Increased penalty.

        # Moderate fragmentation avoidance: penalize bins with very small remaining capacities *after* placing the item.
        small_remaining_threshold = 0.1
        small_remaining_bins = remaining_capacities[available_bins] / bins_remain_cap[available_bins] < small_remaining_threshold
        priorities[available_bins][small_remaining_bins] -= 0.5  # Additional moderate penalty

        # Add a small random noise to break ties
        priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
