```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get a very negative priority.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    available_bins = bins_remain_cap >= item

    if np.any(available_bins):
        # Rule 2: Prioritize almost full bins aggressively
        almost_full = (bins_remain_cap[available_bins] - item) <= (0.2 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1.0)
        priorities[available_bins[almost_full]] += 50  # Substantially increased bonus for almost full

        # Rule 3: Quantify "good fit" using relative remaining capacity.
        remaining_capacity_ratio = (bins_remain_cap[available_bins] - item) / (bins_remain_cap[available_bins] + 1e-9)
        priorities[available_bins] -= remaining_capacity_ratio * 10 # Scale penalty based on remaining capacity

        # Rule 4: Reward approaching target fullness (70%), using scaled bonus
        max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1.0
        target_fullness = 0.70 * max_cap
        fullness_deviation = np.abs((bins_remain_cap[available_bins] - item) - target_fullness)
        normalized_deviation = fullness_deviation / max_cap
        fullness_bonus = np.exp(-normalized_deviation**2 / 0.05) #Aggressive reward
        priorities[available_bins] += fullness_bonus * 20

    # Rule 5: Normalize priorities locally to prevent dominance
    if np.any(available_bins):
        available_priorities = priorities[available_bins]
        priorities[available_bins] = (available_priorities - np.mean(available_priorities)) / (np.std(available_priorities) + 1e-9)

    # Rule 6: Add tiny noise for tie-breaking.
    priorities[available_bins] += np.random.normal(0, 1e-7, size=np.sum(available_bins))
    return priorities
```
