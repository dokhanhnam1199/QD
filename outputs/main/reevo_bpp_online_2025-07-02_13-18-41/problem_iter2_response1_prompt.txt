{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility: Assign very low priority to bins that cannot fit the item\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf  # Extremely low priority\n\n    # Best Fit Criterion: Prioritize bins where the remaining capacity is close to zero after adding the item.\n    # Avoid fragmentation. Use smaller bins first to save bigger bins for potentially larger items in the future\n    feasible_mask = bins_remain_cap >= item\n    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_capacity_after_fit  # Smaller remaining capacity is preferred (higher priority)\n\n    # Level the bins with respect to fillness so that some bins are not negligibly used\n    fill_ratios = (bins_remain_cap - item) / bins_remain_cap\n\n    # Bonus for bins that fit well without wasting too much space. Balance between best fit and fragmentation.\n    bonus_mask = (fill_ratios > 0) & (fill_ratios < 0.2) # can be hyper-parameter tuned.\n    priorities[bonus_mask] += 1 # add bonus to give these bin priority\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: Bins that can fit the item get a base priority boost.\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1.0  # Base boost for fitting\n\n    # Rule 2: Higher priority to bins with tighter fit (minimize wasted space)\n    wasted_space = bins_remain_cap - item\n    \n    #Avoid negative values, only penalize bins too small.\n    wasted_space[wasted_space < 0] = 1e9  # Assign a very large wasted space if item doesn't fit\n    \n    # If wasted_space are small, then the bin is a better fit. So we will make priority a function of the inverse.\n    # We must consider only bins large enough. If the bin is too small we will give it zero priority\n\n    fit_indices = np.where(bins_remain_cap >= item)[0]\n    if len(fit_indices) > 0:\n      priorities[fit_indices] += (1.0 / (1.0 + wasted_space[fit_indices])) # smaller wasted space -> higher priority. Added one to avoid division by zero\n\n    # Rule 3: Penalize bins that become nearly full after adding the item\n    almost_full = (bins_remain_cap > item) & (bins_remain_cap - item <= 0.1) # e.g. remaining < 10%\n\n    priorities[almost_full] -= 0.5  # Slight penalty to avoid bins packed nearly full unless necessary\n\n    # Rule 4:  If item is small, prioritize bins with low occupancy\n    if item < 0.2: #consider only small items\n        occupancy = 1.0 - bins_remain_cap #Occupancy level of each bin. (1- remain_cap)\n        priorities += (1.0 - occupancy) * 0.3 # Prefer less full bins when item is small. Weighing is important so we don't overemphasize.\n\n    return priorities\n\n[Reflection]\nPrioritize fitting. Invert wasted space. Penalize near-full bins. Small items prefer low occupancy.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}