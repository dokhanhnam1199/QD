```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities # No bin can fit the item

    # Calculate remaining capacity after placing the item (for feasible bins only)
    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item

    # Heuristic 1: Try to fill bins as much as possible (minimize wasted space). Prioritize bins where remaining capacity after placement is small.
    priorities[feasible_bins] = -remaining_capacity_after_placement

    # Heuristic 2: Avoid creating bins with tiny remaining capacities (fragmentation). Penalize bins that result in very small remaining capacity after placement.
    tiny_capacity_threshold = 0.1  # Adjust this threshold as needed
    fragmentation_penalty = -100  # Adjust this penalty as needed
    priorities[feasible_bins & (remaining_capacity_after_placement < tiny_capacity_threshold)] += fragmentation_penalty

    # Heuristic 3: Give a bonus for near-full bins after placement. Incentivize finishing bins.
    near_full_bonus_threshold = 0.05 # If the remaining space is less than 5% of bin size, strongly prioritize this bin. Assume bin_size = 1.
    near_full_bonus = 100
    priorities[feasible_bins & (remaining_capacity_after_placement <= near_full_bonus_threshold)] += near_full_bonus

    #Heuristic 4: If an item fills a bin, highly prioritize it
    exact_fit_bonus = 500
    priorities[feasible_bins & (remaining_capacity_after_placement == 0)] += exact_fit_bonus


    return priorities
```
