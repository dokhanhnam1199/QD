```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Initialize with a small negative value for bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Calculate remaining capacity after placing item.
    remaining_capacities = bins_remain_cap - item

    # Define the available bins (bins where item fits).
    available_bins = ~infeasible_bins

    # Prioritize bins that are a good fit (not too much waste, not too little space).
    # A bin is a good fit if (remaining_capacities / item) is close to 0
    # and item/bin_remain_cap is close to 1.
    waste_ratio = remaining_capacities[available_bins] / bins_remain_cap[available_bins]
    fill_ratio = item / bins_remain_cap[available_bins]

    priorities[available_bins] = 1 - np.abs(waste_ratio - 0.0) - np.abs(fill_ratio - 1.0)


    # Scale by inverse bin size to prefer filling smaller bins first.
    priorities[available_bins] /= (bins_remain_cap[available_bins] + 0.1)

    # Add small noise to break ties.
    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
