```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspiration: prioritize bins that can fit the item with minimal waste.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        waste = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (waste + 0.0001)  # Avoid division by zero, and smaller waste is higher priority
        priorities[fit_mask] += 1 # Make bins that fit better than the ones that do not

    # If no bins can fit, try to fit in almost full bins with a penalty
    else:
      ratios = item / bins_remain_cap
      priorities = -ratios # prefer to fill less
      priorities = priorities - 100 # make it less preferable

    return priorities
```
