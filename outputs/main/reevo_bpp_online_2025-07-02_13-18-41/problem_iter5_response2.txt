```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a large negative priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = np.inf  # Mark infeasible bins

    # Capacity ratio
    capacity_ratio = item / bins_remain_cap
    # Tight fit reward, scaled by item size and capacity ratio
    tight_fit_reward = (1 - wasted_space / bins_remain_cap) * item * capacity_ratio
    priorities[~infeasible_bins] += tight_fit_reward[~infeasible_bins] * 2

    # Large gap penalty
    large_gap_threshold = 0.75
    large_gap_penalty = -10  # Increased penalty
    large_gap = wasted_space / bins_remain_cap > large_gap_threshold
    priorities[large_gap] += large_gap_penalty

    # Near-full reward: Bins close to full get a bonus
    near_full_threshold = 0.95
    near_full_reward = 5  # Increased reward
    near_full = (bins_remain_cap - item) / bins_remain_cap > near_full_threshold
    priorities[near_full] += near_full_reward

    # Adaptive penalty/bonus based on fill level
    fill_level = 1 - wasted_space / bins_remain_cap
    adaptive_factor = np.clip(fill_level * 5, -2, 2)  # Scale and clip for stability
    priorities[~infeasible_bins] += adaptive_factor[~infeasible_bins]

    # Noise for tie-breaking
    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))

    return priorities
```
