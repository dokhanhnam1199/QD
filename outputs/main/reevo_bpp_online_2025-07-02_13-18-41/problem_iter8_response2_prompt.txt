{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Infeasibility: Assign a very large negative priority to infeasible bins\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # 2. Remaining Capacity Ratio: Encourage bins where item fills a significant portion\n    capacity_ratio = item / bins_remain_cap\n    # Apply sigmoid-like function centered around 1 to prioritize bins where item nearly fills it\n    fill_priority = 1 / (1 + np.exp(-10 * (capacity_ratio - 0.95)))  # Higher if closer to full\n    priorities[~infeasible_bins] += fill_priority[~infeasible_bins] * 50\n\n    # 3. Waste Ratio Penalty: Penalize large remaining space after placing the item\n    wasted_space = bins_remain_cap - item\n    wasted_space[wasted_space < 0] = 0  # Treat infeasible bins as no waste for calculation\n\n    waste_ratio = wasted_space / bins_remain_cap\n    waste_penalty = waste_ratio**2 * 20  # Square it to penalize even larger waste more\n    priorities[~infeasible_bins] -= waste_penalty[~infeasible_bins]\n    \n    # 4. Near Full Reward: Bonus for filling up bins close to their max\n    near_full_threshold = 0.98\n    near_full_bonus = ((bins_remain_cap - item) / bins_remain_cap < (1 - near_full_threshold)) * 100\n    priorities[~infeasible_bins] += near_full_bonus[~infeasible_bins]\n    \n\n    # 5. Adaptive Scaling: Adjust the magnitude of priority based on remaining capacity\n    remaining_capacity_ratio = bins_remain_cap / np.max(bins_remain_cap) # Scale remaining capacity\n\n    priorities[~infeasible_bins] *= (1+ remaining_capacity_ratio[~infeasible_bins] * 0.1)  # slight preference for bins with larger remaining capacity\n\n    # 6. Noise for Tie-breaking: Add tiny random noise to break ties\n    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Infeasible bins get a very negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Rule 2: Quantify \"good fit\" using relative wasted space.\n    # A good fit minimizes the *ratio* of wasted space to the item size.\n    available_bins = bins_remain_cap >= item\n    if np.any(available_bins):\n        wasted_space = bins_remain_cap[available_bins] - item\n        relative_wasted_space = wasted_space / (item + 1e-9) # avoid division by zero if item is 0\n\n        # Good fit = low relative wasted space.  Invert and scale.\n        # Add a small constant to the denominator to avoid division by zero and smooth the function.\n        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)\n\n        # Further improve good fit by considering bin occupancy, penalize bins which are empty or almost full.\n        occupancy = 1.0 - bins_remain_cap[available_bins] / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.0 #handle edge case where max cap is zero\n        occupancy_penalty = np.abs(occupancy - 0.5) #Bins that are near half full are preferable.\n\n        priorities[available_bins] -= occupancy_penalty * 0.2\n\n        #Reward bins approaching a target fullness (e.g., 75%)\n        target_fullness = 0.75 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.0\n        target_range = 0.1 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.1 #Scale relative to maximum bin size.\n        \n        target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness)**2) / (2 * target_range**2))\n        priorities[available_bins] += target_bonus * 0.5\n\n\n    # Rule 3: Prioritize almost full bins to complete them, but make it relative to bin size.\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1 * np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else bins_remain_cap >=item )\n    priorities[almost_full] += 10  # Give a significant bonus to almost full bins\n\n    # Rule 4: Add some noise to break ties randomly.\n    available_bins = bins_remain_cap >= item\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Reflection]\nFocus on relative wasted space, target fullness, and prioritizing almost-full bins based on bin size.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}