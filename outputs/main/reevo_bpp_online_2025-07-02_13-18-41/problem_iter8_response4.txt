```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:


    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get a very negative priority.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Rule 2: Quantify "good fit" using relative wasted space and bin capacity ratio.
    available_bins = bins_remain_cap >= item
    max_cap = np.max(bins_remain_cap) if np.any(bins_remain_cap) else 0.0  # Handle edge case where all bins are infeasible.

    if np.any(available_bins):
        wasted_space = bins_remain_cap[available_bins] - item
        relative_wasted_space = wasted_space / (item + 1e-9)  # avoid division by zero if item is 0

        # Bin capacity ratio (remaining capacity / total capacity)
        bin_capacity_ratio = bins_remain_cap[available_bins] / max_cap if max_cap > 0 else 0.0

        # Good fit = low relative wasted space and large bin capacity ratio. Invert and scale.
        priority_good_fit = 1.0 / (0.01 + relative_wasted_space)
        priority_capacity_ratio = bin_capacity_ratio * 0.5
        priorities[available_bins] = priority_good_fit + priority_capacity_ratio

        # Penalize bins which are empty or almost full, scaled by item size ratio
        occupancy = 1.0 - bin_capacity_ratio
        occupancy_penalty = np.abs(occupancy - 0.5) * (item / max_cap if max_cap > 0 else 0.0)
        priorities[available_bins] -= occupancy_penalty * 0.2

        # Reward bins approaching a target fullness (e.g., 75%), scaled by item size.
        target_fullness = 0.75 * max_cap if max_cap > 0 else 0.0
        target_range = 0.1 * max_cap if max_cap > 0 else 0.1  # Scale relative to maximum bin size.

        remaining_after_pack = bins_remain_cap[available_bins] - item
        target_bonus = np.exp(-((remaining_after_pack - (max_cap - target_fullness))**2) / (2 * target_range**2))
        priorities[available_bins] += target_bonus * 0.5 * (item / max_cap if max_cap > 0 else 0.0)

    # Rule 3: Prioritize almost full bins to complete them, scale based on remaining cap
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1 * max_cap if max_cap > 0 else (bins_remain_cap >= item))
    if np.any(almost_full):
        priorities[almost_full] += 10 * (1 - bins_remain_cap[almost_full] / max_cap if max_cap > 0 else 1) * (item / max_cap if max_cap > 0 else 0.0) #Scale by item size.

    # Rule 4: Add some noise to break ties randomly, scaled by item size.
    available_bins = bins_remain_cap >= item
    if np.any(available_bins):
        priorities[available_bins] += np.random.normal(0, 1e-6 * (item / max_cap if max_cap > 0 else 1), size=np.sum(available_bins))

    return priorities
```
