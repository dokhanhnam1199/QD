```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Assign -inf priority to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # 2. First-Fit-Decreasing Inspired: Give higher priority to bins with smaller remaining capacity that *can* fit the item.
    #    Rationale: Prefer filling bins that are already somewhat full to avoid creating many near-empty bins.
    #    We want to penalize large gaps, so use a decreasing function of the *available* space *after* adding the item.
    #    Note that we're only considering feasible bins at this point.
    
    feasible_bins = ~infeasible_bins
    remaining_space_after_fit = bins_remain_cap[feasible_bins] - item
    
    # Linear penalty scaled by inverse bin size. Add a small constant to remaining capacity for numerical stability.
    priorities[feasible_bins] = -remaining_space_after_fit + (0.5/(bins_remain_cap[feasible_bins] + 1e-9))
    
    # 3. Avoidance of near-full bins: slightly reduced priorities for near full bins. Reduce penalty as bin gets large to avoid over penalizing
    near_full_bins = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1) #Bins close to being full after fitting the item
    priorities[near_full_bins] -= 0.05 * (1/(bins_remain_cap[near_full_bins]+1e-9))

    return priorities
```
