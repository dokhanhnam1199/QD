```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a very low priority
    priorities[bins_remain_cap < item] = -1e9

    # Calculate remaining capacity
    remaining_capacities = bins_remain_cap - item

    # Only consider feasible bins
    available_bins = bins_remain_cap >= item

    # Best Fit Criterion with a relative waste metric
    # Prioritize bins where the ratio of remaining capacity to item size is small
    waste_ratio = remaining_capacities[available_bins] / item
    priorities[available_bins] = -waste_ratio

    # Fill Rate Criterion:
    # Also, prioritize bins where the item fills a significant portion of the bin
    fill_rate = item / bins_remain_cap[available_bins]
    priorities[available_bins] += fill_rate

    # Combination of waste and fill rate, balanced with bin capacity
    combined_metric = (fill_rate - np.abs(waste_ratio)) / (1 + bins_remain_cap[available_bins])
    priorities[available_bins] = combined_metric
  
    # Bonus for using bins that are neither too full nor too empty.  Balances fragmentation and efficiency.
    # A good range for the fill rate might be between 0.5 and 0.9.
    good_fill_bins = available_bins & (fill_rate >= 0.5) & (fill_rate <= 0.9)
    priorities[good_fill_bins] += 0.1 # Small constant bonus
    
    # Add small random noise to break ties
    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
