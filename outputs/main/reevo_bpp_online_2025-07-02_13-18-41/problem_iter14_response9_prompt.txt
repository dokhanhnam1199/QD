{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Infeasible bins get a very negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Rule 2: Quantify \"good fit\" using relative wasted space.\n    available_bins = bins_remain_cap >= item\n    if np.any(available_bins):\n        wasted_space = bins_remain_cap[available_bins] - item\n        relative_wasted_space = wasted_space / (bins_remain_cap[available_bins] + 1e-9)\n        # Local normalization: Normalize relative wasted space within available bins\n        relative_wasted_space = (relative_wasted_space - np.min(relative_wasted_space)) / (np.max(relative_wasted_space) - np.min(relative_wasted_space) + 1e-9) if np.max(relative_wasted_space) > np.min(relative_wasted_space) else np.zeros_like(relative_wasted_space)\n        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)\n\n        # Reward bins approaching a target fullness (e.g., 75% of bin capacity)\n        max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1.0\n        target_fullness = 0.75 * max_cap\n        target_range = 0.15 * max_cap\n\n        target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness)**2) / (2 * target_range**2))\n        priorities[available_bins] += target_bonus * 0.8 # Adjusted bonus\n\n    # Rule 3: Prioritize almost full bins to complete them\n    almost_full_threshold = 0.15 * max_cap if max_cap>0 else 0.15\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < almost_full_threshold)\n    priorities[almost_full] += 20  # Increased bonus further\n\n    # Rule 4: Add small noise for tie-breaking.\n    available_bins = bins_remain_cap >= item\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Infeasible bins get a very negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Rule 2: Quantify \"good fit\" using relative wasted space.\n    available_bins = bins_remain_cap >= item\n    if np.any(available_bins):\n        wasted_space = bins_remain_cap[available_bins] - item\n        relative_wasted_space = wasted_space / (item + 1e-9) # Using item size for relative calculation\n\n        # Good fit = low relative wasted space. Invert and scale. Using item size for normalization\n        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)\n\n        # Reward bins approaching a target fullness (e.g., 75%)\n        max_cap = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 1.0\n        target_fullness = 0.75 * max_cap\n        target_range = 0.2 * max_cap\n\n        target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness)**2) / (2 * target_range**2))\n        priorities[available_bins] += target_bonus * 0.5\n\n        # Rule 3: Prioritize almost full bins to complete them, but make it relative to bin size.\n        almost_full_threshold = 0.1 * max_cap\n        almost_full = (bins_remain_cap[available_bins] - item < almost_full_threshold)\n        priorities[available_bins][almost_full] += 10  # Significant bonus to almost full bins\n\n    # Rule 4: Add some noise to break ties randomly, scaled by item size.\n    noise_std = 1e-6 * item\n    priorities[available_bins] += np.random.normal(0, noise_std, size=np.sum(available_bins))\n\n    return priorities\n\n[Reflection]\nNormalization based on item size and relative thresholds yields better performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}