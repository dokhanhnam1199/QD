```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a large negative priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Calculate remaining space after placing the item
    remaining_space = bins_remain_cap - item
    remaining_space[remaining_space < 0] = np.inf  # Mark infeasible bins

    # Capacity ratio
    capacity_ratio = item / bins_remain_cap

    # Reward near-full bins, penalize large gaps
    near_full_threshold = 0.95
    large_gap_threshold = 0.2

    near_full_bonus = 7.0
    large_gap_penalty = -5.0

    near_full_bins = (capacity_ratio > near_full_threshold) & (~infeasible_bins)
    large_gap_bins = (remaining_space / bins_remain_cap) > large_gap_threshold

    priorities[near_full_bins] += near_full_bonus
    priorities[large_gap_bins & ~infeasible_bins] += large_gap_penalty

    # Fill density reward, scaled adaptively
    priorities[~infeasible_bins] += capacity_ratio[~infeasible_bins] * (3 + 2 * capacity_ratio[~infeasible_bins])

    # Adaptive penalty for excessive waste relative to item size
    waste_ratio = remaining_space / item
    excessive_waste = waste_ratio > 0.8
    priorities[excessive_waste & ~infeasible_bins] -= 4 * waste_ratio[excessive_waste & ~infeasible_bins]

    # Adaptive bonus for filling close to the bin's capacity
    fullness_threshold = 0.6
    fullness_ratio = item / bins_remain_cap
    high_fullness = fullness_ratio > fullness_threshold
    priorities[high_fullness & ~infeasible_bins] += 5 * fullness_ratio[high_fullness & ~infeasible_bins]

    # Encourage bins that are at least half full
    halfway_full = capacity_ratio > 0.5
    priorities[halfway_full & ~infeasible_bins] += 1.5

    # Noise for tie-breaking, scaled by remaining capacity
    noise_std = 1e-6 * bins_remain_cap[~infeasible_bins]
    priorities[~infeasible_bins] += np.random.normal(0, noise_std, size=np.sum(~infeasible_bins))

    return priorities
```
