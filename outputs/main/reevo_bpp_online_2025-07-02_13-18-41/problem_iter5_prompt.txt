{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nRefine fit/waste metrics using capacity ratios. Directly penalize large gaps and reward near-full bins. Use adaptive penalties/bonuses and noise for tie-breaking to balance fill density and fragmentation.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a large negative priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    wasted_space[wasted_space < 0] = np.inf  # Mark infeasible bins\n\n    # Tight fit priority: Inverted wasted space, normalized by item size.\n    # Higher is better (less waste). Use a small constant to avoid division by zero if wasted_space is exactly zero.\n    tight_fit_priority = 1 / (wasted_space + 1e-9) * item\n    priorities[~infeasible_bins] += tight_fit_priority[~infeasible_bins]\n\n    # Avoid near-full bins penalty: Penalize bins that become almost full after placement.\n    near_full_threshold = 0.95\n    almost_full = (bins_remain_cap - item) / bins_remain_cap < (1 - near_full_threshold)\n    priorities[almost_full] -= 10\n\n    # Fill density: encourage bins to be as close to full as possible.\n    fill_density = item / bins_remain_cap\n    priorities[~infeasible_bins] += fill_density[~infeasible_bins] * 5 # scale fill_density to have better impact\n\n    # Bonus for filling bins more than half way\n    half_full_threshold = 0.5\n    more_than_half_full = (bins_remain_cap - item) / bins_remain_cap < half_full_threshold\n    priorities[more_than_half_full] += 2\n\n    # Add tiny noise for tie-breaking\n    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}