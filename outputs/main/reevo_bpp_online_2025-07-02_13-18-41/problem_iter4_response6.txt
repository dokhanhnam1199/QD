```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a large negative priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = np.inf  # Mark infeasible bins

    # Tight fit priority: Inverted wasted space, normalized by item size.
    # Higher is better (less waste). Use a small constant to avoid division by zero if wasted_space is exactly zero.
    tight_fit_priority = 1 / (wasted_space + 1e-9) * item
    priorities[~infeasible_bins] += tight_fit_priority[~infeasible_bins]

    # Avoid near-full bins penalty: Penalize bins that become almost full after placement.
    near_full_threshold = 0.95
    almost_full = (bins_remain_cap - item) / bins_remain_cap < (1 - near_full_threshold)
    priorities[almost_full] -= 10

    # Fill density: encourage bins to be as close to full as possible.
    fill_density = item / bins_remain_cap
    priorities[~infeasible_bins] += fill_density[~infeasible_bins] * 5 # scale fill_density to have better impact

    # Bonus for filling bins more than half way
    half_full_threshold = 0.5
    more_than_half_full = (bins_remain_cap - item) / bins_remain_cap < half_full_threshold
    priorities[more_than_half_full] += 2

    # Add tiny noise for tie-breaking
    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))

    return priorities
```
