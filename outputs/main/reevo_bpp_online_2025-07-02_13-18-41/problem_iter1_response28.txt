```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Prioritize bins that can fit the item
            space_waste = cap - item
            # Give higher priority to bins with less remaining space *after* placing the item, but not zero-space waste
            if space_waste > 0:
                priorities[i] = 1 / space_waste  # Higher priority for less waste.
            else:
                 priorities[i] = 1000 # Max priority for perfect fit

        else:
            # Negative priority if it does not fit.
            priorities[i] = -1

    return priorities
```
