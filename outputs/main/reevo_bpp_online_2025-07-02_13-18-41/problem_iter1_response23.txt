```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Bins that can fit the item get a base priority boost.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0  # Base boost for fitting

    # Rule 2: Higher priority to bins with tighter fit (minimize wasted space)
    wasted_space = bins_remain_cap - item
    
    #Avoid negative values, only penalize bins too small.
    wasted_space[wasted_space < 0] = 1e9  # Assign a very large wasted space if item doesn't fit
    
    # If wasted_space are small, then the bin is a better fit. So we will make priority a function of the inverse.
    # We must consider only bins large enough. If the bin is too small we will give it zero priority

    fit_indices = np.where(bins_remain_cap >= item)[0]
    if len(fit_indices) > 0:
      priorities[fit_indices] += (1.0 / (1.0 + wasted_space[fit_indices])) # smaller wasted space -> higher priority. Added one to avoid division by zero

    # Rule 3: Penalize bins that become nearly full after adding the item
    almost_full = (bins_remain_cap > item) & (bins_remain_cap - item <= 0.1) # e.g. remaining < 10%

    priorities[almost_full] -= 0.5  # Slight penalty to avoid bins packed nearly full unless necessary

    # Rule 4:  If item is small, prioritize bins with low occupancy
    if item < 0.2: #consider only small items
        occupancy = 1.0 - bins_remain_cap #Occupancy level of each bin. (1- remain_cap)
        priorities += (1.0 - occupancy) * 0.3 # Prefer less full bins when item is small. Weighing is important so we don't overemphasize.

    return priorities
```
