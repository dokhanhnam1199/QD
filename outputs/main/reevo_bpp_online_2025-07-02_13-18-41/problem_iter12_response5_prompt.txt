{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1.0\n\n    # Rule 1: Infeasible bins get a very negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Rule 2: Quantify \"good fit\" using relative wasted space and reward smaller wasted space\n    available_bins = bins_remain_cap >= item\n    if np.any(available_bins):\n        wasted_space = bins_remain_cap[available_bins] - item\n        relative_wasted_space = wasted_space / (max_cap + 1e-9)  # Scale to bin capacity\n\n        priorities[available_bins] = 5.0 / (0.01 + relative_wasted_space)  # Higher initial priority\n\n        # Rule 3: Reward bins approaching a target fullness (e.g., 90% of bin capacity)\n        target_fullness = 0.9 * max_cap # Adjusted Target\n        target_range = 0.1 * max_cap\n\n        target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness)**2) / (2 * target_range**2))\n        priorities[available_bins] += target_bonus * 10 # Increased target bonus\n\n        # Rule 4: Penalize bins with very large remaining capacity.\n        large_waste = bins_remain_cap[available_bins] - item > 0.6 * max_cap  # Threshold\n        priorities[available_bins][large_waste] -= 3 #Penalty for Large Waste.\n\n    # Rule 5: Prioritize almost full bins to complete them\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1 * max_cap if max_cap > 0 else bins_remain_cap >=item) #Tuned Value\n    priorities[almost_full] += 20 # Increased almost full bonus\n\n    # Rule 6: Adaptive penalty for bins when item size is large.\n    large_item_penalty = -item/max_cap *5 if max_cap >0 else 0\n    priorities[available_bins] += large_item_penalty\n\n    # Rule 7: Add small noise for tie-breaking.\n    available_bins = bins_remain_cap >= item\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Infeasible bins get a very negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Rule 2: Quantify \"good fit\" using relative wasted space.\n    available_bins = bins_remain_cap >= item\n    if np.any(available_bins):\n        wasted_space = bins_remain_cap[available_bins] - item\n        relative_wasted_space = wasted_space / (bins_remain_cap[available_bins] + 1e-9)\n\n        # Good fit = low relative wasted space.  Invert and scale.\n        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)\n\n\n        #Reward bins approaching a target fullness (e.g., 75%)\n        max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0  #Avoid edge case where bins_remain_cap is empty\n        target_fullness = 0.75 * max_cap\n        target_range = 0.2 * max_cap #Scale relative to maximum bin size. Increased range.\n\n        target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness)**2) / (2 * target_range**2))\n        priorities[available_bins] += target_bonus * 0.5\n\n\n    # Rule 3: Prioritize almost full bins to complete them, but make it relative to remaining capacity.\n    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0 #Avoid edge case where bins_remain_cap is empty\n    almost_full_threshold = 0.1 * max_cap\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < almost_full_threshold)\n    priorities[almost_full] += 10  # Give a significant bonus to almost full bins, relatively\n\n    # Rule 4: Add some noise to break ties randomly.\n    available_bins = bins_remain_cap >= item\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Reflection]\nScale features relative to bin capacity. Tune bonus/penalty magnitudes. Avoid unnecessary `max_cap` calculations.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}