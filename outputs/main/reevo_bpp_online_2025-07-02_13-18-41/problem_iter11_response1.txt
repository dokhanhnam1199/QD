```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 1.0 # Use maximum as proxy for full bin size.

    # Rule 1: Infeasible bins get a very negative priority.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Rule 2: Quantify "good fit" using relative wasted space.
    available_bins = bins_remain_cap >= item
    if np.any(available_bins):
        wasted_space = bins_remain_cap[available_bins] - item
        relative_wasted_space = wasted_space / (bin_capacity + 1e-9)  #Scale to bin capacity

        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)

        # Reward bins approaching a target fullness (e.g., 75% of bin capacity)
        target_fullness = 0.75 * bin_capacity
        target_range = 0.15 * bin_capacity

        target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness)**2) / (2 * target_range**2))
        priorities[available_bins] += target_bonus * 0.7


        #Penalize wasted space if item is large relative to bin_capacity
        item_relative_size = item / bin_capacity
        if item_relative_size > 0.5:
            waste_penalty = relative_wasted_space*5 # Increased penalty for larger items in bins with high relative waste
            priorities[available_bins] -= waste_penalty


    # Rule 3: Prioritize almost full bins to complete them
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.15 * bin_capacity)
    priorities[almost_full] += 15

    # Rule 4: Add small noise for tie-breaking.
    available_bins = bins_remain_cap >= item
    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
