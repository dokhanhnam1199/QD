```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Feasibility - Bins that cannot fit the item get negative infinity priority.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Rule 2: Prioritize fitting - Give a substantial base priority to feasible bins
    feasible_mask = bins_remain_cap >= item
    priorities[feasible_mask] += 1.0

    # Rule 3: Invert wasted space - Higher priority to tighter fits (smaller wasted space)
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_mask] = np.inf  # penalize infeasible bins by making their wasted space infinite
    priorities[feasible_mask] += 1.0 / (1.0 + wasted_space[feasible_mask])  # smaller wasted space -> higher priority

    # Rule 4: Penalize near-full bins (but only if the item fits)
    almost_full = feasible_mask & (bins_remain_cap - item <= 0.1)
    priorities[almost_full] -= 0.5

    # Rule 5: Small items prefer low occupancy
    if item < 0.2:
        occupancy = 1.0 - bins_remain_cap / np.max(bins_remain_cap) # Occupancy level of each bin normalized
        priorities[feasible_mask] += (1.0 - occupancy[feasible_mask]) * 0.3

    return priorities
```
