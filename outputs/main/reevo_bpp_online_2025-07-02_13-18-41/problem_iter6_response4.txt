```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility penalty: very low priority if item doesn't fit
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Calculate remaining capacity after placing item.
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[remaining_capacities < 0] = -1  # To avoid -inf in subsequent calculations.

    # Available bins (where item fits).
    available_bins = bins_remain_cap >= item

    if np.any(available_bins):  # Prevents errors if all bins are infeasible
        # Tight-fit bonus: prioritize bins where the item fills a large portion
        capacity_ratio = item / bins_remain_cap[available_bins]
        priorities[available_bins] += 3 * capacity_ratio  # Increased weight. Emphasize tight fit

        # Waste penalty: reduce priority if too much space is wasted
        waste_ratio = remaining_capacities[available_bins] / bins_remain_cap[available_bins]
        priorities[available_bins] -= 2 * waste_ratio**2  # Aggressive penalty for significant waste

        # Fragmentation penalty: penalize bins with small remaining capacities after placing the item.
        small_remaining_threshold = 0.2
        small_remaining_bins = remaining_capacities[available_bins] / bins_remain_cap[available_bins] < small_remaining_threshold
        priorities[available_bins][small_remaining_bins] -= 1  # Moderate penalty for fragmentation

        # Near-full penalty. Avoid bins that become almost full.
        near_full_threshold = 0.9
        near_full_bins = (bins_remain_cap[available_bins] - item) / bins_remain_cap[available_bins] < (1 - near_full_threshold)
        priorities[available_bins][near_full_bins] -= 1.5 # Higher near-full penalty.

        # Bonus for filling bins reasonably well without over-filling
        reasonable_fill_threshold_low = 0.6
        reasonable_fill_threshold_high = 0.9
        reasonably_filled_bins = (capacity_ratio > reasonable_fill_threshold_low) & (capacity_ratio < reasonable_fill_threshold_high)
        priorities[available_bins][reasonably_filled_bins] += 0.5 # small bonus

        # Add a small random noise to break ties, scaled by remaining capacity
        noise_std = 1e-6 * bins_remain_cap[available_bins]
        priorities[available_bins] += np.random.normal(0, noise_std, size=np.sum(available_bins))

    return priorities
```
