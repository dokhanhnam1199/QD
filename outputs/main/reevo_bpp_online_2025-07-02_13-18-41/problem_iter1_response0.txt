```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Immediate Fit: High priority if item fits perfectly
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # Max priority for perfect fit

    # Best Fit: High priority for bins where item nearly fills bin
    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap < 2 * item)
    priorities[almost_fit] = 100 / (bins_remain_cap[almost_fit] - item + 0.001)  # Prioritize smaller wasted space

    # Worst Fit: Low priority (but still possible) for bins with lots of space
    large_capacity = bins_remain_cap >= 2 * item
    priorities[large_capacity] = 1 / bins_remain_cap[large_capacity] # Slightly encourage using emptier bins, but not by much
    
    # Penalize bins that are too small. Make them extremely undesirable.
    too_small = bins_remain_cap < item
    priorities[too_small] = -1000 # Extremely low priority; avoid at all costs
    
    return priorities
```
