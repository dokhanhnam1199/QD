{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasibility penalty\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    available_bins = bins_remain_cap >= item\n\n    if np.any(available_bins):\n        # Calculate wasted space\n        wasted_space = bins_remain_cap[available_bins] - item\n\n        # Relative wasted space priority.\n        relative_wasted_space = wasted_space / (item + 1e-9)\n        priorities[available_bins] = -relative_wasted_space\n\n        # Target fullness bonus. Adaptive target based on item size.\n        max_cap = np.max(bins_remain_cap)\n        target_fullness = max_cap - 0.25 * max_cap # Aim for 75% fullness post-packing.\n        target_range = 0.15 * max_cap  # Allowable deviation.\n        bonus_strength = 1.0\n        target_bonus = bonus_strength * np.exp(-((bins_remain_cap[available_bins] - item - target_fullness) ** 2) / (2 * target_range ** 2))\n        priorities[available_bins] += target_bonus\n\n        # Adaptive large gap penalty based on item and bin size.\n        large_gap_threshold = 0.4 * item\n        large_gap_penalty_strength = 0.5\n        large_gap_penalty = (wasted_space > large_gap_threshold) * (wasted_space / max_cap) * large_gap_penalty_strength if max_cap > 0 else (wasted_space > large_gap_threshold) * wasted_space * large_gap_penalty_strength\n        priorities[available_bins] -= large_gap_penalty\n\n        # Adaptive tight fit bonus.\n        tight_fit_threshold = 0.15 * item\n        tight_fit_bonus_strength = 0.75\n        tight_fit_bonus = (wasted_space <= tight_fit_threshold) * (item / max_cap) * tight_fit_bonus_strength if max_cap > 0 else (wasted_space <= tight_fit_threshold) * item * tight_fit_bonus_strength\n        priorities[available_bins] += tight_fit_bonus\n\n        # Almost full bonus: increase the chance to fill a bin completely\n        almost_full_threshold = 0.1 * max_cap\n        almost_full = (bins_remain_cap[available_bins] >= item) & (wasted_space < almost_full_threshold)\n        priorities[available_bins][almost_full] += 5\n\n        # Bin utilization bonus to utilize most of the available bins\n\n        bin_utilization = (max_cap - bins_remain_cap[available_bins]) / max_cap if max_cap > 0 else 0.0\n        priorities[available_bins] += bin_utilization * 0.1\n\n        # Random noise for tie-breaking.  Reduced magnitude.\n        noise_std = 1e-7 * max_cap if max_cap > 0 else 1e-7\n        priorities[available_bins] += np.random.normal(0, noise_std, size=np.sum(available_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Infeasible bins get a very negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Rule 2: Quantify \"good fit\" using relative wasted space.\n    # A good fit minimizes the *ratio* of wasted space to the item size.\n    available_bins = bins_remain_cap >= item\n    if np.any(available_bins):\n        wasted_space = bins_remain_cap[available_bins] - item\n        relative_wasted_space = wasted_space / (item + 1e-9) # avoid division by zero if item is 0\n\n        # Good fit = low relative wasted space.  Invert and scale.\n        # Add a small constant to the denominator to avoid division by zero and smooth the function.\n        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)\n\n        # Further improve good fit by considering bin occupancy, penalize bins which are empty or almost full.\n        max_cap = np.max(bins_remain_cap)\n        occupancy = 1.0 - bins_remain_cap[available_bins] / max_cap if max_cap > 0 else 0.0 #handle edge case where max cap is zero\n        occupancy_penalty = np.abs(occupancy - 0.5) #Bins that are near half full are preferable.\n\n        priorities[available_bins] -= occupancy_penalty * 0.2\n\n        #Reward bins approaching a target fullness (e.g., 75%)\n        target_fullness = 0.75 * max_cap if max_cap > 0 else 0.0\n        target_range = 0.1 * max_cap if max_cap > 0 else 0.1 #Scale relative to maximum bin size.\n        \n        target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness)**2) / (2 * target_range**2))\n        priorities[available_bins] += target_bonus * 0.5\n\n        # Penalize bins with very high remaining capacity, discouraging fragmentation\n        high_capacity_threshold = 0.9 * max_cap if max_cap > 0 else 0.9\n        high_capacity = bins_remain_cap[available_bins] > high_capacity_threshold\n        priorities[available_bins][high_capacity] -= 0.1\n\n\n    # Rule 3: Prioritize almost full bins to complete them, but make it relative to bin size.\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1 * max_cap if max_cap>0 else bins_remain_cap >=item )\n    priorities[almost_full] += 10  # Give a significant bonus to almost full bins\n\n    # Rule 4: Add some noise to break ties randomly.\n    available_bins = bins_remain_cap >= item\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Reflection]\nFocus on relative wasted space, bin occupancy, target fullness, and penalizing high capacity.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}