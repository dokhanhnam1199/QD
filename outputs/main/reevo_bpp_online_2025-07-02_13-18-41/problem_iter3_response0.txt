```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get very low priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Calculate wasted space if item is placed in each bin.
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = 0  # Avoid negative wasted space

    # Capacity ratio: item size relative to bin capacity
    capacity_ratio = item / bins_remain_cap

    # Heuristic: prioritize tight fits, penalize wasted space, and avoid near-full bins.
    # Higher score for smaller wasted space (inverted)
    # Higher score for bins not already too full.
    available_bins = bins_remain_cap >= item
    priorities[available_bins] = (1 / (1 + wasted_space[available_bins])) * (1 - capacity_ratio[available_bins])

    # Add small noise to break ties.
    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))

    return priorities
```
