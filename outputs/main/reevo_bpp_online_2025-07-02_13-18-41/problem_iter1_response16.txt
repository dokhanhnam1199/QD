```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary criterion: Can the item fit?
            priorities[i] = 1

            # Secondary criterion: Minimize wasted space
            waste = cap - item
            priorities[i] += (1 / (waste + 0.0001))  # Avoid division by zero, smaller waste = higher priority

            # Tertiary criterion: Penalize almost full bins to encourage reuse of partially filled bins. Avoid filling too many bins at almost full level which hinders later insertion.
            if waste < (np.mean(bins_remain_cap) / 2 if len(bins_remain_cap)>0 else 0.1): #avoid being too sensitive to bin sizes when bins_remain_cap is empty or near zero length
               priorities[i] -= 0.5
        else:
            priorities[i] = -np.inf #ensure it won't fit in.

    return priorities
```
