```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a very low priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Calculate remaining capacity after placing the item
    remaining_capacity = bins_remain_cap - item
    remaining_capacity[remaining_capacity < 0] = np.inf

    # Fill ratio
    fill_ratio = item / bins_remain_cap

    # Tight-Fit Reward (scaled)
    tight_fit_reward_scale = 5  # Adjust scaling factor as needed
    tight_fit_reward = (1 - remaining_capacity / bins_remain_cap) * fill_ratio * tight_fit_reward_scale
    priorities[~infeasible_bins] += tight_fit_reward[~infeasible_bins]

    # Fragmentation Penalty (Adaptive)
    fragmentation_penalty_scale = -2  # Adjust scaling factor as needed
    fragmentation_threshold = 0.8  # Adjust threshold for large fragmentation

    fragmentation_penalty = np.where(remaining_capacity / bins_remain_cap > fragmentation_threshold,
                                      (remaining_capacity / bins_remain_cap) * fragmentation_penalty_scale,
                                      0)

    priorities[~infeasible_bins] += fragmentation_penalty[~infeasible_bins]

    # Near-Full Reward (Adaptive)
    near_full_reward_scale = 3  # Adjust scaling factor as needed
    near_full_threshold = 0.95  # Adjust threshold for near-full

    near_full_reward = np.where((bins_remain_cap - item) / bins_remain_cap > near_full_threshold,
                                  near_full_reward_scale,
                                  0)

    priorities[~infeasible_bins] += near_full_reward[~infeasible_bins]

    # Balanced Fill Level Bonus (Adaptive)
    balanced_fill_bonus_scale = 1 # Adjust scaling factor as needed
    balanced_lower_threshold = 0.6
    balanced_upper_threshold = 0.9

    balanced_fill_bonus = np.where(
        (~infeasible_bins) & (fill_ratio >= balanced_lower_threshold) & (fill_ratio <= balanced_upper_threshold),
        balanced_fill_bonus_scale,
        0
    )
    priorities[~infeasible_bins] += balanced_fill_bonus[~infeasible_bins]

    # Tie-breaking Noise
    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))

    return priorities
```
