```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit the item

    # Calculate remaining capacity after placing the item (for feasible bins only)
    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item

    # Heuristic 1: Minimize fragmentation. Penalize small remaining capacities more heavily.
    tiny_capacity_threshold = 0.1
    fragmentation_penalty = -1000  # Increased penalty for fragmentation
    priorities[feasible_bins & (remaining_capacity_after_placement < tiny_capacity_threshold)] += fragmentation_penalty

    # Heuristic 2: Reward near-full bins. Strong incentive to finish bins.
    near_full_bonus_threshold = 0.05
    near_full_bonus = 500  # Increased bonus for near-full bins
    priorities[feasible_bins & (remaining_capacity_after_placement <= near_full_bonus_threshold)] += near_full_bonus

    # Heuristic 3: Exact fit is ideal!  Much higher priority
    exact_fit_bonus = 1000  # Even higher bonus for exact fit
    priorities[feasible_bins & (remaining_capacity_after_placement == 0)] += exact_fit_bonus

    # Heuristic 4: Penalize bins with significant remaining capacity after placement.
    # This encourages filling bins to a reasonable level.
    large_capacity_threshold = 0.5
    large_capacity_penalty = -50
    priorities[feasible_bins & (remaining_capacity_after_placement > large_capacity_threshold)] += large_capacity_penalty

    # Heuristic 5: Moderate remaining cap penalty - avoids completely empty bins if possible
    very_large_capacity_threshold = 0.9
    very_large_capacity_penalty = -100
    priorities[feasible_bins & (remaining_capacity_after_placement > very_large_capacity_threshold)] += very_large_capacity_penalty
    # Heuristic 6: Base priority based on fill percentage.  Prioritizes bins with higher fill %
    fill_percentage = (bins_remain_cap[feasible_bins] - remaining_capacity_after_placement) / 1.0 # Assume bin size is 1
    priorities[feasible_bins] += fill_percentage * 10 # Scale fill percentage into priority score


    return priorities
```
