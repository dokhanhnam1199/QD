{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a large negative priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    wasted_space[wasted_space < 0] = np.inf  # Mark infeasible bins\n\n    # Tight fit priority: Inverted wasted space, normalized by bin capacity\n    # and item size. Higher is better (less waste).\n    tight_fit_priority = (bins_remain_cap[~infeasible_bins] > 0) / (wasted_space[~infeasible_bins] * item) if np.any(~infeasible_bins & (bins_remain_cap > 0)) else 0\n\n    if isinstance(tight_fit_priority, (int, float)):\n        priorities[~infeasible_bins] = tight_fit_priority\n    else:\n        priorities[~infeasible_bins] = tight_fit_priority\n\n    # Avoid near-full bins penalty: Penalize bins that become almost full after placement.\n    near_full_threshold = 0.95\n    almost_full = (bins_remain_cap - item) / bins_remain_cap < (1 - near_full_threshold)\n    priorities[almost_full] -= 10  # Substantial penalty\n\n    # Fill density: encourage bins to be as close to full as possible.\n    fill_density = item / bins_remain_cap\n    priorities[~infeasible_bins] += fill_density[~infeasible_bins]\n\n    # Add tiny noise for tie-breaking\n    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Assign -inf priority to bins that can't fit the item\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n    \n    # 2. First-Fit-Decreasing Inspired: Give higher priority to bins with smaller remaining capacity that *can* fit the item.\n    #    Rationale: Prefer filling bins that are already somewhat full to avoid creating many near-empty bins.\n    #    We want to penalize large gaps, so use a decreasing function of the *available* space *after* adding the item.\n    #    Note that we're only considering feasible bins at this point.\n    \n    feasible_bins = ~infeasible_bins\n    remaining_space_after_fit = bins_remain_cap[feasible_bins] - item\n    \n    # Linear penalty scaled by inverse bin size. Add a small constant to remaining capacity for numerical stability.\n    priorities[feasible_bins] = -remaining_space_after_fit + (0.5/(bins_remain_cap[feasible_bins] + 1e-9))\n    \n    # 3. Avoidance of near-full bins: slightly reduced priorities for near full bins. Reduce penalty as bin gets large to avoid over penalizing\n    near_full_bins = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1) #Bins close to being full after fitting the item\n    priorities[near_full_bins] -= 0.05 * (1/(bins_remain_cap[near_full_bins]+1e-9))\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, smaller gaps, and avoid creating near-empty bins. Adjust penalties based on bin size for stability.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}