{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a very low priority\n    priorities[bins_remain_cap < item] = -1e9\n\n    # Calculate remaining capacity\n    remaining_capacities = bins_remain_cap - item\n\n    # Only consider feasible bins\n    available_bins = bins_remain_cap >= item\n\n    # Best Fit Criterion with a relative waste metric\n    # Prioritize bins where the ratio of remaining capacity to item size is small\n    waste_ratio = remaining_capacities[available_bins] / item\n    priorities[available_bins] = -waste_ratio\n\n    # Fill Rate Criterion:\n    # Also, prioritize bins where the item fills a significant portion of the bin\n    fill_rate = item / bins_remain_cap[available_bins]\n    priorities[available_bins] += fill_rate\n\n    # Combination of waste and fill rate, balanced with bin capacity\n    combined_metric = (fill_rate - np.abs(waste_ratio)) / (1 + bins_remain_cap[available_bins])\n    priorities[available_bins] = combined_metric\n  \n    # Bonus for using bins that are neither too full nor too empty.  Balances fragmentation and efficiency.\n    # A good range for the fill rate might be between 0.5 and 0.9.\n    good_fill_bins = available_bins & (fill_rate >= 0.5) & (fill_rate <= 0.9)\n    priorities[good_fill_bins] += 0.1 # Small constant bonus\n    \n    # Add small random noise to break ties\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a large negative priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    wasted_space[wasted_space < 0] = np.inf  # Mark infeasible bins\n\n    # Capacity ratio\n    capacity_ratio = item / bins_remain_cap\n    # Tight fit reward, scaled by item size and capacity ratio\n    tight_fit_reward = (1 - wasted_space / bins_remain_cap) * item * capacity_ratio\n    priorities[~infeasible_bins] += tight_fit_reward[~infeasible_bins] * 2\n\n    # Large gap penalty\n    large_gap_threshold = 0.75\n    large_gap_penalty = -10  # Increased penalty\n    large_gap = wasted_space / bins_remain_cap > large_gap_threshold\n    priorities[large_gap] += large_gap_penalty\n\n    # Near-full reward: Bins close to full get a bonus\n    near_full_threshold = 0.95\n    near_full_reward = 5  # Increased reward\n    near_full = (bins_remain_cap - item) / bins_remain_cap > near_full_threshold\n    priorities[near_full] += near_full_reward\n\n    # Adaptive penalty/bonus based on fill level\n    fill_level = 1 - wasted_space / bins_remain_cap\n    adaptive_factor = np.clip(fill_level * 5, -2, 2)  # Scale and clip for stability\n    priorities[~infeasible_bins] += adaptive_factor[~infeasible_bins]\n\n    # Noise for tie-breaking\n    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))\n\n    return priorities\n\n[Reflection]\nFocus on reward/penalty scaling, thresholds, and adaptive strategies based on fill level.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}