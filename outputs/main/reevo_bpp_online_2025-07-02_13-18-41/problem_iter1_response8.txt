```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Immediate fit gets highest priority
    immediate_fit = (bins_remain_cap == item)
    priorities[immediate_fit] = 1000  # High priority

    # Bins that can accommodate the item
    can_accommodate = (bins_remain_cap >= item)
    
    # Prioritize bins that will have the least remaining space after placing item. This heuristic is called Minimum Waste heuristic.
    waste = bins_remain_cap - item
    priorities[can_accommodate] = 100 / (waste[can_accommodate] + 0.00001)  # Add a small constant to avoid division by zero

    # Very high priority for almost full bins to prevent large waste at the end
    almost_full = (bins_remain_cap > item) & (waste <= item/4) #If wasted space is <= a quarter of item size.
    priorities[almost_full] = 500

    return priorities
```
