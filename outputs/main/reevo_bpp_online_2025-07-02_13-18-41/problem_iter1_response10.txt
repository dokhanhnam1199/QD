```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Assign high priority to bins where item fits
    fit_indices = remaining_after_add >= 0
    priorities[fit_indices] = 1

    # Adjust priorities based on how well the item fits
    fit_caps = bins_remain_cap[fit_indices]
    remaining_caps = remaining_after_add[fit_indices]

    # Heuristic to prefer bins with a good fit (not too tight, not too loose)
    # Prioritize bins where remaining capacity is a moderate fraction of bin size
    priority_scores = np.exp(-np.abs(remaining_caps / fit_caps - 0.5))
    priorities[fit_indices] = priority_scores

    # Give slight penalty for bins filled beyond 75% (to encourage more even packing)
    # This avoids bins getting filled to very small capacities early on
    high_fill_indices = bins_remain_cap < 0.25
    priorities[high_fill_indices] = 0  # Very low priority if nearly full, even if item "fits" because of prior error.

    # Scale priorities to ensure range [0, 1]
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities = priorities / max_priority

    return priorities
```
