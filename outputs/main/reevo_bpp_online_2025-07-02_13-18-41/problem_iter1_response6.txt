```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First-Fit Decreasing heuristic: prefer bins where the item fits
    # and prioritize those with less remaining space.
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            priorities[i] = 1 / (cap - item + 1e-9)  # Avoid division by zero
        else:
            priorities[i] = -1 # assign a low priority to bins that cannot accommodate

    # Modify priorities based on utilization
    utilization = 1 - bins_remain_cap / np.max(bins_remain_cap) #Use max cap as reference. If not known, we should estimate that.
    priorities += utilization

    return priorities
```
