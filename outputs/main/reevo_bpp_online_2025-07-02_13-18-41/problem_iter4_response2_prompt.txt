{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility: Assign very low priority to bins that cannot fit the item\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf  # Extremely low priority\n\n    # Best Fit Criterion: Prioritize bins where the remaining capacity is close to zero after adding the item.\n    # Avoid fragmentation. Use smaller bins first to save bigger bins for potentially larger items in the future\n    feasible_mask = bins_remain_cap >= item\n    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_capacity_after_fit  # Smaller remaining capacity is preferred (higher priority)\n\n    # Bonus for bins that fit well without wasting too much space. Balance between best fit and fragmentation.\n    # Also consider bins that are not too empty.  We want to avoid bins that are barely used.\n    fill_ratio_after_fit = (bins_remain_cap[feasible_mask] - item) / bins_remain_cap[feasible_mask]\n    bonus_mask = (fill_ratio_after_fit > 0.05) & (fill_ratio_after_fit < 0.2)  # Slightly tighter range, avoids very small or large wastes\n    priorities[feasible_mask][bonus_mask] += 1  # add bonus to give these bin priority\n\n    # Penalize almost full bins\n    almost_full_mask = (bins_remain_cap > item) & (bins_remain_cap <= item * 1.1)  # Adjusted factor\n    priorities[almost_full_mask] -= 0.5\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Initialize with a small negative value for bins that can't fit the item.\n    priorities[bins_remain_cap < item] = -1e9\n\n    # Calculate remaining capacity after placing item.\n    remaining_capacities = bins_remain_cap - item\n    remaining_capacities[remaining_capacities < 0] = -1 # Handle cases where item does not fit, to avoid -inf in the calculations. This assignment is necessary for handling zero-sized items.\n\n    # Define the available bins (bins where item fits).\n    available_bins = bins_remain_cap >= item\n\n    # Prioritize bins that are a good fit (not too much waste, not too little space).\n    # A bin is a good fit if (remaining_capacities / item) < some threshold and item/bin_remain_cap < threshold.\n    fit_threshold = 0.2\n    priorities[available_bins] = (1 - np.abs(remaining_capacities[available_bins] / item - 1))/(1 + bins_remain_cap[available_bins]) + (1 - np.abs(item/bins_remain_cap[available_bins] -1))/(1 + bins_remain_cap[available_bins])\n    # Add small noise to break ties.\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Reflection]\nThe better code uses relative metrics and noise for tie-breaking, improving exploration and balance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}