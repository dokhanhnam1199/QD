```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: High priority for bins that can fit the item.
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] += 1

    # 2. Remaining capacity after placing the item:
    remaining_capacity = bins_remain_cap - item
    remaining_capacity[~feasible_bins] = -1  # Mark infeasible bins

    # 3. Fill percentage: Prioritize bins that will be filled reasonably well.
    fill_percentage = item / bins_remain_cap
    priorities[feasible_bins] += (1 - np.abs(fill_percentage[feasible_bins] - 0.7)) # prefer 70%
    # 4. Bins that are almost full (but can still accommodate) are good choices
    almost_full = (bins_remain_cap > item) & (bins_remain_cap <= item * 1.2)
    priorities[almost_full] += 2

    # 5. Bonus for nearly full bins. Gives preference to almost empty bins to consolidate items, and discourage nearly full bins which might lead to fragments.
    nearly_empty = bins_remain_cap > (item * 3) # try to find an empty enough bin
    priorities[nearly_empty] -= 0.5

    return priorities
```
