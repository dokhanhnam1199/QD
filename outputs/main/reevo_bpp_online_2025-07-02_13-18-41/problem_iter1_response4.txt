```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # First-Fit Decreasing inspired heuristic: prioritize bins that can fit the item closely
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask): #Only calculate priorities if there is a feasible bin
        priorities[fit_mask] = bins_remain_cap[fit_mask] - item
        priorities[~fit_mask] = -np.inf #Setting infeasible bins to -inf

        #Further improve by using relative capacity, avoiding fragmentation
        relative_capacities = item/ bins_remain_cap[fit_mask]
        priorities[fit_mask] = -relative_capacities #Invert as we want the smallest capacity *relative to item*
    else:
        # If no bin fits, prioritize the fullest bin to minimize number of bins used in the long run
        priorities = bins_remain_cap

    return priorities
```
