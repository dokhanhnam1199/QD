{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Infeasible bins get a large negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Rule 2: Quantify \"good fit\" using relative wasted space.\n    # A good fit minimizes the *ratio* of wasted space to the item size.\n    available_bins = bins_remain_cap >= item\n    if np.any(available_bins):\n        wasted_space = bins_remain_cap[available_bins] - item\n        relative_wasted_space = wasted_space / item\n\n        # Good fit = low relative wasted space.  Invert and scale.\n        # Add a small constant to the denominator to avoid division by zero and smooth the function.\n        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)\n\n        # Further improve good fit by considering bin occupancy, penalize bins which are empty or almost full.\n        bin_size = np.max(bins_remain_cap)\n        if bin_size > 0:\n            occupancy = 1.0 - bins_remain_cap[available_bins] / bin_size\n            occupancy_penalty = np.abs(occupancy - 0.5)  # Bins that are near half full are preferable.\n            priorities[available_bins] -= occupancy_penalty * 0.2\n        else:\n            priorities[available_bins] -= 0.2 # if bin size is zero, add default penalty\n\n    # Rule 3: Prioritize almost full bins to complete them\n    almost_full_threshold = 0.1\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item <= almost_full_threshold)\n    priorities[almost_full] += 10  # Give a significant bonus to almost full bins\n\n    # Rule 4: Add some noise to break ties randomly.\n    available_bins = bins_remain_cap >= item\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Infeasible bins get a very negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Rule 2: Quantify \"good fit\" using relative wasted space and bin capacity ratio.\n    available_bins = bins_remain_cap >= item\n    if np.any(available_bins):\n        wasted_space = bins_remain_cap[available_bins] - item\n        relative_wasted_space = wasted_space / (item + 1e-9) # avoid division by zero if item is 0\n        \n        # Bin capacity ratio (remaining capacity / total capacity)\n        bin_capacity_ratio = bins_remain_cap[available_bins] / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0 #handle edge case where max cap is zero\n\n        # Good fit = low relative wasted space and large bin capacity ratio.  Invert and scale.\n        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space) + bin_capacity_ratio * 0.5\n\n        # Penalize bins which are empty or almost full, scaled by item size ratio\n        occupancy = 1.0 - bin_capacity_ratio\n        occupancy_penalty = np.abs(occupancy - 0.5) * (item / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0)\n\n        priorities[available_bins] -= occupancy_penalty * 0.2\n\n        # Reward bins approaching a target fullness (e.g., 75%), scaled by item size.\n        target_fullness = 0.75 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.0\n        target_range = 0.1 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.1 #Scale relative to maximum bin size.\n\n        target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness)**2) / (2 * target_range**2))\n        priorities[available_bins] += target_bonus * 0.5 * (item / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0)\n\n    # Rule 3: Prioritize almost full bins to complete them, scale based on remaining cap\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1 * np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else bins_remain_cap >=item )\n    priorities[almost_full] += 10 * (1 - bins_remain_cap[almost_full]/np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1)\n\n    # Rule 4: Add some noise to break ties randomly, scaled by item size.\n    available_bins = bins_remain_cap >= item\n    priorities[available_bins] += np.random.normal(0, 1e-6 * (item / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1), size=np.sum(available_bins))\n\n    return priorities\n\n[Reflection]\nConsider bin capacity ratio, target fullness, and scaling factors based on item and bin sizes.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}