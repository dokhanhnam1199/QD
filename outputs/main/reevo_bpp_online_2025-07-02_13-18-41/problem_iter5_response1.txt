```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a large negative priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # Wasted space ratio
    wasted_space = bins_remain_cap - item
    wasted_space_ratio = wasted_space / bins_remain_cap
    wasted_space_ratio[infeasible_bins] = np.inf

    # Tight fit priority:  Reward bins with minimal wasted space ratio.
    tight_fit_priority = -wasted_space_ratio
    priorities[~infeasible_bins] += tight_fit_priority[~infeasible_bins] * 10

    # Large gap penalty: Penalize large wasted space ratios more heavily.
    large_gap_threshold = 0.8
    large_gap_penalty = (wasted_space_ratio - large_gap_threshold)
    large_gap_penalty[wasted_space_ratio <= large_gap_threshold] = 0
    priorities[wasted_space_ratio > large_gap_threshold] -= large_gap_penalty[wasted_space_ratio > large_gap_threshold] * 20

    # Near full bonus: Reward bins that become near full.
    near_full_threshold = 0.95
    remaining_capacity_ratio = (bins_remain_cap - item) / bins_remain_cap
    near_full_bonus = (near_full_threshold - remaining_capacity_ratio)
    near_full_bonus[remaining_capacity_ratio >= near_full_threshold] = 0
    priorities[remaining_capacity_ratio < near_full_threshold] += near_full_bonus[remaining_capacity_ratio < near_full_threshold] * 30

    # Fill Density
    fill_density = item / bins_remain_cap
    priorities[~infeasible_bins] += fill_density[~infeasible_bins] * 5

    # Adaptive penalty/bonus based on item size relative to bin capacity.
    item_ratio = item / bins_remain_cap
    adaptive_factor = np.clip(item_ratio, 0.1, 0.9)  # Avoid extreme values

    # Penalty for bins that result in low fill
    low_fill_threshold = 0.2
    low_fill_penalty = (low_fill_threshold - remaining_capacity_ratio)
    low_fill_penalty[remaining_capacity_ratio >= low_fill_threshold] = 0
    priorities[remaining_capacity_ratio < low_fill_threshold] -= low_fill_penalty[remaining_capacity_ratio < low_fill_threshold] * (adaptive_factor * 15)


    # Bonus for bins with high fill
    high_fill_threshold = 0.8
    high_fill_bonus = (remaining_capacity_ratio - high_fill_threshold)
    high_fill_bonus[remaining_capacity_ratio <= high_fill_threshold] = 0
    priorities[remaining_capacity_ratio > high_fill_threshold] -= high_fill_bonus[remaining_capacity_ratio > high_fill_threshold] * (adaptive_factor * 15)


    # Add tiny noise for tie-breaking
    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))

    return priorities
```
