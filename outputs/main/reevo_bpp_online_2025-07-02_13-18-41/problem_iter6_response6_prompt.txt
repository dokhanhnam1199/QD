{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities  # No bin can fit the item\n\n    # Calculate remaining capacity after placing the item (for feasible bins only)\n    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item\n\n    # Heuristic 1: Minimize fragmentation. Penalize small remaining capacities more heavily.\n    tiny_capacity_threshold = 0.1\n    fragmentation_penalty = -1000  # Increased penalty for fragmentation\n    priorities[feasible_bins & (remaining_capacity_after_placement < tiny_capacity_threshold)] += fragmentation_penalty\n\n    # Heuristic 2: Reward near-full bins. Strong incentive to finish bins.\n    near_full_bonus_threshold = 0.05\n    near_full_bonus = 500  # Increased bonus for near-full bins\n    priorities[feasible_bins & (remaining_capacity_after_placement <= near_full_bonus_threshold)] += near_full_bonus\n\n    # Heuristic 3: Exact fit is ideal!  Much higher priority\n    exact_fit_bonus = 1000  # Even higher bonus for exact fit\n    priorities[feasible_bins & (remaining_capacity_after_placement == 0)] += exact_fit_bonus\n\n    # Heuristic 4: Penalize bins with significant remaining capacity after placement.\n    # This encourages filling bins to a reasonable level.\n    large_capacity_threshold = 0.5\n    large_capacity_penalty = -50\n    priorities[feasible_bins & (remaining_capacity_after_placement > large_capacity_threshold)] += large_capacity_penalty\n\n    # Heuristic 5: Moderate remaining cap penalty - avoids completely empty bins if possible\n    very_large_capacity_threshold = 0.9\n    very_large_capacity_penalty = -100\n    priorities[feasible_bins & (remaining_capacity_after_placement > very_large_capacity_threshold)] += very_large_capacity_penalty\n    # Heuristic 6: Base priority based on fill percentage.  Prioritizes bins with higher fill %\n    fill_percentage = (bins_remain_cap[feasible_bins] - remaining_capacity_after_placement) / 1.0 # Assume bin size is 1\n    priorities[feasible_bins] += fill_percentage * 10 # Scale fill percentage into priority score\n\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get a large negative priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n    wasted_space[wasted_space < 0] = np.inf  # Mark infeasible bins\n\n    # Capacity ratio based tight fit\n    capacity_ratio = item / bins_remain_cap\n    tight_fit_priority = np.exp(-10 * np.abs(capacity_ratio - 1)) # Peaks at capacity ratio = 1 (item == remaining capacity)\n\n    priorities[~infeasible_bins] += tight_fit_priority[~infeasible_bins] * 10 # Scale tight fit priority\n\n    # Large gap penalty\n    gap_ratio = wasted_space / bins_remain_cap\n    large_gap_penalty = (gap_ratio > 0.8) * (gap_ratio * 10)  # Penalize gaps exceeding 80% of bin size\n    priorities[~infeasible_bins] -= large_gap_penalty[~infeasible_bins]\n\n    # Near-full bin reward\n    near_full_threshold = 0.95\n    near_full_reward = ((bins_remain_cap - item) / bins_remain_cap < (1 - near_full_threshold)) * 5\n    priorities[~infeasible_bins] += near_full_reward[~infeasible_bins]\n\n    # Adaptive penalty/bonus based on bin utilization\n    bin_utilization = (bins_remain_cap - wasted_space) / bins_remain_cap  # Fraction of the bin that would be filled\n    adaptive_factor = np.clip(bin_utilization, 0, 1)\n    priorities[~infeasible_bins] += adaptive_factor[~infeasible_bins] * 3 # Reward higher utilization\n\n    # Noise for tie-breaking\n    priorities[~infeasible_bins] += np.random.normal(0, 1e-6, size=np.sum(~infeasible_bins))\n\n    return priorities\n\n[Reflection]\nPrioritize infeasibility, use ratios/adaptive factors, and add noise for tie-breaking.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}