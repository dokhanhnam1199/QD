```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very high priority for bins that can fit the item perfectly (or almost perfectly)
    perfect_fit = np.isclose(bins_remain_cap, item, atol=1e-6)
    priorities[perfect_fit] = 1000  # Assign a very high priority
    
    # High priority for bins where the item fits and the remaining space is small
    # This helps to fill up the bins as much as possible
    fits = bins_remain_cap >= item
    remaining_space = bins_remain_cap - item
    
    priorities[fits] = 100 / (remaining_space[fits] + 0.001) #Avoid division by zero; the smaller remaining space gets higher priority.

    # Prioritize bins with larger remaining capacity to avoid creating too many nearly-full bins early.
    priorities[fits] += bins_remain_cap[fits] / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
    
    #Assign a very small negative priority to bins where the item doesn't fit, ensuring that fitting bins are always prioritized.
    priorities[~fits] = -0.00001
    
    return priorities
```
