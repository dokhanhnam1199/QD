```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Assign very low priority to bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Extremely low priority

    # Best Fit Criterion: Prioritize bins where the remaining capacity is close to zero after adding the item.
    # Avoid fragmentation. Use smaller bins first to save bigger bins for potentially larger items in the future
    feasible_mask = bins_remain_cap >= item
    remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_capacity_after_fit  # Smaller remaining capacity is preferred (higher priority)

    # Level the bins with respect to fillness so that some bins are not negligibly used
    fill_ratios = (bins_remain_cap - item) / bins_remain_cap

    # Bonus for bins that fit well without wasting too much space. Balance between best fit and fragmentation.
    bonus_mask = (fill_ratios > 0) & (fill_ratios < 0.2) # can be hyper-parameter tuned.
    priorities[bonus_mask] += 1 # add bonus to give these bin priority

    return priorities
```
