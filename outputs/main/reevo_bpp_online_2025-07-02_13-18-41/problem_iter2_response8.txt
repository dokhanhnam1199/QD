```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very high priority for near-perfect fits
    perfect_fit = np.isclose(bins_remain_cap, item, atol=1e-6)
    priorities[perfect_fit] = 1000.0

    # High priority for bins where item fits, and remaining space is small
    fits = bins_remain_cap >= item
    if np.any(fits):  # Avoid potential division by zero if no bin fits.
        remaining_space = bins_remain_cap[fits] - item
        priorities[fits] = 500.0 / (remaining_space + 0.001)

    # Moderate priority boost for bins with larger remaining capacity (but that can still fit)
    if np.any(fits):
        max_cap = np.max(bins_remain_cap)
        if max_cap > 0: #Prevent division by 0
            priorities[fits] += (bins_remain_cap[fits] / max_cap) * 100

    # Small negative priority for bins that don't fit, to ensure they are considered last
    priorities[~fits] = -0.00001

    return priorities
```
