```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Big enough, and fits best -> high priority
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item)  # Remaining space after adding. Smaller is better (First Fit Decreasing heuristic intuition). So remaining space contributes negatively to the priority

    # If it doesn't fit, assign a very low priority
    priorities[~fit_mask] = -np.inf 
    
    #Boost the bins closer to full. Prioritize filling partially full bins more than very empty bins or bins very close to full
    priorities = priorities + (bins_remain_cap / np.max(bins_remain_cap))
    
    return priorities
```
