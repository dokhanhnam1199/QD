{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_bin_cap = np.max(bins_remain_cap)\n\n    # Handle edge case where all bins are empty or max cap is zero\n    if max_bin_cap == 0:\n        max_bin_cap = 1.0  # Avoid division by zero\n\n    # Rule 1: Infeasible bins get a very negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Rule 2: Quantify \"good fit\" using relative wasted space and bin capacity ratio.\n    available_bins = bins_remain_cap >= item\n    if np.any(available_bins):\n        wasted_space = bins_remain_cap[available_bins] - item\n        relative_wasted_space = wasted_space / (item + 1e-9)  # avoid division by zero if item is 0\n\n        # Bin capacity ratio (remaining capacity / total capacity)\n        bin_capacity_ratio = bins_remain_cap[available_bins] / max_bin_cap\n\n        # Good fit = low relative wasted space and moderate to high bin capacity ratio. Invert and scale.\n        priorities[available_bins] = (1.0 / (0.01 + relative_wasted_space)) + bin_capacity_ratio * 0.3\n\n        # Penalize bins which are almost full or empty, scaled by item size ratio and emphasizing almost full\n        occupancy = 1.0 - bin_capacity_ratio\n        occupancy_penalty = np.abs(occupancy - 0.5) * (item / max_bin_cap)\n        priorities[available_bins] -= occupancy_penalty * 0.4  # Increased penalty\n\n        # Reward bins approaching a target fullness (e.g., 75%), scaled by item size. Using a Gaussian distribution for smoother reward\n        target_fullness = 0.75 * max_bin_cap\n        target_range = 0.15 * max_bin_cap  # Increased range for more bins to be in target\n        target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness) ** 2) / (2 * target_range ** 2))\n        priorities[available_bins] += target_bonus * 0.7 * (item / max_bin_cap) #Increased bonus\n\n    # Rule 3: Prioritize almost full bins to complete them, scale based on remaining cap\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1 * max_bin_cap)\n    if np.any(almost_full):\n        priorities[almost_full] += 12 * (1 - bins_remain_cap[almost_full] / max_bin_cap) #Increased base reward\n\n    # Rule 4: Add some noise to break ties randomly, scaled by item size. Reduce overall noise\n    available_bins = bins_remain_cap >= item\n    priorities[available_bins] += np.random.normal(0, 1e-7 * (item / max_bin_cap), size=np.sum(available_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Infeasible bins get a very negative priority.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9\n\n    # Get bin size\n    bin_size = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1.0\n\n    # Rule 2: Quantify \"good fit\" using relative wasted space.\n    # A good fit minimizes the *ratio* of wasted space to the item size.\n    available_bins = bins_remain_cap >= item\n    if np.any(available_bins):\n        wasted_space = bins_remain_cap[available_bins] - item\n        relative_wasted_space = wasted_space / (item + 1e-9)  # avoid division by zero if item is 0\n\n        # Good fit = low relative wasted space. Invert and scale.\n        priorities[available_bins] = 1.0 / (0.01 + relative_wasted_space)\n\n        # Further improve good fit by considering bin occupancy, penalize bins which are far from ideal occupancy.\n        occupancy = 1.0 - bins_remain_cap[available_bins] / bin_size\n        ideal_occupancy = 0.75 # Target 75% occupancy\n        occupancy_penalty = np.abs(occupancy - ideal_occupancy)  # Prefer bins near the target occupancy.\n        priorities[available_bins] -= occupancy_penalty * 0.3\n\n        # Reward bins approaching a target fullness (e.g., 75%)\n        target_fullness = ideal_occupancy * bin_size # Target 75%\n        target_range = 0.1 * bin_size # Tolerance of 10%\n\n        target_bonus = np.exp(-((bins_remain_cap[available_bins] - item - target_fullness) ** 2) / (2 * target_range ** 2))\n        priorities[available_bins] += target_bonus * 0.6\n\n        # Penalize large gaps, adapt penalty to item size\n        large_gap_threshold = 0.4 * bin_size  # Define \"large\" relative to bin size (40%)\n        large_gap_penalty = (wasted_space > large_gap_threshold) * (wasted_space / bin_size) * 0.2  # Scale with gap size, more sensitive\n        priorities[available_bins] -= large_gap_penalty\n\n    # Rule 3: Prioritize almost full bins to complete them, but make it relative to bin size.\n    almost_full_threshold = 0.1 * bin_size # Threshold of 10%\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item < almost_full_threshold)\n    priorities[almost_full] += 12  # Give a significant bonus to almost full bins\n\n    # Rule 4: Add some noise to break ties randomly.\n    priorities[available_bins] += np.random.normal(0, 1e-6, size=np.sum(available_bins))\n\n    return priorities\n\n[Reflection]\nFocus on relative metrics (wasted space, occupancy), adaptive penalties/rewards based on bin/item sizes, and targeted fullness.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}