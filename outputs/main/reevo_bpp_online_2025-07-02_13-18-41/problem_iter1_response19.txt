```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Bins that can't fit the item get a priority of -np.inf
    priorities[bins_remain_cap < item] = -np.inf

    # Rule 2: If a bin can fit the item perfectly, give it maximum priority
    perfect_fit = (bins_remain_cap == item)
    priorities[perfect_fit] = np.inf

    # Rule 3: For bins that can fit the item, prioritize bins with less remaining space *after* the item is placed.
    # This encourages filling bins more completely.  We use a small constant to avoid division by zero.
    valid_bins = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = -remaining_after_fit # Negative because smaller remaining space is better
    
    #Rule 4: Tie break: favor bins with higher current fill level relative to bin size
    #this might help in scenarios where bins are close to being full already
    priorities[valid_bins] += (1 - (bins_remain_cap[valid_bins] / (bins_remain_cap[valid_bins] + item - remaining_after_fit)))

    return priorities
```
