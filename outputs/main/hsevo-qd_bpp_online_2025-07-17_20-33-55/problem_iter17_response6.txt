```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates bin priorities combining fill ratio, waste, and bonus."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # 1. Infeasible penalty
    priorities[~feasible_bins] = -np.inf

    # 2. Fill ratio
    fill_ratios = item / bins_remain_cap
    priorities[feasible_bins] = fill_ratios[feasible_bins]

    # 3. Waste bonus: Favor bins with small waste relative to their size
    waste = bins_remain_cap - item
    normalized_waste = waste / bins_remain_cap
    small_waste_threshold = 0.1
    small_waste_bonus = np.where(normalized_waste < small_waste_threshold, (1 - normalized_waste)**2, 0)  # Bonus for small waste
    priorities[feasible_bins] += small_waste_bonus[feasible_bins]

    # 4. Perfect fit bonus
    perfect_fit = np.isclose(waste, 0)
    priorities[perfect_fit] = np.inf # big bonus for perfect fit

    # 5. Random tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
