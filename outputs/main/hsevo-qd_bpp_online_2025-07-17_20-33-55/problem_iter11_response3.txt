```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste penalty, fullness bonus, and noise."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Fill ratio
    fill_ratios = item / bins_remain_cap
    fill_ratios[infeasible_bins] = 0  # Set to 0 for infeasible bins

    # Waste penalty
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf
    normalized_waste = waste / item
    waste_penalty = np.exp(-normalized_waste)

    # Fullness bonus
    normalized_remain_cap = bins_remain_cap / np.max(bins_remain_cap)
    fullness_bonus = 1 - normalized_remain_cap

    # Combine factors with weights. Dynamically scale waste penalty
    waste_penalty_weight = 0.5
    fullness_bonus_weight = 0.3
    fill_ratio_weight = 1.0

    priorities[~infeasible_bins] = (
        fill_ratio_weight * fill_ratios[~infeasible_bins]
        - waste_penalty_weight * waste_penalty[~infeasible_bins]
        + fullness_bonus_weight * fullness_bonus[~infeasible_bins]
    )

    # Add noise
    noise_level = 1e-9
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
