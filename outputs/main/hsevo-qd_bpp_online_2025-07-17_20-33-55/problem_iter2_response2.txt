```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Assigns priority to bins considering waste, fullness, and feasibility."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - 1e9

    waste = bins_remain_cap - item
    priorities[feasible_bins] = -np.abs(waste[feasible_bins])

    # Prioritize bins closer to being full, if feasible
    priorities[feasible_bins] += 0.2 * (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap))

    # Penalize bins that will become near-empty if the item is added.
    near_empty = (bins_remain_cap - item) > 0.8 * np.max(bins_remain_cap) # check bins that are almost empty.
    priorities[feasible_bins & near_empty] -= 5 # subtract from bins that are becoming near empty.
    
    priorities[~feasible_bins] = -1e8

    return priorities
```
