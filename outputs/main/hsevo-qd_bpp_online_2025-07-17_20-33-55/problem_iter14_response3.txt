```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste penalty, and feasibility for bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # 1. Infeasibility penalty
    priorities[~feasible_bins] = -np.inf

    # 2. Fill ratio priority (only for feasible bins)
    fill_ratios = item / bins_remain_cap
    priorities[feasible_bins] = fill_ratios[feasible_bins]

    # 3. Waste penalty: Higher penalty for bins that leave small waste
    waste = bins_remain_cap - item
    normalized_waste = waste / np.max(bins_remain_cap)
    waste_penalty = np.exp(-10 * (1 - normalized_waste))  # Exponential penalty
    priorities[feasible_bins] -= waste_penalty[feasible_bins]

    # 4. Bonus for almost full bins
    almost_full_threshold = 0.9
    almost_full_bins = fill_ratios > almost_full_threshold
    priorities[feasible_bins & almost_full_bins] += 0.2

    # 5. Small random number for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
