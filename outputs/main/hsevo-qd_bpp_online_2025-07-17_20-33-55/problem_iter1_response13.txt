```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priority array with a small default value to avoid issues with empty bins.
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - 1e9

    # Only consider bins that can actually fit the item.
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        # If no bin can fit, return the initialized priority array
        return priorities

    # Calculate waste if item is placed in each valid bin
    waste = bins_remain_cap[valid_bins] - item

    # Assign priority based on minimizing waste, prefering bins that result in less waste.
    priorities[valid_bins] = -waste

    # Add a bonus for filling the bin closer to full, but only if it doesn't create too much waste.
    fill_ratio = item / bins_remain_cap[valid_bins]

    # Experiment: Apply a more complex bonus.
    # Prefer bins where the fill ratio is high, but not too high (avoid very small wastes)

    bonus = np.where((fill_ratio > 0.7) & (waste < 0.2), fill_ratio*5 , 0) #Moderate fill ratio and waste is not too high
    priorities[valid_bins] += bonus

    return priorities
```
