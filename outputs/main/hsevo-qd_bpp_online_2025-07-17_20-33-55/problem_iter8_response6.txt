```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste, feasibility, and adaptive thresholds."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # Aggressive Fill Bonus: If item fills above threshold, high priority.
    fill_threshold = 0.8
    aggressive_fill_bins = (item / bins_remain_cap) >= fill_threshold
    priorities[feasible_bins & aggressive_fill_bins] = 1000

    # Low Waste Bonus
    waste_threshold = 0.1
    low_waste_bins = (bins_remain_cap[feasible_bins] - item) / np.max(bins_remain_cap) < waste_threshold
    temp_feasible_indices = np.where(feasible_bins)[0]
    priorities[temp_feasible_indices[low_waste_bins]] = 500

    # Capacity Difference Priority: Prefer smaller capacity differences.
    capacity_diff = np.abs(bins_remain_cap - item)
    priorities[feasible_bins] = 100 - (capacity_diff[feasible_bins] / np.max(bins_remain_cap)) * 50

    # Non-empty nudge
    non_empty_bins = bins_remain_cap < np.max(bins_remain_cap)
    priorities[feasible_bins & non_empty_bins] += 5
    
    # Infeasible penalty
    priorities[~feasible_bins] = -1000

    return priorities
```
