```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, target_relative_residual: float = 0.5, random_priority_scale: float = 0.01, fill_threshold: float = 0.95, near_empty_threshold: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        target_relative_residual: Ideal relative residual capacity after placing item.
        random_priority_scale: Scale of random constant added to priorities.
        fill_threshold: Threshold for considering a bin nearly full after adding the item.
        near_empty_threshold: Threshold for considering a bin nearly empty after adding the item.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # 2. Maximize bin utilization with refined scoring:
    
    # Fill ratio: item size / remaining capacity.
    fill_ratios = item / bins_remain_cap
    
    # Residual capacity after placing item
    residual_capacity = bins_remain_cap - item
    
    # Relative residual capacity compared to item size.
    relative_residual = residual_capacity / item

    # Initialize scores
    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins]
    
    # Penalize near-full bins more aggressively:
    near_full_bins = (fill_ratios > fill_threshold) & (~infeasible_bins)
    priorities[near_full_bins] -= 10 * (fill_ratios[near_full_bins] - fill_threshold)  # Strong penalty

    # Penalize bins that become nearly empty:
    near_empty_bins = (relative_residual < near_empty_threshold) & (~infeasible_bins)
    priorities[near_empty_bins] -= 5 * (near_empty_threshold - relative_residual[near_empty_bins])  # Moderate penalty
    
    # Reward bins closer to the target relative residual, but only if not near full or empty
    optimal_residual_bins = (~near_full_bins) & (~near_empty_bins) & (~infeasible_bins)
    priorities[optimal_residual_bins] += 1 / (1 + np.abs(relative_residual[optimal_residual_bins] - target_relative_residual))

    # Add small constant to avoid identical priorities
    priorities += np.random.rand(len(bins_remain_cap)) * random_priority_scale

    return priorities
```
