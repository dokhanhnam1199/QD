```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, target_relative_residual: float = 0.5, small_constant: float = 1e-9,
                 waste_penalty_weight: float = 0.1, fullness_bonus_weight: float = 0.2) -> np.ndarray:
    """Combines fill ratio, residual capacity, waste penalty, and fullness bonus for priority."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Fill ratio and residual capacity score
    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    relative_residual = residual_capacity / item
    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins] / (1 + np.abs(relative_residual[~infeasible_bins] - target_relative_residual))

    # Waste penalty and fullness bonus
    waste = bins_remain_cap - item
    normalized_waste_bin = waste / bins_remain_cap
    small_waste_penalty = np.exp(-5 * waste / item)
    almost_full_bonus = np.exp(-20 * normalized_waste_bin)
    priorities[~infeasible_bins] += -waste_penalty_weight * small_waste_penalty[~infeasible_bins] + fullness_bonus_weight * almost_full_bonus[~infeasible_bins]

    # Small noise to break ties
    priorities += np.random.rand(len(bins_remain_cap)) * small_constant

    return priorities
```
