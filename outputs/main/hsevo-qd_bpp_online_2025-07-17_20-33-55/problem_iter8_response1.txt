```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic: fill-ratio, low waste, feasibility, and non-empty nudge."""
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item

    # High fill priority for bins close to full after placement.
    fill_threshold = 0.90
    almost_full_bins = (bins_remain_cap - item) / np.max(bins_remain_cap) > fill_threshold
    priorities[feasible_bins & almost_full_bins] = 800

    # Low waste after placement gets a medium priority.
    waste_threshold = 0.15
    low_waste_bins = (bins_remain_cap - item) / np.max(bins_remain_cap) < waste_threshold
    priorities[feasible_bins & low_waste_bins] = 400

    # Capacity difference considered with scaled priority.
    capacity_diff = np.abs(bins_remain_cap - item)
    priorities[feasible_bins] += 100 - (capacity_diff[feasible_bins] / np.max(bins_remain_cap)) * 60

    # Non-empty nudge encourages using partially filled bins.
    non_empty_bins = bins_remain_cap < np.max(bins_remain_cap)
    priorities[feasible_bins & non_empty_bins] += 10

    # Infeasible bins get a negative priority.
    priorities[~feasible_bins] = -1000

    return priorities
```
