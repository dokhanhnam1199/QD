```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Waste calculation
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    # 3. Normalized Waste Calculations (Item and Bin Relative)
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # 4. Small Waste Penalty:  Exponential penalty for small waste relative to item size.
    small_waste_penalty = np.exp(-normalized_waste_item * 5)  # Increased exponent for sharper penalty

    # 5. Fill Ratio Reward: Reward for filling the bin well.
    fill_ratio = item / bins_remain_cap

    # 6.  Introduce a "balanced" fill ratio target. Encourage bins to reach a reasonable level of fullness.
    target_fill_ratio = 0.75  # Aim for bins being 75% full, adjust as needed.
    fill_difference = np.abs(fill_ratio - target_fill_ratio)
    fill_reward = np.exp(-fill_difference * 5) # Exponential reward centered around target.

    # 7.  Bin Consolidation Bonus:  Prioritize bins that are already significantly full.
    consolidation_threshold = 0.5 # Consider bins more than 50% full.
    consolidation_bonus = (bins_remain_cap < (1-consolidation_threshold))*fill_ratio #Bonus only if bin is significantly full

    # 8. Combine factors.  Adjust weights adaptively.
    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins] + consolidation_bonus[~infeasible_bins]
    priorities[~infeasible_bins] += fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])

    # 9. Controlled Randomness:  Add small, controlled noise.
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
