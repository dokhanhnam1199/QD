```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version dynamically adjusts weights based on bin utilization and incorporates
    a best-fit consideration with adaptive parameters.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Initial weight of the small waste penalty.
        fullness_bonus_weight: Initial weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Waste Calculation
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    # Normalized Waste
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # Small Waste Penalty
    small_waste_penalty = np.exp(-normalized_waste_item)

    # Fill Ratio Reward
    fill_ratio = item / bins_remain_cap

    # Bin Utilization Adjustment: Dynamically adjust fullness bonus
    # based on how utilized bins are. If bins are generally empty,
    # encourage filling them more aggressively.

    average_utilization = np.mean((1 - bins_remain_cap / np.max(bins_remain_cap)))  # Estimate average utilization

    # Adjust the fullness bonus based on average utilization.
    # If utilization is low, increase the bonus.
    adjusted_fullness_bonus = fullness_bonus_weight * (1 + (0.5 - average_utilization))
    adjusted_fullness_bonus = np.clip(adjusted_fullness_bonus, 0, 1) # Keep bonus in reasonable range

    # Best-Fit Consideration: Prioritize bins with the least waste, but with a
    # slight penalty if the waste is extremely small (to avoid tiny fragments).
    # This is a refined version of the waste penalty.

    # Adaptive Waste Threshold:  Instead of a fixed penalty, adapt the
    # threshold for what is considered "too small" waste.
    waste_threshold = item * 0.1  # Example:  10% of item size

    # Modified Waste Penalty:  Apply a higher penalty for waste smaller
    # than the adaptive threshold.
    modified_waste_penalty = np.where(waste < waste_threshold,
                                      2 * np.exp(-normalized_waste_item),  # Higher penalty for very small waste
                                      small_waste_penalty)

    # Combine the factors
    priorities[~infeasible_bins] = fill_ratio[~infeasible_bins] - waste_penalty_weight * modified_waste_penalty[~infeasible_bins] + \
                                 adjusted_fullness_bonus * (1 - normalized_waste_bin[~infeasible_bins])

    # Add noise
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
