```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2,
                fullness_bonus_weight: float = 0.3, target_relative_residual: float = 0.7,
                random_priority_scale: float = 0.01, aggressive_fill: bool = True,
                capacity_threshold: float = 0.2) -> np.ndarray:
    """Hybrid priority: combines best aspects of v0 and v1, adaptive fill."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Low capacity bins get highest priority
    low_capacity_bins = bins_remain_cap < capacity_threshold
    if np.any(low_capacity_bins):
        priorities[low_capacity_bins] = 10

    # 3. Fill ratio and residual capacity score
    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    relative_residual = residual_capacity / item
    priorities[~infeasible_bins & ~low_capacity_bins] = fill_ratios[~infeasible_bins & ~low_capacity_bins] / (
                1 + np.abs(relative_residual[~infeasible_bins & ~low_capacity_bins] - target_relative_residual))

    # 4. Aggressive fill bonus
    if aggressive_fill:
        fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
        priorities[~infeasible_bins & ~low_capacity_bins] += fullness[~infeasible_bins & ~low_capacity_bins] * 0.5

    # 5. Waste penalty (from v0)
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf
    normalized_waste_item = waste / item
    small_waste_penalty = np.exp(-normalized_waste_item)
    priorities[~infeasible_bins] -= waste_penalty_weight * small_waste_penalty[~infeasible_bins]

    # 6. Fullness bonus (from v0)
    normalized_waste_bin = waste / bins_remain_cap
    priorities[~infeasible_bins] += fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])

    # 7. Random noise
    priorities += np.random.rand(len(bins_remain_cap)) * random_priority_scale

    return priorities
```
