```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fill ratio, adaptive waste penalty, and fullness bonus.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # Infeasible penalty
    priorities[~feasible_bins] = -np.inf

    # Fill Ratio Calculation
    fill_ratio = item / bins_remain_cap
    fill_ratio[~feasible_bins] = 0

    # Waste Calculation
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf

    # Normalized Waste
    normalized_waste_bin = waste / bins_remain_cap

    # Adaptive Small Waste Penalty
    small_waste_threshold = 0.1 * bins_remain_cap
    small_waste_penalty = np.where(waste < small_waste_threshold,
                                    np.exp(5 * (waste - small_waste_threshold) / small_waste_threshold),
                                    0.0)
    
    # Fullness Bonus
    fullness_bonus = fill_ratio**2

    # Perfect Fit Bonus
    perfect_fit = np.isclose(waste, 0)
    priorities[perfect_fit] = np.inf

    # Combine factors
    priorities[~infeasible_bins] = (fill_ratio[~infeasible_bins] +
                                     fullness_bonus[~infeasible_bins] -
                                     small_waste_penalty[~infeasible_bins])

    # Add noise
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
