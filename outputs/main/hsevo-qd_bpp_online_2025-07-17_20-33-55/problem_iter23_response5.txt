```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, residual target, low waste bonus, and noise."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # 1. Infeasible penalty
    priorities[~feasible_bins] = -np.inf

    # 2. Fill ratio with residual target
    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    target_relative_residual = 0.75 #Ideal relative residual capacity
    relative_residual = residual_capacity / item
    priorities[feasible_bins] = fill_ratios[feasible_bins] / (1 + np.abs(relative_residual[feasible_bins] - target_relative_residual))

    # 3. Low waste bonus, adaptively scaled
    low_waste_threshold = 0.2 #threshold for low waste
    low_waste_amount = (bins_remain_cap[feasible_bins] - item) / np.max(bins_remain_cap)
    low_waste_bins = low_waste_amount < low_waste_threshold
    bonus_scale = np.clip(1 - (low_waste_amount[low_waste_bins] / low_waste_threshold), 0, 1)
    priorities[feasible_bins][low_waste_bins] += 0.1 * bonus_scale

    # 4. Small random number for tie-breaking
    small_constant = 1e-9 # Scale of random noise
    priorities += np.random.rand(len(bins_remain_cap)) * small_constant
    
    return priorities
```
