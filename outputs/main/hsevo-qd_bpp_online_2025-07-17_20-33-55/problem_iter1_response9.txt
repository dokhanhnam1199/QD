```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First, consider bins where the item actually fits.
            # Higher priority to bins that have just enough space (minimize wasted space).
            # Subtracting from a large number emphasizes small differences in remaining space.
            priorities[i] = 1000 - abs(cap - item)

            # Additionally, slightly prefer bins that are already somewhat full.
            # This encourages filling bins before starting new ones. The smaller 'item' impact is to avoid overfilling.
            priorities[i] += (bins_remain_cap.max() - cap)*0.1
        else:
            # Very low priority for bins that can't fit the item.
            priorities[i] = -1000  # or -np.inf

    return priorities
```
