```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best aspects of v0 and v1. Balances fill, waste, feasibility."""
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    
    #Almost Full Bins
    almost_full_threshold = 0.95
    almost_full_bins = (bins_remain_cap - item) / bins_remain_cap < (1-almost_full_threshold)
    priorities[feasible_bins & almost_full_bins] = 1000
    
    #Low Waste Bins
    low_waste_bins = (bins_remain_cap - item) / np.max(bins_remain_cap) < 0.1
    priorities[feasible_bins & low_waste_bins] = 500

    # Capacity Difference
    capacity_diff = np.abs(bins_remain_cap - item)
    priorities[feasible_bins] = 100 - (capacity_diff[feasible_bins] / np.max(bins_remain_cap)) * 50

    # Non-empty nudge
    non_empty_bins = bins_remain_cap < np.max(bins_remain_cap)
    priorities[feasible_bins & non_empty_bins] += 5

    # Infeasible penalty
    priorities[~feasible_bins] = -1000
    
    return priorities
```
