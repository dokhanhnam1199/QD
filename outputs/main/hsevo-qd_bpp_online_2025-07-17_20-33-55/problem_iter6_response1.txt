```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, target_relative_residual: float = 0.5, random_priority_scale: float = 0.01, capacity: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        target_relative_residual: Ideal relative residual capacity after placing item.
        random_priority_scale: Scale of random constant added to priorities.
        capacity: The full capacity of the bin

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # 2. Maximize bin utilization: Prefer bins where the item fills a large portion
    # of the remaining capacity, but not too large that it creates near-empty bins
    # with the next item.
    
    # Fill ratio: item size / remaining capacity. Higher is better, but should be < 1.
    fill_ratios = item / bins_remain_cap
    fill_ratios[infeasible_bins] = 0  # Set to 0 for infeasible bins, avoiding NaN

    # Residual capacity after placing item
    residual_capacity = bins_remain_cap - item
    residual_capacity[infeasible_bins] = -1 # or some other negative value

    # Relative residual capacity compared to item size. We want it large enough
    # that we will likely fill it with some other item.
    relative_residual = residual_capacity / (item + 1e-9) # Adding a small number to avoid division by zero

    # Score based on fill ratio, penalized if near-full or too empty after insertion.
    # Scale by 1 / (1+abs(relative_residual-target)), where target = ideal value (say, 0.5 or 1)
    
    # Multi-objective approach: weighted sum of fill ratio and residual capacity
    fill_weight = 0.7
    residual_weight = 0.3

    priorities[~infeasible_bins] = fill_weight * fill_ratios[~infeasible_bins] / (1 + np.abs(relative_residual[~infeasible_bins] - target_relative_residual)) + \
                                    residual_weight * (residual_capacity[~infeasible_bins] / capacity)

    # Bonus for bins that would become full (or near-full) after insertion. Prevents fragmentation
    near_full_threshold = 0.05 * capacity  # Within 5% of full capacity
    near_full_bins = (residual_capacity >= 0) & (residual_capacity <= near_full_threshold)
    priorities[near_full_bins] += 0.1  # Add a bonus to these bins


    # Adaptive Adjustment: Dynamically adjust target_relative_residual based on bin utilization.
    # If bins are generally filling up quickly (high fill ratios), lower the target.
    # If bins are becoming fragmented (low fill ratios, lots of bins with space), increase the target.
    avg_fill_ratio = np.mean(item / bins_remain_cap[bins_remain_cap > item + 1e-9])  # Avoid zero division errors
    if np.isnan(avg_fill_ratio): # in case where there are no bins that can take the current item.
        avg_fill_ratio = 0.5 # Assign average fill ratio to 0.5.
        
    if avg_fill_ratio > 0.7:
        target_relative_residual = max(0.1, target_relative_residual - 0.05)  # Lower target if bins are filling up fast
    elif avg_fill_ratio < 0.3 and np.sum(bins_remain_cap > 0) > 3:  #only adjust if there are enough bins.
         target_relative_residual = min(0.9, target_relative_residual + 0.05)  # Increase target if bins are fragmented

    # Add small constant to avoid identical priorities and encourage some differentiation.
    priorities += np.random.rand(len(bins_remain_cap)) * random_priority_scale

    return priorities
```
