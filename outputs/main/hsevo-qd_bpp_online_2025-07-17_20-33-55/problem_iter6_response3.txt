```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, target_relative_residual: float = 0.75, random_priority_scale: float = 0.01, aggressive_fill: bool = False, capacity_threshold: float = 0.2) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version introduces adaptive elements:
    - `aggressive_fill`: If True, prioritizes filling bins closer to full when sufficient capacity remains.
    - `capacity_threshold`: If bins have low remaining capacity, focus on filling them completely.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        target_relative_residual: Ideal relative residual capacity after placing item.
        random_priority_scale: Scale of random constant added to priorities.
        aggressive_fill: Whether to prioritize bins that are close to full.
        capacity_threshold: Threshold below which filling a bin takes highest priority.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Prioritize bins with very low capacity to encourage completion.
    low_capacity_bins = bins_remain_cap < capacity_threshold
    if np.any(low_capacity_bins):
        priorities[low_capacity_bins] = 10  # High priority to fill these.

    # 3. Maximize bin utilization: Prefer bins where the item fills a large portion
    # of the remaining capacity, but not too large that it creates near-empty bins
    # with the next item.
    
    # Fill ratio: item size / remaining capacity. Higher is better, but should be < 1.
    fill_ratios = item / bins_remain_cap
    
    # Residual capacity after placing item
    residual_capacity = bins_remain_cap - item
    
    # Relative residual capacity compared to item size. We want it large enough
    # that we will likely fill it with some other item.
    relative_residual = residual_capacity / item

    # Score based on fill ratio, penalized if near-full or too empty after insertion.
    # Scale by 1 / (1+abs(relative_residual-target)), where target = ideal value (say, 0.5 or 1)
    priorities[~infeasible_bins & ~low_capacity_bins] = fill_ratios[~infeasible_bins & ~low_capacity_bins] / (1 + np.abs(relative_residual[~infeasible_bins & ~low_capacity_bins] - target_relative_residual))

    # 4. Aggressive Fill: Give a boost to bins that are already relatively full
    #    This encourages using partially filled bins over empty ones (when applicable)
    if aggressive_fill:
        fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalize to bin size.
        priorities[~infeasible_bins & ~low_capacity_bins] += fullness[~infeasible_bins & ~low_capacity_bins] * 0.5

    # Add small constant to avoid identical priorities and encourage some differentiation.
    priorities += np.random.rand(len(bins_remain_cap)) * random_priority_scale

    return priorities
```
