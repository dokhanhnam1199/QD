```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste penalty, and dynamic adjustment for online bin packing."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    small_waste_penalty = np.exp(-normalized_waste_item)
    fill_ratio = item / bins_remain_cap
    priorities[~infeasible_bins] = fill_ratio[~infeasible_bins] - 0.1 * small_waste_penalty[~infeasible_bins]
    priorities[~infeasible_bins] += 0.05 * (1 - normalized_waste_bin[~infeasible_bins])
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    # Aggressive fill: If a bin is near full, prioritize it more strongly.
    near_full = bins_remain_cap > item and bins_remain_cap < 2 * item  #threshold changed to 2*item from original
    priorities[near_full] += 0.2 #increased from 0.1
    return priorities
```
