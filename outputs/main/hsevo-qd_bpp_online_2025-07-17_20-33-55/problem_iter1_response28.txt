```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item with minimal wasted space,
    but also includes a tie-breaking component that favors bins that are already
    relatively full to avoid spreading items too thinly across many bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate wasted space if item is placed in each bin.  Inf if item doesn't fit
    wasted_space = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)

    # Prioritize bins based on minimal wasted space (lower is better, invert for priority)
    # Add a small constant to avoid division by zero when all wastes are infinite.
    min_waste = np.min(wasted_space[wasted_space != np.inf]) if np.any(wasted_space != np.inf) else 0.001
    priority_waste = np.where(wasted_space == np.inf, -np.inf, 1 / (wasted_space + min_waste) )
    priority_waste[wasted_space == np.inf] = -np.inf

    # Tie-breaking component: favor bins that are already relatively full.
    # Use sigmoid function to scale remain cap into 0~1
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priority_fullness = fullness

    # Combine both priorities, weighting waste minimization slightly higher.
    priorities = 0.7 * priority_waste + 0.3 * priority_fullness
    return priorities
```
