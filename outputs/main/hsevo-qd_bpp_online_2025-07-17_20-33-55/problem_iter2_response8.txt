```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering remaining space and "snugness"."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            priorities[i] = 100 * (1 - (waste / cap)) # fill ratio, scaled

            priorities[i] += 50 * np.exp(-np.abs(waste)) # Favor "snug" fits

        else:
            priorities[i] = -1000  # large penalty for infeasible bins

    return priorities
```
