```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Employs a combination of factors inspired by concepts of energy minimization
    and space-time curvature to prioritize bin selection.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # 1. Energy Minimization (Smaller gaps favored):
    # Penalize bins where the remaining capacity after placing the item
    # would be too small (energy well), or too large (wasted space).
    remaining_space = bins_remain_cap - item
    small_gap_penalty = np.exp(-10 * np.abs(remaining_space) / np.max(bins_remain_cap)) # Exponential penalty
    priorities += small_gap_penalty

    # 2. Gravitational Attraction (Fill levels close to capacity favored):
    # "Attract" the item to bins that are already reasonably full
    # but have enough space. Analogy: gravity pulls objects together.
    fill_levels = bins_remain_cap / np.max(bins_remain_cap) # Normalize remaining cap to [0,1]
    gravitational_attraction = (1 - fill_levels) * (remaining_space >= 0) # Larger when bin is close to full
    priorities += gravitational_attraction

    # 3. Space-Time Curvature (Prevent extreme fragmentation):
    # Favor bins with capacities close to the item size. Prevents having too many very tiny
    # gaps at the expense of the bin count.  Analogy: minimize curvature (extreme fragmentation)
    curvature = np.abs(bins_remain_cap - item) / np.max(bins_remain_cap) # relative to capacity.
    curvature_penalty = np.exp(-5 * curvature)
    priorities += curvature_penalty

    # 4.  Avoid Overfilling: Severe negative penalty for insufficient capacity
    insufficient_capacity = remaining_space < 0
    priorities[insufficient_capacity] = -np.inf  # Very strong penalty

    return priorities
```
