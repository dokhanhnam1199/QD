```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version introduces adaptive scaling and a more nuanced waste penalty.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Waste calculation and normalization (adaptive scaling)
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf
    
    # Adaptive scaling based on average remaining capacity.  This helps adjust to the
    # overall fullness of the bins.
    avg_remaining_capacity = np.mean(bins_remain_cap[~infeasible_bins]) if np.any(~infeasible_bins) else 1.0 # Avoid division by zero.
    normalized_waste = waste / avg_remaining_capacity  # Normalize by average remaining capacity

    # 3. Nuanced Waste Penalty: Quadratic penalty for small waste.
    #    The square amplifies the penalty for very small wastes, discouraging them more strongly.
    small_waste_penalty = np.exp(-5 * normalized_waste**2) # Increased exponent for sharper penalty.

    # 4. Fill Reward: Adjusted for diminishing returns as bins get fuller.
    fill_ratio = item / bins_remain_cap
    fill_reward = fill_ratio # No changes here

    # 5. Combined Priority: Fill reward penalized by waste, with bonus.
    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins]

    # 6. Fullness Bonus: Adjusted to be more significant when bins are mostly full.
    normalized_waste_bin = waste / bins_remain_cap
    priorities[~infeasible_bins] += fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])**2 # Square to emphasize nearly-full bins

    # 7.  Prioritize almost full bins.
    almost_full = (bins_remain_cap > item) & (bins_remain_cap - item <= 0.1) #tolerate 0.1 waste
    priorities[almost_full] += 0.5

    # Add small constant to avoid identical priorities and encourage some differentiation.
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
