```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste management, and dynamic weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    small_waste_penalty = np.exp(-normalized_waste_item)
    fill_ratio = item / bins_remain_cap

    # Dynamic weight based on remaining capacity
    capacity_weight = 1 - (bins_remain_cap / bins_remain_cap.max()) if bins_remain_cap.max() > 0 else 0 # Avoid division by zero
    priorities[~infeasible_bins] = fill_ratio[~infeasible_bins] - 0.5 * small_waste_penalty[~infeasible_bins] + 0.1 * capacity_weight[~infeasible_bins]

    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
