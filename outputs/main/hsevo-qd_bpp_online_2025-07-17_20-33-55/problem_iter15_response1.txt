```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09,
                bin_utilization_weight: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.
        bin_utilization_weight: Weight to prioritize partially filled bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Waste calculation
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    # 3. Fill ratio calculation
    fill_ratio = item / bins_remain_cap
    fill_ratio[infeasible_bins] = 0  # avoid division by zero and punish infeasible bins

    # 4. Small waste penalty
    normalized_waste_item = waste / item
    small_waste_penalty = np.exp(-normalized_waste_item)

    # 5. Fullness bonus
    normalized_waste_bin = waste / bins_remain_cap
    fullness_bonus = (1 - normalized_waste_bin)

    # 6. Bin utilization (prioritize partially filled bins)
    bin_utilization = (bins_remain_cap > 0) & (bins_remain_cap < np.max(bins_remain_cap))
    bin_utilization_score = bin_utilization.astype(float)

    # 7. Combine factors
    priorities[~infeasible_bins] = (
        fill_ratio[~infeasible_bins]
        - waste_penalty_weight * small_waste_penalty[~infeasible_bins]
        + fullness_bonus_weight * fullness_bonus[~infeasible_bins]
        + bin_utilization_weight * bin_utilization_score[~infeasible_bins]
    )
    
    #8. Adaptive Noise: adds more noise when the priorities are too similar
    priority_range = np.max(priorities[~infeasible_bins]) - np.min(priorities[~infeasible_bins])
    adaptive_noise_level = noise_level * (1 + (1/(priority_range + 1e-9))) # Inverse relationship

    priorities += np.random.rand(len(bins_remain_cap)) * adaptive_noise_level

    return priorities
```
