```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines efficiency, stability, and a slight preference for nearly-full bins.
    Penalizes infeasible bins heavily to avoid them.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bins fit, prioritize bins with smallest remaining capacity.
        priorities = -bins_remain_cap
        return priorities
    
    efficiency = item / bins_remain_cap
    efficiency[~eligible_bins] = 0

    remaining_space = bins_remain_cap - item
    stability = np.exp(-remaining_space)
    stability[~eligible_bins] = 0

    priorities[eligible_bins] = efficiency[eligible_bins] * stability[eligible_bins]

    nearly_full = (remaining_space > 0) & (remaining_space < 0.1 * bins_remain_cap)
    priorities[nearly_full] += 0.5

    return priorities
```
