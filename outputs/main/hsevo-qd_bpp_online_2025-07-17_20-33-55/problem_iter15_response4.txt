```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Waste-aware First Fit with Dynamic Waste Penalty:
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    # Normalized Waste: Waste relative to the item size and bin size.
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # Dynamic Waste Penalty: Penalize small waste, but less aggressively if item is large.
    # This helps avoid creating tiny waste pockets, especially for smaller items.
    item_size_factor = np.clip(item, 0.1, 1.0)  # Scale item size to [0.1, 1] to avoid extreme values.
    small_waste_penalty = np.exp(-normalized_waste_item / item_size_factor)

    # Fill Ratio Reward: Reward higher fill ratios, focusing on bins that are nearly full.
    fill_ratio = item / bins_remain_cap
    fill_reward = fill_ratio**2 # Emphasize high fill ratios

    # Bin Completion Bonus: A large bonus for bins that will be completely filled.
    completion_bonus = np.where(waste == 0, 1.0, 0.0) #Big bonus for bins that complete

    # Prioritize based on fill ratio, penalized by small waste and reward completion
    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins] + completion_bonus[~infeasible_bins] * 2

    # Fullness Bonus:  Slightly prioritize bins closer to full.
    priorities[~infeasible_bins] += fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])

    # Instance Aware Noise: Reduce noise as more items are packed. Helps refine the choice
    # as the bin packing progresses and decisions become more critical.
    adaptive_noise_level = noise_level # / (1 + np.sum(~infeasible_bins))

    priorities += np.random.rand(len(bins_remain_cap)) * adaptive_noise_level

    return priorities
```
