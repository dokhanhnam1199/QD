```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, target_relative_residual: float = 0.5, random_priority_scale: float = 0.01, aggressive_fill: bool = True, capacity_threshold: float = 0.1) -> np.ndarray:
    """Combines fill ratio, waste, and adaptive elements to prioritize bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Infeasible bins get -inf priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Almost full bins gets highest priority
    almost_full_threshold = 0.95
    almost_full_bins = (bins_remain_cap - item) / bins_remain_cap < (1-almost_full_threshold) & ~infeasible_bins
    priorities[almost_full_bins] = 1000

    # Low waste bins gets high priority
    low_waste_threshold = 0.1
    low_waste_bins = (bins_remain_cap - item) / np.max(bins_remain_cap) < low_waste_threshold & ~infeasible_bins
    priorities[low_waste_bins] = 500

    # Fill ratio: item size / remaining capacity.
    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    relative_residual = residual_capacity / item

    # Score based on fill ratio, penalized if near-full or too empty.
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = fill_ratios[feasible_bins] / (1 + np.abs(relative_residual[feasible_bins] - target_relative_residual))

    # Aggressive Fill: Boost to bins that are already relatively full
    if aggressive_fill:
        fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
        priorities[feasible_bins] += fullness[feasible_bins] * 0.5

    # Randomize priorities to avoid identical scores
    priorities += np.random.rand(len(bins_remain_cap)) * random_priority_scale

    return priorities
```
