```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid approach: fill ratio, adaptive residual target, waste bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # 1. Infeasible penalty
    priorities[~feasible_bins] = -np.inf

    # 2. Fill ratio with adaptive residual target
    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item

    # Adaptive target: Adjust based on overall bin fullness
    avg_bin_fullness = np.mean((1 - bins_remain_cap/bins_remain_cap.max()))
    target_relative_residual = 0.5 + avg_bin_fullness * 0.25 # Range: 0.5-0.75

    relative_residual = residual_capacity / item
    priorities[feasible_bins] = fill_ratios[feasible_bins] / (1 + np.abs(relative_residual[feasible_bins] - target_relative_residual))

    # 3. Low waste bonus, relative to item size
    low_waste_threshold = 0.2 # as a fraction of ITEM size
    low_waste_bins = (bins_remain_cap - item)  < (low_waste_threshold * item)
    priorities[feasible_bins & low_waste_bins] += 0.1 # Bonus for low waste
        
    # 4. Fullness bonus
    normalized_waste_bin = residual_capacity / bins_remain_cap
    fullness_bonus_weight = 0.1
    priorities[feasible_bins] += fullness_bonus_weight * (1 - normalized_waste_bin[feasible_bins])
    

    # 5. Small random number for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9
    
    return priorities
```
