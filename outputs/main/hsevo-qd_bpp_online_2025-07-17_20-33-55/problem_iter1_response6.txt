```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a more sophisticated priority function considering:
    1. Waste (remaining capacity after adding the item)
    2. Fill Ratio (item size relative to remaining capacity)
    3. Avoidance of tiny residuals that are hard to fill later.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item is placed in each bin
    remaining_capacity = bins_remain_cap - item

    # Initialize priority with a low value for bins that cannot fit the item
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Identify bins where the item fits
    valid_bins = remaining_capacity >= 0

    if np.any(valid_bins):  # Ensure there's at least one valid bin.
        # Calculate fill ratios for the valid bins
        fill_ratios = item / bins_remain_cap[valid_bins]

        # Calculate waste (remaining capacity) for valid bins
        waste = remaining_capacity[valid_bins]

        # Define scaling factor to penalize extremely small waste. Higher lambda yields to bins that are more fully filled (larger item/capacity ratios)
        lambda_waste = 1.0 # Larger lambda gives emphasis on the waste function

        # Define scaling factor to penalize low item/capacity fill ratios
        lambda_fill = 1.0 # Larger lambda gives emphasis on the fill function

        # A function to make small residuals undesirable - Hawking radiation of tiny residual
        waste_score = -lambda_waste * np.exp(-waste)
        fill_score = lambda_fill * fill_ratios # Favors higher fill ratio

        priorities[valid_bins] = fill_score + waste_score

        #Boost the score of bins nearly perfectly fitting the item
        nearly_perfect = (waste < 0.05) & valid_bins #Tolerance is a small residual.
        priorities[nearly_perfect] += 2*lambda_fill

    return priorities
```
