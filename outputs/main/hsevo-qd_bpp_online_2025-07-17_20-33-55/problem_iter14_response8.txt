```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste, and dynamic bonus for bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # 1. Infeasible penalty
    priorities[~feasible_bins] = -np.inf

    # 2. Fill ratio reward
    fill_ratios = item / bins_remain_cap
    priorities[feasible_bins] = fill_ratios[feasible_bins]

    # 3. Adaptive low waste bonus
    waste = bins_remain_cap - item
    normalized_waste_bin = waste / bins_remain_cap
    low_waste_threshold = 0.1
    low_waste_bins = normalized_waste_bin < low_waste_threshold
    
    bonus_scale = 0.2 * (1 - normalized_waste_bin) # Adaptive bonus
    priorities[feasible_bins & low_waste_bins] += bonus_scale[feasible_bins & low_waste_bins]

    # 4. Fullness bonus with dynamic scaling
    almost_full_threshold = 0.9
    almost_full_bins = fill_ratios > almost_full_threshold
    almost_full_bonus = np.exp(-20 * normalized_waste_bin)
    
    # Dynamic bonus scaling based on item size. Larger items get a smaller bonus.
    bonus_scaling_factor = max(0.1, 1 - item)  # Ensure minimum bonus scaling.

    priorities[feasible_bins & almost_full_bins] += bonus_scaling_factor * almost_full_bonus[feasible_bins & almost_full_bins]

    # 5. Small random number for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
