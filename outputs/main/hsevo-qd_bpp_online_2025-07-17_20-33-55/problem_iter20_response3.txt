```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                target_relative_residual: float = 0.9647642401422942,
                waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067,
                noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Combines fill ratio, residual capacity, waste penalty and fullness bonus."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Fill ratio and residual capacity score
    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    relative_residual = residual_capacity / item
    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins] / (1 + np.abs(relative_residual[~infeasible_bins] - target_relative_residual))
    
    # 3. Waste calculation and normalized waste
    waste = bins_remain_cap - item
    normalized_waste_bin = waste / bins_remain_cap
    small_waste_penalty = np.exp(-5 * waste / item) # Increased sensitivity

    # 4. Fullness bonus
    almost_full_bonus = np.exp(-20 * normalized_waste_bin) # Stronger bonus when bin is nearly full

    # 5. Combine factors: Adjusted weights for better balance
    priorities[~infeasible_bins] += fullness_bonus_weight * almost_full_bonus[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins]
    
    # 6. Noise
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
