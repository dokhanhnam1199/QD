```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fill ratio, waste minimization, and dynamic scaling based on target residual capacity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    normalized_waste_item = waste / item

    fill_ratio = item / bins_remain_cap

    target_relative_residual = 0.75
    relative_residual = waste / item

    priorities[~infeasible_bins] = fill_ratio[~infeasible_bins] / (1 + np.abs(relative_residual[~infeasible_bins] - target_relative_residual)) - 0.1 * np.exp(-normalized_waste_item[~infeasible_bins])
    
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9
    return priorities
```
