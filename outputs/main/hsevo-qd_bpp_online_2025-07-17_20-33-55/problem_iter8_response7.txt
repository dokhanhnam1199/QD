```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste considerations, and dynamic adjustments."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # Infeasible penalty
    priorities[~feasible_bins] = -np.inf

    # Fill ratio component
    fill_ratios = item / bins_remain_cap
    priorities[feasible_bins] += fill_ratios[feasible_bins]

    # Waste component
    waste_ratios = (bins_remain_cap - item) / np.max(bins_remain_cap)
    priorities[feasible_bins] -= waste_ratios[feasible_bins] * 0.5  # Penalize waste

    #Almost Full Bins Bonus
    almost_full_threshold = 0.95
    almost_full_bins = (bins_remain_cap - item) / bins_remain_cap < (1-almost_full_threshold)
    priorities[feasible_bins & almost_full_bins] += 1

    # Dynamic adjustment based on remaining capacity distribution
    mean_capacity = np.mean(bins_remain_cap)
    capacity_std = np.std(bins_remain_cap)
    
    # Nudge towards bins closer to the mean capacity.  Scale with inverse of std
    capacity_diff_from_mean = np.abs(bins_remain_cap - mean_capacity)
    priorities[feasible_bins] -= (capacity_diff_from_mean[feasible_bins] / np.max(bins_remain_cap)) * (0.1 / (capacity_std + 1e-6))

    # Small random number for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9
    return priorities
```
