```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate wasted space if item is added to each bin
    wasted_space = bins_remain_cap - item
    
    # Give high priority to bins where the item fits and wasted space is minimized
    feasible_bins = wasted_space >= 0
    
    if np.any(feasible_bins):
        priorities[feasible_bins] = 1 / (wasted_space[feasible_bins] + 0.00001) #Avoid division by zero
        
        # Further prioritize bins that are close to being full after adding the item
        remaining_capacity_after_add = bins_remain_cap[feasible_bins] - item
        
        priorities[feasible_bins] += 1 / (np.abs(remaining_capacity_after_add) + 0.00001) #Prioritize almost full
        
        
        #prioritize bins that will have capacity < item after adding.
        #Prioritize based on how close to being empty.

        
    # If no feasible bins, prioritize bins with largest remaining capacity but penalize
    else:
        priorities = bins_remain_cap / (item * 100)  # low priority values
        
        
    return priorities
```
