```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.3,
                fullness_bonus_weight: float = 0.4, noise_level: float = 1e-6) -> np.ndarray:
    """Combines fill ratio, waste penalty, and fullness bonus for bin priority."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    small_waste_penalty = np.exp(-5 * normalized_waste_item)

    fill_ratio = item / bins_remain_cap
    fill_reward = fill_ratio # Simplified fill reward.
    #fill_reward = 1 / (1 + np.exp(-10 * (fill_ratio - 0.8))) #removed sigmoid function, avoid hyper parameter tuning

    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins]

    almost_full_bonus = np.exp(-20 * normalized_waste_bin) # Strong bonus when bin is nearly full
    priorities[~infeasible_bins] += fullness_bonus_weight * almost_full_bonus[~infeasible_bins]
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
