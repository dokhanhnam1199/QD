```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 1.0,
                fullness_bonus_weight: float = 0.5, noise_level: float = 0.001) -> np.ndarray:
    """Combines adaptive waste penalty with dynamic threshold for small waste."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf
    fill_ratio = item / bins_remain_cap
    fill_ratio[infeasible_bins] = 0

    # Dynamic threshold for small waste penalty
    small_waste_threshold = 0.1 * bins_remain_cap
    small_waste_penalty = np.where(waste < small_waste_threshold, np.exp(5 * (waste - small_waste_threshold) / small_waste_threshold), 0.0)

    # Adaptive waste penalty based on bin utilization
    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    adaptive_waste_penalty_weight = waste_penalty_weight * (1 + bin_utilization)
    adaptive_waste_penalty_weight = np.clip(adaptive_waste_penalty_weight, 0, 2 * waste_penalty_weight)

    fullness_bonus = fill_ratio**2
    perfect_fit = np.isclose(waste, 0)
    priorities[perfect_fit] = np.inf

    priorities[~infeasible_bins] = (fill_ratio[~infeasible_bins] +
                                     fullness_bonus_weight * fullness_bonus[~infeasible_bins] -
                                     adaptive_waste_penalty_weight[~infeasible_bins] * small_waste_penalty[~infeasible_bins])

    priorities += np.random.rand(len(bins_remain_cap)) * noise_level
    return priorities
```
