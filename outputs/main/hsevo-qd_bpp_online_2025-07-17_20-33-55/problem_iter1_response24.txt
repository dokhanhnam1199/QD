```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    My latest marvel utilizes the interplay of capacity, proximity, and a touch of calculated risk!

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, let's identify bins where the item *can* fit. We shall favor these!
    fit_mask = bins_remain_cap >= item

    # For fitting bins, let's give higher priority to bins that are close to full *after* the item is added.
    # This promotes fullness without excessive waste. I call this "Harmonic Resonance".
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] = 1.0 / (remaining_after_fit + 1e-9)  # Avoid division by zero

    # Now, a touch of calculated risk!  We apply a slight preference to *almost* full bins,
    # even if they don't quite fit.  This is akin to priming the aether!
    almost_fit_mask = (bins_remain_cap < item) & (bins_remain_cap > (item * 0.75)) #consider as a candidate, if bin > 75% of item
    priorities[almost_fit_mask] = 0.1 # Low priority so it only chooses them when other options are poor.

    # Lastly, to add a touch of controlled chaos, we introduce a bit of stochasticity.
    # Think of it as a spark to ignite the process! This will prevent deterministic traps!
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    return priorities
```
