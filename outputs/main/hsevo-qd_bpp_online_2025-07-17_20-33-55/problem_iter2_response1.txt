```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization & best-fit decreasing for bin selection."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities

    remaining_space = bins_remain_cap[fit_mask] - item
    fill_ratios = item / bins_remain_cap[fit_mask]

    waste_score = -np.exp(-remaining_space)  # Penalize small waste
    fill_score = fill_ratios # Favors higher fill ratio
    priorities[fit_mask] = fill_score + waste_score

    nearly_perfect = (remaining_space < 0.05) & fit_mask
    priorities[nearly_perfect] += 2 # Boost score if almost perfect

    priorities = priorities / np.max(priorities) if np.sum(priorities) > 0 else priorities
    noise = np.random.normal(0, 0.0001, len(priorities))
    priorities += noise

    return priorities
```
