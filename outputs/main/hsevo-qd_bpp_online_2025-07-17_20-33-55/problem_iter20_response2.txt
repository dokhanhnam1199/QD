```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, target residual, fullness bonus, and dynamic capacity threshold."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    capacity_threshold = np.mean(bins_remain_cap) / 2 #Dynamic threshold
    low_capacity_bins = bins_remain_cap < capacity_threshold
    if np.any(low_capacity_bins):
        priorities[low_capacity_bins] = 10

    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    target_relative_residual=0.75 #Set target relative residual value
    relative_residual = residual_capacity / item
    priorities[~infeasible_bins & ~low_capacity_bins] = fill_ratios[~infeasible_bins & ~low_capacity_bins] / (1 + np.abs(relative_residual[~infeasible_bins & ~low_capacity_bins] - target_relative_residual))

    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[~infeasible_bins & ~low_capacity_bins] += fullness[~infeasible_bins & ~low_capacity_bins] * 0.5
        
    random_priority_scale = 0.001 #Set random scale value
    priorities += np.random.rand(len(bins_remain_cap)) * random_priority_scale
    return priorities
```
