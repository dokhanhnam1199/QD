```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers a few factors:
    1. Whether the item fits (huge penalty if it doesn't).
    2. Remaining capacity *after* placing the item (favors bins with less remaining space - First Fit Decreasing inspired heuristic, with bias against large remaining cap).
    3. A slight preference for bins that are close to full before placing the current item, captured by bins_remain_cap.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if item > cap:
            priorities[i] = -np.inf  # Item doesn't fit - lowest priority. Should never happen if capacity is inf.
        else:
            remaining_after = cap - item
            # Priority components:
            #   - Favors smaller remaining capacity. Large negative value when bins will have large remaining capacity
            #   - Preference towards using already full-ish bins
            #  We use sigmoid to ensure priority has reasonable values
            priorities[i] = (np.tanh(-remaining_after * 5) + np.tanh(bins_remain_cap[i]*5)) #tune these params

    return priorities
```
