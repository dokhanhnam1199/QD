```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, residual capacity, and random noise."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    relative_residual = residual_capacity / item

    target_relative_residual = 0.65
    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins] / (1 + np.abs(relative_residual[~infeasible_bins] - target_relative_residual))

    random_priority_scale = 1e-8
    priorities += np.random.rand(len(bins_remain_cap)) * random_priority_scale
    
    almost_full = (residual_capacity > 0) & (residual_capacity <= 0.1)  # small threshold for almost full
    priorities[almost_full] += 1 # give a bonus to bins that become almost full after insertion
    return priorities
```
