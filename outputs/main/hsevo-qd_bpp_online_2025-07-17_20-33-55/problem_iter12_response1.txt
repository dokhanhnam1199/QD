```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version includes adaptive weighting and a consideration for bin utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Waste Calculation
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    # 3. Normalized Metrics
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap
    fill_ratio = item / bins_remain_cap

    # 4. Penalty and Reward Components
    small_waste_penalty = np.exp(-normalized_waste_item)
    fill_reward = fill_ratio

    # 5. Bin Utilization Consideration
    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalize remaining capacity

    # 6. Adaptive Weighting (Dynamically adjust waste penalty based on bin utilization)
    # High utilization bins are penalized more for small waste to encourage complete filling.
    adaptive_waste_penalty_weight = waste_penalty_weight * (1 + bin_utilization)
    # Limit adaptive weight growth
    adaptive_waste_penalty_weight = np.clip(adaptive_waste_penalty_weight, 0, 2 * waste_penalty_weight)


    # 7. Combined Priority
    priorities[~infeasible_bins] = (
        fill_reward[~infeasible_bins]
        - adaptive_waste_penalty_weight[~infeasible_bins] * small_waste_penalty[~infeasible_bins]
        + fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])
    )

    # 8. Exploration Noise
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
