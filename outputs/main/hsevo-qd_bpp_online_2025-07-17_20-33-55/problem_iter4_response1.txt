import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, target_relative_residual: float = 0.7658957123578264, random_priority_scale: float = 9.223382043707139e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        target_relative_residual: Ideal relative residual capacity after placing item.
        random_priority_scale: Scale of random constant added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # 2. Maximize bin utilization: Prefer bins where the item fills a large portion
    # of the remaining capacity, but not too large that it creates near-empty bins
    # with the next item.
    
    # Fill ratio: item size / remaining capacity. Higher is better, but should be < 1.
    fill_ratios = item / bins_remain_cap
    
    # Residual capacity after placing item
    residual_capacity = bins_remain_cap - item
    
    # Relative residual capacity compared to item size. We want it large enough
    # that we will likely fill it with some other item.
    relative_residual = residual_capacity / item

    # Score based on fill ratio, penalized if near-full or too empty after insertion.
    # Scale by 1 / (1+abs(relative_residual-target)), where target = ideal value (say, 0.5 or 1)
    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins] / (1 + np.abs(relative_residual[~infeasible_bins] - target_relative_residual))
    
    # Add small constant to avoid identical priorities and encourage some differentiation.
    priorities += np.random.rand(len(bins_remain_cap)) * random_priority_scale

    return priorities
