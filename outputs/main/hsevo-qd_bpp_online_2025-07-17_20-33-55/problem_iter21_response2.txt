```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.20,
                fullness_bonus_weight: float = 0.30, noise_level: float = 1e-9,
                capacity_threshold: float = 0.75, adaptive_penalty: bool = True) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, with adaptive penalty and capacity threshold.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.
        capacity_threshold: Threshold for considering a bin almost full.
        adaptive_penalty: If True, adjusts waste penalty based on remaining capacity.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Waste calculation and normalization
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf  # Ensure infeasible bins are penalized
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # 3. Small Waste Penalty (Adaptive)
    if adaptive_penalty:
        # Increase penalty if bin is close to full *after* placing the item
        post_waste_ratio = waste / bins_remain_cap
        adaptive_factor = np.where(post_waste_ratio < (1 - capacity_threshold), 2.0, 1.0) # Higher penalty for bins that become too full
        small_waste_penalty = np.exp(-normalized_waste_item) * adaptive_factor
    else:
        small_waste_penalty = np.exp(-normalized_waste_item)


    # 4. Fill Reward
    fill_ratio = item / bins_remain_cap
    fill_reward = fill_ratio

    # 5. Combine factors
    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins]

    # 6. Fullness Bonus: Prioritize bins closer to full, but only if remaining capacity is significant
    remaining_capacity_ratio = bins_remain_cap / np.max(bins_remain_cap) #Ratio related to the largest bin size
    priorities[~infeasible_bins] += fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins]) * remaining_capacity_ratio[~infeasible_bins] #Scale bonus by the size of remaining cap.

    # 7. Add Noise
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
