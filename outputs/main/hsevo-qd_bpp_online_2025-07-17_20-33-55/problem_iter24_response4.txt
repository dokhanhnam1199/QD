```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Calculate waste and fill ratio for feasible bins.
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    fill_ratio = item / bins_remain_cap
    fill_ratio[infeasible_bins] = 0.0  # Ensure infeasible bins have 0 fill ratio

    # 3. Define penalty and reward components.
    normalized_waste_item = waste / item
    small_waste_penalty = np.exp(-normalized_waste_item)
    
    # Dynamic adjustment of fullness bonus based on fill ratio.  Higher fill, higher bonus.
    # This helps to complete bins that are already significantly filled.
    dynamic_fullness_bonus = fullness_bonus_weight * fill_ratio
    
    # 4. Adaptive waste penalty: Increase the penalty if bins are generally empty.
    #    This encourages using the bins more effectively from the start.
    average_bin_capacity = np.mean(bins_remain_cap)
    adaptive_waste_penalty_weight = waste_penalty_weight * (1 + (average_bin_capacity / np.max(bins_remain_cap)))

    # 5. Calculate combined priority:  Fill ratio, waste penalty, and fullness bonus.
    priorities[~infeasible_bins] = fill_ratio[~infeasible_bins] - \
                                    adaptive_waste_penalty_weight * small_waste_penalty[~infeasible_bins] + \
                                    dynamic_fullness_bonus[~infeasible_bins]

    # 6. Introduce controlled noise.  Reduce noise for bins nearing capacity.
    #    This helps finalize packing for nearly full bins and avoids unnecessary switching.
    capacity_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    noise_factor = np.clip(1 - capacity_utilization * 2, 0.1, 1)  # Reduce noise as bins fill
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level * noise_factor

    return priorities
```
