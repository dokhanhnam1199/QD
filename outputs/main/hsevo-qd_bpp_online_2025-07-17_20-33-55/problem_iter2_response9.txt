```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit, waste, and remaining capacity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    # Penalize if item doesn't fit
    priorities[~can_fit] = -1000.0

    # Base priority for bins that can fit
    priorities[can_fit] = 1.0

    # Fit ratio component (higher is better, but not too high)
    fit_ratio = item / bins_remain_cap[can_fit]
    snugness_score = np.exp(-5 * np.abs(fit_ratio - 0.9))
    priorities[can_fit] += snugness_score

    # Remaining capacity boost (encourage use of larger bins)
    max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1  # Avoid division by zero
    capacity_boost = bins_remain_cap[can_fit] / max_cap
    priorities[can_fit] += 0.5 * capacity_boost
    
    return priorities
```
