```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2.  First-Fit Decreasing inspired: Prioritize bins that can accommodate the item
    #     with minimal waste.  Avoid creating very small remaining spaces if possible.

    # Waste: Remaining capacity after placing the item.
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf  # Ensure infeasible bins are penalized

    # Normalized Waste: Waste relative to the item size and bin size.
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # Penalty for too small waste (encourages filling bins reasonably)
    small_waste_penalty = np.exp(-normalized_waste_item)  # Exponential penalty for small waste
    
    # Scale waste penalty by bin fullness, giving higher penalty to nearly empty bins for creating small waste
    bin_fullness = 1 - bins_remain_cap / np.max(bins_remain_cap) # Normalized bin fullness measure

    # Reward for filling the bin well.  A higher fill ratio is generally better.
    fill_ratio = item / bins_remain_cap
    fill_reward = fill_ratio

    # Combine the factors: Prioritize based on fill ratio, penalized by small waste
    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins] * bin_fullness[~infeasible_bins]

    # Bonus:  Slightly prioritize bins closer to full if other factors are equal.
    # This helps close out bins more quickly. Only apply if not infeasible.
    priorities[~infeasible_bins] += fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])
        
    # Add small constant to avoid identical priorities and encourage some differentiation.
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    # Adaptive Waste Penalty: Dynamically adjust waste penalty based on the average bin fullness
    # If bins are mostly full, reduce the waste penalty to encourage filling them up even with smaller items
    avg_bin_fullness = np.mean(1 - bins_remain_cap / np.max(bins_remain_cap))

    # Adjust waste penalty dynamically
    waste_penalty_adjustment = 1 - avg_bin_fullness 
    priorities[~infeasible_bins] -= waste_penalty_weight * small_waste_penalty[~infeasible_bins] * waste_penalty_adjustment * bin_fullness[~infeasible_bins]


    return priorities
```
