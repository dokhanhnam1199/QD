```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Encourage filling bins that can fit the item
            priorities[i] = (cap - item) / cap  # Remaining space ratio. Smaller is better (higher priority).

            #Prioritize almost full bins (maximize space utilization)
            #priorities[i] = 1- ((cap - item) / cap) #space utilization. Larger is better.
        else:
            # Discourage bins that cannot fit the item
            priorities[i] = -1e9  #Very low priority
    return priorities
```
