```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority: fill ratio, waste bonus, almost full bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # Infeasible penalty
    priorities[~feasible_bins] = -np.inf

    # Fill ratio with adaptive waste bonus
    fill_ratios = item / bins_remain_cap
    waste = bins_remain_cap - item
    normalized_waste = waste / bins_remain_cap

    #Adaptive waste bonus: larger bonus for smaller waste when bin is nearly full
    almost_full_threshold = 0.9
    almost_full_bins = (bins_remain_cap - item) / bins_remain_cap > almost_full_threshold
    bonus_scale = 0.3 * (1 - normalized_waste) * almost_full_bins
    priorities[feasible_bins] = fill_ratios[feasible_bins] + bonus_scale[feasible_bins]

    # Fullness Bonus
    priorities[feasible_bins] += 0.1 * (1 - normalized_waste[feasible_bins])

    # Small random number for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
