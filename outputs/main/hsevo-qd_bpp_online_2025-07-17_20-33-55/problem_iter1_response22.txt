```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by gravitational potential and energy minimization.
    A bin is more attractive (higher priority) if:
    1. It can accommodate the item.
    2. The item is a 'significant' portion of the bin's capacity (efficiency).
    3. We avoid leaving bins only slightly filled (stability).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Filter out bins that cannot accommodate the item.
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        #If no bins fit, prioritize bins with smallest remaining capacity to hopefully finish those bins first
        priorities = -bins_remain_cap
        return priorities

    # Efficiency: Item size as a fraction of bin capacity.
    efficiency = item / bins_remain_cap
    efficiency[~eligible_bins] = 0  # Zero out ineligible bins

    # Stability: Penalty for leaving too much space after adding the item.
    remaining_space = bins_remain_cap - item
    stability = np.exp(-remaining_space) # Exponential decay for penalty
    stability[~eligible_bins] = 0

    # Combined priority: Efficiency balanced with stability, only for eligible bins
    priorities[eligible_bins] = efficiency[eligible_bins] * stability[eligible_bins]

    #Further refine by slightly preferring nearly-full bins if any are available
    nearly_full = (remaining_space > 0) & (remaining_space < 0.1 * bins_remain_cap)
    priorities[nearly_full] += 0.5 # small preference to nearly-full

    return priorities
```
