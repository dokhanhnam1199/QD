```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.1,
                  fullness_bonus_weight: float = 0.2, almost_full_threshold: float = 0.95) -> np.ndarray:
    """Hybrid heuristic: combines fill ratio, waste penalty, and almost-full bonus."""
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item

    # Almost Full Bins Bonus
    almost_full_bins = (bins_remain_cap - item) / bins_remain_cap < (1 - almost_full_threshold)
    priorities[feasible_bins & almost_full_bins] += 500 * fullness_bonus_weight

    # Fill ratio reward
    fill_ratio = item / bins_remain_cap
    priorities[feasible_bins] += fill_ratio[feasible_bins]

    # Waste penalty
    waste = bins_remain_cap - item
    normalized_waste = waste / item
    priorities[feasible_bins] -= waste_penalty_weight * normalized_waste[feasible_bins]

    # Infeasible penalty
    priorities[~feasible_bins] = -1000

    return priorities
```
