```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    A high priority indicates a bin is preferred.

    This version prioritizes bins that can accommodate the item with minimal wasted space,
    but also penalizes near-full bins that would be a poor choice for future items.
    It also adds a small random element to break ties and encourage exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities  # No bin can hold the item

    # Calculate wasted space if the item is placed in the bin
    wasted_space = bins_remain_cap - item

    # Prioritize bins based on minimal wasted space (higher is better)
    space_priority = np.zeros_like(bins_remain_cap, dtype=float)
    space_priority[eligible_bins] = -np.abs(wasted_space[eligible_bins])  # Negative since we want to minimize wasted space


    # Penalize near-full bins to avoid fragmentation (lower is worse)
    fullness_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    fullness_penalty[bins_remain_cap < 1.1 * item] = -10  # Significantly penalize near full

    # Reward bins that are nearly full, but *can* still fit the current item.
    # Encourage consolidation. Note: This can be improved.
    consolidation_bonus = np.zeros_like(bins_remain_cap, dtype=float)
    consolidation_bonus[eligible_bins & (bins_remain_cap < 1.2 * item)] = 5

    # Add a small random factor to break ties and encourage exploration
    random_factor = np.random.rand(len(bins_remain_cap)) * 0.1

    # Combine all factors to calculate the final priority
    priorities = space_priority + fullness_penalty + consolidation_bonus + random_factor

    # Set priority of bins that *cannot* hold the item to a very low value
    priorities[~eligible_bins] = -np.inf  # ensures these bins are never selected.

    return priorities
```
