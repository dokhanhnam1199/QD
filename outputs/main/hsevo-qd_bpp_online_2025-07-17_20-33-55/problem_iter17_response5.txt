```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste, and adaptive bonus for bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # Infeasible penalty
    priorities[~feasible_bins] = -np.inf

    # Fill ratio calculation
    fill_ratio = item / bins_remain_cap
    fill_ratio[~feasible_bins] = 0

    # Waste calculation
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf

    # Adaptive small waste bonus
    small_waste_threshold = 0.1 * bins_remain_cap
    small_waste_bonus = np.where(waste < small_waste_threshold, np.exp(5 * (waste - small_waste_threshold) / small_waste_threshold), 0.0)

    # Fullness bonus
    fullness_bonus = fill_ratio**2

    # Perfect fit bonus
    perfect_fit = np.isclose(waste, 0)
    priorities[perfect_fit] = np.inf

    # Combined priority
    priorities[feasible_bins] = (fill_ratio[feasible_bins] + fullness_bonus[feasible_bins] - small_waste_bonus[feasible_bins])
    # Add noise for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
