```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, residual capacity target, and low waste bonus with noise."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf
    
    # 2. Fill ratio and residual capacity target
    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    target_relative_residual = 0.5
    relative_residual = residual_capacity / item
    priorities[feasible_bins] = fill_ratios[feasible_bins] / (1 + np.abs(relative_residual[feasible_bins] - target_relative_residual))

    # 3. Low waste bonus
    max_capacity = np.max(bins_remain_cap)
    low_waste_threshold = 0.1
    low_waste_bins = (bins_remain_cap - item) / max_capacity < low_waste_threshold
    priorities[feasible_bins & low_waste_bins] += 0.1
    
    # 4. Add noise
    random_noise_scale = 1e-6
    priorities += np.random.rand(len(bins_remain_cap)) * random_noise_scale
    
    return priorities
```
