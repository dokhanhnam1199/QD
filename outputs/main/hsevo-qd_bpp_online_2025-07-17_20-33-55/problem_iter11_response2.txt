```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines feasibility, waste, fill ratio, and a bin utilization bias."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # Infeasible penalty
    priorities[~feasible_bins] = -np.inf

    # Waste calculation for feasible bins
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf

    # Fill ratio reward (sigmoid)
    fill_ratio = item / bins_remain_cap
    fill_reward = 1 / (1 + np.exp(-10 * (fill_ratio - 0.8)))
    priorities[feasible_bins] += fill_reward[feasible_bins]

    # Waste penalty (exponential) - prioritize less waste
    normalized_waste_item = waste / item
    small_waste_penalty = np.exp(-5 * normalized_waste_item)
    priorities[feasible_bins] -= 0.5 * small_waste_penalty[feasible_bins]

    # Bin utilization bias (prefer bins already in use)
    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    utilization_bias = 0.1 * bin_utilization
    priorities[feasible_bins] += utilization_bias[feasible_bins]

    return priorities
```
