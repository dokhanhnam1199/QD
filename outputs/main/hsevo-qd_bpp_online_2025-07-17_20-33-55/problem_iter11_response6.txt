```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on feasibility, fill ratio, and residual capacity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    
    # Objective 1: Maximize fill ratio
    fill_ratio_score = fill_ratios

    # Objective 2: Penalize small residual capacity, adaptively
    avg_item_size = np.mean(item) if isinstance(item, np.ndarray) else item # Adaptive item size
    residual_penalty = np.exp(-residual_capacity / avg_item_size)
    
    # Combine objectives with dynamic weights based on feasibility
    priorities[~infeasible_bins] = (fill_ratio_score[~infeasible_bins] - 0.5 * residual_penalty[~infeasible_bins])

    # Add noise for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
