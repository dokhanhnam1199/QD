```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic with a gravitational twist
    # Bins that can fit the item get a priority boost inversely proportional to the remaining capacity *after* packing
    # To simulate a black hole's pull on an item.

    available_bins = bins_remain_cap >= item

    if np.any(available_bins):
        remaining_capacity_after_fit = bins_remain_cap[available_bins] - item
        #Gravitational Pull
        priorities[available_bins] = 1.0 / (remaining_capacity_after_fit + 0.00001)  # Avoid division by zero
        #Scale to make it more relevant
        priorities[available_bins] = priorities[available_bins] / np.sum(priorities[available_bins])

    # Give a small penalty to nearly full bins for exploration and fairness
    nearly_full_threshold = 0.1  #Bins filled to 90% capacity
    nearly_full_bins = (bins_remain_cap / np.max(bins_remain_cap)) < nearly_full_threshold
    priorities[nearly_full_bins] = priorities[nearly_full_bins] - 0.001 # Small penalty
    return priorities
```
