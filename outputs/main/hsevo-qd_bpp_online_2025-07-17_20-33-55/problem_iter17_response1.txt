```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste bonus, and capacity threshold."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # 1. Infeasibility penalty
    priorities[~feasible_bins] = -np.inf

    # 2. Fill ratio prioritization
    fill_ratios = item / bins_remain_cap
    priorities[feasible_bins] = fill_ratios[feasible_bins]

    # 3. Low waste bonus
    waste = bins_remain_cap - item
    normalized_waste = waste / bins_remain_cap
    low_waste_threshold = 0.1
    low_waste_bins = normalized_waste < low_waste_threshold
    priorities[feasible_bins & low_waste_bins] += 0.2 * (1 - normalized_waste[feasible_bins & low_waste_bins])

    # 4. Capacity threshold bonus (fill nearly full bins)
    capacity_threshold = 0.2  # Fraction of total bin capacity
    low_capacity_bins = bins_remain_cap < capacity_threshold
    priorities[feasible_bins & low_capacity_bins] += 0.5  # larger bonus

    # 5. Random tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
