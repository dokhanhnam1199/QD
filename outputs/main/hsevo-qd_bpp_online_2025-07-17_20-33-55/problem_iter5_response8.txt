```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste penalty, and target residual capacity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Fill ratio
    fill_ratio = item / bins_remain_cap
    fill_ratio[infeasible_bins] = 0  # Avoid division by zero in calculations below

    # Waste calculation and normalization
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # Waste penalty (exponential for small waste)
    small_waste_penalty = np.exp(-normalized_waste_item)

    # Target residual capacity
    target_relative_residual = 0.75
    residual_capacity = bins_remain_cap - item
    relative_residual = residual_capacity / item

    # Score calculation: Fill ratio, penalized waste, target residual
    priorities[~infeasible_bins] = fill_ratio[~infeasible_bins] - 0.5 * small_waste_penalty[~infeasible_bins]
    priorities[~infeasible_bins] /= (1 + np.abs(relative_residual[~infeasible_bins] - target_relative_residual))
    # Bonus: Slight priority for closing nearly full bins
    priorities[~infeasible_bins] += 0.1 * (1 - normalized_waste_bin[~infeasible_bins])

    # Add small noise
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
