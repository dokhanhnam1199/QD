```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Give higher priority to bins that can fit the item snugly, but
    # still have some space left. Avoid bins that are either too full
    # (high ratio) or have too much space (low ratio).
    # We also consider the absolute remaining capacity, favoring larger bins
    # if the 'snugness' is similar.

    ratios = item / bins_remain_cap
    
    # Penalize bins that are too small
    too_small_penalty = np.where(ratios > 1, -1000 * (ratios - 1), 0) # Very large negative number

    # Score based on how close the ratio is to 1, with a preference for slightly below 1.
    snugness_score = np.exp(-5 * np.abs(ratios - 0.9))  # Gaussian-like, peaks at 0.9
    
    # Give preference to larger remaining capacities.  This term encourages the
    # algorithm to keep larger bins open for potentially larger future items.
    capacity_boost = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0  # Normalize

    priorities = snugness_score + capacity_boost + too_small_penalty

    return priorities
```
