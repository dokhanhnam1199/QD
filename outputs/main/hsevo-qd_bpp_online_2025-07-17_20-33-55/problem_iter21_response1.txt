```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.3, item_size_consideration_weight: float = 0.1,
                noise_level: float = 1e-9) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A more refined priority function for the online bin packing problem.  This version incorporates a
    dynamic adjustment based on the relative item size, aiming for better overall bin utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        item_size_consideration_weight: Weight of the penalty for bins significantly larger than the item.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Waste calculation and normalization
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf  # Ensure infeasible bins are penalized
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # 3. Penalty for small waste
    small_waste_penalty = np.exp(-normalized_waste_item)

    # 4. Reward for filling the bin well (fill ratio)
    fill_ratio = item / bins_remain_cap

    # 5. Item Size Consideration: Penalize bins that are *much* larger than the item.
    #    This encourages filling smaller bins first, leading to potentially better packing.
    #    The penalty is higher if the bin is significantly bigger than the item.
    item_relative_size = item / bins_remain_cap
    large_bin_penalty = np.exp(-item_relative_size * 10)  # Increased exponent for higher penalty

    # 6. Combining the factors: Fill ratio, waste penalty, and item size penalty.
    priorities[~infeasible_bins] = (fill_ratio[~infeasible_bins] -
                                     waste_penalty_weight * small_waste_penalty[~infeasible_bins] -
                                     item_size_consideration_weight * large_bin_penalty[~infeasible_bins])

    # 7. Fullness Bonus: Prioritize bins closer to full.
    priorities[~infeasible_bins] += fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])

    # 8. Noise: Add a small amount of random noise to break ties.
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
