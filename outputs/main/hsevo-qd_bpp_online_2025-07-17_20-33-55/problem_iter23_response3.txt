```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                waste_penalty_weight: float = 0.2,
                fullness_bonus_weight: float = 0.2,
                target_relative_residual: float = 0.96,
                noise_level: float = 1e-9) -> np.ndarray:
    """Combines fill ratio, target residual, waste penalty, fullness bonus, and noise."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    relative_residual = residual_capacity / item

    # Prioritize based on fill ratio and target residual
    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins] / (1 + np.abs(relative_residual[~infeasible_bins] - target_relative_residual))

    # Waste penalty
    normalized_waste_item = residual_capacity / item
    small_waste_penalty = np.exp(-normalized_waste_item)
    priorities[~infeasible_bins] -= waste_penalty_weight * small_waste_penalty[~infeasible_bins]

    # Fullness bonus
    normalized_waste_bin = residual_capacity / bins_remain_cap
    almost_full_bonus = np.exp(-20 * normalized_waste_bin)  # Exponential bonus for almost full bins
    priorities[~infeasible_bins] += fullness_bonus_weight * almost_full_bonus[~infeasible_bins]

    # Add noise for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
