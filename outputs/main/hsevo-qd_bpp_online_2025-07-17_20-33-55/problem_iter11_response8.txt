```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, target_relative_residual: float = 0.5, random_priority_scale: float = 0.01, aggressive_fill: bool = True, capacity_threshold: float = 0.2) -> np.ndarray:
    """Combines fill ratio, residual capacity, aggressive fill, and feasibility."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Prioritize almost full bins
    almost_full_threshold = 0.95
    almost_full_bins = (bins_remain_cap - item) / bins_remain_cap < (1 - almost_full_threshold)
    priorities[~infeasible_bins & almost_full_bins] = 1000

    # 3. Low waste bins
    low_waste_bins = (bins_remain_cap - item) / np.max(bins_remain_cap) < 0.1
    priorities[~infeasible_bins & low_waste_bins] = 500

    # 4. Maximize bin utilization
    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    relative_residual = residual_capacity / item
    priorities[~infeasible_bins & ~almost_full_bins & ~low_waste_bins] = fill_ratios[~infeasible_bins & ~almost_full_bins & ~low_waste_bins] / (1 + np.abs(relative_residual[~infeasible_bins & ~almost_full_bins & ~low_waste_bins] - target_relative_residual))

    # 5. Aggressive fill
    if aggressive_fill:
        fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
        priorities[~infeasible_bins & ~almost_full_bins & ~low_waste_bins] += fullness[~infeasible_bins & ~almost_full_bins & ~low_waste_bins] * 0.5

    # 6. Non-empty nudge
    non_empty_bins = bins_remain_cap < np.max(bins_remain_cap)
    priorities[~infeasible_bins & non_empty_bins] += 5

    # Add small constant to avoid identical priorities
    priorities += np.random.rand(len(bins_remain_cap)) * random_priority_scale

    return priorities
```
