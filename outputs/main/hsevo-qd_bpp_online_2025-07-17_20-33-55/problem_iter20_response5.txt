```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2, fullness_bonus_weight: float = 0.1, noise_level: float = 1e-9) -> np.ndarray:
    """Prioritizes bins considering feasibility, fill ratio, and adaptive waste penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap
    small_waste_penalty = np.exp(-5 * normalized_waste_item)

    fill_ratio = item / bins_remain_cap
    fill_reward = fill_ratio # Use fill ratio directly instead of sigmoid

    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins]

    almost_full_bonus = np.exp(-10 * normalized_waste_bin)
    priorities[~infeasible_bins] += fullness_bonus_weight * almost_full_bonus[~infeasible_bins]
    
    #Adaptive waste penalty based on bin utilization
    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    adaptive_waste_weight = 0.1 * bin_utilization #Scale weight based on utilization
    priorities[~infeasible_bins] -= adaptive_waste_weight[~infeasible_bins] * small_waste_penalty[~infeasible_bins]

    priorities += np.random.rand(len(bins_remain_cap)) * noise_level
    return priorities
```
