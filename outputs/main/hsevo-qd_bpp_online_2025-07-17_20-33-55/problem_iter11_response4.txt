```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.1, fullness_bonus_weight: float = 0.2, noise_level: float = 1e-9) -> np.ndarray:
    """Combines waste, fullness, feasibility for bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Mark infeasible bins
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # Waste calculation
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf
    
    # Normalized waste
    normalized_waste = waste / (bins_remain_cap + 1e-6)  # avoid division by zero
    
    # Waste penalty
    waste_penalty = np.exp(-5 * normalized_waste)
    
    # Fill ratio reward
    fill_ratio = item / (bins_remain_cap + 1e-6)
    fill_reward = fill_ratio
    
    # Combine
    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * waste_penalty[~infeasible_bins]
    
    # Fullness bonus
    fullness_bonus = np.exp(-10 * normalized_waste)
    priorities[~infeasible_bins] += fullness_bonus_weight * fullness_bonus[~infeasible_bins]
    
    # Noise
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level
    
    return priorities
```
