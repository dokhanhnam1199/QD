```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, target_relative_residual: float = 0.75, random_priority_scale: float = 0.01) -> np.ndarray:
    """Calculate priority score for each bin considering fill ratio and residual capacity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible bins get -inf priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # Fill ratio for feasible bins
    fill_ratios = item / bins_remain_cap
    
    # Residual capacity after placing item
    residual_capacity = bins_remain_cap - item
    relative_residual = residual_capacity / item

    # Score based on fill ratio, penalized by residual relative to target
    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins] / (1 + np.abs(relative_residual[~infeasible_bins] - target_relative_residual))
        
    # Add a small random constant to break ties
    priorities += np.random.rand(len(bins_remain_cap)) * random_priority_scale

    return priorities
```
