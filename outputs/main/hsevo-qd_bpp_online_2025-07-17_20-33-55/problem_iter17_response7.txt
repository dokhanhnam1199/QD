```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste, and feasibility for bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # Infeasible penalty
    priorities[~feasible_bins] = -np.inf

    # Fill ratio with emphasis on almost full bins
    almost_full_threshold = 0.95
    almost_full_bins = (bins_remain_cap - item) / bins_remain_cap > almost_full_threshold
    priorities[feasible_bins & almost_full_bins] += 10  # Strong preference

    # Low waste bonus
    low_waste_threshold = 0.1
    low_waste_bins = (bins_remain_cap - item) / np.max(bins_remain_cap) < low_waste_threshold
    priorities[feasible_bins & low_waste_bins] += 5

    # Fill ratio component
    fill_ratios = item / bins_remain_cap
    priorities[feasible_bins] += fill_ratios[feasible_bins]

    # Non-empty nudge
    non_empty_bins = bins_remain_cap < np.max(bins_remain_cap)
    priorities[feasible_bins & non_empty_bins] += 1

    # Small random number for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
