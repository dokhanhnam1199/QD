{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,\n                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version includes adaptive weighting and a consideration for bin utilization.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        waste_penalty_weight: Weight of the small waste penalty.\n        fullness_bonus_weight: Weight of the bonus for bins closer to full.\n        noise_level: Magnitude of the random noise added to priorities.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # 2. Waste Calculation\n    waste = bins_remain_cap - item\n    waste[infeasible_bins] = np.inf\n\n    # 3. Normalized Metrics\n    normalized_waste_item = waste / item\n    normalized_waste_bin = waste / bins_remain_cap\n    fill_ratio = item / bins_remain_cap\n\n    # 4. Penalty and Reward Components\n    small_waste_penalty = np.exp(-normalized_waste_item)\n    fill_reward = fill_ratio\n\n    # 5. Bin Utilization Consideration\n    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalize remaining capacity\n\n    # 6. Adaptive Weighting (Dynamically adjust waste penalty based on bin utilization)\n    # High utilization bins are penalized more for small waste to encourage complete filling.\n    adaptive_waste_penalty_weight = waste_penalty_weight * (1 + bin_utilization)\n    # Limit adaptive weight growth\n    adaptive_waste_penalty_weight = np.clip(adaptive_waste_penalty_weight, 0, 2 * waste_penalty_weight)\n\n\n    # 7. Combined Priority\n    priorities[~infeasible_bins] = (\n        fill_reward[~infeasible_bins]\n        - adaptive_waste_penalty_weight[~infeasible_bins] * small_waste_penalty[~infeasible_bins]\n        + fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])\n    )\n\n    # 8. Exploration Noise\n    priorities += np.random.rand(len(bins_remain_cap)) * noise_level\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}