```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio and capacity difference for balanced bin selection."""

    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item

    # Fill Ratio Component
    fill_ratios = item / bins_remain_cap
    priorities[feasible_bins] = fill_ratios[feasible_bins]

    # Capacity Difference Component (normalized)
    capacity_diff = np.abs(bins_remain_cap - item)
    max_capacity = np.max(bins_remain_cap)
    normalized_capacity_diff = capacity_diff / max_capacity
    priorities[feasible_bins] -= 0.5 * normalized_capacity_diff[feasible_bins]  # Reduce priority for large difference

    # Prioritize almost full bins
    almost_full_threshold = 0.95
    almost_full_bins = (bins_remain_cap - item) / bins_remain_cap < (1 - almost_full_threshold)
    priorities[feasible_bins & almost_full_bins] += 1  # Boost priority

    # Infeasible penalty
    priorities[~feasible_bins] = -1000

    return priorities
```
