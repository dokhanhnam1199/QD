```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.4,  # Increased bonus weight
                noise_level: float = 1e-7,  # Reduced noise
                bin_utilization_threshold: float = 0.75, # Added threshold parameter
                overfill_penalty: float = 1000.0) -> np.ndarray: # Add overfill penalty
    """Returns priority with which we want to add item to each bin, with adaptive weights and bin utilization consideration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.
        bin_utilization_threshold: Threshold for bin utilization to encourage closing bins.
        overfill_penalty: Penalty for bins exceeding capacity after adding the item.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit. Stronger penalty than before.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2.  First-Fit Decreasing inspired: Prioritize bins that can accommodate the item
    #     with minimal waste.  Avoid creating very small remaining spaces if possible.

    # Waste: Remaining capacity after placing the item.
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf  # Ensure infeasible bins are penalized

    # Normalized Waste: Waste relative to the item size and bin size.
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # Penalty for too small waste (encourages filling bins reasonably)
    small_waste_penalty = np.exp(-normalized_waste_item)  # Exponential penalty for small waste

    # Reward for filling the bin well.  A higher fill ratio is generally better.
    fill_ratio = item / bins_remain_cap
    fill_reward = fill_ratio

    # Combine the factors: Prioritize based on fill ratio, penalized by small waste
    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins]

    # Bonus:  Slightly prioritize bins closer to full if other factors are equal.
    # This helps close out bins more quickly. Only apply if not infeasible.
    priorities[~infeasible_bins] += fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])
    
    # Encourage closing bins based on utilization threshold.
    almost_full_bins = (bins_remain_cap - item) <= (1 - bin_utilization_threshold) * bins_remain_cap
    priorities[almost_full_bins & ~infeasible_bins] += 0.1  # Increased priority boost

    # Adaptive Weighting based on remaining capacity
    remaining_capacity_ratio = bins_remain_cap / np.max(bins_remain_cap) # Normalize remaining capacity
    fullness_bonus_weight_adaptive = fullness_bonus_weight * (1 - remaining_capacity_ratio) # Decrease bonus for larger bins
    priorities[~infeasible_bins] += fullness_bonus_weight_adaptive[~infeasible_bins] * (1 - normalized_waste_bin[~infeasible_bins])
        
    # Add small constant to avoid identical priorities and encourage some differentiation. Reduced noise.
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
