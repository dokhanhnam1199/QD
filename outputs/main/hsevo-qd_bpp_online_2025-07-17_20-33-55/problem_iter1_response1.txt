```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin is feasible only if its remaining capacity is greater than or equal to the item size.
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # No feasible bins, assign very low priority to all bins. It practically means open a new bin
        return priorities - 1e9  # or -np.inf, ensuring it's the lowest. Avoid np.inf for numerical stability

    # 1. Prioritize bins with a capacity close to the item size (minimize wasted space)
    waste = bins_remain_cap - item
    priorities[feasible_bins] = -np.abs(waste[feasible_bins])  # Negate waste to make smaller waste higher priority

    # 2. Slightly prefer bins that are fuller (minimize the creation of almost-empty bins). A small perturbation.
    priorities[feasible_bins] += 0.1 * (1 - bins_remain_cap[feasible_bins] / np.max(bins_remain_cap))  # Bias towards using less full bins less.

    # 3. Add large negative values to infeasible bins.
    priorities[~feasible_bins] = -1e8 #make these impossible if there are feasible options.

    return priorities
```
