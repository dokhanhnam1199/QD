```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering feasibility, fill ratio, and waste,
    with dynamic emphasis on nearly-full bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    fill_ratio = item / bins_remain_cap
    fill_reward = fill_ratio

    small_waste_penalty = np.exp(-normalized_waste_item)

    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - 0.5 * small_waste_penalty[~infeasible_bins]

    # Dynamic bonus for nearly full bins
    fullness = 1 - normalized_waste_bin
    nearly_full_bonus = np.where(fullness > 0.8, 0.3 * fullness, 0)  # Increase if bin is near full
    priorities[~infeasible_bins] += nearly_full_bonus[~infeasible_bins]

    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
