```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09,
                capacity_threshold: float = 0.75) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.
        capacity_threshold: Threshold to determine whether to prioritize nearly full bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Waste: Remaining capacity after placing the item.
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf  # Ensure infeasible bins are penalized

    # Normalized Waste: Waste relative to the item size and bin size.
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # Penalty for too small waste (encourages filling bins reasonably)
    small_waste_penalty = np.exp(-normalized_waste_item)  # Exponential penalty for small waste

    # Reward for filling the bin well.  A higher fill ratio is generally better.
    fill_ratio = item / bins_remain_cap
    fill_reward = fill_ratio

    # Adaptive Fullness Prioritization: Prioritize nearly full bins dynamically
    nearly_full_bins = bins_remain_cap > 0  # Avoid division by zero
    if np.any(bins_remain_cap / np.max(bins_remain_cap) > capacity_threshold):
         nearly_full_bins = bins_remain_cap / np.max(bins_remain_cap) > capacity_threshold # Only consider relatively full bins in the comparison
    else:
        nearly_full_bins = np.full(bins_remain_cap.shape, False)  # If no bins are near max, don't bias

    if np.any(nearly_full_bins & ~infeasible_bins):

        # Apply a stronger reward to bins that are nearly full *and* feasible
        priorities[nearly_full_bins & ~infeasible_bins] += 2 * fullness_bonus_weight
    else:
        priorities[~infeasible_bins] += fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])

    # Combine the factors: Prioritize based on fill ratio, penalized by small waste
    priorities[~infeasible_bins] += fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins]
    
    # Exploration: Add small constant to avoid identical priorities and encourage some differentiation.
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
