```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Waste Calculation
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    # 3. Normalized Waste Calculations (relative to item and bin)
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # 4. Small Waste Penalty:  Heavier penalty for very small waste.
    small_waste_penalty = np.exp(-normalized_waste_item * 5)  # Increased exponent for sharper penalty

    # 5. Fill Ratio Reward
    fill_ratio = item / bins_remain_cap

    # 6.  Bin Level Threshold: Bins nearly full get a significant boost
    almost_full = (waste > 0) & (waste < (bins_remain_cap * 0.1)) # Check if bin is within 10% of being full
    almost_full_bonus = np.zeros_like(bins_remain_cap)
    almost_full_bonus[almost_full] = 10  # Substantially large bonus

    # 7.  Bin Fullness Score:  Prioritize bins that can reach maximum capacity.
    bin_fullness_score = (1 - normalized_waste_bin)**2 # Squared for non-linear effect - emphasize bins that are more full already.

    # 8. Combine factors - adaptive weighting
    priorities[~infeasible_bins] = (fill_ratio[~infeasible_bins]
                                      - waste_penalty_weight * small_waste_penalty[~infeasible_bins]
                                      + fullness_bonus_weight * bin_fullness_score[~infeasible_bins]
                                      + almost_full_bonus[~infeasible_bins])

    # 9. Exploration Noise
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
