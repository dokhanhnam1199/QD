```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # The closer the item size is to the remaining capacity, the higher the priority
            priorities[i] = (cap - item + 1e-9) / (cap + 1e-9)  # Adding small constant to avoid division by zero
            # Scale by remaining capacity to favor bins that are fuller relative to their size
            priorities[i] = (1 - priorities[i]) * cap # Scale so that when cap-item is small, it is a good fit, but we still prefer larger cap
        else:
            priorities[i] = -np.inf  # Assign negative infinity if item doesn't fit
    return priorities
```
