```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Bin Utilization Score: Target near-perfect fill (but avoid overfill).  Inspired by Best-Fit Decreasing but adapted for online.

    # Calculate remaining capacity AFTER placing the item.
    remaining_after_placement = bins_remain_cap - item
    
    # Ideal remaining capacity after placement.  Adjustable parameter.
    ideal_remaining = 0.2  # Target leaving ~20% of bin capacity unused (tunable)

    # Penalty based on deviation from ideal_remaining.  Higher penalty for negative remaining (overfill)
    # Use a squared penalty to heavily penalize large deviations.
    deviation_penalty = np.where(remaining_after_placement < 0, 100 * (0 - remaining_after_placement)**2, (remaining_after_placement - ideal_remaining)**2)  # Heavy overfill penalty

    # Fill Ratio:  How much of the *original* bin capacity is filled?  Want to maximize.
    fill_ratio = item / (np.ones_like(bins_remain_cap) - bins_remain_cap + item) # Assuming all bins have size 1

    # Combine scores:  Prioritize high fill ratio, but penalize deviation from ideal remaining capacity.
    # Scale fill_ratio to have a meaningful weight relative to the penalty.

    priorities[~infeasible_bins] = fill_ratio[~infeasible_bins] - 0.1*deviation_penalty[~infeasible_bins]

    # 3. Tie-breaking:  Add small random noise.
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9
    
    return priorities
```
