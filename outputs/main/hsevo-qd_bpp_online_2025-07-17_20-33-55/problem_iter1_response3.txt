```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # A bin is feasible only if its remaining capacity is greater than or equal to item's size
    feasible_bins = bins_remain_cap >= item

    # Give a high priority to almost-full bins, but only if they're feasible
    almost_full_threshold = 0.95  # Experiment with this value
    almost_full_bins = (bins_remain_cap - item) / bins_remain_cap < (1-almost_full_threshold)
    priorities[feasible_bins & almost_full_bins] = 1000 # Very high priority to fill them quickly

    #Give a slightly lower, but still high, priority to bins that have low waste.
    low_waste_bins = (bins_remain_cap - item) / np.max(bins_remain_cap) < 0.1
    priorities[feasible_bins & low_waste_bins] = 500


    # Prioritize bins with remaining capacity closest to item size, avoiding fragmentation
    capacity_diff = np.abs(bins_remain_cap - item)
    priorities[feasible_bins] = 100 - (capacity_diff[feasible_bins] / np.max(bins_remain_cap)) * 50 #scale to avoid extreme values and normalize by max capacity
    
    # Small nudge to non-empty bins so empty bins aren't always chosen first
    non_empty_bins = bins_remain_cap < np.max(bins_remain_cap)
    priorities[feasible_bins & non_empty_bins] += 5

    # Make infeasible bins very low priority
    priorities[~feasible_bins] = -1000
    
    return priorities
```
