```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Waste Calculation and Normalization (only for feasible bins)
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf  # Ensure infeasible bins are penalized
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # 3. Small Waste Penalty: Exponential penalty, but scaled by bin size
    small_waste_penalty = np.exp(-normalized_waste_item) #* (1 + bins_remain_cap)  # Scale penalty by bin size
    small_waste_penalty[infeasible_bins] = 0 #ensure that infeasible bins do not contribute

    # 4. Fill Ratio Reward
    fill_ratio = item / bins_remain_cap
    fill_reward = fill_ratio

    # 5. Introduce a Bin Balancing Term: Encourages using bins with lower fill levels across all bins.
    # This helps distribute items more evenly.
    current_fill_levels = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Fill level relative to largest bin capacity
    bin_balancing_factor = np.mean(current_fill_levels) - current_fill_levels
    # Scale down bin_balancing_factor to a sensible range
    bin_balancing_factor = np.clip(bin_balancing_factor, -0.2, 0.2) * 0.1 #scale factor

    # 6. Combine Factors:
    priorities[~infeasible_bins] = (fill_reward[~infeasible_bins]
                                     - waste_penalty_weight * small_waste_penalty[~infeasible_bins]
                                     + fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])
                                     + bin_balancing_factor[~infeasible_bins]
                                     )
    # 7. Dynamic Noise Injection: Scale noise based on number of feasible bins.
    num_feasible = np.sum(~infeasible_bins)
    if num_feasible > 0:
        scaled_noise_level = noise_level / np.sqrt(num_feasible)  # Reduce noise if many choices exist
    else:
        scaled_noise_level = noise_level

    priorities += np.random.rand(len(bins_remain_cap)) * scaled_noise_level

    return priorities
```
