```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by quantum mechanics, we assign probabilities (priorities) based on
    a 'potential' that favors bins that are close to the item's size. This introduces
    a kind of 'tunneling' effect, allowing the algorithm to occasionally explore
    less obvious placements to potentially avoid creating many almost-empty bins.

    We use an exponential potential, and then normalize to get pseudo-probabilities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    potential = -np.abs(bins_remain_cap - item)  # Potential well centered around item size
    # Apply a temperature parameter to control exploration.  Higher temperature leads to more exploration
    temperature = np.mean(bins_remain_cap) # adaptive temperature
    priorities = np.exp(potential / temperature)  # Boltzmann distribution
    
    #Favor bins with sufficient capacity
    sufficient_capacity = (bins_remain_cap >= item)
    priorities = priorities * sufficient_capacity

    #Normalize so we have something akin to probabilities, and avoid zeros. Add a tiny eps
    priorities = priorities + 1e-9  # Avoid zero probabilities
    priorities = priorities / np.sum(priorities)
    
    return priorities
```
