```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, residual capacity target, and adaptive low waste bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # 1. Infeasible penalty
    priorities[~feasible_bins] = -np.inf

    # 2. Fill ratio with residual target
    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    target_relative_residual = 0.75
    relative_residual = residual_capacity / item
    priorities[feasible_bins] = fill_ratios[feasible_bins] / (1 + np.abs(relative_residual[feasible_bins] - target_relative_residual))

    # 3. Adaptive low waste bonus: bonus decreases with remaining capacity
    max_bin_capacity = np.max(bins_remain_cap)
    low_waste_threshold = 0.1
    low_waste_bins = (bins_remain_cap[feasible_bins] - item) / max_bin_capacity < low_waste_threshold
    bonus = 0.1 * (1 - bins_remain_cap[feasible_bins] / max_bin_capacity)
    priorities[feasible_bins] += np.where(low_waste_bins, bonus, 0) # Apply bonus only if it's low waste

    # 4. Small random number for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9
    
    return priorities
```
