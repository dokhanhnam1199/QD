{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version introduces adaptive elements:\n    - `aggressive_fill`: If True, prioritizes filling bins closer to full when sufficient capacity remains.\n    - `capacity_threshold`: If bins have low remaining capacity, focus on filling them completely.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        target_relative_residual: Ideal relative residual capacity after placing item.\n        random_priority_scale: Scale of random constant added to priorities.\n        aggressive_fill: Whether to prioritize bins that are close to full.\n        capacity_threshold: Threshold below which filling a bin takes highest priority.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # 2. Prioritize bins with very low capacity to encourage completion.\n    low_capacity_bins = bins_remain_cap < capacity_threshold\n    if np.any(low_capacity_bins):\n        priorities[low_capacity_bins] = 10  # High priority to fill these.\n\n    # 3. Maximize bin utilization: Prefer bins where the item fills a large portion\n    # of the remaining capacity, but not too large that it creates near-empty bins\n    # with the next item.\n    \n    # Fill ratio: item size / remaining capacity. Higher is better, but should be < 1.\n    fill_ratios = item / bins_remain_cap\n    \n    # Residual capacity after placing item\n    residual_capacity = bins_remain_cap - item\n    \n    # Relative residual capacity compared to item size. We want it large enough\n    # that we will likely fill it with some other item.\n    relative_residual = residual_capacity / item\n\n    # Score based on fill ratio, penalized if near-full or too empty after insertion.\n    # Scale by 1 / (1+abs(relative_residual-target)), where target = ideal value (say, 0.5 or 1)\n    priorities[~infeasible_bins & ~low_capacity_bins] = fill_ratios[~infeasible_bins & ~low_capacity_bins] / (1 + np.abs(relative_residual[~infeasible_bins & ~low_capacity_bins] - target_relative_residual))\n\n    # 4. Aggressive Fill: Give a boost to bins that are already relatively full\n    #    This encourages using partially filled bins over empty ones (when applicable)\n    if aggressive_fill:\n        fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalize to bin size.\n        priorities[~infeasible_bins & ~low_capacity_bins] += fullness[~infeasible_bins & ~low_capacity_bins] * 0.5\n\n    # Add small constant to avoid identical priorities and encourage some differentiation.\n    priorities += np.random.rand(len(bins_remain_cap)) * random_priority_scale\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best aspects of v0 and v1. Balances fill, waste, feasibility.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    \n    #Almost Full Bins\n    almost_full_threshold = 0.95\n    almost_full_bins = (bins_remain_cap - item) / bins_remain_cap < (1-almost_full_threshold)\n    priorities[feasible_bins & almost_full_bins] = 1000\n    \n    #Low Waste Bins\n    low_waste_bins = (bins_remain_cap - item) / np.max(bins_remain_cap) < 0.1\n    priorities[feasible_bins & low_waste_bins] = 500\n\n    # Capacity Difference\n    capacity_diff = np.abs(bins_remain_cap - item)\n    priorities[feasible_bins] = 100 - (capacity_diff[feasible_bins] / np.max(bins_remain_cap)) * 50\n\n    # Non-empty nudge\n    non_empty_bins = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[feasible_bins & non_empty_bins] += 5\n\n    # Infeasible penalty\n    priorities[~feasible_bins] = -1000\n    \n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates feasibility checks, waste minimization, fill ratio maximization, a fullness bonus, and noise, while the worst only considers a logarithmic ratio of item size to remaining capacity. (2nd best) vs (second worst) mirrors this, with richer features in the former. Comparing (1st) vs (2nd), we see parameterization of waste and fullness allows fine-tuning in the best. (3rd) vs (4th) are identical, indicating redundancy in the list. Comparing (second worst) vs (worst), the log ratio approach lacks essential constraints like feasibility. Overall: better heuristics incorporate multiple factors with weights, bonuses, and penalties to guide the bin selection process more effectively. The worst heuristics focus on single metrics or ratios without constraints or adaptability. Adding bonus and adaptive elements improves performance.\n- \nOkay, I'm aiming for that $999K tip! Let's redefine \"Current Self-Reflection\" to be more effective in designing better heuristics:\n\n*   **Keywords:** Multi-factor optimization, dynamic weighting, adaptive parameters, feasibility enforcement, state awareness, iterative refinement, problem-specific tuning, performance feedback.\n\n*   **Advice:** Focus on creating heuristics that intelligently balance multiple objectives and constraints. Design parameters to adapt to the specific problem instance and solution stage, and iteratively refine your approach based on performance feedback.\n\n*   **Avoid:** Static parameter settings, single-objective optimization, ignoring feasibility constraints, overlooking state information, premature convergence, and lack of refinement cycles.\n\n*   **Explanation:** Effective heuristic design requires a holistic view, dynamically adjusting to the problem's landscape. The goal is to create flexible heuristics that learn and adapt to achieve near-optimal solutions.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}