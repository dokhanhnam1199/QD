```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Inspired by gravitational potential and the second law of thermodynamics.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Apply a gravitational potential analogy: Larger remaining capacity attracts the item more strongly (lower potential).
    # Also, favor bins where the item fills a significant portion, but not perfectly.
    
    # Avoid division by zero and negative values in logarithms
    bins_remain_cap_safe = np.clip(bins_remain_cap, 1e-6, None)
    
    potential = -np.log(bins_remain_cap_safe)  # Gravitational potential (analogy)

    # Calculate how well the item fits in each bin (a measure of entropy).
    # A perfect fit (item == remaining capacity) should have a lower priority.
    fit_score = -np.abs(bins_remain_cap_safe - item) # closer to 0 is a better fit.

    # Combine the potential (capacity) and fit (entropy) scores
    # We want to prioritize based on high capacity and good fit, but the item MUST fit.
    
    priorities = np.where(bins_remain_cap_safe >= item, potential + fit_score, -np.inf) #Only assign priority if it fits

    return priorities
```
