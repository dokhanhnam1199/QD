```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # 2. Fill Ratio: Maximize the fill ratio, but penalize bins that become too full or too empty
    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    
    # Penalize bins that become too full (residual < min_residual) or too empty (residual > max_residual)
    min_residual = item * 0.1  # Avoid bins with very little space left
    max_residual = item * 2    # Avoid creating excessively empty bins if possible
    
    full_penalty = np.where(residual_capacity < min_residual, -10 * (min_residual - residual_capacity), 0)
    empty_penalty = np.where(residual_capacity > max_residual, -5 * (residual_capacity - max_residual), 0)
    
    # 3. First Fit Decreasing Inspired: Give a slight bonus to bins that are already relatively full
    # This encourages filling up bins that have already been started
    already_full_bonus = (1 - bins_remain_cap / np.max(bins_remain_cap)) * 2
    
    # 4. Combine all factors into the priority score
    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins] + full_penalty[~infeasible_bins] + empty_penalty[~infeasible_bins] + already_full_bonus[~infeasible_bins]
    
    # Add small constant to avoid identical priorities and encourage some differentiation.
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
