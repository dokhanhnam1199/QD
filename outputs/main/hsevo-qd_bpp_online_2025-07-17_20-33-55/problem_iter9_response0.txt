```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Waste calculation and handling of infeasible bins
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    # 3. Normalized waste based on item size and bin capacity
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # 4. Small waste penalty: Exponential penalty, more sensitive.
    small_waste_penalty = np.exp(-5 * normalized_waste_item) # Increase the exponent to penalize more

    # 5. Fill ratio reward: Sigmoid function to reward high fill ratios more
    fill_ratio = item / bins_remain_cap
    fill_reward = 1 / (1 + np.exp(-10 * (fill_ratio - 0.8)))  # Sigmoid, centerd around 0.8

    # 6. Combine factors: Adjusted weights for better balance
    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins]

    # 7. Fullness bonus: Stronger bonus for almost-full bins
    almost_full_bonus = np.exp(-20 * normalized_waste_bin) # Strong bonus when bin is nearly full
    priorities[~infeasible_bins] += fullness_bonus_weight * almost_full_bonus[~infeasible_bins]

    # 8. Introduce a bin-selection bias based on current bin utilization
    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    utilization_bias = 0.01 * bin_utilization  # Small bias to prefer bins with more items already in them
    priorities[~infeasible_bins] += utilization_bias[~infeasible_bins]

    # 9. Noise
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
