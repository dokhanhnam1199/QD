```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067, fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, improved version.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Waste calculation
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    # Fill Ratio Calculation
    fill_ratio = item / bins_remain_cap
    fill_ratio[infeasible_bins] = 0  # No fill if infeasible

    # Normalized Waste: Waste relative to the item size. This is crucial.
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # Small Waste Penalty (Revised): Stronger penalty for tiny waste.  Also, make it depend on bin size to some extent
    small_waste_threshold = 0.1 * bins_remain_cap # Dynamic threshold proportional to bin size
    small_waste_penalty = np.where(waste < small_waste_threshold, np.exp(5 * (waste - small_waste_threshold)/small_waste_threshold), 0.0)

    # Fullness Bonus (Revised):  Reward higher fill ratios more aggressively.
    fullness_bonus = fill_ratio**2  # Quadratic bonus for high fill ratios

    # Reward for bins that will be completely filled after the addition of the item
    perfect_fit = np.isclose(waste, 0)
    priorities[perfect_fit] = np.inf  # Huge priority for perfect fits

    # Combine factors with weights
    priorities[~infeasible_bins] = (fill_ratio[~infeasible_bins] +
                                     fullness_bonus_weight * fullness_bonus[~infeasible_bins] -
                                     waste_penalty_weight * small_waste_penalty[~infeasible_bins])

    # Add noise for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
