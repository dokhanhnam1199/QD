```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Waste calculation and handling of infeasible bins
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    # 3. Normalized waste calculations (item-relative and bin-relative)
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # 4. Small waste penalty - adjusted for better scaling
    small_waste_penalty = np.exp(-5 * normalized_waste_item) # Increased sensitivity

    # 5. Fill ratio reward
    fill_ratio = item / bins_remain_cap

    # 6. Remaining Capacity Reward: Encourage bins with small remaining capacity to be filled up
    remaining_capacity_reward = np.exp(-5 * bins_remain_cap)

    # 7. Combination of factors with dynamic weights:

    # Adaptive Waste Penalty: Increase the penalty as the item size increases to avoid fragmentation
    adaptive_waste_penalty_weight = waste_penalty_weight * (1 + item)

    # Adaptive Fullness Bonus: Increase the bonus when remaining capacities are large
    adaptive_fullness_bonus_weight = fullness_bonus_weight * (1 + np.mean(bins_remain_cap))

    priorities[~infeasible_bins] = fill_ratio[~infeasible_bins] - adaptive_waste_penalty_weight * small_waste_penalty[~infeasible_bins] + adaptive_fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins]) + remaining_capacity_reward[~infeasible_bins]

    # 8. Add small noise for diversity
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
