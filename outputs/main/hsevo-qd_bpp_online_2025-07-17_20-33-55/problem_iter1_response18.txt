```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    
    # Heuristic 1: Prefer bins where item fills a large proportion of the bin's remaining capacity (but fits!)
    fill_ratio = item / bins_remain_cap
    priorities[fit_mask] = fill_ratio[fit_mask]

    # Heuristic 2: Among the bins that fit, slightly prefer bins with less remaining capacity after placing the item
    #This avoids leaving very small useless fragments. We add small values to avoid division by zero or log of zero
    remaining_capacity_after_placement = bins_remain_cap - item + 1e-9

    priorities[fit_mask] += 1.0 / (remaining_capacity_after_placement[fit_mask] + 1e-9) # Avoid div by zero if item == remaining_cap

    #Very important - make bins that CANNOT fit, have the lowest priority possible
    priorities[~fit_mask] = -np.inf  # Ensure bins that can't fit have the lowest priority
    
    return priorities
```
