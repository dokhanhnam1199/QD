```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates bin priorities considering feasibility, fill ratio, and waste. 
    Combines aspects of v0 and v1 for improved performance.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Fill ratio score
    fill_ratios = item / bins_remain_cap

    # Residual capacity after insertion
    residual_capacity = bins_remain_cap - item

    # Relative residual capacity
    relative_residual = residual_capacity / item

    # Target relative residual and combine fill ratio. Adaptive target.
    target_relative_residual = np.clip(np.mean(residual_capacity) / item, 0.25, 1.0)  # Dynamic target
    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins] / (1 + np.abs(relative_residual[~infeasible_bins] - target_relative_residual))

    # Bonus for fuller bins, but penalize near-full bins more harshly
    fullness_bonus = np.zeros_like(bins_remain_cap, dtype=float)
    nearly_full = (residual_capacity > 0) & (residual_capacity < item * 0.2) #Bins that will be almost full
    fullness_bonus[~infeasible_bins] = np.exp(-10 * residual_capacity[~infeasible_bins] / bins_remain_cap[~infeasible_bins]) #Exponential penalty for almost full

    priorities[~infeasible_bins] -= fullness_bonus[~infeasible_bins]

    # Add small noise for differentiation
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
