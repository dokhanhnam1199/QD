```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, residual target, and fullness bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    fill_ratio = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    target_relative_residual = 0.5 # Target residual to item size ratio.
    relative_residual = residual_capacity / item
    
    priorities[~infeasible_bins] = fill_ratio[~infeasible_bins] / (1 + np.abs(relative_residual[~infeasible_bins] - target_relative_residual))
    
    almost_full = (residual_capacity / 1) < 0.1 # Bins with remaining capacity below 10%
    priorities[almost_full] += 0.5 # Prioritize almost full bins
    
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9 # Small noise
    
    return priorities
```
