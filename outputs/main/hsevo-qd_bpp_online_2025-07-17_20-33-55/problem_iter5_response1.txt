```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio and waste minimization with dynamic weights."""
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    
    # Infeasible penalty
    priorities[~feasible_bins] = -1000

    #Fill Ratio Reward
    fill_ratio = item / bins_remain_cap
    priorities[feasible_bins] = fill_ratio[feasible_bins]

    #Waste Penalty
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf
    normalized_waste = waste / np.max(bins_remain_cap)
    priorities[feasible_bins] -= 0.5 * normalized_waste[feasible_bins]

    #Dynamic weight adjustment (example, can be more sophisticated)
    if np.mean(fill_ratio[feasible_bins]) > 0.8:
      priorities[feasible_bins] += 0.1 #Promote full bins

    return priorities
```
