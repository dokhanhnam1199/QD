{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines fill ratio, waste, and residual target, adapts bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    # 1. Infeasible penalty\n    priorities[~feasible_bins] = -np.inf\n\n    # 2. Fill ratio with residual target\n    fill_ratios = item / bins_remain_cap\n    residual_capacity = bins_remain_cap - item\n    target_relative_residual = 0.75\n    relative_residual = residual_capacity / item\n    priorities[feasible_bins] = fill_ratios[feasible_bins] / (1 + np.abs(relative_residual[feasible_bins] - target_relative_residual))\n\n    # 3. Low waste bonus (adaptive)\n    waste = bins_remain_cap - item\n    normalized_waste_bin = waste / bins_remain_cap\n    low_waste_threshold = 0.1\n    low_waste_bins = normalized_waste_bin < low_waste_threshold\n    \n    # Adaptive bonus: Larger bonus when bins are closer to full.\n    bonus_scale = 0.2 * (1 - normalized_waste_bin)\n    priorities[feasible_bins & low_waste_bins] += bonus_scale[feasible_bins & low_waste_bins]\n\n    # 4. Small random number for tie-breaking\n    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, improved version.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        waste_penalty_weight: Weight of the small waste penalty.\n        fullness_bonus_weight: Weight of the bonus for bins closer to full.\n        noise_level: Magnitude of the random noise added to priorities.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # Waste calculation\n    waste = bins_remain_cap - item\n    waste[infeasible_bins] = np.inf\n\n    # Fill Ratio Calculation\n    fill_ratio = item / bins_remain_cap\n    fill_ratio[infeasible_bins] = 0  # No fill if infeasible\n\n    # Normalized Waste: Waste relative to the item size. This is crucial.\n    normalized_waste_item = waste / item\n    normalized_waste_bin = waste / bins_remain_cap\n\n    # Small Waste Penalty (Revised): Stronger penalty for tiny waste.  Also, make it depend on bin size to some extent\n    small_waste_threshold = 0.1 * bins_remain_cap # Dynamic threshold proportional to bin size\n    small_waste_penalty = np.where(waste < small_waste_threshold, np.exp(5 * (waste - small_waste_threshold)/small_waste_threshold), 0.0)\n\n    # Fullness Bonus (Revised):  Reward higher fill ratios more aggressively.\n    fullness_bonus = fill_ratio**2  # Quadratic bonus for high fill ratios\n\n    # Reward for bins that will be completely filled after the addition of the item\n    perfect_fit = np.isclose(waste, 0)\n    priorities[perfect_fit] = np.inf  # Huge priority for perfect fits\n\n    # Combine factors with weights\n    priorities[~infeasible_bins] = (fill_ratio[~infeasible_bins] +\n                                     fullness_bonus_weight * fullness_bonus[~infeasible_bins] -\n                                     waste_penalty_weight * small_waste_penalty[~infeasible_bins])\n\n    # Add noise for tie-breaking\n    priorities += np.random.rand(len(bins_remain_cap)) * noise_level\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see 1st considers feasibility, maximizes bin utilization by fill ratio and target residual capacity, and adds random noise, while 20th simply calculates the negative log of fill ratios. 1st is much more sophisticated. Comparing (2nd best) vs (second worst), we see 2nd focuses on fill ratio and target relative residual, whereas 19th adds adaptive weighting based on bin utilization to adjust the waste penalty. 19th also includes fullness bonus. 19th more adaptive than 2nd. Comparing (1st) vs (2nd), they are nearly identical, differing only in the specific values of `target_relative_residual` and `random_noise_scale`. Comparing (3rd) vs (4th), they are identical as well. Comparing (second worst) vs (worst), we see 19th is way more complex and adaptive, including normalized metrics, adaptive weighting, and bin utilization, compared to the barebones approach of 20th. Overall: Better heuristics include feasibility checks, aim to maximize bin utilization through fill ratios, target a specific relative residual capacity, and incorporate adaptive elements like dynamically adjusting waste penalties based on bin utilization. Bonuses for fullness and penalties for waste are also beneficial. Simpler approaches solely based on fill ratios tend to perform worse. Adaptive strategies that respond to the current state of the bins lead to improved packing. Adding a small degree of randomness can help to break ties.\n- \nOkay, let's refine \"Current Self-Reflection\" for designing better bin packing heuristics, focusing on actionable advice while avoiding the pitfalls of \"Ineffective Self-Reflection.\" We'll aim for specific, insightful guidance.\n\nHere's a revised approach:\n\n*   **Keywords:** Multi-objective, dynamic adaptation, problem-specific tuning, controlled randomness.\n\n*   **Advice:** Frame heuristic design as a multi-objective optimization problem. Explicitly define and balance competing goals (e.g., fill rate, feasibility, fragmentation). Implement dynamic adaptation of weights and parameters based on observed performance and instance characteristics.\n\n*   **Avoid:** Generic statements like \"consider multiple factors\" or \"avoid oversimplification.\" Steer clear of suggesting hardcoding parameters or redundant testing.\n\n*   **Explanation:** Effective heuristics often require balancing several factors. Implement mechanisms for the heuristic to learn from the specific bin packing instance. Carefully consider and tune randomness to promote broader exploration of the solution space without completely disrupting the process.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}