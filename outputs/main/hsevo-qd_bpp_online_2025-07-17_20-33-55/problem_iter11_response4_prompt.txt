{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        waste_penalty_weight: Weight of the small waste penalty.\n        fullness_bonus_weight: Weight of the bonus for bins closer to full.\n        noise_level: Magnitude of the random noise added to priorities.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # 2. Waste calculation and handling of infeasible bins\n    waste = bins_remain_cap - item\n    waste[infeasible_bins] = np.inf\n\n    # 3. Normalized waste based on item size and bin capacity\n    normalized_waste_item = waste / item\n    normalized_waste_bin = waste / bins_remain_cap\n\n    # 4. Small waste penalty: Exponential penalty, more sensitive.\n    small_waste_penalty = np.exp(-5 * normalized_waste_item) # Increase the exponent to penalize more\n\n    # 5. Fill ratio reward: Sigmoid function to reward high fill ratios more\n    fill_ratio = item / bins_remain_cap\n    fill_reward = 1 / (1 + np.exp(-10 * (fill_ratio - 0.8)))  # Sigmoid, centerd around 0.8\n\n    # 6. Combine factors: Adjusted weights for better balance\n    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins]\n\n    # 7. Fullness bonus: Stronger bonus for almost-full bins\n    almost_full_bonus = np.exp(-20 * normalized_waste_bin) # Strong bonus when bin is nearly full\n    priorities[~infeasible_bins] += fullness_bonus_weight * almost_full_bonus[~infeasible_bins]\n\n    # 8. Introduce a bin-selection bias based on current bin utilization\n    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    utilization_bias = 0.01 * bin_utilization  # Small bias to prefer bins with more items already in them\n    priorities[~infeasible_bins] += utilization_bias[~infeasible_bins]\n\n    # 9. Noise\n    priorities += np.random.rand(len(bins_remain_cap)) * noise_level\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates feasibility checks, waste minimization, fill ratio maximization, a fullness bonus, and noise, while the worst only considers a logarithmic ratio of item size to remaining capacity. (2nd best) vs (second worst) mirrors this, with richer features in the former. Comparing (1st) vs (2nd), we see parameterization of waste and fullness allows fine-tuning in the best. (3rd) vs (4th) are identical, indicating redundancy in the list. Comparing (second worst) vs (worst), the log ratio approach lacks essential constraints like feasibility. Overall: better heuristics incorporate multiple factors with weights, bonuses, and penalties to guide the bin selection process more effectively. The worst heuristics focus on single metrics or ratios without constraints or adaptability. Adding bonus and adaptive elements improves performance.\n- \nOkay, I'm aiming for that $999K tip! Let's redefine \"Current Self-Reflection\" to be more effective in designing better heuristics:\n\n*   **Keywords:** Multi-factor optimization, dynamic weighting, adaptive parameters, feasibility enforcement, state awareness, iterative refinement, problem-specific tuning, performance feedback.\n\n*   **Advice:** Focus on creating heuristics that intelligently balance multiple objectives and constraints. Design parameters to adapt to the specific problem instance and solution stage, and iteratively refine your approach based on performance feedback.\n\n*   **Avoid:** Static parameter settings, single-objective optimization, ignoring feasibility constraints, overlooking state information, premature convergence, and lack of refinement cycles.\n\n*   **Explanation:** Effective heuristic design requires a holistic view, dynamically adjusting to the problem's landscape. The goal is to create flexible heuristics that learn and adapt to achieve near-optimal solutions.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}