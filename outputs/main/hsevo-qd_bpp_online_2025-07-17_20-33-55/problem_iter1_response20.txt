```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: assign -inf priority to bins that cannot fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # For feasible bins, calculate a score based on remaining capacity after adding the item.
    feasible_bins = ~infeasible_bins
    remaining_capacity_after_fit = bins_remain_cap[feasible_bins] - item

    # Give higher priority to bins where the remaining capacity is small but non-negative
    # to encourage filling bins as much as possible. We add a small value to avoid division by zero
    priorities[feasible_bins] = 1.0 / (remaining_capacity_after_fit + 0.0001)
    
    # Bonus for bins that fit the item almost perfectly (within some tolerance). This can avoid creating extremely small remaining capacity.
    almost_full_mask = (remaining_capacity_after_fit >= 0) & (remaining_capacity_after_fit <= 0.1) #tolerance = 0.1
    priorities[feasible_bins][almost_full_mask] += 10 # Add a large bonus
    
    # Negative priority if item would cause bin to be too empty. Encourage use of partially-full bins,
    too_empty_mask = (remaining_capacity_after_fit > 0.5) & (remaining_capacity_after_fit < 1) # arbitrary constant
    priorities[feasible_bins][too_empty_mask] -= 5

    return priorities
```
