```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best aspects of v0 and v1 for improved bin selection."""
    priorities = np.zeros_like(bins_remain_cap)

    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1000 # Big penalty

    # Prioritize almost full bins
    almost_full_threshold = 0.95
    almost_full_bins = (bins_remain_cap - item) / bins_remain_cap < (1 - almost_full_threshold)
    priorities[feasible_bins & almost_full_bins] = 1000

    # Prioritize bins with low waste, scaling by max bin size
    low_waste_threshold = 0.1
    low_waste_bins = (bins_remain_cap - item) / np.max(bins_remain_cap) < low_waste_threshold
    priorities[feasible_bins & low_waste_bins] = 500

    #Prioritize snug fit to reduce fragmenation
    capacity_diff = np.abs(bins_remain_cap - item)
    priorities[feasible_bins] += 100 - (capacity_diff[feasible_bins] / np.max(bins_remain_cap)) * 50 #scale to avoid extreme values and normalize by max capacity

    # Nudge to prioritize non-empty bins, avoids always picking empty bins
    non_empty_bins = bins_remain_cap < np.max(bins_remain_cap)
    priorities[feasible_bins & non_empty_bins] += 5
    
    # Gravitational pull based on remaining capacity
    available_bins = bins_remain_cap >= item
    if np.any(available_bins):
      remaining_capacity_after_fit = bins_remain_cap[available_bins] - item
      gravitational_pull = 1.0 / (remaining_capacity_after_fit + 0.00001)  # Avoid division by zero
      priorities[available_bins] += gravitational_pull * 10 #scale to make it more relevant

    return priorities
```
