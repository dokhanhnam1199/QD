{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n    \n    # 2. Maximize bin utilization: Prefer bins where the item fills a large portion\n    # of the remaining capacity, but not too large that it creates near-empty bins\n    # with the next item.\n    \n    # Fill ratio: item size / remaining capacity. Higher is better, but should be < 1.\n    fill_ratios = item / bins_remain_cap\n    \n    # Residual capacity after placing item\n    residual_capacity = bins_remain_cap - item\n    \n    # Relative residual capacity compared to item size. We want it large enough\n    # that we will likely fill it with some other item.\n    relative_residual = residual_capacity / item\n\n    # Score based on fill ratio, penalized if near-full or too empty after insertion.\n    # Scale by 1 / (1+abs(relative_residual-target)), where target = ideal value (say, 0.5 or 1)\n    target_relative_residual = 0.75\n    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins] / (1 + np.abs(relative_residual[~infeasible_bins] - target_relative_residual))\n    \n    # Add small constant to avoid identical priorities and encourage some differentiation.\n    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines fill ratio, residual capacity target, and low waste.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    # 1. Infeasible penalty\n    priorities[~feasible_bins] = -np.inf\n\n    # 2. Fill ratio with residual target\n    fill_ratios = item / bins_remain_cap\n    residual_capacity = bins_remain_cap - item\n    target_relative_residual = 0.75\n    relative_residual = residual_capacity / item\n    priorities[feasible_bins] = fill_ratios[feasible_bins] / (1 + np.abs(relative_residual[feasible_bins] - target_relative_residual))\n\n    # 3. Low waste bonus\n    low_waste_threshold = 0.1\n    low_waste_bins = (bins_remain_cap - item) / np.max(bins_remain_cap) < low_waste_threshold\n    priorities[feasible_bins & low_waste_bins] += 0.1  # Add a bonus for low waste\n\n    # 4. Small random number for tie-breaking\n    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9\n    \n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the top heuristics includes more factors such as feasibility check, waste, fill ratio, and bonuses, while the worst only considers log ratios. Comparing (2nd best) vs (second worst), the second-best is identical to the first, while the second worst is identical to the worst. Comparing (1st) vs (2nd), we see there is no difference in the code. (3rd) vs (4th) introduces the concept of `target_relative_residual` and `random_priority_scale` which are parameters absent in (1st) (2nd) and (3rd). Comparing (second worst) vs (worst), there's no difference in the code. Overall: The best heuristics incorporate more complex logic, considering factors beyond simple fill ratios, and allow for fine-tuning via parameters. Simpler approaches focusing solely on ratios tend to perform worse. Adaptive elements, like the aggressive fill and capacity threshold, improve performance by tailoring the heuristic's behavior based on the current state.\n- \nOkay, here's a redefined approach to self-reflection for designing heuristics, aimed at avoiding common pitfalls and promoting more effective strategies:\n\n*   **Keywords:** Holistic assessment, dynamic adaptation, configurable parameters, emergent behavior.\n\n*   **Advice:** Focus on understanding the *interplay* between different factors influencing the objective function, not just their individual contributions. Design mechanisms for the heuristic to *learn* and *adapt* its behavior based on observed performance and problem characteristics.\n\n*   **Avoid:** Rigid parameterization, static weighting schemes, and predefined rules that cannot evolve. Resist the urge to over-engineer by prematurely focusing on low-level implementation details.\n\n*   **Explanation:** Move beyond simply *considering* multiple factors. Aim to create a system where those factors interact in a way that generates emergent, intelligent behavior. Think of parameters as dials to *influence* this behavior, rather than fixed instructions.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}