```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, residual capacity, and adaptive penalty for waste."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    fill_ratio = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    normalized_waste_bin = residual_capacity / bins_remain_cap
    
    # Adaptive waste penalty based on fill ratio.
    waste_penalty = np.exp(-fill_ratio)
    
    priorities[~infeasible_bins] = fill_ratio[~infeasible_bins] - 0.1 * waste_penalty[~infeasible_bins] + 0.2 * (1 - normalized_waste_bin[~infeasible_bins])
    
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9 # add a tiny bit of noise
    return priorities
```
