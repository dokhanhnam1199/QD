```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.20,
                fullness_bonus_weight: float = 0.30, item_size_threshold: float = 0.5,
                noise_level: float = 1e-9) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin, incorporating dynamic adjustments.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        item_size_threshold: Threshold for item size to adjust strategy.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # Dynamic Adjustment based on Item Size
    if item > item_size_threshold:
        # For larger items, prioritize bins with enough space to minimize fragmentation
        # Reduce waste penalty, increase fullness bonus
        small_waste_penalty = np.exp(-2 * normalized_waste_item)  # Increased penalty exponent
        fill_reward = item / bins_remain_cap
        priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - (waste_penalty_weight / 2) * small_waste_penalty[~infeasible_bins]
        priorities[~infeasible_bins] += (2 * fullness_bonus_weight) * (1 - normalized_waste_bin[~infeasible_bins])  # Increased bonus

    else:
        # For smaller items, focus on filling up bins as much as possible
        small_waste_penalty = np.exp(-normalized_waste_item)
        fill_reward = item / bins_remain_cap
        priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins]
        priorities[~infeasible_bins] += fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])

    # Adaptive Waste Penalty: Scale penalty based on remaining capacity
    adaptive_waste_penalty = small_waste_penalty * (1 + np.exp(-bins_remain_cap))  #Higher penalty for bins nearly full
    priorities[~infeasible_bins] -= (waste_penalty_weight / 4) * adaptive_waste_penalty[~infeasible_bins]

    # Bin Balancing: Encourage using underutilized bins
    average_cap = np.mean(bins_remain_cap)
    bin_utilization = 1 - (bins_remain_cap / average_cap)
    priorities[~infeasible_bins] += 0.05 * bin_utilization[~infeasible_bins]

    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
