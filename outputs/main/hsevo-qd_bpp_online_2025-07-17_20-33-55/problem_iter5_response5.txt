```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, target_relative_residual: float = 0.7, random_priority_scale: float = 0.01) -> np.ndarray:
    """Combines fill ratio, residual capacity, and waste minimization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # 1. Infeasibility check
    priorities[~feasible_bins] = -np.inf

    # 2. Fill ratio and residual capacity
    fill_ratios = item / bins_remain_cap
    residual_capacity = bins_remain_cap - item
    relative_residual = residual_capacity / item
    
    priorities[feasible_bins] = fill_ratios[feasible_bins] / (1 + np.abs(relative_residual[feasible_bins] - target_relative_residual))

    # 3. Low waste bonus
    low_waste_threshold = 0.1
    low_waste_bins = (bins_remain_cap - item) / np.max(bins_remain_cap) < low_waste_threshold
    priorities[feasible_bins & low_waste_bins] += 0.1  # Small bonus for low waste

    # 4. Randomization
    priorities += np.random.rand(len(bins_remain_cap)) * random_priority_scale

    return priorities
```
