```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins based on a combination of factors,
    inspired by concepts from quantum mechanics and thermodynamics:

    1. **Energy Level (Remaining Capacity):** Bins with capacities close to the item size
       are treated as having a lower "energy level". Filling these is more "natural".
    2. **Boltzmann Distribution (Temperature):** We introduce a "temperature" parameter.
       At high "temperature", all bins become almost equally likely. At low "temperature",
       energy levels (capacity differences) dominate.
    3. **Penalty for Overflow:** Applying a large negative score if item doesn't fit.
    4. **Aspiration Criterion**: Prioritizes bins where item can perfectly fit

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    temperature = 0.5 #tune this
    delta_e = np.abs(bins_remain_cap - item) #energy
    boltzmann_factor = np.exp(-delta_e / temperature)

    #penalty for not fitting
    overflow_penalty = -1e9 * (item > bins_remain_cap)

    #aspiration criterion (prioritize perfect fits)
    perfect_fit_bonus = 1e9 * (bins_remain_cap == item)
    
    priorities = boltzmann_factor + overflow_penalty + perfect_fit_bonus

    return priorities
```
