```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio, waste, and adaptive bonus for bin selection."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    # 1. Infeasible penalty
    priorities[~feasible_bins] = -np.inf

    # 2. Fill ratio
    fill_ratios = item / bins_remain_cap
    priorities[feasible_bins] = fill_ratios[feasible_bins]

    # 3. Waste penalty & Bonus
    waste = bins_remain_cap - item
    normalized_waste_bin = waste / bins_remain_cap
    small_waste_penalty = np.exp(-waste/item)
    priorities[feasible_bins] -= 0.1 * small_waste_penalty[feasible_bins]  # Penalize small waste
    priorities[feasible_bins] += 0.2 * (1-normalized_waste_bin[feasible_bins]) #Bonus close to full
    # 4. Small random number for tie-breaking
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-9

    return priorities
```
