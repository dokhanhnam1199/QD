```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering feasibility, fill ratio, and adaptive fullness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Fill ratio score
    fill_ratios = item / bins_remain_cap
    priorities[~infeasible_bins] = fill_ratios[~infeasible_bins]

    # Adaptive bonus: prioritize fuller bins, but avoid creating very small wastes
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    waste_penalty = np.where(bins_remain_cap - item < 0.1*np.max(bins_remain_cap), -0.2, 0) # Penalty for small waste

    priorities[~infeasible_bins] += fullness[~infeasible_bins]*0.3 + waste_penalty[~infeasible_bins]
    
    # Add noise to prevent ties.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
