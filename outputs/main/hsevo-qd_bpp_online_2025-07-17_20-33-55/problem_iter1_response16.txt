```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item snugly, but also
    includes a penalty for bins that are already very full (to avoid
    overfilling bins prematurely).  It also adds a small bonus to bins
    that are completely empty, encouraging initial bin usage.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Huge negative priority if item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Bonus for empty bins to encourage initial usage
    priorities[bins_remain_cap == 1.0] += 1.0 #Assuming bin capacity is 1.0, change this if other bin sizes are tested

    # Main priority calculation for bins that *can* fit the item:
    # - Use the *inverse* of the remaining capacity *after* adding the item.
    #   This gives higher priority to bins where the item results in a smaller
    #   remaining space (i.e., a snug fit). We want the *negative* of this to maximize usage but minimize wasted space
    # - Add a small penalty for bins that are already nearly full, given by some function of the original remaining capacity.
    #   This function should be small but sensitive to remaining capacities less than the item
    fit_mask = bins_remain_cap >= item

    remaining_after_fit = bins_remain_cap[fit_mask] - item
    # Avoid division by zero by adding a small constant.
    # and avoid taking the log of zero
    priorities[fit_mask] += -np.log(remaining_after_fit + 1e-9)

    #A penalty for bins that are close to full before placement
    priorities[fit_mask] -= 0.1*np.exp(-bins_remain_cap[fit_mask]/item) #Adjust the 0.1 to be a larger value for tighter restrictions

    return priorities
```
