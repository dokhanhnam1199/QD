```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09,
                bin_utilization_weight: float = 0.1,  # Add a weight for bin utilization
                item_frag_penalty_weight: float = 0.1) -> np.ndarray:  # Add weight for item fragmentation

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.
        bin_utilization_weight: Weight to give to bin utilization during priority assignment.
        item_frag_penalty_weight: Penalize bin selection when item is too small

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2.  First-Fit Decreasing inspired: Prioritize bins that can accommodate the item
    #     with minimal waste.  Avoid creating very small remaining spaces if possible.

    # Waste: Remaining capacity after placing the item.
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf  # Ensure infeasible bins are penalized

    # Normalized Waste: Waste relative to the item size and bin size.
    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # Penalty for too small waste (encourages filling bins reasonably)
    small_waste_penalty = np.exp(-normalized_waste_item)  # Exponential penalty for small waste

    # Reward for filling the bin well.  A higher fill ratio is generally better.
    fill_ratio = item / bins_remain_cap
    fill_reward = fill_ratio

    # Combine the factors: Prioritize based on fill ratio, penalized by small waste
    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins]

    # Bonus:  Slightly prioritize bins closer to full if other factors are equal.
    # This helps close out bins more quickly. Only apply if not infeasible.
    priorities[~infeasible_bins] += fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])

    # Bin Utilization component - Encourages usage of bins rather than creating new ones.
    bin_utilization = (bins_remain_cap - waste) / np.max(bins_remain_cap)  # Normalize
    priorities[~infeasible_bins] += bin_utilization_weight * bin_utilization[~infeasible_bins]

    # Item fragmentation penalty- discourages putting very small items into partially filled bins
    # Apply a penalty if the item is small compared to bin capacity.
    item_frag_penalty = np.where(item / bins_remain_cap[~infeasible_bins] < 0.1, 1, 0)  # Example threshold of 0.1
    priorities[~infeasible_bins] -= item_frag_penalty_weight * item_frag_penalty

    # Add small constant to avoid identical priorities and encourage some differentiation.
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
