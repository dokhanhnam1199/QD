```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.2013748833676067,
                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version introduces dynamic weighting and a more nuanced approach
    to waste management, along with bin utilization considerations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_weight: Weight of the small waste penalty.
        fullness_bonus_weight: Weight of the bonus for bins closer to full.
        noise_level: Magnitude of the random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Waste Calculation & Normalization (Critical for Fine-tuning)
    waste = bins_remain_cap - item
    waste[infeasible_bins] = np.inf

    normalized_waste_item = waste / item
    normalized_waste_bin = waste / bins_remain_cap

    # 3. Dynamic Waste Penalty: Adapt to item size.  Heavier penalty for *very* small waste
    # and gradually lessening penalty as waste increases (but is still small relative to the item)
    small_waste_penalty = np.exp(-5 * normalized_waste_item)  # Increased exponent

    # 4. Bin Utilization Reward: Encourage high fill ratios, but with a saturation effect.
    fill_ratio = item / bins_remain_cap
    fill_reward = np.tanh(3 * fill_ratio)  # tanh provides saturation

    # 5. Combined Priority (Core Logic)
    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins]

    # 6. Fullness Bonus: Gradual bonus based on how close to full the bin will be.
    priorities[~infeasible_bins] += fullness_bonus_weight * (1 - normalized_waste_bin[~infeasible_bins])

    # 7. Global Bin Utilization Consideration:
    # Reward bins that are close to the average fill level *across all* bins.
    # This encourages a balanced distribution of items.

    avg_fill = np.mean((bins_remain_cap - waste)[~infeasible_bins]) if np.any(~infeasible_bins & (waste != np.inf)) else 0.0  # Avoid division by zero and consider only feasible bins.

    bin_utilization_diff = np.abs((bins_remain_cap[~infeasible_bins] - waste[~infeasible_bins]) - avg_fill)
    bin_utilization_reward = np.exp(-0.5 * bin_utilization_diff) # Reward bins close to the average. We don't want to penalize any bins by assigning negtive reward.
    priorities[~infeasible_bins] += 0.05 * bin_utilization_reward # Small weight as to not overly affect other components.

    # 8. Noise Injection (Stochasticity for Exploration)
    priorities += np.random.rand(len(bins_remain_cap)) * noise_level

    return priorities
```
