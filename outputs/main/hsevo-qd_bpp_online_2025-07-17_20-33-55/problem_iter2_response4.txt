```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines gravitational pull and fill ratio for bin priority."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    available_bins = bins_remain_cap >= item
    if np.any(available_bins):
        remaining_capacity_after_fit = bins_remain_cap[available_bins] - item
        # Gravitational Pull
        priorities[available_bins] = 1.0 / (remaining_capacity_after_fit + 0.00001)
        priorities[available_bins] = priorities[available_bins] / np.sum(priorities[available_bins])

    # Fill Ratio - Favor bins that are already relatively full
    fill_ratios = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)  # Normalized fill ratio
    priorities = priorities + 0.1 * fill_ratios  # Add fill ratio to existing priorities

    return priorities
```
