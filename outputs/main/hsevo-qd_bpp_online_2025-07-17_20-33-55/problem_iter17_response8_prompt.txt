{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best aspects of v0 and v1. Balances fill, waste, feasibility.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    \n    #Almost Full Bins\n    almost_full_threshold = 0.95\n    almost_full_bins = (bins_remain_cap - item) / bins_remain_cap < (1-almost_full_threshold)\n    priorities[feasible_bins & almost_full_bins] = 1000\n    \n    #Low Waste Bins\n    low_waste_bins = (bins_remain_cap - item) / np.max(bins_remain_cap) < 0.1\n    priorities[feasible_bins & low_waste_bins] = 500\n\n    # Capacity Difference\n    capacity_diff = np.abs(bins_remain_cap - item)\n    priorities[feasible_bins] = 100 - (capacity_diff[feasible_bins] / np.max(bins_remain_cap)) * 50\n\n    # Non-empty nudge\n    non_empty_bins = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[feasible_bins & non_empty_bins] += 5\n\n    # Infeasible penalty\n    priorities[~feasible_bins] = -1000\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                fullness_bonus_weight: float = 0.2013748833676067, noise_level: float = 2.0819988765816894e-09) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        waste_penalty_weight: Weight of the small waste penalty.\n        fullness_bonus_weight: Weight of the bonus for bins closer to full.\n        noise_level: Magnitude of the random noise added to priorities.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Assign -inf priority if the item doesn't fit.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # 2. Waste calculation and handling of infeasible bins\n    waste = bins_remain_cap - item\n    waste[infeasible_bins] = np.inf\n\n    # 3. Normalized waste based on item size and bin capacity\n    normalized_waste_item = waste / item\n    normalized_waste_bin = waste / bins_remain_cap\n\n    # 4. Small waste penalty: Exponential penalty, more sensitive.\n    small_waste_penalty = np.exp(-5 * normalized_waste_item) # Increase the exponent to penalize more\n\n    # 5. Fill ratio reward: Sigmoid function to reward high fill ratios more\n    fill_ratio = item / bins_remain_cap\n    fill_reward = 1 / (1 + np.exp(-10 * (fill_ratio - 0.8)))  # Sigmoid, centerd around 0.8\n\n    # 6. Combine factors: Adjusted weights for better balance\n    priorities[~infeasible_bins] = fill_reward[~infeasible_bins] - waste_penalty_weight * small_waste_penalty[~infeasible_bins]\n\n    # 7. Fullness bonus: Stronger bonus for almost-full bins\n    almost_full_bonus = np.exp(-20 * normalized_waste_bin) # Strong bonus when bin is nearly full\n    priorities[~infeasible_bins] += fullness_bonus_weight * almost_full_bonus[~infeasible_bins]\n\n    # 8. Introduce a bin-selection bias based on current bin utilization\n    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    utilization_bias = 0.01 * bin_utilization  # Small bias to prefer bins with more items already in them\n    priorities[~infeasible_bins] += utilization_bias[~infeasible_bins]\n\n    # 9. Noise\n    priorities += np.random.rand(len(bins_remain_cap)) * noise_level\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the top heuristic incorporates weights for waste penalty and fullness bonus, along with a noise level, while the worst simply uses the negative log of the fill ratio. (2nd) is identical to (1st). Comparing (1st) vs (3rd), the top heuristic explicitly considers waste and fullness while the 3rd focuses on target relative residual.  (3rd) vs (4th), we see that (3rd) uses a `target_relative_residual` parameter and a `small_constant`, whereas (4th) hardcodes these values. Comparing (second worst) vs (worst), the second worst considers \"capacity difference\" and provides bonuses based on waste and fullness, whereas the worst only uses fill ratio. Overall: The better heuristics tend to use more factors (waste, fullness, etc.), adaptive elements (dynamic thresholds, bonuses), and configurable parameters whereas worse heuristics use fewer factors and/or hardcoded parameters. The best heuristics also handle edge cases like infeasible bins explicitly.\n- \nOkay, I understand! We need to redefine \"Current Self-Reflection\" by focusing on actionable insights for better heuristic design, while consciously avoiding the weaknesses evident in the \"Ineffective Self-Reflection\" examples.\n\nHere's a redefined \"Current Self-Reflection\" focusing on actionability and avoiding common pitfalls:\n\n*   **Keywords:** Adaptive, Dynamic, Multi-Factorial, Configurable, Validation.\n*   **Advice:** Design heuristics that dynamically adjust to the problem instance by incorporating a combination of relevant factors with configurable parameters and validation checks.\n*   **Avoid:** Overly simplistic approaches, hardcoded parameters, reliance solely on established algorithms without adaptation, neglecting feasibility.\n*   **Explanation:** Effective heuristics should be adaptive and consider multiple factors with tunable weights to optimize for diverse scenarios. Validation is crucial to avoid infeasible solutions. Avoid premature optimization by focusing on modular design and the ability to easily adjust the heuristic's behavior based on feedback.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}