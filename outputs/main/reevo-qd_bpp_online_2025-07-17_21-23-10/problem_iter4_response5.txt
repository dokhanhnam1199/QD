```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility: Large negative priority to bins that can't fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # Remaining Space: Calculate remaining space after placing the item
    remaining_space = bins_remain_cap - item
    
    # If item fits, prioritize bins with smaller remaining space.  Use a slightly different penalty than v1
    priorities[bins_remain_cap >= item] = -remaining_space[bins_remain_cap >= item]

    # Fragmentation Reduction: Boost the priority for bins that become nearly full.  Adjust threshold adaptively.
    almost_full_threshold = 0.1 * np.max(bins_remain_cap)
    almost_full = (bins_remain_cap >= item) & (remaining_space <= almost_full_threshold)
    priorities[almost_full] += 10

    # Prioritize bins that were already somewhat full, even if they don't become "almost full" after placement.
    # Helps consolidate items into fewer bins.  Adjust threshold as necessary.
    already_full_threshold = 0.5 * np.max(bins_remain_cap)
    already_full = (bins_remain_cap >= item) & (bins_remain_cap <= already_full_threshold)
    priorities[already_full] += 5

    return priorities
```
