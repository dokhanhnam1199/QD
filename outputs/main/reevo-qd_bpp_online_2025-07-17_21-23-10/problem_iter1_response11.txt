```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing-like heuristic: Prioritize bins that can fit the item well, but not too well.
    # Penalize bins that are either too full or too empty after placing the item.
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_space = cap - item
            # Give a higher priority to bins where the remaining space is small relative to item but not zero.
            # Avoid bins that lead to significant wastage.
            if remaining_space > 0:
                priorities[i] = item / remaining_space if remaining_space <= item else (item / remaining_space) * 0.5 # Scale down the score if remaining space is bigger than item to encourage use other bins first.
            else:
                 priorities[i] = 2 # Significantly increase priority if it is an exact fit.

        else:
            priorities[i] = -1000. # A very low priority if the item doesn't fit.

    return priorities
```
