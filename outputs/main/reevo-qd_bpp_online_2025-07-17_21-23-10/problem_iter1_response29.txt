```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Assign -inf priority to bins that cannot fit the item.
    priorities[bins_remain_cap < item] = -np.inf

    # 2. Remaining capacity: Prioritize bins with enough space for the item but small remaining capacity
    #    to try and fill them up.  Use a non-linear function to emphasize almost-full bins.
    feasible_bins = bins_remain_cap >= item
    remaining_space = bins_remain_cap[feasible_bins] - item
    # Avoid taking log of 0 or negative numbers. Add a small epsilon to make it positive
    epsilon = 1e-9
    priorities[feasible_bins] = -np.log(remaining_space + epsilon)

    # 3. Bonus for bins that fit *relatively* well (avoiding huge gaps). Scale this by total capacity for comparability between bin sizes
    # relative fit to the current remaining size
    relative_fit = item / bins_remain_cap[feasible_bins]
    # using the square to favor values closer to 1 without being a hard constraint.
    bonus = np.clip(relative_fit**2, 0, 1)  # Clip the bonus value between 0 and 1
    priorities[feasible_bins] += bonus

    # 4. A small, general prioritization to use near empty bins
    priorities += (bins_remain_cap / np.max(bins_remain_cap)) *0.1

    return priorities
```
