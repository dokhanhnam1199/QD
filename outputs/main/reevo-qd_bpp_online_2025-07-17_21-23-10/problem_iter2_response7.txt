```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a large negative priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate remaining space if item is placed in the bin
    remaining_space = bins_remain_cap - item

    # Prioritize bins with smallest remaining space (fullness)
    valid_bins = remaining_space >= 0
    priorities[valid_bins] = -remaining_space[valid_bins]

    # Bonus for almost full bins (encourage bin completion)
    almost_full_threshold = 0.2  # Tuneable parameter
    almost_full = (bins_remain_cap > 0) & (bins_remain_cap <= almost_full_threshold)
    priorities[almost_full] += 5 # Tuneable bonus

    # Bonus for bins that result in complete fill after packing (perfect fit)
    perfect_fit = remaining_space == 0
    priorities[perfect_fit] += 10 # Higher tuneable bonus

    return priorities
```
