```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: set priority to negative infinity for bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Reward tight fits: prioritize bins where the remaining space is small (but positive)
    remaining_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Avoid division by zero by adding a small epsilon
    epsilon = 1e-6
    priorities[feasible_bins] += 2.0 / (remaining_space[feasible_bins] + epsilon) # Increased impact of tight fit

    # Fullness: boost priority for almost full bins (reduces fragmentation)
    max_cap = np.max(bins_remain_cap)
    almost_full_threshold = 0.12 * max_cap  # Slightly reduced threshold for "almost full"

    almost_full = feasible_bins & (remaining_space <= almost_full_threshold)
    priorities[almost_full] += 15 * (1 - (remaining_space[almost_full] / almost_full_threshold))**2 # Increased bonus for fullness

    # Penalize waste/overflow: give a penalty for bins with a lot of remaining space
    large_space_threshold = 0.55 * max_cap  # Slightly reduced threshold for "large space"
    large_space = feasible_bins & (remaining_space > large_space_threshold)
    priorities[large_space] -= 3 * ((remaining_space[large_space] / max_cap)**3) # Increased penalty for waste

    # Bonus for bins with higher initial remaining capacity (encourage balanced bin usage)
    priorities[feasible_bins] += 0.07 * (bins_remain_cap[feasible_bins] / max_cap) # Increased impact of balanced usage.

    # Discourage creating near-empty bins
    previously_almost_empty_threshold = 0.85 * max_cap
    previously_almost_empty = (bins_remain_cap >= item) & (bins_remain_cap > previously_almost_empty_threshold) & (remaining_space > 0.7 * max_cap)
    priorities[previously_almost_empty] -= 5 # Increased penalty

    # Slightly prioritize bins that are neither too full nor too empty initially
    medium_full_lower = 0.3 * max_cap
    medium_full_upper = 0.7 * max_cap
    medium_full = feasible_bins & (bins_remain_cap >= medium_full_lower) & (bins_remain_cap <= medium_full_upper)
    priorities[medium_full] += 0.6 # Increased bonus

    # Add a penalty for bins that were close to full but are no longer
    close_to_full_before = (bins_remain_cap >= item) & (bins_remain_cap <= 0.2 * max_cap + item)
    now_relatively_empty = (remaining_space > 0.5 * max_cap)
    priorities[close_to_full_before & now_relatively_empty] -= 2 # Small penalty

    return priorities
```
