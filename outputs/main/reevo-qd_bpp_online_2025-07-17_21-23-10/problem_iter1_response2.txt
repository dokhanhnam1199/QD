```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign a high priority to bins where the item fits and leaves minimal space.
    # And a low priority if the item does not fit.

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            priorities[i] = (cap - item) / cap  # Remaining capacity ratio.  Smaller is better.
            priorities[i] = 1 - priorities[i] #Invert it so that higher ratio is better
            # Boost priority for near-perfect fits.
            if cap - item < 0.1:
                 priorities[i]+= 0.5 # Boost for near perfect fit

            #priorities[i]+=1.0/cap #bins with smaller cap are ranked higher.
        else:
            priorities[i] = -1e9  # Very low priority if item doesn't fit

    return priorities
```
