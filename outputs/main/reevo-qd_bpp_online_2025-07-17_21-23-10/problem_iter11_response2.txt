```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: set priority to negative infinity for bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Reward tight fits: prioritize bins where the remaining space is small (but positive)
    remaining_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Avoid division by zero by adding a small epsilon
    epsilon = 1e-6
    max_cap = np.max(bins_remain_cap)  # Use max_cap consistently

    # Tight Fit Priority (Heavily scaled)
    priorities[feasible_bins] += 10.0 / (remaining_space[feasible_bins] + epsilon)

    # Almost Full Bonus (Dynamically scaled, increased significance)
    almost_full_threshold = 0.1 * max_cap
    almost_full = feasible_bins & (remaining_space <= almost_full_threshold)
    priorities[almost_full] += 30 * (1 - (remaining_space[almost_full] / almost_full_threshold))

    # Waste/Overflow Penalty (Significantly increased, cubic scaling)
    large_space_threshold = 0.4 * max_cap
    large_space = feasible_bins & (remaining_space > large_space_threshold)
    priorities[large_space] -= 10 * ((remaining_space[large_space] / max_cap)**3)

    # Balanced Bin Usage Bonus (Slightly increased)
    priorities[feasible_bins] += 0.02 * (bins_remain_cap[feasible_bins] / max_cap)

    # Discourage Near-Empty Bins (Increased penalty and tightened threshold)
    previously_almost_empty_threshold = 0.7 * max_cap  # Adjusted to 70%
    previously_almost_empty = (bins_remain_cap >= item) & (bins_remain_cap > previously_almost_empty_threshold) & (remaining_space > 0.5 * max_cap)
    priorities[previously_almost_empty] -= 12  # Larger penalty

    # Penalize Becoming Half-Full (More Aggressive)
    half_full_threshold_high = 0.6 * max_cap
    half_full_threshold_low = 0.4 * max_cap
    becoming_half_full = feasible_bins & (bins_remain_cap > half_full_threshold_low) & (bins_remain_cap < half_full_threshold_high) & (remaining_space <= half_full_threshold_low)
    priorities[becoming_half_full] -= 5.0

    # Aggressively Penalize bins with remaining space > item * 2 (More stringent penalty)
    double_item_space = feasible_bins & (remaining_space > item * 2)
    priorities[double_item_space] -= 8.0 * (remaining_space[double_item_space] / max_cap)  # Significant Penalty

    # Slightly reward using emptier bins earlier if no other criteria are strongly met.

    emptier_bin_boost_threshold = 0.9 * max_cap
    emptier_bin_boost = feasible_bins & (bins_remain_cap > emptier_bin_boost_threshold)
    priorities[emptier_bin_boost] +=0.5 # small boost
    return priorities
```
