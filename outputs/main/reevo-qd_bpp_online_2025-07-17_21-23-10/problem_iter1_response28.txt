```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Large negative priority for bins that can't fit the item
    priorities[bins_remain_cap < item] = -np.inf
    
    # Higher priority to bins that can fit the item closely (minimize wasted space)
    remaining_space_after_packing = bins_remain_cap - item
    
    # Prioritize bins where remaining_space_after_packing is small, but not negative
    valid_bins = remaining_space_after_packing >= 0
    priorities[valid_bins] = -remaining_space_after_packing[valid_bins]
    
    # Boost the priority of bins that are almost full (reduces number of bins used)
    almost_full_threshold = 0.2  # Parameter to tune
    almost_full = (bins_remain_cap > 0) & (bins_remain_cap <= almost_full_threshold)
    priorities[almost_full] += 10 # Arbitrary boost value (tune)

    # Optional: slight bonus to bins that were previously empty (encourage re-use)
    # This requires tracking bin usage history, which isn't part of input.
    # So, this is ommited
    
    return priorities
```
