```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic adaptation: Prioritize bins that can accommodate the item
    # Penalize bins that cannot.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1.0  # Base priority for bins that can fit
    priorities[~can_fit] = -1000.0  # Very low priority for bins that can't fit

    # Among the bins that can fit, prioritize those where the remaining space after placing the item is minimized
    remaining_space = bins_remain_cap - item
    remaining_space[~can_fit] = np.inf  # Set to infinity for bins that can't fit

    priorities[can_fit] += 1.0 / (1e-6 + remaining_space[can_fit]) # Add priority based on remaining space

    # Prioritize bins that are fuller relative to their original capacity
    original_capacity = bins_remain_cap + 1e-9 # add tiny amount to avoid zero division error
    priorities += bins_remain_cap / original_capacity

    return priorities
```
