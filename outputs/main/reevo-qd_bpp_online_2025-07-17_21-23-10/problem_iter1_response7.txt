```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility Check: Only consider bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item
    
    # 2. Remaining Capacity: Prioritize bins with less remaining capacity after adding the item
    remaining_capacity_after_fit = bins_remain_cap - item
    remaining_capacity_after_fit[remaining_capacity_after_fit < 0] = np.inf # setting infeasible bins to have infinite remaining capacity

    priorities[feasible_bins] = -remaining_capacity_after_fit[feasible_bins] # Lower remaining capacity is better (higher priority)
    
    # 3. Avoidance of Fragmentation: Penalize bins where the item fits almost perfectly but leaves a small gap.
    gap = bins_remain_cap - item
    small_gap_penalty = -np.exp(-gap[feasible_bins] * 10) # exponential penalty when the gap is very small (0~0.1). You can adjust 10
    priorities[feasible_bins] += small_gap_penalty

    # 4. Bonus for Perfect Fit: Reward bins where the item perfectly fits (or almost perfectly).

    perfect_fit = np.abs(gap) < 1e-6 #consider small tolerances to account for floating point precision

    priorities[perfect_fit] += 10 #Large priority boost for perfect fit. This will mostly supercede other penalties.

    #Infeasible bins should have lowest priority

    priorities[~feasible_bins] = -np.inf

    return priorities
```
