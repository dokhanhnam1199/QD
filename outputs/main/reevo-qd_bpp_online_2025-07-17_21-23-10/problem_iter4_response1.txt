```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: large negative priority to bins that can't fit the item
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Reward tight fits: prioritize bins where the remaining space is small (but positive)
    remaining_space = bins_remain_cap - item
    feasible = bins_remain_cap >= item

    # Prioritize smaller remaining space, scaled by item size. Avoid division by zero.
    priorities[feasible] = (item / (remaining_space[feasible] + 1e-6))

    # Fullness: boost priority for almost full bins (reduces fragmentation). Dynamically scaled boost.
    max_cap = np.max(bins_remain_cap)
    almost_full_threshold = 0.2 * max_cap  # e.g., within 20% of the max capacity
    almost_full = feasible & (remaining_space <= almost_full_threshold)
    priorities[almost_full] += 5 * (1 - (remaining_space[almost_full] / almost_full_threshold)) # Boost increases as bin becomes fuller

    # Penalize waste/overflow: give a slight penalty for bins with a lot of remaining space after placement
    large_space_threshold = 0.5 * max_cap
    large_space = feasible & (remaining_space > large_space_threshold)
    priorities[large_space] -= 1 * (remaining_space[large_space] / max_cap)  # Small penalty, scaled by how much waste there is

    # Bonus for bins that become completely full after adding the item
    full_after_add = feasible & (remaining_space <= 1e-6) # Tolerate small floating point errors.
    priorities[full_after_add] += 10  # Substantial bonus for perfect fit.

    return priorities
```
