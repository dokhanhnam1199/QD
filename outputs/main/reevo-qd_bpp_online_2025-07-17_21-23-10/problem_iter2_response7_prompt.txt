{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing heuristic inspiration\n    possible_bins = bins_remain_cap >= item\n    if np.any(possible_bins):\n        priorities[possible_bins] = bins_remain_cap[possible_bins] - item # Favor bins where item fits with least remaining capacity. Maximize fullness.\n\n    # If no bins can accommodate item, assign negative priority\n    priorities[~possible_bins] = -np.inf\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Large negative priority for bins that can't fit the item\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Higher priority to bins that can fit the item closely (minimize wasted space)\n    remaining_space_after_packing = bins_remain_cap - item\n    \n    # Prioritize bins where remaining_space_after_packing is small, but not negative\n    valid_bins = remaining_space_after_packing >= 0\n    priorities[valid_bins] = -remaining_space_after_packing[valid_bins]\n    \n    # Boost the priority of bins that are almost full (reduces number of bins used)\n    almost_full_threshold = 0.2  # Parameter to tune\n    almost_full = (bins_remain_cap > 0) & (bins_remain_cap <= almost_full_threshold)\n    priorities[almost_full] += 10 # Arbitrary boost value (tune)\n\n    # Optional: slight bonus to bins that were previously empty (encourage re-use)\n    # This requires tracking bin usage history, which isn't part of input.\n    # So, this is ommited\n    \n    return priorities\n\n[Reflection]\nPrioritize fullness, penalize infeasibility, and add a bonus for almost-full bins to improve bin utilization.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}