{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First Fit Decreasing variant: Prioritize bins that can fit the item with least wasted space.\n    # Give a high priority to bins that fit and the spare space is low.\n    # If bin cannot fit, then give it a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            priorities[i] = (cap - item) / cap # lower waste, higher priority\n        else:\n            priorities[i] = -1e9 # very low priority, making it virtually impossible to select.\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Assign very low priority to bins that cannot fit the item.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf  # Extremely low priority\n    \n    # 2. Fill-rate Priority: Prefer bins where the item fills a significant portion.\n    fill_rate = item / bins_remain_cap\n    \n    # 3. Avoidance of near-empty bins\n    near_empty_threshold = 0.1\n    near_empty_mask = bins_remain_cap < near_empty_threshold\n    priorities[near_empty_mask] -= 0.5 # Slightly discourage nearly empty bins to increase packing density later.\n\n    # 4. Encourage nearly full bins.\n    near_full_threshold = 0.9\n    near_full_mask = (bins_remain_cap - item) < (bins_remain_cap * (1- near_full_threshold))\n    priorities[near_full_mask] += 0.7\n\n    # Main priority is fill_rate adjusted by penalty/reward mentioned above.\n    priorities[~infeasible_mask] += fill_rate[~infeasible_mask]\n    \n    \n    return priorities\n\n[Reflection]\nPrioritize feasibility, fill-rate, discourage near-empty bins, and encourage near-full bins for better packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}