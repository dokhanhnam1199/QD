```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: prioritize bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] += 1

    # 2. Remaining Capacity: prioritize bins with less remaining capacity after placing the item
    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[~feasible_bins] = np.inf  # Set to infinity for infeasible bins

    priorities[feasible_bins] += (np.max(remaining_capacity_after_placement[feasible_bins]) - remaining_capacity_after_placement[feasible_bins]) 

    #3. Avoidance of fragmentation: give highest priority to bin whose remainig capcity is exactly equal to item size
    exact_fit = np.abs(bins_remain_cap - item) < 1e-6
    priorities[exact_fit] += 2

    return priorities
```
