```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Assign very low priority to bins that cannot fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Extremely low priority
    
    # 2. Fill-rate Priority: Prefer bins where the item fills a significant portion.
    fill_rate = item / bins_remain_cap
    
    # 3. Avoidance of near-empty bins
    near_empty_threshold = 0.2  # Increased threshold
    near_empty_mask = bins_remain_cap < near_empty_threshold
    priorities[near_empty_mask] -= 0.6  # Increased discouragement

    # 4. Encourage nearly full bins.
    near_full_threshold = 0.8  # Adjusted Threshold
    remaining_after_fit = bins_remain_cap - item
    near_full_mask = (remaining_after_fit >=0) & (remaining_after_fit < (bins_remain_cap * (1- near_full_threshold)))
    priorities[near_full_mask] += 0.8 # Increased encouragement

    # Main priority is fill_rate adjusted by penalty/reward mentioned above.
    priorities[~infeasible_mask] += fill_rate[~infeasible_mask]
    
    # 5. Secondary priority: Minimize wasted space (within feasible bins)
    waste = bins_remain_cap - item
    waste[infeasible_mask] = np.inf  # Ignore infeasible bins
    min_waste = np.min(waste)

    #Add a bonus for bins that leave the least waste, but only if there's a feasible bin available
    if np.any(~infeasible_mask):
        min_waste_mask = (waste == min_waste) & (~infeasible_mask)
        priorities[min_waste_mask] += 0.2


    return priorities
```
