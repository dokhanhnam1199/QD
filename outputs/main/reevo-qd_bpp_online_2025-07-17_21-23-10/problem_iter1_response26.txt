```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item to each bin
    remaining_capacities = bins_remain_cap - item
    
    # Prioritize bins where the item fits
    fit_indices = remaining_capacities >= 0
    
    if np.any(fit_indices):
        # Prioritize bins that leave the least space after adding the item
        priorities[fit_indices] = bins_remain_cap[fit_indices] - item #smaller remaining space => higher priority
        
        # Further refine the priorities for bins that fit
        
        # Option 1: Prioritize almost full bins (before adding the item)
        # priorities[fit_indices] += bins_remain_cap[fit_indices] # favors bins with smaller capacity.

        #Option 2: Avoid fragmentation - Prefer filling bins that are close to half-full, but only if it doesn't lead to overfilling
        #half_full_distance = np.abs(bins_remain_cap[fit_indices] - bins_remain_cap.max()/2 ) #assumes equal bin capacities
        #priorities[fit_indices] = np.exp(-half_full_distance/ bins_remain_cap.max() )
        
        
        # Normalize priorities to avoid overflow and underflow
        priorities[fit_indices] = priorities[fit_indices] / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
    else:
        #If no bin can fit the item, penalize all bins
        priorities = -np.ones_like(bins_remain_cap) * 1000 # set a very negative priority for all bins
    
    return priorities
```
