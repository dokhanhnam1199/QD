```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: large negative priority to bins that can't fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # Reward tight fits: prioritize bins where the remaining space is small (but positive)
    remaining_space = bins_remain_cap - item
    
    # Adjusted to give higher values for smaller remaining spaces.
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] = 1.0 / (remaining_space[valid_bins] + 1e-6) # Add a small constant to avoid division by zero.


    # Fullness: boost priority for almost full bins (reduces fragmentation). Dynamically scaled boost.
    max_cap = np.max(bins_remain_cap)
    almost_full_threshold = 0.2 * max_cap  # e.g., within 20% of the max capacity
    almost_full = valid_bins & (remaining_space <= almost_full_threshold)
    priorities[almost_full] += 5 * (1 - (remaining_space[almost_full] / almost_full_threshold)) # Boost increases as bin becomes fuller

    # Penalize waste/overflow: give a slight penalty for bins with a lot of remaining space after placement
    large_space_threshold = 0.5 * max_cap
    large_space = valid_bins & (remaining_space > large_space_threshold)
    priorities[large_space] -= 1  # Small penalty

    # Bonus for bins that are close to being full *before* adding item
    pre_fill_threshold = 0.8 * max_cap
    pre_fill = valid_bins & (bins_remain_cap > item) & (bins_remain_cap >= pre_fill_threshold)
    priorities[pre_fill] += 2 # Bonus for bins that are almost full *before* adding the item

    return priorities
```
