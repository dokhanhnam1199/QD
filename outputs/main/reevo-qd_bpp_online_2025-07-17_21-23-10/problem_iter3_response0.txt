```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Large negative priority to bins that can't fit the item
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf
    
    # Calculate remaining space after placing the item, only for feasible bins
    feasible = ~infeasible
    remaining_space = bins_remain_cap[feasible] - item
    
    # Reward tight fits more aggressively (inverse of remaining space, but avoid division by zero).
    # Bins with very small remaining space get high priority.
    tight_fit_bonus = np.where(remaining_space > 0, 1 / (remaining_space + 1e-9), 0)  # Add small constant to avoid division by zero

    priorities[feasible] = tight_fit_bonus
    
    # Boost the priority for almost full bins (reduces fragmentation).
    almost_full_threshold = 0.2 * np.max(bins_remain_cap)  # Adjust threshold (e.g., within 20% of the max capacity)
    almost_full = (bins_remain_cap[feasible] >= item) & (remaining_space <= almost_full_threshold)
    priorities[feasible][almost_full] += 5  # Increase boost value.

    # Penalize bins that would become almost empty after placing the item (fragmentation)
    almost_empty_threshold = 0.2 * np.max(bins_remain_cap)
    almost_empty = (bins_remain_cap[feasible] >= item) & (remaining_space >= (bins_remain_cap[feasible] - almost_empty_threshold)) & (remaining_space < bins_remain_cap[feasible])
    priorities[feasible][almost_empty] -= 2.5 # Reduce penalty

    return priorities
```
