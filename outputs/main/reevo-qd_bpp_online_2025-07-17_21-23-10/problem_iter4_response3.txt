```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: large negative priority to bins that can't fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Tight Fit Reward: Prioritize bins where the remaining space is small after placement.
    # Use inverse of remaining space, plus a small constant to prevent division by zero
    remaining_space = bins_remain_cap - item
    feasible_mask = bins_remain_cap >= item
    priorities[feasible_mask] += 1.0 / (remaining_space[feasible_mask] + 1e-6)

    # Fullness Prioritization: Boost priority for bins that are close to being full *after* placement
    # This reduces fragmentation and potentially opens up new bins slower.

    almost_full_threshold = 0.2 * np.max(bins_remain_cap)
    almost_full_mask = feasible_mask & (remaining_space <= almost_full_threshold)
    priorities[almost_full_mask] += 5 * (1 - (remaining_space[almost_full_mask] / almost_full_threshold))

    # Encourage filling emptier bins somewhat: Add a bonus to bins that are relatively empty before placement
    empty_bin_threshold = 0.8 * np.max(bins_remain_cap)
    relatively_empty_mask = (bins_remain_cap >= item) & (bins_remain_cap > empty_bin_threshold)
    priorities[relatively_empty_mask] += 0.5

    # Waste Penalty: Penalize bins that would have significant remaining space after placement.
    large_space_threshold = 0.5 * np.max(bins_remain_cap)
    large_space_mask = feasible_mask & (remaining_space > large_space_threshold)
    priorities[large_space_mask] -= 1

    return priorities
```
