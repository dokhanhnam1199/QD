```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: large negative priority to bins that can't fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # Reward tight fits: prioritize bins where the remaining space is small (but positive)
    remaining_space = bins_remain_cap - item
    
    # Adjusted to give higher values for smaller remaining spaces.  Use a smoothed inverse.
    priorities[bins_remain_cap >= item] = 1.0 / (np.sqrt(remaining_space[bins_remain_cap >= item] + 1e-6)) # Add a small constant to avoid division by zero and smooth.  Sqrt reduces sensitivity to very small remaining spaces.



    # Fullness: boost priority for almost full bins (reduces fragmentation). Dynamically scaled boost.
    max_cap = np.max(bins_remain_cap)
    almost_full_threshold = 0.2 * max_cap  # e.g., within 20% of the max capacity. Dynamically determined.
    almost_full = (bins_remain_cap >= item) & (remaining_space <= almost_full_threshold)

    #Non-linear boost. Sigmoid function for smoother scaling
    fullness_boost = 5 * (1 / (1 + np.exp(-10 * (1 - (remaining_space[almost_full] / almost_full_threshold))))) #Boost increases sigmoidally as bin becomes fuller

    priorities[almost_full] += fullness_boost # Boost increases as bin becomes fuller


    # Penalize waste/overflow: give a slight penalty for bins with a lot of remaining space after placement, but only when there are other valid choices
    large_space_threshold = 0.5 * max_cap
    large_space = (bins_remain_cap >= item) & (remaining_space > large_space_threshold) & (np.sum(bins_remain_cap >= item) > 1)
    priorities[large_space] -= 0.5  # Small penalty, reduced to 0.5

    #Slight preference for bins closer to average fullness to encourage balance.

    average_remaining = np.mean(bins_remain_cap[bins_remain_cap >= item]) if np.any(bins_remain_cap >= item) else max_cap #Use max_cap if no feasible bins to avoid errors
    near_average = (bins_remain_cap >= item) & (np.abs(remaining_space - (average_remaining - item)) < 0.2 * max_cap)
    priorities[near_average] += 0.2 #Small bonus


    return priorities
```
