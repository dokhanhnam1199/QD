```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasibility is a hard constraint
    priorities[bins_remain_cap < item] = -np.inf
    
    # Reward tight fits (minimize wasted space).  Use inverse of remaining space.
    remaining_space = bins_remain_cap - item
    
    # Avoid division by zero by adding a small epsilon
    epsilon = 1e-9
    
    # Give higher priority to bins where the remaining space is smaller (but positive)
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = 1.0 / (remaining_space[feasible_bins] + epsilon)
    
    # Boost for almost full bins to encourage filling them up
    almost_full_threshold = 0.2  # Fraction of bin capacity considered "almost full"
    bin_capacity = np.max(bins_remain_cap)  # Assumes all bins have the same initial capacity

    almost_full = (bins_remain_cap >= item) & (remaining_space <= almost_full_threshold * bin_capacity)
    priorities[almost_full] += 5  # A moderate boost

    # Penalize bins that result in very small remaining space, potentially leading to fragmentation
    fragmentation_threshold = 0.05 # if remaining capcity is less than 5% of bin_capacity, penalize
    highly_fragmented = (bins_remain_cap >= item) & (remaining_space <= fragmentation_threshold * bin_capacity)
    priorities[highly_fragmented] -= 2
        
    return priorities
```
