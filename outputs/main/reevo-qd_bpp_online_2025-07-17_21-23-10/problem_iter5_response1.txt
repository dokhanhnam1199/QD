```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: large negative priority to bins that can't fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Reward tight fits, scaled by item size. If the item is large, then remaining space is more important.
    remaining_space = bins_remain_cap - item
    feasible_mask = bins_remain_cap >= item
    priorities[feasible_mask] += (item / np.max(bins_remain_cap)) / (remaining_space[feasible_mask] + 1e-6)

    # Dynamically adjust "almost full" threshold
    almost_full_threshold = 0.15 * np.max(bins_remain_cap) # Reduced Threshold
    almost_full_mask = (feasible_mask) & (remaining_space <= almost_full_threshold)
    priorities[almost_full_mask] += 10 * (1 - (remaining_space[almost_full_mask] / almost_full_threshold)) # Higher Reward

    # Penalize waste more heavily. Scales with item size - large items filling little make the strategy worse.
    large_space_threshold = 0.4 * np.max(bins_remain_cap) # Reduced Threshold
    large_space_mask = (feasible_mask) & (remaining_space > large_space_threshold)
    priorities[large_space_mask] -= 2 * (remaining_space[large_space_mask] / np.max(bins_remain_cap)) * (item / np.max(bins_remain_cap))

    # Slightly discourage creating near-empty bins (bins that were completely empty at the start).
    # This will try to consolidate items into fewer bins
    near_empty_threshold = 0.9 * np.max(bins_remain_cap)
    near_empty_mask = (feasible_mask) & (bins_remain_cap > item) & (bins_remain_cap - item > near_empty_threshold)
    priorities[near_empty_mask] -= 0.5

    return priorities
```
