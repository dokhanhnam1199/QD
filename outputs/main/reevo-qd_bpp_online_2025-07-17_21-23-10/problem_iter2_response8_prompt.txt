{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First Fit Decreasing variant: Prioritize bins that can fit the item with least wasted space.\n    # Give a high priority to bins that fit and the spare space is low.\n    # If bin cannot fit, then give it a very low priority.\n\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            priorities[i] = (cap - item) / cap # lower waste, higher priority\n        else:\n            priorities[i] = -1e9 # very low priority, making it virtually impossible to select.\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing-like heuristic: Prioritize bins that can fit the item well, but not too well.\n    # Penalize bins that are either too full or too empty after placing the item.\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            remaining_space = cap - item\n            # Give a higher priority to bins where the remaining space is small relative to item but not zero.\n            # Avoid bins that lead to significant wastage.\n            if remaining_space > 0:\n                priorities[i] = item / remaining_space if remaining_space <= item else (item / remaining_space) * 0.5 # Scale down the score if remaining space is bigger than item to encourage use other bins first.\n            else:\n                 priorities[i] = 2 # Significantly increase priority if it is an exact fit.\n\n        else:\n            priorities[i] = -1000. # A very low priority if the item doesn't fit.\n\n    return priorities\n\n[Reflection]\nPrioritize bins with `remaining_space <= item`, reward exact fits, and penalize significant wastage.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}