```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: large negative priority to bins that can't fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Encourage packing into bins with the least remaining capacity after placement, while still feasible.
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    
    # Prioritize based on tightness, use inverse of remaining space. Add a small epsilon to prevent division by zero.
    priorities[feasible_mask] = 1.0 / (remaining_space + 1e-6)

    # Boost priority for bins that become "almost full" after placing the item
    almost_full_threshold = 0.15 * np.max(bins_remain_cap)  # Tuned threshold
    almost_full_mask = feasible_mask & (remaining_space <= almost_full_threshold)
    priorities[almost_full_mask] += 5 * (1 - (remaining_space[almost_full_mask] / almost_full_threshold))  # Tuned boost

    # Penalize bins that become excessively empty after placing the item
    large_space_threshold = 0.6 * np.max(bins_remain_cap) # Tuned threshold
    large_space_mask = feasible_mask & (remaining_space > large_space_threshold)
    priorities[large_space_mask] -= 1.5 * (remaining_space[large_space_mask] / np.max(bins_remain_cap)) # Tuned penalty

    # Encourage balanced bin usage, give a slight bonus to bins with higher current remaining capacity (encourage spreading)
    priorities[feasible_mask] += 0.2 * (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)) # Tuned bonus

    # Add a slight preference for using already opened bins. This helps to consolidate items and potentially reduce the number of bins used overall.
    non_empty_bins = bins_remain_cap < np.max(bins_remain_cap) # Check if the bin is non empty
    opened_bin_mask = feasible_mask & non_empty_bins
    priorities[opened_bin_mask] += 0.5 # A small boost to non empty bins

    return priorities
```
