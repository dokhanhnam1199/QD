```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: If the item fits perfectly, highest priority.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # A very high priority

    # Rule 2: If item does not fit, lowest priority (or 0).
    does_not_fit = item > bins_remain_cap
    priorities[does_not_fit] = -100 # Or a very low negative value, effectively avoiding

    # Rule 3: For bins that the item *can* fit into, prioritize based on remaining space after packing
    fits = (item <= bins_remain_cap) & (~perfect_fit)
    remaining_space = bins_remain_cap[fits] - item
    
    # Prioritize bins with smaller remaining space (First Fit Decreasing style). Avoid leaving too much space.
    priorities[fits] = 1 / (remaining_space + 0.00001) # adding small number to avoid divide by zero

    # Rule 4: Also prioritize bins which are near full after addition, as a secondary optimization. This helps consolidate usage.
    near_full_after_add = (bins_remain_cap - item) > 0 # only for bins where item fits. 
    near_full_threshold = 0.1 # can be experimented. Defines near full as remaining capacity < 10% of original size
    priorities[near_full_after_add & ((bins_remain_cap - item) / bins_remain_cap < near_full_threshold)] += 50 #Adding some priority weight

    return priorities
```
