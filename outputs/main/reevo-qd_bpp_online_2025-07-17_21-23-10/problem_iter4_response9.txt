```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible placement: very low priority
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate remaining space
    remaining_space = bins_remain_cap - item
    
    # Prioritize smaller remaining space
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] = -remaining_space[valid_bins]

    # Encourage bins that become nearly full
    almost_full_threshold = 0.1 * np.max(bins_remain_cap)
    almost_full = valid_bins & (remaining_space <= almost_full_threshold)
    priorities[almost_full] += 10

    # Discourage large remaining space (fragmentation)
    large_space_threshold = 0.5 * np.max(bins_remain_cap)
    large_space = valid_bins & (remaining_space >= large_space_threshold)
    priorities[large_space] -= 5

    # Bonus for exact fit, if possible
    exact_fit = valid_bins & (remaining_space == 0)
    priorities[exact_fit] += 20
    
    return priorities
```
