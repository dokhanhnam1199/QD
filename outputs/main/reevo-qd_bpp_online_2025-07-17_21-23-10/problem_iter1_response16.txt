```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item to each bin.
    remaining_after_add = bins_remain_cap - item
    
    # Give high priority to bins that can fit the item.
    fit_mask = remaining_after_add >= 0
    priorities[fit_mask] = 1  # Base priority for fitting

    # Further prioritize bins that result in a small remaining capacity
    # after adding the item.  This encourages "almost full" bins.  We only
    # consider bins that fit the item here.
    if np.any(fit_mask):  # check if there is at least one bin that fits
        priorities[fit_mask] += (bins_remain_cap[fit_mask] - remaining_after_add[fit_mask]) / bins_remain_cap[fit_mask]
    
    # Negative priority for bins that cannot fit (discourage putting it there).
    # This ensures that valid bins are always preferred over invalid ones, and makes 
    # the search focused.
    priorities[~fit_mask] = -10  # arbitrarily large penalty to discard bins which cannot accommodate

    return priorities
```
