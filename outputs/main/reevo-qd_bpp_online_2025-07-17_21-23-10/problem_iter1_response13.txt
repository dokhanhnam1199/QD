```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Feasibility is a major factor
            remaining_after_fit = cap - item
            
            # Prioritize bins with tighter fit
            priority = (cap - item) / item  #Smaller remain capacity, higher priority after divided by item
            priority = 1/(priority + 0.000001) # avoid divide by 0 and make priority decrease when remaining capacity increase
            
            if remaining_after_fit <= 0.1: # If fit is very tight
                priority *= 2  #give it higher priority
                
            priorities[i] = priority
        else:
            # Impossible to fit
            priorities[i] = -1e9  #Very low priority.

    return priorities
```
