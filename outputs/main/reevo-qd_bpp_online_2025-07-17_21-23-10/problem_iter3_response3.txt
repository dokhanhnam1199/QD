```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Large negative priority to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Reward tight fits: Smaller remaining space gets higher priority
    feasible_bins = ~infeasible_bins
    remaining_space = bins_remain_cap - item
    priorities[feasible_bins] = -remaining_space[feasible_bins]  # Minimize waste

    # Fullness: Boost priority for near-full bins
    bin_capacity = np.max(bins_remain_cap)  # Assume all bins have the same max capacity initially.
    almost_full_threshold = 0.2 * bin_capacity
    almost_full_bins = feasible_bins & (remaining_space <= almost_full_threshold)
    priorities[almost_full_bins] += 5  # Substantially boost these bins

    # Penalize very large remaining space (encourage filling bins)
    large_space_threshold = 0.8 * bin_capacity
    large_space_bins = feasible_bins & (bins_remain_cap > large_space_threshold)
    priorities[large_space_bins] -= 2  # Slight penalty

    # Give a small bonus to bins that are more than half full
    half_full_threshold = 0.5 * bin_capacity
    half_full_bins = feasible_bins & (bins_remain_cap < half_full_threshold)
    priorities[half_full_bins] += 1

    return priorities
```
