{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing heuristic inspiration\n    possible_bins = bins_remain_cap >= item\n    if np.any(possible_bins):\n        priorities[possible_bins] = bins_remain_cap[possible_bins] - item # Favor bins where item fits with least remaining capacity. Maximize fullness.\n\n    # If no bins can accommodate item, assign negative priority\n    priorities[~possible_bins] = -np.inf\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Assign -inf priority to bins that cannot fit the item.\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # 2. Remaining capacity: Prioritize bins with enough space for the item but small remaining capacity\n    #    to try and fill them up.  Use a non-linear function to emphasize almost-full bins.\n    feasible_bins = bins_remain_cap >= item\n    remaining_space = bins_remain_cap[feasible_bins] - item\n    # Avoid taking log of 0 or negative numbers. Add a small epsilon to make it positive\n    epsilon = 1e-9\n    priorities[feasible_bins] = -np.log(remaining_space + epsilon)\n\n    # 3. Bonus for bins that fit *relatively* well (avoiding huge gaps). Scale this by total capacity for comparability between bin sizes\n    # relative fit to the current remaining size\n    relative_fit = item / bins_remain_cap[feasible_bins]\n    # using the square to favor values closer to 1 without being a hard constraint.\n    bonus = np.clip(relative_fit**2, 0, 1)  # Clip the bonus value between 0 and 1\n    priorities[feasible_bins] += bonus\n\n    # 4. A small, general prioritization to use near empty bins\n    priorities += (bins_remain_cap / np.max(bins_remain_cap)) *0.1\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, fullness (non-linearly), relative fit, and use a tie-breaker for exploration.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}