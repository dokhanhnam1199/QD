```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # High priority if the item fits perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # A very high value for perfect fit
    
    # Give bins that can accommodate the item a base priority.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  

    # Prioritize bins with smaller remaining capacity (but large enough to fit the item) to fill them up.
    # Use an inverse relationship so that smaller remainders have higher priority.
    # Avoid division by zero by adding a small constant.

    valid_bins = bins_remain_cap[can_fit]
    if len(valid_bins) > 0:
        remainder_priority = 10 / (valid_bins + 0.001)
        priorities[can_fit] += remainder_priority  # Add to existing priority

    # Penalize bins that are too big for the item. This is less desirable than filling smaller bins.
    too_big = bins_remain_cap > item
    too_big_penalty = (bins_remain_cap[too_big] - item) / np.max(bins_remain_cap)
    priorities[too_big] -= too_big_penalty * 5 # Adjust penalty scale

    return priorities
```
