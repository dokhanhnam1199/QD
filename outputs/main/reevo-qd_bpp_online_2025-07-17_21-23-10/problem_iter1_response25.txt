```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            # Prioritize bins where the item fits and minimize waste
            priorities[i] = (cap - item)**2 / cap # Lower waste and higher cap gives larger priority.
            # Consider bins with larger remaining capacity a little
            # Penalize bins that are too full or will become too full
            # This tries to make things fit well.  Experiment!
            # Consider waste ratios? Try to balance
            # Scale by a small factor? Prevents runaway priority?
        else:
            # Bin is invalid
            priorities[i] = -1e9  # Very low priority to discourage use
    return priorities
```
