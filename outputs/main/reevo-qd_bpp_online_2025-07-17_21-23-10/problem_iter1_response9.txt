```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Can the item fit in the bin?
    feasible = bins_remain_cap >= item
    
    # If no bins are feasible, return a low priority for all bins (making this placement very undesirable).
    if not np.any(feasible):
        return priorities - 1e9 # Very low priority
    
    # Calculate the remaining capacity after placing the item in feasible bins
    remaining_capacity = bins_remain_cap - item
    
    # Prioritize bins that will have minimal remaining capacity after placement (First Fit Decreasing heuristic inspired)
    priorities[feasible] = 1 / (remaining_capacity[feasible] + 1e-6)  # Avoid division by zero.  Smaller remaining capacity means higher priority
    
    #Prioritize bins with largest capacity closer to item size:
    diffs = np.abs(bins_remain_cap - item)
    priorities[feasible] += (1 / (diffs[feasible] + 1e-6)) # Closer to item size = higher priority

    # Penalize bins with very large remaining capacity (avoid creating near-empty bins)
    priorities[feasible] -= (bins_remain_cap[feasible] / np.max(bins_remain_cap[feasible] + 1e-6)) * 0.1

    
    return priorities
```
