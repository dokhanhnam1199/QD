```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First-Fit Decreasing inspired heuristic: prioritize bins that can accommodate the item
    # and have the least remaining capacity after fitting the item.
    possible_bins = bins_remain_cap >= item
    if np.any(possible_bins):
        remaining_space = bins_remain_cap[possible_bins] - item
        priorities[possible_bins] = 1 / (remaining_space + 0.0001) # Avoid division by zero and prioritize smaller remaining space
    else:
        # If no bin can accommodate the item, give all bins equal (low) priority
        priorities = np.ones_like(bins_remain_cap) * 0.00001

    return priorities
```
