```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Large negative priority to bins that can't fit the item
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate remaining space after placing the item
    remaining_space = bins_remain_cap - item
    
    # Give higher priority to bins where the remaining space is smaller (but positive)
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] = -np.abs(remaining_space[valid_bins])
    
    # Boost the priority for almost full bins (reduces fragmentation)
    almost_full_threshold = 0.2 * np.max(bins_remain_cap)  # e.g., within 20% of the max capacity
    almost_full = (bins_remain_cap >= item) & (remaining_space <= almost_full_threshold)
    priorities[almost_full] += 10  # Arbitrary boost value
    
    # Prioritize bins that will be completely filled
    completely_full = (bins_remain_cap >= item) & (remaining_space == 0)
    priorities[completely_full] += 20  # Higher boost for complete fill
    
    # Slightly penalize bins with a lot of remaining space to encourage filling partially filled bins first
    large_space_threshold = 0.8 * np.max(bins_remain_cap)
    large_space = (bins_remain_cap >= item) & (remaining_space > large_space_threshold)
    priorities[large_space] -= 5  # Arbitrary penalty
    
    return priorities
```
