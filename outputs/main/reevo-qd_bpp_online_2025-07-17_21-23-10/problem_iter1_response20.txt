```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if the item doesn't fit.
    priorities[bins_remain_cap < item] = -np.inf
    
    # 2. Best Fit Criterion: Maximize remaining capacity after placement, but only if it fits
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):  # At least one feasible bin
        remaining_cap_after_placement = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = bins_remain_cap[feasible_bins] # original bin capacity

        # Prefer bins with smallest remaining capacity, using inverse for priority
        priorities[feasible_bins] = bins_remain_cap[feasible_bins] - 10*remaining_cap_after_placement 

    return priorities
```
