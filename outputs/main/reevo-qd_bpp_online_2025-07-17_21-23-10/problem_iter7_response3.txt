```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: set priority to negative infinity for bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Reward tight fits: prioritize bins where the remaining space is small (but positive)
    remaining_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Avoid division by zero by adding a small epsilon
    epsilon = 1e-6
    priorities[feasible_bins] += 2.0 / (remaining_space[feasible_bins] + epsilon) # Increased Tight fit importance.

    # Fullness: boost priority for almost full bins (reduces fragmentation)
    # Dynamically scale the "almost full" threshold
    max_cap = np.max(bins_remain_cap)
    almost_full_threshold = 0.20 * max_cap  # Reduced Threshold

    almost_full = feasible_bins & (remaining_space <= almost_full_threshold)
    # Scaling bonus based on proximity to being full
    priorities[almost_full] += 15 * (1 - (remaining_space[almost_full] / almost_full_threshold)) # Increased Fullness bonus.

    # Penalize waste/overflow: give a penalty for bins with a lot of remaining space
    large_space_threshold = 0.5 * max_cap #Increased threshold
    large_space = feasible_bins & (remaining_space > large_space_threshold)

    # Scale penalty based on the amount of waste, using a quadratic penalty
    priorities[large_space] -= 3 * ((remaining_space[large_space] / max_cap)**2) # Increased Penalty

    # Bonus for bins with higher initial remaining capacity (encourage balanced bin usage)
    priorities[feasible_bins] += 0.1 * (bins_remain_cap[feasible_bins] / max_cap) # Increased capacity bonus.

    # Discourage creating near-empty bins by penalizing bins that were nearly full before placement and now have low utilization.
    previously_almost_empty_threshold = 0.85 * max_cap
    previously_almost_empty = (bins_remain_cap >= item) & (bins_remain_cap > previously_almost_empty_threshold) & (remaining_space > 0.65 * max_cap) #Large Remaining space means the item was small for the bin.
    priorities[previously_almost_empty] -= 5 # A moderate penalty.
    # Encourage using empty bins more
    empty_bin_threshold = 0.999 * max_cap
    empty_bins = bins_remain_cap > empty_bin_threshold
    priorities[empty_bins] += 0.5

    return priorities
```
