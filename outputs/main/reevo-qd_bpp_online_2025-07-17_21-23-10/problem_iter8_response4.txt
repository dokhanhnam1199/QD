```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    epsilon = 1e-6

    # Infeasibility
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Remaining space calculation
    remaining_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Tight fit reward (relative to item size and max capacity)
    priorities[feasible_bins] += (item / (remaining_space[feasible_bins] + epsilon)) * (item/max_cap)


    # Almost full bonus (dynamic threshold and scaled bonus)
    almost_full_threshold = 0.15 * max_cap
    almost_full = feasible_bins & (remaining_space <= almost_full_threshold)
    fill_ratio = (max_cap - remaining_space[almost_full]) / max_cap
    priorities[almost_full] += 15 * (fill_ratio**2)


    # Large space penalty (dynamic threshold and scaled penalty)
    large_space_threshold = 0.6 * max_cap
    large_space = feasible_bins & (remaining_space > large_space_threshold)
    waste_ratio = remaining_space[large_space] / max_cap
    priorities[large_space] -= 3 * (waste_ratio**3)

    # Initial capacity bonus (encourage balanced usage)
    priorities[feasible_bins] += 0.1 * (bins_remain_cap[feasible_bins] / max_cap)

    # Discourage near-empty bins after placement
    previously_almost_empty_threshold = 0.9 * max_cap
    previously_almost_empty = (bins_remain_cap >= item) & (bins_remain_cap > previously_almost_empty_threshold) & (remaining_space > 0.7 * max_cap)
    priorities[previously_almost_empty] -= 5

    # Prioritize bins that are moderately full initially
    medium_full_lower = 0.3 * max_cap
    medium_full_upper = 0.7 * max_cap
    medium_full = feasible_bins & (bins_remain_cap >= medium_full_lower) & (bins_remain_cap <= medium_full_upper)
    priorities[medium_full] += 0.7

    # Penalize bins that would become nearly empty relative to the item size
    almost_empty_relative_item = feasible_bins & (remaining_space > 0.8 * max_cap) & (item < 0.2 * max_cap)
    priorities[almost_empty_relative_item] -= 2

    return priorities
```
