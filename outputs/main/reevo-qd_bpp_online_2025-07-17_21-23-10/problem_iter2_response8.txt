```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_space = cap - item
            if remaining_space == 0:
                priorities[i] = 10  # Very high priority for exact fit
            elif remaining_space <= item:
                priorities[i] = item / remaining_space # Higher priority if remaining space is small relative to item
            else:
                priorities[i] = (item / remaining_space) * 0.25 # Reduced priority if remaining space is larger than item (penalize wastage).

        else:
            priorities[i] = -1000  # Very low priority if item doesn't fit

    return priorities
```
