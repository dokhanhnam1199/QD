```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can fit the item
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        # If no bin can fit, assign a low priority to all bins to signal infeasibility.
        # In a real implementation, this situation might trigger opening a new bin.
        priorities[:] = -100
        return priorities
    
    # Give a base priority to bins that can fit
    priorities[can_fit] += 1.0

    # Prioritize bins with smaller remaining capacity after placing the item.
    # This aims to reduce fragmentation and improve bin utilization.
    remaining_capacity_after_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] += (1 / (remaining_capacity_after_fit + 0.00001)) # Avoid division by zero

    # Penalize bins that would become almost full after placing the item.
    # This attempts to leave some buffer for potentially larger future items.
    almost_full_threshold = 0.1  # A bin is considered "almost full" if remaining capacity is <= 10% of total bin size
    almost_full = (bins_remain_cap - item) <= (almost_full_threshold * bins_remain_cap)
    priorities[almost_full & can_fit] -= 0.75
    
    # Reward bins that are relatively empty
    relatively_empty_threshold = 0.7 # Bin considered relatively empty if remaining capacity is more than 70% of total capacity
    relatively_empty = bins_remain_cap > (relatively_empty_threshold * np.max(bins_remain_cap)) # Assuming all bins have the same max capacity
    priorities[relatively_empty & can_fit] +=0.25
    

    return priorities
```
