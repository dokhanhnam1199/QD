```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give a high priority to bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 10  # Significantly higher base priority for fitting bins

    # Prioritize bins with smallest remaining capacity that can fit the item,
    # minimizing wasted space (First-Fit Decreasing heuristic idea)
    valid_capacities = bins_remain_cap[can_fit]
    if valid_capacities.size > 0:
        priorities[can_fit] += (10 / (valid_capacities + 0.00001)) # Even stronger inverse relationship

    # Penalize bins where the item would almost fill the bin, potentially
    # making future items difficult to place
    almost_full = (bins_remain_cap - item) < (0.2 * bins_remain_cap) # Relaxed almost_full definition
    priorities[almost_full & can_fit] -= 5 # Stronger penalty

    # Moderate penalty if remaining capacity is greater than item size, to prefer tighter fits
    loose_fit = (bins_remain_cap - item) > (0.5 * bins_remain_cap) # loose fit definition
    priorities[loose_fit & can_fit] -= 2 # Mild penalty

    # If no bin can fit, assign very low priority for all
    if not np.any(can_fit):
        priorities[:] = -100

    return priorities
```
