```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very high priority for bins that can fit the item snugly (First-Fit Decreasing heuristic inspired)
    fit_within = (bins_remain_cap >= item)
    
    #Prioritize bins that have little remaining capacity if item fits
    snug_fit = np.where(fit_within, bins_remain_cap - item, np.inf)
    
    priorities[fit_within] = 1 / (1e-6 + snug_fit[fit_within])  # Avoid division by zero

    #Otherwise give a negative priority score which diminishes if the bins are too small (worst-fit inspired)
    priorities[~fit_within] = -np.abs(bins_remain_cap[~fit_within] - item)

    return priorities
```
