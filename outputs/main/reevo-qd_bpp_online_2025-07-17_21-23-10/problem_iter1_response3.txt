```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate the waste if the item is placed in this bin
            waste = cap - item

            # Prioritize bins that can fit the item with minimal waste.
            # The smaller the waste, the higher the priority.
            priorities[i] = 1 / (waste + 1e-9)  # Adding a small constant to avoid division by zero.

            # Further prioritize bins that are close to being full *after* the item is added.
            fullness_after = (cap - item) / 100 if (cap - item) >= 0 else -1
            if 0 <= fullness_after < 1: #valid fullnes_after
              priorities[i] += 1 - fullness_after # give bins nearing full a high score

        else:
            # If the item doesn't fit, assign a very low priority.
            priorities[i] = -1e9

    return priorities
```
