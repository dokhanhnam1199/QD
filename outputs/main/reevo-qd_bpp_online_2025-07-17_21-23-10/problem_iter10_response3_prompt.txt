{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Large negative priority to bins that can't fit the item\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate remaining space after placing the item\n    remaining_space = bins_remain_cap - item\n    \n    # Give higher priority to bins where the remaining space is smaller (but positive)\n    priorities[bins_remain_cap >= item] = -np.abs(remaining_space[bins_remain_cap >= item])\n    \n    # Boost the priority for almost full bins (reduces fragmentation)\n    almost_full_threshold = 0.1 * np.max(bins_remain_cap)  # e.g., within 10% of the max capacity\n    almost_full = (bins_remain_cap >= item) & (remaining_space <= almost_full_threshold)\n    priorities[almost_full] += 10  # Arbitrary boost value\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility: set priority to negative infinity for bins that can't fit the item\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # Reward tight fits: prioritize bins where the remaining space is small (but positive)\n    remaining_space = bins_remain_cap - item\n    feasible_bins = bins_remain_cap >= item\n\n    # Avoid division by zero by adding a small epsilon\n    epsilon = 1e-6\n    priorities[feasible_bins] += 1.0 / (remaining_space[feasible_bins] + epsilon)\n\n    # Fullness: boost priority for almost full bins (reduces fragmentation)\n    # Dynamically scale the \"almost full\" threshold\n    max_cap = np.max(bins_remain_cap)\n    almost_full_threshold = 0.15 * max_cap  # Reduced Threshold\n\n    almost_full = feasible_bins & (remaining_space <= almost_full_threshold)\n    # Scaling bonus based on proximity to being full, using a quadratic bonus\n    priorities[almost_full] += 12 * (1 - (remaining_space[almost_full] / almost_full_threshold))**2\n\n    # Penalize waste/overflow: give a penalty for bins with a lot of remaining space\n    large_space_threshold = 0.6 * max_cap  # Increased threshold\n    large_space = feasible_bins & (remaining_space > large_space_threshold)\n\n    # Scale penalty based on the amount of waste, using a cubic penalty\n    priorities[large_space] -= 2.5 * ((remaining_space[large_space] / max_cap)**3)\n\n    # Bonus for bins with higher initial remaining capacity (encourage balanced bin usage)\n    priorities[feasible_bins] += 0.05 * (bins_remain_cap[feasible_bins] / max_cap)\n\n    # Discourage creating near-empty bins by penalizing bins that were nearly full before placement and now have low utilization.\n    previously_almost_empty_threshold = 0.9 * max_cap\n    previously_almost_empty = (bins_remain_cap >= item) & (bins_remain_cap > previously_almost_empty_threshold) & (remaining_space > 0.7 * max_cap)  # Large Remaining space means the item was small for the bin.\n    priorities[previously_almost_empty] -= 4  # A moderate penalty.\n\n    # Slightly prioritize bins that are neither too full nor too empty initially\n    medium_full_lower = 0.3 * max_cap\n    medium_full_upper = 0.7 * max_cap\n    medium_full = feasible_bins & (bins_remain_cap >= medium_full_lower) & (bins_remain_cap <= medium_full_upper)\n    priorities[medium_full] += 0.5\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits using inverse remaining space. Add fullness bonus, waste penalty, and balance bin usage.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}