```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing heuristic inspired priority.
    # Prefer bins where item fits reasonably well, but not perfectly (to avoid fragmentation if possible).
    
    # Give very low priority to bins that are too small
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate the waste if the item is placed in the bin
    waste = bins_remain_cap - item
    
    # Prefer bins where the waste is small relative to the bin size
    # But avoid bins where the waste is exactly 0.
    
    #A very small constant to avoid 0 division.
    epsilon = 1e-9 

    waste_ratio = waste / (bins_remain_cap + epsilon)

    # A penalty factor, can be tuned
    penalty_factor = 1.0  # Adjust as needed

    priorities[bins_remain_cap >= item] = np.exp(-penalty_factor * waste_ratio[bins_remain_cap >= item])

    #Reduce priority as the item becomes smaller and the bin gets fuller
    #relative_item_size = item/(np.mean(bins_remain_cap)+epsilon)

    #priorities = priorities-relative_item_size
    
    return priorities
```
