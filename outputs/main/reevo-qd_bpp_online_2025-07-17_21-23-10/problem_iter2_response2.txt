```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that tightly fit items.
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        # Calculate remaining space for bins that can fit the item
        remaining_space = bins_remain_cap[can_fit] - item
        
        # Prioritize bins with smaller remaining space (higher priority)
        priorities[can_fit] = 1.0 / (remaining_space + 1e-6)  # Adding a small constant to avoid division by zero
    else:
        # If no bin can fit, assign a small priority to all bins to allow new bin creation implicitly
        priorities[:] = 1e-6  # Assign a very small positive priority
        
    return priorities
```
