```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining space after adding the item to each bin
    remaining_space = bins_remain_cap - item

    # Assign high priority to bins where the item fits, but doesn't leave too much space
    fit_mask = remaining_space >= 0
    
    #Prioritize bins where item fits best without wasting space using a fractional power.  Higher power -> stronger 'best fit' preference.
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item)**0.5
    
    # Add a small bonus for bins that are already somewhat full
    priorities += (1 - bins_remain_cap / bins_remain_cap.max()) * 0.1 

    # If item does not fit at all, very low priority.
    priorities[~fit_mask] = -1e9  # assign very low priority

    return priorities
```
