```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item snugly
    fit_threshold = 0.95  # e.g., bin should be at least 95% full after placing item
    snug_fit = (bins_remain_cap - item) / bins_remain_cap > fit_threshold
    priorities[snug_fit] += 10.0  # Significant bonus

    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 5.0

    # Penalize bins where the item would leave too little space.
    min_remaining = 0.1
    too_little_space = (bins_remain_cap - item) < min_remaining
    priorities[too_little_space] -= 2.0

    # Adjust priority based on remaining capacity (normalized)
    normalized_capacity = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
    priorities += normalized_capacity  # Give preference to bins with high remaining capacity
    # Normalize priorities to a reasonable range.
    priorities = np.clip(priorities, -10.0, 10.0)

    return priorities
```
