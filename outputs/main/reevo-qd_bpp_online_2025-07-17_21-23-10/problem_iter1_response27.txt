```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Highest priority to bins where the item fits best (smallest waste).
    waste = bins_remain_cap - item
    fit_indices = waste >= 0
    
    if np.any(fit_indices):
        priorities[fit_indices] = 1 / (waste[fit_indices] + 1e-9)  # Avoid division by zero
    else:
        # If item doesn't fit in any bin, give low priority to bins with most space
        priorities = bins_remain_cap / np.sum(bins_remain_cap)
        priorities = 1 / (priorities + 1e-9) #Invert this ratio, give priority to bins with the largest waste.
        return priorities
    
    # Rule 2: Give a bonus to bins that are already somewhat full (reduce fragmentation).
    occupancy = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # Calculate occupancy ratio
    priorities += occupancy * 0.1 #Add a small fraction of occupancy
    
    return priorities
```
