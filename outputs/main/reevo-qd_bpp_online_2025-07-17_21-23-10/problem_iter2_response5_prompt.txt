{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing heuristic inspiration\n    possible_bins = bins_remain_cap >= item\n    if np.any(possible_bins):\n        priorities[possible_bins] = bins_remain_cap[possible_bins] - item # Favor bins where item fits with least remaining capacity. Maximize fullness.\n\n    # If no bins can accommodate item, assign negative priority\n    priorities[~possible_bins] = -np.inf\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: If the item fits perfectly, highest priority.\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000  # A very high priority\n\n    # Rule 2: If item does not fit, lowest priority (or 0).\n    does_not_fit = item > bins_remain_cap\n    priorities[does_not_fit] = -100 # Or a very low negative value, effectively avoiding\n\n    # Rule 3: For bins that the item *can* fit into, prioritize based on remaining space after packing\n    fits = (item <= bins_remain_cap) & (~perfect_fit)\n    remaining_space = bins_remain_cap[fits] - item\n    \n    # Prioritize bins with smaller remaining space (First Fit Decreasing style). Avoid leaving too much space.\n    priorities[fits] = 1 / (remaining_space + 0.00001) # adding small number to avoid divide by zero\n\n    # Rule 4: Also prioritize bins which are near full after addition, as a secondary optimization. This helps consolidate usage.\n    near_full_after_add = (bins_remain_cap - item) > 0 # only for bins where item fits. \n    near_full_threshold = 0.1 # can be experimented. Defines near full as remaining capacity < 10% of original size\n    priorities[near_full_after_add & ((bins_remain_cap - item) / bins_remain_cap < near_full_threshold)] += 50 #Adding some priority weight\n\n    return priorities\n\n[Reflection]\nPrioritize perfect fits, penalize overflow, and balance packing density with avoiding excessive fragmentation.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}