```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Large negative priority to bins that can't fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate remaining space after placing the item
    remaining_space = bins_remain_cap - item

    # Give higher priority to bins where the remaining space is smaller (but positive)
    # and normalize this priority by the original bin capacity. This encourages better packing density.
    mask = bins_remain_cap >= item
    if np.any(mask):
        priorities[mask] = -np.abs(remaining_space[mask]) / bins_remain_cap[mask]

    # Boost the priority for almost full bins (reduces fragmentation)
    almost_full_threshold = 0.1 * np.max(bins_remain_cap)  # e.g., within 10% of the max capacity
    almost_full = (bins_remain_cap >= item) & (remaining_space <= almost_full_threshold)
    priorities[almost_full] += 1  # Arbitrary boost value

    # Slightly prioritize bins with larger original capacity (to balance usage)
    # This can help in scenarios where some bins are consistently left almost empty.
    priorities[bins_remain_cap >= item] += 0.01 * bins_remain_cap[bins_remain_cap >= item] / np.max(bins_remain_cap)

    return priorities
```
