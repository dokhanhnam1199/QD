```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: set priority to negative infinity for bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Reward tight fits: prioritize bins where the remaining space is small (but positive)
    remaining_space = bins_remain_cap - item
    feasible_bins = bins_remain_cap >= item

    # Avoid division by zero by adding a small epsilon
    epsilon = 1e-6
    priorities[feasible_bins] += 3.0 / (remaining_space[feasible_bins] + epsilon)  # Increased tight fit reward

    # Fullness: boost priority for almost full bins (reduces fragmentation)
    # Dynamically scale the "almost full" threshold
    max_cap = np.max(bins_remain_cap)
    almost_full_threshold = 0.2 * max_cap  # Adjusted threshold

    almost_full = feasible_bins & (remaining_space <= almost_full_threshold)
    # Scaling bonus based on proximity to being full, with higher scaling factor
    priorities[almost_full] += 20 * (1 - (remaining_space[almost_full] / almost_full_threshold))

    # Penalize waste/overflow: give a penalty for bins with a lot of remaining space
    large_space_threshold = 0.5 * max_cap  # Adjusted threshold
    large_space = feasible_bins & (remaining_space > large_space_threshold)

    # Scale penalty based on the amount of waste, using a stronger cubic penalty
    priorities[large_space] -= 5 * ((remaining_space[large_space] / max_cap)**3) # Increased penalty

    # Bonus for bins with higher initial remaining capacity (encourage balanced bin usage) - reduced effect
    priorities[feasible_bins] += 0.02 * (bins_remain_cap[feasible_bins] / max_cap)

    # Discourage creating near-empty bins by penalizing bins that were nearly full before placement and now have low utilization.
    previously_almost_empty_threshold = 0.8 * max_cap
    previously_almost_empty = (bins_remain_cap >= item) & (bins_remain_cap > previously_almost_empty_threshold) & (remaining_space > 0.6 * max_cap)  # Reduced Remaining space threshold for trigger
    priorities[previously_almost_empty] -= 8  # Further increased penalty

    # Mildly penalize bins which are becoming half-full, to balance bin usage
    half_full_threshold_high = 0.6 * max_cap
    half_full_threshold_low = 0.4 * max_cap
    becoming_half_full = feasible_bins & (bins_remain_cap > half_full_threshold_low) & (bins_remain_cap < half_full_threshold_high) & (remaining_space <= half_full_threshold_low)

    priorities[becoming_half_full] -= 2.0 # Increased penalty

    # Small bonus for bins with lowest current utilization to encourage even filling
    current_utilization = (max_cap - bins_remain_cap) / max_cap
    min_utilization_bonus_eligible = feasible_bins & (current_utilization <= np.percentile(current_utilization[feasible_bins], 25)) # consider only bottom 25%
    priorities[min_utilization_bonus_eligible] += 1.0

    return priorities
```
