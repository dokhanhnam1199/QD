```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get the lowest priority
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Remaining space after placing the item
    remaining_space = bins_remain_cap - item
    
    # Reward tight fits: prioritize bins where the remaining space is small (but non-negative)
    priorities[bins_remain_cap >= item] = -np.abs(remaining_space[bins_remain_cap >= item])
    
    # Boost almost full bins to avoid fragmentation
    almost_full_threshold = 0.2 * np.max(bins_remain_cap)  # e.g., within 20% of full
    almost_full = (bins_remain_cap >= item) & (remaining_space <= almost_full_threshold)
    priorities[almost_full] += 20 # Higher value, to prioritize filling almost full bins
    
    # Normalize the remaining space score to bin capacity
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] -= (remaining_space[valid_bins] / np.max(bins_remain_cap)) * 10
    
    # A small bonus for utilizing larger bins slightly more
    priorities[valid_bins] += (bins_remain_cap[valid_bins] / np.max(bins_remain_cap)) * 2
        
    return priorities
```
