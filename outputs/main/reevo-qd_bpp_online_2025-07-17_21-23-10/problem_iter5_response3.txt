```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility: Very large negative priority to bins that can't fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -1e9

    # Tight fit reward (primary priority): Prioritize bins where the remaining space is minimal.
    remaining_space = bins_remain_cap - item
    feasible_mask = bins_remain_cap >= item
    
    # Reciprocal of remaining space to favor tighter fits, avoid division by zero
    priorities[feasible_mask] += 100 / (remaining_space[feasible_mask] + 1e-6)

    # Almost Full Bin Bonus: Give a substantial bonus if the item makes the bin nearly full.
    almost_full_threshold = 0.15 * np.max(bins_remain_cap)  # Reduced threshold for more aggressive "almost full"
    almost_full_mask = feasible_mask & (remaining_space <= almost_full_threshold)
    priorities[almost_full_mask] += 500 * (1 - (remaining_space[almost_full_mask] / almost_full_threshold))

    # Penalize Waste: Discourage creating bins with significant remaining space
    waste_threshold = 0.6 * np.max(bins_remain_cap) # increased threshold, larger penalty
    waste_mask = feasible_mask & (remaining_space > waste_threshold)
    priorities[waste_mask] -= 50 * (remaining_space[waste_mask] / np.max(bins_remain_cap))

    # Slightly Reward higher initial capacities (balancing)
    priorities[feasible_mask] += 5 * (bins_remain_cap[feasible_mask] / np.max(bins_remain_cap))

    # Discourage near-empty bins (avoid creating many bins with very little in them)
    near_empty_threshold = 0.2 * np.max(bins_remain_cap)
    near_empty_after_mask = feasible_mask & (remaining_space > item) & (bins_remain_cap - item <= near_empty_threshold)
    priorities[near_empty_after_mask] -= 25
    

    return priorities
```
