```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary criterion: fit the item
            remaining_after_fit = cap - item
            # Prioritize bins that fit the item well,
            # but also avoid bins that will become nearly full (waste)
            # The closer to the mean occupancy after fit, the better.
            priorities[i] = 1.0 / (abs(remaining_after_fit - (np.sum(bins_remain_cap) - item) / bins_remain_cap.size) + 0.0001)

            # Additional consideration: Favour bins with smaller remaining capacity IF the remaining capacity is enough for item, to fill the bin quickly.

            priorities[i] += (1 / (cap + 0.0001)) * 0.1 # Weight = 0.1

        else:
            # If item doesn't fit, give very low priority (but not zero to avoid zero division if used to create probability distribution downstream).
            priorities[i] = -1000 # Arbitrarily very low
    return priorities
```
