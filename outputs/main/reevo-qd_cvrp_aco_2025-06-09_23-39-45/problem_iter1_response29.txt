```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Parameters (tunable)
    alpha = 1.0   # Weight for distance
    beta = 0.5   # Weight for demand consideration (higher demand between nodes -> less promising)
    gamma = 0.2   # Weight for closeness to depot (encourage return to depot for capacity management)
    delta = 0.1   # Edge density threshold
    depot_index = 0

    # Calculate depot proximity scores
    depot_distances = distance_matrix[depot_index, :]
    depot_proximity = 1 / (depot_distances + 1e-6)  # Avoid division by zero

    # Iterate through all possible edges
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # Disallow self-loops
            else:
                # Calculate edge desirability
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero
                demand_factor = 1 / (demands[i] + demands[j] + 1e-6)
                depot_factor = (depot_proximity[i] + depot_proximity[j]) # prefer the nodes close to depot

                heuristic_value = (alpha * distance_factor +
                                   beta * demand_factor +
                                   gamma * depot_factor)

                heuristic_matrix[i, j] = heuristic_value

    # Sparsify the matrix (remove less promising edges to reduce the search space)
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], delta)  # Small value above zero.

    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
