```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance, savings, and demand considerations
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0
            else:
                # Favor shorter distances
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero
                
                # Favor edges connecting nodes with smaller demands
                demand_factor = 1 / (demands[i] + demands[j] + 1e-6)

                # Incorporate savings
                savings_factor = savings_matrix[i, j]

                heuristic_matrix[i, j] = distance_factor * demand_factor * savings_factor

    # Sparsify the matrix: keep only top K edges for each node
    K = int(np.sqrt(n))  # Adjust K based on problem size
    for i in range(n):
        row = heuristic_matrix[i, :].copy()
        indices = np.argsort(row)[::-1][K:]  # Indices of the smallest elements
        heuristic_matrix[i, indices] = 0
        heuristic_matrix[indices, i] = 0


    #Set the depot's self-connection and nodes' self connection to 0
    for i in range(n):
      heuristic_matrix[i,i] = 0

    heuristic_matrix[0,0] = 0

    return heuristic_matrix
```
