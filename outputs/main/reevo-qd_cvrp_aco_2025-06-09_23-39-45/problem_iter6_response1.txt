```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Improved version incorporating savings, demand, distance, normalization, sparsification, and depot biasing.

    Args:
        distance_matrix: Distance matrix (shape: n by n).
        coordinates: Euclidean coordinates of nodes (shape: n by 2).
        demands: Customer demands.
        capacity: Vehicle capacity.

    Returns:
        A matrix indicating how promising it is to include each edge in a solution.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Clarke-Wright Savings
    savings = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings[j, i] = savings[i, j]

    # Normalize Savings
    max_saving = np.max(savings)
    min_saving = np.min(savings)
    normalized_savings = (savings - min_saving) / (max_saving - min_saving + 1e-6)

    # Demand Factor (Geometric Mean)
    demand_factor = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_factor[i, j] = 1 / (np.sqrt(demands[i] * demands[j]) + 1e-6)

    # Normalize Demand Factor
    max_demand = np.max(demand_factor)
    min_demand = np.min(demand_factor)
    normalized_demand = (demand_factor - min_demand) / (max_demand - min_demand + 1e-6)

    # Distance Factor
    distance_factor = 1 / (distance_matrix + 1e-6)

    # Normalize Distance Factor
    max_distance = np.max(distance_factor)
    min_distance = np.min(distance_factor)
    normalized_distance = (distance_factor - min_distance) / (max_distance - min_distance + 1e-6)


    # Combined Score (Weighted Sum)
    heuristic_matrix = (0.4 * normalized_savings + 0.3 * normalized_demand + 0.3 * normalized_distance)


    # Sparsification (Adaptive Thresholds)
    depot_threshold = np.percentile(heuristic_matrix[0, 1:], 60)  # Depot connections (adjust percentile)
    non_depot_threshold = np.percentile(heuristic_matrix[1:, 1:], 20) # Non-depot connections (adjust percentile)

    for i in range(n):
        for j in range(n):
            if i == 0 or j == 0:  # Depot connections
                if heuristic_matrix[i, j] < depot_threshold:
                    heuristic_matrix[i, j] = 0
            else:  # Non-depot connections
                if heuristic_matrix[i, j] < non_depot_threshold:
                    heuristic_matrix[i, j] = 0

    # Depot Biasing
    for i in range(1, n):
        heuristic_matrix[0, i] *= 1.3  # Increase weight for depot connections (adjust multiplier)
        heuristic_matrix[i, 0] *= 1.3

    # Additional Demand Based Adjustment
    for i in range(1, n):
        heuristic_matrix[0, i] *= (1 - (demands[i] / capacity) * 0.3)  # Reduce attractiveness if demand is high for direct connection to depot
        heuristic_matrix[i, 0] *= (1 - (demands[i] / capacity) * 0.3)


    return heuristic_matrix
```
