```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix: Distance matrix (shape: n by n).
        coordinates: Euclidean coordinates of nodes (shape: n by 2).
        demands: Customer demands.
        capacity: Vehicle capacity.

    Returns:
        A matrix of the same shape as distance_matrix, indicating how promising it is to include each edge in a solution.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate savings using Clarke-Wright savings algorithm
    savings = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings[j, i] = savings[i, j]

    # Normalize savings
    max_saving = np.max(savings)
    min_saving = np.min(savings)
    if max_saving > min_saving:
        normalized_savings = (savings - min_saving) / (max_saving - min_saving)
    else:
        normalized_savings = np.ones_like(savings)

    # Incorporate demand consideration using a demand factor (harmonic mean) and a division-based approach.
    demand_factor_harmonic = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_factor_harmonic[i, j] = 2 / (1/demands[i] + 1/demands[j] + 1e-6) if (demands[i] > 0 and demands[j] > 0) else 0 # Adding a small constant to avoid division by zero, handle zero demands
    
    demand_factor_division = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1,n):
      for j in range(1,n):
        if i!=j:
          demand_factor_division[i,j] = 1 - abs(demands[i] - demands[j])/(capacity+1e-6)


    # Normalize demand factor (harmonic)
    max_demand_harmonic = np.max(demand_factor_harmonic)
    min_demand_harmonic = np.min(demand_factor_harmonic)
    if max_demand_harmonic > min_demand_harmonic:
        normalized_demand_harmonic = (demand_factor_harmonic - min_demand_harmonic) / (max_demand_harmonic - min_demand_harmonic)
    else:
        normalized_demand_harmonic = np.ones_like(demand_factor_harmonic)
    
    # Normalize demand factor (division)
    max_demand_division = np.max(demand_factor_division)
    min_demand_division = np.min(demand_factor_division)
    if max_demand_division > min_demand_division:
        normalized_demand_division = (demand_factor_division - min_demand_division) / (max_demand_division - min_demand_division)
    else:
        normalized_demand_division = np.ones_like(demand_factor_division)


    # Distance factor (inverse)
    distance_factor = 1 / (distance_matrix + 1e-6)

    # Normalize Distance factor
    max_distance_factor = np.max(distance_factor)
    min_distance_factor = np.min(distance_factor)
    if max_distance_factor > min_distance_factor:
        normalized_distance = (distance_factor - min_distance_factor) / (max_distance_factor - min_distance_factor)
    else:
        normalized_distance = np.ones_like(distance_factor)

    # Combine savings, demand and normalized distance.  Heuristic_matrix should favor high savings,
    # high normalized demand factor, and shorter distance.
    heuristic_matrix = normalized_savings * normalized_demand_harmonic**0.5 * normalized_demand_division**0.5 * normalized_distance

    # Sparsify the matrix: remove edges with low heuristic values to encourage exploration
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 60) # Increased sparsity
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Bias to include connections to the depot (node 0)
    for i in range(1, n):
        heuristic_matrix[0, i] *= 2.0  # Increase weight for depot connections
        heuristic_matrix[i, 0] *= 2.0

    return heuristic_matrix
```
