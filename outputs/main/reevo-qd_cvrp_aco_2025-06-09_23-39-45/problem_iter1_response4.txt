```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Combines distance, demand, and node proximity to generate a prior indicator for each edge.
    Sparsifies the matrix by setting unpromising elements to zero.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators for each edge (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Parameters for tuning
    alpha = 1.0  # Distance factor
    beta = 0.5   # Demand factor
    gamma = 0.2  # Proximity to depot factor
    sparsity_threshold = 0.1 #Threshold for sparsifying

    # Calculate proximity to depot for each node
    depot_distances = distance_matrix[0, :]
    normalized_depot_distances = (depot_distances - np.min(depot_distances)) / (np.max(depot_distances) - np.min(depot_distances) + 1e-9)


    for i in range(n):
        for j in range(n):
            if i != j:
                # Heuristic based on distance, demand, and proximity to the depot
                demand_penalty = 1.0
                if demands[i] + demands[j] > capacity:
                    demand_penalty = 0.0  # Penalize edges connecting nodes that would exceed capacity


                heuristic_value = (
                    alpha / (distance_matrix[i, j] + 1e-9) +
                    beta * demand_penalty+
                    gamma * (1 - normalized_depot_distances[i] + 1- normalized_depot_distances[j])
                )

                heuristic_matrix[i, j] = heuristic_value


    # Normalize the heuristic matrix
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    #Sparsify the matrix by setting unpromising elements to zero
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], sparsity_threshold)
    heuristic_matrix[heuristic_matrix < threshold] = 0


    return heuristic_matrix
```
