{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix: Distance matrix (shape: n by n).\n        coordinates: Euclidean coordinates of nodes (shape: n by 2).\n        demands: Customer demands.\n        capacity: Vehicle capacity.\n\n    Returns:\n        A matrix of the same shape as distance_matrix, indicating how promising it is to include each edge in a solution.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize the heuristic matrix\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate savings using Clarke-Wright savings algorithm\n    savings = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings[j, i] = savings[i, j]\n\n    # Normalize savings\n    max_saving = np.max(savings)\n    min_saving = np.min(savings)\n    if max_saving > min_saving:\n        normalized_savings = (savings - min_saving) / (max_saving - min_saving)\n    else:\n        normalized_savings = np.ones_like(savings)\n\n    # Incorporate demand consideration using a demand factor (harmonic mean)\n    demand_factor = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                demand_factor[i, j] = 2 / (1/demands[i] + 1/demands[j] + 1e-6) if (demands[i] > 0 and demands[j] > 0) else 0 # Adding a small constant to avoid division by zero, handle zero demands\n\n    # Normalize demand factor\n    max_demand = np.max(demand_factor)\n    min_demand = np.min(demand_factor)\n    if max_demand > min_demand:\n        normalized_demand = (demand_factor - min_demand) / (max_demand - min_demand)\n    else:\n        normalized_demand = np.ones_like(demand_factor)\n\n    # Distance factor (inverse)\n    distance_factor = 1 / (distance_matrix + 1e-6)\n\n    # Normalize Distance factor\n    max_distance_factor = np.max(distance_factor)\n    min_distance_factor = np.min(distance_factor)\n    if max_distance_factor > min_distance_factor:\n        normalized_distance = (distance_factor - min_distance_factor) / (max_distance_factor - min_distance_factor)\n    else:\n        normalized_distance = np.ones_like(distance_factor)\n\n    # Combine savings, demand and normalized distance.  Heuristic_matrix should favor high savings,\n    # high normalized demand factor, and shorter distance.\n    heuristic_matrix = normalized_savings * normalized_demand * normalized_distance\n\n    # Sparsify the matrix: remove edges with low heuristic values to encourage exploration\n    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 40) # Only consider positive values\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Bias to include connections to the depot (node 0)\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 1.5  # Increase weight for depot connections, reduced from 2.0\n        heuristic_matrix[i, 0] *= 1.5\n\n    return heuristic_matrix\n\n[Reflection]\nThe better heuristic combines savings, demand, and distance, sparsifies, and biases depot connections. Normalization is crucial.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}