```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix: Distance matrix (shape: n by n).
        coordinates: Euclidean coordinates of nodes (shape: n by 2).
        demands: Vector of customer demands (shape: n).
        capacity: Vehicle capacity.

    Returns:
        Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]

    # Initialize heuristics matrix
    heuristics = np.zeros_like(distance_matrix)

    # Calculate savings matrix (Clark-Wright savings)
    savings_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node proximity to the depot
    depot_proximity = np.zeros(n)
    for i in range(1,n):
        depot_proximity[i] = 1 / distance_matrix[0,i]

    # Demand factor
    demand_factor = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_factor[i, j] = 1 / (demands[i] + demands[j] + 1e-6) # Avoid division by zero

    # Combine factors
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (
                    (1 / (distance_matrix[i, j] + 1e-6))  # Distance factor, avoid div by zero
                    + 0.5 * savings_matrix[i, j]  # Savings factor
                    + 0.2 * (depot_proximity[i] + depot_proximity[j])
                    + 0.1 * demand_factor[i, j]
                )

    #Sparsify the matrix
    threshold = np.percentile(heuristics[heuristics > 0], 20) # Keep top 80% edges
    heuristics[heuristics < threshold] = 0
    np.fill_diagonal(heuristics, 0) #Ensure self-loops are not considered

    return heuristics
```
