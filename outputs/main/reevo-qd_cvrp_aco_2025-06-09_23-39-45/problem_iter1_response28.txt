```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for the Capacitated Vehicle Routing Problem (CVRP) using stochastic solution sampling ideas.

    This version combines several factors to determine the desirability of including an edge:
    - Distance: Shorter distances are generally preferred.
    - Demand:  Edges connecting nodes with larger demands *may* be less desirable to reduce remaining capacity.
    - Angle: Edges forming sharper turns (relative to the depot) are penalized as these generally indicate longer paths.
    - Sparsity:  The matrix is sparsified by setting probabilities for unlikely edges to zero.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate angles relative to the depot
    depot_coords = coordinates[0]
    angles = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                v1 = coordinates[i] - depot_coords
                v2 = coordinates[j] - depot_coords
                dot_product = np.dot(v1, v2)
                magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                if magnitudes > 0:  # Avoid division by zero
                    angles[i, j] = np.arccos(dot_product / magnitudes)
                else:
                    angles[i, j] = np.pi / 2  # Default angle if magnitude is zero

    # Combine factors to create the heuristic matrix
    for i in range(n):
        for j in range(n):
            if i != j:
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero
                demand_factor = 1 / (np.sqrt(demands[i] * demands[j]) + 1e-6) if (i!=0 and j!=0) else 1.0
                angle_factor = 1 / (angles[i, j] + 1e-6) if (i > 0 and j > 0) else 1.0 # angle is only useful for non-depot connections
                heuristic_matrix[i, j] = distance_factor * demand_factor * angle_factor # Combine factors

    #Sparsify the matrix, remove elements with smaller weights
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
