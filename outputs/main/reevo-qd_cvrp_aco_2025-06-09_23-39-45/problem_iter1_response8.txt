```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Savings matrix is symmetric

    # Calculate a capacity penalty based on the demands of the nodes
    capacity_penalty = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
             capacity_penalty[i, j] = np.exp(max(0, demands[i] + demands[j] - capacity)/capacity*5)


    # Calculate a distance heuristic (inverse distance, penalized if nodes are close to depot)
    distance_heuristic = 1 / (distance_matrix + 1e-6)

    # Combine the heuristics
    heuristic_matrix = (savings_matrix / (distance_matrix+1e-6))  * np.exp(-0.1*(distance_matrix)) / (1 + capacity_penalty) # savings, distance, capacity all included.

    # Sparsify the matrix: set entries to zero if they are not promising
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2) # Keep top 80%
    heuristic_matrix[heuristic_matrix < threshold] = 0 # set unpromising connections to 0

    # Ensure that connections to depot are always present
    for i in range(1,n):
        if heuristic_matrix[0, i] <= 1e-9:
             heuristic_matrix[0, i] = np.quantile(heuristic_matrix[heuristic_matrix>0], 0.4)
        if heuristic_matrix[i, 0] <= 1e-9:
             heuristic_matrix[i, 0] =  np.quantile(heuristic_matrix[heuristic_matrix>0], 0.4)



    return heuristic_matrix
```
