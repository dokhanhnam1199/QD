```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                     Shape: n by n.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Ensure symmetry

    # Calculate demand density for each node
    demand_density = demands / np.sum(demands) # Normalize to make more comparable across instances.

    # Calculate a combined heuristic value for each edge
    for i in range(n):
        for j in range(n):
            if i != j:
                # Combine inverse distance, savings, demand density, and coordinate-based proximity
                heuristic_value = (
                    (1 / (distance_matrix[i, j] + 1e-9))  # Avoid division by zero
                    + 0.5 * savings_matrix[i, j]
                    + 0.1 * (demand_density[i] + demand_density[j]) #Adding these to the weights did not seem to improve results.
                    - 0.001 * np.linalg.norm(coordinates[i] - coordinates[j]) # Added to improve the density of paths.
                )

                heuristic_matrix[i, j] = heuristic_value

    # Sparsify the matrix (optional, but often helpful)
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 70)  # Consider top 30% of edges
    heuristic_matrix[heuristic_matrix < threshold] = 0

    #Ensure diagonals are zero.
    for i in range(n):
        heuristic_matrix[i,i] = 0

    return heuristic_matrix
```
