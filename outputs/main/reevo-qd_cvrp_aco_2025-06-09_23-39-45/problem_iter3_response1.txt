```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix: Distance matrix (shape: n by n).
        coordinates: Euclidean coordinates of nodes (shape: n by 2).
        demands: Customer demands.
        capacity: Vehicle capacity.

    Returns:
        A matrix of the same shape as distance_matrix, indicating how promising it is to include each edge in a solution.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate savings using Clarke-Wright savings algorithm
    savings = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings[j, i] = savings[i, j]

    # Normalize savings
    max_saving = np.max(savings)
    min_saving = np.min(savings)
    if max_saving > min_saving:
        normalized_savings = (savings - min_saving) / (max_saving - min_saving)
    else:
        normalized_savings = np.ones_like(savings)

    # Incorporate demand consideration using a demand factor
    demand_factor = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_factor[i, j] = 1 / (demands[i] + demands[j] + 1e-6)  # Adding a small constant to avoid division by zero

    # Normalize demand factor
    max_demand = np.max(demand_factor)
    min_demand = np.min(demand_factor)
    if max_demand > min_demand:
        normalized_demand = (demand_factor - min_demand) / (max_demand - min_demand)
    else:
        normalized_demand = np.ones_like(demand_factor)

    # Normalize Distance
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    if max_distance > min_distance:
        normalized_distance = (distance_matrix - min_distance) / (max_distance - min_distance)
    else:
        normalized_distance = np.ones_like(distance_matrix)

    # Combine savings, demand and distance. Give different weights.
    heuristic_matrix = (0.6 * normalized_savings + 0.2 * normalized_demand) / (0.2 * normalized_distance + 1e-6)

    # Sparsify the matrix: remove edges with low heuristic values to encourage exploration
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 30) # Only consider positive values
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Bias to include connections to the depot (node 0)
    for i in range(1, n):
        heuristic_matrix[0, i] *= 2.0  # Increase weight for depot connections
        heuristic_matrix[i, 0] *= 2.0

    return heuristic_matrix
```
