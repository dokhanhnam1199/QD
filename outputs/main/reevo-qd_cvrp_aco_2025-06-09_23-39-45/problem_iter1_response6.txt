```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version combines several factors to determine the promise of selecting an edge:
    - Distance: Shorter distances are preferred.
    - Demand: Edges connecting nodes with higher demands (relative to capacity) are penalized, promoting route balancing.
    - Angle: The angle between the edges connecting a node to its potential neighbors is considered to promote less circuitous routes.
    - Capacity utilization: Edges that potentially lead to better capacity utilization are favored.

    The matrix is also sparsified by setting unpromising elements to zero.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Demand normalization factor
    demand_norm = np.sum(demands)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics_matrix[i, j] = 0  # No self-loops
                continue

            # Distance factor (shorter distance is better)
            distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Add small value to avoid division by zero

            # Demand factor (penalize edges connecting nodes with high demands)
            demand_factor = 1 - (demands[i] + demands[j]) / (2 * capacity + 1e-6)
            demand_factor = max(0.01, demand_factor) # Ensure non-zero

            # Angle factor (promote less circuitous routes)
            angle_factor = 1.0
            if i != 0 and j != 0: # depot doesn't penalize anything
                # Iterate through other nodes and find best angle to prefer linear routes
                best_angle = 1.0
                for k in range(n):
                    if k != i and k != j:
                        v1 = coordinates[i] - coordinates[k]
                        v2 = coordinates[i] - coordinates[j]

                        v1_u = v1 / (np.linalg.norm(v1) + 1e-6)
                        v2_u = v2 / (np.linalg.norm(v2) + 1e-6)
                        angle = np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0)) #Angle in radians
                        best_angle = min(best_angle, np.abs(angle - np.pi)) #Prefer 180 degrees/pi radians

                angle_factor = 1.0 / (best_angle + 1e-6)

            # Combine factors
            heuristics_matrix[i, j] = distance_factor * demand_factor * angle_factor

    # Sparsify the matrix (set unpromising elements to zero)
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 20) # Keep top 80%
    heuristics_matrix[heuristics_matrix < threshold] = 0


    return heuristics_matrix
```
