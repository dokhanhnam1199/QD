```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters for tuning (Experiment with these)
    alpha = 1.0   # Importance of distance
    beta = 0.5    # Importance of demand attraction
    gamma = 0.2   # Importance of depot proximity
    delta = 0.1   # Sparsity threshold

    # 1. Distance factor (inverse of distance, as shorter distances are preferred)
    distance_factor = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # 2. Demand attraction factor (attractiveness of connecting nodes based on their demands, encouraging balanced loads)
    demand_attraction = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                demand_attraction[i, j] = np.exp(-abs(demands[i] - demands[j]) / capacity)  # Favor nodes with more similar demands


    # 3. Depot proximity factor (encourage connections to/from the depot, critical for CVRP)
    depot_proximity = np.zeros((n, n))
    for i in range(n):
        depot_proximity[0, i] = 1  # High priority for edges from depot
        depot_proximity[i, 0] = 1  # High priority for edges to depot
        # Make sure the self-loop (0,0) is zeroed out
        depot_proximity[0,0] = 0

    # 4. Combined heuristic score
    heuristic_matrix = alpha * distance_factor + beta * demand_attraction + gamma * depot_proximity


    # 5. Sparsification (set low-priority edges to zero)
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], delta) # Calculate a delta-percentile as threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure diagonals are zero to prevent self-loops
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
