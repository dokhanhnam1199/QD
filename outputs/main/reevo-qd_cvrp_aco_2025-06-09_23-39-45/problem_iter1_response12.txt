```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Capacity of each vehicle.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings matrix (Clark-Wright savings heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node proximity to depot
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / distance_matrix[0, i]

    # Demand factor
    demand_factor = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1,n):
              if i !=j:
                  demand_factor[i, j] = 1/(demands[i] + demands[j] + 1e-6) # add a small constant to avoid division by zero
              else:
                  demand_factor[i,j] = 0


    # Combine factors to create the heuristics matrix
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (savings_matrix[i, j] + 1e-6) / (distance_matrix[i, j] + 1e-6) #savings/distance
                heuristics_matrix[i,j] += (depot_proximity[i] + depot_proximity[j] + 1e-6)
                heuristics_matrix[i,j] *= demand_factor[i,j] #Smaller the demands, bigger value

    # Sparsify the matrix (remove less promising edges)
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 30)  # Keep top 70%
    heuristics_matrix[heuristics_matrix < threshold] = 0


    return heuristics_matrix
```
