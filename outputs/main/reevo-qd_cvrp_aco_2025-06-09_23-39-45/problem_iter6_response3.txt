```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix: Distance matrix (shape: n by n).
        coordinates: Euclidean coordinates of nodes (shape: n by 2).
        demands: Customer demands.
        capacity: Vehicle capacity.

    Returns:
        A matrix indicating how promising it is to include each edge in a solution.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate savings using Clarke-Wright savings algorithm
    savings = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings[j, i] = savings[i, j]

    # Normalize savings
    max_saving = np.max(savings)
    min_saving = np.min(savings)
    if max_saving > min_saving:
        normalized_savings = (savings - min_saving) / (max_saving - min_saving)
    else:
        normalized_savings = np.ones_like(savings)

    # Demand Consideration: Adjusted to consider capacity
    demand_factor = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Penalize edges connecting nodes whose combined demand exceeds capacity by a lot
                demand_sum = demands[i] + demands[j]
                if demand_sum > capacity:
                    demand_factor[i, j] = 0.1 / (demand_sum + 1e-6)  # Heavily penalize
                else:
                    demand_factor[i, j] = 1 / (demand_sum + 1e-6)  # Encourage if within capacity

    # Normalize demand factor
    max_demand = np.max(demand_factor)
    min_demand = np.min(demand_factor)
    if max_demand > min_demand:
        normalized_demand = (demand_factor - min_demand) / (max_demand - min_demand)
    else:
        normalized_demand = np.ones_like(demand_factor)

    # Distance: Use inverse distance directly, no normalization
    distance_factor = 1 / (distance_matrix + 1e-6)

    # Heuristic combination: Savings, Demand, and Distance
    heuristic_matrix = (0.5 * normalized_savings + 0.3 * normalized_demand + 0.2 * distance_factor)

    # Sparsification: adaptive thresholding based on connection type
    depot_threshold = np.percentile(heuristic_matrix[0, 1:], 75)  # More lenient for depot connections
    non_depot_threshold = np.percentile(heuristic_matrix[1:, 1:], 25)  # More restrictive for inter-customer connections

    for i in range(n):
        for j in range(n):
            if i == 0 or j == 0:
                if heuristic_matrix[i, j] < depot_threshold:
                    heuristic_matrix[i, j] = 0
            else:
                if heuristic_matrix[i, j] < non_depot_threshold:
                    heuristic_matrix[i, j] = 0

    # Depot Bias: stronger bias to depot connections
    for i in range(1, n):
        heuristic_matrix[0, i] *= 2.5
        heuristic_matrix[i, 0] *= 2.5

    return heuristic_matrix
```
