```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution
                    (same shape as distance_matrix).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node proximity factor (closer nodes are more promising)
    proximity_factor = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # Demand compatibility factor (nodes with compatible demands are more promising)
    demand_compatibility_factor = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                if demands[i] + demands[j] > capacity:
                    demand_compatibility_factor[i, j] = 0.1  # Reduce promise for incompatible nodes

    # Savings factor: Higher savings values mean greater cost reduction by merging the two customers into one route
    normalized_savings = savings_matrix / np.max(savings_matrix)

    # Combine factors with weights
    alpha = 0.5  # Weight for proximity
    beta = 0.3  # Weight for savings
    gamma = 0.2 # Weight for demand

    heuristic_matrix = alpha * proximity_factor + beta * normalized_savings + gamma* demand_compatibility_factor

    # Sparsify the matrix (set unpromising elements to zero)
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2)  # Keep top 80% of edges
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure the depot (node 0) is connected by penalizing 0-i links less
    for i in range(1, n):
          heuristic_matrix[0,i] = heuristic_matrix[0,i] * 2
          heuristic_matrix[i,0] = heuristic_matrix[i,0] * 2

    #Remove self loops
    for i in range(n):
        heuristic_matrix[i,i] = 0

    return heuristic_matrix
```
