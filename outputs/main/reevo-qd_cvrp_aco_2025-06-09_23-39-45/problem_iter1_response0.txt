```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with a base value (e.g., inverse distance)
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Incorporate demand information: Penalize edges connecting nodes with high combined demand.
    demand_factor = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                demand_factor[i, j] = (demands[i] + demands[j]) / (2 * capacity)
    heuristic_matrix = heuristic_matrix / (1 + demand_factor) # Reduce score for high demand pairs

    # Incorporate proximity to the depot: Favor connections closer to the depot (node 0).
    depot_proximity_factor = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                depot_proximity_factor[i, j] = (distance_matrix[0, i] + distance_matrix[0, j]) / (2 * np.max(distance_matrix))  # Normalized depot distance
    heuristic_matrix = heuristic_matrix / (1 + depot_proximity_factor) # Reduce score for edges that require large detour from depot

    # Sparsify the matrix: Remove edges that are too long or have very high combined demand.
    distance_threshold = np.mean(distance_matrix) + np.std(distance_matrix)
    demand_threshold = 1.5
    heuristic_matrix[distance_matrix > distance_threshold] = 0
    heuristic_matrix[demand_factor > demand_threshold] = 0
    
    # Set diagonal elements to zero
    np.fill_diagonal(heuristic_matrix, 0)

    # Prioritize visiting nodes with high demand that are far from the depot by increasing their connectivity to the depot
    for i in range(1,n): # do not include depot in the priority boost
       heuristic_matrix[0,i] = heuristic_matrix[0,i] * (1 + demands[i] / capacity) * (1 + distance_matrix[0, i] / np.mean(distance_matrix[0,1:]))
       heuristic_matrix[i,0] = heuristic_matrix[i,0] * (1 + demands[i] / capacity) * (1 + distance_matrix[i, 0] / np.mean(distance_matrix[0,1:]))

    return heuristic_matrix
```
