```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP) that
    combines several factors to determine how promising it is to include each edge
    in a solution.

    Args:
        distance_matrix (np.ndarray): A matrix of distances between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): A vector of customer demands (n).
        capacity (int): The capacity of each vehicle.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix,
                  indicating how promising it is to include each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of customers
    savings = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings[j, i] = savings[i, j] # make symmetric

    # Normalize distance matrix
    max_distance = np.max(distance_matrix)
    normalized_distance = distance_matrix / max_distance

    # Combine savings and normalized distance
    heuristic_matrix = savings / (normalized_distance + 0.0001) # Adding a small constant to avoid division by zero

    # Penalize edges that would violate capacity constraints early on
    demand_penalty = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Assume that including edge (i,j) means both customer demands are included.
                if demands[i] + demands[j] > capacity:
                    demand_penalty[i, j] = -10 # Large negative penalty
                else:
                    demand_penalty[i,j] = 0

    heuristic_matrix = heuristic_matrix + demand_penalty
    # Sparsify the matrix (set unpromising elements to zero)

    # Find the median heuristic value
    median_heuristic = np.median(heuristic_matrix[heuristic_matrix > 0])
    
    # Set all heuristic values below the median to zero.
    heuristic_matrix[heuristic_matrix < median_heuristic] = 0

    #Ensure the depot edges are possible: prevent completely disallowing depot edges
    for i in range(1, n):
      if heuristic_matrix[0, i] == 0 and heuristic_matrix[i,0] == 0:
        heuristic_matrix[0, i] = median_heuristic / 2
        heuristic_matrix[i, 0] = median_heuristic / 2

    return heuristic_matrix
```
