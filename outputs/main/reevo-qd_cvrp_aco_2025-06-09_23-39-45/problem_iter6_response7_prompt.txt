{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix: Distance matrix (shape: n by n).\n        coordinates: Euclidean coordinates of nodes (shape: n by 2).\n        demands: Customer demands.\n        capacity: Vehicle capacity.\n\n    Returns:\n        A matrix indicating how promising it is to include each edge in a solution.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize the heuristic matrix with zeros\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate savings for each pair of nodes based on Clarke-Wright savings algorithm.\n    savings = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings[j, i] = savings[i, j]\n\n    # Normalize savings to be between 0 and 1.\n    max_saving = np.max(savings)\n    min_saving = np.min(savings)\n    if max_saving > min_saving:\n        normalized_savings = (savings - min_saving) / (max_saving - min_saving)\n    else:\n        normalized_savings = np.ones_like(savings)\n\n    # Incorporate demand consideration.  Prioritize edges with nodes that have smaller demand.\n    demand_factor = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                demand_factor[i, j] = 1 / (np.sqrt(demands[i] * demands[j]) + 1e-6)  # Geometric mean\n\n    # Normalize demand factor.\n    max_demand = np.max(demand_factor)\n    min_demand = np.min(demand_factor)\n    if max_demand > min_demand:\n        normalized_demand = (demand_factor - min_demand) / (max_demand - min_demand)\n    else:\n        normalized_demand = np.ones_like(demand_factor)\n\n    # Distance factor: prioritize shorter edges\n    distance_factor = 1 / (distance_matrix + 1e-6)\n    # Normalize distance factor.\n    max_distance = np.max(distance_factor)\n    min_distance = np.min(distance_factor)\n    if max_distance > min_distance:\n        normalized_distance = (distance_factor - min_distance) / (max_distance - min_distance)\n    else:\n        normalized_distance = np.ones_like(distance_factor)\n\n\n    # Calculate a combined score.  Experimenting with different weights\n    heuristic_matrix = (0.5 * normalized_savings + 0.3 * normalized_demand + 0.2 * normalized_distance)\n\n    # Sparsify the matrix: set elements below a certain threshold to zero. Adaptive threshold based on edge type\n    depot_threshold = np.percentile(heuristic_matrix[0, 1:], 70)  # Higher threshold for depot connections\n    non_depot_threshold = np.percentile(heuristic_matrix[1:, 1:], 30)\n\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                if heuristic_matrix[i, j] < depot_threshold:\n                    heuristic_matrix[i, j] = 0\n            else:\n                if heuristic_matrix[i, j] < non_depot_threshold:\n                    heuristic_matrix[i, j] = 0\n\n\n    # Ensure that the depot (node 0) connections are always considered by increasing their weights.\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 1.2  # Adjust the weight as needed. Bias connections from the depot\n        heuristic_matrix[i, 0] *= 1.2\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix: Distance matrix (shape: n by n).\n        coordinates: Euclidean coordinates of nodes (shape: n by 2).\n        demands: Customer demands.\n        capacity: Vehicle capacity.\n\n    Returns:\n        A matrix of the same shape as distance_matrix, indicating how promising it is to include each edge in a solution.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize the heuristic matrix\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate savings using Clarke-Wright savings algorithm\n    savings = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings[j, i] = savings[i, j]\n\n    # Normalize savings\n    max_saving = np.max(savings)\n    min_saving = np.min(savings)\n    if max_saving > min_saving:\n        normalized_savings = (savings - min_saving) / (max_saving - min_saving)\n    else:\n        normalized_savings = np.ones_like(savings)\n\n    # Incorporate demand consideration using a demand factor\n    demand_factor = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                demand_factor[i, j] = 1 / (demands[i] + demands[j] + 1e-6)  # Adding a small constant to avoid division by zero\n\n    # Normalize demand factor\n    max_demand = np.max(demand_factor)\n    min_demand = np.min(demand_factor)\n    if max_demand > min_demand:\n        normalized_demand = (demand_factor - min_demand) / (max_demand - min_demand)\n    else:\n        normalized_demand = np.ones_like(demand_factor)\n\n    # Normalize Distance\n    max_distance = np.max(distance_matrix)\n    min_distance = np.min(distance_matrix)\n    if max_distance > min_distance:\n        normalized_distance = (distance_matrix - min_distance) / (max_distance - min_distance)\n    else:\n        normalized_distance = np.ones_like(distance_matrix)\n\n    # Combine savings, demand and distance. Give different weights.\n    heuristic_matrix = (0.6 * normalized_savings + 0.2 * normalized_demand) / (0.2 * normalized_distance + 1e-6)\n\n    # Sparsify the matrix: remove edges with low heuristic values to encourage exploration\n    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 30) # Only consider positive values\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Bias to include connections to the depot (node 0)\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 2.0  # Increase weight for depot connections\n        heuristic_matrix[i, 0] *= 2.0\n\n    return heuristic_matrix\n\n[Reflection]\nThe better code uses a different demand factor, combines factors via division, and applies sparsification more effectively.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}