```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings matrix (Clarke-Wright savings)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Normalize savings matrix
    savings_matrix_normalized = (savings_matrix - np.min(savings_matrix)) / (np.max(savings_matrix) - np.min(savings_matrix) + 1e-9)

    # Inverse distance matrix (normalized)
    inverse_distance_matrix = 1 / (distance_matrix + 1e-9)
    inverse_distance_matrix_normalized = (inverse_distance_matrix - np.min(inverse_distance_matrix)) / (np.max(inverse_distance_matrix) - np.min(inverse_distance_matrix) + 1e-9)

    # Demand considerations: Penalize edges connecting nodes that would likely overload a vehicle.
    demand_penalty = np.zeros((n, n))
    for i in range(1, n):
      for j in range(1, n):
        if i != j:
          if demands[i] + demands[j] > capacity:
            demand_penalty[i,j] = -1 # Or a larger negative value. You might want to tune.

    # Combine factors with weights.  These weights could be tuned.
    heuristic_matrix = 0.6 * inverse_distance_matrix_normalized + 0.4 * savings_matrix_normalized + 0.1 * demand_penalty

    # Sparsify the matrix: Set elements below a threshold to zero.  Tune this threshold!
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2) # Keep top 80%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure that the diagonal is zero
    np.fill_diagonal(heuristic_matrix, 0)

    return heuristic_matrix
```
