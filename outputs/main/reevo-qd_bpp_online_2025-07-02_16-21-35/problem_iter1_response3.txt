```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing Inspired: Prefer bins that can accommodate the item
    # and are relatively full.
    
    # Give large negative priority to bins that can't fit the item
    priorities[bins_remain_cap < item] = -np.inf
    
    # For bins that can fit, prioritize based on how much space would be left
    remaining_space = bins_remain_cap - item
    
    # Prioritize bins with smaller remaining space (higher utilization)
    priorities[bins_remain_cap >= item] = 1 / (remaining_space[bins_remain_cap >= item] + 0.0001)  # Avoid division by zero and encourage packing tightly. Small value for diversification and avoiding local optima
    
    # Boost priority of bins that are nearly full after packing
    nearly_full_threshold = 0.1  # Tune this parameter: defines "nearly full"
    nearly_full_mask = (remaining_space >= 0) & (remaining_space <= nearly_full_threshold)
    priorities[nearly_full_mask] += 10  # Boost priority to encourage completely filling bins
        
    return priorities
```
