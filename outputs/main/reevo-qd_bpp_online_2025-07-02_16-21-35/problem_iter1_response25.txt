```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing inspired heuristic: Prefer bins that can fit the item.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1.0
    
    # Prioritize bins with less wasted space after placing the item.
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += np.exp(-remaining_after_fit)  # Smaller remaining, higher priority.

    # Give a small priority boost to bins that are close to full (to reduce fragmentation).
    priorities += bins_remain_cap / np.sum(bins_remain_cap) * 0.1 #Normalize

    # Avoid bins that have very little space left relative to item size, to save larger contiguous space.
    almost_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < item*0.2)
    priorities[almost_full_mask] -= 0.5  # Penalize almost full bins slightly.

    # If no bins can fit, prioritize the emptiest bin so we make best possible use of it.
    if not np.any(fit_mask):
        priorities += bins_remain_cap / np.max(bins_remain_cap) * 0.05

    return priorities
```
