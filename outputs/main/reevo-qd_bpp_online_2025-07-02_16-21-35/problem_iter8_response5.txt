```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Eligibility: Prioritize bins where the item fits
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1

    # Waste Minimization: Prioritize bins with minimal remaining waste after placing the item
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Mark ineligible bins with infinite waste

    min_waste = np.min(waste[eligible_bins]) if np.any(eligible_bins) else np.inf
    best_fit_bins = np.isclose(waste, min_waste) & eligible_bins
    priorities[best_fit_bins] += 3  # Increased priority for best fit

    # Capacity Utilization: Incentivize filling bins close to capacity
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0

    priorities += capacity_utilization

    # Avoid creating full bins unless necessary: Penalty for bins becoming exactly full
    almost_full_bins = np.isclose(waste, 0) & eligible_bins
    priorities[almost_full_bins] -= 0.5 #Slight penalty

    # Previously full bins are invalid
    priorities[bins_remain_cap == 0] = -np.inf

    # Introduce a tie-breaking mechanism: prioritize bins with lower initial capacity if multiple bins have the same waste
    # This helps to fill smaller bins first, potentially leaving larger bins for larger items
    initial_capacities = np.ones_like(bins_remain_cap) * np.sum(bins_remain_cap) / len(bins_remain_cap) # Assume initial capacities are the same
    
    #Introduce a small randomness to break the ties
    priorities += np.random.rand(len(priorities)) * 0.001
    
    return priorities
```
