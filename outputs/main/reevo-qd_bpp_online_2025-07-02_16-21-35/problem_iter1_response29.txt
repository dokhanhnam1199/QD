```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item.
    remaining_after_add = bins_remain_cap - item
    
    # Give high priority to bins where item fits and leaves least wasted space.
    fit_mask = remaining_after_add >= 0
    priorities[fit_mask] = 1 / (remaining_after_add[fit_mask] + 1e-9)  # Avoid division by zero
    
    # Penalize bins that don't fit the item (negative remaining capacity). Give higher penalty for bins with lesser remaining capacity.
    non_fit_mask = ~fit_mask
    priorities[non_fit_mask] = - np.abs(remaining_after_add[non_fit_mask]) 

    return priorities
```
