```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic-inspired component: prefer bins with enough space
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1  # Give a base priority to eligible bins
    
    # Best Fit heuristic-inspired component: prioritize bins with minimum wasted space
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins where item doesn't fit.

    min_waste = np.min(waste) #Get the minimum waste.
    best_fit_bins = np.isclose(waste, min_waste) #Check each bin that satisfies the min_waste
    priorities[best_fit_bins] += 2  # Give high priority to bins with minimal waste

    # Capacity Utilization heuristic-inspired: Prefer using bins that are almost full
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins

    priorities += capacity_utilization
    
    #Small adjustments to enhance performace

    priorities[bins_remain_cap == 0] = -np.inf  #Never pick a bin that's already full.
    
    # Add a small bonus for bins that are already relatively full. This encourages filling bins that have already been started.
    already_full_bins = (bins_remain_cap > 0) & (bins_remain_cap < np.mean(bins_remain_cap[bins_remain_cap > 0])/2 if np.any(bins_remain_cap[bins_remain_cap > 0]) else False ) #bin should not be full and bin's remaining capcity should be less than the mean of all bins with available capacity (divided by 2 to be more aggressive)
    priorities[already_full_bins] += 0.5

    return priorities
```
