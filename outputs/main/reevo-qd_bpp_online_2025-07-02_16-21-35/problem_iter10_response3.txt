```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic-inspired component: prefer bins with enough space
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1  # Give a base priority to eligible bins
    
    # Best Fit heuristic-inspired component: prioritize bins with minimum wasted space
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins where item doesn't fit.

    min_waste = np.min(waste) #Get the minimum waste.
    best_fit_bins = np.isclose(waste, min_waste) #Check each bin that satisfies the min_waste
    priorities[best_fit_bins] += 2  # Give high priority to bins with minimal waste

    # Capacity Utilization heuristic-inspired: Prefer using bins that are almost full
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins

    priorities += capacity_utilization
    
    #Small adjustments to enhance performance

    priorities[bins_remain_cap == 0] = -np.inf  #Never pick a bin that's already full.

    # Additional heuristic: Give a slight preference to bins that are already somewhat full
    # This helps to consolidate items into fewer bins.
    already_filled = (bins_remain_cap < np.max(bins_remain_cap)) & eligible_bins #Bins not completely empty and eligible
    priorities[already_filled] += 0.5

    # Penalize bins that are very close to full after adding the item
    nearly_full = (bins_remain_cap - item) < 0.1
    priorities[nearly_full] -= 0.75 #Slight penality, avoid creating extremely small remaining space.

    return priorities
```
