```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Fill the almost full bins first
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item <= 0.1) # Adjust 0.1 as needed. If difference between item and remaining cap is very small, put it there!
    priorities[almost_full] += 100  # Give these bins a high priority

    # Heuristic 2: Avoid bins where the item would result in very little space left
    very_little_space = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.2)  # Adjust 0.2 as needed
    priorities[very_little_space] -= 50 # Slightly de-prioritize

    # Heuristic 3: Prioritize bins that can accommodate the item, based on remaining capacity
    can_accommodate = bins_remain_cap >= item
    priorities[can_accommodate] += bins_remain_cap[can_accommodate] # Give higher priority to bins with higher remaining capacity that can accommodate item
   
    # Heuristic 4: Negative priority for bins that can't accommodate
    cannot_accommodate = bins_remain_cap < item
    priorities[cannot_accommodate] = -1000  # Very low priority if the bin can't fit the item.
    
    # Heuristic 5: Slightly prioritize filling bins rather than starting new ones
    priorities[bins_remain_cap > 0] += 1
    
    return priorities
```
