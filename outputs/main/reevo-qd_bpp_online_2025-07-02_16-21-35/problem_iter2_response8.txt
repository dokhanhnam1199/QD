```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic-inspired component: prefer bins with enough space
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1  # Give a base priority to eligible bins
    
    # Best Fit heuristic-inspired component: prioritize bins with minimum wasted space
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins where item doesn't fit.

    min_waste = np.min(waste) #Get the minimum waste.
    best_fit_bins = np.isclose(waste, min_waste) #Check each bin that satisfies the min_waste
    priorities[best_fit_bins] += 2  # Give high priority to bins with minimal waste

    # Capacity Utilization heuristic-inspired: Prefer using bins that are almost full
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins

    priorities += capacity_utilization
    
    #Never pick a bin that's already full.
    priorities[bins_remain_cap == 0] = -np.inf

    # Small item optimization: Prefer bins with larger remaining capacity if the item is small
    small_item_threshold = 0.1  # Adjust as needed.  If item size less than 10% of bin size.
    if item < small_item_threshold * np.max(bins_remain_cap):
        priorities += bins_remain_cap / np.max(bins_remain_cap) * 0.5  # Add a fraction of remaining cap

    # Tie-breaking: Slightly prefer bins with lower index (First-Fit influence)
    priorities += np.arange(len(bins_remain_cap)) * 0.0001 #add tiny amount of priority based on index

    return priorities
```
