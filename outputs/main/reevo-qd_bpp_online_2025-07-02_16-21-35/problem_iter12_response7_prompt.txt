{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: bins that can't fit the item get a priority of -inf\n    eligible_bins = bins_remain_cap >= item\n    priorities[~eligible_bins] = -np.inf\n\n    # Initial priority boost for eligible bins\n    priorities[eligible_bins] += 1\n\n    # Waste calculation: amount of space wasted if item is placed in the bin\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf  # Assign infinite waste if the item doesn't fit\n\n    # Prioritize bins with smaller waste\n    min_waste = np.min(waste[eligible_bins]) if np.any(eligible_bins) else np.inf  # Get min waste among eligible bins\n    best_fit_bins = np.isclose(waste, min_waste)\n    priorities[best_fit_bins] += 3  # Higher priority for best fit\n    \n    # Capacity utilization: how much of the bin's capacity will be used\n    capacity_utilization = item / bins_remain_cap\n    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins for utilization\n\n    # Add capacity utilization to the priority\n    priorities += capacity_utilization\n\n    # Discourage perfect fills slightly (can lead to fragmentation)\n    perfect_fit = np.isclose(waste, 0)\n    priorities[perfect_fit] -= 0.5\n\n    # Post-fill ratio: remaining capacity after placing the item, relative to the bin size\n    post_fill_ratio = (bins_remain_cap - item) / bins_remain_cap\n    post_fill_ratio[~eligible_bins] = 0  # Ignore ineligible bins\n\n    # Give slight preference to bins that will have a good post-fill ratio\n    priorities += post_fill_ratio * 0.5 #Scale the value.\n\n    # Avoid already full bins\n    priorities[bins_remain_cap == 0] = -np.inf\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: eliminate bins that can't fit the item\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf  # Set priority to negative infinity if not feasible\n    priorities[bins_remain_cap == 0] = -np.inf  # Never pick a full bin\n\n    # Minimize waste (Best Fit): prioritize bins with the least remaining space after placement\n    waste = bins_remain_cap - item\n    waste[~feasible_bins] = np.inf  # Ignore infeasible bins for waste calculation\n\n    # Inverse Waste Heuristic: High priority for bins with low waste\n    inverse_waste = 1 / (waste + 0.0001)  # Adding a small constant to avoid division by zero\n    priorities[feasible_bins] += inverse_waste[feasible_bins]\n\n    # Perfect Fit Bonus: Substantial bonus for filling bins completely\n    perfect_fit = np.isclose(waste, 0)\n    priorities[perfect_fit] += 10  # Significant bonus for perfect fit\n\n    # Capacity Utilization: Favor bins that will be more full after placement\n    capacity_utilization = item / (bins_remain_cap + 0.0001) # avoid divide by zero\n    priorities[feasible_bins] += capacity_utilization[feasible_bins] * 2 # Increased Utilization Weight\n\n    # Adjust for overall fill levels: penalize bins approaching full\n    fill_levels = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # ratio between 0 and 1 representing fullness\n    priorities[feasible_bins] -= fill_levels[feasible_bins] * 0.75 # Apply to feasible bins only\n    return priorities\n\n[Reflection]\nThe better code emphasizes best fit, perfect fit, and discourages near-full bins more effectively.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}