```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Basic priority: how much space is left after adding the item?
            remaining_space = cap - item
            priorities[i] = remaining_space

            # Bonus for bins that are close to full *after* adding the item. We want bins close to full.
            fullness_ratio = item / cap
            priorities[i] += 10 * fullness_ratio  # scale this bonus

            # Large penalty for bins that become too empty with this addition.
            # Avoid creating many empty bins.
            if remaining_space > (np.max(bins_remain_cap) if bins_remain_cap.size>0 else 0.0):
                priorities[i] -= 20  # Large negative to offset any good priority from above. Scale it according to problem constraints.
                

        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority
            
    return priorities
```
