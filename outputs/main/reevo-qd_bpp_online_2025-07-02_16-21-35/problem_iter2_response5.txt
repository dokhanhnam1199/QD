```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing heuristic-inspired component: prefer bins with enough space
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1

    # Best Fit heuristic-inspired component: prioritize bins with minimum wasted space
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf

    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 2

    # Capacity Utilization heuristic-inspired: Prefer using bins that are almost full, avoid empty bins
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins
    priorities += capacity_utilization

    # Penalize bins that are almost full but can't fit the item (to avoid tiny fragments)
    almost_full = (bins_remain_cap < item) & (bins_remain_cap > 0)
    priorities[almost_full] -= 0.5  # Slightly penalize almost full bins

    # Heavily penalize full bins to never pick them.
    priorities[bins_remain_cap == 0] = -np.inf
    
    #Bonus: Prefer to put items into bins that are already somewhat utilized, but not full
    already_used = (bins_remain_cap < np.max(bins_remain_cap)) & (bins_remain_cap > item) 
    priorities[already_used] += 0.1

    return priorities
```
