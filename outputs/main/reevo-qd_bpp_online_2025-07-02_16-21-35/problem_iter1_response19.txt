```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing heuristic inspired priority: Prefer bins that can fit the item with least wasted space
    waste = bins_remain_cap - item
    fit_mask = waste >= 0

    # Prioritize bins where the item fits, with smaller waste preferred.  Use a small constant to avoid division by zero if waste is zero.
    priorities[fit_mask] = 1.0 / (waste[fit_mask] + 0.0001)  # High priority for minimal waste

    # If item doesn't fit, penalize heavily based on how much the bin is under capacity.
    no_fit_mask = ~fit_mask
    priorities[no_fit_mask] = - (item - bins_remain_cap[no_fit_mask])  # Negative priority if it doesn't fit, higher magnitude for more overflow.


    # Bonus for nearly full bins after adding the item (inspired by Best Fit)
    nearly_full_mask = fit_mask & (waste < 0.1)  # Adjust 0.1 as needed based on problem scale
    priorities[nearly_full_mask] += 2.0 # Boost for almost full. The amount of boost can be another hyperparameter.

    # Small bias toward bins with more remaining capacity.  Breaks ties and potentially allows future larger items to fit.
    priorities += 0.01 * bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.0

    return priorities
```
