```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Eligibility: Prefer bins with enough space
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1.0  # Base priority to eligible bins

    # Wasted Space: Prioritize bins with minimum wasted space
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins where item doesn't fit.
    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 2.0  # Higher priority for minimal waste

    # Capacity Utilization: Prefer using bins that are almost full, but only if eligible
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins

    priorities += capacity_utilization

    # Avoid Full Bins: Never pick a bin that's already full.
    priorities[bins_remain_cap == 0] = -np.inf
    
    # Further improvement: Add a slight preference to bins that are closer to full *after* adding the item, but only among eligible bins
    post_fill_ratio = (bins_remain_cap[eligible_bins] - item) / bins_remain_cap[eligible_bins] if np.any(eligible_bins) else np.array([])
    if post_fill_ratio.size > 0:
        priorities[eligible_bins] -= np.abs(post_fill_ratio) * 0.5 # Prefer bins that become fuller after placement, but don't overemphasize

    # Penalize nearly full bins, but not full
    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap < 0.1) # Tune 0.1
    priorities[nearly_full] -= 0.75

    return priorities
```
