```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: eliminate bins that can't fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Set priority to negative infinity if not feasible
    priorities[bins_remain_cap == 0] = -np.inf  # Never pick a full bin

    # Minimize waste (Best Fit): prioritize bins with the least remaining space after placement
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf  # Ignore infeasible bins for waste calculation

    # Inverse Waste Heuristic: High priority for bins with low waste
    inverse_waste = 1 / (waste + 0.0001)  # Adding a small constant to avoid division by zero
    priorities[feasible_bins] += inverse_waste[feasible_bins]

    # Perfect Fit Bonus: Substantial bonus for filling bins completely
    perfect_fit = np.isclose(waste, 0)
    priorities[perfect_fit] += 10  # Significant bonus for perfect fit

    # Capacity Utilization: Favor bins that will be more full after placement
    capacity_utilization = item / (bins_remain_cap + 0.0001) # avoid divide by zero
    priorities[feasible_bins] += capacity_utilization[feasible_bins] * 2 # Increased Utilization Weight

    # Adjust for overall fill levels: penalize bins approaching full
    fill_levels = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # ratio between 0 and 1 representing fullness
    priorities[feasible_bins] -= fill_levels[feasible_bins] * 0.75 # Apply to feasible bins only
    return priorities
```
