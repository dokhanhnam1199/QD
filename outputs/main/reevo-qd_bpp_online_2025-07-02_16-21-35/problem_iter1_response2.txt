```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: If bin can't fit the item, priority is -inf.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    
    # 2. Best Fit: Prefer bins with remaining capacity closest to item size.
    #    Bins with less space are preferred.
    
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -np.abs(remaining_space)  # Smaller absolute difference = higher priority
    
    # 3. Small bins first to avoid fragmentations.

    priorities[feasible_mask] += bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)
    
    return priorities
```
