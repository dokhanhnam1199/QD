```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: bins that can fit the item get a base priority
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1

    # Best Fit component: minimize waste, but penalize excessive fragmentation
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Mark infeasible bins
    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 2

    # Fragmentation avoidance: penalize bins that would become almost empty after packing
    remaining_after_pack = bins_remain_cap - item
    almost_empty = (remaining_after_pack > 0) & (remaining_after_pack / np.max(bins_remain_cap) < 0.1) #Check for bins close to empty

    priorities[almost_empty] -= 1  # Penalize bins that become almost empty

    # Capacity Utilization: reward bins that have been used, but discourage perfect fills (fragmentation)
    capacity_used = 1 - (bins_remain_cap / np.max(bins_remain_cap)) #Calculate the remaining capacity
    priorities += capacity_used

    # Discourage almost full bins (to avoid too much fragmentation)
    almost_full = (bins_remain_cap > item) & ((bins_remain_cap - item) / np.max(bins_remain_cap) < 0.1) #Check bins close to full.

    priorities[almost_full] -= 0.5

    priorities[bins_remain_cap == 0] = -np.inf  # Never pick a full bin

    return priorities
```
