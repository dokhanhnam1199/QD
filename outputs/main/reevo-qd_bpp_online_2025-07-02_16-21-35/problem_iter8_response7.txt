```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Eligibility: Prefer bins with enough space
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1.0  # Base priority to eligible bins
    
    # Wasted Space: Prioritize bins with minimum wasted space
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins where item doesn't fit.
    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 2.0  # Higher priority for minimal waste

    # Capacity Utilization: Prefer using bins that are almost full, but only if eligible
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins

    priorities += capacity_utilization
    
    # Avoid Full Bins: Never pick a bin that's already full.
    priorities[bins_remain_cap == 0] = -np.inf
    
    # Post-fill Optimization: Encourage denser packing post-placement.
    # This focuses on improving packing density after the item is hypothetically placed.
    
    if np.any(eligible_bins):
        remaining_after_fit = bins_remain_cap[eligible_bins] - item
        fill_ratios = (bins_remain_cap[eligible_bins] - remaining_after_fit) / bins_remain_cap[eligible_bins] #fill ratio after placement

        priorities[eligible_bins] += fill_ratios * 0.75 # Scale down to not dominate other factors

    return priorities
```
