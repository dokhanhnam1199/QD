```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Bins that can't fit the item get a very low priority (negative infinity).
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf
    
    # Rule 2: Bins with smallest remaining capacity greater than item have highest priority (First Fit Decreasing heuristic idea)
    # This encourages filling up bins that are already somewhat full.
    
    
    # Option 1: Prioritize bins based on closeness to item size.  Smaller difference is better.
    
    feasible = bins_remain_cap >= item
    if np.any(feasible): #Only calculate if any feasible bin exist
        diffs = bins_remain_cap[feasible] - item
        priorities[feasible] = -diffs #Smaller difference has higher priority
        # Scale/shift for numerical stability and to make it matter more than Rule 3
        priorities[feasible] = 100 - diffs
    
    #Rule 3: Add small value to remaining capacity.
    priorities = priorities + 0.00001*bins_remain_cap
    
    
    return priorities
```
