```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give zero priority to bins that cannot fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Or a very large negative number

    # 2. Remaining Capacity: Prefer bins with smaller remaining capacity (but large enough for the item)
    #    This encourages filling bins completely.  Use a scaled inverse.

    feasible_bins = bins_remain_cap >= item
    remaining_capacity_priority = 1.0 / (bins_remain_cap[feasible_bins] + 1e-9) # Avoid division by zero
    priorities[feasible_bins] = remaining_capacity_priority
    
    # 3. Wasted Space: Penalize bins with too much remaining capacity after placing the item.
    #    Use a quadratic penalty to heavily penalize large wasted space.  Scale it down so it doesn't dominate.
    
    wasted_space = bins_remain_cap[feasible_bins] - item
    wasted_space_penalty = -0.1 * wasted_space**2
    priorities[feasible_bins] += wasted_space_penalty

    #4. Near fit bonus
    near_fit = (bins_remain_cap[feasible_bins] - item) < 0.1
    priorities[feasible_bins][near_fit] += 0.5  #Slightly prefer near fits.
    
    return priorities
```
