```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Eligibility check: Highest priority if item doesn't fit
    eligible_bins = bins_remain_cap >= item
    priorities[~eligible_bins] = -np.inf  # Disqualify ineligible bins immediately

    # First Fit component: Small incentive for using existing bins
    priorities[eligible_bins] += 0.5

    # Best Fit component: Prioritize bins with minimal waste, but penalize perfect fills
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ensure only eligible bins are considered

    perfect_fit = np.isclose(waste, 0)
    if np.any(perfect_fit):
      priorities[perfect_fit] -=0.1 #Slight penalty to perfect fits as last resort
      waste[perfect_fit] = np.inf #Do not consider perfect fills for min_waste

    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 2.0 #Significant priority to minimum waste bins


    # Capacity Utilization component: Encourage filling bins close to full
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0 #Consider eligible bins

    priorities += capacity_utilization

    # Post-fill ratio:  Discourage creating tiny remaining spaces
    remaining_ratio = waste / item
    remaining_ratio[~eligible_bins] = 0
    priorities -= np.clip(remaining_ratio * 0.5, 0, 0.5) #Small penalization to tiny space
    
    # Edge case handling
    priorities[bins_remain_cap == 0] = -np.inf  # Never pick a full bin.
    
    return priorities
```
