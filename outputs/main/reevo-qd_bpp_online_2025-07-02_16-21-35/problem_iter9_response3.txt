```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Ensure the item fits
    eligible_bins = bins_remain_cap >= item
    priorities[~eligible_bins] = -np.inf  # Disqualify infeasible bins
    
    # If no bins are eligible, return the initial priorities (all -inf for ineligible)
    if not np.any(eligible_bins):
        return priorities
    
    # 2. Minimize Waste (Best Fit): Prioritize bins with minimal remaining space
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ensure only feasible waste is considered
    min_waste = np.min(waste[eligible_bins]) # only compare waste in eligible bins
    best_fit_bins = np.isclose(waste, min_waste) & eligible_bins # Only select best fit from the eligible ones
    priorities[best_fit_bins] += 5  # High priority for best fit
    
    # 3. Maximize Capacity Utilization: Fill bins as much as possible
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0
    priorities += 2 * capacity_utilization # scale it to have more effect
    
    # 4. Fragmentation Avoidance/Perfect Fills: Reward bins that can be filled completely
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] += 10  # Very high priority for perfect fills
    
    # 5. Dynamic adjustment: Reduce priority for almost full bins to avoid small items being placed there
    almost_full = (bins_remain_cap > item) & (bins_remain_cap < 2*item)
    priorities[almost_full] -= 1  # Small penalty for almost full bins
    
    # 6. Penalize (but don't exclude, unless infeasible) bins that are already full.
    full_bins = bins_remain_cap == 0
    priorities[full_bins] = -np.inf

    return priorities
```
