```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Base priority for being able to fit

    # Higher priority for bins with tighter fit (smaller remaining capacity after packing)
    remaining_after_pack = bins_remain_cap[can_fit] - item
    priorities[can_fit] += 1 / (remaining_after_pack + 0.00001) # Adding small constant to avoid division by zero

    # Give some incentive to use emptier bins if we cannot find appropriate fit
    if not np.any(can_fit):
        priorities += (1/(bins_remain_cap + 0.00001))  # Add a small constant to prevent division by zero

    return priorities
```
