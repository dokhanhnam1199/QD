```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing (FFD) - like heuristic: prefer bins that can fit the item with smallest waste
    waste = bins_remain_cap - item
    can_fit = waste >= 0

    priorities[can_fit] = 1 / (waste[can_fit] + 0.000001)  # Avoid division by zero. Higher priority to smaller waste

    # Give small penalty to bins close to full capacity, to avoid completely full bins in later stages (optional)
    # priorites = priorites - (bins_remain_cap < item + 0.1)*0.001

    # Bonus for using almost empty bins to keep bin count low early (consider for First-Fit behavior)
    # priorities[bins_remain_cap > 0.9] = priorities[bins_remain_cap > 0.9] + 0.1
    
    #Very large items are problematic, so prioritize them in a bin close to their sizes
    ratios = np.abs(item / bins_remain_cap - 1)
    
    fit_indices = np.where(can_fit)[0]
    if(len(fit_indices) > 0):
        priorities[fit_indices] = priorities[fit_indices] + (1- ratios[fit_indices])*2 #Try matching the right bin, avoiding both wastage and lack of space, higher co-efficient
    

    return priorities
```
