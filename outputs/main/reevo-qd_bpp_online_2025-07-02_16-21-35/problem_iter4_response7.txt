```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Eligibility: Prioritize bins where the item fits
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 10  # Substantially higher priority for eligible bins

    # Waste Minimization: Prioritize bins with minimal remaining waste after placing the item
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Mark ineligible bins with infinite waste

    min_waste = np.min(waste[eligible_bins]) if np.any(eligible_bins) else np.inf
    best_fit_bins = np.isclose(waste, min_waste) & eligible_bins
    priorities[best_fit_bins] += 20  # Significant boost for best fit

    # Capacity Utilization: Incentivize filling bins close to capacity, but not too close to full.
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0
    priorities += 5 * capacity_utilization  # Moderate increase based on utilization

    # Avoid creating full bins unless necessary: Penalty for bins becoming exactly full
    almost_full_bins = np.isclose(waste, 0) & eligible_bins
    priorities[almost_full_bins] -= 10  # Larger penalty for creating full bins.

    # Slightly penalize bins that will be close to full, but not completely
    close_to_full_bins = (waste > 0) & (waste <= 0.1) & eligible_bins # e.g., waste <= 10% of bin size. Tunable
    priorities[close_to_full_bins] -= 2

    # Previously full bins are invalid
    priorities[bins_remain_cap == 0] = -np.inf
    
    # If no bins are eligible, slightly prefer bins with larger remaining capacity (least bad option)
    if not np.any(eligible_bins):
      priorities += bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
      
    return priorities
```
