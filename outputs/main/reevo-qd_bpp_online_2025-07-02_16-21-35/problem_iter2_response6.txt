```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic-inspired component: prefer bins with enough space
    # This encourages packing into bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1.0  # Give a base priority to eligible bins
    
    # Best Fit heuristic-inspired component: prioritize bins with minimum wasted space
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins where item doesn't fit.

    min_waste = np.min(waste) #Get the minimum waste.
    best_fit_bins = np.isclose(waste, min_waste) #Check each bin that satisfies the min_waste
    priorities[best_fit_bins] += 2.0  # Give high priority to bins with minimal waste

    # Capacity Utilization heuristic-inspired: Prefer using bins that are almost full, but penalize near-empty bins
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins
    priorities += capacity_utilization

    # Penalize near-empty bins to avoid spreading items too thinly.  Tune the threshold.
    near_empty = bins_remain_cap > 0.9  # Assuming bin capacity is 1, penalize if more than 90% remains.  Adjust threshold if capacity is different.
    priorities[near_empty] -= 0.5  # Reduce priority of near-empty bins

    # Small adjustments to enhance performance

    priorities[bins_remain_cap == 0] = -np.inf  # Never pick a bin that's already full.
    
    #Prioritize bins with smallest remain capacity after placing the item (within the eligible bins)
    remaining_capacity_after_placement = bins_remain_cap - item
    remaining_capacity_after_placement[~eligible_bins] = np.inf
    min_remaining_capacity = np.min(remaining_capacity_after_placement)
    smallest_remaining_capacity_bins = np.isclose(remaining_capacity_after_placement, min_remaining_capacity)
    priorities[smallest_remaining_capacity_bins] += 1.5 #Slight boost to the bins which gives smallest remaining capacity
    
    return priorities
```
