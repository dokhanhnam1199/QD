```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: prioritize bins where the item fits
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1  # Base priority for eligible bins

    # Best Fit Variation: Minimize waste, but penalize near-full bins
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins where item doesn't fit

    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 2  # Higher priority to best fit bins

    # Fragmentation Avoidance: Discourage near-full bins to reduce fragmentation
    near_full = (bins_remain_cap > item) & (bins_remain_cap - item < 0.1)  # Tune threshold (0.1)
    priorities[near_full] -= 0.5  # Penalize near-full bins slightly

    # Capacity Utilization: Reward higher utilization, but avoid perfect fills
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins
    priorities += capacity_utilization

    perfect_fit = np.isclose(waste, 0)
    priorities[perfect_fit] -= 0.25 #Slight penalty for perfect fits

    # Never pick a bin that's already full.
    priorities[bins_remain_cap == 0] = -np.inf

    return priorities
```
