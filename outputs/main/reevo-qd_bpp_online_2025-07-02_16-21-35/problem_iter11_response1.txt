```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: eliminate bins that can't fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Set priority to negative infinity if not feasible
    priorities[bins_remain_cap == 0] = -np.inf # Never pick a full bin

    # Minimize waste (Best Fit): prioritize bins with the least remaining space after placement
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf  # Ignore infeasible bins for waste calculation

    # Inverse Waste Priority - Key Metric
    inverse_waste = 1 / (waste + 0.0001)  # Adding a small constant to avoid division by zero
    priorities[feasible_bins] += inverse_waste[feasible_bins]

    # Perfect Fit Bonus
    perfect_fit = np.isclose(waste, 0)
    priorities[perfect_fit] += 10  # Larger bonus for perfect fit

    # Near Perfect Fit Bonus
    near_perfect_fit = (waste > 0) & (waste <= 0.1)  #Example, a waste less than 0.1
    priorities[near_perfect_fit] += 5 # Moderate bonus for near perfect fit

    # Dynamic adjustment based on remaining capacity relative to item size
    capacity_ratio = bins_remain_cap / (item + 0.0001)  # Normalize by item size to influence choice based on the item
    priorities[feasible_bins] += capacity_ratio[feasible_bins] * 0.2  # Scale down the impact

    # Penalize bins that will be very full after placement (high utilization)
    post_fill_utilization = (bins_remain_cap - waste) / (bins_remain_cap + waste) # utilization rate
    highly_filled = (waste > 0) & (post_fill_utilization > 0.95) # example, utilization rate > 0.95, avoid high fragmentation
    priorities[highly_filled] -= 3 # moderate penalty

    return priorities
```
