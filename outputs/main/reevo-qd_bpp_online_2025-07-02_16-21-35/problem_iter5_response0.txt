```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Eligibility Check: Highest priority if item fits
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 5  # Substantially higher base priority

    # Best Fit: Minimize waste, but avoid perfect fits
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    
    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    
    #Discourage Perfect fills
    perfect_fit_bins = np.isclose(waste,0)
    if np.any(eligible_bins) and np.sum(eligible_bins)>1: #Only penalize if other bins are avaliable
      priorities[perfect_fit_bins] -= 2
    

    priorities[best_fit_bins] += 3  # High priority for bins with minimal waste

    # Capacity Utilization: Encourage fuller bins
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0
    priorities += capacity_utilization * 2 # Scale capacity utilization

    # Post-fill Ratio: Prioritize bins that will have high fill ratio *after* adding the item
    post_fill_ratio = (bins_remain_cap - item) / 1 if np.isscalar(item) else (bins_remain_cap - item) /1 # assuming bin size is 1
    post_fill_ratio[~eligible_bins] = -1 # Penalize if not eligible
    priorities += post_fill_ratio # Post-fill ratio to priorities


    # Edge Cases: Never pick a full bin
    priorities[bins_remain_cap == 0] = -np.inf

    return priorities
```
