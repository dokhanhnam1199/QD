```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a high priority to bins where the item fits comfortably,
    # but not too comfortably (avoiding extreme fragmentation).
    fit_indices = np.where(bins_remain_cap >= item)[0]
    for i in fit_indices:
        remaining_after_fit = bins_remain_cap[i] - item
        # Give highest priority if the remaining space after fitting is a small fraction of bin capacity.
        # This encourages filling bins reasonably well.
        fill_ratio = item / bins_remain_cap[i]

        # Prioritize bins that are neither too full nor too empty after placing the item
        if 0.1 <= fill_ratio <= 0.9:  # Avoid extremes
            priorities[i] = 1 + fill_ratio  # A bin with perfect item/capacity match gets higher priority

        elif fill_ratio > 0.9:  # Prefer nearly full bins
            priorities[i] = 0.5 + fill_ratio

        else: #fill_ratio < 0.1:  Avoid placing in nearly empty bin
            priorities[i] = 0.1 + fill_ratio

    # If no bin can fit the item, assign a very low priority
    # to prevent placement in any bin by default (this scenario shouldn't normally occur).
    if np.all(bins_remain_cap < item):
        priorities[:] = -100  # Very low priority if it doesn't fit

    return priorities
```
