```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Prioritize bins that can fit the item
            remaining_space = cap - item
            
            # Strategy 1:  Maximize remaining space utilization (avoid fragmentation)
            # priorities[i] = item / cap  # Fill ratio

            # Strategy 2: Balance fill level (moderately full bins are preferred)
            fill_level = 1 - (remaining_space / cap)
            priorities[i] = fill_level * (1-abs(fill_level - 0.5)) # Prefer values closer to 0.5.

            # Strategy 3: Minimize wasted space if the bin is close to full
            # priorities[i] = cap - item
            
            #Strategy 4: Hybrid approach: combines fill ratio with remaining space, emphasizing closer fits.
            #priorities[i] = (item / cap) + np.exp(-10 * remaining_space)

            #Strategy 5: Penalize bins that result in very small remaining space
            if remaining_space < 0.1:
                priorities[i] *= 0.5 # reduce the priority to disincentivize it, avoiding very small remaining capacities

        else:
            # Cannot fit, so no priority
            priorities[i] = -np.inf

    return priorities
```
