```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: eliminate bins that can't fit the item or are full
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Set priority to negative infinity if not feasible
    priorities[bins_remain_cap == 0] = -np.inf # Never pick a full bin

    # Minimize waste (Best Fit): prioritize bins with the least remaining space after placement
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf  # Ignore infeasible bins for waste calculation
    priorities[feasible_bins] += (10 / (waste[feasible_bins] + 0.0001)) # Much higher priority to minimize waste.

    # Maximize capacity utilization
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~feasible_bins] = 0 # ignore infeasible bins
    priorities[feasible_bins] += 2 * capacity_utilization[feasible_bins] # high utilization, high priority, increased weight

    # Avoid fragmentation / Perfect fills: add a HUGE bonus for filling bins completely
    perfect_fit = np.isclose(waste, 0)
    priorities[perfect_fit] += 20  # HUGE bonus for perfect fit

    # Dynamic adjustment based on remaining capacity: adjust priorities based on how full the bins are
    average_capacity = np.mean(bins_remain_cap[bins_remain_cap > 0])  # Avoid empty bins
    if average_capacity > 0:
        capacity_ratio = bins_remain_cap / average_capacity
        priorities += capacity_ratio * 1  # Increase weight based on average capacity, increased influence
   
    # Further encourage filling near-full bins
    near_full = (bins_remain_cap > 0) & (bins_remain_cap <= 2 * item) #Bins smaller than twice the item size are preferred
    priorities[near_full] += 5

    return priorities
```
