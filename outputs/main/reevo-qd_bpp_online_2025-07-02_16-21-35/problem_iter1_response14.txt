```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1

    # Adjust priority based on remaining capacity after placing item
    remaining_after_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] += (1 - (remaining_after_fit / bins_remain_cap[can_fit])) # Prioritize bins with lower resulting wasted space
    # Introduce some noise to avoid always choosing the same bin.

    # For bins that cannot fit, assign a negative priority
    priorities[~can_fit] = -np.inf # Very low priority

    return priorities
```
