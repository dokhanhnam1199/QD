```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Eligibility: Prefer bins with enough space
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1  # Give a base priority to eligible bins
    
    # Waste Minimization: Prioritize bins with minimum wasted space (Best Fit)
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins where item doesn't fit.
    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 2  # Higher priority for best fit
    
    # Capacity Utilization: Prefer bins that would be almost full
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins
    priorities += capacity_utilization

    # Additional Heuristics:
    # 1. Prioritize bins that are already somewhat full (but can still fit the item).
    # This encourages using bins that have already been started.
    already_full = (bins_remain_cap < 2 * item) & eligible_bins  #Adjust the factor 2.
    priorities[already_full] += 0.5

    # 2. Penalize bins that would become nearly empty after adding the item.
    nearly_empty = (waste > 0) & (waste < 0.1)  # Adjust the threshold 0.1
    priorities[nearly_empty] -= 0.3

    priorities[bins_remain_cap == 0] = -np.inf  # Never pick a bin that's already full.
    return priorities
```
