```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Big Enough: Prioritize bins that can accommodate the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Almost Full: Prioritize bins that are nearly full after adding the item. This encourages filling bins completely.
    almost_full = (bins_remain_cap - item) <= 0.1  # Tolerance of 0.1, can be tuned
    priorities[can_fit & almost_full] += 2.0

    # Leftover Space: Penalize bins with very large leftover space. This helps avoid fragmentation. Only consider for the ones where it can fit.
    large_leftover = (bins_remain_cap - item) > (0.5 * bins_remain_cap) # tunable param 0.5
    priorities[can_fit & large_leftover] -= 0.5

    #Remaining Capacity. Preferentially load higher capacity bins.
    priorities[can_fit] += bins_remain_cap[can_fit] / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
    
    # If no bins can accommodate, assign all 0 priority
    if not np.any(can_fit):
        return np.zeros_like(bins_remain_cap)
    
    return priorities
```
