```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Eligibility: Item must fit in the bin
    eligible_bins = bins_remain_cap >= item

    # First Fit Decreasing component: Base priority for eligible bins
    priorities[eligible_bins] += 1

    # Best Fit component: Prioritize bins with minimal waste
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins where item doesn't fit

    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 2  # Higher priority for best fit

    # Capacity Utilization component: Encourage filling bins efficiently
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins for utilization calculation
    priorities += capacity_utilization

    # Adjustments for performance:

    # Prefer bins with smallest remaining capacity among eligible bins
    smallest_cap_eligible = np.min(bins_remain_cap[eligible_bins], initial=np.inf)
    smallest_cap_bins = np.isclose(bins_remain_cap, smallest_cap_eligible) & eligible_bins
    priorities[smallest_cap_bins] += 1.5  #Give higher priority to bins with the smallest capacity available.

    # Penalize almost full bins if item is small relative to bin size
    almost_full = (bins_remain_cap > item) & (bins_remain_cap < 1.2 * item) #Consider "almost full" if the remaining capacity is only a bit more than the item size
    priorities[almost_full] += 0.75 #Slightly encourage filling bins that are "almost full."
    
    # Never pick a full bin
    priorities[bins_remain_cap == 0] = -np.inf

    return priorities
```
