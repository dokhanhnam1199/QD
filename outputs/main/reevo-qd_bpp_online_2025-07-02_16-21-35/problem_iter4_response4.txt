```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing heuristic component: prefer bins with enough space
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1

    # Best Fit heuristic component: prioritize bins with minimum wasted space
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 3 # Higher priority than First Fit

    # Capacity Utilization heuristic: Prefer using bins that are almost full, but only consider feasible bins
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0
    priorities += capacity_utilization * 2  # Weighting capacity utilization

    # Small adjustments and constraints:
    priorities[bins_remain_cap == 0] = -np.inf  # Never pick a full bin

    # Slightly prefer bins with larger remaining capacity if multiple bins are suitable, to avoid fragmentation
    # Only for bins where the item fits
    priorities[eligible_bins] += bins_remain_cap[eligible_bins] / np.max(bins_remain_cap) * 0.5

    return priorities
```
