```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: eliminate bins that can't fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Set priority to negative infinity if not feasible
    priorities[bins_remain_cap == 0] = -np.inf # Never pick a full bin

    # Minimize waste (Best Fit): prioritize bins with the least remaining space after placement
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf  # Ignore infeasible bins for waste calculation
    # Use a scaled inverse of waste, adding a small constant to avoid division by zero
    priorities[feasible_bins] += 10 / (waste[feasible_bins] + 0.01)  # Higher priority for lower waste
    

    # Maximize capacity utilization
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~feasible_bins] = 0 # ignore infeasible bins
    priorities[feasible_bins] += 5 * capacity_utilization[feasible_bins]  # Higher priority for high utilization

    # Reward Perfect fits
    perfect_fit = np.isclose(waste, 0)
    priorities[perfect_fit] += 20  # Substantial bonus for perfect fit

    # Dynamic adjustment based on average remaining capacity
    avg_remaining_capacity = np.mean(bins_remain_cap[feasible_bins]) if np.any(feasible_bins) else 0

    if avg_remaining_capacity > 0:
        capacity_ratio = bins_remain_cap / avg_remaining_capacity
        priorities += 2 * capacity_ratio #Scale the value

    # Prioritize almost full bins to complete them
    almost_full = feasible_bins & (bins_remain_cap < 2 * item) #check bins are feasible and less than twice the item size.
    priorities[almost_full] += 5

    return priorities
```
