{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First Fit Decreasing heuristic-inspired component: prefer bins with enough space\n    # This encourages packing into bins that can accommodate the item\n    eligible_bins = bins_remain_cap >= item\n    priorities[eligible_bins] += 1  # Give a base priority to eligible bins\n    \n    # Best Fit heuristic-inspired component: prioritize bins with minimum wasted space\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf  # Ignore bins where item doesn't fit.\n\n    min_waste = np.min(waste) #Get the minimum waste.\n    best_fit_bins = np.isclose(waste, min_waste) #Check each bin that satisfies the min_waste\n    priorities[best_fit_bins] += 2  # Give high priority to bins with minimal waste\n\n    # Capacity Utilization heuristic-inspired: Prefer using bins that are almost full, but not too full (avoid very small remaining capacity)\n    capacity_utilization = item / bins_remain_cap\n    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins\n\n    # Add a penalty for bins that will have very small remaining capacity after placing the item\n    nearly_full_penalty = np.zeros_like(bins_remain_cap, dtype=float)\n    nearly_full_bins = (bins_remain_cap - item) <= 0.1  #If remaining capacity is less than 0.1, penalize\n    nearly_full_penalty[nearly_full_bins & eligible_bins] = -0.5 #Slightly reduce priority\n\n    priorities += capacity_utilization + nearly_full_penalty\n    \n    #Small adjustments to enhance performance\n\n    priorities[bins_remain_cap == 0] = -np.inf  #Never pick a bin that's already full.\n\n    #Prioritize bins that have already had items placed in them, without overfilling.\n\n    already_used_bins = (bins_remain_cap < 1) & eligible_bins #Assume bin capacity is 1.  Bins less than 1 but eligible.\n    priorities[already_used_bins] += 0.75\n    \n    return priorities\n\n[Reflection]\nThe better code uses multiple heuristics (first fit, best fit, capacity utilization) with adjustments and penalties for improved performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}