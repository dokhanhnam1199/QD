```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing heuristic inspired priority: prefer bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Give higher priority to bins where the item fills a significant portion
    # Avoids creating bins with tiny amounts of free space
    fill_ratios = item / bins_remain_cap
    priorities[can_fit] += fill_ratios[can_fit]

    # Penalize bins that will have very little space remaining after placing the item
    remaining_after_placement = bins_remain_cap - item
    very_small_remaining = remaining_after_placement < 0.1 #tune threshold
    priorities[~very_small_remaining] += 0.5

    # Add a small amount of random noise to break ties
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
