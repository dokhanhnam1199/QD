```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Eligibility: Filter bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1  # Base priority for eligible bins

    # Waste Minimization: Prioritize bins with minimal wasted space
    waste = bins_remain_cap - item
    waste[~eligible_bins] = np.inf  # Ignore ineligible bins for waste calculation

    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 2  # Higher priority for minimal waste

    # Capacity Utilization: Favor bins that will be reasonably full, but not too full
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins
    priorities += capacity_utilization

    # Avoid creating full bins: Penalize bins that will become full after adding the item.
    almost_full_bins = np.isclose(bins_remain_cap, item)
    priorities[almost_full_bins] -= 0.5 # Reduce priority
    
    #Edge case handling: Never pick full bins
    priorities[bins_remain_cap == 0] = -np.inf  # Never pick a bin that's already full.

    # Small random noise to break ties:
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001
        
    return priorities
```
