```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Must fit
    eligible_bins = bins_remain_cap >= item
    priorities[~eligible_bins] = -np.inf  # Infeasible bins get lowest priority

    # Best Fit Variation: Minimize waste, but avoid near-perfect fits
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Should be redundant given prior check, but ensures safety

    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 5  # Substantially boost best-fit

    #Fragmentation Avoidance: Discourage very small remaining space
    small_space = (waste > 0) & (waste <= 0.1) # e.g. remaining space is less than or equal to 0.1
    priorities[small_space] -= 3 #Penalize creating very small spaces

    # Capacity Utilization: Reward higher utilization
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0

    priorities += 2*capacity_utilization  #Moderate reward for higher utilization

    # Discourage Perfect Fills (can lead to fragmentation later)
    perfect_fit = np.isclose(waste, 0)
    priorities[perfect_fit] -= 1 #Slight penalty for perfect fits
    
    #Avoid selecting a full bin at all costs.
    priorities[bins_remain_cap == 0] = -np.inf

    return priorities
```
