```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary Criterion: Prefer bins where the item fits
            remaining_space = cap - item
            # Secondary Criterion: Fill bins as much as possible (minimize remaining space).
            # Give higher priority to bins with smaller remaining space after packing the item.
            priorities[i] = 1.0 / (remaining_space + 0.0001)  # Adding a small constant to avoid division by zero
        else:
            # Very low priority if item does not fit
            priorities[i] = -1000.0  # Arbitrarily low number

    return priorities
```
