```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Priority 1: Bins where item fits
    fit_indices = np.where(bins_remain_cap >= item)[0]
    priorities[fit_indices] += 1

    # Further prioritize based on remaining capacity AFTER adding the item
    remaining_after_fit = bins_remain_cap[fit_indices] - item
    
    # Prioritize bins where the remaining capacity is close to 0 (but not negative - already handled by fit_indices)
    priorities[fit_indices] += np.exp(-10 * remaining_after_fit / np.max(bins_remain_cap)) # Exponential decay

    # Prioritize bins that can fit the item *well* by minimizing wasted space
    priorities[fit_indices] += 1 / (remaining_after_fit + 0.0001) # Inverse of wasted space, avoid division by zero

    # If no bin can fit, assign a small priority based on how "close" the bin is to fitting.
    no_fit_indices = np.where(bins_remain_cap < item)[0]
    if len(no_fit_indices) > 0:
        priorities[no_fit_indices] = (bins_remain_cap[no_fit_indices] / item) * 0.01  # Give small non-zero priority if the bin is near full.

    return priorities
```
