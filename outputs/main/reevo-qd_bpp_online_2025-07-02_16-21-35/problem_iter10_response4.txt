```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic-inspired component: prefer bins with enough space
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1  # Give a base priority to eligible bins
    
    # Best Fit heuristic-inspired component: prioritize bins with minimum wasted space
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins where item doesn't fit.

    min_waste = np.min(waste) #Get the minimum waste.
    best_fit_bins = np.isclose(waste, min_waste) #Check each bin that satisfies the min_waste
    priorities[best_fit_bins] += 2  # Give high priority to bins with minimal waste

    # Capacity Utilization heuristic-inspired: Prefer using bins that are almost full, but not too full (avoid very small remaining capacity)
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins

    # Add a penalty for bins that will have very small remaining capacity after placing the item
    nearly_full_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    nearly_full_bins = (bins_remain_cap - item) <= 0.1  #If remaining capacity is less than 0.1, penalize
    nearly_full_penalty[nearly_full_bins & eligible_bins] = -0.5 #Slightly reduce priority

    priorities += capacity_utilization + nearly_full_penalty
    
    #Small adjustments to enhance performance

    priorities[bins_remain_cap == 0] = -np.inf  #Never pick a bin that's already full.

    #Prioritize bins that have already had items placed in them, without overfilling.

    already_used_bins = (bins_remain_cap < 1) & eligible_bins #Assume bin capacity is 1.  Bins less than 1 but eligible.
    priorities[already_used_bins] += 0.75

    # Introduce a bonus for bins that are neither too empty nor nearly full. This balances utilization.
    mid_range_bins = (bins_remain_cap > item + 0.1) & (bins_remain_cap < 0.9) & eligible_bins #Added 'eligible_bins' condition to ensure mid-range bins can fit item.
    priorities[mid_range_bins] += 0.5

    # Add a small random component to break ties and potentially explore different bin configurations.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    
    return priorities
```
