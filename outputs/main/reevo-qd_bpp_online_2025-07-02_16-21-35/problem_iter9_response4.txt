```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility Check:  Bins that can't fit the item get a negative priority
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf 
    priorities[bins_remain_cap == 0] = -np.inf  #Never pick a bin that's already full.

    #Minimize waste: prioritize bins where wasted space is minimized
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf # ignore infeasible bins
    priorities[feasible_bins] += (1 / (waste[feasible_bins] + 0.0001)) # Higher priority for lower waste

    #Maximize capacity utilization
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~feasible_bins] = 0 # ensure only feasible bins are considered
    priorities += capacity_utilization

    #Avoid fragmentation/Perfect Fills: Give a bonus to bins nearing full capacity after placement of the item
    remaining_after_fit = bins_remain_cap - item
    perfect_fit_bonus = np.exp(-np.abs(remaining_after_fit)/0.1) # gives bonus close to zero
    priorities += perfect_fit_bonus

    #Dynamic Adjustment of Heuristic Priorities based on bin fill level
    bin_fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap)) #Normalize for meaningful numbers
    priority_adjustment = np.clip(bin_fullness, 0, 1) #Between 0 and 1

    priorities += priority_adjustment

    return priorities
```
