```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: bins that can't fit the item get a priority of -inf
    eligible_bins = bins_remain_cap >= item
    priorities[~eligible_bins] = -np.inf

    # Initial priority boost for eligible bins
    priorities[eligible_bins] += 1

    # Waste calculation: amount of space wasted if item is placed in the bin
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Assign infinite waste if the item doesn't fit

    # Prioritize bins with smaller waste
    min_waste = np.min(waste[eligible_bins]) if np.any(eligible_bins) else np.inf  # Get min waste among eligible bins
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 3  # Higher priority for best fit

    # Capacity utilization: how much of the bin's capacity will be used
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins for utilization

    # Add capacity utilization to the priority, scaling it to avoid dominating other factors
    priorities += capacity_utilization * 2

    # Discourage perfect fills slightly (can lead to fragmentation)
    perfect_fit = np.isclose(waste, 0)
    priorities[perfect_fit] -= 0.75

    # Post-fill ratio: remaining capacity after placing the item, relative to the bin size
    post_fill_ratio = (bins_remain_cap - item) / bins_remain_cap
    post_fill_ratio[~eligible_bins] = 0  # Ignore ineligible bins

    # Give slight preference to bins that will have a good post-fill ratio, scaling it
    priorities += post_fill_ratio * 1.0

    # Avoid already full bins
    priorities[bins_remain_cap == 0] = -np.inf

    # Slightly prefer bins with higher remaining capacity to group smaller items together later.
    priorities += bins_remain_cap / np.max(bins_remain_cap) * 0.2 if np.max(bins_remain_cap) > 0 else 0

    # Introduce a bin count penalty: Prefer using existing bins before opening new ones.
    # This is done by penalizing bins with capacity close to the original bin capacity.
    bin_size = np.max(bins_remain_cap)  # Assuming all bins have the same initial capacity.
    if bin_size > 0:
        new_bin_threshold = 0.95 * bin_size  # Define a threshold for considering a bin "new".
        new_bin_penalty = -0.5  # Define the penalty for "new" bins.
        new_bins = bins_remain_cap >= new_bin_threshold
        priorities[new_bins] += new_bin_penalty

    return priorities
```
