```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary priority: Can the item fit? If so, how much space will be left?
            remaining_space = cap - item
            # Give higher priority to bins that leave less wasted space (FirstFit-like)
            priorities[i] = 1 / (remaining_space + 0.0001)  # Avoid division by zero
            # Bonus for bins that are nearly full (BestFit-like). This helps fill bins more completely.
            if remaining_space < 0.1 * cap:
                priorities[i] *= 2
        else:
            # Negative priority if item doesn't fit
            priorities[i] = -1000 # Arbitrary large negative number

    return priorities
```
