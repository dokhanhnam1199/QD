```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: Highest priority for bins that can fit the item
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 10  # Substantially higher base priority

    # Minimize Waste: Best Fit-inspired, but only among feasible bins
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Effectively exclude infeasible bins
    
    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste) & eligible_bins  # Consider eligibility
    priorities[best_fit_bins] += 5

    # Maximize Capacity Utilization: Use remaining space efficiently
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins

    priorities += 2 * capacity_utilization #Scale it.

    # Perfect Fill Bonus: avoid fragmentations
    perfect_fill = np.isclose(bins_remain_cap, item)
    priorities[perfect_fill] += 7

    # Penalize Full Bins: Avoid selecting them at all
    priorities[bins_remain_cap == 0] = -np.inf

    # Dynamic Adjustment: Adjust heuristic priorities based on avg remaining capacity
    avg_remaining_cap = np.mean(bins_remain_cap[bins_remain_cap > 0])
    
    if avg_remaining_cap < 0.3: #If bins are filling up.
      # Prioritize Best Fit more, be conservative with space
      priorities[best_fit_bins] += 3
    elif avg_remaining_cap > 0.7:
      #Encourage the algorithm to use the bins.
      priorities += capacity_utilization #Enhance Capacity utilization

    return priorities
```
