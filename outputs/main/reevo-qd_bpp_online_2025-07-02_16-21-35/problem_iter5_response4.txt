```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Eligibility: First, ensure the item fits
    eligible_bins = bins_remain_cap >= item
    if not np.any(eligible_bins):
        return priorities #Return all zeros if it doesn't fit in any bin.
    priorities[eligible_bins] += 1

    # Waste Minimization (Best Fit): Minimize remaining space after packing
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Treat invalid bins as having infinite waste
    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 2

    # Capacity Utilization: Maximize the utilization of the bin
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0
    priorities += capacity_utilization

    # Discourage Perfect Fills: slight penalty to discourage perfect fills.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] -= 0.1  #Slightly reduce the score.

    # Post-Fill Ratio: Encourage bins that will have a good fill ratio *after* adding the item.
    post_fill_ratio = (bins_remain_cap - item) / bins_remain_cap
    post_fill_ratio[~eligible_bins] = 0
    priorities += post_fill_ratio * 0.5

    # Never Pick Full Bins: Ensure we don't pick bins with zero remaining capacity
    priorities[bins_remain_cap == 0] = -np.inf

    return priorities
```
