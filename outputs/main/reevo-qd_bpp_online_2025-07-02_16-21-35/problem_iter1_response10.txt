```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin.
    waste = bins_remain_cap - item

    # Assign high priority to bins where the item fits.
    fit_indices = waste >= 0
    priorities[fit_indices] = bins_remain_cap[fit_indices] / (waste[fit_indices] + 1e-9)  # Avoid division by zero
    
    # Penalize bins where the item doesn't fit
    no_fit_indices = waste < 0
    priorities[no_fit_indices] = -np.inf

    # Add a small bonus for bins that are almost full (to encourage closing bins).
    almost_full_indices = (bins_remain_cap > 0) & (bins_remain_cap <= 2 * item)
    priorities[almost_full_indices] += 1 # Added small bonus

    return priorities
```
