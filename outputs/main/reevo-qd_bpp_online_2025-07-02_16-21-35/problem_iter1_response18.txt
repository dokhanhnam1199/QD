```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing heuristic inspiration: prioritize bins that can fit the item
    # Prioritize bins that have remaining capacity closest to the item size.
    # If a bin can't fit, assign a very low priority

    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf  # Very low priority if it can't fit. Important!

    # For bins that can fit, calculate the wasted space. Smaller waste is better.
    waste = bins_remain_cap[can_fit] - item
    priorities[can_fit] = -waste # Prioritize less waste, or if item fills bins nicely

    #Add bonus for near full bins (maximize utilization) after packing.
    utilization_after_pack = (bins_remain_cap[can_fit]-item) / bins_remain_cap[can_fit] #Fraction used if packed
    priorities[can_fit] += (1 - utilization_after_pack) * 5 #Give preference to bins that will be more fully utilized.
    return priorities
```
