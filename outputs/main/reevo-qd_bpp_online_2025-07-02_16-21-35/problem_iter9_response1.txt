```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility Check (Highest Priority)
    eligible_bins = bins_remain_cap >= item
    priorities[~eligible_bins] = -np.inf  # Infeasible bins get negative infinity

    # If no bin is feasible, return the array (all -inf)
    if not np.any(eligible_bins):
        return priorities

    # 2. Minimize Waste (Best Fit)
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ensure only feasible bins are considered in waste calculation
    min_waste = np.min(waste[eligible_bins])  # Find minimum waste among eligible bins
    best_fit_bins = np.isclose(waste, min_waste) & eligible_bins
    priorities[best_fit_bins] += 5  # Substantially reward best fit among feasible bins


    # 3. Maximize Capacity Utilization (Among feasible bins)
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Only consider feasible bins
    priorities += capacity_utilization * 2  # Weigh capacity utilization


    # 4. Perfect Fill Bonus (Avoid Fragmentation)
    perfect_fill_bins = np.isclose(waste, 0) & eligible_bins
    priorities[perfect_fill_bins] += 10  # Big bonus for perfect fills


    # 5. Penalty for near-full bins (Discourage leaving tiny fragments)
    near_full_threshold = 0.1  # Define "near full" as having <= 10% capacity remaining
    near_full_bins = (bins_remain_cap > 0) & (bins_remain_cap < item + near_full_threshold) & eligible_bins
    priorities[near_full_bins] -= 3  # Slight penalty

    return priorities
```
