```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Eligibility check: only consider bins that can fit the item
    eligible_bins = bins_remain_cap >= item
    
    # If no bin is eligible, return a low priority for all bins
    if not np.any(eligible_bins):
        return priorities

    priorities[eligible_bins] += 1  # Base priority for eligible bins

    # Minimize waste (Best Fit component): prioritize bins with the least remaining space after placing the item
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Mark ineligible bins with infinite waste
    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste) #Check each bin that satisfies the min_waste
    priorities[best_fit_bins] += 2  # Higher priority for bins with minimal waste

    # Maximize Capacity Utilization: prioritize bins that will be close to full after placing the item
    post_fill_ratio = (bins_remain_cap[eligible_bins] - item) / bins_remain_cap[eligible_bins] #How full would the bin be after adding the item?
    #Avoid near-perfect fits
    almost_full = np.isclose(post_fill_ratio,0)
    priorities[eligible_bins][almost_full] -= 1
    
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  #Exclude ineligible bins
    priorities += capacity_utilization
    
    #Discourage perfect fits
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] -= 0.5

    priorities[bins_remain_cap == 0] = -np.inf  # Never pick a bin that's already full.

    return priorities
```
