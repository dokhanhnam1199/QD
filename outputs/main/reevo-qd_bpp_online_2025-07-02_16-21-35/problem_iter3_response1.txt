```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Eligibility check: must fit
    eligible_bins = bins_remain_cap >= item
    if not np.any(eligible_bins):
        # If no bin is eligible, assign a very negative priority so a new bin will be created
        return -np.ones_like(bins_remain_cap) * np.inf
    priorities[eligible_bins] += 1  # Base priority for eligible bins

    # Waste minimization (Best Fit): prioritize bins with minimal wasted space
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins where item doesn't fit

    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 3  # Higher priority for best fit
    
    # Capacity utilization: Prioritize bins with high relative fill after placement.
    # Avoid creating full bins; leave a small buffer. The buffer size is set to 0.1 of the bin size.
    buffer = 0.1
    almost_full = (bins_remain_cap - item) <= buffer and (bins_remain_cap >= item)
    priorities[almost_full] -= 2 #Slightly discourage nearly full bins. If other factors push it up, then let it be.

    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Only consider eligible bins
    priorities += capacity_utilization * 2 #Weight it to make it more significant.
    

    # Avoid full bins at all costs (unless forced to)
    priorities[bins_remain_cap == 0] = -np.inf

    return priorities
```
