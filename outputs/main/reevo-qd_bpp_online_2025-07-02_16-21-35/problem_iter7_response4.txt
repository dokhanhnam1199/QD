```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility Check: Disqualify bins that can't fit the item
    eligible_bins = bins_remain_cap >= item
    priorities[~eligible_bins] = -np.inf

    # Best Fit with Waste Minimization: Prioritize bins with least remaining space after placement
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Set negative waste to infinity for infeasible bins

    #Find the minimum waste
    min_waste = np.min(waste)

    #Get the bins with minimum waste
    best_fit_bins = np.isclose(waste, min_waste)

    priorities[best_fit_bins] += 5 #Increased weight for Best Fit

    # Encourage High Capacity Utilization (but avoid perfect fills)
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0 #Only valid bins
    priorities += 2 * capacity_utilization  #Add capacity utilization reward

    # Fragmentation Avoidance: Penalize bins that would become sparsely filled
    remaining_after_fit = bins_remain_cap - item
    fragmentation_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    fragmentation_penalty[(remaining_after_fit > 0) & (remaining_after_fit < 0.1)] = -3 #Penalize small remaining space.
    priorities += fragmentation_penalty

    #Avoid filling a bin perfectly
    perfect_fit_bins = np.isclose(remaining_after_fit, 0)
    priorities[perfect_fit_bins] -= 1

    return priorities
```
