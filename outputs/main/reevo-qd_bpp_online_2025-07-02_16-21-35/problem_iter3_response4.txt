```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Eligibility: Prioritize bins where the item fits.
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1

    # Waste Minimization: Prioritize bins that minimize wasted space, but only among eligibile bins.
    waste = bins_remain_cap - item
    waste[~eligible_bins] = np.inf  #Consider non-eligible bins to have infinite waste

    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 2

    # Capacity Utilization: Prioritize using bins that become almost full.  Focus on eligibile bins.
    capacity_utilization = np.zeros_like(bins_remain_cap, dtype=float) #Only calculated if it fits.
    remaining_after_fit = bins_remain_cap[eligible_bins] - item
    almost_full_bins = (remaining_after_fit >=0) & (remaining_after_fit <= 0.1) #Tuning point: bins with remain capacity smaller than 0.1 are treated as nearly full
    
    indices = np.where(eligible_bins)[0][almost_full_bins]  #Eligible indices that will result in nearly full bins.

    priorities[indices] += 3  # Higher priority to these nearly-full bins

    #Discourage creating bins with small waste
    small_waste_bins = (waste > 0) & (waste <= 0.2) #Tuning point: discourage creating waste smaller than 0.2
    priorities[small_waste_bins] -= 1 #Discourage this situation.
    
    # Never pick full bins
    priorities[bins_remain_cap == 0] = -np.inf

    return priorities
```
