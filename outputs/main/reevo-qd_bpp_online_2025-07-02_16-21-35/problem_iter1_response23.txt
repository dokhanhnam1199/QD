```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # First Fit Decreasing-like heuristic: Prefer bins with just enough space.
            # Avoid fragmentation by rewarding bins that are close in size to the item.
            priority = (cap - item) / cap  # Smaller diff gives larger priority

            # Additionally prioritize bins with high utilization after placement.
            priority += item / 1.0 if cap > 0 else 0.0 # give some additional reward if the current item is added

            priorities[i] = priority
        else:
            priorities[i] = -1e9  # Very low priority if item doesn't fit
    return priorities
```
