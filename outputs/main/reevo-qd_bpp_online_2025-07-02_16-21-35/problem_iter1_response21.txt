```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: Assign -inf priority to bins that cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf
    
    # 2. Best Fit heuristic: Prioritize bins with smallest remaining capacity after adding the item.
    remaining_after_fit = bins_remain_cap - item
    
    # Avoid zero or negative remaining capacities after assigning
    valid_indices = bins_remain_cap >= item
    priorities[valid_indices] = -np.abs(remaining_after_fit[valid_indices])
    
    # 3. Prioritize almost full bins to prevent fragmentation. Add small constant
    almost_full = (bins_remain_cap >= item) & (remaining_after_fit < 0.1)
    priorities[almost_full] += 1  # A small reward for almost full bins
    
    # 4. Large bins remain less untouched if small items available.
    large_bins = (bins_remain_cap >= item) & (bins_remain_cap > 0.75) #arbitrary amount. Tunable
    priorities[large_bins] -= 0.05 # Small penalty so that very large ones aren't always preferred.
    return priorities
```
