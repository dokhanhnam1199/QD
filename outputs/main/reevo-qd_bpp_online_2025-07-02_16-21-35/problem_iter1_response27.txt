```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing heuristic inspired priority: Prefer bins where the item fits best
    fit_scores = bins_remain_cap - item
    
    # Prioritize bins that can accommodate the item (positive fit_scores)
    valid_bins_mask = fit_scores >= 0
    
    # For bins where the item fits, give higher priority to bins with less remaining space
    priorities[valid_bins_mask] = 1 / (fit_scores[valid_bins_mask] + 0.00001) # Avoid division by zero

    # Apply small bias to nearly full bins.
    nearly_full_mask = (bins_remain_cap > 0.00001) & (bins_remain_cap < item*1.1)
    priorities[nearly_full_mask] *= 1.1 #slightly boost near-fit items


    # Add a bonus for bins that were previously used.  This encourages filling bins
    # before starting new ones.  This would have to be informed externally for each bins to work well
    # but for now assumes all bins were previously ununsed so this functionality isn't implemented

    return priorities
```
