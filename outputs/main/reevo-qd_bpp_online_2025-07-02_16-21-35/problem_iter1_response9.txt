```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: First-Fit Decreasing-ish
    # Prioritize bins that can fit the item with minimal remaining space
    can_fit = bins_remain_cap >= item
    if np.any(can_fit):
        residual_space = bins_remain_cap[can_fit] - item
        priorities[can_fit] = 1.0 / (1e-6 + residual_space) # avoid division by zero

    # Heuristic 2: Avoid Fragmentation
    # If an item nearly fills a bin, prioritize filling it completely
    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap < item + 0.1) # allows for small differences
    priorities[nearly_full] += 10.0

    # Heuristic 3: Penalize bins that are already nearly full but can't fit item (high fragmentation risk)
    cant_fit_but_nearly_full = (bins_remain_cap < item) & (bins_remain_cap > 0)
    priorities[cant_fit_but_nearly_full] -= 5.0  # Lower the score drastically

    # Heuristic 4: Add a small random component to break ties and encourage exploration
    priorities += np.random.rand(len(bins_remain_cap)) * 0.1

    return priorities
```
