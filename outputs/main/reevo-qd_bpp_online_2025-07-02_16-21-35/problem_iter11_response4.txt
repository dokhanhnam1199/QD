```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: eliminate bins that can't fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Set priority to negative infinity if not feasible
    priorities[bins_remain_cap == 0] = -np.inf # Never pick a full bin

    # Minimize waste (Best Fit): prioritize bins with the least remaining space after placement
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf  # Ignore infeasible bins for waste calculation
    
    # Inverse Waste
    inverse_waste = 1 / (waste + 0.0001)  # Adding a small constant to avoid division by zero
    inverse_waste[~feasible_bins] = 0
    priorities += inverse_waste

    # Capacity utilization
    capacity_utilization = item / (bins_remain_cap + 0.0001) #avoid div by 0
    capacity_utilization[~feasible_bins] = 0
    priorities += capacity_utilization

    # Perfect fills
    perfect_fit = np.isclose(waste, 0)
    priorities[perfect_fit] += 10  # Increased perfect fit bonus

    # Dynamic Adjustment: Encourage filling bins closer to the average fill level
    average_fill = np.mean(np.where(bins_remain_cap>0, 1 - bins_remain_cap / np.max(bins_remain_cap),0 )) #avg fill level
    fill_levels = np.where(bins_remain_cap>0,1 - bins_remain_cap / np.max(bins_remain_cap),0)
    
    fill_level_diff = np.abs(fill_levels - average_fill)
    priority_adjustment = -fill_level_diff * 2
    priorities += priority_adjustment
    

    return priorities
```
