```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic-inspired component: prefer bins with enough space
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1  # Give a base priority to eligible bins
    
    # Best Fit heuristic-inspired component: prioritize bins with minimum wasted space
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins where item doesn't fit.

    min_waste = np.min(waste)
    best_fit_bins = np.isclose(waste, min_waste)
    priorities[best_fit_bins] += 2  # Give high priority to bins with minimal waste

    # Capacity Utilization heuristic-inspired: Prefer using bins that are almost full
    capacity_utilization = item / bins_remain_cap
    capacity_utilization[~eligible_bins] = 0  # Ignore ineligible bins
    priorities += capacity_utilization

    # Additional Heuristics:

    # 1. Prefer bins that are not too empty after placing the item. Avoid extreme fragmentation.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = np.inf  #ignore bins where item does not fit

    # Normalize remaining capacity to bin size for better comparison
    normalized_remaining = remaining_after_fit / np.max(bins_remain_cap) #avoid division by zero
    
    # Give a bonus if the bin is neither too full nor too empty after adding the item
    mid_range_bins = (normalized_remaining > 0.1) & (normalized_remaining < 0.8)
    priorities[mid_range_bins] += 0.5
    
    # 2. Penalize bins that are almost full, but not enough (reduces creation of almost empty new bins)
    almost_full = (bins_remain_cap > item) & (bins_remain_cap < 1.2 * item)
    priorities[almost_full] -= 0.3 #slight penalty

    # 3. Prioritize bins with the largest remaining capacity if no other bins are suitable
    no_suitable_bin = not np.any(eligible_bins)
    if no_suitable_bin:
        max_remaining = np.max(bins_remain_cap)
        largest_bins = np.isclose(bins_remain_cap, max_remaining)
        priorities[largest_bins] += 0.1  # slight preference to largest bins.

    # Never pick a bin that's already full.
    priorities[bins_remain_cap == 0] = -np.inf

    return priorities
```
