import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, avg_distance_weight: float = 0.46953791674931444, degree_penalty_exponent: float = 2.041880359676786, sparsification_percentile: float = 83.64859026595335, avg_distance_threshold_factor: float = 1.0630157038082455, small_constant: float = 3.973675828617147e-06) -> np.ndarray:
    """
    Combines inverse distance, node degree penalty, and sparsification for TSP.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    avg_distance = np.mean(distance_matrix[distance_matrix != 0])

    node_degrees = np.sum(distance_matrix < (avg_distance * avg_distance_threshold_factor), axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty = (node_degrees[i] + node_degrees[j])**degree_penalty_exponent # Exponent for stronger penalty
                heuristics[i, j] = (1 / (distance_matrix[i, j] + small_constant)) / (1 + (degree_penalty * (distance_matrix[i, j]/avg_distance) * avg_distance_weight))

            else:
                heuristics[i, j] = 0

    # Sparsification: keep only top edges for each node
    for i in range(n):
        row = heuristics[i, :]
        threshold = np.percentile(row[row > 0], sparsification_percentile) # Only consider positive values
        heuristics[i, row < threshold] = 0

    return heuristics
