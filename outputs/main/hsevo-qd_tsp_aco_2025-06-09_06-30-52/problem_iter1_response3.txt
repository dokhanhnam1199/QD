```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem (TSP).
    This function generates prior indicators of how promising it is to
    include each edge in a solution. It considers factors such as:
        - Inverse distance (shorter distances are generally better)
        - Node degree (penalize nodes with high degree connections)
        - Closeness to centroid (edges connecting to nodes near the centroid are better)
        - Random perturbations
    """
    n = distance_matrix.shape[0]

    # 1. Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Avoid division by zero

    # 2. Node degree heuristic
    degree_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        degree_penalty[i, :] = np.sum(inverse_distance[i, :]) # Total 'attractiveness' of connections
        degree_penalty[:, i] = np.sum(inverse_distance[:, i])
    degree_penalty = 1.0 / (degree_penalty + 1e-9) # Prefer edges connected to lower degree nodes

    # 3. Centroid heuristic
    # Compute the centroid of the points (assuming distance matrix implies x/y coordinates roughly)
    centroid = np.mean(np.arange(n)) #approximate location in 1D - better to feed in x,y coords if available

    centroid_distance = np.abs(np.arange(n) - centroid)
    centroid_distance_matrix = np.zeros_like(distance_matrix)
    for i in range(n):
        centroid_distance_matrix[i, :] = centroid_distance
        centroid_distance_matrix[:, i] = centroid_distance

    centroid_attraction = 1.0 / (centroid_distance_matrix + 1e-9)

    # Combine heuristics with weights (experiment with these!)
    alpha = 0.6
    beta = 0.2
    gamma = 0.2

    heuristic_matrix = alpha * inverse_distance + beta * degree_penalty + gamma * centroid_attraction #np.random.rand(n,n)*0.01 #+ np.random.rand(n, n) * 0.01


    # Ensure symmetry (important for TSP)
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    return heuristic_matrix
```
