import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, avg_distance_weight: float = 0.7784632366596427, small_constant: float = 7.321355061367179e-10) -> np.ndarray:
    """
    Combines inverse distance with node degree penalty to avoid subtours.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    avg_distance = np.mean(distance_matrix[distance_matrix != 0])

    node_degrees = np.sum(distance_matrix < avg_distance, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty = (node_degrees[i] + node_degrees[j])
                heuristics[i, j] = (1 / (distance_matrix[i, j] + small_constant)) / (1 + (degree_penalty * (distance_matrix[i, j]/avg_distance) * avg_distance_weight))
            else:
                heuristics[i, j] = 0

    return heuristics
