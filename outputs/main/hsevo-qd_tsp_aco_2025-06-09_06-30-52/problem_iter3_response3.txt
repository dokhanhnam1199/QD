```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node degree penalty, and a sparsification strategy.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    avg_distance = np.mean(distance_matrix[distance_matrix != 0])
    small_constant = 1e-9

    node_degrees = np.sum(distance_matrix < avg_distance, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty = (node_degrees[i] + node_degrees[j])
                heuristics[i, j] = (1 / (distance_matrix[i, j] + small_constant)) / (1 + (degree_penalty * (distance_matrix[i, j]/avg_distance)))
            else:
                heuristics[i, j] = 0

    # Sparsification: Remove edges with very low heuristic values relative to the best
    max_heuristic = np.max(heuristics)
    threshold = 0.01 * max_heuristic  # Only keep edges with heuristic value >= 1% of the max
    heuristics[heuristics < threshold] = 0

    #Adaptive adjustment based on local neighborhood
    for i in range(n):
        neighbors = np.argsort(distance_matrix[i,:])[:5] #consider top 5 nearest neighbors
        for j in range(n):
            if heuristics[i,j] > 0: #only adjust existing edges
                if j not in neighbors:
                    heuristics[i,j] *= 0.75 #slight penalty if not in neighborhood.

    return heuristics
```
