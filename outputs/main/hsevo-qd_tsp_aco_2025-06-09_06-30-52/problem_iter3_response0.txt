```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance with node degree penalty and a local search inspired factor.
    Sparsifies the matrix by setting unpromising elements to zero.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    avg_distance = np.mean(distance_matrix[distance_matrix != 0])
    small_constant = 1e-9

    node_degrees = np.sum(distance_matrix < avg_distance * 1.5, axis=1)  # Adjusted degree threshold
    degree_penalty_exponent = 1.5  # Tunable exponent for degree penalty

    for i in range(n):
        for j in range(n):
            if i != j:
                # Degree penalty based on average distance
                degree_penalty = (node_degrees[i] + node_degrees[j]) ** degree_penalty_exponent
                
                # Local search inspired factor: favors edges that connect to distant nodes
                neighbor_distances_i = distance_matrix[i, :]
                neighbor_distances_j = distance_matrix[j, :]

                # Avoid including self in calculation
                neighbor_distances_i[i] = np.inf
                neighbor_distances_j[j] = np.inf
                
                # Encourage edges connecting to distant/unvisited nodes. Higher value is better.
                local_search_factor = np.mean(np.partition(neighbor_distances_i, 5)[:5]) + np.mean(np.partition(neighbor_distances_j, 5)[:5]) 

                heuristics[i, j] = (1 / (distance_matrix[i, j] + small_constant)) / (1 + (degree_penalty * (distance_matrix[i, j]/avg_distance))) * (local_search_factor/avg_distance)
            else:
                heuristics[i, j] = 0

    # Sparsify: remove edges with very low heuristic value
    threshold = np.quantile(heuristics[heuristics > 0], 0.25)  # Adjust sparsification quantile
    heuristics[heuristics < threshold] = 0

    return heuristics
```
