```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A more sophisticated heuristic for the Traveling Salesman Problem.
    Combines inverse distance with a "nearness" factor to favor edges
    connecting nodes that are relatively close to many other nodes.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate a "nearness" score for each node
    nearness = np.sum(1 / (distance_matrix + 1e-9), axis=1)  # Adding small value to avoid division by zero.

    for i in range(n):
        for j in range(n):
            if i != j:
                # Heuristic combines inverse distance and the product of nearness scores
                heuristic_matrix[i, j] = (1 / (distance_matrix[i, j] + 1e-9)) * (nearness[i] * nearness[j])
            else:
                heuristic_matrix[i, j] = 0  # No self-loops

    return heuristic_matrix
```
