```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node degree penalty, sparsification,
    and a novel cycle-breaking incentive for TSP.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    avg_distance = np.mean(distance_matrix[distance_matrix != 0])
    small_constant = 1e-6
    avg_distance_weight = 0.5
    degree_weight = 1.5
    cycle_break_weight = 0.75  # Adjust for cycle breaking.
    sparsification_threshold = 85 #Increased slightly

    node_degrees = np.sum(distance_matrix < (avg_distance * 1.5), axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty = (node_degrees[i] + node_degrees[j]) ** degree_weight
                #Cycle-breaking incentive.  Favors longer edges, but less so if already high degree
                cycle_incentive = (distance_matrix[i, j] / avg_distance) * (1 / (1 + degree_penalty)) * cycle_break_weight

                heuristics[i, j] = (1 / (distance_matrix[i, j] + small_constant)) / (
                            1 + (degree_penalty * (distance_matrix[i, j] / avg_distance) * avg_distance_weight)) + cycle_incentive

            else:
                heuristics[i, j] = 0

    # Sparsification: keep only top edges for each node
    for i in range(n):
        row = heuristics[i, :]
        threshold = np.percentile(row[row > 0], sparsification_threshold)  # Only consider positive values
        heuristics[i, row < threshold] = 0

    return heuristics
```
