```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node degree penalty, and nearest neighbor preference with sparsification.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    avg_distance = np.mean(distance_matrix[distance_matrix != 0])
    small_constant = 1e-9

    # Node degree penalty (similar to v1, but potentially adjusted)
    node_degrees = np.sum(distance_matrix < avg_distance * 1.5, axis=1)  # Adjusted threshold

    # Nearest neighbor preference
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # Top 3 nearest neighbors
    nearest_neighbor_bonus = np.zeros_like(distance_matrix)
    for i in range(n):
        for neighbor in nearest_neighbors[i]:
            nearest_neighbor_bonus[i, neighbor] = 1.0

    for i in range(n):
        for j in range(n):
            if i != j:
                # Base heuristic: inverse distance
                base_heuristic = 1 / (distance_matrix[i, j] + small_constant)

                # Degree penalty
                degree_penalty = (node_degrees[i] + node_degrees[j])
                degree_factor = 1 / (1 + (degree_penalty * (distance_matrix[i, j] / avg_distance)))

                # Combine factors
                heuristics[i, j] = base_heuristic * degree_factor * (1 + 0.5 * nearest_neighbor_bonus[i, j]) #Added nearest_neighbor_bonus

            else:
                heuristics[i, j] = 0

    # Sparsification: Remove less promising edges to reduce solution space
    threshold = np.percentile(heuristics[heuristics > 0], 60) # Adjusted percentile
    heuristics[heuristics < threshold] = 0
    # Heuristics that are not nearest neighbors have a higher threshold.
    for i in range(n):
      for j in range(n):
        if i!=j and heuristics[i,j] > 0 and nearest_neighbor_bonus[i,j] == 0:
          threshold_non_nearest = np.percentile(heuristics[heuristics > 0], 80)
          if heuristics[i,j] < threshold_non_nearest:
            heuristics[i, j] = 0
    return heuristics
```
