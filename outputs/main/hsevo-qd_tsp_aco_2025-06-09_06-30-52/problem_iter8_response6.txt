```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, degree penalty, sparsification, and local adjustment.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    avg_distance = np.mean(distance_matrix[distance_matrix != 0])
    small_constant = 1e-6
    avg_distance_weight = 0.5

    node_degrees = np.sum(distance_matrix < (avg_distance * 1.5), axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty = (node_degrees[i] + node_degrees[j])**1.5
                heuristics[i, j] = (1 / (distance_matrix[i, j] + small_constant)) / (1 + (degree_penalty * (distance_matrix[i, j]/avg_distance) * avg_distance_weight))

                local_neighbors = np.sum(distance_matrix[i, :] < (distance_matrix[i, j] * 1.2)) + np.sum(distance_matrix[j, :] < (distance_matrix[j, i] * 1.2))
                heuristics[i,j] /= (1 + (local_neighbors * 0.1))
            else:
                heuristics[i, j] = 0

    for i in range(n):
        row = heuristics[i, :]
        threshold = np.percentile(row[row > 0], 75)
        heuristics[i, row < threshold] = 0

    distance_threshold = np.percentile(distance_matrix[distance_matrix != 0], 25)
    for i in range(n):
        for j in range(n):
          if distance_matrix[i,j] > distance_threshold and heuristics[i,j] > 0:
             heuristics[i,j] *= 0.5

    return heuristics
```
