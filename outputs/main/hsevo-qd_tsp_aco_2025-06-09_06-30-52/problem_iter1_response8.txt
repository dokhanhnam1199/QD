```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on a combination of factors, aiming to identify promising edges.

    This version considers:
    1. Inverse distance (shorter edges are preferred).
    2. A "connectivity" bias: nodes that are relatively isolated should be connected earlier.
       This is approximated by considering the sum of distances from a node to all others.
    3. A node importance factor.

    Args:
        distance_matrix: A numpy array representing the distance matrix for the TSP.

    Returns:
        A numpy array of the same shape as distance_matrix, representing heuristic values
        for each edge. Higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # 2. Connectivity bias: punish isolated nodes. Shorter total distance to other nodes is favored
    node_connectivity = np.sum(distance_matrix, axis=1)
    # Normalize connectivity for each node to a range [0, 1] with the best connection
    normalized_connectivity = (np.max(node_connectivity) - node_connectivity) / (np.max(node_connectivity) - np.min(node_connectivity) + 1e-9)


    # Create a matrix where each entry i,j has the combined connection indicator of nodes i and j
    connectivity_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
      for j in range(n):
        connectivity_matrix[i, j] = normalized_connectivity[i] + normalized_connectivity[j]


    # 3. Node importance (degree centrality estimation): connect nodes with low estimated degree first

    # Combine the factors. Weighting allows adjusting the importance of each factor.
    weight_distance = 0.6
    weight_connectivity = 0.4


    heuristics = weight_distance * inverse_distance + weight_connectivity * connectivity_matrix


    return heuristics
```
