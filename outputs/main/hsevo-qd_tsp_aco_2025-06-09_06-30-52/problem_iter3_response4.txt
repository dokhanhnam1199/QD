```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node degree penalty, and triangle inequality
    to improve TSP solution sampling. Also sparsifies the matrix.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    avg_distance = np.mean(distance_matrix[distance_matrix != 0])
    small_constant = 1e-9

    node_degrees = np.sum(distance_matrix < avg_distance * 1.5, axis=1) #increased threshold

    for i in range(n):
        for j in range(n):
            if i != j:
                # Degree penalty
                degree_penalty = (node_degrees[i] + node_degrees[j])

                # Triangle inequality component
                triangle_inequality = 0
                for k in range(n):
                    if k != i and k != j:
                        triangle_inequality += max(0, distance_matrix[i, j] - (distance_matrix[i, k] + distance_matrix[k, j]))
                
                # Combine factors
                heuristics[i, j] = (1 / (distance_matrix[i, j] + small_constant)) / (1 + (degree_penalty * (distance_matrix[i, j]/avg_distance))) - (triangle_inequality / avg_distance)

            else:
                heuristics[i, j] = 0

    # Sparsify: remove edges with very low heuristic values
    threshold = np.quantile(heuristics[heuristics > 0], 0.2) # Only keep top 80% values
    heuristics[heuristics < threshold] = 0

    return heuristics
```
