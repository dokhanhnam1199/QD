```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A heuristic function for the Traveling Salesman Problem (TSP) that leverages
    a combination of inverse distance, node degree, and a stochastic element
    to guide the search for a good solution.

    Args:
        distance_matrix (np.ndarray): A square matrix where entry (i, j) represents
                                      the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
                      entry (i, j) represents the desirability of including
                      the edge between node i and node j in the TSP tour.  Higher
                      values indicate more desirable edges.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance component:  Shorter distances are more desirable.
    inverse_distance = 1.0 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # Node degree component:  Prioritize edges connecting to nodes with fewer connections made so far,
    # encouraging exploration and preventing premature closure of subtours. This is initially uniform.

    #Stochastic Component: Adding some randomness to encourage exploration
    random_component = np.random.rand(n, n) * 0.1  # Small random values

    heuristics = inverse_distance + random_component

    #Mask the diagnal elements of the distance matrix to avoid self-loops
    np.fill_diagonal(heuristics, 0)

    return heuristics
```
