{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\nCurrent heuristics:\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines inverse distance, node degree penalty, and sparsification for TSP.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n    avg_distance = np.mean(distance_matrix[distance_matrix != 0])\n    small_constant = 1e-6\n    avg_distance_weight = 0.5\n\n    node_degrees = np.sum(distance_matrix < (avg_distance * 1.5), axis=1)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                degree_penalty = (node_degrees[i] + node_degrees[j])**1.5 # Exponent for stronger penalty\n                heuristics[i, j] = (1 / (distance_matrix[i, j] + small_constant)) / (1 + (degree_penalty * (distance_matrix[i, j]/avg_distance) * avg_distance_weight))\n\n            else:\n                heuristics[i, j] = 0\n\n    # Sparsification: keep only top 20% edges for each node\n    for i in range(n):\n        row = heuristics[i, :]\n        threshold = np.percentile(row[row > 0], 80) # Only consider positive values\n        heuristics[i, row < threshold] = 0\n\n    return heuristics\n\nNow, think outside the box write a mutated function `heuristics_v2` better than current version.\nYou can use some hints below:\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's redefine \"Current self-reflection\" to be more effective for designing heuristics, keeping your generous tip in mind!\n\n*   **Keywords:** Iterative refinement, problem-specific knowledge, constraint integration, global perspective, solution landscape.\n*   **Advice:** Start with a basic heuristic, then iteratively refine it by incorporating constraints, considering global solution properties, and adapting based on the solution landscape.\n*   **Avoid:** Sole reliance on immediate edge costs, neglecting global solution structure, premature optimization, ignoring problem-specific insights.\n*   **Explanation:** Effective self-reflection means systematically improving a heuristic by learning from both successful and failed iterations, considering a broader context, and deeply understanding problem constraints.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}