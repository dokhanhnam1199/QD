```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, adaptive node degree penalty, and dynamic sparsification.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    avg_distance = np.mean(distance_matrix[distance_matrix != 0])
    small_constant = 1e-6
    avg_distance_weight = 0.5
    degree_penalty_exponent = 1.5
    sparsification_percentile = 80

    node_degrees = np.sum(distance_matrix < (avg_distance * 1.5), axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty = (node_degrees[i] + node_degrees[j])**degree_penalty_exponent
                heuristics[i, j] = (1 / (distance_matrix[i, j] + small_constant)) / (1 + (degree_penalty * (distance_matrix[i, j]/avg_distance) * avg_distance_weight))
            else:
                heuristics[i, j] = 0

    # Dynamic Sparsification: adaptive percentile based on node degree
    for i in range(n):
        row = heuristics[i, :]
        # Adjust percentile based on how congested the node is.
        adjusted_percentile = sparsification_percentile + (100 - sparsification_percentile) * (node_degrees[i] / n)

        threshold = np.percentile(row[row > 0], adjusted_percentile) # Only consider positive values
        heuristics[i, row < threshold] = 0

    return heuristics
```
