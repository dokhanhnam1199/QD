```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Tesla's Improved Heuristic for TSP: Prioritizes short edges and penalizes edges connected to distant nodes.

    This heuristic aims to guide a stochastic TSP solver by providing prior indicators of
    how promising each edge is.  It combines a measure of edge length with a node
    "congestion" factor.  Edges connected to nodes that are far from other nodes
    are penalized, reflecting the intuition that these nodes are likely to be bottlenecks
    requiring inefficient connections.

    Args:
        distance_matrix (np.ndarray): A square, symmetric NumPy array representing the
            distances between nodes. distance_matrix[i, j] gives the distance between
            node i and node j.

    Returns:
        np.ndarray: A NumPy array of the same shape as distance_matrix, containing the
            heuristic values for each edge. Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Node congestion penalty:  Nodes with larger average distance to all other nodes get penalized.
    node_congestion = np.mean(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:  # Avoid self-loops
                # Base heuristic: Inverse distance
                heuristic = 1 / distance_matrix[i, j]

                # Apply node congestion penalty.  Penalize edges connected to nodes that are distant from others.
                # A smaller `alpha` makes the influence of the node congestion larger
                alpha = 0.1 #Adjustable Hyperparameter

                heuristic -= alpha * (node_congestion[i] + node_congestion[j])

                heuristic_matrix[i, j] = heuristic
            else:
                heuristic_matrix[i, j] = 0  # No self-loops

    # Ensure non-negativity and normalize to [0, 1] (optional, but helpful)
    heuristic_matrix = np.clip(heuristic_matrix, 0, None)  # No negative heuristics
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic  # Scale to [0, 1]

    return heuristic_matrix
```
