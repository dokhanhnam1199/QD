```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristics combining distance, degree, cycle prevention, and adaptive sparsification for TSP.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    avg_distance = np.mean(distance_matrix[distance_matrix != 0])
    small_constant = 1e-6
    avg_distance_weight = 0.5
    degree_weight = 0.7

    node_degrees = np.sum(distance_matrix < (avg_distance * 1.5), axis=1)

    # Adaptive sparsification parameters
    sparsification_threshold = 80  # Initial threshold
    sparsification_decay = 0.05      # Decay rate for the threshold
    min_threshold = 20               # Minimum threshold value

    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty = (node_degrees[i] + node_degrees[j])**1.5
                heuristics[i, j] = (1 / (distance_matrix[i, j] + small_constant)) / (1 + (degree_penalty * (distance_matrix[i,j]/avg_distance) * avg_distance_weight))

            else:
                heuristics[i, j] = 0

    # Sparsification: keep only top edges for each node, adaptively adjusted
    for i in range(n):
        row = heuristics[i, :]
        threshold = np.percentile(row[row > 0], sparsification_threshold)  # Consider only positive values

        heuristics[i, row < threshold] = 0

        #Adaptive Sparsification
        degree_i = np.sum(heuristics[i, :] > 0)
        if degree_i > 5:  #If too many edges keep the node connected
            sparsification_threshold = max(min_threshold, sparsification_threshold - sparsification_decay) #Reduce sparsification by reducing threshold
        elif degree_i < 2 and sparsification_threshold < 95:
            sparsification_threshold = min(95, sparsification_threshold + sparsification_decay * 2)  #Less sparse
    return heuristics
```
