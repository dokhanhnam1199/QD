{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\nCurrent heuristics:\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines inverse distance, degree penalty, sparsification with dynamic adjustment.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n    avg_distance = np.mean(distance_matrix[distance_matrix != 0])\n    small_constant = 1e-6\n    avg_distance_weight = 0.5\n\n    node_degrees = np.sum(distance_matrix < (avg_distance * 1.5), axis=1)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                degree_penalty = (node_degrees[i] + node_degrees[j])**1.5\n                heuristics[i, j] = (1 / (distance_matrix[i, j] + small_constant)) / (1 + (degree_penalty * (distance_matrix[i, j]/avg_distance) * avg_distance_weight))\n\n                local_neighbors = np.sum(distance_matrix[i, :] < (distance_matrix[i, j] * 1.2)) + np.sum(distance_matrix[j, :] < (distance_matrix[j, i] * 1.2))\n                heuristics[i,j] /= (1 + (local_neighbors * 0.1))\n            else:\n                heuristics[i, j] = 0\n\n    for i in range(n):\n        row = heuristics[i, :]\n        threshold = np.percentile(row[row > 0], 75)\n        heuristics[i, row < threshold] = 0\n\n    distance_threshold = np.percentile(distance_matrix[distance_matrix != 0], 25)\n    for i in range(n):\n        for j in range(n):\n          if distance_matrix[i,j] > distance_threshold and heuristics[i,j] > 0:\n             heuristics[i,j] *= 0.5\n\n    return heuristics\n\nNow, think outside the box write a mutated function `heuristics_v2` better than current version.\nYou can use some hints below:\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's redefine \"Current self-reflection\" focusing on actionable insights for better heuristic design, avoiding the pitfalls of vague suggestions.\n\nHere's a refined perspective, tailored for effective heuristic development:\n\n*   **Keywords:** Iterative refinement, problem-specific knowledge, multi-objective factors, dynamic adaptation.\n*   **Advice:** Start with a simple baseline heuristic. Iteratively add complexity based on *quantifiable* problem characteristics (e.g., degree distribution skewness). Experiment with multi-objective optimization incorporating constraints directly.\n*   **Avoid:** Vague directives like \"incorporate local factors.\" Instead, define *specific* local factors and *how* they will be used.\n*   **Explanation:** Effective heuristics are built through a cycle of implementation, experimentation, and data-driven refinement, not abstract intuition. Focus on measurable improvements with each iteration.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}