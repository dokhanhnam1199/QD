```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node degree penalty, and sparsification.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    avg_distance = np.mean(distance_matrix[distance_matrix != 0])
    small_constant = 1e-9
    avg_distance_weight = 0.1 #Scale factor for the distance penalty in degree calculation
    degree_penalty_exponent = 2 #Adjust exponent on degree penalty.
    sparsification_threshold = 0.2 # Percentage of edges to keep.

    node_degrees = np.sum(distance_matrix < avg_distance * 1.5, axis=1) #Adjust node degree threshold to `avg_distance * 1.5`

    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty = (node_degrees[i] + node_degrees[j])
                heuristics[i, j] = (1 / (distance_matrix[i, j] + small_constant)) / (1 + (degree_penalty**degree_penalty_exponent * (distance_matrix[i, j]/avg_distance) * avg_distance_weight))
            else:
                heuristics[i, j] = 0

    # Sparsification
    flattened_heuristics = heuristics.flatten()
    threshold = np.quantile(flattened_heuristics[flattened_heuristics > 0], sparsification_threshold) #Compute threshold based on non-zero values
    heuristics[heuristics < threshold] = 0

    return heuristics
```
