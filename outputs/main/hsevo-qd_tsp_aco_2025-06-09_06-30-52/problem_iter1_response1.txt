```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem based on a combination
    of inverse distance, nearest neighbor considerations, and randomness.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the
                                       distance between cities.
                                       distance_matrix[i][j] is the distance
                                       between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values for each edge. Higher
                    values indicate a more promising edge.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance component
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add small constant to avoid division by zero

    # Nearest neighbor component
    nearest_neighbors = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        # Find the nearest neighbors for each city
        neighbors = np.argsort(distance_matrix[i])[1:4]  # Exclude itself (distance 0) and take top 3 nearest
        for neighbor in neighbors:
            nearest_neighbors[i, neighbor] = 1.0  # or any other meaningful positive number

    # Randomness component
    random_component = np.random.rand(n, n) * 0.1  # Small random values to introduce stochasticity

    # Combine components
    heuristics = inverse_distance + 0.5 * nearest_neighbors + random_component  # Adjust weights as needed
    heuristics = (heuristics + heuristics.T)/2 # Ensure symmetry

    return heuristics
```
