```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using Softmax-Based Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin: how much space is left after adding the item
    fit_scores = np.maximum(0, bins_remain_cap - item)

    # Use a softmax function to convert the fit scores into probabilities
    # A temperature parameter is used to control the "softness" of the probabilities
    temperature = 1.0  # Adjust as needed. Higher temp = more exploration.

    # Apply softmax function
    exp_fit_scores = np.exp(fit_scores / temperature)
    priorities = exp_fit_scores / np.sum(exp_fit_scores)

    return priorities
```
