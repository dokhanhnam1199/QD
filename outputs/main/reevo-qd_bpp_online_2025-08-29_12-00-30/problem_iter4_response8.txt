```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a weighted combination of Inverse Distance and Fill Ratio.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Inverse Distance (proximity fit)
    distances = np.abs(bins_remain_cap - item)
    distances = np.where(distances == 0, 1e-6, distances)
    inverse_distance = 1.0 / distances

    # Fill Ratio (encourages using bins that are already partially full)
    fill_ratio = bins_remain_cap / 1.0  # Assuming bin capacity is 1.0; adjust if needed

    # Weighted combination (adjust weights as needed)
    priority = 0.7 * inverse_distance + 0.3 * fill_ratio

    return priority
```
