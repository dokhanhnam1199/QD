```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    distances = np.abs(bins_remain_cap[valid_bins] - item)
    distances = np.where(distances == 0, 1e-6, distances)
    inverse_distance = 1.0 / (distances + 1e-6)  # Add small value to avoid division by zero

    fullness = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
    fullness_score = np.log(1.0 + 1.0 / (1.0 - fullness))  # Log-scaled fullness
    
    # Blend best-fit exploitation with decaying randomness
    randomness = np.random.rand(len(valid_bins)) * 0.1  # Controlled randomness
    
    priorities[valid_bins] = 0.6 * inverse_distance + 0.4 * fullness_score + randomness
    
    return priorities
```
