```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    # Exact fit gets highest priority
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    if len(exact_fit_bins) > 0:
        priorities[exact_fit_bins] = 1e9  # A very high priority

    # For other bins, use a combination of inverse remaining capacity and item density
    remaining_after_placement = bins_remain_cap[valid_bins] - item
    item_density = item  # Density is just the item size in this context

    # Avoid division by zero
    safe_remaining_after_placement = np.where(remaining_after_placement > 0, remaining_after_placement, 1e-6)

    # Sharpened sigmoid to favor nearly-full bins. A higher value indicates higher priority
    sigmoid_values = 1 / (1 + np.exp(-10 * (bins_remain_cap[valid_bins] - item) / item))

    # Combine priority scores
    priorities[valid_bins] = sigmoid_values

    return priorities
```
