```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities

    distances = bins_remain_cap[valid_bins] - item
    exact_fit = (distances == 0).astype(float) * 10  # High priority for exact fits
    
    # Sigmoid function for fit preference
    fit_score = 1 / (1 + np.exp(-5 * (bins_remain_cap[valid_bins] - item)))
    
    fullness = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
    
    # Prefer bins around 70% full - Gaussian-like score
    fullness_score = np.exp(-((fullness - 0.7)**2) / (2 * 0.1**2))
    
    # Item-size aware exploration
    exploration = np.random.rand(len(valid_bins)) * (0.2 / (item + 1)) # Larger item, less exploration
    
    priorities[valid_bins] = (0.4 * fit_score + 0.4 * fullness_score + exact_fit + 0.2 * exploration)
    return priorities
```
