```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        diffs = bins_remain_cap[valid_bins] - item
        # Prioritize tighter fits
        priorities[valid_bins] = -diffs

        # Bonus for fuller bins
        priorities[valid_bins] += 1.0 / (bins_remain_cap[valid_bins] + 1e-6)

        # Small penalty for bins with very high remaining capacity (avoid empty bins)
        priorities[valid_bins] -= 0.1 * (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))

        # Add a small amount of randomness for exploration
        noise = np.random.rand(len(bins_remain_cap)) * 0.01
        priorities = priorities + noise

    else:
        # Penalize all bins if no bin can fit the item
        priorities[:] = -10

    return priorities
```
