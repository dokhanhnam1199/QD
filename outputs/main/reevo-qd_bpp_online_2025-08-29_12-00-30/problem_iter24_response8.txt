```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    diffs = bins_remain_cap - item
    valid_bins = diffs >= 0

    if np.any(valid_bins):
        # Calculate how much space is left after adding the item
        remaining_space = diffs[valid_bins]
        # Prioritize bins with less remaining space (tighter fit)
        priorities[valid_bins] = -remaining_space

        # Add a bonus for bins that are already more full (smaller remaining capacity)
        priorities[valid_bins] += 1.0 / (bins_remain_cap[valid_bins] + 1e-6)
    else:
        # Discourage using bins that are too small
        priorities[:] = -1.0

    return priorities
```
