```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Prioritize bins where the item fits exactly
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000  # High priority for exact fit

    # Then, prioritize bins where the item fits with minimal remaining capacity
    fits = bins_remain_cap >= item
    if np.any(fits):
        remaining_after_fit = bins_remain_cap[fits] - item
        priorities[fits] = 1.0 / (remaining_after_fit + 1e-6)  # Avoid division by zero

    # Add a small amount of randomness to encourage exploration
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
