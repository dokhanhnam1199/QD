```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1, decay_rate: float = 0.99) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using Epsilon-Greedy with dynamic epsilon.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Initial probability of choosing a random bin.
        decay_rate: Rate at which epsilon decays.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate best fit priority
    best_fit_priority = np.where(bins_remain_cap >= item, 1.0 / (bins_remain_cap - item + 1e-6), 0.0)

    # Apply epsilon-greedy strategy
    if np.random.rand() < epsilon:
        # Choose a random bin with uniform probability
        priorities = np.random.rand(len(bins_remain_cap))
    else:
        # Choose the bin with the best fit
        priorities = best_fit_priority

    # Decay epsilon for the next item
    epsilon = max(0.01, epsilon * decay_rate)  # Ensure epsilon doesn't become too small

    return priorities
```
