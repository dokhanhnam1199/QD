```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bins_remain_cap = np.array(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    # Calculate fill ratio (item size / bin remaining capacity)
    fill_ratio = item / bins_remain_cap
    fill_ratio[~valid_bins] = 0  # Set invalid bins to 0

    # Apply sigmoid function to prioritize bins closer to full, but not overfull
    steepness = 7  # Adjust for sharper/flatter slope
    midpoint = 0.5 # Adjust to shift the sigmoid curve
    priorities = 1 / (1 + np.exp(-steepness * (fill_ratio - midpoint)))

    # Boost priority for exact fits
    exact_fit_bins = np.where(np.isclose(bins_remain_cap, item))[0]
    if len(exact_fit_bins) > 0:
        priorities[exact_fit_bins] *= 10  # Increase priority significantly

    return priorities
```
