{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin based on Best Fit strategy.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    # Calculate the difference between item size and bin remaining capacity\n    diff = bins_remain_cap - item\n    # Assign priority: higher priority for bins with smaller difference (best fit)\n    # But only if the item can fit in the bin (diff >= 0)\n    priorities[diff >= 0] = diff[diff >= 0]\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Calculate the difference between the item size and the remaining capacity of each bin.\n    diffs = bins_remain_cap - item\n\n    # Only consider bins that have enough capacity for the item.\n    valid_bins = diffs >= 0\n\n    if np.any(valid_bins):\n        # Calculate the minimum difference among the valid bins.\n        min_diff = np.min(diffs[valid_bins])\n\n        # Assign priority based on how close the remaining capacity is to the item size.\n        # Bins with smaller differences (closer fit) get higher priority.\n        # Add a small bonus for bins that are more full (smaller remain_cap)\n        priorities[valid_bins] = -diffs[valid_bins] + min_diff + (1 / (bins_remain_cap[valid_bins] + 1e-6))\n    else:\n        # If no bin has enough capacity, assign a small negative priority to all bins\n        # to discourage using them. This helps prevent getting stuck.\n        priorities[:] = -1\n\n    return priorities\n\n[Reflection]\nPrioritize fit *and* fullness; avoid empty bins; consider a small bonus/penalty scheme.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}