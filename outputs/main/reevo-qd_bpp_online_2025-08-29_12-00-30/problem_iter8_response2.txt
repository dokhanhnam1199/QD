```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    # Calculate the 'tightness' of fit - how close the item is to filling the bin.
    fit_score = 1.0 - (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]
    fit_score = np.where(bins_remain_cap[valid_bins] == 0, 0, fit_score) # Avoid division by zero

    # Prioritize bins that are somewhat full, but not completely full.
    fullness = 1.0 - (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))
    fullness_score = np.abs(fullness - 0.5)
    fullness_score = np.where(fullness_score == 0, 1e-9, fullness_score)  # Prevent division by zero
    fullness_priority = 1.0 / fullness_score

    # Add a small amount of randomness for exploration.
    epsilon = 0.05
    exploration_bonus = np.random.rand(len(valid_bins)) * epsilon

    # Combine the scores.  Fit is most important, then fullness, then exploration.
    priorities[valid_bins] = 0.6 * fit_score + 0.3 * fullness_priority + 0.1 * exploration_bonus

    return priorities
```
