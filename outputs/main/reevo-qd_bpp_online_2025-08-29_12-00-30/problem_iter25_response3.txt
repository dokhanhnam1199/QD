```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    distances = bins_remain_cap[valid_bins] - item
    exact_fit = (distances == 0).astype(float) * 10  # High priority for exact fits

    utilization = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
    fullness_score = np.abs(utilization - 0.7)
    fullness_priority = np.exp(-fullness_score * 5) # sigmoid function

    # Scale search with item size
    item_scale = item / np.max(bins_remain_cap)

    priorities[valid_bins] = (0.6 * fullness_priority + exact_fit + 0.4* (1.0 / (distances + 1e-6)) * item_scale)
    
    # Minimize empty bins: give a bonus to bins with very little used capacity
    empty_bonus = (bins_remain_cap == np.max(bins_remain_cap)).astype(float) * 0.1
    priorities += empty_bonus

    return priorities
```
