```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    distances = bins_remain_cap[valid_bins] - item
    exact_fit = (distances == 0).astype(float) * 100  # Very high priority for exact fits

    # Scale inverse distance by item size to focus on tighter fits for larger items
    scaled_distances = np.abs(distances)
    scaled_distances = np.where(scaled_distances == 0, 1e-6, scaled_distances)
    inverse_distance = item * (1.0 / scaled_distances)

    # Prioritize fullness around 70%
    fullness = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
    fullness_score = np.abs(fullness - 0.7)
    fullness_priority = np.exp(-fullness_score * 5)  # Sigmoid-like function

    # Penalize empty bins (bins with very high remaining capacity)
    empty_penalty = np.where(bins_remain_cap[valid_bins] > 0.9 * np.max(bins_remain_cap), 0.1, 0)

    priorities[valid_bins] = (0.5 * inverse_distance + 0.4 * fullness_priority + exact_fit - empty_penalty)
    return priorities
```
