```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    distances = bins_remain_cap[valid_bins] - item
    exact_fit = (distances == 0)
    fit_score = np.zeros_like(bins_remain_cap[valid_bins])
    fit_score[exact_fit] = 10.0  # High priority for exact fit

    remaining_capacity = bins_remain_cap[valid_bins]
    fullness = 1.0 - (remaining_capacity / np.max(bins_remain_cap))
    fullness_score = np.abs(fullness - 0.5)
    fullness_score = np.where(fullness_score == 0, 1e-6, fullness_score)
    fullness_priority = 1.0 / fullness_score  # Higher priority for bins closer to 50% full

    # Blend fit score and fullness priorities
    priorities[valid_bins] = 0.8 * fit_score + 0.2 * fullness_priority

    # Add a small amount of randomness for exploration
    noise = np.random.rand(len(bins_remain_cap)) * 0.02
    priorities = priorities + noise

    return priorities
```
