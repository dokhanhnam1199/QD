```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities

    distances = bins_remain_cap[valid_bins] - item
    exact_fit_bonus = np.where(np.abs(distances) < 1e-6, 10.0, 0.0)  # Huge bonus for exact fit

    # Log-scaled fullness: prioritize bins closer to full
    fullness = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
    fullness_score = np.log(1.0 / (1.0 - fullness + 1e-9)) # Avoid log(0)

    # Best-fit exploitation: inverse of remaining space
    inverse_distance = 1.0 / (distances + 1e-9)

    # Blend exploitation (best fit) and fullness, with a touch of randomness
    priorities[valid_bins] = 0.6 * inverse_distance + 0.4 * fullness_score + exact_fit_bonus

    return priorities
```
