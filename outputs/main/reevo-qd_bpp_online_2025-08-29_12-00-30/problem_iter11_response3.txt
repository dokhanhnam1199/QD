```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    distances = bins_remain_cap[valid_bins] - item
    exact_fit = (distances == 0).astype(float) * 10  # High priority for exact fits

    # Avoid division by zero and prioritize closer fits
    distances = np.where(distances == 0, 1e-6, distances)
    inverse_distance = 1.0 / distances

    fullness = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
    fullness_score = np.abs(fullness - 0.7)  # Prefer bins around 70% full

    # Avoid division by zero in fullness calculation
    fullness_score = np.where(fullness_score == 0, 1e-6, fullness_score)
    fullness_priority = 1.0 / fullness_score

    # Add a bonus for non-empty bins
    non_empty_bonus = (bins_remain_cap[valid_bins] < np.max(bins_remain_cap)).astype(float) * 2

    # Combine the factors with weights
    priorities[valid_bins] = (0.4 * inverse_distance + 0.3 * fullness_priority + exact_fit + non_empty_bonus)

    # Introduce a small amount of randomness for exploration
    randomness = np.random.rand(len(valid_bins)) * 0.05
    priorities[valid_bins] += randomness

    return priorities
```
