```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the fitness of each bin: how well the item fits
    fitness = bins_remain_cap - item
    
    # If the item doesn't fit in a bin, set its priority to 0
    priorities = np.where(fitness >= 0, 1.0, 0.0)

    # Give bins with smaller remaining capacity a slightly higher priority.
    # This encourages filling up bins quickly to minimize the number of open bins.
    
    remaining_capacity_penalty = np.where(fitness > 0, 1.0 / (fitness + 1e-6), 0.0)
    priorities += remaining_capacity_penalty
    
    #Randomize a bit to avoid always picking the first fit:
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
