```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    diffs = bins_remain_cap - item
    valid_bins = diffs >= 0

    if np.any(valid_bins):
        # Prioritize bins with the smallest difference (best fit)
        fit_priority = -diffs[valid_bins]

        # Add a bonus for bins that are more full (smaller remaining capacity)
        fullness_priority = 1 / (bins_remain_cap[valid_bins] + 1e-6)

        # Combine fit and fullness priorities
        priorities[valid_bins] = fit_priority + fullness_priority
    else:
        # If no bin has enough capacity, assign a small negative priority to all bins
        # to discourage using them. This helps prevent getting stuck.
        priorities[:] = -1

    return priorities
```
