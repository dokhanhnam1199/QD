```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    # Best-fit heuristic: prioritize bins with the smallest remaining capacity
    # that can still fit the item.
    distances = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = 1.0 / (distances + 1e-6)

    # Add a small bonus for bins that are close to being full. This can help
    # to avoid leaving many partially filled bins.
    fullness = bins_remain_cap / np.max(bins_remain_cap)
    priorities[valid_bins] += 0.1 * fullness[valid_bins]

    return priorities
```
