```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy strategy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Probability of exploration.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the 'greedy' priority - the best fit
    best_fit_bin = np.argmin(bins_remain_cap - item)
    greedy_priority = 1.0 / (bins_remain_cap[best_fit_bin] - item + 1e-6) if bins_remain_cap[best_fit_bin] >= item else 0.0
    
    # Exploration phase - assign random priority to some bins with probability epsilon
    for i in range(n_bins):
        if np.random.rand() < epsilon and bins_remain_cap[i] >= item:
            priorities[i] = np.random.rand()

    # Exploitation phase - assign a priority based on fit to other bins
    for i in range(n_bins):
        if bins_remain_cap[i] >= item:
             priorities[i] = 1.0 / (bins_remain_cap[i] - item + 1e-6) # higher priority for better fit 

    
    # If all priorities are zero due to item size or exploration, prioritize the best_fit_bin
    if np.sum(priorities) == 0.0 and bins_remain_cap[best_fit_bin] >= item:
        priorities[best_fit_bin] = 1.0
    
    return priorities
```
