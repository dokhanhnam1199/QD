{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    # Prioritize bins where the item fits exactly\n    exact_fit = bins_remain_cap == item\n    priorities[exact_fit] = 1000  # High priority for exact fit\n\n    # Then, prioritize bins where the item fits with minimal remaining capacity\n    fits = bins_remain_cap >= item\n    if np.any(fits):\n        remaining_after_fit = bins_remain_cap[fits] - item\n        priorities[fits] = 1.0 / (remaining_after_fit + 1e-6) # Avoid division by zero\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, combining best fit,\n    a bonus for nearly full bins, and a small exploration bonus.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Prioritize exact fits\n    exact_fit = bins_remain_cap == item\n    priorities[exact_fit] = 1000.0\n\n    # Prioritize bins where the item fits with minimal remaining capacity (Best Fit)\n    fits = bins_remain_cap >= item\n    if np.any(fits):\n        remaining_after_fit = bins_remain_cap[fits] - item\n        priorities[fits] = 1.0 / (remaining_after_fit + 1e-6)\n\n    # Bonus for nearly full bins (encourages filling bins completely)\n    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap < item * 2)\n    priorities[nearly_full] += 0.5\n\n    # Add a small exploration bonus to bins with some remaining capacity\n    # to avoid getting stuck in local optima.\n    available_bins = bins_remain_cap > 0\n    priorities[available_bins] += 0.1 * np.random.rand(len(bins_remain_cap))[available_bins]\n\n    return priorities\n\n[Reflection]\nCombine exploitation (best fit, full bins) with exploration (randomness) & consider item characteristics.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}