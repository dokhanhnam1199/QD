```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit strategy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)

    # Feasible bins
    feasible_bins = bins_remain_cap >= item

    # If no feasible bins, return 0 priorities
    if not np.any(feasible_bins):
        return priorities

    # Assign priority randomly among feasible bins
    feasible_indices = np.where(feasible_bins)[0]
    num_feasible = len(feasible_indices)

    # Use remaining capacity as a weight for priority
    weights = bins_remain_cap[feasible_indices]
    normalized_weights = weights / np.sum(weights)
    
    for i in feasible_indices:
        priorities[i] = normalized_weights[np.where(feasible_indices == i)[0]][0]

    return priorities
```
