```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bins_remain_cap = np.array(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Prioritize exact fits with very high priority
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000.0

    # For bins where the item fits, calculate a fit score
    fits = bins_remain_cap >= item
    fits = np.logical_and(fits, ~exact_fit)  # Exclude exact fits already prioritized

    if np.any(fits):
        # Calculate remaining capacity after placing the item
        remaining_after_item = bins_remain_cap[fits] - item

        # Calculate a score based on how well the item utilizes the bin
        utilization = item / bins_remain_cap[fits]

        # Add a small value to avoid division by zero and improve stability
        remaining_after_item = np.where(remaining_after_item <= 0, 1e-6, remaining_after_item)

        # Combine utilization and remaining capacity to prioritize bins
        # where the item fits well and leaves a reasonable amount of space
        fit_scores = utilization - (1 - (remaining_after_item / bins_remain_cap[fits]))
        fit_scores = np.clip(fit_scores, 0, 1)  # Ensure scores are between 0 and 1

        # Use a sigmoid-like function to create a non-linear priority
        priorities[fits] = np.exp(5 * fit_scores)

    return priorities
```
