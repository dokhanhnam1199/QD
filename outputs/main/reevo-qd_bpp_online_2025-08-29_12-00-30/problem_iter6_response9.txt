```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the difference between the item size and the remaining capacity of each bin.
    diffs = bins_remain_cap - item

    # Only consider bins that have enough capacity for the item.
    valid_bins = diffs >= 0

    if np.any(valid_bins):
        # Calculate the minimum difference among the valid bins.
        min_diff = np.min(diffs[valid_bins])

        # Assign priority based on how close the remaining capacity is to the item size.
        # Bins with smaller differences (closer fit) get higher priority.
        # Add a small bonus for bins that are more full (smaller remain_cap)
        priorities[valid_bins] = -diffs[valid_bins] + min_diff + (1 / (bins_remain_cap[valid_bins] + 1e-6))
    else:
        # If no bin has enough capacity, assign a small negative priority to all bins
        # to discourage using them. This helps prevent getting stuck.
        priorities[:] = -1

    return priorities
```
