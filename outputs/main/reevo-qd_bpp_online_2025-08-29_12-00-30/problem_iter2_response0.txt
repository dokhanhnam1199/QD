```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Exact fit gets highest priority
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1.0

    # Prefer bins where the item fits with minimal wasted space
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        remaining_space = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = 1.0 / (remaining_space + 1e-6)

    # Add a small bonus for bins with higher remaining capacity
    priorities += 0.1 * bins_remain_cap / np.max(bins_remain_cap)

    return priorities
```
