```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Assign highest priority to bins where item exactly fits
    exact_fit_mask = (bins_remain_cap == item)
    priorities[exact_fit_mask] = 1.0

    # If no exact fit, assign priority based on remaining capacity.
    # More remaining capacity is less preferred, so we use the inverse.
    remaining_capacities = bins_remain_cap[~exact_fit_mask]
    if remaining_capacities.size > 0:
      priorities[~exact_fit_mask] = 1.0 / (remaining_capacities + 1e-6) # Adding a small epsilon to avoid division by zero
    
    return priorities
```
