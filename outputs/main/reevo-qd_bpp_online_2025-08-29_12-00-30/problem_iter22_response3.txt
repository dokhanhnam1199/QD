```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities

    distances = bins_remain_cap[valid_bins] - item
    exact_fit = (distances == 0).astype(float) * 10
    distances = np.abs(distances)
    distances = np.where(distances == 0, 1e-6, distances)
    inverse_distance = 1.0 / distances
    fullness = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
    fullness_score = np.abs(fullness - 0.7)
    fullness_score = np.where(fullness_score == 0, 1e-6, fullness_score)
    fullness_priority = 1.0 / fullness_score

    # Item-size aware exploration: smaller items get more exploration
    exploration = (item / np.max(bins_remain_cap)) * 0.15

    # Adjust weights based on item size. Larger items lean more towards best fit
    weight_inverse_distance = 0.6 if item < np.mean(bins_remain_cap) else 0.7
    weight_fullness_priority = 0.3 if item < np.mean(bins_remain_cap) else 0.2
    
    priorities[valid_bins] = (weight_inverse_distance * inverse_distance +
                               weight_fullness_priority * fullness_priority +
                               exact_fit + exploration)
    return priorities
```
