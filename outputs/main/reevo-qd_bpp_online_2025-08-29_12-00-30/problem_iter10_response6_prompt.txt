{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Sigmoid Fit Score.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the fitness of each bin based on how well the item fits.\n    # A higher fitness means the item fits better in that bin.\n    fitness = item / bins_remain_cap\n    fitness = np.where(bins_remain_cap == 0, 0, fitness)  # Avoid division by zero\n\n    # Apply Sigmoid function to the fitness scores to normalize them\n    # into a probability distribution.\n    # The Sigmoid function squashes the fitness values between 0 and 1.\n    # We use a scaling factor to adjust the steepness of the sigmoid curve.\n    # A larger scaling factor makes the sigmoid curve steeper.\n    scaling_factor = 10.0\n    sigmoid_scores = 1 / (1 + np.exp(-scaling_factor * (1 - fitness)))\n\n    # Return the sigmoid scores as the priority scores for each bin.\n    return sigmoid_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    distances = bins_remain_cap[valid_bins] - item\n    exact_fit = (distances == 0).astype(float) * 10  # High priority for exact fits\n\n    distances = np.abs(distances)\n    distances = np.where(distances == 0, 1e-6, distances)\n    inverse_distance = 1.0 / distances\n\n    fullness = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)\n    fullness_score = np.abs(fullness - 0.7)  # Prefer bins around 70% full\n    fullness_score = np.where(fullness_score == 0, 1e-6, fullness_score)\n    fullness_priority = 1.0 / fullness_score\n\n    # Combine with some randomness for exploration\n    randomness = np.random.rand(len(valid_bins)) * 0.1  # Small random factor\n\n    priorities[valid_bins] = (0.5 * inverse_distance +\n                              0.3 * fullness_priority +\n                              exact_fit +\n                              randomness)\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, consider bin fullness, and add exploration via randomness\u2014balance exploitation & discovery.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}