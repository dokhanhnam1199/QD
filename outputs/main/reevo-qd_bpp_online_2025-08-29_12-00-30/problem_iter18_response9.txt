```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    diffs = bins_remain_cap[valid_bins] - item

    # Exact fit gets highest priority
    exact_fit_bins = np.isclose(diffs, 0)
    if np.any(exact_fit_bins):
        priorities[valid_bins][exact_fit_bins] = 1000  # High priority for exact fits

    # Remaining capacity score (logarithmic scaling)
    remaining_capacity_score = np.log(bins_remain_cap[valid_bins] + 1e-6)

    # Item density (using item size as density)
    item_density = item

    # Density score (Gaussian-like decay)
    density_score = np.exp(- (bins_remain_cap[valid_bins] / item_density)**2)

    # Fit score (inverse of the difference)
    fit_score = -diffs

    priorities[valid_bins] = remaining_capacity_score + fit_score + density_score

    return priorities
```
