```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy strategy with bin fullness consideration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Probability of exploration.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the 'greedy' priority - the best fit
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        best_fit_bin = np.argmin(bins_remain_cap[valid_bins] - item)
        best_fit_bin_index = np.where(valid_bins)[0][best_fit_bin]
        greedy_priority = 1.0 / (bins_remain_cap[best_fit_bin_index] - item + 1e-6)
    else:
        greedy_priority = 0.0
        best_fit_bin_index = -1

    # Exploration phase - assign random priority to some bins with probability epsilon
    for i in range(n_bins):
        if np.random.rand() < epsilon and bins_remain_cap[i] >= item:
            priorities[i] = np.random.rand()

    # Exploitation phase - assign a priority based on fit to other bins, considering fullness
    for i in range(n_bins):
        if bins_remain_cap[i] >= item:
            # Give higher priority to bins that are less full
            fullness = 1 - (bins_remain_cap[i] / np.max(bins_remain_cap))
            priorities[i] = (1.0 / (bins_remain_cap[i] - item + 1e-6)) * (1 + fullness)

    # If all priorities are zero, prioritize the best fit bin (if any)
    if np.sum(priorities) == 0.0 and best_fit_bin_index != -1:
        priorities[best_fit_bin_index] = 1.0

    return priorities
```
