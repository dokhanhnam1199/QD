```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities

    distances = bins_remain_cap[valid_bins] - item
    exact_fit = (distances == 0).astype(float) * 10  # High priority for exact fits

    fullness = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
    fullness_score = np.abs(fullness - 0.7)
    fullness_priority = np.exp(-fullness_score * 5) # Sigmoid-like, peak at 0.7

    inverse_distance = 1.0 / (distances + 1e-6)  # Avoid division by zero

    priorities[valid_bins] = (0.4 * inverse_distance + 0.5 * fullness_priority + exact_fit)
    return priorities
```
