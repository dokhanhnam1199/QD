```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bins_remain_cap = np.array(bins_remain_cap)
    valid_bins = bins_remain_cap > 0

    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    # Calculate fit score, normalizing by item size and bin capacity
    fit_scores = item / bins_remain_cap
    fit_scores[~valid_bins] = 0  # Ensure invalid bins have 0 score

    # Apply a modified sigmoid function with a tunable steepness parameter
    steepness = 7  # Adjust for sharper/flatter slope
    priorities = 1 / (1 + np.exp(-steepness * (1 - fit_scores)))

    # Boost bins that are nearly full to discourage fragmentation.
    nearly_full_boost = 0.1  # Adjust boost value as needed
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[valid_bins] += nearly_full_boost * fullness[valid_bins]

    return priorities
```
