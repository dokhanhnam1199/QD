```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate fit scores: how well the item fits in each bin
    fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)

    # Normalize fit scores using Softmax
    exp_fit = np.exp(fit_scores)
    sum_exp_fit = np.sum(exp_fit)
    if sum_exp_fit == 0:
        priorities = np.zeros_like(bins_remain_cap)
    else:
        priorities = exp_fit / sum_exp_fit

    return priorities
```
