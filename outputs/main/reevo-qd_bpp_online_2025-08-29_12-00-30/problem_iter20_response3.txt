```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a weighted combination of Best Fit, Worst Fit, and a small exploration factor.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Best Fit: Prioritize bins where the item fits snugly
    best_fit = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)

    # Worst Fit: Penalize bins with lots of remaining capacity (discourages fragmentation)
    worst_fit = np.where(bins_remain_cap >= item, np.inf, -np.inf)
    worst_fit = np.where(worst_fit == np.inf, bins_remain_cap, worst_fit)

    # Fill Ratio: Encourage using bins that are partially full
    fill_ratio = bins_remain_cap / 1.0  # Assuming bin capacity is 1.0

    # Combine the heuristics with weights
    priority = 0.5 * best_fit + 0.3 * worst_fit + 0.2 * fill_ratio

    # Exploration: Add a small random value to each priority with probability epsilon
    if np.random.rand() < epsilon:
        priority += np.random.rand(n_bins) * 0.1  # Small random perturbation

    return priority
```
