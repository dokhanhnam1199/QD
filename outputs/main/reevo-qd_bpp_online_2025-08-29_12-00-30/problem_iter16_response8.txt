```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, prioritizing minimal waste and tight fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Prioritize bins with smaller remaining capacity after placing the item.
        remaining_after_placement = bins_remain_cap[valid_bins] - item
        # Use a scoring function that favors tighter fits (smaller remaining capacity)
        # Add a small constant to avoid division by zero and to slightly favor bins
        # that are already closer to being full.
        priorities[valid_bins] = 1.0 / (remaining_after_placement + 1e-6)

    return priorities
```
