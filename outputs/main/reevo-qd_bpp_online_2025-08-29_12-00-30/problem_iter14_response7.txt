```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.7) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        alpha: Weighting factor for exact fit priority.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Assign highest priority to bins where item exactly fits
    exact_fit_mask = (bins_remain_cap == item)
    priorities[exact_fit_mask] = 1.0

    # If no exact fit, assign priority based on remaining capacity.
    # More remaining capacity is less preferred, so we use the inverse.
    remaining_capacities = bins_remain_cap[~exact_fit_mask]
    if remaining_capacities.size > 0:
        priorities[~exact_fit_mask] = 1.0 / (remaining_capacities + 1e-6)

    # Weighted combination of exact fit and remaining capacity priorities
    priorities = np.where(exact_fit_mask, alpha, 1-alpha) * priorities
    
    return priorities
```
