{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Epsilon-Greedy strategy.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        epsilon: Probability of exploration.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Calculate the 'greedy' priority - the best fit\n    best_fit_bin = np.argmin(bins_remain_cap - item)\n    greedy_priority = 1.0 / (bins_remain_cap[best_fit_bin] - item + 1e-6) if bins_remain_cap[best_fit_bin] >= item else 0.0\n    \n    # Exploration phase - assign random priority to some bins with probability epsilon\n    for i in range(n_bins):\n        if np.random.rand() < epsilon and bins_remain_cap[i] >= item:\n            priorities[i] = np.random.rand()\n\n    # Exploitation phase - assign a priority based on fit to other bins\n    for i in range(n_bins):\n        if bins_remain_cap[i] >= item:\n             priorities[i] = 1.0 / (bins_remain_cap[i] - item + 1e-6) # higher priority for better fit \n\n    \n    # If all priorities are zero due to item size or exploration, prioritize the best_fit_bin\n    if np.sum(priorities) == 0.0 and bins_remain_cap[best_fit_bin] >= item:\n        priorities[best_fit_bin] = 1.0\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    diffs = bins_remain_cap[valid_bins] - item\n    \n    # Exact fit gets highest priority\n    exact_fit_bins = np.isclose(diffs, 0)\n    if np.any(exact_fit_bins):\n        priorities[valid_bins][exact_fit_bins] = 1000  # High priority for exact fits\n\n    remaining_capacity_score = np.log(bins_remain_cap[valid_bins] + 1e-6)\n    item_density = item #item / some_constant # No need of some constant, item size itself can be used to represent density\n    \n    density_score = np.exp(- (bins_remain_cap[valid_bins] / item_density)**2)\n    \n    fit_score = -diffs \n\n    priorities[valid_bins] = remaining_capacity_score + fit_score + density_score\n    \n    return priorities\n\n[Reflection]\nPrioritize exact fits, consider bin density, and use logarithmic scaling for remaining capacity.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}