```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap > 0
    bins_remain_cap_safe = bins_remain_cap[valid_bins]
    item_safe = item * np.ones_like(bins_remain_cap_safe)

    # Sigmoid function with parameters adjusted for better scaling
    fit_scores = 1 / (1 + np.exp(-10 * (item_safe / bins_remain_cap_safe - 0.5)))

    # Incorporate bin fullness: prefer bins that are more full (up to a point)
    fullness = 1 - (bins_remain_cap_safe / np.max(bins_remain_cap[valid_bins]))
    fullness = np.clip(fullness, 0, 0.95) # Cap fullness to prevent excessive preference for almost-full bins

    # Adjust weights as needed
    combined_scores = 0.6 * fit_scores + 0.4 * fullness

    priorities[valid_bins] = combined_scores
    return priorities
```
