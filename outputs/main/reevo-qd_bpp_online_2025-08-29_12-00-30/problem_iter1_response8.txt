```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate the "greedy" priority: how well the item fits in each bin
    greedy_priorities = np.where(bins_remain_cap >= item, bins_remain_cap - item, -1)

    # Epsilon-Greedy: With probability epsilon, choose a bin randomly
    if np.random.rand() < epsilon:
        # Assign random priorities
        priorities = np.random.rand(n_bins)
    else:
        # Otherwise, use the greedy priorities
        priorities = greedy_priorities

    return priorities
```
