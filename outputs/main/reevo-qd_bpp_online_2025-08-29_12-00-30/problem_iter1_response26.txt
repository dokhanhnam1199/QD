```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fitness of each bin based on how well the item fits.
    # A higher fitness means the item fits better in that bin.
    fitness = item / bins_remain_cap
    fitness = np.where(bins_remain_cap == 0, 0, fitness)  # Avoid division by zero

    # Apply Sigmoid function to the fitness scores to normalize them
    # into a probability distribution.
    # The Sigmoid function squashes the fitness values between 0 and 1.
    # We use a scaling factor to adjust the steepness of the sigmoid curve.
    # A larger scaling factor makes the sigmoid curve steeper.
    scaling_factor = 10.0
    sigmoid_scores = 1 / (1 + np.exp(-scaling_factor * (1 - fitness)))

    # Return the sigmoid scores as the priority scores for each bin.
    return sigmoid_scores
```
