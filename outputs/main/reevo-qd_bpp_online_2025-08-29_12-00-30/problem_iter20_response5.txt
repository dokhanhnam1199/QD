```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bins_remain_cap = np.array(bins_remain_cap)
    valid_bins = bins_remain_cap > 0

    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    # Calculate fit score (normalized item size to bin capacity)
    fit_scores = item / bins_remain_cap
    fit_scores[~valid_bins] = 0

    # Calculate bin utilization (1 - remaining capacity / bin capacity)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    utilization[~valid_bins] = 0

    # Combine fit and utilization (weighted average)
    combined_score = 0.6 * fit_scores + 0.4 * utilization

    # Apply sigmoid function to scale priorities
    priorities = 1 / (1 + np.exp(-4 * (combined_score - 0.5)))  # Adjust sharpness as needed

    return priorities
```
