```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    distances = bins_remain_cap[valid_bins] - item
    exact_fit = (distances == 0).astype(float) * 10  # High priority for exact fits
    
    # Sigmoid function to emphasize tightness of fit
    sigmoid_input = 10 * (bins_remain_cap[valid_bins] - item)
    fit_score = 1 / (1 + np.exp(-sigmoid_input))

    fullness = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
    fullness_score = np.abs(fullness - 0.7)
    fullness_priority = np.exp(-5 * fullness_score) # Exponential decay around 70%
    
    randomness = np.random.rand(len(valid_bins)) * (0.05 / (len(bins_remain_cap) + 1)) # Reduced randomness
    
    priorities[valid_bins] = (0.5 * fit_score + 0.3 * fullness_priority + exact_fit + randomness)
    return priorities
```
