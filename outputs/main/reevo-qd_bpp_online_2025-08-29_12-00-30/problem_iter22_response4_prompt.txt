{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities  # No bin can fit the item\n\n    diffs = bins_remain_cap[valid_bins] - item\n    # Combine inverse distance (proximity fit) with a fullness factor\n    fullness = 1 - (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))\n    priorities[valid_bins] = (1.0 / (diffs + 1e-6)) * (1 + fullness)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, considering fit, usage, and future items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        bin_usage_history: Array tracking the number of items placed in each bin (optional).\n        future_item_sizes: Array of sizes of future items (optional).\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    diffs = bins_remain_cap - item\n    valid_bins = diffs >= 0\n\n    if np.any(valid_bins):\n        min_diff = np.min(diffs[valid_bins])\n        \n        # Prioritize tighter fits\n        fit_priority = -diffs[valid_bins] + min_diff\n\n        # Incorporate bin usage history (encourage spreading items across bins)\n        usage_priority = np.zeros_like(bins_remain_cap)\n        if bin_usage_history is not None:\n            usage_priority = 1.0 / (bin_usage_history + 1e-6)  # Bins with fewer items get higher priority\n            usage_priority = usage_priority[valid_bins]\n        \n        # Incorporate future item sizes (attempt to leave space for larger future items)\n        future_priority = np.zeros_like(bins_remain_cap)\n        if future_item_sizes is not None:\n            avg_future_size = np.mean(future_item_sizes) if len(future_item_sizes) > 0 else 0\n            future_priority = (bins_remain_cap - avg_future_size) / (bins_remain_cap + 1e-6)\n            future_priority = future_priority[valid_bins]\n\n        # Combine priorities (weighted sum)\n        priorities[valid_bins] = 0.7 * fit_priority + 0.2 * usage_priority + 0.1 * future_priority\n    \n    return priorities\n\n[Reflection]\nConsider fit, bin usage, *and* anticipate future items\u2014weighting matters for optimal online bin packing.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}