```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Probability of exploration.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Exact fit: highest priority
    exact_fit_mask = (bins_remain_cap == item)
    priorities[exact_fit_mask] = 1.0

    # Available bins (excluding those that are too small)
    available_bins = bins_remain_cap[bins_remain_cap >= item]
    available_bin_indices = np.where(bins_remain_cap >= item)[0]

    if available_bins.size > 0:
        # Greedy priority: inverse of remaining capacity
        remaining_capacities = available_bins - item
        greedy_priorities = 1.0 / (remaining_capacities + 1e-6)

        # Exploration: random priority with probability epsilon
        exploration_mask = np.random.rand(len(available_bin_indices)) < epsilon
        exploration_priorities = np.random.rand(len(available_bin_indices))[exploration_mask]

        # Combine greedy and exploration
        combined_priorities = np.zeros_like(greedy_priorities)
        combined_priorities[~exploration_mask] = greedy_priorities[~exploration_mask]
        combined_priorities[exploration_mask] = exploration_priorities

        # Assign combined priorities to the original array
        priorities[available_bin_indices] = combined_priorities

    return priorities
```
