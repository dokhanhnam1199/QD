```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    distances = bins_remain_cap[valid_bins] - item
    distances = np.where(distances < 0, 0, distances)  # Ensure non-negative
    
    # Exact fit gets highest priority
    exact_fit_mask = (distances == 0)
    if np.any(exact_fit_mask):
        priorities[valid_bins][exact_fit_mask] = 1e9

    # Best fit: smaller distance is better
    inverse_distance = 1.0 / (distances[~exact_fit_mask] + 1e-6)
    
    # Bin fullness: prefer bins that are somewhat full (avoid very empty or very full)
    fullness = 1.0 - (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))
    fullness_score = np.abs(fullness - 0.5)
    fullness_priority = 1.0 / (fullness_score + 1e-6)

    # Combine proximity and fullness with a weighted average
    priorities[valid_bins][~exact_fit_mask] = 0.6 * inverse_distance + 0.4 * fullness_priority
    
    return priorities
```
