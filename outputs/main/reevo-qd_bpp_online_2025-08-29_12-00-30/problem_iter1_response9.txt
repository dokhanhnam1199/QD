```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin.  A higher fit score means the item
    # fits better in the bin (less waste).
    fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)

    # Apply Softmax to the fit scores to get probabilities.
    # Add a small temperature parameter to control the sharpness of the distribution.
    temperature = 1.0
    exp_fit_scores = np.exp(fit_scores / temperature)
    probabilities = exp_fit_scores / np.sum(exp_fit_scores)

    # Handle the case where no bins can fit the item (all fit_scores are -inf).
    if np.all(fit_scores == -np.inf):
      probabilities = np.zeros_like(bins_remain_cap)
    
    return probabilities
```
