```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, combining best fit, a bonus for nearly full bins, an exploration bonus, and a consideration of the item's relative size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize exact fits
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000.0

    # Prioritize bins where the item fits with minimal remaining capacity (Best Fit)
    fits = bins_remain_cap >= item
    if np.any(fits):
        remaining_after_fit = bins_remain_cap[fits] - item
        priorities[fits] = 1.0 / (remaining_after_fit + 1e-6)

    # Bonus for nearly full bins (encourages filling bins completely)
    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap < item * 1.5)
    priorities[nearly_full] += 0.75

    # Add a small exploration bonus to bins with some remaining capacity
    # to avoid getting stuck in local optima.
    available_bins = bins_remain_cap > 0
    priorities[available_bins] += 0.1 * np.random.rand(len(bins_remain_cap))[available_bins]

    # Item size consideration: smaller items get a slightly larger exploration bonus
    if item < 0.3:
        priorities[available_bins] += 0.3 * np.random.rand(len(bins_remain_cap))[available_bins]
    elif item > 0.7:
        priorities[available_bins] += 0.15 * np.random.rand(len(bins_remain_cap))[available_bins]

    return priorities
```
