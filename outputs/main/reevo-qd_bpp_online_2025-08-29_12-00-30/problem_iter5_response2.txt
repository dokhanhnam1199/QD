```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    diffs = bins_remain_cap[valid_bins] - item

    # Exact fit gets highest priority
    exact_fit_indices = np.where(diffs == 0)[0]
    if len(exact_fit_indices) > 0:
        priorities[valid_bins] = -1  # Assign a very high priority (negative for max selection)
        priorities[valid_bins[exact_fit_indices]] = -1000  # Even higher for exact fits

    else:
        # Weighted combination of inverse remaining capacity & item density
        remaining_capacity_score = np.log(bins_remain_cap[valid_bins] + 1e-6)
        fit_score = -diffs
        priorities[valid_bins] = 0.7 * remaining_capacity_score + 0.3 * fit_score

    return priorities
```
