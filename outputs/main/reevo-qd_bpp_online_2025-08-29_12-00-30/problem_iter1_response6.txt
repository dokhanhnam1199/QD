```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure bins_remain_cap is a numpy array
    bins_remain_cap = np.array(bins_remain_cap)

    # Calculate fit score for each bin
    fit_scores = item / bins_remain_cap

    # Apply sigmoid function to the fit scores
    # A larger item in a smaller bin gets a higher score. We will use a scale factor of 1.5 to sharpen the sigmoid.
    priorities = 1 / (1 + np.exp(-1.5 * (fit_scores - 0.5)))

    #Handle the cases where bin capacity is zero.
    priorities[bins_remain_cap == 0] = 0

    return priorities
```
