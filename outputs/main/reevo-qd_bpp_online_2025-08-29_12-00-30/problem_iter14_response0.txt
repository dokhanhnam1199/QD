```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    distances = np.abs(bins_remain_cap[valid_bins] - item)
    distances = np.where(distances == 0, 1e-9, distances)
    inverse_distance = 1.0 / distances

    fullness = 1.0 - (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))
    fullness_score = np.abs(fullness - 0.5)
    fullness_score = np.where(fullness_score == 0, 1e-9, fullness_score)
    fullness_priority = 1.0 / fullness_score

    # Encourage filling bins to around 50% to avoid fragmentation, then prioritize almost full bins
    target_fullness = 0.5
    fullness_diff = np.abs(fullness - target_fullness)
    fullness_priority = np.where(fullness > 0.9, 10.0, 1.0 / (fullness_diff + 1e-9))


    # Combine with a small exploration factor
    epsilon = 0.05  # Exploration rate
    exploration_bonus = np.random.rand(len(valid_bins)) * epsilon

    priorities[valid_bins] = 0.5 * inverse_distance + 0.4 * fullness_priority + 0.1 * exploration_bonus

    return priorities
```
