```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic is a "Density-Weighted Best Fit" approach.
    It combines two key aspects inspired by the methodical pursuit of structure:
    1.  **Best Fit Component**: Prioritizes bins that leave the smallest amount
        of remaining space after the item is placed. This promotes dense packing
        within individual bins. (Mimics Franklin's pursuit of precise fitting).
    2.  **Current Occupancy Component**: Gives a bonus to bins that are already
        more full. This encourages filling up existing bins completely before
        opening new ones or leaving bins with only small, unusable capacities.
        (Mimics Franklin's focus on consolidating observations to form a complete picture).

    The score for a suitable bin is calculated as:
    `-(remaining_space_after_fit) + alpha * (current_occupancy)`

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a very low (negative infinity) score.
    """
    # Assuming a universal standard capacity for all bins.
    # In many Bin Packing Problem contexts, bin capacity is normalized to 1.0.
    # If the problem implies a different fixed capacity (e.g., 100), this constant
    # should be adjusted accordingly. This allows `current_occupancy` to be a
    # meaningful measure of how 'full' a bin is relative to its total capacity.
    total_bin_capacity = 1.0 

    # Alpha is a tunable parameter that controls the weighting between
    # the 'Best Fit' component and the 'Current Occupancy' component.
    # - If alpha = 0, the heuristic reduces to a pure Best Fit.
    # - A higher alpha (e.g., 0.5 to 1.0) gives more importance to
    #   filling up existing, more occupied bins, even if it doesn't
    #   produce the absolute 'tightest' fit.
    alpha = 0.5  # Example value, can be optimized based on problem characteristics.

    # 1. Determine which bins can actually fit the item.
    can_fit = bins_remain_cap >= item

    # 2. Calculate the remaining space if the item were placed in each bin.
    #    (This is the 'waste' we want to minimize for Best Fit).
    remaining_space_after_fit = bins_remain_cap - item

    # 3. Calculate the current occupancy (how much space is already filled).
    #    This measures how 'full' a bin is before placing the current item.
    current_occupancy = total_bin_capacity - bins_remain_cap

    # Initialize priority scores. Bins that cannot fit the item get an
    # infinitely low score to ensure they are never chosen.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate scores only for bins that can fit the item.
    # The Best Fit component (-remaining_space_after_fit) is maximized when
    # remaining_space_after_fit is minimized (i.e., closest to 0).
    # The Current Occupancy component (alpha * current_occupancy) is maximized
    # when the bin is already more full.
    priority_scores[can_fit] = -remaining_space_after_fit[can_fit] + alpha * current_occupancy[can_fit]

    return priority_scores
```
