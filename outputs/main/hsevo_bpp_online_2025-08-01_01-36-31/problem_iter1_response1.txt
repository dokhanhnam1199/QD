```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the principle of least action and the desire for energetic
    efficiency in the universe's fabric (our bins), this heuristic
    prioritizes containers (bins) that minimize the 'residual space-time'
    (unused capacity) after an item (quantum of matter) is placed within them.

    This strategy, akin to matter seeking its most stable and compact state,
    aims to achieve the 'tightest fit'. It maximizes the utilization of
    existing 'dimensions' (bin capacities), thereby limiting the necessity
    to expand into new 'dimensions' (open new bins) and minimizing the overall
    'cosmic energy' (total number of bins) required.

    Bins where the item cannot physically fit are treated as 'forbidden regions',
    assigned an infinitely low priority, signifying their complete
    incompatibility with the incoming 'particle'.

    Args:
        item: Size of item to be added to the bin. This is our 'particle'.
        bins_remain_cap: Array of capacities for each bin. These are our
                         'local space-time curvatures'.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more 'energetically favorable' placement.
    """

    # Calculate the hypothetical remaining space in each bin if the item were placed.
    # This is the 'residual energy field' that would be left behind.
    potential_remaining_space = bins_remain_cap - item

    # Initialize all priorities to a state of 'impossibility' or 'infinite resistance'.
    # A bin that cannot accommodate the item should have an infinitely low priority.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the 'viable universes' (bins) where the item can physically fit.
    # Only these are considered for a potential 'gravitational collapse' (placement).
    can_fit_mask = potential_remaining_space >= 0

    # For viable bins, the priority is derived from the negative of the remaining space.
    # By maximizing this (less negative) value, we inherently select the bin that
    # leaves the *smallest* positive remaining space. This represents the 'tightest'
    # and most 'energetically efficient' fit, minimizing wasted space.
    priority_scores[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priority_scores
```
