```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    As Isaac Newton, I postulate that efficiency dictates we seek to fill our vessels
    most completely, leaving the least possible void. This 'Best Fit' strategy ensures
    that an item finds the container where it fits most snugly, thus conserving the
    valuable resource of space and minimizing the proliferation of new, partially
    filled containers. Bins unable to contain the item are, naturally, given no
    consideration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the space that would remain if the item were placed in each bin.
    # This represents the 'excess capacity' or 'void' created.
    potential_remaining_space = bins_remain_cap - item

    # Initialize all bins with an exceedingly low priority, akin to a void of opportunity.
    # Bins that cannot physically accommodate the item must receive this minimal score.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Now, let us consider only those bins where the item may truly reside.
    # A bin is suitable if its remaining capacity is greater than or equal to the item's size.
    can_fit_mask = potential_remaining_space >= 0

    # For these suitable bins, the principle of 'Best Fit' shall govern.
    # We wish to minimize the 'potential_remaining_space' to achieve the most compact arrangement.
    # By negating this value, a smaller positive remaining space yields a larger (less negative, or closer to zero)
    # priority score, thereby selecting the 'snugger' fit. This is akin to a body seeking its lowest energy state.
    priorities[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priorities
```
