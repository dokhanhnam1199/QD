```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    As a seeker of the most harmonious and efficient configurations, much like the
    celestial dance, this function implements the 'Best Fit' heuristic. It calculates
    the remaining capacity after placing the item in each bin and prioritizes the
    bin that would leave the least amount of space unused. A 'perfect fit' receives
    the highest possible score amongst valid options.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins where the item does not fit receive a very low (negative infinity) priority.
    """
    # Calculate the space that would remain in each bin if the item were placed there.
    # A smaller positive value indicates a tighter, more "best" fit.
    potential_remaining_space = bins_remain_cap - item

    # Initialize all priorities to a very low value. This is our default for bins
    # where the item cannot possibly fit, ensuring they are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can actually accommodate the item.
    # Only bins with a non-negative potential_remaining_space are candidates.
    fitting_bins_mask = potential_remaining_space >= 0

    # For the bins that can fit the item, assign a priority.
    # To implement 'Best Fit', we want to select the bin that *minimizes*
    # the remaining space. By assigning a score of -remaining_space,
    # minimizing remaining_space becomes equivalent to maximizing -remaining_space.
    # A perfect fit (0 remaining space) will thus have a score of 0,
    # which is the highest possible priority for a fitting bin.
    priorities[fitting_bins_mask] = -potential_remaining_space[fitting_bins_mask]

    return priorities
```
