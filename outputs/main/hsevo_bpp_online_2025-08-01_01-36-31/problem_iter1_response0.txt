```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation uses a 'Best Fit' heuristic principle: it prioritizes
    bins that can accommodate the item and leave the smallest amount of
    remaining space. Bins that cannot fit the item are given a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    # Initialize priorities for all bins to a very low value.
    # This effectively disqualifies bins that cannot fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining space if the item were placed in each bin.
    # This calculation is done for all bins, but only relevant for those
    # where the item fits.
    remaining_space_after_placement = bins_remain_cap - item

    # For bins where the item fits, assign a priority score.
    # We want to minimize the `remaining_space_after_placement`.
    # To convert this into a maximization problem for priority, we use
    # the negative of the remaining space. A smaller positive remaining
    # space will result in a larger (less negative) priority score.
    # For example:
    # - If remaining_space = 0, priority = 0 (perfect fit, highest priority).
    # - If remaining_space = 5, priority = -5.
    # - If remaining_space = 10, priority = -10.
    priorities[can_fit_mask] = -remaining_space_after_placement[can_fit_mask]

    return priorities
```
