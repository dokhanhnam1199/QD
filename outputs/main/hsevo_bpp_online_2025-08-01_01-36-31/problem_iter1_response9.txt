```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    employing a 'Best Fit' heuristic.

    This function prioritizes bins that, after placing the item, would have the
    smallest remaining capacity. This strategy aims to fill bins as tightly
    as possible, thereby preserving larger spaces in other bins for future
    potentially larger items, and ultimately seeking to minimize the total
    number of bins used.

    Priority Mechanism:
    - For bins where the item *can* fit: The priority score is calculated as the
      negative of the remaining capacity after the item is placed. A smaller
      remaining capacity (e.g., 0 for an exact fit) results in a higher
      (closer to zero or positive) priority score.
    - For bins where the item *cannot* fit: Their priority is set to 0. This
      effectively disqualifies them, as any valid fit (resulting in a non-negative
      remaining capacity, and thus a non-positive priority score) will always have
      a priority greater than or equal to their priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with the priority score of each bin.
        The bin with the highest score (closest to 0 or positive) will be selected.
    """
    # Initialize all priorities to 0. Bins that cannot fit the item will retain this score.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item were placed in the fitting bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Apply the Best Fit logic: smaller remaining capacity implies higher priority.
    # By taking the negative, an exact fit (remaining_after_fit = 0) gets a priority of 0,
    # which is the highest possible. A tight fit (small positive remaining_after_fit)
    # gets a priority close to 0 but negative. A loose fit gets a more negative priority.
    priorities[can_fit_mask] = -remaining_after_fit

    return priorities
```
