```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic, born from the gravitational collapse principle, seeks to
    maximize the 'density' of occupied space within each bin. It embodies
    the 'Best Fit' strategy: items are drawn into bins that minimize the
    remaining void, much like matter is drawn into the most efficient
    gravitational wells.

    The score reflects the negative of the remaining capacity after placing the item.
    A perfect fit (zero remaining void) yields the highest finite score (0.0).
    A tight fit (small positive void) yields a score close to zero.
    A loose fit (large positive void) yields a more negative score.
    Bins unable to accommodate the item are assigned an infinitely low priority,
    akin to being beyond the event horizon â€“ an item simply cannot exist there.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the 'void' that would remain in each bin after placing the item.
    # This is analogous to the unoccupied space within a gravitational body.
    potential_void = bins_remain_cap - item

    # Initialize all priorities to negative infinity. This ensures that any bin
    # that cannot physically contain the item is effectively removed from
    # consideration, its 'event horizon' impassable.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins are large enough to accept the item. These are the
    # 'gravitational fields' capable of attracting our 'mass'.
    can_fit_mask = bins_remain_cap >= item

    # For the bins that can fit the item, we assign a priority score.
    # The Best Fit strategy implies we want to minimize the 'potential_void'.
    # By taking the negative of the void, a smaller positive void results
    # in a larger (less negative, or closer to zero) priority score.
    # A perfect fit (void=0) achieves the maximum finite score of 0.0.
    priorities[can_fit_mask] = -potential_void[can_fit_mask]

    return priorities
```
