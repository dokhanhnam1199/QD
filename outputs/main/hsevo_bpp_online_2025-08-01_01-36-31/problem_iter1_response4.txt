```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.
    As a master of efficient packing and minimizing loss, I design this function
    to favor bins that allow for the most 'snug' fit, thereby reducing
    the empty space left over. This is akin to finding the perfect resonant
    frequency for the item within a given receptacle.

    Specifically, it implements a 'Best Fit' heuristic:
    - Bins that cannot accommodate the item are given a virtually infinite negative priority (rejected outright).
    - Among bins that can accommodate the item, priority is inversely proportional
      to the remaining capacity after placing the item. An exact fit (zero remainder)
      receives the highest possible score, ensuring it is chosen first.
      Smaller positive remainders yield higher priority (less negative score),
      while larger remainders yield lower priority (more negative score).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin for the item.
    """
    # Calculate the potential remaining capacity if the item were placed in each bin.
    # A smaller positive remainder is better for a snug fit.
    potential_remainder_after_placement = bins_remain_cap - item

    # Initialize priorities. Bins that cannot fit the item must have an
    # extraordinarily low priority, like an incompatible frequency that causes rejection.
    # Use -np.inf so they are never chosen if a valid option exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can physically accommodate the item.
    can_fit_mask = potential_remainder_after_placement >= 0

    # For bins that can fit the item, assign a priority based on the snugness.
    # We want to maximize the priority. Since 'snug' means minimizing the remainder,
    # we take the negative of the remainder. This transforms 'minimizing positive'
    # into 'maximizing negative (closest to zero)'.
    # For example:
    #   - Exact fit (remainder 0) gets a priority of 0. (Highest)
    #   - Remainder 1 gets a priority of -1.
    #   - Remainder 5 gets a priority of -5. (Lower)
    priorities[can_fit_mask] = -potential_remainder_after_placement[can_fit_mask]

    return priorities
```
