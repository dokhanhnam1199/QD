```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using a Best-Fit-like strategy with amplified preference for tighter fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # First, calculate the "energy cost" of putting the item into each bin:
    # the remaining capacity after the item is placed.
    # We want to minimize this remaining 'empty space' or 'quantum void'.
    potential_new_remain_cap = bins_remain_cap - item

    # Initialize the priority scores. These will represent how 'desirable'
    # a bin is for the incoming item.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # A small 'quantum of tolerance' to avoid division by zero and
    # give a very high but finite score to perfect fits.
    # Think of it as the minimum 'fuzziness' in our measurement of zero.
    epsilon = 1e-9

    # Identify the bins that can actually *contain* the item.
    # Bins where the item would cause the remaining capacity to drop below zero
    # are physically impossible candidates in this classical realm.
    can_fit = potential_new_remain_cap >= 0

    # For the bins that *can* fit the item, we want to reward those that
    # result in the least amount of wasted space. A very small remaining
    # capacity (approaching zero) indicates a near-perfect 'quantization'
    # of the bin's volume by the item.
    # By taking the reciprocal (1 / remaining_space), we ensure that:
    # 1. A perfectly filled bin (remaining_space â‰ˆ 0) gets an extremely high score.
    # 2. Bins with very little remaining space get high scores.
    # 3. Scores drop off sharply as remaining space increases, strongly preferring
    #    tighter fits. This isn't just about 'less space', but 'significantly less space'.
    priority_scores[can_fit] = 1.0 / (potential_new_remain_cap[can_fit] + epsilon)

    # For bins that cannot fit the item, they are "forbidden states".
    # Assign them an infinitely low priority so they are never chosen,
    # forcing the system to consider opening a new bin if no existing bin fits.
    priority_scores[~can_fit] = -np.inf

    return priority_scores
```
