```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin,
    implementing a 'Best Fit' heuristic. This heuristic prioritizes bins
    that will have the smallest remaining capacity after accommodating the item,
    thereby maximizing bin utilization and minimizing wasted space. Bins that
    cannot fit the item receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score for each bin.
        Higher scores indicate a more desirable bin for the current item.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign a very low (negative infinity) priority to bins that cannot
    # accommodate the item, ensuring they are never chosen if a valid option exists.
    IMPOSSIBLE_FIT_PRIORITY = -np.inf

    for i, capacity in enumerate(bins_remain_cap):
        if item <= capacity:
            # For a 'Best Fit' strategy, we want to select the bin that results
            # in the smallest remaining capacity after the item is placed.
            # The remaining capacity would be (capacity - item).
            # To maximize priority for smaller remainders, we take the negative
            # of this difference. A perfect fit (capacity - item == 0) gets
            # the highest priority of 0.0. Snug fits get scores close to 0.0.
            priorities[i] = -(capacity - item)
        else:
            priorities[i] = IMPOSSIBLE_FIT_PRIORITY
            
    return priorities
```
