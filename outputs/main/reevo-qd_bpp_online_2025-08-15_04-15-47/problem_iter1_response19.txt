```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.

    This heuristic prioritizes bins that have enough capacity for the item,
    with a preference for bins that will leave a smaller remaining capacity
    after packing the item. This aims to "fill up" bins more efficiently.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Only consider bins that have enough capacity for the item
    feasible_bins_mask = bins_remain_cap >= item
    
    # Calculate the remaining capacity if the item is placed in a feasible bin
    # This is the difference between the bin's remaining capacity and the item's size
    remaining_capacities_after_packing = bins_remain_cap[feasible_bins_mask] - item

    # We want to prioritize bins that leave a *smaller* remaining capacity after packing.
    # A smaller remaining capacity implies a tighter fit.
    # To use Softmax effectively for prioritization, we typically want higher values
    # to represent higher priority. Thus, we invert the remaining capacities
    # to make smaller remaining capacities result in larger scores.
    # Adding a small epsilon to avoid division by zero or log(0) if a bin
    # becomes exactly full.
    scores = 1.0 / (remaining_capacities_after_packing + 1e-9)
    
    # Apply the Softmax function to convert scores into probabilities (priorities)
    # Softmax ensures that the sum of priorities is 1, but more importantly,
    # it emphasizes differences between scores.
    exp_scores = np.exp(scores)
    probabilities = exp_scores / np.sum(exp_scores)

    # Initialize priorities for all bins to 0
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign the calculated probabilities to the feasible bins
    priorities[feasible_bins_mask] = probabilities

    return priorities
```
