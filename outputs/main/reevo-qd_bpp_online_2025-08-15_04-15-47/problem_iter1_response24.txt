```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    The Exact Fit First strategy prioritizes bins that can fit the item exactly,
    meaning their remaining capacity is equal to the item's size. Among the
    bins that fit exactly, it prioritizes those with the smallest remaining
    capacity (which would be the ones with remaining capacity equal to the item size).
    If no bin fits the item exactly, it falls back to prioritizing bins that
    can simply accommodate the item, favoring those with the least remaining
    capacity (tightest fit among those that can hold the item).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can exactly fit the item
    exact_fit_mask = (bins_remain_cap == item)
    if np.any(exact_fit_mask):
        # For exact fits, assign a very high priority (e.g., infinity)
        # and then sort them by remaining capacity (which is the same for all here)
        # This ensures exact fits are preferred.
        priorities[exact_fit_mask] = np.inf
    else:
        # If no exact fit, find bins that can fit the item
        can_fit_mask = (bins_remain_cap >= item)
        if np.any(can_fit_mask):
            # For bins that can fit, assign priority based on the inverse of
            # the remaining capacity plus a small epsilon to avoid division by zero
            # and to ensure smaller remaining capacity gets higher priority.
            # Adding a large constant to ensure these priorities are lower than exact fits.
            priorities[can_fit_mask] = 1.0 / (bins_remain_cap[can_fit_mask] - item + 1e-9) + 1000.0
        # Bins that cannot fit the item will have a priority of 0 (from initialization)

    return priorities
```
