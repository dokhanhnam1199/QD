```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit.

    The Random Fit strategy randomly picks a bin that can accommodate the item.
    This priority function assigns a higher priority to bins that have just enough
    space for the item, but also introduces a random element to break ties and
    encourage exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Bins that can fit the item get a base priority
    can_fit_mask = bins_remain_cap >= item
    
    # Assign a higher priority to bins that have just enough space (tight fit)
    # This encourages filling bins more completely.
    # We use a small epsilon to handle floating point comparisons.
    epsilon = 1e-9
    tight_fit_mask = (bins_remain_cap - item) < epsilon
    
    # Prioritize tight fits first
    priorities[tight_fit_mask & can_fit_mask] = 1.0
    
    # For bins that are not tight fits but can still fit the item,
    # assign a slightly lower priority.
    priorities[~tight_fit_mask & can_fit_mask] = 0.5
    
    # Add a random component to break ties and encourage exploration.
    # This ensures that even among equally fitting bins, there's a chance
    # to pick a different one.
    random_noise = np.random.rand(len(bins_remain_cap)) * 0.1
    priorities += random_noise
    
    # Set priorities of bins that cannot fit the item to a very low value (or 0)
    priorities[~can_fit_mask] = 0.0
    
    return priorities
```
