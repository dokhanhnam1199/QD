```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    The Worst Fit strategy prioritizes bins that have the most remaining capacity,
    as this leaves more room for future large items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # A bin is only a candidate if it has enough remaining capacity for the item
    candidate_mask = bins_remain_cap >= item
    
    # Initialize priorities to a very low value (or zero) for non-candidates
    priorities = np.full_like(bins_remain_cap, -np.inf) 
    
    # For candidate bins, the priority is their remaining capacity.
    # The higher the remaining capacity, the higher the priority (Worst Fit).
    priorities[candidate_mask] = bins_remain_cap[candidate_mask]
    
    return priorities
```
