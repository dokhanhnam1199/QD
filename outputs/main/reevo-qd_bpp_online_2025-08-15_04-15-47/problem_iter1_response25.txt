```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using inverse distance (proximity fit).

    The priority is calculated as 1 / (remaining_capacity - item_size + epsilon)
    for bins where the item can fit, and 0 otherwise.
    Epsilon is added to avoid division by zero.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero

    # Find bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate priorities for bins where the item can fit
    # Higher priority for bins with smaller remaining capacity (closer fit)
    priorities[can_fit_mask] = 1.0 / (bins_remain_cap[can_fit_mask] - item + epsilon)

    return priorities
```
