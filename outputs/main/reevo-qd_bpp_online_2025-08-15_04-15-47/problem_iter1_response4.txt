```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    Exact Fit First prioritizes bins that can accommodate the item with the least
    remaining capacity after the item is placed. This aims to leave larger contiguous
    spaces in other bins for potentially larger future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # Only consider bins that have enough capacity for the item.
    potential_remaining_capacities = bins_remain_cap - item

    # Initialize priorities to a very low value (negative infinity) for bins that cannot fit the item.
    # This ensures that bins that cannot fit the item will never be selected.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # For bins that can fit the item, calculate the priority.
    # The priority is the negative of the remaining capacity after placing the item.
    # We use negative to ensure higher remaining capacity results in a lower (less prioritized) score,
    # and thus the bin with the smallest remaining capacity (after fitting) gets the highest score.
    can_fit_mask = bins_remain_cap >= item
    priorities[can_fit_mask] = -potential_remaining_capacities[can_fit_mask]

    return priorities
```
