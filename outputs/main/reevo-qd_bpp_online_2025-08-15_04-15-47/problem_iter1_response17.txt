```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit.

    In Random Fit, we consider all bins that can accommodate the item.
    We then randomly select one of these valid bins. To translate this into a
    priority function where higher priority is better, we can assign a high
    priority to bins that can fit the item and a low priority to those that cannot.
    To introduce the "randomness" element for selection, we can add a random
    component to the priority score of the valid bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # Assign a high priority to bins that can fit the item
    # To introduce randomness, we add a random number to these priorities.
    # A simple approach is to use a uniform distribution for the random component.
    # The magnitude of the random component should be small enough not to
    # arbitrarily override the "can fit" decision, but large enough to
    # differentiate between valid bins.
    if np.any(can_fit_mask):
        # Assign a base high priority (e.g., 1.0) to bins that can fit
        priorities[can_fit_mask] = 1.0
        # Add a random value (e.g., between 0 and 0.5) to introduce randomness
        # np.random.rand() generates values in [0.0, 1.0)
        priorities[can_fit_mask] += np.random.rand(np.sum(can_fit_mask)) * 0.5
    
    # Bins that cannot fit will have a priority of 0 (as initialized)

    return priorities
```
