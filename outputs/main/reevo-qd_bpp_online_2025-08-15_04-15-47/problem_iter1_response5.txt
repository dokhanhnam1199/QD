```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).

    This heuristic prioritizes bins that are a "closer fit" for the item.
    Specifically, it calculates the remaining capacity after placing the item
    and uses the inverse of this value as a priority. A smaller remaining
    capacity (i.e., a better fit) will result in a higher priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item is placed in each bin
    potential_remaining_caps = bins_remain_cap - item

    # We only consider bins where the item can actually fit
    # For bins where the item doesn't fit, the priority should be 0
    fit_mask = potential_remaining_caps >= 0

    # Calculate inverse distance (proximity fit)
    # Adding a small epsilon to avoid division by zero for bins that become full
    epsilon = 1e-9
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[fit_mask] = 1.0 / (potential_remaining_caps[fit_mask] + epsilon)

    return priorities
```
