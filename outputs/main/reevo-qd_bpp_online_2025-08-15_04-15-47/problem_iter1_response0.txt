```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using First Fit.

    The First Fit strategy prioritizes bins that can accommodate the item
    and among those, it gives higher priority to bins that have less remaining
    capacity after the item is placed, to encourage tighter packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Find bins that can accommodate the item
    suitable_bins_mask = bins_remain_cap >= item

    # Calculate the remaining capacity after placing the item in suitable bins
    remaining_caps_after_placement = bins_remain_cap[suitable_bins_mask] - item

    # Assign priorities: Higher priority to bins with less remaining capacity after placement
    # This encourages filling bins more completely.
    # We use a large number for bins that cannot fit the item to ensure they are not chosen.
    # For suitable bins, the priority is the inverse of (remaining capacity + 1)
    # to encourage smaller remaining capacities. Adding 1 to avoid division by zero.
    # A simple large negative number for unsuitable bins would also work.
    
    if np.any(suitable_bins_mask):
        # Prioritize bins that can fit the item. Lower remaining capacity after packing = higher priority.
        # We use negative of remaining capacity to make smaller remaining capacities have higher priority.
        priorities[suitable_bins_mask] = -remaining_caps_after_placement
    else:
        # If no bin can fit the item, return an array of zeros or a specific indicator
        # (though in a real online scenario, a new bin would likely be created).
        # For this function's purpose, returning zeros implies no preferred bin among current ones.
        pass

    return priorities
```
