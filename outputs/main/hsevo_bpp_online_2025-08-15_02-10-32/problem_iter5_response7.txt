```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines exact fit prioritization with a scaled preference for tighter fits
    using an exponential decay based on normalized slack, similar to v0 but
    with a more robust normalization for non-exact fits.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit_mask = bins_remain_cap >= item
    
    if not np.any(can_fit_mask):
        return priorities

    fitting_bins_indices = np.where(can_fit_mask)[0]
    fitting_bins_caps = bins_remain_cap[can_fit_mask]
    
    exact_fit_mask = fitting_bins_caps == item
    
    # High priority for exact fits
    priorities[fitting_bins_indices[exact_fit_mask]] = 1e10
    
    non_exact_fitting_indices = fitting_bins_indices[~exact_fit_mask]
    non_exact_fitting_bins_caps = fitting_bins_caps[~exact_fit_mask]
    
    if non_exact_fitting_bins_caps.size > 0:
        # Calculate slack for non-exact fits
        slack = non_exact_fitting_bins_caps - item
        
        # Normalize slack to a [0, 1] range for exponential scaling
        min_slack = np.min(slack)
        max_slack = np.max(slack)

        if max_slack == min_slack:
            # If all slacks are the same, give them a uniform score (lower than exact fit)
            normalized_slack = np.zeros_like(slack)
        else:
            normalized_slack = (slack - min_slack) / (max_slack - min_slack)
        
        # Exponential decay: smaller normalized slack (tighter fit) gets higher score
        # Use exp(-x) so smaller x (tighter fit) gives larger score
        scores = np.exp(-normalized_slack)
        
        # Scale scores to be less than the exact fit priority, but still prioritize tighter non-exact fits
        # Find max score among non-exact fits and scale it slightly below exact fit priority
        max_non_exact_score = np.max(scores)
        if max_non_exact_score > 0:
            scaled_scores = (scores / max_non_exact_score) * 1e9 # Scale to be just below 1e10
        else:
            scaled_scores = np.zeros_like(scores) # Should not happen if slack > 0

        priorities[non_exact_fitting_indices] = scaled_scores
        
    return priorities
```
