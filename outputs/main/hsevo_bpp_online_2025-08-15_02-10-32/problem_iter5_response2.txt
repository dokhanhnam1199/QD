```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with a sigmoid for prioritizing tight fits and relative fill ratio.

    Prioritizes bins that are a tight fit using a sigmoid on slack, and boosts
    priority for bins with a higher fill ratio.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities

    valid_bins_remain_cap = bins_remain_cap[fit_mask]
    
    # Component 1: Best Fit tightness using sigmoid
    # Prioritize bins where the remaining capacity after placing the item is minimal.
    slack = valid_bins_remain_cap - item
    
    # Normalize slack to a range suitable for sigmoid, focusing on smaller slack
    # which indicates a tighter fit. We want smaller slack to yield a higher score.
    min_slack = np.min(slack)
    max_slack = np.max(slack)
    
    if max_slack == min_slack:
        normalized_slack_for_sigmoid = np.zeros_like(slack)
    else:
        # Map slack to a range that gives higher sigmoid input for smaller slack.
        # (max_slack - slack) makes smaller slack values larger.
        transformed_slack = max_slack - slack
        normalized_transformed_slack = transformed_slack / (max_slack - min_slack)
        
    # Apply sigmoid to the normalized transformed slack. Steepness controls sensitivity.
    steepness = 5.0
    sigmoid_input = steepness * (normalized_transformed_slack - 0.5)
    best_fit_score = 1 / (1 + np.exp(-sigmoid_input))

    # Component 2: Relative Fill Ratio (incorporating item size and bin capacity)
    # Prioritize bins that are relatively full with respect to their current remaining capacity.
    # This encourages using bins that already have a significant portion of their capacity used.
    # We use `item / valid_bins_remain_cap` as a proxy for fill ratio.
    # Add a small epsilon to avoid division by zero if remaining capacity is zero (though filtered by fit_mask).
    fill_ratio_score = item / (valid_bins_remain_cap + 1e-9)
    
    # Combine scores: Multiply for synergy. Higher values from both components are preferred.
    # This combines the tightness of the fit (sigmoid) with the relative fullness of the bin.
    priorities[fit_mask] = best_fit_score * fill_ratio_score

    return priorities
```
