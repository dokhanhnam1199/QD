```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    fits = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    available_bins_indices = np.where(fits)[0]
    
    if len(available_bins_indices) > 0:
        available_bins_remain_cap = bins_remain_cap[available_bins_indices]
        
        
        smallest_remaining_capacity = np.min(available_bins_remain_cap)
        largest_remaining_capacity = np.max(available_bins_remain_cap)
        
        if largest_remaining_capacity - smallest_remaining_capacity > 1e-9: 
            normalized_remaining_cap = (available_bins_remain_cap - smallest_remaining_capacity) / (largest_remaining_capacity - smallest_remaining_capacity)
        else:
            normalized_remaining_cap = np.zeros_like(available_bins_remain_cap)

        
        priorities[available_bins_indices] = 1 / (1 + np.exp(-(normalized_remaining_cap - 0.5) * 10))
        
    return priorities
```
