```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by favoring exact fits and then applying a scaled exponential
    decay to the remaining capacity, balancing 'best fit' with a preference for
    tight fits.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    can_fit_mask = bins_remain_cap >= item
    
    if not np.any(can_fit_mask):
        return priorities

    fitting_bins_caps = bins_remain_cap[can_fit_mask]
    
    
    exact_fit_mask = fitting_bins_caps == item
    
    if np.any(exact_fit_mask):
        priorities[can_fit_mask][exact_fit_mask] = 1e10  
    
    
    non_exact_fitting_bins_caps = fitting_bins_caps[~exact_fit_mask]
    non_exact_fitting_indices = np.where(can_fit_mask)[0][~exact_fit_mask]
    
    if non_exact_fitting_bins_caps.size > 0:
        
        relative_capacities = non_exact_fitting_bins_caps - item
        
        
        min_relative_capacity = np.min(relative_capacities)
        max_relative_capacity = np.max(relative_capacities)

        
        if max_relative_capacity == min_relative_capacity:
            scaled_relative_capacities = np.zeros_like(relative_capacities)
        else:
            
            scaled_relative_capacities = (relative_capacities - min_relative_capacity) / (max_relative_capacity - min_relative_capacity)
        
        
        priorities[non_exact_fitting_indices] = np.exp(-scaled_relative_capacities)
        
    
    if np.any(exact_fit_mask):
        priorities[can_fit_mask][exact_fit_mask] = np.max(priorities[can_fit_mask][~exact_fit_mask]) * 1.1 if np.any(~exact_fit_mask) else 1e10
        
    
    priorities[~can_fit_mask] = 0.0
    
    return priorities
```
