```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Implements the Inverse Distance (Proximity Fit) heuristic for the Online Bin Packing Problem.

    This heuristic prioritizes bins that have a remaining capacity closest to the item's size.
    The closer the remaining capacity is to the item size, the higher the priority.
    Bins that cannot fit the item are given a priority of 0.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    fit_indices = np.where(bins_remain_cap >= item)[0]
    
    if fit_indices.size > 0:
        fitting_bins_cap = bins_remain_cap[fit_indices]
        
        # Calculate the difference between remaining capacity and item size
        differences = fitting_bins_cap - item
        
        # Use the inverse of the difference (plus a small epsilon to avoid division by zero)
        # A smaller difference means the bin is a better fit, thus a higher priority.
        # Adding 1 to the difference and then taking the inverse (1/(diff+1)) ensures
        # that perfectly fitting bins (diff=0) get the highest priority (1) and
        # bins with larger differences get lower priorities.
        priorities[fit_indices] = 1.0 / (differences + 1.0)
        
        # Normalize priorities to be between 0 and 1, although the inverse already
        # tends to keep them in a reasonable range. This ensures a consistent scale.
        max_priority = np.max(priorities[fit_indices])
        if max_priority > 0:
            priorities[fit_indices] /= max_priority

    return priorities
```
