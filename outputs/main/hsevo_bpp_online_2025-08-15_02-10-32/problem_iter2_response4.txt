```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit with an exponential preference for tighter fits.
    Prioritizes bins that can exactly fit the item, then favors bins with
    less remaining capacity among those that can accommodate the item.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    
    if np.any(can_fit_mask):
        # Calculate the difference for fitting bins
        diffs = fitting_bins_remain_cap - item
        
        # Assign priorities: higher for exact fits, then inverse of remaining capacity (Best Fit)
        # A small epsilon is added to avoid division by zero and to ensure exact fits have highest priority
        priorities[can_fit_mask] = np.exp(-diffs) * (1.0 / (fitting_bins_remain_cap + 1e-9))
        
        # Further boost exact fits (where diff is zero)
        exact_fit_mask_for_fitting = (diffs == 0)
        priorities[can_fit_mask][exact_fit_mask_for_fitting] = 1.0 # Highest priority for exact fits
        
    return priorities
```
