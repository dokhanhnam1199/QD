```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on inverse distance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # We want to prioritize bins that are closer to fitting the item perfectly.
    # This is a heuristic to try and reduce wasted space by using bins that
    # have just enough capacity.
    # The inverse distance (proximity fit) suggests giving higher priority
    # to bins where the remaining capacity is close to the item size.
    
    # Calculate the difference between the item size and the remaining capacity of each bin.
    # We only consider bins where the item can actually fit.
    valid_bins_mask = bins_remain_cap >= item
    
    # For bins where the item fits, calculate the "proximity score".
    # A smaller difference means a better fit, so we want a higher priority for smaller differences.
    # We can use the inverse of the difference. To avoid division by zero or very small numbers,
    # we can add a small epsilon.
    differences = bins_remain_cap[valid_bins_mask] - item
    epsilon = 1e-6
    priorities[valid_bins_mask] = 1.0 / (differences + epsilon)
    
    # Normalize priorities to a reasonable scale if needed, but for direct comparison,
    # the relative values are important. The current approach prioritizes bins
    # with less remaining space *after* fitting the item.
    
    # An alternative perspective: if we have multiple bins with same "tightness",
    # which one should we prefer? Perhaps the one with more remaining capacity
    # to be available for future items? This heuristic doesn't directly account for that,
    # it purely focuses on the current best fit.
    
    return priorities
```
