```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_cap = bins_remain_cap[valid_bins_mask]

    if valid_bins_cap.size == 0:
        return np.zeros_like(bins_remain_cap)

    fit_scores = valid_bins_cap / (valid_bins_cap - item + 1e-9)
    
    # Sigmoid transformation
    # Center the sigmoid around a reasonable "ideal" fit (e.g., close to 1.0)
    # A higher score indicates a better fit (closer to perfect utilization)
    centered_scores = fit_scores - 1.0  # Shift scores so that perfect fit (score 1) is at 0
    priorities = 1 / (1 + np.exp(-centered_scores * 5)) # Scale factor 5 for steeper sigmoid

    # Map priorities back to the original bins_remain_cap array
    original_priorities = np.zeros_like(bins_remain_cap, dtype=float)
    original_priorities[valid_bins_mask] = priorities
    
    return original_priorities
```
