```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    suitable_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    suitable_bins_capacities = bins_remain_cap[suitable_bins_mask]
    if suitable_bins_capacities.size > 0:
        relative_capacities = suitable_bins_capacities - item
        exp_priorities = np.exp(relative_capacities)
        priorities[suitable_bins_mask] = exp_priorities / np.sum(exp_priorities)
    return priorities
```
