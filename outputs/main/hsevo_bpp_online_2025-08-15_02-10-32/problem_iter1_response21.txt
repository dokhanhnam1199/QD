```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    eligible_bins_mask = bins_remain_cap >= item
    eligible_bins_remain_cap = bins_remain_cap[eligible_bins_mask]

    if eligible_bins_remain_cap.size == 0:
        return np.zeros_like(bins_remain_cap)

    differences = eligible_bins_remain_cap - item
    min_difference = np.min(differences)

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_indices = np.where(eligible_bins_mask)[0]

    for i, idx in enumerate(eligible_indices):
        if bins_remain_cap[idx] - item == min_difference:
            priorities[idx] = 1.0
        else:
            priorities[idx] = 0.0

    return priorities
```
