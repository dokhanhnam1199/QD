```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines 'Best Fit' with an adaptive penalty for large slack, scaled by item size.

    This heuristic prioritizes bins that result in the smallest remaining capacity after packing
    (Best Fit), while also penalizing bins where the slack (remaining capacity - item) is large
    relative to the item's size. The penalty's impact is amplified for larger items.
    """
    epsilon_small = 1e-9
    priorities = np.full_like(bins_remain_cap, -np.inf)

    fitting_indices = np.where(bins_remain_cap >= item)[0]

    if fitting_indices.size > 0:
        suitable_bins_remain_cap = bins_remain_cap[fitting_indices]
        
        # Component 1: Best Fit score (higher is better)
        # Maximizes -(remaining_capacity - item), which is equivalent to minimizing (remaining_capacity - item)
        best_fit_score = -(suitable_bins_remain_cap - item)

        # Component 2: Adaptive Slack Penalty score (higher is better for smaller slack)
        # Calculates slack relative to item size: (remaining_cap - item) / item
        # We want to reward smaller relative slack. So, we use 1.0 / (relative_slack + 1.0).
        # The weight `item / (np.mean(bins_remain_cap[bins_remain_cap > 0]) + epsilon_small)`
        # makes the penalty more influential for larger items.
        avg_positive_cap = np.mean(bins_remain_cap[bins_remain_cap > 0]) if np.any(bins_remain_cap > 0) else 1.0
        weight_for_slack = item / (avg_positive_cap + epsilon_small)
        
        relative_slack = (suitable_bins_remain_cap - item) / (item + epsilon_small)
        
        # The score component is higher when relative_slack is low.
        adaptive_slack_score = weight_for_slack * (1.0 / (relative_slack + 1.0))

        # Combine scores additively. Best fit is the base, adaptive slack provides refinement.
        combined_priority = best_fit_score + adaptive_slack_score
        
        priorities[fitting_indices] = combined_priority

    return priorities
```
