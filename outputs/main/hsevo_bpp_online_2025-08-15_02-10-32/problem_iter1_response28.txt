```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    epsilon = 0.1
    best_fit_bin_idx = np.argmax(bins_remain_cap >= item)
    
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            remaining_cap = bins_remain_cap[i] - item
            priorities[i] = remaining_cap
        else:
            priorities[i] = -float('inf')
            
    if np.random.rand() < epsilon:
        random_bin_idx = np.random.choice(np.where(bins_remain_cap >= item)[0])
        priorities[random_bin_idx] = 1e9
    else:
        if np.any(bins_remain_cap >= item):
            priorities[best_fit_bin_idx] += (priorities.max() - priorities[best_fit_bin_idx]) * 0.5

    return priorities
```
