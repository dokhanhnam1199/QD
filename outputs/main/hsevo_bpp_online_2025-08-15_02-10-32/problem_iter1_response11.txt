```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Implements a Best Fit strategy for online Bin Packing.

    The priority is higher for bins that have just enough remaining capacity
    to fit the item, favoring a tighter fit. A penalty is applied to bins
    that have too much excess capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap >= item:
            # Reward bins that are a close fit
            difference = remaining_cap - item
            # Prioritize bins where the difference is small (close to 0)
            # We use 1/(1+difference) to give higher priority to smaller differences
            # Adding a small epsilon to avoid division by zero if difference is exactly 0
            priority_score = 1.0 / (1.0 + difference + 1e-9)
            # Further penalize bins with very large remaining capacity
            # This term becomes smaller as the remaining capacity increases beyond what's needed
            excess_penalty = np.exp(-remaining_cap / 10.0) # Adjust divisor for sensitivity
            priorities[i] = priority_score * excess_penalty
        else:
            # Bins that cannot fit the item get a very low priority (effectively zero)
            priorities[i] = -np.inf
    return priorities
```
