```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins_mask = bins_remain_cap >= item
    
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    if np.any(valid_bins_mask):
        valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]
        
        # Inverse distance to remaining capacity (closer to item size is better)
        # Add a small epsilon to avoid division by zero if item == bin_remain_cap
        inverse_distance = 1.0 / (valid_bins_remain_cap - item + 1e-9)
        
        # Normalize priorities to prevent extremely large values if remaining capacity is very close to item size
        # And also to give a more balanced distribution if many bins are suitable
        if np.max(inverse_distance) > 0:
            normalized_priorities = inverse_distance / np.max(inverse_distance)
        else:
            normalized_priorities = np.zeros_like(inverse_distance)

        priorities[valid_bins_mask] = normalized_priorities
        
        # Give a slight preference to bins that are almost full, as they are less likely to be used later
        # by smaller items (heuristic inspired by First Fit Decreasing but applied online)
        # This can be achieved by giving higher priority to bins with less remaining capacity
        # relative to the item size.
        priorities[valid_bins_mask] = priorities[valid_bins_mask] * (1.0 / (bins_remain_cap[valid_bins_mask] + 1e-9))

    return priorities
```
