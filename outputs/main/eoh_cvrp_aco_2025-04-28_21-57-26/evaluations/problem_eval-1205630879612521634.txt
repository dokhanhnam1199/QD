import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples random routes, evaluates their feasibility and cost, and then uses the edge frequencies in feasible and low-cost routes to construct a heuristic matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    feasible_edge_counts = np.zeros_like(distance_matrix)
    total_edge_counts = np.zeros_like(distance_matrix)
    
    best_cost = float('inf')

    for _ in range(num_samples):
        
        # Sample a random permutation of customers (excluding the depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        # Construct routes
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0

        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route from depot
                current_load = demands[customer]

        current_route.append(0) #Return to depot
        routes.append(current_route)

        # Calculate the cost of the routes
        total_cost = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_cost += distance_matrix[route[i]][route[i+1]]
        
        # Update the edge counts in the matrix
        for route in routes:
            for i in range(len(route) - 1):
                u, v = route[i], route[i+1]
                total_edge_counts[u][v] +=1
                total_edge_counts[v][u] +=1 #Symmetry

        # Only update feasiable edge counts in routes that are feasiable
        if total_cost < float('inf'):
            for route in routes:
                for i in range(len(route) - 1):
                    u, v = route[i], route[i+1]
                    feasible_edge_counts[u][v] +=1
                    feasible_edge_counts[v][u] +=1 #Symmetry
        
    # Calculate the heuristic values based on edge frequencies
    for i in range(n):
        for j in range(n):
            if total_edge_counts[i][j] > 0:
                heuristics_matrix[i][j] = feasible_edge_counts[i][j] / total_edge_counts[i][j]
            else:
                heuristics_matrix[i][j] = 0
                
    return heuristics_matrix
