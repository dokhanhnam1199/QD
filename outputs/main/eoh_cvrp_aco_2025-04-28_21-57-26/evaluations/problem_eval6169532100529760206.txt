import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm refines a heuristic matrix by emphasizing distance and capacity considerations, while introducing randomness to diversify the search and favoring connections to the depot.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 50
    depot_proximity_bonus = 0.5 #Bonus for edges connected to depot

    for _ in range(num_iterations):
        for i in range(n):
            for j in range(n):
                if i == j:
                    continue

                #Emphasize shorter distances
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)

                #Capacity check: penalize edges that would overload the route
                capacity_penalty = 0
                if i!=0 and j!=0:
                  if demands[i] + demands[j] > capacity:
                      capacity_penalty = -1
                
                #Introduce randomness
                random_factor = random.uniform(-0.1, 0.1)

                #Favor connections to the depot
                depot_bonus_i = depot_proximity_bonus if i == 0 else 0
                depot_bonus_j = depot_proximity_bonus if j == 0 else 0

                heuristics_matrix[i, j] += (distance_factor + capacity_penalty + random_factor + depot_bonus_i + depot_bonus_j)

    return heuristics_matrix
