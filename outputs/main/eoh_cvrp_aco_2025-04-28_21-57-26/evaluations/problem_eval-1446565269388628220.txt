import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a large number of random routes, evaluates their feasibility and cost, and then uses the frequency with which each edge appears in feasible, low-cost routes to estimate its desirability.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        permutation = np.random.permutation(range(1, n))
        
        # Construct routes based on the permutation and capacity constraints
        routes = []
        current_route = [0]
        current_load = 0
        
        for customer in permutation:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]
        
        current_route.append(0)
        routes.append(current_route)
        
        # Calculate the total distance of the routes
        total_distance = 0
        feasible = True
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i+1]]

        # Update the heuristics matrix based on the edges in the routes
        if feasible:
            for route in routes:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i], route[i+1]] += 1
                    heuristics_matrix[route[i+1], route[i]] += 1
                    
    # Normalize the heuristics matrix
    heuristics_matrix /= num_samples
    
    return heuristics_matrix
