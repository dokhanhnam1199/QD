import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a large number of random routes, evaluates their feasibility and cost, and uses the frequency of edge appearance in feasible routes weighted by route cost to construct a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        permutation = np.random.permutation(range(1, n))
        
        # Construct routes
        routes = []
        current_route = [0]
        current_capacity = 0
        
        for customer in permutation:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_capacity = demands[customer]

        current_route.append(0)
        routes.append(current_route)
        
        # Calculate route cost and check feasibility
        total_cost = 0
        is_feasible = True
        for route in routes:
            if len(route) > 1:
                route_demand = sum([demands[i] for i in route if i !=0 ])
                if route_demand > capacity:
                   is_feasible = False
                   break 
                for i in range(len(route) - 1):
                    total_cost += distance_matrix[route[i], route[i+1]]
        
        # Update heuristics matrix if feasible
        if is_feasible and total_cost > 0:
            for route in routes:
                for i in range(len(route) - 1):
                    u = route[i]
                    v = route[i+1]
                    heuristics_matrix[u, v] += 1.0 / total_cost
                    heuristics_matrix[v, u] += 1.0 / total_cost  # Ensure symmetry

    return heuristics_matrix
