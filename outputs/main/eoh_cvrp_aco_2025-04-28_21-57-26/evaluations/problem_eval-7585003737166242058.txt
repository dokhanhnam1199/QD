import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm estimates edge inclusion probabilities by sampling random routes, checking for feasibility, and updating edge counts based on route success.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        # Build routes
        routes = []
        current_route = [0]  # Start at the depot
        current_capacity = 0
        
        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0) #Return to depot
                routes.append(current_route)
                current_route = [0,customer] # Start new route from depot
                current_capacity = demands[customer]

        current_route.append(0)  # End at depot
        routes.append(current_route)

        # Update heuristics matrix based on routes
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1

    # Normalize heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
