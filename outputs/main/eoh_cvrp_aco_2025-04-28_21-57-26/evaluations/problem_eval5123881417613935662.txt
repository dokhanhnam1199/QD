import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm combines stochastic route generation with a learning mechanism that reinforces edges appearing in high-quality routes, favoring routes that balance distance and capacity utilization.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 100
    alpha = 0.8  # Weight for distance in route quality
    beta = 0.2   # Weight for capacity utilization in route quality

    for _ in range(num_samples):
        unvisited = set(range(1, n))
        routes = []
        current_route = [0]
        current_capacity = capacity
        total_distance = 0

        while unvisited:
            next_node = None
            best_score = float('inf')

            possible_nodes = list(unvisited)
            np.random.shuffle(possible_nodes)

            for node in possible_nodes:
                if demands[node] <= current_capacity:
                    distance = distance_matrix[current_route[-1]][node]
                    score = distance
                    if score < best_score:
                        best_score = score
                        next_node = node

            if next_node is not None:
                total_distance += distance_matrix[current_route[-1]][next_node]
                current_route.append(next_node)
                current_capacity -= demands[next_node]
                unvisited.remove(next_node)
            else:
                total_distance += distance_matrix[current_route[-1]][0]
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_capacity = capacity
        
        if current_route != [0]:
            total_distance += distance_matrix[current_route[-1]][0]
            current_route.append(0)
            routes.append(current_route)
        
        # Calculate a route quality score
        total_demand = sum(demands[node] for route in routes for node in route)
        capacity_utilization = min(1, total_demand / (len(routes) * capacity + 1e-9))  # Avoid division by zero
        route_quality = alpha * (1 / (total_distance + 1e-9)) + beta * capacity_utilization

        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1][node2] += route_quality
                heuristics_matrix[node2][node1] += route_quality

    return heuristics_matrix
