import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples multiple random routes, evaluates their feasibility with respect to capacity constraints, and aggregates edge occurrences in feasible routes to create a heuristic matrix indicating edge desirability.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        # Build routes based on capacity constraint
        routes = []
        current_route = [0]  # Start at the depot
        current_demand = 0
        
        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_demand = demands[customer]

        routes.append(current_route + [0])  # End the last route with return to depot
        
        # Flatten routes into a single sequence of visited nodes
        flat_route = []
        for route in routes:
            flat_route.extend(route[:-1])
        flat_route.append(0)
        
        # Update heuristics matrix based on edge occurrences in this sample
        for i in range(len(flat_route) - 1):
            node1 = flat_route[i]
            node2 = flat_route[i + 1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
