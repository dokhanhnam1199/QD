import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs routes using a guided random walk, prioritizing nodes based on a combination of distance, demand, and a dynamic exploration factor that encourages diversification and intensification.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    exploration_factor = np.ones(n)  # Dynamic exploration factor for each node

    num_iterations = 500

    for _ in range(num_iterations):
        current_route = [0]
        remaining_nodes = set(range(1, n))
        current_capacity = capacity

        while remaining_nodes:
            feasible_nodes = [node for node in remaining_nodes if demands[node] <= current_capacity]

            if not feasible_nodes:
                current_route.append(0)
                current_capacity = capacity
                feasible_nodes = [node for node in remaining_nodes if demands[node] <= current_capacity]
                if not feasible_nodes:
                  break #break if no feasible node from depot
            
            if not feasible_nodes:
              break

            scores = {}
            for node in feasible_nodes:
                distance = distance_matrix[current_route[-1], node]
                score = (1 / (distance + 1e-6)) * (1 - (demands[node] / capacity)) * exploration_factor[node]
                scores[node] = score

            total_score = sum(scores.values())
            if total_score == 0:
              next_node = random.choice(feasible_nodes)
            else:
              probabilities = {node: score / total_score for node, score in scores.items()}
              next_node = np.random.choice(list(probabilities.keys()), p=list(probabilities.values()))

            current_route.append(next_node)
            current_capacity -= demands[next_node]
            remaining_nodes.remove(next_node)

            # Update exploration factors (diversification/intensification)
            for node in range(1, n):
                if node == next_node:
                    exploration_factor[node] *= 0.9  # Intensify: Reduce factor for recently visited
                else:
                    exploration_factor[node] *= 1.1  # Diversify: Increase factor for unvisited

            exploration_factor = np.clip(exploration_factor, 0.5, 2.0)  # Keep factors within bounds

        current_route.append(0)

        for i in range(len(current_route) - 1):
            node1 = current_route[i]
            node2 = current_route[i + 1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    for i in range(n):
        for j in range(n):
            if heuristics_matrix[i, j] > 0:
                heuristics_matrix[i, j] /= (distance_matrix[i, j] + 1e-6)

    return heuristics_matrix
