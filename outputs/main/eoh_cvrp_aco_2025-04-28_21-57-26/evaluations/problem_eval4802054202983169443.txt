import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm estimates edge inclusion probabilities by generating multiple random feasible routes and counting edge occurrences.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100  # Number of random feasible solutions to generate
    
    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)
        
        # Construct routes based on capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_capacity = 0
        
        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route from depot
                current_capacity = demands[customer]
                
        current_route.append(0)  # Return to depot after last customer
        routes.append(current_route)
        
        # Update edge counts in the heuristics matrix
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1  # Since the graph is undirected
    
    # Normalize the edge counts to obtain probabilities
    heuristics_matrix /= num_samples
    
    return heuristics_matrix
