import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm generates multiple random routes satisfying capacity constraints, and aggregates edge frequencies to produce a heuristic matrix.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 100

    for _ in range(num_samples):
        unvisited = set(range(1, n))
        routes = []
        current_route = [0]
        current_capacity = capacity

        while unvisited:
            next_node = None
            best_score = float('inf')
            
            possible_nodes = list(unvisited)
            np.random.shuffle(possible_nodes) # Randomize search
            
            for node in possible_nodes:
                if demands[node] <= current_capacity:
                    score = distance_matrix[current_route[-1]][node] 
                    if score < best_score:
                        best_score = score
                        next_node = node

            if next_node is not None:
                current_route.append(next_node)
                current_capacity -= demands[next_node]
                unvisited.remove(next_node)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_capacity = capacity

        if current_route != [0]:
             current_route.append(0)
             routes.append(current_route)
            
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1][node2] += 1
                heuristics_matrix[node2][node1] += 1

    return heuristics_matrix
