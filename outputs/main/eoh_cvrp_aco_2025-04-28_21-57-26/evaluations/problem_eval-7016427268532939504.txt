import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm generates multiple random routes, evaluates their feasibility with respect to capacity constraints, and then uses the frequency of each edge appearing in feasible routes to construct a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000  # Number of random routes to generate
    valid_routes_count = 0

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        # Build routes based on the random permutation
        routes = []
        current_route = [0]  # Start at the depot
        current_capacity = 0
        
        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route
                current_capacity = demands[customer]

        current_route.append(0)
        routes.append(current_route)

        # Check the validity of the solution
        valid_route = True
        for route in routes:
            current_capacity = 0
            for node in route:
                current_capacity += demands[node]
            if current_capacity > capacity:
                valid_route = False
                break

        if valid_route:
            valid_routes_count += 1
            # Update the heuristic matrix based on the edges in this route
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1

    # Normalize the heuristic matrix
    if valid_routes_count > 0:
        heuristics_matrix = heuristics_matrix / valid_routes_count
    else:
        heuristics_matrix = np.ones_like(distance_matrix) * 0.001 # Assign tiny prior probability to everything to avoid division by zero later

    return heuristics_matrix
