import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively constructs routes by adding the nearest unvisited node to the current route until capacity is reached, then returns to the depot and repeats.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)

    unvisited_nodes = set(range(1, n))
    routes = []

    while unvisited_nodes:
        current_route = [0]
        current_capacity = 0
        current_node = 0

        while True:
            nearest_node = None
            min_distance = float('inf')

            for neighbor in unvisited_nodes:
                if demands[neighbor] + current_capacity <= capacity:
                    distance = distance_matrix[current_node, neighbor]
                    if distance < min_distance:
                        min_distance = distance
                        nearest_node = neighbor

            if nearest_node is None:
                break

            current_route.append(nearest_node)
            current_capacity += demands[nearest_node]
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node

        current_route.append(0)
        routes.append(current_route)

    for route in routes:
        for i in range(len(route) - 1):
            node1 = route[i]
            node2 = route[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    for i in range(n):
        for j in range(n):
            if heuristics_matrix[i, j] > 0:
                heuristics_matrix[i, j] /= distance_matrix[i, j]

    return heuristics_matrix
