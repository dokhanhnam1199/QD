import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm uses simulated annealing to iteratively improve routes and builds a heuristic matrix based on the frequency of edges in accepted solutions.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 200
    temperature = 100
    cooling_rate = 0.95

    def calculate_route_cost(route):
        cost = 0
        for i in range(len(route) - 1):
            cost += distance_matrix[route[i]][route[i+1]]
        return cost

    def create_initial_solution():
        unvisited = list(range(1, n))
        routes = []
        current_route = [0]
        current_capacity = capacity

        while unvisited:
            next_node = random.choice(unvisited)
            if demands[next_node] <= current_capacity:
                current_route.append(next_node)
                current_capacity -= demands[next_node]
                unvisited.remove(next_node)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_capacity = capacity

        if current_route != [0]:
            current_route.append(0)
            routes.append(current_route)
        return routes

    best_solution = create_initial_solution()
    best_cost = sum(calculate_route_cost(route) for route in best_solution)

    for _ in range(num_iterations):
        new_solution = create_initial_solution()  # Generate neighbor by creating new solution
        new_cost = sum(calculate_route_cost(route) for route in new_solution)
        
        cost_difference = new_cost - best_cost
        
        if cost_difference < 0 or random.random() < np.exp(-cost_difference / temperature):
            best_solution = new_solution
            best_cost = new_cost

        temperature *= cooling_rate
    
    for route in best_solution:
        for i in range(len(route) - 1):
            node1 = route[i]
            node2 = route[i + 1]
            heuristics_matrix[node1][node2] += 1
            heuristics_matrix[node2][node1] += 1
    
    return heuristics_matrix
