import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs routes probabilistically, favoring shorter distances and penalizing routes that exceed capacity, and then uses these routes to build a heuristic matrix.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 100

    for _ in range(num_samples):
        unvisited_nodes = set(range(1, n))
        routes = []
        current_route = [0]
        current_demand = 0

        while unvisited_nodes:
            feasible_nodes = [node for node in unvisited_nodes if current_demand + demands[node] <= capacity]

            if not feasible_nodes:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_demand = 0
                feasible_nodes = [node for node in unvisited_nodes if current_demand + demands[node] <= capacity]
                if not feasible_nodes:
                    break

            probabilities = []
            total_prob = 0
            for node in feasible_nodes:
                distance = distance_matrix[current_route[-1], node]
                probability = 1 / (distance + 1e-6)  # Avoid division by zero
                probabilities.append(probability)
                total_prob += probability

            if total_prob > 0:
                probabilities = [p / total_prob for p in probabilities]
                nearest_node = random.choices(feasible_nodes, probabilities)[0]
            else:
                nearest_node = random.choice(feasible_nodes)


            current_route.append(nearest_node)
            current_demand += demands[nearest_node]
            unvisited_nodes.remove(nearest_node)

        if current_route != [0]:
            current_route.append(0)
            routes.append(current_route)

        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1
    
    for i in range(n):
        for j in range(n):
            if heuristics_matrix[i, j] > 0:
                heuristics_matrix[i, j] /= distance_matrix[i, j]

    return heuristics_matrix
