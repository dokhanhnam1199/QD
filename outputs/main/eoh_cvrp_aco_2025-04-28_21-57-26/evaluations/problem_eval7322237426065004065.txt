import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples many random routes, evaluates their feasibility under capacity constraints, and then calculates edge usage frequencies to estimate the desirability of including each edge in an optimal solution.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000  # Number of random routes to sample
    valid_routes = 0

    for _ in range(num_samples):
        # Generate a random permutation of customer nodes (excluding the depot)
        route_permutation = random.sample(range(1, n), n - 1)

        # Create routes based on capacity constraints
        routes = []
        current_route = [0]  # Start from the depot
        current_demand = 0

        for node in route_permutation:
            if current_demand + demands[node] <= capacity:
                current_route.append(node)
                current_demand += demands[node]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, node]  # Start a new route from depot
                current_demand = demands[node]
        current_route.append(0) # Back to depot
        routes.append(current_route)

        # Check route feasibility: ensure demand constraint
        is_feasible = True
        for route in routes:
            total_demand = sum(demands[node] for node in route)
            if total_demand > capacity:
                is_feasible = False
                break
        
        if is_feasible:
            valid_routes += 1

            # Update heuristics matrix based on edge usage in the valid route
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1 #ensure symetry
    if valid_routes > 0:
      heuristics_matrix = heuristics_matrix / valid_routes
    else:
        heuristics_matrix = np.zeros_like(distance_matrix) #return 0 matrix if no valid routes are found
        
    return heuristics_matrix
