import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm generates routes using a probabilistic selection based on distance and remaining capacity, favoring closer nodes with available capacity and updating the heuristic matrix based on edge frequency.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 100
    alpha = 1.0  # Adjust this parameter to control exploration vs. exploitation

    for _ in range(num_samples):
        unvisited = set(range(1, n))
        routes = []
        current_route = [0]
        current_capacity = capacity

        while unvisited:
            probabilities = []
            possible_nodes = [node for node in unvisited if demands[node] <= current_capacity]

            if not possible_nodes:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_capacity = capacity
                continue  # Back to the top of the while loop to start a new route

            for node in possible_nodes:
                distance = distance_matrix[current_route[-1]][node]
                #Probability inversely proportional to distance. 
                probabilities.append(np.exp(-alpha * distance))

            # Normalize probabilities
            probabilities = np.array(probabilities)
            probabilities /= np.sum(probabilities)

            # Choose next node based on probabilities
            next_node = np.random.choice(possible_nodes, p=probabilities)

            current_route.append(next_node)
            current_capacity -= demands[next_node]
            unvisited.remove(next_node)

        if current_route != [0]:
            current_route.append(0)
            routes.append(current_route)

        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1][node2] += 1
                heuristics_matrix[node2][node1] += 1

    return heuristics_matrix
