import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively constructs routes by adding the nearest feasible node to the current route until capacity is reached, then starts a new route.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)

    unvisited_nodes = set(range(1, n))
    routes = []
    current_route = [0]
    current_demand = 0

    while unvisited_nodes:
        nearest_node = None
        min_distance = float('inf')

        for node in unvisited_nodes:
            if current_demand + demands[node] <= capacity:
                distance = distance_matrix[current_route[-1], node]
                if distance < min_distance:
                    min_distance = distance
                    nearest_node = node

        if nearest_node is not None:
            current_route.append(nearest_node)
            current_demand += demands[nearest_node]
            unvisited_nodes.remove(nearest_node)
        else:
            current_route.append(0)
            routes.append(current_route)
            current_route = [0]
            current_demand = 0

    if current_route != [0]:
        current_route.append(0)
        routes.append(current_route)
    
    for route in routes:
        for i in range(len(route) - 1):
            node1 = route[i]
            node2 = route[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
    
    for i in range(n):
        for j in range(n):
            if heuristics_matrix[i, j] > 0:
                heuristics_matrix[i, j] /= distance_matrix[i, j]

    return heuristics_matrix
