import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm combines the savings-based route construction with stochastic sampling to explore diverse route configurations and estimate edge importance based on their frequency in promising solutions.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 500

    for _ in range(num_samples):
        # Savings-based route construction with a stochastic element
        routes = [[i] for i in range(1, n)]
        route_demands = {i: demands[i] for i in range(1, n)}
        
        # Savings Matrix
        savings = np.zeros((n, n))
        for i in range(1, n):
            for j in range(i+1, n):
                savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
                savings[j, i] = savings[i, j]

        
        while True:
            possible_merges = []
            for i in range(len(routes)):
                for j in range(len(routes)):
                    if i != j:
                        #Check if merge is possible
                        if routes[i][-1] != 0 and routes[j][0] != 0:
                          if sum(demands[node] for node in routes[i] + routes[j]) <= capacity:
                              possible_merges.append((i,j))
            
            if not possible_merges:
                break

            #Stochastic Selection of merges
            merge_index = random.randint(0, len(possible_merges)-1)
            route_i_index, route_j_index = possible_merges[merge_index]

            route_i = routes[route_i_index]
            route_j = routes[route_j_index]
          
            
            # Update Heuristics Matrix
            for node1 in route_i:
                for node2 in route_j:
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1

            routes[route_i_index] = route_i + route_j
            del routes[route_j_index]
            if route_j_index < route_i_index:
              pass
            else:
              pass
    return heuristics_matrix
