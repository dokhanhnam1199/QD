import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples a large number of random routes, evaluates their feasibility with respect to capacity constraints, and then uses the frequency with which each edge appears in feasible routes to construct a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        permutation = np.random.permutation(range(1, n))
        
        # Build routes based on capacity
        routes = []
        current_route = [0]
        current_demand = 0
        
        for customer in permutation:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_demand = demands[customer]
        
        current_route.append(0)
        routes.append(current_route)
        

        # Update heuristics matrix based on edges in the routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1  # Assuming symmetric distance matrix

    # Normalize the matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
