import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively constructs routes by adding a randomly selected feasible node to the current route until the vehicle's capacity is reached, then returns to the depot and repeats until all nodes are visited.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    unvisited_nodes = set(range(1, n))
    routes = []
    
    while unvisited_nodes:
        current_route = [0]
        current_capacity = capacity
        current_node = 0
        
        while True:
            feasible_nodes = [node for node in unvisited_nodes if demands[node] <= current_capacity]
            
            if not feasible_nodes:
                current_route.append(0)
                routes.append(current_route)
                break
            else:
                nearest_node = random.choice(feasible_nodes)
                current_route.append(nearest_node)
                current_capacity -= demands[nearest_node]
                current_node = nearest_node
                unvisited_nodes.remove(nearest_node)
                
    for route in routes:
        for i in range(len(route) - 1):
            node1 = route[i]
            node2 = route[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
    
    for i in range(n):
        for j in range(n):
            if heuristics_matrix[i, j] > 0:
                heuristics_matrix[i, j] /= distance_matrix[i, j]
    
    return heuristics_matrix
