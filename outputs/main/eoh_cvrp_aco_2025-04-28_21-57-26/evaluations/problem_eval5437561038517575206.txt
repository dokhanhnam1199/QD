import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm uses a Monte Carlo approach to estimate the probability of each edge being part of an optimal CVRP solution by generating random solutions and penalizing edges used in infeasible routes.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000
    penalty_factor = 10  # Penalty for infeasible routes

    for _ in range(num_samples):
        # Generate a random tour
        nodes = list(range(1, n))
        random.shuffle(nodes)
        tour = [0] + nodes + [0]

        # Check feasibility and calculate cost
        total_cost = 0
        is_feasible = True
        current_capacity = 0
        route_start = 0
        
        for i in range(len(tour) - 1):
            u = tour[i]
            v = tour[i+1]
            
            if u != 0:
              current_capacity += demands[u]

            total_cost += distance_matrix[u, v]
            
            if v == 0:
              if current_capacity > capacity:
                is_feasible = False
                break
              current_capacity = 0
        
        if current_capacity > 0 and current_capacity > capacity:
            is_feasible = False
            

        # Update heuristics matrix
        for i in range(len(tour) - 1):
            u = tour[i]
            v = tour[i+1]
            
            if is_feasible:
                heuristics_matrix[u, v] += 1.0
                heuristics_matrix[v, u] += 1.0
            else:
                heuristics_matrix[u, v] -= 1.0 * penalty_factor
                heuristics_matrix[v, u] -= 1.0 * penalty_factor
    
    # Normalize
    max_val = np.max(heuristics_matrix)
    min_val = np.min(heuristics_matrix)

    if max_val != min_val:
      heuristics_matrix = (heuristics_matrix - min_val) / (max_val - min_val)
    else:
        heuristics_matrix = np.ones_like(heuristics_matrix) # if all values are same

    return heuristics_matrix
