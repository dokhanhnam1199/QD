import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a large number of random routes, evaluates their feasibility and cost, and then generates a heuristic matrix based on the frequency each edge appears in the feasible and low-cost routes.}
    """
    n = len(demands)
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix)

    for _ in range(num_samples):
        route = list(range(1, n))
        np.random.shuffle(route)
        
        routes = []
        current_route = [0]
        current_load = 0
        
        for node in route:
            if current_load + demands[node] <= capacity:
                current_route.append(node)
                current_load += demands[node]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, node]
                current_load = demands[node]
                
        current_route.append(0)
        routes.append(current_route)
        
        total_distance = 0
        is_feasible = True
        for r in routes:
            load = 0
            for i in range(len(r) - 1):
                total_distance += distance_matrix[r[i]][r[i+1]]
                if r[i] != 0:
                    load += demands[r[i]]

            if load > capacity:
                is_feasible = False
                break

        if is_feasible:
            for r in routes:
                for i in range(len(r) - 1):
                    heuristics_matrix[r[i]][r[i+1]] += 1
                    heuristics_matrix[r[i+1]][r[i]] += 1  # Assuming symmetric distance matrix
                    
    return heuristics_matrix
