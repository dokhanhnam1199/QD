import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm generates a set of random routes respecting capacity constraints,
    then calculates a heuristic matrix based on the frequency of each edge appearing in the generated routes.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        unvisited = set(range(1, n))
        routes = []
        current_route = [0]
        current_capacity = capacity

        while unvisited:
            next_node = random.choice(list(unvisited))
            if demands[next_node] <= current_capacity:
                current_route.append(next_node)
                current_capacity -= demands[next_node]
                unvisited.remove(next_node)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_capacity = capacity

        current_route.append(0)
        routes.append(current_route)

        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
