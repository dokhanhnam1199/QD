import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm simulates multiple random routes, evaluates their cost and feasibility, and constructs a heuristic matrix reflecting the frequency with which each edge appears in elite (low-cost, feasible) routes.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100 #Number of random solutions to sample
    elite_threshold = 0.1 # Top percentage of solutions to consider as elite

    def calculate_route_cost(route):
        cost = 0
        for i in range(len(route) - 1):
            cost += distance_matrix[route[i], route[i+1]]
        return cost

    def is_route_feasible(route):
        current_capacity = capacity
        for i in range(len(route) - 1):
            if route[i] == 0 and route[i+1] != 0:
                current_capacity = capacity
            if route[i+1] != 0:
                if demands[route[i+1]] > current_capacity:
                    return False
                current_capacity -= demands[route[i+1]]
        return True

    sampled_routes = []
    for _ in range(num_samples):
        # Generate a random route
        remaining_nodes = list(range(1, n))
        current_route = [0]
        current_capacity = capacity
        while remaining_nodes:
            possible_nodes = [node for node in remaining_nodes if demands[node] <= current_capacity]
            if not possible_nodes:
                current_route.append(0)
                current_capacity = capacity
                continue
            
            next_node = random.choice(possible_nodes)
            current_route.append(next_node)
            current_capacity -= demands[next_node]
            remaining_nodes.remove(next_node)
        current_route.append(0)
        sampled_routes.append(current_route)
    
    # Evaluate routes, filtering and sort them based on cost and feasibility.
    evaluated_routes = []
    for route in sampled_routes:
        if is_route_feasible(route):
            cost = calculate_route_cost(route)
            evaluated_routes.append((route, cost))
    
    evaluated_routes.sort(key=lambda x: x[1])
    
    # Identify elite routes
    num_elite = int(len(evaluated_routes) * elite_threshold)
    elite_routes = [route for route, cost in evaluated_routes[:num_elite]]

    # Update heuristic matrix based on elite routes
    for route in elite_routes:
        for i in range(len(route) - 1):
            node1 = route[i]
            node2 = route[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
    
    # Normalize the heuristic matrix
    for i in range(n):
        for j in range(n):
            if heuristics_matrix[i, j] > 0:
                heuristics_matrix[i, j] /= distance_matrix[i, j]

    return heuristics_matrix
