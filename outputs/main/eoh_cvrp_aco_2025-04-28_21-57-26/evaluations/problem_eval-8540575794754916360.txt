import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm uses an ant colony optimization approach to probabilistically build routes, favoring shorter distances and lower capacity utilization, and updates pheromone trails on edges used in feasible routes.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)
    heuristics_matrix = np.zeros_like(distance_matrix)
    alpha = 1
    beta = 2
    rho = 0.1
    num_ants = 10
    num_iterations = 100

    for iteration in range(num_iterations):
        all_routes = []
        for ant in range(num_ants):
            current_node = 0
            route = [0]
            remaining_nodes = set(range(1, n))
            current_capacity = capacity
            
            while remaining_nodes:
                probabilities = {}
                for node in remaining_nodes:
                    pheromone = pheromone_matrix[current_node, node]
                    heuristic = (1 / (distance_matrix[current_node, node] + 1e-6)) ** beta
                    capacity_factor = max(0, (current_capacity - demands[node]) / capacity) ** alpha
                    probabilities[node] = pheromone * heuristic * (capacity_factor + 0.01) # Adding a small value to encourage exploration

                if not probabilities:
                    break

                total_prob = sum(probabilities.values())
                if total_prob == 0:
                    next_node = random.choice(list(remaining_nodes))
                else:
                    normalized_probabilities = {node: prob / total_prob for node, prob in probabilities.items()}
                    next_node = np.random.choice(list(normalized_probabilities.keys()), p=list(normalized_probabilities.values()))
                
                if current_capacity >= demands[next_node]:
                    route.append(next_node)
                    current_capacity -= demands[next_node]
                    remaining_nodes.remove(next_node)
                    current_node = next_node
                else:
                    route.append(0)
                    current_node = 0
                    current_capacity = capacity

            route.append(0)
            all_routes.append(route)

        # Update pheromones
        delta_pheromone = np.zeros_like(distance_matrix)
        for route in all_routes:
            total_demand = 0
            feasible = True
            current_load = 0
            for i in range(1, len(route)):
                if route[i] == 0:
                   current_load = 0
                else:
                    if current_load + demands[route[i]] > capacity:
                        feasible = False
                        break
                    current_load += demands[route[i]]
            
            if feasible:
                route_distance = 0
                for i in range(len(route) - 1):
                    route_distance += distance_matrix[route[i], route[i+1]]
                
                if route_distance > 0:
                    pheromone_deposit = 1 / route_distance
                else:
                    pheromone_deposit = 0

                for i in range(len(route) - 1):
                    delta_pheromone[route[i], route[i+1]] += pheromone_deposit
                    delta_pheromone[route[i+1], route[i]] += pheromone_deposit

        pheromone_matrix = (1 - rho) * pheromone_matrix + delta_pheromone
    
    # Use pheromone matrix as heuristics matrix
    heuristics_matrix = pheromone_matrix
    
    return heuristics_matrix
