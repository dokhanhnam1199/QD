import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples a set of random routes, evaluates their feasibility based on capacity constraints, and updates a heuristic matrix by incrementing the value of edges present in feasible routes.}"""

    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        route = list(range(1, n))
        random.shuffle(route)

        current_route = [0]
        current_demand = 0
        feasible = True

        for node in route:
            if current_demand + demands[node] <= capacity:
                current_route.append(node)
                current_demand += demands[node]
            else:
                current_route.append(0)
                current_demand = demands[node]
                if current_demand > capacity:
                    feasible = False
                    break
                current_route.append(node)
                
        current_route.append(0)

        if feasible:
            for i in range(len(current_route) - 1):
                node1 = current_route[i]
                node2 = current_route[i+1]
                heuristics_matrix[node1, node2] += 1

    return heuristics_matrix
