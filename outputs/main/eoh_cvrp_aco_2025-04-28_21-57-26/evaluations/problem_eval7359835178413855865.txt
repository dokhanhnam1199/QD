import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm employs a Monte Carlo Tree Search (MCTS) approach to explore the solution space and estimate edge importance based on simulated route construction and evaluation.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_simulations = 100
    
    def simulate_route(current_route, unvisited, current_capacity):
        if not unvisited:
            return current_route + [0]  # Return to depot
        
        possible_nodes = [node for node in unvisited if demands[node] <= current_capacity]
        if not possible_nodes:
            return current_route + [0] + simulate_route([0], unvisited, capacity)

        next_node = random.choice(possible_nodes)
        return simulate_route(current_route + [next_node], unvisited - {next_node}, current_capacity - demands[next_node])

    for _ in range(num_simulations):
        unvisited = set(range(1, n))
        current_route = [0]
        current_capacity = capacity
        
        route = simulate_route(current_route, unvisited, current_capacity)
        
        for i in range(len(route) - 1):
            node1 = route[i]
            node2 = route[i+1]
            heuristics_matrix[node1][node2] += 1
            heuristics_matrix[node2][node1] += 1

    return heuristics_matrix
