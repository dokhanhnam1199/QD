import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples multiple random routes, evaluates their feasibility and cost considering vehicle capacity, and then calculates a heuristic matrix based on the frequency with which each edge appears in feasible, low-cost routes.}"""

    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        # Build routes based on capacity constraint
        routes = []
        current_route = [0]  # Start at depot
        current_load = 0

        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start new route
                current_load = demands[customer]

        current_route.append(0)  # End at depot
        routes.append(current_route)

        # Calculate total distance of the routes
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i]][route[i+1]]

        # Update heuristic matrix based on route edges
        if total_distance < np.inf:  # Only consider feasible routes
            for route in routes:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i]][route[i+1]] += 1
                    heuristics_matrix[route[i+1]][route[i]] += 1 #Assume symmetry

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
