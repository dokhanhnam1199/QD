import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a large number of random routes, evaluates their feasibility and cost, and then uses the frequency of each edge appearing in feasible and high-quality routes to estimate its desirability.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        customer_permutation = list(range(1, n))
        random.shuffle(customer_permutation)

        # Construct a route based on the permutation and capacity constraints
        routes = []
        current_route = [0]
        current_load = 0
        for customer in customer_permutation:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]
        current_route.append(0)
        routes.append(current_route)

        # Calculate the total distance of the routes
        total_distance = 0
        is_feasible = True
        for route in routes:
            route_distance = 0
            for i in range(len(route) - 1):
                route_distance += distance_matrix[route[i]][route[i+1]]
            total_distance += route_distance
            
            #Check capacity constraint
            current_load = 0
            for node in route[1:-1]:
                current_load+=demands[node]
            if current_load > capacity:
                is_feasible = False

        if is_feasible:
            # Update heuristics matrix based on the edges in the route
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1][node2] += 1
                    heuristics_matrix[node2][node1] += 1
    
    # Normalize the heuristics matrix
    total_edge_appearances = np.sum(heuristics_matrix)
    if total_edge_appearances > 0:
        heuristics_matrix = heuristics_matrix / total_edge_appearances
    
    return heuristics_matrix
