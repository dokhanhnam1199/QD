import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm combines stochastic sampling with adaptive pheromone update based on route length and a roulette wheel selection with a temperature-controlled exploration-exploitation balance.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    pheromone_matrix = np.ones_like(distance_matrix)
    temperature = 1.0
    cooling_rate = 0.995
    num_samples = 500
    alpha = 1.0
    beta = 2.0

    for _ in range(num_samples):
        current_node = 0
        route = [0]
        remaining_nodes = set(range(1, n))
        current_capacity = capacity
        route_length = 0.0

        while remaining_nodes:
            probabilities = {}
            for node in remaining_nodes:
                if current_capacity >= demands[node]:
                    distance_heuristic = 1 / (distance_matrix[current_node, node] + 1e-6)
                    probabilities[node] = (pheromone_matrix[current_node, node]**alpha) * (distance_heuristic**beta)

            if not probabilities:
                break

            total_prob = sum(probabilities.values())
            if total_prob == 0:
                next_node = remaining_nodes.pop()
            else:
                normalized_probabilities = {node: prob / total_prob for node, prob in probabilities.items()}
                next_node = np.random.choice(list(normalized_probabilities.keys()), p=list(normalized_probabilities.values()))

            if current_capacity >= demands[next_node]:
                route.append(next_node)
                route_length += distance_matrix[current_node, next_node]
                heuristics_matrix[current_node, next_node] += 1
                heuristics_matrix[next_node, current_node] += 1
                current_capacity -= demands[next_node]
                remaining_nodes.remove(next_node)
                current_node = next_node
            else:
                route.append(0)
                route_length += distance_matrix[current_node, 0]
                heuristics_matrix[current_node, 0] += 1
                heuristics_matrix[0, current_node] += 1
                current_node = 0
                current_capacity = capacity
        
        route_length += distance_matrix[current_node, 0]
        heuristics_matrix[current_node, 0] += 1
        heuristics_matrix[0, current_node] += 1
            
        pheromone_update = 1.0 / route_length
        for i in range(len(route) - 1):
            pheromone_matrix[route[i], route[i+1]] = (1 - cooling_rate) * pheromone_matrix[route[i], route[i+1]] + cooling_rate * pheromone_update
            pheromone_matrix[route[i+1], route[i]] = pheromone_matrix[route[i], route[i+1]]

        temperature *= cooling_rate

    for i in range(n):
        for j in range(n):
            if heuristics_matrix[i, j] > 0:
               heuristics_matrix[i, j] /= (distance_matrix[i, j] + 1e-6)

    return heuristics_matrix
