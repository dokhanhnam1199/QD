def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering the percentage of remaining capacity utilized by the item, penalizing bins that are too full or too empty after placement, and using a sigmoid function to smooth the priority scores.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      new_cap = cap - item
      utilization = item / 1.0
      if cap < 0.00000001:
          p = -100000000
      else:
          utilization = item/cap
          penalty = 0
          if new_cap < 0.1:
              penalty -= 0.5
          if new_cap > 0.9:
              penalty -= 0.5
          p = (1 / (1 + (2.71828**(-10 * (utilization-0.5))))) + penalty
      priority.append(p)
    else:
      priority.append(-float('inf'))
  return priority
