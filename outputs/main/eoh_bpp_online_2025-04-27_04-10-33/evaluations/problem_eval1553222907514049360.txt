def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a score for each bin based on the percentage of remaining capacity utilized if the item is placed, penalizing bins that would be overfilled or have very low utilization.}"""
  priority = []
  bin_capacity = 1  # Assuming bin capacity is normalized to 1, adjust as needed.

  for cap in bins_remain_cap:
    if cap >= item:
      new_cap = cap - item
      utilization = (bin_capacity - new_cap) / bin_capacity
      
      # Penalize bins that are too full (high utilization) or too empty (low utilization)
      if utilization > 0.95:
        score = utilization - 0.2
      elif utilization < 0.1:
        score = utilization -0.2
      else:
        score = utilization

      priority.append(score)
    else:
      priority.append(-100000)  # extremely low priority if item does not fit

  return priority
