def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how well the item size matches the remaining capacity, primarily rewarding bins where the item nearly fills the remaining space, while still penalizing overfilling.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      utilization = item / cap
      if 0.7 <= utilization <= 1.0:  # Reward high utilization
        priority.append(utilization)
      else:
        priority.append(-10)  # Penalize poor utilization
    else:
      priority.append(-float('inf'))
  return priority
