def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a combined score considering both the remaining capacity after packing and the percentage of bin utilization achieved, favoring bins with higher utilization without overflowing.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            remaining = cap - item
            utilization = (100 - remaining) / 100.0
            priority_score = utilization * (1.0 / (remaining + 1))  # Favor higher utilization and smaller remaining capacity
            priority.append(priority_score)
        else:
            priority.append(-1000)
    return priority
