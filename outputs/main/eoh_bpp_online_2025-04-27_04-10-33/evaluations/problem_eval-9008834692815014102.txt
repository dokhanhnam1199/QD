def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the remaining capacity after placing the item, preferring bins with higher utilization and avoiding bins that would become nearly full or nearly empty.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      new_cap = cap - item
      if new_cap == 0:
        priority.append(1000) # Prefer bins that become full
      elif new_cap < 0.1:  #Avoid almost full
         priority.append(-100)
      elif new_cap > 0.9: # Avoid almost empty bins
         priority.append(-100)
      else:
        priority.append(1.0 / new_cap) # Prefer higher utilization
    else:
      priority.append(-float('inf'))
  return priority
