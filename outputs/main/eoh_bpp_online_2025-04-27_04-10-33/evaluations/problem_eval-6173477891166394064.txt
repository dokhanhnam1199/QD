def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on minimizing wasted space, with a penalty for bins that are less than one-third full after packing.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining = cap - item
      priority_score = -remaining # Prioritize bins that minimize wasted space
      if remaining > 0.66:
        priority_score -= 5 # Penalty for being less than one-third full
      priority.append(priority_score)
    else:
      priority.append(-100000)  # Extremely low priority if item does not fit
  return priority
