def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the potential wasted space after placing the item, aiming to minimize fragmentation by favoring bins where the remaining capacity after packing the item is closest to the average item size seen so far.}"""
  priority = []
  cumulative_item_size = 0
  num_items = 0

  for cap in bins_remain_cap:
    if cap >= item:
      new_cap = cap - item
      #Calculate the average size. Assume that the item is added to the packed items.
      cumulative_item_size += item
      num_items += 1
      average_item_size = cumulative_item_size / num_items
      #Prioritize to be close to the average item size
      priority.append(-abs(new_cap - average_item_size))
      #Revert back the values
      cumulative_item_size -= item
      num_items -= 1

    else:
      priority.append(-float('inf'))

  return priority
