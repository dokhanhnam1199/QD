def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the ratio of the item size to the remaining capacity, penalizing bins with insufficient capacity and rewarding bins that provide a good fit without being too full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      # Calculate the utilization ratio: item_size / remaining_capacity
      utilization_ratio = float(item) / cap

      # Reward bins that provide a good fit (high utilization)
      # Penalize bins that are close to full to avoid overfilling
      priority_score = utilization_ratio - (cap - item) / 100.0 #subtract remaining space in bin/100.
      priority.append(priority_score)
    else:
      priority.append(-100000)  # Extremely low priority if item does not fit

  return priority
