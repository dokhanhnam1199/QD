def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority based on a weighted combination of bin utilization (item size / original capacity) and remaining capacity after packing the item.}"""
  priority = []
  original_capacity = 1.0  # Assuming bins have a capacity of 1
  utilization_weight = 0.5
  remaining_weight = 0.5

  for cap in bins_remain_cap:
    if cap >= item:
      new_cap = cap - item
      utilization = item / original_capacity
      remaining_capacity_score = new_cap  # Could be scaled
      priority.append(utilization_weight * utilization + remaining_weight * remaining_capacity_score)
    else:
      priority.append(-float('inf'))
  return priority
