def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how well the item size matches the remaining capacity, rewarding bins where the item fills a significant portion of the remaining space but doesn't overfill.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      utilization = item / cap
      if 0.2 <= utilization <= 0.95:  # Reward significant but not excessive utilization
        priority.append(utilization)
      else:
        priority.append(-10)  # Penalize poor utilization
    else:
      priority.append(-float('inf'))
  return priority
