def priority_v2(item, bins_remain_cap):
    """{This algorithm aims to balance bin utilization by penalizing bins with extremely low or high fill levels after placing the item, while also considering how well the item fits into the bin's current remaining capacity.}"""
    priorities = []
    bin_capacity = 1  # Assuming bin capacity is 1
    for cap in bins_remain_cap:
        if cap >= item:
            remaining_after_fit = cap - item
            fill_level_after_fit = (bin_capacity - remaining_after_fit) / bin_capacity
            # Penalize extreme fill levels and reward better fit
            priority = (item / bin_capacity) * (1 - 4 * (fill_level_after_fit - 0.5)**2)
        else:
            priority = -1
        priorities.append(priority)
    return priority
