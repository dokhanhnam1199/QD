def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering both how much space is wasted if the item is placed in the bin and how evenly loaded the bins are overall, aiming for low waste and balanced distribution.}"""
  priority = []
  total_capacity = sum(bins_remain_cap)
  num_bins = len(bins_remain_cap)
  average_capacity = total_capacity / num_bins if num_bins > 0 else 0

  for cap in bins_remain_cap:
    if cap >= item:
      waste = cap - item
      evenness = abs(cap - average_capacity)  # How far from average
      priority_score = -waste - 0.5 * evenness  # Lower waste and closer to average is better
      priority.append(priority_score)
    else:
      priority.append(-float('inf'))
  return priority
