def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how much space the item would leave after placement relative to the item size, favoring bins where the remaining space is similar to the item size while avoiding bins that would become near full or near empty.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      new_cap = cap - item
      if new_cap == 0:
        priority.append(1000)
      elif new_cap < 0.1:
        priority.append(-100)
      elif new_cap > 0.9:
        priority.append(-100)
      else:
        priority.append(1.0 / abs(new_cap - item + 0.000001)) # Adding tiny number to avoid division by zero
    else:
      priority.append(-float('inf'))
  return priority
