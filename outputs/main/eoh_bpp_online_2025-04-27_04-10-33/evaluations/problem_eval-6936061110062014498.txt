def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by considering both the remaining capacity and the item size relative to the bin size, aiming to balance space utilization and avoid creating overly empty bins.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            fill_ratio = item / cap
            waste_ratio = (cap - item) / cap
            priority_score = fill_ratio - waste_ratio
            priority.append(priority_score)
        else:
            priority.append(-float('inf'))
    return priority
