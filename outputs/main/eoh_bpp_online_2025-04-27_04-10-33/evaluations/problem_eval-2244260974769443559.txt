def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the remaining capacity after placing the item, preferring bins with higher utilization, penalizing bins that would become almost full, and favoring bins that remain half-full after placing the item.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      new_cap = cap - item
      if new_cap == 0:
        priority.append(1000)
      elif new_cap < 0.1:
         priority.append(-100)
      else:
        priority.append(-abs(new_cap-0.5)) # prefer bins that are near half full after placing the item
    else:
      priority.append(-float('inf'))
  return priority
