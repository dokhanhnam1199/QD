def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how close the remaining capacity after placing the item is to a target fill level, using a dynamic target that adapts to the item size.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining = cap - item
      target_fill = item * 0.75  # Aim for a fill level related to item size
      priority_score = -abs(remaining - target_fill) # Minimize difference from target
      priority.append(priority_score)
    else:
      priority.append(-1000)
  return priority
