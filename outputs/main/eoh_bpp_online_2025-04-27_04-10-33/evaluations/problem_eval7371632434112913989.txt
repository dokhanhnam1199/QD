def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the remaining capacity after placing the item, favoring bins that result in a fill level close to a target utilization, penalizing bins that are too empty or too full, and avoiding bins that cannot accommodate the item.}"""
  priority = []
  target_utilization = 0.75  # Target bin utilization (e.g., 75%)
  bin_capacity = 1.0 # Assuming bins have a capacity of 1
  for cap in bins_remain_cap:
    if cap >= item:
      new_cap = cap - item
      new_utilization = (bin_capacity - new_cap) / bin_capacity
      utilization_diff = abs(new_utilization - target_utilization)
      priority_score = -utilization_diff # Closer to target is better

      if new_cap < 0.1: #Penalize almost full
        priority_score -= 0.5
      if new_cap > 0.9: #Penalize almost empty
        priority_score -= 0.5

      priority.append(priority_score)
    else:
      priority.append(-float('inf'))
  return priority
