def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins that can fit the item, giving higher priority to bins whose remaining capacity is close to the item size while also considering the utilization rate of the bin after packing the item.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            utilization = item / (cap + item)  # Hypothetical utilization if the item was already in the bin
            priority.append((100.0 / (abs(cap - item) + 0.001)) * (utilization + 0.1)) # Prioritize bins close to item size and higher utilization; add 0.1 to avoid zero value

        else:
            priority.append(-1)  # Item doesn't fit

    return priority
