def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a combination of remaining capacity fit and fullness, preferring bins that can tightly fit the item while also being relatively full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      priority_score = (cap - item) + (1/(cap+0.000001)) # Smaller remaining cap after packing is better, but also prefer to fill the bin
      priority.append(priority_score)
    else:
      priority.append(-1) 
  return priority
