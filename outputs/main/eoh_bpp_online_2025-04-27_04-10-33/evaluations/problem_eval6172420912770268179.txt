def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin based on the ratio of item size to remaining capacity, penalized by the square of the relative waste after packing the item, favoring bins that are slightly larger than the item but not excessively so.}"""
    priority = []
    bin_capacity = 1.0 # Assuming bin capacity is 1

    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            relative_waste = waste / bin_capacity
            priority.append((item / cap) * (1 - relative_waste**2))
        else:
            priority.append(-1)

    return priority
