def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins by considering the remaining capacity and penalizing bins that would become too empty or too full after packing the item.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            new_cap = cap - item
            if new_cap > 0.8:
                priority.append(-new_cap * 100)  # Penalize bins that become too empty
            elif new_cap < 0.1:
                priority.append(- (0.1 - new_cap) * 500)  # Penalize bins that become nearly full
            else:
                priority.append(100 - new_cap * 50)  # Prioritize bins with moderate remaining capacity
        else:
            priority.append(-1000)  # Very low priority if item doesn't fit
    return priority
