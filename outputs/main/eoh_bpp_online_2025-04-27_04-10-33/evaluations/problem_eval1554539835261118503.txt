def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a weighted combination of space utilization (ratio of item size to bin capacity) and remaining capacity, favoring bins that offer good space utilization and leave sufficient remaining capacity.}"""
  priority = []
  weight_utilization = 0.6  # Weight for space utilization
  weight_remaining = 0.4  # Weight for remaining capacity

  for cap in bins_remain_cap:
    if cap >= item:
      utilization = item / cap  # Space utilization
      remaining = cap - item  # Remaining capacity

      score = weight_utilization * utilization + weight_remaining * (remaining / cap)
      priority.append(score)
    else:
      priority.append(-float('inf'))
  return priority
