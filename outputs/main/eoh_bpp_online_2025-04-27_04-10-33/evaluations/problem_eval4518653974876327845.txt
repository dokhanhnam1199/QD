def priority_v2(item, bins_remain_cap):
    """{This algorithm assigns priority based on the wasted space after placing the item in a bin, normalized by the item size, and penalizes bins that cannot accommodate the item.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            wasted_space = cap - item
            priority = -wasted_space / item # Lower wasted space is better (higher priority)
        else:
            priority = -float('inf') # Assign lowest priority to invalid bins
        priorities.append(priority)
    return priority
