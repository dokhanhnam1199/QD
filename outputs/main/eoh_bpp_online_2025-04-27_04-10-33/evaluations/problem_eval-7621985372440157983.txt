def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins with remaining capacity closest to a target fill level, with a penalty for bins that would be excessively full or empty after packing the item.}"""
  priority = []
  target_fill = 0.75  # Aim for bins to be 75% full
  for cap in bins_remain_cap:
    if cap >= item:
      remaining = cap - item
      fill_level = 1 - (remaining / 1) # Assuming bin capacity is 1
      diff_from_target = abs(fill_level - target_fill)
      priority_score = -diff_from_target  # Prioritize bins closest to target fill

      if fill_level > 0.95:
        priority_score -= 5  # Penalty for bins that would become almost full
      elif fill_level < 0.25:
          priority_score -=2 # Penalty for bins that are too empty

      priority.append(priority_score)
    else:
      priority.append(-100000)  # Extremely low priority if item does not fit
  return priority
