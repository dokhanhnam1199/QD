def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on the remaining capacity and item size, favoring bins with remaining capacity close to the item size but also penalizing near-full bins to avoid overfilling.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      priority = (cap - item) + 1/cap # Adjusted Priority calculation: smaller waste and larger capacity gets higher priority, plus a safety factor.
      priorities.append(priority)
    else:
      priorities.append(-1)
  return priority
