def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin based on a combination of remaining capacity and the waste after packing the item, favoring bins that can accommodate the item and penalizing bins with too little or too much remaining capacity relative to the item size.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            capacity_ratio = float(item) / cap
            if capacity_ratio > 0.9:
                priority.append(capacity_ratio * 500) # Give more priority if item fills bin nearly to capacity
            elif capacity_ratio > 0.5:
                priority.append(capacity_ratio * 200) # Give moderate priority if item fills over half the bin.
            else:
                priority.append(capacity_ratio*100)  #Give lower score when significant space wasted
        else:
            priority.append(-1)  # Item doesn't fit
    return priority
