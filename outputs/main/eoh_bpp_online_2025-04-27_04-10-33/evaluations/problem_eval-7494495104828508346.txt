def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the absolute difference between the remaining capacity and the item size after packing, favoring bins where the resulting remaining capacity is close to a target value.}"""
  priority = []
  target_capacity = 0.5  # Target remaining capacity after placing the item
  for cap in bins_remain_cap:
    if cap >= item:
      new_cap = cap - item
      priority.append(-abs(new_cap - target_capacity))  # Minimize the difference from the target
    else:
      priority.append(-float('inf'))
  return priority
