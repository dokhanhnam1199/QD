def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins that can accommodate the item, favoring bins that are neither too full nor too empty, while also adding a small bonus to bins that have already been used.}"""
  priority = []
  for i, cap in enumerate(bins_remain_cap):
    if cap >= item:
      fill_ratio = item / cap
      
      # Give higher priority to bins with a fill ratio between 0.5 and 0.8
      if 0.5 <= fill_ratio <= 0.8:
        priority.append(1 + fill_ratio)  # Reward this range, plus a base score
      elif fill_ratio > 0.9:
          priority.append(-100 * (fill_ratio - 0.9))
      elif fill_ratio < 0.3:
          priority.append(-50 * (0.3 - fill_ratio))
      else:
        priority.append(0.5 + fill_ratio)
    else:
      priority.append(-100000)  # extremely low priority if item does not fit
  return priority
