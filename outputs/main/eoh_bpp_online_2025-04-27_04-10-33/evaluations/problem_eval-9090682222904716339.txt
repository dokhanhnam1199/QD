def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a priority score for each bin based on the remaining capacity and item size, favoring bins with capacity slightly larger than the item, and penalizing bins that are too full or too empty.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            # Prioritize bins where the item fits reasonably well, but not too tightly or loosely.
            priority_score = (cap - item) / (cap + item)
            priority.append(priority_score)
        else:
            priority.append(-1) # Item doesn't fit
    return priority
