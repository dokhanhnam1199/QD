def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin based on the utilization rate after packing the item, giving higher priority to bins with higher utilization while also considering a penalty for bins that are already significantly full.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            utilization = item / (cap + 0.001) #avoid division by zero
            fullness_penalty = 1.0 / (1.01 - (cap - item) / (cap + 0.001)) if cap > item else 1.0
            priority.append(utilization * fullness_penalty)
        else:
            priority.append(-1)
    return priority
