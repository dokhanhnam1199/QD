def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin based on a combination of remaining capacity and the waste after packing the item, favoring bins with capacity slightly larger than the item and penalizing those that would lead to significant waste.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            if waste == 0:
                priority.append(1000)  # Perfect fit
            else:
                priority.append(1.0 / (waste + 0.001))  # Inverse of waste, avoiding division by zero
        else:
            priority.append(-1)  # Item doesn't fit

    return priority
