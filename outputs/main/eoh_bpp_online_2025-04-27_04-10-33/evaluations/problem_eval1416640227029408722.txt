def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the remaining capacity relative to the item size, favoring bins where the item fills a significant portion of the remaining space and penalizing near-full bins.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining = cap - item
      fill_ratio = item / cap  # Ratio of item size to bin capacity
      priority_score = fill_ratio  # Prioritize bins that the item fills a significant portion
      if remaining < 0.1:
        priority_score -= 5  # Penalize near-full bins.
      priority.append(priority_score)
    else:
      priority.append(-100000)  # Extremely low priority if item does not fit
  return priority
