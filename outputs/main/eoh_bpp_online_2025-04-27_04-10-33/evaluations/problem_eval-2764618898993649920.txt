def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a combination of remaining capacity and the 'almost full' heuristic, favoring bins where the item fits well and leaves a small amount of wasted space, with adjustments to avoid excessive fragmentation and balance bin utilization.}"""
  priority = []
  for cap in bins_remain_cap:
    if item <= cap:
      waste = cap - item
      if waste == 0:
        score = 1000  # Perfect fit
      else:
        score = (item / cap) * 100  # Ratio of item size to bin capacity

        # Favor bins that are becoming "almost full"
        if waste <= (sum(bins_remain_cap) / len(bins_remain_cap) / 5):
          score += 50  # Bonus for almost full bins

        # Avoid excessive fragmentation (small remaining space)
        if waste <= (item/4):
          score += 25

        #Adjust based on remaining capacity - larger remaining capacity -> smaller score
        score -= (waste / max(bins_remain_cap)) * 10
    else:
      score = -1  # Item doesn't fit
    priority.append(score)
  return priority
