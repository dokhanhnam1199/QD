def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how well the item fills the bin, with a focus on utilizing almost-full bins while still penalizing bins not filled enough.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_ratio = item / cap  # Ratio of item size to remaining capacity
      # Prioritize bins that are well-filled, prioritizing almost full. Penalize if bin is not filled enough.
      if fill_ratio > 0.95:
        priority.append(100 * (1-fill_ratio)) # small value is better
      elif fill_ratio < 0.2:
        priority.append(-50 * (0.2 - fill_ratio)) # penalty for bins not filled enough
      else:
        priority.append(fill_ratio)
    else:
      priority.append(-100000)  # extremely low priority if item does not fit
      
  return priority
