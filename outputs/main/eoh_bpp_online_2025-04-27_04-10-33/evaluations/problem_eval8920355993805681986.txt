def priority_v2(item, bins_remain_cap):
    """{This algorithm evaluates bin suitability by considering a combination of space utilization, balanced capacity, and preference for near-full bins, adjusting weights for each factor to optimize packing efficiency.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            new_cap = cap - item
            utilization = 1 - (new_cap / 1.0)
            balance = abs(new_cap - 0.5)
            near_full_bonus = 0 if new_cap > 0.2 else 0.5

            score = (0.4 * utilization) + (0.3 * (1-balance)) + (0.3 * near_full_bonus)

            priority.append(score)
        else:
            priority.append(-float('inf'))
    return priority
