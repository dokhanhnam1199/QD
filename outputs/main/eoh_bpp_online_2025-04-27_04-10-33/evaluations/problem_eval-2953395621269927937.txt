def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates a priority score for each bin based on how well the item fills the bin's remaining capacity, prioritizing bins where the item fills a significant portion without overflowing, and applying a penalty if the item doesn't fit or fills very little.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            # Calculate the fill ratio (item size / bin capacity).  Higher ratio is better, but penalize near-full bins slightly.
            fill_ratio = item / cap
            # Scale the fill ratio and apply a penalty for bins that are nearly full to avoid tightly packed bins.
            priority_score = fill_ratio * (1 - (cap - item) / cap)
            priority.append(priority_score)
        else:
            priority.append(-1) # Item doesn't fit
    return priority
