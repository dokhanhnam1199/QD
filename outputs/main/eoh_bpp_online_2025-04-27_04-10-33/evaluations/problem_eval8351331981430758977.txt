def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the fullness after packing, with extra consideration to avoid creating very small remaining spaces.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining = cap - item
      fullness = 1 - (remaining / 1.0) # Fullness ratio after packing
      priority_score = fullness * 100  # Prioritize higher fullness
      if remaining < 0.1:
        priority_score -= 50 # Penalty to discourage creating small remaining spaces
      priority.append(priority_score)
    else:
      priority.append(-100000)  # Extremely low priority if item does not fit
  return priority
