def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering the percentage of bin utilization after placing the item, rewarding bins with high percentage fills, and penalizing bins that would be overly full or empty, and incorporating a bonus for bins nearing a half-full state.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      new_cap = cap - item
      utilization = (1 - (new_cap / 1.0)) if new_cap > 0 else 1.0 # Calculate utilization percentage (assuming bin capacity is 1.0)

      if new_cap == 0:
        priority.append(1000)  # Prefer bins that become full
      elif new_cap < 0.1:
        priority.append(-100)   # Avoid almost full bins
      elif new_cap > 0.9:
        priority.append(-100)   # Avoid almost empty bins
      else:
        # Reward higher utilization and bins closer to half-full
        half_full_bonus = abs(utilization - 0.5)
        priority.append(utilization * 100 - half_full_bonus * 50) 
    else:
      priority.append(-float('inf'))
  return priority
