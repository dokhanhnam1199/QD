def priority_v3(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin based on a combination of remaining capacity and the waste after packing the item, giving preference to bins with a remaining capacity close to the item size while also considering the fullness of the bin.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            capacity_ratio = float(item) / cap if cap > 0 else 0 

            if waste == 0:
                priority.append(1000)  # Perfect fit
            else:
                # Combine waste and capacity ratio to calculate priority
                priority.append((1.0 / (waste + 0.001)) * (capacity_ratio**2))
        else:
            priority.append(-1)  # Item doesn't fit
    return priority
