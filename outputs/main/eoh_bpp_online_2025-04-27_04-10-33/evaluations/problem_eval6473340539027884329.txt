def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority based on a combination of remaining capacity fit and a bonus for near-full bins, favoring bins that can accommodate the item well and are already relatively full.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fit_score = (cap - item) / sum(bins_remain_cap) # Lower is better
      fullness_score = 1 - (cap / max(bins_remain_cap)) # Higher is better
      priority_score = 1 - fit_score + fullness_score 
      priority.append(priority_score)
    else:
      priority.append(-1) # Bin too small
  return priority
