def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates a priority score for each bin based on how much empty space would remain after the item is placed in the bin, preferring bins that leave the least amount of wasted space, while also considering whether the item would perfectly fit in the bin.}"""
  priorities = []
  for cap in bins_remain_cap:
    if item <= cap:
      remaining_space = cap - item
      if remaining_space == 0:
        priorities.append(float('inf'))  # Perfect fit gets highest priority
      else:
        priorities.append(1 / remaining_space) # Prefer less empty space
    else:
      priorities.append(float('-inf')) # Cannot fit
  return priority
