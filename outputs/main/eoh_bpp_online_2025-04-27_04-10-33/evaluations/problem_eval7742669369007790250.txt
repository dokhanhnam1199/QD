def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the proportion of the item's size relative to the remaining capacity, penalizing bins where the item would cause significant overflow if it didn't fit, and rewarding bins with sufficient space.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      priorities.append(item / cap)  # Proportion of item size to remaining capacity
    else:
      overflow_ratio = item / cap if cap > 0 else float('inf') # Calculate overflow ratio
      priorities.append(-overflow_ratio) # Penalize based on overflow ratio
  return priority
