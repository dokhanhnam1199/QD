def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on a weighted score combining the fill ratio and the remaining capacity after packing, favoring moderately full bins with significant remaining space.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fill_ratio = item / cap
      remaining_capacity = cap - item
      # Weighted score: fill ratio (incentivizing good use) + remaining capacity (incentivizing space for future items)
      priority.append(0.7 * fill_ratio + 0.3 * (remaining_capacity / max(bins_remain_cap))) # normalizing remaining capacity
    else:
      priority.append(-100000)
  return priority
