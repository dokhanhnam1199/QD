def priority_v2(item, bins_remain_cap):
    """{The algorithm prioritizes bins based on how closely their remaining capacity matches the item size, penalized by the bin's current fill level.}"""
    priorities = []
    bin_capacity = 1  # Assuming bin capacity is 1
    for cap in bins_remain_cap:
        if cap >= item:
            capacity_difference = abs(cap - item)
            fill_level = (bin_capacity - cap) / bin_capacity if bin_capacity > 0 else 0
            priority = 1 / (1 + capacity_difference + fill_level) if (1 + capacity_difference + fill_level) !=0 else 0 # Higher priority for closer capacity and lower fill
        else:
            priority = -1
        priorities.append(priority)
    return priority
