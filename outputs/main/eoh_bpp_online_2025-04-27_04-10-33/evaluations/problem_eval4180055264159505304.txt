def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by rewarding bins that can accommodate the item and penalizing bins nearing full capacity, favoring even distribution.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining = cap - item
      priority_score = 1 / (1 + abs(0.5 - remaining)) # Reward values near 0.5
      if remaining < 0.2:
        priority_score -= 5  # Penalize almost full
      priority.append(priority_score)
    else:
      priority.append(-1000)
  return priority
