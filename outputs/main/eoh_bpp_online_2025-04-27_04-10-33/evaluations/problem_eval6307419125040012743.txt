def priority_v3(item, bins_remain_cap):
    """{This algorithm calculates the priority of each bin based on a combination of remaining capacity and the item size, favoring bins that can accommodate the item with minimal waste and normalizing the scores.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            priority.append(item / (waste + 0.001))
        else:
            priority.append(-1)
    
    # Normalize priority scores to [0, 1] range (excluding -1 scores)
    valid_priorities = [p for p in priority if p != -1]
    if valid_priorities:
        min_priority = min(valid_priorities)
        max_priority = max(valid_priorities)
        
        if max_priority - min_priority > 0:
            normalized_priority = [(p - min_priority) / (max_priority - min_priority) if p != -1 else -1 for p in priority]
            return normalized_priority
        else:
            return [1 if p != -1 else -1 for p in priority]
    else:
        return priority
