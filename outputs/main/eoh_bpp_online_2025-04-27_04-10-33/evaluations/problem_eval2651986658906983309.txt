def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on how closely the item size matches a significant fraction (e.g., 75%) of the bin's remaining capacity, favoring matches that leave a reasonable but not excessive amount of unused space.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      new_cap = cap - item
      target_ratio = 0.75
      ideal_item_size = cap * target_ratio
      diff = abs(item - ideal_item_size)
      priority.append(-diff) # The closer to ideal, the higher the priority
    else:
      priority.append(-float('inf'))
  return priority
