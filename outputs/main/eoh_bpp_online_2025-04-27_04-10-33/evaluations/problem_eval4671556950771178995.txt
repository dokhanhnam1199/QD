def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins with remaining capacity close to the item size, while also considering the overall fullness of the bin.}"""
    priorities = []
    bin_capacity = 1 # Assuming bin capacity is 1
    for cap in bins_remain_cap:
        if cap >= item:
            fill_percentage = (bin_capacity - cap + item) / bin_capacity
            priority = (1 - abs(cap - item)) * fill_percentage #Prioritize bins with cap close to item and higher fill percentage
        else:
            priority = -1
        priorities.append(priority)
    return priority
