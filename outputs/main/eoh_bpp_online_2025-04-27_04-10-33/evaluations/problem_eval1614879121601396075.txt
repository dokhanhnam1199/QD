def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the "wastage" incurred by placing the item, preferring bins that minimize the absolute difference between the remaining capacity and a target wastage level while also considering the fill percentage of the item relative to bin size.}"""
  priority = []
  target_wastage = 0.2  #Experiment with other values like 0.1, 0.3
  for cap in bins_remain_cap:
    if cap >= item:
      remaining_cap = cap - item
      wastage_difference = abs(remaining_cap - target_wastage)
      fill_percentage = item / cap
      priority_score = -wastage_difference + fill_percentage #Minimizes wastage diff and maximizes fill percentage.
      priority.append(priority_score)
    else:
      priority.append(-float('inf'))
  return priority
