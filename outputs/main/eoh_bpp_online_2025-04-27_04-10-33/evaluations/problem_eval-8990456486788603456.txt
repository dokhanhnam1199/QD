def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins that can fit the item, favoring bins with remaining capacity closest to a target fill level while penalizing excessive fragmentation.}"""
  priority = []
  target_fill = 0.75
  for cap in bins_remain_cap:
    if cap >= item:
      remaining = cap - item
      fill_level = 1 - (remaining / 1) # assuming bin size is 1
      priority_score = -abs(fill_level - target_fill) # closer to target is better
      if remaining < 0.1:
        priority_score -= 2 # Avoid bins that are almost full
      if remaining > 0.5:
        priority_score -= 1 # Avoid bins that are too empty
      priority.append(priority_score)
    else:
      priority.append(-1000)
  return priority
