def priority_v3(item, bins_remain_cap):
    """{This algorithm prioritizes bins that have enough space for the item and are closest to a target fill level (e.g., 75% full) after packing, using a quadratic penalty for deviations from the target.}"""
    priority = []
    target_fill = 75  # Target fill level (percentage)
    bin_capacity = 100 # Assuming bin capacity is 100

    for cap in bins_remain_cap:
        if cap >= item:
            new_cap = cap - item
            fill_level = (bin_capacity - new_cap)
            distance_from_target = abs(fill_level - target_fill)
            priority.append(100.0 / (distance_from_target**2 + 0.001))  # Quadratic penalty
        else:
            priority.append(-1)
    return priority
