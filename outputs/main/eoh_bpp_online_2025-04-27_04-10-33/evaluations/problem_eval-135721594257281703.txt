def priority_v2(item, bins_remain_cap):
    """{This algorithm prioritizes bins based on a combination of remaining capacity and how well the item fits (reducing fragmentation), favoring bins that can accommodate the item with minimal wasted space while also considering the overall fullness of the bins.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority = (cap - item) / sum(bins_remain_cap) + (cap / max(bins_remain_cap))
        else:
            priority = -1
        priorities.append(priority)
    return priority
