def priority_v2(item, bins_remain_cap):
  """{This algorithm calculates the priority of each bin based on a combination of remaining capacity and wasted space if the item is placed in that bin, prioritizing bins that have enough space and minimize wasted space.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      wasted_space = cap - item
      priority = 1.0 / (wasted_space + 0.1) # Adding 0.1 to avoid division by zero and slightly favor bins with minimal wasted space.
      priorities.append(priority)
    else:
      priorities.append(-1.0)  # Assign a very low priority if the bin cannot accommodate the item
  return priority
