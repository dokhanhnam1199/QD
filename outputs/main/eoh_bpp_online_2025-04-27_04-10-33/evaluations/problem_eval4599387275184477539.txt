def priority_v2(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering a combination of remaining capacity after placement, the relative fullness of the bin, and a penalty for bins that are already overly full, promoting balanced bin utilization.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      remaining = cap - item
      fullness = 1 - (remaining / (cap + item)) if (cap+item) > 0 else 0 #relative fullness
      priority_score = remaining + fullness

      if (cap+item - remaining) / (cap+item) > 0.8:
        priority_score -=5 #penalize bins that are overly full

      priority.append(priority_score)

    else:
      priority.append(-float('inf'))
  return priority
