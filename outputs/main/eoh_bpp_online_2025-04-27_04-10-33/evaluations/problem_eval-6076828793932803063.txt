def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins by considering both the remaining capacity and the item size, favoring bins where the item fits well and leaves a reasonable amount of remaining space.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      priority.append(cap - item)  # Smaller difference (cap-item) means higher priority
    else:
      priority.append(float('inf'))
  priority = [-p for p in priority] #Invert values for higher priority to be larger.
  return priority
