def priority_v3(item, bins_remain_cap):
  """{This algorithm prioritizes bins based on the absolute difference between the item size and remaining bin capacity after placing the item, favoring bins where the item results in a remaining capacity closest to a target value.}"""
  priority = []
  target_capacity = 0.3  # Aim for bins to be around 30% full after placing the item

  for cap in bins_remain_cap:
    if cap >= item:
      remaining_after_placement = cap - item
      priority.append(-abs(remaining_after_placement - target_capacity)) # prioritize bin that makes remain capacity nearest to target_capacity
    else:
      priority.append(-100000)  # extremely low priority if item does not fit
      
  return priority
