{
     "algorithm": "This algorithm calculates the priority of each bin based on a combination of remaining capacity and the waste after packing the item, favoring bins with capacity slightly larger than the item and penalizing those that would lead to significant waste.",
     "code": "def priority_v2(item, bins_remain_cap):\n    \"\"\"{This algorithm calculates the priority of each bin based on a combination of remaining capacity and the waste after packing the item, favoring bins with capacity slightly larger than the item and penalizing those that would lead to significant waste.}\"\"\"\n    priority = []\n    for cap in bins_remain_cap:\n        if cap >= item:\n            waste = cap - item\n            if waste == 0:\n                priority.append(1000)  # Perfect fit\n            else:\n                priority.append(1.0 / (waste + 0.001))  # Inverse of waste, avoiding division by zero\n        else:\n            priority.append(-1)  # Item doesn't fit\n\n    return priority",
     "objective": 4.04866,
     "other_inf": null
}