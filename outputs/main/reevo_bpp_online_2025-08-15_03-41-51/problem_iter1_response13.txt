```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit strategy.

    The Almost Full Fit strategy prioritizes bins that are "almost full" but can still
    accommodate the current item. This aims to leave more space in other bins for
    potentially larger future items, or to consolidate items into fewer bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value (negative infinity) for bins that cannot fit the item.
    # This ensures they are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate priority.
    # The strategy prioritizes bins with remaining capacity *closest* to the item size
    # (but still greater than or equal to it). This is achieved by maximizing
    # the remaining capacity minus the item size.
    # A smaller remaining capacity after placing the item means the bin was "more full"
    # before placing the item.
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask] - item

    return priorities
```
