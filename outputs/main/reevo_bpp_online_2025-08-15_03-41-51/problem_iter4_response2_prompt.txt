{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins with minimal remaining capacity (tightest fits)\n    using a smooth ranking function (sigmoid-like). It also adds a small bonus\n    for larger remaining capacities to balance immediate tightness with future\n    flexibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate higher priority.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Determine which bins can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate scores only for bins that can fit the item\n    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]\n\n    if len(fitting_bins_remain_cap) == 0:\n        return priorities  # No bin can fit the item\n\n    # --- Heuristic 1: Prioritize tightest fits (minimal remaining capacity) ---\n    # Use a sigmoid-like function to rank the remaining capacities.\n    # A bin with capacity `c` will have a score related to `c - item`.\n    # We want smaller `c - item` to have higher priority.\n    # Let's transform `c` to `1 / (c - item + epsilon)` for tight fit, then scale.\n    # A simpler approach is to directly use the inverse of the difference,\n    # and apply a sigmoid-like transformation to smooth it.\n\n    # Calculate the \"tightness\" score: smaller is better (tighter fit)\n    # Add a small epsilon to avoid division by zero or extremely large values.\n    epsilon_tightness = 1e-6\n    tightness_scores = 1.0 / (fitting_bins_remain_cap - item + epsilon_tightness)\n\n    # Smooth the tightness scores using a sigmoid-like function.\n    # We want to map smaller `tightness_scores` (closer to 0 for tightest fits)\n    # to higher priority values.\n    # A function like `1 / (1 + exp(-k * (x - offset)))` would map small x to high values.\n    # Here, x = tightness_scores. Let's aim for a concave shape where scores\n    # are high for small tightness_scores.\n    # Using a simple inverse scaling and then sigmoid can be complex.\n    # A more direct approach: map the differences `fitting_bins_remain_cap - item`\n    # to priorities. Small difference -> high priority.\n    # Let's use `exp(-k * diff)` where `k` is a scaling factor.\n    # A larger `k` makes the function steeper, focusing on very tight fits.\n    k_tightness = 5.0  # Sensitivity parameter for tightness\n    tightness_priority = np.exp(-k_tightness * (fitting_bins_remain_cap - item))\n\n    # --- Heuristic 2: Small bonus for larger remaining capacities (future flexibility) ---\n    # This encourages not packing too tightly if there's a slightly less tight fit\n    # that still leaves significant space.\n    # We can add a small bonus based on the `fitting_bins_remain_cap`.\n    # A simple linear bonus or a scaled sigmoid might work.\n    # Let's use a scaled version of the remaining capacity, perhaps with a saturation.\n    bonus_scale = 0.05  # How much bonus to give for remaining capacity\n    flexibility_bonus = bonus_scale * fitting_bins_remain_cap\n\n    # Combine the heuristics\n    # Simple addition: weighted sum of tightness priority and flexibility bonus.\n    # Adjust weights as needed. Let's give more weight to tightness.\n    w_tightness = 1.0\n    w_flexibility = 0.5\n\n    combined_scores = w_tightness * tightness_priority + w_flexibility * flexibility_bonus\n\n    # Normalize the combined scores for bins that can fit the item\n    if np.max(combined_scores) > 0:\n        normalized_scores = combined_scores / np.max(combined_scores)\n    else:\n        normalized_scores = np.zeros_like(combined_scores)\n\n    # Assign the calculated normalized scores to the original positions\n    priorities[can_fit_mask] = normalized_scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a refined Softmax-Based Fit.\n\n    This version refines the priority calculation by directly penalizing remaining\n    capacity. Bins that leave less remaining capacity after packing the item are\n    given higher priority. This encourages tighter fits and aims to minimize\n    wasted space. The scores are transformed using an exponential function\n    (similar to softmax) to ensure that bins with better fits (less remaining capacity)\n    have significantly higher probabilities, while still allowing some probability\n    for less optimal fits.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        # No bin can fit the item, return all zeros\n        return priorities\n\n    # Calculate the \"desirability\" score for bins that can fit the item.\n    # A higher score means less remaining capacity after packing.\n    # We want to minimize (bins_remain_cap - item).\n    # For a softmax-like score where higher is better, we use the negative\n    # of the remaining capacity, i.e., -(bins_remain_cap[can_fit_mask] - item).\n    # This is equivalent to item - bins_remain_cap[can_fit_mask].\n    # Adding a small constant could help if item sizes are very close to capacities,\n    # but the current formulation directly favors less leftover space.\n    remaining_capacity_after_packing = bins_remain_cap[can_fit_mask] - item\n    \n    # To ensure scores are positive and higher for better fits, we can use:\n    # score = 1.0 / (remaining_capacity_after_packing + 1e-9)  # Small epsilon for stability\n    # Alternatively, and perhaps more robustly for softmax, we can use the negative\n    # of the remaining capacity, as implemented in v1, which favors less leftover space.\n    # Let's stick to the logic of favoring bins with less leftover space:\n    # score = -(remaining_capacity_after_packing)\n    \n    # For softmax, it's often beneficial to have scores that are not too extreme,\n    # or to scale them. A simple approach is to use the negative of the remaining\n    # capacity. Let's use this: higher score means less remaining capacity.\n    scores_for_fitting_bins = -(remaining_capacity_after_packing)\n    \n    # Apply softmax-like transformation.\n    # Subtracting the maximum score before exponentiation for numerical stability.\n    max_score = np.max(scores_for_fitting_bins)\n    exp_scores = np.exp(scores_for_fitting_bins - max_score)\n\n    sum_exp_scores = np.sum(exp_scores)\n\n    if sum_exp_scores > 1e-9:  # Check for numerical stability\n        priorities[can_fit_mask] = exp_scores / sum_exp_scores\n    else:\n        # If all scores are very negative, resulting in near-zero exponentials,\n        # distribute probability equally among bins that *can* fit.\n        num_fitting_bins = np.sum(can_fit_mask)\n        if num_fitting_bins > 0:\n            priorities[can_fit_mask] = 1.0 / num_fitting_bins\n\n    return priorities\n\n[Reflection]\nPrioritize minimizing remaining capacity, then consider flexibility. Softmax is a good approach.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}