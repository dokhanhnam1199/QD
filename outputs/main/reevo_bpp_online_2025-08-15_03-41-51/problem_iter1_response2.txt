```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Worst Fit strategy aims to put the item in the bin with the largest remaining capacity.
    # This leaves smaller bins for potentially smaller items later.
    # We want to prioritize bins with more remaining capacity, so the priority is directly
    # proportional to the remaining capacity, but only for bins that can fit the item.

    priorities = np.zeros_like(bins_remain_cap)
    
    # Create a mask for bins that have enough capacity for the item
    can_fit_mask = bins_remain_cap >= item

    # Assign priority based on remaining capacity, but only for bins that can fit.
    # The highest priority goes to the bin with the largest remaining capacity.
    # To ensure we pick the *worst* fit (largest remaining capacity), we can
    # directly use the remaining capacity as the priority score.
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]
    
    return priorities
```
