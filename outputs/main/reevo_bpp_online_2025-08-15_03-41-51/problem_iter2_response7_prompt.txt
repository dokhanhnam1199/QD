{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Implements an epsilon-greedy priority function for online Bin Packing.\n    The function balances exploration (choosing a random bin) with\n    exploitation (choosing the best-fitting bin).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    epsilon = 0.1  # Probability of exploring a random bin\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate the 'best fit' priority for each bin\n    # Bins that can fit the item are prioritized.\n    # Among those that can fit, we prefer bins where the remaining capacity\n    # is closest to the item size (to minimize waste).\n    for i in range(num_bins):\n        if bins_remain_cap[i] >= item:\n            # A good heuristic is to maximize the \"tightness\" of the fit.\n            # This means minimizing bins_remain_cap[i] - item.\n            # However, since we are using this as a priority for selection,\n            # a larger value should mean higher priority. So, we can use\n            # a score inversely related to the remaining capacity after packing.\n            # A simple way is to use the inverse of the remaining capacity.\n            # Or, to encourage tighter fits, we can use the capacity minus item size,\n            # but inverted, so smaller (better) differences get higher scores.\n            # Let's use (bins_remain_cap[i] - item) as the \"waste\" and\n            # invert it (or subtract from a large number) to get a priority.\n            # Using a large constant minus waste ensures positive scores and\n            # higher priority for smaller waste.\n            waste = bins_remain_cap[i] - item\n            # We want smaller waste to have higher priority.\n            # If waste is 0, it's a perfect fit, highest priority.\n            # If waste is large, priority is low.\n            priorities[i] = 1.0 / (1.0 + waste) # This is a common approach for \"best fit\" score\n            # Alternative: priorities[i] = 1.0 / (bins_remain_cap[i] - item + 1e-9)\n\n    # Epsilon-greedy strategy\n    if np.random.rand() < epsilon:\n        # Explore: Assign a random, non-zero priority to all bins\n        # to give them a chance to be picked.\n        # For exploration, we want to avoid picking bins that cannot fit.\n        # So we still use the existing `priorities` as a base, but add\n        # a small random noise to all potentially viable bins.\n        # A simple exploration is to give a small uniform boost to all bins.\n        # Or, pick a random bin that can fit and assign it a high priority.\n        # Let's try assigning a slightly randomized priority to all bins that *can* fit.\n        explorable_indices = np.where(bins_remain_cap >= item)[0]\n        if len(explorable_indices) > 0:\n            random_boost = np.random.uniform(0.5, 1.5, size=len(explorable_indices))\n            priorities[explorable_indices] *= random_boost\n        else:\n            # If no bin can fit, we might still want to \"explore\" by just picking one,\n            # but in BPP, this means failing. So, we stick to prioritizing valid bins.\n            pass\n\n    # Normalize priorities to prevent extremely large or small values from dominating\n    # and to make the exploration/exploitation balance more robust.\n    # We only normalize the priorities of bins that can actually fit the item.\n    eligible_priorities = priorities[bins_remain_cap >= item]\n    if len(eligible_priorities) > 0 and np.max(eligible_priorities) > 0:\n        # Find the indices of bins that can fit the item\n        eligible_indices = np.where(bins_remain_cap >= item)[0]\n        # Normalize only the priorities of eligible bins\n        max_priority = np.max(priorities[eligible_indices])\n        if max_priority > 0:\n            priorities[eligible_indices] /= max_priority\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Almost Full Fit.\n\n    The Almost Full Fit strategy prioritizes bins that have just enough remaining capacity\n    to fit the item, but not much more. This aims to leave larger remaining capacities\n    in other bins for potentially larger future items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities to a very low value (negative infinity effectively)\n    # for bins that cannot fit the item.\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n\n    # Identify bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate a priority score.\n    # The score is higher for bins with less remaining capacity (closer to 'item').\n    # We want to penalize bins that have a lot of 'slack' after placing the item.\n    # A simple approach is to prioritize bins where (remaining_capacity - item) is small.\n    # To make higher values mean higher priority, we can invert this difference.\n    # A large negative value indicates a lot of slack, thus a low priority.\n    # A value close to zero indicates a good fit.\n    if np.any(can_fit_mask):\n        remaining_capacities_for_fit = bins_remain_cap[can_fit_mask]\n        # Calculate the 'slack' or unused space if the item is placed\n        slack = remaining_capacities_for_fit - item\n        # The priority is inversely related to the slack.\n        # We can use a transformation that maps smaller slack to higher priority.\n        # Example: higher priority for smaller slack.\n        # We can use the negative slack itself, but it might be too sensitive.\n        # A common approach for 'almost full' is to prioritize bins with remaining capacity\n        # just above the item size.\n        # Let's define priority as:\n        # 1 / (slack + epsilon)  where epsilon is a small number to avoid division by zero\n        # Or, more directly for \"almost full\": prioritize bins with remaining capacity `r`\n        # such that `r - item` is minimal.\n        # Let's try assigning a higher score when `bins_remain_cap[i] - item` is small.\n        # To make it higher priority, we can use `1 / (bins_remain_cap[i] - item + epsilon)`\n        # or `-(bins_remain_cap[i] - item)`.\n        # The prompt implies \"highest priority score for each bin\".\n        # \"Almost Full Fit\" suggests we prefer bins that are almost full AFTER the item is placed.\n        # This means we prefer bins with `bins_remain_cap[i] - item` to be small.\n        # To make smaller `bins_remain_cap[i] - item` yield higher priority, we can use\n        # `- (bins_remain_cap[i] - item)`.\n        # So, if bins_remain_cap[i] = 10, item = 3, then slack = 7. Priority = -7.\n        # If bins_remain_cap[j] = 5, item = 3, then slack = 2. Priority = -2.\n        # -2 > -7, so bin j is preferred. This aligns with Almost Full Fit.\n\n        # We can also consider the original remaining capacity: we want bins that are\n        # somewhat large, but not excessively large.\n        # Let's define priority as `remaining_capacity` minus a penalty for being too small\n        # or too large.\n        # A simpler interpretation of \"Almost Full Fit\" is to prioritize bins with the\n        # smallest remaining capacity that can still fit the item.\n\n        # Let's try prioritizing bins with the smallest `bins_remain_cap` that is >= `item`.\n        # This means sorting the suitable bins by their remaining capacity and assigning\n        # higher priority to smaller capacities.\n\n        # Calculate priorities for bins that can fit the item.\n        # A higher score means a better fit according to \"Almost Full Fit\".\n        # We want the bin with the minimum `bins_remain_cap` that is still >= `item`.\n        # So, let's assign a priority that is inversely related to the remaining capacity.\n        # Or, assign higher values to smaller remaining capacities.\n        # `max_possible_capacity - bins_remain_cap[i]` would prioritize bins that are fuller.\n        # But we want bins that are *almost full after placing the item*.\n        # So, `(max_possible_capacity - item) - bins_remain_cap[i]` is another way to look at it.\n        # Let's stick to a simpler and more direct interpretation:\n        # Prioritize bins where `bins_remain_cap[i] - item` is minimized.\n        # So, `- (bins_remain_cap[i] - item)` is a good candidate for higher priority.\n        # Let's set the priorities for the bins that can fit the item.\n        # The maximum priority will come from the bin with the smallest remaining capacity\n        # that is still sufficient.\n        priorities[can_fit_mask] = - (remaining_capacities_for_fit - item)\n\n        # To ensure that the *least* remaining capacity is prioritized,\n        # we can normalize these scores or use a large number for the most preferred bin.\n        # If multiple bins have the same minimal remaining capacity, they will have the same priority.\n        # This is acceptable.\n\n        # Alternative for \"Almost Full Fit\": penalize bins that have a lot of remaining capacity *after* placing the item.\n        # If `bins_remain_cap[i]` is the remaining capacity, and we place `item`,\n        # the new remaining capacity will be `bins_remain_cap[i] - item`.\n        # We want this new remaining capacity to be as small as possible (but non-negative).\n        # So, we want to maximize `-(bins_remain_cap[i] - item)` for bins where `bins_remain_cap[i] >= item`.\n        # This is exactly what was calculated.\n\n    return priorities\n\n[Reflection]\nPrioritize bins with minimal slack after packing. Avoid unnecessary exploration.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}