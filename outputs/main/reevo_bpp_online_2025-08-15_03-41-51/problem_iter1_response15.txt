```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit) strategy.

    The strategy prioritizes bins that are "closer" to fitting the item.
    This is achieved by assigning higher priority to bins with remaining capacity
    that is just enough (or slightly more) to accommodate the item.
    Bins with significantly larger remaining capacity are given lower priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Only consider bins that can actually fit the item
    possible_bins_mask = bins_remain_cap >= item
    
    # Calculate the "gap" or "wasted space" if the item is placed in a bin
    # A smaller gap is preferred.
    gaps = bins_remain_cap[possible_bins_mask] - item

    # The priority is inversely proportional to the gap.
    # To avoid division by zero if a bin fits the item perfectly (gap is 0),
    # we add a small epsilon.
    epsilon = 1e-9
    priorities = 1.0 / (gaps + epsilon)

    # Initialize the result array with zeros
    result_priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Place the calculated priorities into the correct positions in the result array
    result_priorities[possible_bins_mask] = priorities

    return result_priorities
```
