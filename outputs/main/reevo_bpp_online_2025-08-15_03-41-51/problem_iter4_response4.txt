```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Implements a priority function for online Bin Packing that prioritizes
    bins with small residual capacities after an item is packed.

    This heuristic aims to find the "tightest fit" for the item, which often
    leads to better packing efficiency by minimizing wasted space in each bin.
    Bins that cannot accommodate the item are given the lowest possible priority.

    Args:
        item: The size of the item to be packed.
        bins_remain_cap: A NumPy array representing the current remaining capacity
                         of each available bin.

    Returns:
        A NumPy array of the same shape as bins_remain_cap, where each element
        is the priority score for the corresponding bin. Higher scores indicate
        higher priority. Bins that cannot fit the item have a score of -np.inf.
    """
    # Initialize all priorities to negative infinity. This ensures that bins
    # that cannot fit the item are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify bins that have enough remaining capacity
    # to fit the current item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, we want to prioritize those that will have
    # the smallest remaining capacity *after* the item is placed. This is
    # equivalent to minimizing `bins_remain_cap - item`.
    # To achieve this, we can assign the negative of the residual capacity as
    # the priority score. A smaller residual capacity (e.g., 0) will result in
    # a higher (less negative) priority score.
    if np.any(can_fit_mask):
        residual_capacities = bins_remain_cap[can_fit_mask] - item
        priorities[can_fit_mask] = -residual_capacities

    return priorities
```
