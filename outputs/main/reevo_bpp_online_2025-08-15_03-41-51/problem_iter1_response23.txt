```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit.

    The Almost Full Fit strategy prioritizes bins that have just enough remaining capacity
    to fit the item, but not much more. This aims to leave larger remaining capacities
    in other bins for potentially larger future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value (negative infinity effectively)
    # for bins that cannot fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate a priority score.
    # The score is higher for bins with less remaining capacity (closer to 'item').
    # We want to penalize bins that have a lot of 'slack' after placing the item.
    # A simple approach is to prioritize bins where (remaining_capacity - item) is small.
    # To make higher values mean higher priority, we can invert this difference.
    # A large negative value indicates a lot of slack, thus a low priority.
    # A value close to zero indicates a good fit.
    if np.any(can_fit_mask):
        remaining_capacities_for_fit = bins_remain_cap[can_fit_mask]
        # Calculate the 'slack' or unused space if the item is placed
        slack = remaining_capacities_for_fit - item
        # The priority is inversely related to the slack.
        # We can use a transformation that maps smaller slack to higher priority.
        # Example: higher priority for smaller slack.
        # We can use the negative slack itself, but it might be too sensitive.
        # A common approach for 'almost full' is to prioritize bins with remaining capacity
        # just above the item size.
        # Let's define priority as:
        # 1 / (slack + epsilon)  where epsilon is a small number to avoid division by zero
        # Or, more directly for "almost full": prioritize bins with remaining capacity `r`
        # such that `r - item` is minimal.
        # Let's try assigning a higher score when `bins_remain_cap[i] - item` is small.
        # To make it higher priority, we can use `1 / (bins_remain_cap[i] - item + epsilon)`
        # or `-(bins_remain_cap[i] - item)`.
        # The prompt implies "highest priority score for each bin".
        # "Almost Full Fit" suggests we prefer bins that are almost full AFTER the item is placed.
        # This means we prefer bins with `bins_remain_cap[i] - item` to be small.
        # To make smaller `bins_remain_cap[i] - item` yield higher priority, we can use
        # `- (bins_remain_cap[i] - item)`.
        # So, if bins_remain_cap[i] = 10, item = 3, then slack = 7. Priority = -7.
        # If bins_remain_cap[j] = 5, item = 3, then slack = 2. Priority = -2.
        # -2 > -7, so bin j is preferred. This aligns with Almost Full Fit.

        # We can also consider the original remaining capacity: we want bins that are
        # somewhat large, but not excessively large.
        # Let's define priority as `remaining_capacity` minus a penalty for being too small
        # or too large.
        # A simpler interpretation of "Almost Full Fit" is to prioritize bins with the
        # smallest remaining capacity that can still fit the item.

        # Let's try prioritizing bins with the smallest `bins_remain_cap` that is >= `item`.
        # This means sorting the suitable bins by their remaining capacity and assigning
        # higher priority to smaller capacities.

        # Calculate priorities for bins that can fit the item.
        # A higher score means a better fit according to "Almost Full Fit".
        # We want the bin with the minimum `bins_remain_cap` that is still >= `item`.
        # So, let's assign a priority that is inversely related to the remaining capacity.
        # Or, assign higher values to smaller remaining capacities.
        # `max_possible_capacity - bins_remain_cap[i]` would prioritize bins that are fuller.
        # But we want bins that are *almost full after placing the item*.
        # So, `(max_possible_capacity - item) - bins_remain_cap[i]` is another way to look at it.
        # Let's stick to a simpler and more direct interpretation:
        # Prioritize bins where `bins_remain_cap[i] - item` is minimized.
        # So, `- (bins_remain_cap[i] - item)` is a good candidate for higher priority.
        # Let's set the priorities for the bins that can fit the item.
        # The maximum priority will come from the bin with the smallest remaining capacity
        # that is still sufficient.
        priorities[can_fit_mask] = - (remaining_capacities_for_fit - item)

        # To ensure that the *least* remaining capacity is prioritized,
        # we can normalize these scores or use a large number for the most preferred bin.
        # If multiple bins have the same minimal remaining capacity, they will have the same priority.
        # This is acceptable.

        # Alternative for "Almost Full Fit": penalize bins that have a lot of remaining capacity *after* placing the item.
        # If `bins_remain_cap[i]` is the remaining capacity, and we place `item`,
        # the new remaining capacity will be `bins_remain_cap[i] - item`.
        # We want this new remaining capacity to be as small as possible (but non-negative).
        # So, we want to maximize `-(bins_remain_cap[i] - item)` for bins where `bins_remain_cap[i] >= item`.
        # This is exactly what was calculated.

    return priorities
```
