```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit strategy.

    The Best Fit strategy prioritizes bins that have just enough capacity to fit the item,
    minimizing wasted space. It assigns a higher priority to bins with the smallest
    remaining capacity that is still greater than or equal to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher score indicates higher priority.
    """
    # Initialize priorities to a very low value (e.g., -infinity) for bins that cannot fit the item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that can fit the item
    suitable_bins_mask = bins_remain_cap >= item

    # For suitable bins, calculate the remaining capacity *after* placing the item
    remaining_capacities_after_placement = bins_remain_cap[suitable_bins_mask] - item

    # The "best fit" is the one that leaves the least remaining capacity,
    # so we want to prioritize bins with the smallest positive difference.
    # We can use the negative of this difference to make smaller positive differences
    # result in higher (less negative) priority scores.
    priorities[suitable_bins_mask] = -remaining_capacities_after_placement

    # Alternatively, a more direct "best fit" priority can be the inverse of the
    # remaining capacity after placement. However, to ensure it's monotonic with
    # best fit (smaller remaining capacity is better), we can subtract from
    # a large constant, or simply use the negative of the remaining capacity as above.
    # Let's refine the logic to give a clear preference for the smallest *positive* remaining space.

    # We want to maximize the inverse of the remaining space *after* placing the item,
    # but only for bins that can fit it. A smaller remaining space is better.
    # So, if a bin can fit the item, its "goodness" is inversely related to
    # (bin_remain_cap - item). To avoid division by zero if capacity is exactly item size,
    # we can add a small epsilon or handle it.

    # Let's re-implement for clarity on the Best Fit principle:
    # The best bin is the one where `bin_remain_cap - item` is minimized and non-negative.
    # This means we want to maximize `-(bin_remain_cap - item)` for eligible bins.

    # If no bins can fit the item, all priorities remain -np.inf, indicating no valid placement.
    # For bins that *can* fit the item, we want to assign a score that is higher for bins
    # with smaller `bins_remain_cap - item`.
    # The score should be related to how "tight" the fit is.

    # Option 1: Score as negative of remaining space after placement. Higher score is better.
    # This naturally prioritizes bins with smaller (bin_remain_cap - item).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_indices = np.where(bins_remain_cap >= item)[0]
    if len(can_fit_indices) > 0:
        remaining_after_fit = bins_remain_cap[can_fit_indices] - item
        # We want to assign higher priority to smaller remaining_after_fit.
        # So, we can use the negative of remaining_after_fit.
        # This is equivalent to prioritizing the bins that are closest to exactly fitting the item.
        priorities[can_fit_indices] = -remaining_after_fit

    # If multiple bins have the exact same best fit, their priorities will be the same.
    # The selection would then depend on the order or an arbitrary tie-breaker,
    # which is acceptable for this heuristic.

    return priorities
```
