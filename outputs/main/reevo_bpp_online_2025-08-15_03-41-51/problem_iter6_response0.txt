```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function implements a "Best Fit" strategy. It prioritizes
    bins that can accommodate the item with the least amount of remaining
    capacity (i.e., the tightest fit). This is achieved by assigning a priority
    equal to the negative of the remaining capacity after packing the item.
    Bins that cannot accommodate the item are given a very low priority (negative infinity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority. Bins that cannot fit the item
        will have a very low priority (negative infinity).
    """
    # Initialize priorities to a very low value, effectively excluding bins
    # that cannot fit the item from being selected by default.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that have enough remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the priority.
    # The goal is to find the "tightest fit," meaning the bin where
    # `bins_remain_cap - item` is minimized.
    # To convert this minimization problem into a maximization problem for
    # priority scores, we use the negative of the remaining capacity after
    # placing the item.
    # A smaller positive value for `bins_remain_cap - item` will result in
    # a larger (less negative) priority score.
    # E.g., if item=0.3 and capacities are [0.35, 0.4, 0.5]:
    # Remaining capacities after packing: [0.05, 0.1, 0.2]
    # Priorities: [-0.05, -0.1, -0.2]
    # The highest priority (-0.05) corresponds to the tightest fit.
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
