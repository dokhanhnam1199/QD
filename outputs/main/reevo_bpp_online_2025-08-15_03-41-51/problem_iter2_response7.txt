```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Implements the 'Almost Full Fit' priority function for online Bin Packing.

    This strategy prioritizes bins that will have the least remaining capacity
    after the item is packed, provided they can fit the item. This aims to
    minimize wasted space in each bin.

    Args:
        item: Size of the item to be packed.
        bins_remain_cap: A NumPy array containing the remaining capacities of each bin.

    Returns:
        A NumPy array of priority scores for each bin. Bins that can fit the item
        will have higher scores (closer to 0) if their remaining capacity after
        packing is smaller. Bins that cannot fit the item will have a score of -inf.
    """
    # Initialize priorities to negative infinity, as bins that cannot fit the item
    # should have the lowest possible priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that have enough remaining capacity to accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the 'slack' (remaining capacity
    # after the item is placed). The goal of 'Almost Full Fit' is to minimize this slack.
    # We want bins with the smallest non-negative slack to have the highest priority.
    if np.any(can_fit_mask):
        # Calculate the remaining capacity in the bins *after* the item is placed.
        remaining_after_packing = bins_remain_cap[can_fit_mask] - item

        # To prioritize bins with the smallest remaining capacity after packing,
        # we can use the negative of this remaining capacity as the priority.
        # A smaller remaining_after_packing (e.g., 0) will result in a higher priority (-0).
        # A larger remaining_after_packing (e.g., 5) will result in a lower priority (-5).
        priorities[can_fit_mask] = -remaining_after_packing

    return priorities
```
