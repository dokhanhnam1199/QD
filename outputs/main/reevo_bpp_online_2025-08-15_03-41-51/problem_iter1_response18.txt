```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.

    This heuristic prioritizes bins that are a "tight fit" for the item (i.e.,
    have remaining capacity close to the item size) but also explores other
    options to avoid getting stuck in local optima.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 0.1  # Probability of choosing a random bin
    num_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate a "tight fit" score for bins that can accommodate the item
    # Higher score for bins where remaining capacity is closer to the item size
    tight_fit_scores = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins_mask = bins_remain_cap >= item
    if np.any(valid_bins_mask):
        # Calculate the absolute difference between remaining capacity and item size
        diff = bins_remain_cap[valid_bins_mask] - item
        # Invert the difference so smaller differences (tighter fits) get higher scores
        # Add a small epsilon to avoid division by zero if remaining capacity equals item size
        tight_fit_scores[valid_bins_mask] = 1.0 / (np.abs(diff) + 1e-9)
        # Normalize scores to be between 0 and 1
        if np.max(tight_fit_scores) > 0:
            tight_fit_scores /= np.max(tight_fit_scores)
        else:
            tight_fit_scores[valid_bins_mask] = 1.0 # All remaining valid bins are perfect fits

    # Apply Epsilon-Greedy strategy
    if np.random.rand() < epsilon:
        # Explore: Assign equal probability to all bins
        priorities = np.ones(num_bins) / num_bins
    else:
        # Exploit: Prioritize bins with tight fit scores, but still consider others
        # A simple way to combine is to add a small random noise to tight fit scores
        # and also give a baseline probability to all bins.
        priorities = tight_fit_scores + np.random.rand(num_bins) * 0.1
        # Ensure that bins that cannot fit the item have a very low priority
        priorities[~valid_bins_mask] = -1.0

    # Normalize priorities to sum to 1 (optional but good practice for distribution)
    # However, for a direct selection heuristic, absolute values are more important.
    # We will simply return the computed priorities.
    return priorities

```
