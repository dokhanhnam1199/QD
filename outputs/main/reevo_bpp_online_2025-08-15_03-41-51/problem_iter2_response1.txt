```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function implements a modified First Fit strategy,
    often referred to as "Almost Full Fit" or "Best Fit". It prioritizes
    bins that can accommodate the item with the least amount of remaining
    capacity (i.e., the tightest fit). This is because packing an item
    into a bin that is nearly full leaves less "wasted" space in that bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority. Bins that cannot fit the item
        will have a very low priority.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # We only consider bins that have enough remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, we want to prioritize those that leave
    # the least amount of remaining space after the item is placed.
    # This means minimizing (bins_remain_cap - item).
    # A common way to turn minimization into maximization for priority is to
    # use the negative of the difference or an inverse.
    # Using the negative of the difference directly works well:
    # A smaller (bins_remain_cap - item) results in a less negative (higher) score.
    # E.g., if item=0.3, bin_caps=[0.35, 0.4, 0.5]
    # diffs: [0.05, 0.1, 0.2]
    # scores: [-0.05, -0.1, -0.2] -> bin_cap=0.35 is prioritized.
    
    # To ensure higher priority for tighter fits, we can assign a score that is
    # inversely proportional to the remaining capacity *after* placing the item.
    # Specifically, we want to maximize `1 / (bins_remain_cap - item + epsilon)`
    # or, equivalently, minimize `bins_remain_cap - item`.
    
    # A simple and effective way is to use the negative of the slack space:
    # `slack = bins_remain_cap - item`
    # Priority = -slack
    # This means smaller positive slacks (tighter fits) get higher priority.

    # To avoid issues with floating point precision or bins that are exactly full,
    # we can also consider a score that peaks when bins_remain_cap is exactly item.
    # A common approach is to use a function that is maximized at 0 for `bins_remain_cap - item`.
    # For example, `-abs(bins_remain_cap - item)` or `1 / (1 + abs(bins_remain_cap - item))`.
    # The former `-(bins_remain_cap - item)` is simpler and achieves the goal for
    # bins that can fit the item.

    # Let's use the negative of the slack space.
    # We add a small epsilon to the `bins_remain_cap` before calculating slack
    # to ensure that even if `bins_remain_cap` is exactly `item`, the slack
    # is a small positive number, leading to a priority close to 0, and
    # preventing any zero or negative slack values from causing issues if
    # they were to be inverted directly without care.
    # However, simply taking `- (bins_remain_cap - item)` is generally sufficient
    # and more direct for "Best Fit" / "Almost Full Fit".

    # Prioritize bins where `bins_remain_cap - item` is minimized.
    # This translates to a score that is maximized for these bins.
    # We can use `-(bins_remain_cap - item)` which means smaller positive values of `bins_remain_cap - item`
    # result in higher (less negative) scores.
    
    # A small adjustment for "almost full fit" could be to slightly penalize bins
    # that are *too* full (i.e., `bins_remain_cap` is very large), even if they can fit.
    # However, standard "Almost Full Fit" or "Best Fit" primarily focuses on minimizing slack.

    # Let's refine the score to be `- (bins_remain_cap - item)` for bins that fit.
    # This score directly reflects the remaining space after packing.
    # Higher priority for smaller remaining space.

    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    # For bins that cannot fit the item, their priority should be very low so they are never chosen.
    # Setting them to negative infinity ensures this.
    priorities[~can_fit_mask] = -np.inf

    # Note: This heuristic is essentially "Best Fit". It prioritizes the bin
    # that will have the least remaining capacity after the item is placed.
    # This is often a good strategy for "Almost Full Fit" as it aims to
    # utilize space efficiently in bins that are already somewhat full.

    return priorities
```
