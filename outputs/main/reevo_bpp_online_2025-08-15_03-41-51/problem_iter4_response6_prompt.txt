{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins with minimal remaining capacity (tightest fits)\n    using a smooth ranking function (sigmoid-like). It also adds a small bonus\n    for larger remaining capacities to balance immediate tightness with future\n    flexibility.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate higher priority.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Determine which bins can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate scores only for bins that can fit the item\n    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]\n\n    if len(fitting_bins_remain_cap) == 0:\n        return priorities  # No bin can fit the item\n\n    # --- Heuristic 1: Prioritize tightest fits (minimal remaining capacity) ---\n    # Use a sigmoid-like function to rank the remaining capacities.\n    # A bin with capacity `c` will have a score related to `c - item`.\n    # We want smaller `c - item` to have higher priority.\n    # Let's transform `c` to `1 / (c - item + epsilon)` for tight fit, then scale.\n    # A simpler approach is to directly use the inverse of the difference,\n    # and apply a sigmoid-like transformation to smooth it.\n\n    # Calculate the \"tightness\" score: smaller is better (tighter fit)\n    # Add a small epsilon to avoid division by zero or extremely large values.\n    epsilon_tightness = 1e-6\n    tightness_scores = 1.0 / (fitting_bins_remain_cap - item + epsilon_tightness)\n\n    # Smooth the tightness scores using a sigmoid-like function.\n    # We want to map smaller `tightness_scores` (closer to 0 for tightest fits)\n    # to higher priority values.\n    # A function like `1 / (1 + exp(-k * (x - offset)))` would map small x to high values.\n    # Here, x = tightness_scores. Let's aim for a concave shape where scores\n    # are high for small tightness_scores.\n    # Using a simple inverse scaling and then sigmoid can be complex.\n    # A more direct approach: map the differences `fitting_bins_remain_cap - item`\n    # to priorities. Small difference -> high priority.\n    # Let's use `exp(-k * diff)` where `k` is a scaling factor.\n    # A larger `k` makes the function steeper, focusing on very tight fits.\n    k_tightness = 5.0  # Sensitivity parameter for tightness\n    tightness_priority = np.exp(-k_tightness * (fitting_bins_remain_cap - item))\n\n    # --- Heuristic 2: Small bonus for larger remaining capacities (future flexibility) ---\n    # This encourages not packing too tightly if there's a slightly less tight fit\n    # that still leaves significant space.\n    # We can add a small bonus based on the `fitting_bins_remain_cap`.\n    # A simple linear bonus or a scaled sigmoid might work.\n    # Let's use a scaled version of the remaining capacity, perhaps with a saturation.\n    bonus_scale = 0.05  # How much bonus to give for remaining capacity\n    flexibility_bonus = bonus_scale * fitting_bins_remain_cap\n\n    # Combine the heuristics\n    # Simple addition: weighted sum of tightness priority and flexibility bonus.\n    # Adjust weights as needed. Let's give more weight to tightness.\n    w_tightness = 1.0\n    w_flexibility = 0.5\n\n    combined_scores = w_tightness * tightness_priority + w_flexibility * flexibility_bonus\n\n    # Normalize the combined scores for bins that can fit the item\n    if np.max(combined_scores) > 0:\n        normalized_scores = combined_scores / np.max(combined_scores)\n    else:\n        normalized_scores = np.zeros_like(combined_scores)\n\n    # Assign the calculated normalized scores to the original positions\n    priorities[can_fit_mask] = normalized_scores\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This priority function implements a modified First Fit strategy,\n    often referred to as \"Almost Full Fit\" or \"Best Fit\". It prioritizes\n    bins that can accommodate the item with the least amount of remaining\n    capacity (i.e., the tightest fit). This is because packing an item\n    into a bin that is nearly full leaves less \"wasted\" space in that bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate higher priority. Bins that cannot fit the item\n        will have a very low priority.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # We only consider bins that have enough remaining capacity for the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, we want to prioritize those that leave\n    # the least amount of remaining space after the item is placed.\n    # This means minimizing (bins_remain_cap - item).\n    # A common way to turn minimization into maximization for priority is to\n    # use the negative of the difference or an inverse.\n    # Using the negative of the difference directly works well:\n    # A smaller (bins_remain_cap - item) results in a less negative (higher) score.\n    # E.g., if item=0.3, bin_caps=[0.35, 0.4, 0.5]\n    # diffs: [0.05, 0.1, 0.2]\n    # scores: [-0.05, -0.1, -0.2] -> bin_cap=0.35 is prioritized.\n    \n    # To ensure higher priority for tighter fits, we can assign a score that is\n    # inversely proportional to the remaining capacity *after* placing the item.\n    # Specifically, we want to maximize `1 / (bins_remain_cap - item + epsilon)`\n    # or, equivalently, minimize `bins_remain_cap - item`.\n    \n    # A simple and effective way is to use the negative of the slack space:\n    # `slack = bins_remain_cap - item`\n    # Priority = -slack\n    # This means smaller positive slacks (tighter fits) get higher priority.\n\n    # To avoid issues with floating point precision or bins that are exactly full,\n    # we can also consider a score that peaks when bins_remain_cap is exactly item.\n    # A common approach is to use a function that is maximized at 0 for `bins_remain_cap - item`.\n    # For example, `-abs(bins_remain_cap - item)` or `1 / (1 + abs(bins_remain_cap - item))`.\n    # The former `-(bins_remain_cap - item)` is simpler and achieves the goal for\n    # bins that can fit the item.\n\n    # Let's use the negative of the slack space.\n    # We add a small epsilon to the `bins_remain_cap` before calculating slack\n    # to ensure that even if `bins_remain_cap` is exactly `item`, the slack\n    # is a small positive number, leading to a priority close to 0, and\n    # preventing any zero or negative slack values from causing issues if\n    # they were to be inverted directly without care.\n    # However, simply taking `- (bins_remain_cap - item)` is generally sufficient\n    # and more direct for \"Best Fit\" / \"Almost Full Fit\".\n\n    # Prioritize bins where `bins_remain_cap - item` is minimized.\n    # This translates to a score that is maximized for these bins.\n    # We can use `-(bins_remain_cap - item)` which means smaller positive values of `bins_remain_cap - item`\n    # result in higher (less negative) scores.\n    \n    # A small adjustment for \"almost full fit\" could be to slightly penalize bins\n    # that are *too* full (i.e., `bins_remain_cap` is very large), even if they can fit.\n    # However, standard \"Almost Full Fit\" or \"Best Fit\" primarily focuses on minimizing slack.\n\n    # Let's refine the score to be `- (bins_remain_cap - item)` for bins that fit.\n    # This score directly reflects the remaining space after packing.\n    # Higher priority for smaller remaining space.\n\n    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)\n\n    # For bins that cannot fit the item, their priority should be very low so they are never chosen.\n    # Setting them to negative infinity ensures this.\n    priorities[~can_fit_mask] = -np.inf\n\n    # Note: This heuristic is essentially \"Best Fit\". It prioritizes the bin\n    # that will have the least remaining capacity after the item is placed.\n    # This is often a good strategy for \"Almost Full Fit\" as it aims to\n    # utilize space efficiently in bins that are already somewhat full.\n\n    return priorities\n\n[Reflection]\nFocus on minimizing slack for tighter fits. Avoid complex smoothing for simpler, effective heuristics.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}