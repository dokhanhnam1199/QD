```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a
    heuristic that prioritizes tight fits with some flexibility.

    This heuristic aims to:
    1. Prioritize bins with a tight fit (smallest remaining capacity that still fits the item).
    2. Provide a slight advantage to bins with larger remaining capacity to maintain flexibility.
    3. Explicitly handle bins that cannot fit the item.
    4. Use a sigmoid-like function to create a smooth priority curve based on fit quality.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    num_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit, return all zeros
    if not np.any(can_fit_mask):
        return priorities

    # For bins that can fit, calculate a priority score.
    # We want to prioritize bins where remaining_capacity - item is small (tight fit).
    # We also want to give a small bonus to bins with larger remaining capacity.
    # A sigmoid-like function can map the 'fit quality' to a priority.
    # Let's define fit_score as remaining_capacity - item. Lower is better.
    # We want to invert this relationship for priority.

    # Calculate the "fit quality" for bins that can accommodate the item
    # This is the leftover space after placing the item. Smaller is better.
    leftover_space = bins_remain_cap[can_fit_mask] - item

    # To prioritize tight fits, we want to give higher scores to smaller leftover_space.
    # We can use a transformation like 1 / (1 + leftover_space) or exp(-k * leftover_space).
    # Let's try a simple approach first: prioritize smaller leftover space directly.
    # To balance with flexibility, we can add a small bonus for larger original capacities.

    # Normalize leftover_space to a [0, 1] range for a smoother function.
    # Avoid division by zero if all leftover_spaces are 0.
    min_leftover = np.min(leftover_space)
    max_leftover = np.max(leftover_space)

    if max_leftover == min_leftover:
        normalized_leftover = np.zeros_like(leftover_space)
    else:
        normalized_leftover = (leftover_space - min_leftover) / (max_leftover - min_leftover)

    # Priority based on tightness: higher for smaller normalized_leftover.
    # Use a sigmoid-like function: exp(-k * normalized_leftover)
    # A higher 'k' will emphasize tighter fits more. Let's set k=5.
    tightness_priority = np.exp(-5 * normalized_leftover)

    # Add a small bonus for larger remaining capacity to promote flexibility.
    # Normalize original remaining capacity for bins that can fit.
    original_capacities_fitting = bins_remain_cap[can_fit_mask]
    min_cap_fit = np.min(original_capacities_fitting)
    max_cap_fit = np.max(original_capacities_fitting)

    if max_cap_fit == min_cap_fit:
        normalized_capacity = np.zeros_like(original_capacities_fitting)
    else:
        normalized_capacity = (original_capacities_fitting - min_cap_fit) / (max_cap_fit - min_cap_fit)

    # Flexibility bonus: directly proportional to normalized capacity.
    # Scale this bonus to be smaller than the tightness priority.
    flexibility_bonus = 0.2 * normalized_capacity

    # Combine priorities: prioritize tightness but give a small boost for flexibility.
    combined_priority_values = tightness_priority + flexibility_bonus

    # Assign these priorities to the corresponding bins
    priorities[can_fit_mask] = combined_priority_values

    # Ensure priorities are non-negative and handle potential NaNs if any calculations failed
    priorities = np.nan_to_num(priorities, nan=0.0, posinf=0.0, neginf=0.0)

    # Normalize priorities to be between 0 and 1 for consistent comparison.
    # This step is important for the interpretation of "higher score = higher priority".
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities = priorities / max_priority
    else:
        # If all priorities are zero (e.g., no bin fits, or all fit-perfectly with no capacity left),
        # this ensures we return zeros, not NaNs.
        priorities = np.zeros_like(priorities)

    return priorities
```
