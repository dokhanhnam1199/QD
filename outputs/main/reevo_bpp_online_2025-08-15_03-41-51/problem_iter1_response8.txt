```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.

    The Epsilon-Greedy strategy balances exploration and exploitation.
    - With probability epsilon, it explores by choosing a random bin.
    - With probability 1-epsilon, it exploits by choosing the bin that offers the
      best "fit" for the current item.

    Here, "best fit" is defined as the bin with the smallest remaining capacity
    that can still accommodate the item. This is a common heuristic for bin packing
    (e.g., First Fit Decreasing, Best Fit).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    epsilon = 0.2  # Exploration rate
    num_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Determine which bins can fit the item
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, assign a very low priority to all
    if not np.any(can_fit_mask):
        return priorities

    # Exploitation: Find the best fit bin(s)
    # Best fit means the bin with the smallest remaining capacity that still fits the item.
    # We calculate (remaining_capacity - item) and find the minimum of this difference
    # among the bins that can fit the item.
    potential_bins_remaining_cap = bins_remain_cap[can_fit_mask]
    if len(potential_bins_remaining_cap) > 0:
        differences = potential_bins_remaining_cap - item
        min_diff = np.min(differences)

        # Bins with the minimum difference get a high priority (exploitation)
        # We can assign a base high priority, e.g., 1.0
        best_fit_indices_in_mask = np.where(differences == min_diff)[0]
        original_indices_of_best_fit = np.where(can_fit_mask)[0][best_fit_indices_in_mask]
        priorities[original_indices_of_best_fit] = 1.0

    # Exploration: Assign a smaller priority to some bins randomly
    # Identify bins that are candidates for exploration (can fit the item)
    candidate_indices_for_exploration = np.where(can_fit_mask)[0]

    # If there are candidate bins, randomly pick some to give a slightly lower
    # exploration priority. This ensures exploration doesn't always pick the best.
    if len(candidate_indices_for_exploration) > 0:
        num_to_explore = int(np.floor(epsilon * len(candidate_indices_for_exploration)))
        if num_to_explore > 0:
            # Choose which of the candidate bins to give an exploration priority
            explore_indices = np.random.choice(candidate_indices_for_exploration, size=num_to_explore, replace=False)
            # Assign a priority lower than the best fit, but still positive
            # This exploration priority should be lower than the exploitation priority (1.0)
            exploration_priority_value = 0.5
            priorities[explore_indices] = exploration_priority_value

    # Ensure that bins that cannot fit the item have a priority of 0 (or negative if preferred)
    priorities[~can_fit_mask] = 0.0

    # Normalize priorities to avoid issues with very large/small numbers,
    # though for selection, relative values are more important.
    # This step is optional but can be good practice if priorities are used in other contexts.
    # If all priorities are 0 (no bin can fit), this will result in NaNs, so handle that.
    if np.max(priorities) > 0:
        priorities = priorities / np.max(priorities)
    else:
        # If no bin could fit, and priorities are all 0, this is handled.
        pass

    # Further refinement: Add a small random component to the "best fit" bins
    # to make the greedy choice less deterministic if multiple bins are tied for best fit.
    # This can be considered a micro-exploration within the exploitation phase.
    best_fit_indices_refined = np.where(priorities == 1.0)[0]
    if len(best_fit_indices_refined) > 0:
        random_boost = np.random.rand(len(best_fit_indices_refined)) * 0.1 # Small boost
        priorities[best_fit_indices_refined] += random_boost

    # Re-normalize after the boost if needed
    if np.max(priorities) > 0:
        priorities = priorities / np.max(priorities)


    return priorities
```
