```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit.

    Worst Fit strategy prioritizes bins that have the most remaining capacity,
    aiming to leave smaller, more constrained bins for potentially larger future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a preferred bin.
    """
    # In Worst Fit, we want to choose the bin with the LARGEST remaining capacity.
    # The priority should be directly proportional to the remaining capacity,
    # provided the item fits. Bins where the item doesn't fit get a priority of 0.

    # Create a mask for bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Initialize priorities to 0.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # For bins where the item fits, assign a priority equal to their remaining capacity.
    # This makes bins with more space more "prioritized".
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]

    return priorities
```
