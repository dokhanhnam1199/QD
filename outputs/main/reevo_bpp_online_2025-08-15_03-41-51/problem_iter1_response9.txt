```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Softmax-Based Fit strategy.

    The priority is calculated based on the remaining capacity of the bins.
    Bins with more remaining capacity are generally preferred, but the softmax
    function introduces a probabilistic preference, meaning even bins with less
    capacity have a chance of being chosen, especially if the differences in
    capacity are not large.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # We want to prioritize bins that can fit the item.
    # A higher remaining capacity is generally better, as it leaves more room for future items.
    # The Softmax function allows us to convert these capacities into probabilities (priorities).

    # Calculate a 'fit score' for each bin.
    # We only consider bins that can actually fit the item.
    # For bins that cannot fit, their priority will be 0.
    fit_scores = np.zeros_like(bins_remain_cap)
    can_fit_mask = bins_remain_cap >= item
    fit_scores[can_fit_mask] = bins_remain_cap[can_fit_mask]

    # Apply softmax to the fit scores.
    # Softmax converts scores into probabilities, where higher scores get higher probabilities.
    # Adding a small epsilon to prevent issues with all scores being zero or identical.
    epsilon = 1e-9
    try:
        # Softmax: exp(score) / sum(exp(scores))
        exp_scores = np.exp(fit_scores - np.max(fit_scores) + epsilon) # Stabilization for large values
        priorities = exp_scores / np.sum(exp_scores)
    except ZeroDivisionError:
        # If all scores are effectively zero (e.g., no bins can fit the item), return uniform probabilities.
        # In a real online BPP, this scenario would mean creating a new bin.
        # Here, we'll just distribute the priority evenly among all bins as a fallback.
        priorities = np.ones_like(bins_remain_cap) / len(bins_remain_cap)

    return priorities
```
