{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Softmax-Based Fit.\n\n    The priority is calculated by considering how well the item fits into the bin,\n    penalizing bins that are too full or too empty relative to the item's size.\n    A temperature parameter can be used to control the \"softness\" of the softmax.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Filter out bins that cannot accommodate the item\n    available_bins_mask = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap)\n\n    if np.any(available_bins_mask):\n        valid_bins_remain_cap = bins_remain_cap[available_bins_mask]\n\n        # Calculate a \"fit score\" for each available bin.\n        # A good fit is when the remaining capacity is just enough or slightly more than the item.\n        # We can use the inverse of (remaining_capacity - item) as a measure,\n        # but this can lead to division by zero or very large values if remaining_capacity is very close to item.\n        # A better approach might be to look at the ratio or a penalized version.\n\n        # Strategy: Prioritize bins where the remaining capacity is \"close\" to the item size.\n        # This encourages filling bins more completely.\n        # Let's define a \"fitness\" as the proportion of the item that fits into the remaining capacity.\n        # Or, a score that is high when remaining_capacity is close to item, and decreases\n        # as remaining_capacity deviates from item.\n\n        # Consider a score based on the negative difference between remaining capacity and item size,\n        # but this penalizes overfilling significantly and underfilling somewhat.\n        # fitness_scores = -(valid_bins_remain_cap - item)\n\n        # Alternative: Consider the \"tightness\" of the fit.\n        # A tighter fit is when remaining_capacity is slightly larger than item.\n        # Let's use a score that is high when remaining_capacity is close to `item` and decreases as it gets larger.\n        # `1 / (valid_bins_remain_cap - item + epsilon)` can be unstable.\n\n        # Let's use a score that rewards bins that can *just* fit the item.\n        # This could be related to the \"waste\" or the \"slack\" remaining.\n        # We want bins where `bins_remain_cap - item` is small and non-negative.\n        # So, a high score for small non-negative `bins_remain_cap - item`.\n\n        # Let's define a \"proximity\" score: a function that is maximized when `bins_remain_cap - item` is close to 0.\n        # For example, a Gaussian-like function or an inverse quadratic.\n\n        # Let's try a simple approach: the larger the remaining capacity is *relative* to the item,\n        # the less preferred it might be, up to a point.\n        # However, Softmax-Based Fit usually means mapping a desirability score to a probability-like distribution.\n        # A common desirability for \"Best Fit\" is simply `remaining_capacity - item`.\n        # If we want to use Softmax, we need a score that can be exponentiated.\n\n        # Let's try to score bins based on how \"full\" they would become after adding the item.\n        # A more full bin is often preferred to keep smaller bins open.\n        # So, let's consider `item / original_bin_capacity`. But we don't have original capacity here.\n        # We only have `bins_remain_cap`.\n\n        # Let's consider a score where we want to leave as little space as possible after packing.\n        # The space left would be `bins_remain_cap - item`. We want this to be small.\n        # So, we want `bins_remain_cap - item` to be minimized.\n        # However, Softmax usually picks the *best* option, so a larger score is better.\n        # Let's define a score as `-(bins_remain_cap - item)` which is `item - bins_remain_cap`.\n        # This means we prefer bins where the remaining capacity is smaller (closer to the item size).\n        # This is essentially a variation of \"Worst Fit Decreasing\" if used with a greedy strategy.\n        # For Softmax, we need a score.\n\n        # Let's try this: a score that is high when `bins_remain_cap` is just slightly larger than `item`.\n        # Consider `1 / (bins_remain_cap - item + 1e-6)` might work but is prone to large values.\n\n        # A more robust approach for Softmax is to define a desirability.\n        # For example, a desirability score related to how \"good\" the fit is.\n        # A good fit means `bins_remain_cap` is close to `item`.\n        # Let's use a score based on the *proportion* of capacity used by the item.\n        # For available bins, let's calculate `item / (item + bins_remain_cap)`. This is like a \"fill ratio\" if it were empty.\n        # This would prefer bins that are already somewhat full.\n        # However, that's not directly related to `bins_remain_cap` alone.\n\n        # Let's re-evaluate the \"Softmax-Based Fit\" idea. The core is to convert\n        # desirability scores into a probability distribution using softmax.\n        # The desirability should reflect how good it is to place the item in a bin.\n        # For BPP, a good fit is often considered one that leaves minimal waste.\n        # Waste for a bin is `bins_remain_cap - item`. We want to minimize this.\n        # A higher score should correspond to lower waste.\n        # So, let's try a score that is inversely related to the waste, or directly related to how close `bins_remain_cap` is to `item`.\n\n        # Let's try a score that prioritizes bins where `bins_remain_cap` is slightly larger than `item`.\n        # `score = 1.0 / (bins_remain_cap - item + 1.0)` could work, as it's high when the denominator is small.\n        # Adding 1.0 makes it more numerically stable and ensures the denominator is at least 1.\n\n        # More formally for Softmax, we want a utility function u(state).\n        # Here, state could be (item, bin_remaining_capacity).\n        # A possible utility function for placing `item` in `bin` with `remaining_cap`:\n        # utility = -(remaining_cap - item)^2  (penalizes deviation from perfect fit)\n        # utility = -(remaining_cap - item) (prefers bins with less slack)\n        # utility = item / remaining_cap (prefers fuller bins)\n\n        # Let's try a utility that favors bins where `bins_remain_cap` is close to `item`.\n        # We can use a Gaussian-like function centered around `item`.\n        # `score = exp(-alpha * (bins_remain_cap - item)^2)`\n        # Or, for simplicity, a score inversely proportional to the slack:\n        # `score = 1.0 / (bins_remain_cap - item + epsilon)`\n\n        # Let's use a desirability function that's high when remaining_capacity is just slightly larger than item.\n        # This encourages finding a \"tight\" fit.\n        # `desirability = 1.0 / (bins_remain_cap - item + 1.0)`\n\n        # Alternative idea for Softmax: Focus on the *resulting* occupancy.\n        # If the item fits, the new remaining capacity will be `bins_remain_cap - item`.\n        # We might want bins that are \"nearly full\" after packing.\n        # So, we want `bins_remain_cap - item` to be small, but not negative.\n        # The \"fullness\" is `1 - (bins_remain_cap - item) / original_capacity`. We don't have original capacity.\n\n        # Let's simplify: Use a desirability score that's directly related to the quality of the fit.\n        # A good fit means `bins_remain_cap - item` is small.\n        # Let's define a desirability that is high for small non-negative differences.\n        # `desirability = 1.0 / (max(0, bins_remain_cap - item) + 1.0)`\n        # This will give a score of 1.0 for bins where `bins_remain_cap == item`,\n        # and a score close to 1.0 for bins where `bins_remain_cap` is slightly larger than `item`.\n        # For bins where `bins_remain_cap < item`, they are already excluded.\n\n        # Let's try a slightly different approach: penalize bins that leave *too much* space.\n        # A desirable bin is one where `bins_remain_cap` is close to `item`.\n        # Let's define a score based on the \"slack\" or \"waste\". Lower waste is better.\n        # For softmax, higher score is better. So, a score inversely proportional to waste.\n        # Waste = `bins_remain_cap - item`.\n        # Score = `1.0 / (bins_remain_cap - item + epsilon)`\n\n        # Let's use a score that prefers bins that become \"most full\" after packing the item.\n        # This means minimizing `bins_remain_cap - item`.\n        # Let's map this to a positive score for softmax.\n        # Consider `score = exp(-alpha * (bins_remain_cap - item))`\n        # Or, more simply, `score = 1.0 / (bins_remain_cap - item + C)` where C is a small constant.\n        # If `bins_remain_cap` is much larger than `item`, this score becomes small.\n        # If `bins_remain_cap` is just slightly larger than `item`, this score is large.\n        # This is similar to \"Best Fit\" in terms of the ordering, but the softmax transforms it.\n\n        # Let's try `score = 1.0 / (bins_remain_cap - item + 1.0)` for available bins.\n        # This rewards bins that have a small positive slack.\n\n        desirability_scores = 1.0 / (valid_bins_remain_cap - item + 1.0)\n\n        # Apply softmax to the desirability scores\n        # Softmax function: exp(x_i) / sum(exp(x_j))\n        # A temperature parameter can be added to control the sharpness of the distribution.\n        temperature = 1.0  # Can be tuned\n        exp_scores = np.exp(desirability_scores / temperature)\n        softmax_probabilities = exp_scores / np.sum(exp_scores)\n\n        # Assign these probabilities back to the original priority array\n        priorities[available_bins_mask] = softmax_probabilities\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using First Fit strategy.\n\n    The First Fit strategy prioritizes bins that can accommodate the item and\n    among those, it favors the bins that leave the least remaining capacity after\n    placing the item. This encourages tighter packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Bins that cannot fit the item will have a priority of 0.\n        Among the bins that can fit, the priority is inversely proportional\n        to the remaining capacity after fitting the item (higher priority for less remaining capacity).\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate remaining capacity for bins that can fit the item\n    remaining_capacities_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # For bins that can fit, assign priority. Higher priority for less remaining capacity.\n    # We can use the inverse of remaining capacity, but to avoid division by zero\n    # and to ensure higher values are better, we can use a large number minus the remaining capacity.\n    # Or, more simply, sort by remaining capacity and assign decreasing priorities.\n    # A simple heuristic is to use the negative of the remaining capacity, so smaller remaining capacity is a larger negative number,\n    # but we want higher priority score to be selected. So, we can use a large constant minus the remaining capacity.\n    # Or, to reflect the 'first fit' nature where the *first* suitable bin is preferred, we can simply give a higher score\n    # to the *first* bin that fits, or iterate through and give decreasing scores for subsequent fits.\n\n    # Let's implement a common First Fit priority: assign a high score to bins that fit,\n    # and among those, prioritize the one with the smallest remaining capacity.\n    # We can achieve this by sorting the fitting bins by their remaining capacity\n    # and assigning priorities.\n\n    fitting_bins_indices = np.where(can_fit_mask)[0]\n\n    if fitting_bins_indices.size > 0:\n        # Get the remaining capacities of the bins that can fit the item\n        current_fitting_capacities = bins_remain_cap[fitting_bins_indices]\n\n        # Calculate the resulting remaining capacity after placing the item\n        resulting_remaining_capacities = current_fitting_capacities - item\n\n        # Sort the fitting bins by their resulting remaining capacity in ascending order\n        # This means bins that leave less space will come first.\n        sorted_indices_within_fitting = np.argsort(resulting_remaining_capacities)\n\n        # Assign priorities. The bin that leaves the least remaining capacity gets the highest priority.\n        # We can assign priorities from n to 1, where n is the number of fitting bins.\n        num_fitting_bins = len(fitting_bins_indices)\n        for i in range(num_fitting_bins):\n            original_index = fitting_bins_indices[sorted_indices_within_fitting[i]]\n            priorities[original_index] = num_fitting_bins - i # Assign decreasing priority scores\n\n    return priorities\n\n[Reflection]\nPrioritize fitting bins with minimal slack. Softmax enables flexible preference mapping.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}