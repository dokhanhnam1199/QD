```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Softmax-Based Fit strategy for online Bin Packing Problem.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_cap = bins_remain_cap[valid_bins_mask]

    if valid_bins_cap.size == 0:
        return np.zeros_like(bins_remain_cap)

    # Calculate a 'fit' score. We prefer bins with less remaining capacity that can still fit the item.
    # This encourages using bins more fully before opening new ones.
    # Add a small epsilon to avoid division by zero if a bin has exactly the item's size remaining.
    fit_scores = 1.0 / (valid_bins_cap - item + 1e-9)

    # Apply softmax to convert fit scores into probabilities (priorities)
    exp_scores = np.exp(fit_scores)
    priorities = exp_scores / np.sum(exp_scores)

    # Create an output array of the same size as the original bins_remain_cap
    # and place the calculated priorities in the correct positions.
    output_priorities = np.zeros_like(bins_remain_cap, dtype=float)
    output_priorities[valid_bins_mask] = priorities

    return output_priorities
```
