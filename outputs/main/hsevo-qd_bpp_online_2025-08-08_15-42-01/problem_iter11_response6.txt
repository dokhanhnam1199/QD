```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines tightest fit with a bonus for perfect fits and guided random exploration."""
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    fit_mask = bins_remain_cap >= item
    
    if not np.any(fit_mask):
        return priorities

    fitting_bins_remain_cap = bins_remain_cap[fit_mask]
    remaining_capacities_after_fit = fitting_bins_remain_cap - item
    
    scores = -remaining_capacities_after_fit
    perfect_fit_bonus = 1.0
    scores[remaining_capacities_after_fit == 0] += perfect_fit_bonus

    # Introduce a small random component for exploration, biased towards better scores
    exploration_factor = 0.1 # Small factor to add randomness
    random_scores = np.random.rand(len(scores)) * exploration_factor
    priorities[fit_mask] = scores + random_scores
    
    return priorities
```
