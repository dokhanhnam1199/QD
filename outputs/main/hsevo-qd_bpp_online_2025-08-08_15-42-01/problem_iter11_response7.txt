```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit with a soft penalty for waste and guided exploration,
    prioritizing bins that leave minimal remaining capacity, with a bonus for perfect fits.
    """
    valid_bins_mask = bins_remain_cap >= item
    output_priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if not np.any(valid_bins_mask):
        return output_priorities

    valid_bins_cap = bins_remain_cap[valid_bins_mask]

    # Score based on how tightly the item fits. Lower remaining capacity is better.
    # Add a small epsilon to avoid division by zero.
    fit_scores = 1.0 / (valid_bins_cap - item + 1e-9)

    # Strong bonus for perfect fits to encourage minimal waste.
    perfect_fit_mask = (valid_bins_cap - item) < 1e-9
    fit_scores[perfect_fit_mask] *= 5.0  # Enhanced bonus for perfect fits

    # Normalize scores using softmax to get probabilities.
    # This smooths the distribution and highlights preferred bins.
    exp_scores = np.exp(fit_scores)
    priorities = exp_scores / np.sum(exp_scores)

    output_priorities[valid_bins_mask] = priorities

    return output_priorities
```
