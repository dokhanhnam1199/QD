```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Softmax-Based Fit with a bonus for perfect fits to improve bin utilization.
    Prioritizes bins that are almost full while giving a strong preference to exact fits.
    """
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_cap = bins_remain_cap[valid_bins_mask]

    if valid_bins_cap.size == 0:
        return np.zeros_like(bins_remain_cap)

    # Assign a high score for perfect fits, otherwise use the inverse of remaining capacity.
    # Adding a small epsilon for numerical stability and to avoid division by zero.
    # A perfect fit gets a score of 1.0, others get 1.0 / (remaining_capacity - item + epsilon)
    fit_scores = np.where(
        np.isclose(valid_bins_cap, item),
        1.0,
        1.0 / (valid_bins_cap - item + 1e-9)
    )

    # Apply softmax to convert fit scores into probabilities (priorities)
    # This normalizes scores and makes the preference for tighter fits relative.
    exp_scores = np.exp(fit_scores)
    priorities = exp_scores / np.sum(exp_scores)

    # Create an output array of the same size as the original bins_remain_cap
    # and place the calculated priorities in the correct positions.
    output_priorities = np.zeros_like(bins_remain_cap, dtype=float)
    output_priorities[valid_bins_mask] = priorities

    return output_priorities
```
