```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Inverse Distance (Proximity Fit) strategy for Online Bin Packing.
    Prioritizes bins that are "closest" to fitting the current item.
    A higher priority score indicates a better fit.
    """
    # Calculate the "gap" or difference between bin capacity and item size.
    # We are looking for bins where this gap is minimized and non-negative.
    gaps = bins_remain_cap - item

    # Where the item can fit (gap >= 0), assign a priority based on proximity.
    # We use the inverse of the gap plus a small epsilon to avoid division by zero
    # for bins that perfectly fit the item. A smaller positive gap means a higher priority.
    # For bins where the item doesn't fit (gap < 0), assign a priority of 0.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit_mask = gaps >= 0
    
    # Use 1 / (gap + epsilon) to prioritize smaller positive gaps.
    # A small epsilon (e.g., 1e-9) prevents division by zero if gap is exactly 0.
    # Adding 1 to the gap and taking the inverse (1 / (gap + 1)) can also work,
    # which naturally penalizes larger gaps more and gives higher priority to
    # bins with smaller gaps. Let's use the latter for a smoother distribution.
    priorities[can_fit_mask] = 1.0 / (gaps[can_fit_mask] + 1.0)

    return priorities
```
