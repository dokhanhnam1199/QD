```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins for tightest fit, with a bonus for perfect fits.

    Combines the 'Almost Full Fit' idea with a bonus for bins that become exactly full,
    and a small penalty for bins that leave significant residual space,
    while ensuring unfillable bins receive the lowest priority.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    fit_mask = bins_remain_cap >= item

    # Calculate scores for bins that can fit the item
    remaining_capacities_after_fit = bins_remain_cap[fit_mask] - item

    # Prioritize bins that result in smallest remaining capacity (tightest fit)
    # Use the negative of remaining capacity to turn minimization into maximization
    # Add a small value to ensure negative remaining capacities are prioritized
    # over positive ones.
    scores = -remaining_capacities_after_fit

    # Add a bonus for perfect fits (remaining capacity is zero)
    # This encourages using bins that are exactly filled.
    perfect_fit_bonus = 1.0
    scores[remaining_capacities_after_fit == 0] += perfect_fit_bonus

    # Assign the calculated scores to the valid bins
    priorities[fit_mask] = scores

    return priorities
```
