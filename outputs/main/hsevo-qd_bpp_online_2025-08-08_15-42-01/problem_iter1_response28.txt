```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an epsilon-greedy approach.

    The priority is calculated as a balance between exploiting good fits (smaller remaining capacity)
    and exploring other bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 0.1
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    valid_bins_mask = bins_remain_cap >= item
    valid_bins_capacities = bins_remain_cap[valid_bins_mask]

    if np.sum(valid_bins_mask) == 0:
        return priorities

    # Exploitation: Prioritize bins that offer a "tight fit" (minimize waste)
    # A simple heuristic for tight fit is the inverse of the remaining capacity
    # after placing the item. Smaller remaining capacity is better.
    # Add a small epsilon to avoid division by zero if an item perfectly fills a bin.
    tight_fit_scores = 1.0 / (valid_bins_capacities - item + 1e-9)

    # Exploration: Introduce some randomness to explore other options
    # Assign a random score to all valid bins.
    exploration_scores = np.random.rand(len(valid_bins_capacities))

    # Combine exploitation and exploration using epsilon-greedy strategy
    # With probability epsilon, choose a random valid bin (exploration)
    # With probability 1-epsilon, choose the bin with the best tight fit score (exploitation)
    use_exploration = np.random.rand(len(valid_bins_capacities)) < epsilon

    combined_scores = np.where(use_exploration, exploration_scores, tight_fit_scores)

    priorities[valid_bins_mask] = combined_scores

    return priorities
```
