```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    available_bins_mask = bins_remain_cap >= item
    
    if np.any(available_bins_mask):
        
        available_bins_cap = bins_remain_cap[available_bins_mask]
        
        
        priorities[available_bins_mask] = 1.0 / (bins_remain_cap[available_bins_mask] - item + 1e-6)
        
        
        best_fit_mask = np.isclose(bins_remain_cap, item)
        if np.any(best_fit_mask & available_bins_mask):
            priorities[best_fit_mask & available_bins_mask] = np.max(priorities[available_bins_mask]) + 1
        else:
            
            worst_fit_mask = bins_remain_cap == np.max(bins_remain_cap[available_bins_mask])
            priorities[worst_fit_mask & available_bins_mask] = np.max(priorities[available_bins_mask]) + 0.5

    return priorities
```
