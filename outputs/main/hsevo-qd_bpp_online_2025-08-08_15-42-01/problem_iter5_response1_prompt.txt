{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Implements the Best Fit strategy for the online Bin Packing Problem.\n    Items are prioritized to be placed in bins where they leave the least\n    remaining space, thus aiming to minimize wasted space.\n    \"\"\"\n    # Calculate the remaining space after placing the item in each bin.\n    # Only consider bins where the item can actually fit.\n    possible_fits = bins_remain_cap >= item\n    remaining_space = np.where(possible_fits, bins_remain_cap - item, np.inf)\n\n    # The priority is inversely related to the remaining space.\n    # A smaller remaining space means a higher priority.\n    # We use a small epsilon to avoid division by zero if remaining_space is 0\n    # and to ensure bins with 0 remaining space (perfect fit) get the highest priority.\n    epsilon = 1e-9\n    priorities = np.where(possible_fits, 1 / (remaining_space + epsilon), 0)\n\n    # Ensure that bins where the item cannot fit have a priority of 0.\n    priorities[~possible_fits] = 0\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Calculates priorities for placing an item into bins based on remaining capacity.\n\n    Args:\n        item: The size of the item to be placed.\n        bins_remain_cap: A numpy array of remaining capacities for each bin.\n        epsilon: The probability of choosing an exploration score for candidate bins.\n        perfect_fit_bonus: An additional score added to bins with near-perfect fits.\n        large_remainder_penalty_factor: A scaling factor for penalizing large surpluses.\n        exploration_noise_scale: The maximum value of random noise added to exploration scores.\n        exploration_candidate_portion: The portion of the best-fitting bins to consider for exploration.\n        moderate_capacity_multiplier: A multiplier to define the upper bound for moderate capacity bins.\n\n    Returns:\n        A numpy array of priority scores for each bin.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    \n    can_fit_mask = bins_remain_cap >= item\n    \n    if not np.any(can_fit_mask):\n        return priorities\n\n### Analyze & experience\n- *   **Heuristics 1 vs 2:** These heuristics are identical. The ranking suggests a potential issue with the evaluation or the ranking itself. However, assuming they represent a valid point in the ranking, their complexity and explicit handling of \"exploration candidates\" (top K fits and moderate capacity bins) is a notable design choice. The \"surplus penalty\" is a nuanced addition to pure tight-fitting.\n\n*   **Heuristics 2 vs 3 & 4:** Heuristics 3 and 4 are identical and simpler than Heuristic 2. They implement a basic epsilon-greedy approach (random choice vs. tight fit). Heuristic 2's \"adaptive exploration\" is more sophisticated, trying to guide exploration towards \"good enough\" bins rather than purely random ones. The penalty for large surpluses in Heuristic 2 also adds a layer of strategic thinking. The simpler epsilon-greedy in 3 & 4 is less likely to discover complex packing patterns.\n\n*   **Heuristics 3 & 4 vs 5 & 6:** Heuristics 5 and 6 are also simpler than 2 but introduce different mechanisms. Heuristic 6 is a pure \"Best Fit\" (minimizing remaining space). Heuristic 5 uses a softmax approach, turning \"fit scores\" into probabilities. This is an interesting probabilistic exploration. Comparing 3/4 (epsilon-greedy) to 5 (softmax) and 6 (pure best fit), the epsilon-greedy approach (3/4) is more direct in its exploration strategy. Best Fit (6) is purely exploitative, while Softmax (5) introduces a probabilistic distribution over good fits. The ranking suggests that these more direct or probabilistic approaches are less effective than the hybrid ones.\n\n*   **Heuristics 6 vs 7 & 8 & 9:** Heuristics 7, 8, and 9 are similar, focusing on tight fits and bonuses for perfect fits. Heuristic 6 (pure Best Fit) is simpler. Heuristics 7-9 add specific bonuses and sometimes penalties. Heuristic 8 & 9 are identical. The ranking indicates that adding these specific bonuses (like for perfect fits) and penalties (like for large remainders) improves performance over pure Best Fit. Heuristic 7 is more basic than 8/9.\n\n*   **Heuristics 7 vs 10 & 11:** Heuristic 10 is identical to 5. Heuristic 11 uses \"Almost Full Fit\" by maximizing `item - bins_remain_cap`, which is equivalent to minimizing `bins_remain_cap - item` (Best Fit). It does not explicitly add bonuses or penalties. The ranking suggests that the more nuanced approaches (like those in 7-9) are better than this direct Best Fit implementation.\n\n*   **Heuristics 11 vs 12:** Heuristic 12 is the most complex, combining penalties for wasted space, bonuses for near-perfect fits, and a \"soft\" preference for bins with more capacity (exploration-guided). Its higher ranking suggests that this multi-objective optimization within the heuristic is effective. Heuristic 11 is a simpler Best Fit variant.\n\n*   **Heuristics 12 vs 13:** Heuristic 13 is an FFD-inspired heuristic, prioritizing tight fits with a small penalty for slight oversights. It's simpler than 12. The ranking places 12 significantly higher, implying its combined strategy is superior.\n\n*   **Heuristics 13 vs 14 & 15 & 16:** Heuristic 14 is a simple Best Fit with explicit probabilities, but the loop implementation is inefficient. Heuristics 15 and 16 are identical and appear to be optimized versions of Heuristic 2, with hyperparameter tuning evident (e.g., `epsilon`, `perfect_fit_bonus`). These are still ranked lower than 13, which might indicate that the specific parameter values or the overall strategy of 13 is slightly better than the tuned 2. The presence of `torch` and `scipy` imports in 14-16, but not used in the snippet, is odd; they might be remnants of a larger framework or an indication of potential future extensions. The ranking suggests that even tuned versions of simpler hybrid strategies are not as good as the complex one (12) or even the FFD-inspired one (13).\n\n*   **Heuristics 15 & 16 vs 17 & 18:** Heuristics 17 and 18 are identical \"Random Fit\" strategies. They simply assign random priorities to bins that can fit the item. These are the simplest and worst-performing strategies, as they lack any exploitation logic. The ranking clearly places them at the bottom.\n\n*   **Heuristics 17 & 18 vs 19 & 20:** Heuristic 19 aims to combine perfect fits, tight fits, and tie-breaking based on original capacity. Heuristic 20 tries to balance tight fitting with penalties for small residuals and adds exploration. The ranking places 19 and 20 above random fit but below the more sophisticated hybrid strategies. Heuristic 19's tie-breaking logic is a good addition. Heuristic 20's penalty for small residuals is an interesting refinement.\n\n*   **Overall:** The top-performing heuristics (1, 2, 12) are complex, often combining tight-fitting principles with sophisticated exploration strategies (adaptive exploration, multi-objective scoring). Simpler \"Best Fit\" or epsilon-greedy approaches are ranked lower. Pure random strategies are at the bottom. The use of explicit bonuses and penalties for specific fit scenarios (perfect fit, large/small residuals) appears beneficial. The ranking suggests a hierarchy: complex hybrids > refined hybrids/FFD-inspired > basic hybrids/probabilistic > simple exploitation (Best Fit) > random.\n- \nHere's a refined approach to self-reflection for designing better heuristics:\n\n*   **Keywords:** Multi-objective optimization, guided exploration, adaptive reward functions, hybrid strategies.\n*   **Advice:** Focus on iterative refinement of multi-objective heuristics, dynamically adjusting exploration/exploitation based on problem state.\n*   **Avoid:** Over-reliance on static or purely greedy approaches; neglecting the interplay between penalizing poor fits and rewarding ideal fits.\n*   **Explanation:** By viewing heuristic design as a continuous learning process, you can better identify optimal trade-offs between thorough exploration and efficient exploitation, leading to more robust and performant solutions.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}