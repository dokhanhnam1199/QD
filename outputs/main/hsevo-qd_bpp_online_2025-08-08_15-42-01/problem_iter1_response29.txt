```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate scores based on how well the item fits.
    # A better fit (smaller remaining capacity after adding the item) gets a higher score.
    # We add a small epsilon to avoid division by zero or log(0) if remaining capacity is exactly the item size.
    fitting_scores = np.maximum(0, bins_remain_cap - item) + 1e-9

    # Apply Softmax to convert scores into probabilities (priorities).
    # A higher fitting score should translate to a higher probability of selection.
    exp_scores = np.exp(fitting_scores)
    priorities = exp_scores / np.sum(exp_scores)

    return priorities
```
