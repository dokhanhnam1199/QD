```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit strategy with a penalty for slack to encourage tight packing.
    Prioritizes bins with minimal remaining capacity after placement,
    and a small penalty is given to bins that result in perfect fits.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf)
    
    can_fit_mask = bins_remain_cap >= item
    
    if np.any(can_fit_mask):
        available_bins_remain_cap = bins_remain_cap[can_fit_mask]
        
        # Calculate the remaining capacity after placing the item
        remaining_after_placement = available_bins_remain_cap - item
        
        # Prioritize bins with least remaining capacity (best fit)
        # Add a small penalty for perfect fits (remaining capacity is zero)
        priorities[can_fit_mask] = -remaining_after_placement
        
        perfect_fit_mask = remaining_after_placement == 0
        priorities[can_fit_mask][perfect_fit_mask] += 1e-3 # Small bonus for perfect fit
        
    return priorities
```
