```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using First Fit.

    The First Fit strategy prioritizes bins that can accommodate the item.
    Among those that can, it prioritizes bins that would have the least
    remaining capacity after packing the item (to fill bins as much as possible).
    Bins that cannot accommodate the item are given a priority of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item
    
    # For bins that can fit, calculate remaining capacity after adding item
    remaining_capacities_after_fit = bins_remain_cap[can_fit_mask] - item
    
    # Assign higher priority to bins with less remaining capacity after fitting
    # We invert the remaining capacity so that smaller remaining capacity gets higher priority
    # Add a small epsilon to avoid division by zero if remaining capacity is exactly 0
    priorities[can_fit_mask] = 1.0 / (remaining_capacities_after_fit + 1e-9)
    
    # Normalize priorities to be between 0 and 1 if desired, or use raw values
    # Here, we just use the inverted remaining capacity as priority score
    
    return priorities
```
