```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines tightest fit with a bonus for perfect fits and a penalty for large residuals.
    Prioritizes bins that minimize remaining capacity after packing, with extra rewards
    for exact fills and penalties for bins left significantly underutilized.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    
    # Mask for bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item
    
    if not np.any(can_fit_mask):
        return priorities

    # Calculate remaining capacities after fitting the item into eligible bins
    remaining_capacities_after_fit = bins_remain_cap[can_fit_mask] - item
    
    # Base score: prioritize tighter fits (minimize remaining capacity)
    # We use the negative of remaining capacity to convert minimization to maximization.
    # Adding a small constant to ensure positive values are preferred over zero.
    scores = -remaining_capacities_after_fit

    # Bonus for perfect fits (remaining capacity is zero)
    perfect_fit_bonus = 1.0
    scores[remaining_capacities_after_fit == 0] += perfect_fit_bonus
    
    # Penalty for large residuals: penalize bins that leave a lot of space
    # We'll penalize bins where remaining capacity is > 50% of the item size, scaled.
    # This encourages using bins more efficiently.
    large_residual_threshold = item * 0.5
    large_residual_mask = remaining_capacities_after_fit > large_residual_threshold
    large_residual_penalty_factor = 0.5 # Adjust this factor as needed
    scores[large_residual_mask] -= remaining_capacities_after_fit[large_residual_mask] * large_residual_penalty_factor

    # Assign calculated scores to the bins that can fit the item
    priorities[can_fit_mask] = scores

    return priorities
```
