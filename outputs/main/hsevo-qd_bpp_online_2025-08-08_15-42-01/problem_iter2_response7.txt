```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Softmax-based fit with a bonus for perfect fits,
    prioritizing densely packed bins and exact fits.
    """
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_cap = bins_remain_cap[valid_bins_mask]

    if valid_bins_cap.size == 0:
        return np.zeros_like(bins_remain_cap)

    # Base 'fit' score: inverse of remaining capacity after placement
    # Add epsilon to avoid division by zero
    fit_scores = 1.0 / (valid_bins_cap - item + 1e-9)

    # Bonus for perfect fits: add a significant value if remaining capacity exactly matches item
    perfect_fit_mask = (valid_bins_cap - item) < 1e-9
    fit_scores[perfect_fit_mask] += 10.0  # Significant bonus for perfect fits

    # Apply softmax to normalize scores into priorities
    exp_scores = np.exp(fit_scores)
    priorities = exp_scores / np.sum(exp_scores)

    # Create output array and place priorities
    output_priorities = np.zeros_like(bins_remain_cap, dtype=float)
    output_priorities[valid_bins_mask] = priorities

    return output_priorities
```
