```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines strong tight-fit prioritization with a penalty for excessive remaining capacity
    and a bonus for perfect fits, using a refined scoring for tie-breaking.
    Prioritizes bins that leave minimal remainder, favoring perfect fits, and then
    bins with less leftover space, using original capacity as a tie-breaker.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item
    
    fitting_bins_capacity = bins_remain_cap[can_fit_mask]
    
    if fitting_bins_capacity.size == 0:
        return scores
        
    potential_remain_cap_vals = fitting_bins_capacity - item
    
    # Assign a high score to perfect fits
    perfect_fit_indices_in_fitting = np.where(potential_remain_cap_vals == 0)[0]
    scores[can_fit_mask][perfect_fit_indices_in_fitting] = 1000.0
    
    # For bins that are not perfect fits, prioritize by minimizing remaining capacity.
    # Use the negative of the remaining capacity as the primary score component.
    # To break ties (same remaining capacity), prefer bins that were originally larger.
    # This is achieved by adding a small value proportional to the original capacity.
    non_perfect_fit_indices_in_fitting = np.where(potential_remain_cap_vals > 0)[0]
    
    if non_perfect_fit_indices_in_fitting.size > 0:
        # Calculate a score that favors smaller remainders, with a tie-breaker
        # favoring larger original capacity.
        # The factor 1e-3 ensures that minimizing remaining capacity is the primary goal.
        tie_breaker_strength = 1e-3
        
        # Use original capacity divided by a large number to scale down the tie-breaker
        # This prevents it from overpowering the primary 'tightness' score.
        max_possible_original_cap = np.max(fitting_bins_capacity) if fitting_bins_capacity.size > 0 else 1.0
        
        scores[can_fit_mask][non_perfect_fit_indices_in_fitting] = \
            -potential_remain_cap_vals[non_perfect_fit_indices_in_fitting] \
            + (fitting_bins_capacity[non_perfect_fit_indices_in_fitting] / max_possible_original_cap) * tie_breaker_strength
            
    return scores
```
