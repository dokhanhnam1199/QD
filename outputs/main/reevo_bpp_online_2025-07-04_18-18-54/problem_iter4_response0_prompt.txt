{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = 1.0 # Assuming bin size of 1\n\n    # Feasibility check: Hard constraint - invalidates bins that can't fit item.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # 1. Fill Ratio Prioritization: Encourages higher fill ratios.\n    fill_ratio = (bin_size - bins_remain_cap) / bin_size  # Existing fill ratio\n    new_fill_ratio_if_added = (bin_size - (bins_remain_cap - item)) / bin_size\n    \n    # Prioritize higher fill ratios after adding the item\n    priorities += 2 * new_fill_ratio_if_added\n    \n    # 2. Tight Fit Bonus: Prioritize bins where the item fits snugly.\n    remaining_space = bins_remain_cap - item\n    fit_mask = bins_remain_cap >= item\n    \n    if np.any(fit_mask):\n        min_waste = np.min(remaining_space[fit_mask])\n        tight_fit_bonus = np.exp(-5 * (remaining_space / min_waste))  # Exponential decay\n        priorities[fit_mask] += tight_fit_bonus[fit_mask]\n        \n    # 3. Near-Full Penalty: Discourage filling bins too close to capacity.\n    near_full_threshold = 0.95 * bin_size\n    near_full_mask = (bins_remain_cap - item) < (bin_size - near_full_threshold)  #Check if after adding we go above threshold\n\n    priorities[near_full_mask] -= 3 # Strong penalty if adding this gets us near full\n        \n    # Normalize the Priorities:\n    if np.any(priorities != -np.inf): # only normalise if a feasible bin exists.\n        max_priority = np.max(priorities[priorities != -np.inf])\n        min_priority = np.min(priorities[priorities != -np.inf])\n        if max_priority > min_priority:\n            priorities[priorities != -np.inf] = (priorities[priorities != -np.inf] - min_priority) / (max_priority - min_priority)\n        else:\n            priorities[priorities != -np.inf] = 0.5 # if all priorities equal give them same weighting.\n    else:\n        priorities = -1*np.ones_like(bins_remain_cap)\n        \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Remove infeasible bins immediately.\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf  # Very low priority\n\n    # 2. Fill Ratio: Prioritize higher fill ratios.\n    fill_ratios = item / bins_remain_cap[feasible_bins]\n    priorities[feasible_bins] = fill_ratios\n\n    # 3. Waste Minimization (Tie-breaker): Slightly favor bins with less waste.\n    waste = bins_remain_cap[feasible_bins] - item\n    # Scale the waste inversely to the bin size. The smaller the bin, the more important minimizing waste is.\n    waste_penalty = -waste / bins_remain_cap[feasible_bins]\n    priorities[feasible_bins] += waste_penalty * 0.1\n\n    # 4. Randomness (Exploration): Add a small random value to break ties and encourage exploration.\n    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.001\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility first, then fill ratio. Introduce randomness and waste minimization for exploration and refinement.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}