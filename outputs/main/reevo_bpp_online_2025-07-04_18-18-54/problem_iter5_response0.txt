```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Highest priority for bins that can fit.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 10

    # Tight-Fit Bonus: Prioritize bins where the item fits snugly.
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    tight_fit_bonus = np.exp(-10 * remaining_after_fit / item)  # Exponential decay of bonus
    priorities[fit_mask] += tight_fit_bonus

    # Waste Minimization: Slightly penalize bins with large remaining capacity after placement.
    waste_penalty = np.maximum(0, (bins_remain_cap - item - 0.2*item)/(0.8)) #if remaining cap > threshold penalty increases
    priorities[fit_mask] -= waste_penalty[fit_mask] * 0.5

    # Near-Full Penalty: Discourage filling bins that are nearly full (might strand future larger items).
    near_full_threshold = 0.1 #avoid making bins less than 10% full
    near_full_mask = (bins_remain_cap < (item + near_full_threshold)) & fit_mask
    priorities[near_full_mask] -= 2

    #Hard Constraint: If it doesn't fit, ensure it's heavily penalized.
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] -= 100

    return priorities
```
