{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Feasibility: Must fit\n    fit_mask = bins_remain_cap >= item\n    priorities[~fit_mask] = -np.inf  # Absolutely avoid bins that don't fit\n\n    # Tight-Fit Bonus: Reward bins with small remaining capacity after placement.\n    remaining_after_fit = bins_remain_cap[fit_mask] - item\n    \n    # Avoid division by zero by adding small value to avoid division by zero.\n    priorities[fit_mask] += np.exp(-remaining_after_fit / (item + 1e-6))\n\n    # Waste Minimization: Penalize excessive remaining capacity\n    avg_cap = np.mean(bins_remain_cap)\n    excess_mask = bins_remain_cap > (avg_cap + item / 2)\n    priorities[excess_mask] -= 0.2\n\n    # Near-Full Penalty: Discourage almost-full bins (risk of small items later)\n    almost_full_threshold = 0.95\n    almost_full_mask = (bins_remain_cap < item * (1 / almost_full_threshold)) & fit_mask\n    priorities[almost_full_mask] -= 0.1  # Small penalty\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Identify bins that can accommodate the item.\n    feasible_bins = bins_remain_cap >= item\n    \n    if np.any(feasible_bins):\n        # TIGHT FIT: Prioritize bins with tighter fit.  Smaller remaining space is better.\n        remaining_space = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] += 1.0 / (remaining_space + 1e-9)  # Avoid division by zero\n\n        # FILL RATIO: Prioritize higher fill ratios (item size relative to bin capacity).\n        fill_ratios = item / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] += fill_ratios\n\n        # PENALIZE EXCESS CAPACITY: Discourage large remaining capacity after adding the item.\n        # Penalty is proportional to the *squared* excess capacity for stronger discouragement.\n        excess_capacity = bins_remain_cap[feasible_bins] - item\n        penalty_factor = 0.5  # Adjust as needed; higher values increase the penalty.\n        priorities[feasible_bins] -= penalty_factor * (excess_capacity**2)\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits and fill ratios. Strongly penalize excess capacity. Avoid unnecessary complexity.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}