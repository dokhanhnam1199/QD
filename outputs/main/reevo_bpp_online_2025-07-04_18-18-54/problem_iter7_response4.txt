```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility Check & Huge Penalty
    feasible = bins_remain_cap >= item
    priorities[~feasible] = -1e9  # Very negative priority if it doesn't fit

    # 2. Reward Tight Fits (Best-Fit Inspired)
    diff = bins_remain_cap - item
    diff[~feasible] = np.inf  # Ignore infeasible bins for best-fit calculation
    best_fit_idx = np.argmin(diff)
    priorities[best_fit_idx] += 5  # Substantially reward best fit

    # 3. Reward Good Fill Ratio
    fill_ratio = item / (bins_remain_cap + item) #item size/ bin total capacity
    priorities[feasible] += fill_ratio[feasible] * 2  # Reward good fill ratio

    # 4. Remaining Space as Tie-breaker (Smaller is better if feasible)
    priorities[feasible] += (1 - (bins_remain_cap[feasible] / np.max(bins_remain_cap))) #normalize remaining space and add it to priority

    # 5. Encourage almost full bins
    almost_full_cap = bins_remain_cap - item
    almost_full_mask = (almost_full_cap <= 0.1) & (feasible)
    priorities[almost_full_mask] += 10 #high priority if we almost fill

    return priorities
```
