```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign high priority to bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1.0
    
    # Give a slightly higher priority to bins that have minimal wasted space
    waste = bins_remain_cap - item
    minimal_waste_mask = (waste >= 0)
    if np.any(minimal_waste_mask):
        min_waste = np.min(waste[minimal_waste_mask])
        priorities[minimal_waste_mask & (waste == min_waste)] += 0.5

    # Penalize bins where the item doesn't fit by setting the priority to a very small number
    priorities[~fit_mask] = -1e9
    
    # Introduce a small amount of randomness to break ties and explore solutions
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01
    
    return priorities
```
