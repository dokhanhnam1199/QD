```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give a high priority to bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1.0

    # Prioritize bins where the remaining space after adding the item is small
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += np.exp(-remaining_after_fit)  # Exponential decay to favor smaller remaining space
    
    # Penalize bins that have very little remaining capacity overall to avoid fragmentation
    priorities -= np.exp(-bins_remain_cap)  # Exponential penalty for small remaining capacity

    # Heavily penalize bins that can't fit the item. We want to only select them as a last resort (or potentially never)
    priorities[~fit_mask] -= 100 # large negative number so that the bins that fit will always be picked over these
        
    return priorities
```
