```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1 # Assume bin size is 1, can be passed as argument if variable

    # Heuristic 1: Fill ratio - balance utilization
    fill_ratio = (bin_size - bins_remain_cap) / bin_size
    priorities += fill_ratio

    # Heuristic 2: Tight fit - prioritize bins where item fits snugly
    remaining_after_fit = bins_remain_cap - item
    fit_mask = remaining_after_fit >= 0
    if np.any(fit_mask):
      priorities[fit_mask] += np.exp(-5 * remaining_after_fit[fit_mask])  # Exponential decay for tighter fits

    # Heuristic 3: Penalize near-full bins (but not yet full) to avoid creating very fragmented bins
    near_full_threshold = 0.1  # Adjust this threshold as needed
    near_full_mask = (bins_remain_cap > item) & (remaining_after_fit <= near_full_threshold)
    priorities[near_full_mask] -= 2 * np.log(1 / (remaining_after_fit[near_full_mask] + 0.01))   # Logarithmic penalty

    # Heuristic 4: Strong penalty for infeasibility
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] -= 1000  # Huge negative priority

    # Heuristic 5: Normalize priorities to range [0, 1] for stability and exploration
    max_priority = np.max(priorities)
    min_priority = np.min(priorities)

    if max_priority > min_priority:
        priorities = (priorities - min_priority) / (max_priority - min_priority)
    else: # all values are equal, set to zero
        priorities = np.zeros_like(bins_remain_cap, dtype=float)

    return priorities
```
