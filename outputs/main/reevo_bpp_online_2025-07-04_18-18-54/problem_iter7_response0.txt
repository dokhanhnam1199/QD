```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Feasibility Check and Huge Penalty
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return -np.ones_like(bins_remain_cap) * 1000  # All bins infeasible
    priorities[~feasible_bins] = -1000  # Massive penalty for infeasible bins

    # Heuristic 2: Reward Tight Fits
    remaining_after_fit = bins_remain_cap[feasible_bins] - item
    tight_fit_bonus = np.exp(-10 * remaining_after_fit / item)  # Exponentially decaying bonus
    priorities[feasible_bins] += tight_fit_bonus

    # Heuristic 3: Reward High Fill Ratio (after placing the item)
    fill_ratio = (bins_remain_cap[feasible_bins] - item) / 1.0 # Assuming bin size is 1.0
    fill_ratio_reward = 1 - fill_ratio # closer to 1 better
    priorities[feasible_bins] += fill_ratio_reward

    # Heuristic 4: Normalize Priorities to a reasonable range
    if np.any(priorities > 0):
        priorities = priorities / np.max(priorities[priorities>0]) #Scale between 0 and 1, postive values
    
    return priorities
```
