{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility check: Bin must have enough capacity.\n    feasible_bins = bins_remain_cap >= item\n    \n    # 2. If no bin is feasible, assign a very low priority to all bins.\n    if not np.any(feasible_bins):\n        return priorities - 1e9  # Return very low priority\n    \n    # 3. Calculate remaining capacity after placing the item (only for feasible bins).\n    remaining_capacities = bins_remain_cap - item\n    remaining_capacities[~feasible_bins] = -1  # Mark infeasible bins\n    \n    # 4. Calculate priority based on how full the bin would be after placement.\n    #    Prioritize bins that become fuller, but not too full.  We want a good fit, \n    #    but also want to avoid bins being too close to full to allow future placements\n    \n    # a. Fill ratio\n    fill_ratio = (bins_remain_cap - remaining_capacities) / 1.0 #Assume bin capacity is 1.0\n    \n    # b. Prioritize bins with a higher fill ratio, up to a point (e.g., 90% full).\n    priorities = fill_ratio\n\n    # c. Penalize bins that would be very full\n    very_full = remaining_capacities < 0.1\n    priorities[very_full & feasible_bins] -= 0.5 # Substantial penalty.\n\n    # d. Incentivize almost full, if possible\n    almost_full = (remaining_capacities >= 0.05) & (remaining_capacities < 0.1) & feasible_bins\n    priorities[almost_full] += 0.2\n    \n\n    # 5. Give infeasible bins very low priority.\n    priorities[~feasible_bins] = -1e9\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First-Fit-Decreasing-like Heuristic: Prioritize bins that can fit the item with minimal waste.\n    \n    # 1. Filter out bins that cannot accommodate the item\n    valid_bins = bins_remain_cap >= item\n    \n    if not np.any(valid_bins):\n        # If no bin can fit the item, all priorities are zero (handled by initialization)\n        return priorities\n    \n    # 2. Calculate wasted space for valid bins\n    wasted_space = bins_remain_cap[valid_bins] - item\n    \n    # 3. Give higher priority to bins with less wasted space\n    priorities[valid_bins] = 1.0 / (wasted_space + 1e-6)  # Avoid division by zero\n    \n    # 4. Boost priority for bins that are nearly full after adding the item (encourages full bins)\n    nearly_full_threshold = 0.9  # Bins that are at least 90% full after insertion are preferred. Can be fine-tuned.\n    is_nearly_full = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins] <= (1 - nearly_full_threshold)\n    priorities[valid_bins][is_nearly_full] *= 2.0  # Adjust multiplier as needed\n\n    # Alternative 1: Give a very small priority to bins that cannot fit item, but only if NO bin can fit the item well.\n    # if not np.any(bins_remain_cap > item * 1.2):  # Try bins only if the \"waste\" will be high. 1.2 is a safety factor\n    #    priorities += 0.0001\n    # Alternative 2: Penalize very empty bins in all cases. This pushes for more packed bins overall.\n    #   priorities -= (1 - bins_remain_cap/ np.max(bins_remain_cap)) *0.001\n\n    return priorities\n\n[Reflection]\nMinimize waste, prioritize near-full bins, and only consider infeasible bins when necessary.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}