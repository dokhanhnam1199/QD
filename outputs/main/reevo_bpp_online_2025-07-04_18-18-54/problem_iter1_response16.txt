```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item to each bin
    remaining_after_add = bins_remain_cap - item

    # Assign priorities based on different criteria:
    # 1. If item fits perfectly (remaining capacity is 0), give it the highest priority.
    perfect_fit = remaining_after_add == 0
    priorities[perfect_fit] = 1000  # Highest priority

    # 2. If item fits, give higher priority to bins with smaller remaining capacity, avoid fragmentation
    fits = remaining_after_add >= 0
    priorities[fits] = 100 / (remaining_after_add[fits] + 0.0001) # higher score with smaller remaining

    # 3. If item does not fit, give the lowest possible priority. We want to add to available bin only
    does_not_fit = remaining_after_add < 0
    priorities[does_not_fit] = -1000
    
    # If the first two steps did not find any fits at all (all elements in remaining_after_add are < 0,
    #   or no bins had a perfect fit, apply the following:
    if np.all(does_not_fit):
        priorities = -1000 * np.ones_like(bins_remain_cap) # Ensure no bin is mistakenly selected
        
    return priorities
```
