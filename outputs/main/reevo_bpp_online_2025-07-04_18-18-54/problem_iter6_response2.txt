```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Strongly penalize infeasible bins
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = -np.inf

    # 2. Prioritize tight fits for feasible bins
    can_fit = bins_remain_cap >= item
    if np.any(can_fit):
        waste = bins_remain_cap[can_fit] - item
        priorities[can_fit] = -waste

        # Break ties by prioritizing smaller bins (avoid leaving large gaps)
        priorities[can_fit] -= 0.00000001 * bins_remain_cap[can_fit]

    return priorities
```
