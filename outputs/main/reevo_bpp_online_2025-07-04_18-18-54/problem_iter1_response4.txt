```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very small bins are penalized.
    priorities[bins_remain_cap < item] = -np.inf

    # Bins with capacity closest to item size get higher priority
    diff = np.abs(bins_remain_cap - item)
    priorities[bins_remain_cap >= item] = -diff[bins_remain_cap >= item]

    # Add a bonus for bins that are relatively full (but can still fit item)
    fill_ratio = (1 - bins_remain_cap / np.max(bins_remain_cap))
    priorities[bins_remain_cap >= item] += fill_ratio[bins_remain_cap >= item]

    return priorities
```
