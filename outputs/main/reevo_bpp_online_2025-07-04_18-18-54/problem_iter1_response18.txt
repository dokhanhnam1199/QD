```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing inspired: Prioritize bins that can fit the item reasonably well
    # Avoid bins that are either too full (nearly full) or too empty (wasteful)
    fit_ratios = item / bins_remain_cap
    
    # Give a base score if the item fits
    fits = bins_remain_cap >= item
    priorities[fits] += 1.0

    # Higher priority if the bin is filled more completely without overflowing. Goal: bins_remain_cap - item to be small and positive.
    #Prioritize bins with a remaining capacity close to the item size, but penalize bins where adding the item would cause a near-full bin.
    remaining_after_fit = bins_remain_cap - item
    
    
    good_fit = (remaining_after_fit >= 0)
    
    priorities[good_fit] += np.exp(-np.abs(remaining_after_fit[good_fit])) 

    # Bonus for avoiding nearly full bins: Prefer bins that leave a little space.
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap - item < 0.1) #if bin is nearly full
    priorities[nearly_full] -=0.5 #give a small negative weight if adding leads to nearly full
        

    #Consider a bonus based on bin utilization, encouraging filling bins more fully. Avoid near empty bins by penalizing them
    utilization_score = (bins_remain_cap - item) / bins_remain_cap # How much of the remaining space is used by the item
    
    priorities[good_fit] += (1 -utilization_score[good_fit]) # if remaining space after adding item is little, utilization is high, then a high value is assigned

    #Very small cap bins should be penalized with a slightly larger penalty because of fragmentation
    very_small_cap = (bins_remain_cap < item)
    priorities[very_small_cap] -=1

    return priorities
```
