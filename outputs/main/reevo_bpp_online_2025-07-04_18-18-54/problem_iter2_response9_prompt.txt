{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            fill_ratio = item / cap\n            waste = cap - item\n            # Combination of fill ratio and remaining waste.\n            # Prioritize bins that have a good fill ratio AND leave little waste.\n            priorities[i] = (1 - fill_ratio) + (1/(1 + waste))  # Minimize wasted space relative to bin size\n        else:\n            priorities[i] = -np.inf  # Never choose if item doesn't fit\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Give higher priority to bins that can accommodate the item\n    valid_bins = bins_remain_cap >= item\n    \n    if np.any(valid_bins):\n      \n        # Prioritize bins where the item fills a larger percentage of the remaining space,\n        # but penalize bins that are left with very little space\n        fill_ratios = item / bins_remain_cap[valid_bins]\n        remaining_space = bins_remain_cap[valid_bins] - item\n        \n        # Apply a function that balances fill ratio and remaining space.  We want to favor bins with\n        # good fill ratios but avoid bins that would leave very little remaining space. A small value like 0.1 helps preventing log(0).\n        priorities[valid_bins] = fill_ratios - 0.5*np.log(remaining_space + 0.1)\n    \n    else:\n        # If no bin can fit the item, assign a very low priority (negative infinity) to all bins\n        priorities[:] = -np.inf\n        \n    return priorities\n\n[Reflection]\nThe better code uses `fill_ratios - log(remaining_space)` which balances bin utilization and avoiding near-full bins.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}