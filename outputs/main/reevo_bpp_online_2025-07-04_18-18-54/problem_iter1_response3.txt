```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Give high priority to bins where the item fits
    fit_indices = remaining_after_add >= 0
    priorities[fit_indices] = 1.0 / (remaining_after_add[fit_indices] + 0.00001)  # Avoid division by zero and prefer tighter fits

    # Give a negative priority to bins where the item does not fit (discourage)
    priorities[~fit_indices] = -np.inf

    # Normalize the priorities (optional, but can sometimes help)
    # valid_priorities = priorities[np.isfinite(priorities)]
    # if len(valid_priorities) > 0:
    #     min_priority = np.min(valid_priorities)
    #     max_priority = np.max(valid_priorities)
    #     if max_priority > min_priority:
    #         priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)


    return priorities
```
