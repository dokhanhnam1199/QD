```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign a high priority to bins that can fit the item.
    # Bins that cannot fit the item get a very low (negative) priority.
    
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = bins_remain_cap[can_fit] - item #Remaining capacity if the item is added
    priorities[~can_fit] = -np.inf  # Very low priority if cannot fit

    # Add a small bonus for bins that are already partially full to help consolidate
    # We do not consolidate if there are empty bins to avoid filling them when unnecessary
    if np.any(bins_remain_cap < 1) and np.any(bins_remain_cap == 1):
        priorities[can_fit] += (1 - bins_remain_cap[can_fit]) # Use the occupied portion as bonus

    return priorities
```
