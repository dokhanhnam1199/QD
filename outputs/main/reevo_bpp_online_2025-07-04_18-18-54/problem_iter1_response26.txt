```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            fill_ratio = item / cap
            waste = cap - item
            # Combination of fill ratio and remaining waste.
            # Prioritize bins that have a good fill ratio AND leave little waste.
            priorities[i] = (1 - fill_ratio) + (1/(1 + waste))  # Minimize wasted space relative to bin size
        else:
            priorities[i] = -np.inf  # Never choose if item doesn't fit

    return priorities
```
