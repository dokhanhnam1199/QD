```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Feasibility - Prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1
    
    # Heuristic 2: Tight-Fit Bonus - Higher reward for tighter fits
    remaining_after_fit = bins_remain_cap - item
    tight_fit_bonus = np.exp(-10 * remaining_after_fit) # Exponentially decaying bonus
    tight_fit_bonus[~fit_mask] = 0 # No bonus for bins that don't fit
    priorities += tight_fit_bonus
    
    # Heuristic 3: Near-Full Penalty - Discourage almost-full bins (but only if they still fit!)
    near_full_threshold = 0.1 #Bins with remaining cap less than 0.1 are near full after adding item
    almost_full_cap = bins_remain_cap - item
    near_full_mask = (almost_full_cap <= near_full_threshold) & fit_mask & (almost_full_cap>=0)
    priorities[near_full_mask] -= 3 # Penalty for bins near full

    # Heuristic 4: Excessive Capacity Penalty - Avoid leaving bins with excessive space
    excessive_cap_threshold = 2 * item
    excessive_cap_mask = bins_remain_cap > excessive_cap_threshold
    priorities[excessive_cap_mask] -= 0.5

    # Heuristic 5: Infeasibility Penalty - Avoid picking bins that can't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] -= 100
    
    return priorities
```
