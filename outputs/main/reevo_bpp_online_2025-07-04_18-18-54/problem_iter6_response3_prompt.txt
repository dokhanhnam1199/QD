{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Feasibility: Must fit\n    fit_mask = bins_remain_cap >= item\n    priorities[~fit_mask] = -np.inf  # Absolutely avoid bins that don't fit\n\n    # Tight-Fit Bonus: Reward bins with small remaining capacity after placement.\n    remaining_after_fit = bins_remain_cap[fit_mask] - item\n    \n    # Avoid division by zero by adding small value to avoid division by zero.\n    priorities[fit_mask] += np.exp(-remaining_after_fit / (item + 1e-6))\n\n    # Waste Minimization: Penalize excessive remaining capacity\n    avg_cap = np.mean(bins_remain_cap)\n    excess_mask = bins_remain_cap > (avg_cap + item / 2)\n    priorities[excess_mask] -= 0.2\n\n    # Near-Full Penalty: Discourage almost-full bins (risk of small items later)\n    almost_full_threshold = 0.95\n    almost_full_mask = (bins_remain_cap < item * (1 / almost_full_threshold)) & fit_mask\n    priorities[almost_full_mask] -= 0.1  # Small penalty\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Heuristic 1: Feasibility - Must fit\n    fit_mask = bins_remain_cap >= item\n    priorities[~fit_mask] -= 1000  # Large penalty for infeasibility\n    priorities[fit_mask] += 1 #base priority\n\n    # Heuristic 2: Waste Minimization - Tight Fit Bonus\n    remaining_after_fit = bins_remain_cap[fit_mask] - item\n    tight_fit_threshold = 0.2 * item  # Adaptive threshold: prefer tighter fits relative to item size\n    tight_fit_mask = remaining_after_fit <= tight_fit_threshold\n    indices = np.where(fit_mask)[0]\n    priorities[indices[tight_fit_mask]] += 5  # Significant bonus for tight fits\n\n    # Heuristic 3: Penalize Near-Full Bins (but allow if very tight)\n    nearly_full_threshold = 0.1  # Fixed threshold: if capacity is very low\n    nearly_full_mask = (bins_remain_cap <= nearly_full_threshold) & fit_mask\n    priorities[nearly_full_mask] -= 2\n\n    # Heuristic 4: Penalize Excessive Remaining Capacity\n    excessive_capacity_threshold = 2 * item #adaptive threshold\n    excessive_capacity_mask = bins_remain_cap > excessive_capacity_threshold\n    priorities[excessive_capacity_mask] -= 0.5\n\n    # Heuristic 5: Best fit inside feasible bins\n    diff = bins_remain_cap - item\n    diff_fit = diff[fit_mask]\n    if len(diff_fit) > 0:\n        best_fit_idx = np.argmin(diff_fit)\n        indices = np.where(fit_mask)[0]\n        priorities[indices[best_fit_idx]] += 2  # Higher priority for the best fit\n        \n    return priorities\n\n[Reflection]\nPrioritize feasibility with large penalties. Use adaptive thresholds relative to item size. Reward best fit.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}