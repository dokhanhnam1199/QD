```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1  # Give a base priority to bins that fit

    # For bins that fit, prioritize those with smallest remaining capacity after placing the item
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1 / (remaining_after_fit + 0.00001)  # Add inverse of remaining capacity

    #For bins that don't fit, penalize them
    non_fit_mask = ~fit_mask
    priorities[non_fit_mask] = -1 * (item - bins_remain_cap[non_fit_mask]) # The larger the difference between item size and bin cap, the more negative

    return priorities
```
