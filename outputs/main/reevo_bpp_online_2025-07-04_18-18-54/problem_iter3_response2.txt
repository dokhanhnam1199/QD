```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0  # Assuming bin size is 1, or determine dynamically if needed

    # Heuristic 1: Infeasibility Penalty
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -1e9  # Huge penalty for infeasibility

    # Heuristic 2: Fill Ratio (Balance utilization)
    fill_ratio = (bin_size - bins_remain_cap) / bin_size
    priorities += fill_ratio

    # Heuristic 3: Tight Fit Reward (Best-Fit inspired)
    remaining_space = bins_remain_cap - item
    fit_mask = remaining_space >= 0
    if np.any(fit_mask):
        priorities[fit_mask] += 1.0 / (remaining_space[fit_mask] + 0.0001)  # Closer fit gets higher priority

    # Heuristic 4: Near-Full Bin Penalty (Avoid near-full, but not completely full)
    near_full_threshold = 0.1 * bin_size
    near_full_mask = (remaining_space > 0) & (remaining_space <= near_full_threshold)
    priorities[near_full_mask] -= 2.0 * np.log(near_full_threshold - remaining_space[near_full_mask] + 0.0001) # Stronger penalty

    # Heuristic 5: Normalization (for exploration and finer control)
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 0.0001)

    return priorities
```
