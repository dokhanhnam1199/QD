```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the remaining capacity after adding the item to each bin.
    remaining_capacities = bins_remain_cap - item

    # Give a high priority to bins where the item fits and leaves minimal waste.
    # Prioritize bins where the item fits. If it doesn't fit, priority is -inf.
    fits = remaining_capacities >= 0
    priorities[~fits] = -np.inf  # Make sure it does not select a bin which does not fits
    waste = remaining_capacities[fits]

    # Assign priorities based on waste; smaller waste = higher priority. If no bin fits, all priorities remain at 0.
    if np.any(fits):
        priorities[fits] = -waste

        # Boost priority for bins with a capacity close to the item size.  Encourage using "almost full" bins first, which helps minimize the # bins used
        # This is a heuristic to attempt First-Fit-Decreasing.
        close_to_full = (bins_remain_cap[fits] >= item) & (bins_remain_cap[fits] <= item*1.2) #bin capacity up to 20% larger than item size
        priorities[fits][close_to_full] += 10  # Significant boost

        # Also consider the percentage of the bin that will be used up
        usage_ratio = item / bins_remain_cap[fits]
        priorities[fits] += usage_ratio  # Gives some preference to bins that fill better, even if the absolute waste is not as low

    return priorities
```
