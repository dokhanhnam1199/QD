```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Prioritize bins where the item fits.
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] += 1  # Give feasible bins a base priority

    # 2. Remaining Capacity: Prioritize bins with less remaining capacity after placement (First Fit Decreasing variant). Closer fit is better.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = np.inf  # Penalize infeasible bins
    priorities[feasible_bins] += 1.0 / (remaining_after_fit[feasible_bins] + 0.00001)  # Avoid division by zero. Add to feasible bins only. Smaller remains = higher priority.
    
    # 3. Avoidance of Fragmentation: A penalty if the remaining capacity becomes too small
    fragmentation_threshold = 0.1  #tuneable parameter related to bin size.
    small_remaining = remaining_after_fit < fragmentation_threshold
    priorities[small_remaining] -= 0.5  # Mild penalty

    # 4. Bonus for almost full bins: Encourages closing off bins.

    almost_full_threshold = 0.9
    almost_full = (bins_remain_cap > 0) & ((bins_remain_cap - item) / bins_remain_cap < 1 - almost_full_threshold) & (bins_remain_cap >= item)
    priorities[almost_full] += 2 #Higher Priority for bins that will be closed
    
    return priorities
```
