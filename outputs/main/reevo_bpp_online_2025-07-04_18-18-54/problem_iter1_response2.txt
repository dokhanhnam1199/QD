```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very small remaining capacity gets very high priority
    priorities[bins_remain_cap < 0.001] = -np.inf
    
    # Calculate wasted space if item is placed in the bin
    wasted_space = bins_remain_cap - item
    
    # Give higher priority to bins where the item fits
    fit_indices = wasted_space >= 0
    
    if np.any(fit_indices):
        # Prioritize bins with minimal wasted space. Avoid creating tiny fragmented spaces.
        priorities[fit_indices] = 1 / (wasted_space[fit_indices] + 0.0001) # add small value to avoid inf
        
        # Also encourage to fill bins up to certain percentage of capacity
        filled_percentage = 1 - (wasted_space[fit_indices] / bins_remain_cap[fit_indices])
        priorities[fit_indices] += np.where((filled_percentage >= 0.75) & (filled_percentage <= 1), 10, 0) # Strong bonus for good filling
        
        # Penalize bins which become too full
        priorities[fit_indices] -= np.where(filled_percentage > 0.999, 100, 0)

    else:
        # if it does not fit anywhere, place in bin that can accomodate item later
        priorities[:] = bins_remain_cap - item
    
    return priorities
```
