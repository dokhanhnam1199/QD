```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing-like Heuristic: Prioritize bins that can fit the item with minimal waste.
    
    # 1. Filter out bins that cannot accommodate the item
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        # If no bin can fit the item, all priorities are zero (handled by initialization)
        return priorities
    
    # 2. Calculate wasted space for valid bins
    wasted_space = bins_remain_cap[valid_bins] - item
    
    # 3. Give higher priority to bins with less wasted space
    priorities[valid_bins] = 1.0 / (wasted_space + 1e-6)  # Avoid division by zero
    
    # 4. Boost priority for bins that are nearly full after adding the item (encourages full bins)
    nearly_full_threshold = 0.9  # Bins that are at least 90% full after insertion are preferred. Can be fine-tuned.
    is_nearly_full = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins] <= (1 - nearly_full_threshold)
    priorities[valid_bins][is_nearly_full] *= 2.0  # Adjust multiplier as needed

    # Alternative 1: Give a very small priority to bins that cannot fit item, but only if NO bin can fit the item well.
    # if not np.any(bins_remain_cap > item * 1.2):  # Try bins only if the "waste" will be high. 1.2 is a safety factor
    #    priorities += 0.0001
    # Alternative 2: Penalize very empty bins in all cases. This pushes for more packed bins overall.
    #   priorities -= (1 - bins_remain_cap/ np.max(bins_remain_cap)) *0.001

    return priorities
```
