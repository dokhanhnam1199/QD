```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Prefer bins that can fit the item (First-Fit Decreasing inspired)
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1  # Give a base priority to bins that can fit
    
    # Heuristic 2: Reward bins with capacity closest to item size (Best-Fit inspired)
    diff = bins_remain_cap - item
    diff_fit = diff[fit_mask]
    if len(diff_fit) > 0:
        best_fit_idx = np.argmin(diff_fit)
        indices = np.where(fit_mask)[0]
        priorities[indices[best_fit_idx]] += 2  # Higher priority for the best fit
    
    # Heuristic 3: Penalize bins with very large remaining capacity. Prevents from filling one bin very slowly
    large_cap_mask = bins_remain_cap > 2 * item
    priorities[large_cap_mask] -= 0.5 #reduce their chance

    #Heuristic 4: If the bin is almost full after adding the item give a huge incentive
    almost_full_cap = bins_remain_cap - item
    almost_full_mask = (almost_full_cap <= 0.1) & (almost_full_cap >= 0)
    priorities[almost_full_mask] += 5 #high priority if we almost fill

    #Heuristic 5: Do not pick a bin if the item doesn't fit
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] -=100 # do not pick a bin that doens't fit

    return priorities
```
