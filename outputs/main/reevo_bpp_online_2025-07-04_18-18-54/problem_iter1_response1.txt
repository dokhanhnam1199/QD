```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1

    # If no bin can fit, assign a small negative priority to all bins to allow selection later if necessary, effectively postponing the bin opening
    if not np.any(fit_mask):
        priorities[:] = -0.01 # Assign small penalty so opening new bin is less favorable than packing when possible
    else: # Otherwise, for bins that fit, prefer bins that leave the least waste.
        waste = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (waste + 0.0001) # avoid div by zero and smaller waste means better priority

    # Apply a bonus for bins that are almost full to encourage efficient use
    almost_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < item * 2) # bins at least half full, to avoid leaving many almost empty
    priorities[almost_full_mask] += 0.5  # moderate bonus to avoid excessive greedy.

    return priorities
```
