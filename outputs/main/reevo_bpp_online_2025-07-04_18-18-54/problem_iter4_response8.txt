```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Infeasible bins get negative infinity priority.
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = -np.inf

    # 2. Calculate waste for feasible bins.
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):  # Only do calculations if any bin can fit.

        waste = bins_remain_cap[can_fit] - item

        # 3. Prioritize minimal waste (negative waste for maximization).
        priorities[can_fit] = -waste

        # 4. Break ties by favoring bins with higher fill ratio *after* adding the item
        new_fill_ratios = (bins_remain_cap[can_fit] + item - waste) / (bins_remain_cap[can_fit] + item)
        priorities[can_fit] += new_fill_ratios * 0.000001 # Add a very small bonus favoring higher fill ratios
        #This breaks ties, uses fill ratio, and avoids explicitly referencing bin size.


    return priorities
```
