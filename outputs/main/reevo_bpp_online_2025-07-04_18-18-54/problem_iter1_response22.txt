```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign a high priority to bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1

    # For bins that can fit, prioritize those with less remaining capacity *after* adding the item.
    remaining_after_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] += 1 / (remaining_after_fit + 1e-9)  # Add small epsilon to prevent division by zero

    # Penalize bins that cannot fit
    cannot_fit = ~can_fit
    priorities[cannot_fit] = -10 # Assign a significant penalty

    return priorities
```
