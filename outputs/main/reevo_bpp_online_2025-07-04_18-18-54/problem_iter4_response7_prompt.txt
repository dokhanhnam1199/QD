{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Strongly penalize infeasible bins\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -1e9  # Very low priority for infeasible bins\n\n    # 2. Fill ratio: Encourage filling bins (higher ratio is better)\n    fill_ratio = (bins_remain_cap - item) / bins_remain_cap\n    fill_ratio[~feasible_bins] = -1  # Set to -1 to avoid influencing infeasible bins\n\n    # 3. Tight fit: Reward bins with remaining capacity close to zero after adding the item\n    remaining_space = bins_remain_cap - item\n    tight_fit_score = np.exp(-10 * remaining_space) # Exponential decay for bins with larger remaining cap\n    tight_fit_score[~feasible_bins] = 0\n\n    # 4. Avoid near-full bins: Logarithmic penalty to discourage almost full bins\n    almost_full = (remaining_space > 0) & (remaining_space <= 0.1)\n    almost_full_penalty = np.zeros_like(bins_remain_cap)\n    almost_full_penalty[almost_full] = -np.log(0.1 - remaining_space[almost_full] + 0.001)\n    \n    # 5. Combine and normalize priorities\n    priorities = fill_ratio + 0.5 * tight_fit_score + almost_full_penalty\n    \n    # Normalize to scale the priorities between 0 and 1. This helps in exploration\n    if np.max(priorities) > np.min(priorities):\n      priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities))\n    else:\n      priorities = np.zeros_like(bins_remain_cap)  # All bins have same priority\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility check: Bin must have enough capacity.\n    feasible_bins = bins_remain_cap >= item\n    \n    # 2. If no bin is feasible, assign a very low priority to all bins.\n    if not np.any(feasible_bins):\n        return priorities - 1e9  # Return very low priority\n    \n    # 3. Calculate remaining capacity after placing the item (only for feasible bins).\n    remaining_capacities = bins_remain_cap - item\n    remaining_capacities[~feasible_bins] = -1  # Mark infeasible bins\n    \n    # 4. Calculate priority based on how full the bin would be after placement.\n    #    Prioritize bins that become fuller, but not too full.  We want a good fit, \n    #    but also want to avoid bins being too close to full to allow future placements\n    \n    # a. Fill ratio\n    fill_ratio = (bins_remain_cap - remaining_capacities) #Assume bin capacity is 1.0, no need to divide\n    \n    # b. Prioritize bins with a higher fill ratio, up to a point (e.g., 90% full).\n    priorities = fill_ratio\n\n    # c. Penalize bins that would be very full\n    very_full = remaining_capacities < 0.1\n    priorities[very_full & feasible_bins] -= 0.5 # Substantial penalty.\n\n    # d. Incentivize almost full, if possible\n    almost_full = (remaining_capacities >= 0.05) & (remaining_capacities < 0.1) & feasible_bins\n    priorities[almost_full] += 0.2\n    \n\n    # 5. Give infeasible bins very low priority.\n    priorities[~feasible_bins] = -1e9\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility. Target good fill ratios, penalize near-full bins, and avoid normalization.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}