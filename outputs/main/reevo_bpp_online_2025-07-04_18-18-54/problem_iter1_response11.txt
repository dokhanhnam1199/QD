```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Bins that can fit the item get higher priority.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Or any positive value

    # Rule 2: Among bins that can fit, prioritize those with less remaining space *after* placement.
    remaining_after_placement = bins_remain_cap[can_fit] - item
    priorities[can_fit] += np.max(bins_remain_cap) - remaining_after_placement # Prefer smaller remaining

    # Rule 3: For bins that *cannot* fit, give them a negative score based on how close they are.  
    cannot_fit = ~can_fit
    closeness = bins_remain_cap[cannot_fit] + item - bins_remain_cap[cannot_fit] # =item 
    priorities[cannot_fit] -= closeness

    return priorities
```
