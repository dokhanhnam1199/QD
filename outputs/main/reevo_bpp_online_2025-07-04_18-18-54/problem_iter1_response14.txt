```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins where the item fits
    fit_indices = bins_remain_cap >= item
    priorities[fit_indices] = 1

    # Further prioritize bins that have the least remaining capacity after adding the item, among those that fit.
    remaining_after_fit = bins_remain_cap[fit_indices] - item
    if len(remaining_after_fit) > 0:
        min_remaining = np.min(remaining_after_fit)
        best_fit_indices = np.where(bins_remain_cap[fit_indices] - item == min_remaining)[0]
        indices_in_original = np.where(fit_indices)[0][best_fit_indices] # get original index

        priorities[indices_in_original] = 2

    # If no bin fits, prioritize bins with maximum capacity to minimize number of bins used
    if not np.any(fit_indices):
        max_cap = np.max(bins_remain_cap)
        max_cap_indices = bins_remain_cap == max_cap
        priorities[max_cap_indices] = 0.5 # less desirable but better than others

    return priorities
```
