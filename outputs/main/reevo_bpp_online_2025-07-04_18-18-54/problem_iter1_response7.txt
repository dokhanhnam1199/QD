```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Large bins are preferred for smaller items (try to leave larger bins for larger items later)
    priorities[bins_remain_cap >= item] = bins_remain_cap[bins_remain_cap >= item]  # Favor bins that can fit the item

    # If no bin can fit the item, use the bin with the most remaining capacity
    if np.all(bins_remain_cap < item):
        priorities = bins_remain_cap # Use the bins with largest capacity even if they can't fit the item
        priorities = priorities / np.max(priorities) # scale to range from 0 to 1

    # Try to avoid almost full bins if possible
    almost_full = (bins_remain_cap < (item + 0.1)) & (bins_remain_cap >= item) # added threshold for floating point inaccuracies
    priorities[almost_full] -= 0.5  # slightly disincentivize nearly full bins (but still allow).


    # Give higher priority to bins where the item fills a larger proportion of space
    fill_ratio = item / bins_remain_cap
    priorities[bins_remain_cap >= item] += fill_ratio[bins_remain_cap >= item]
    return priorities
```
