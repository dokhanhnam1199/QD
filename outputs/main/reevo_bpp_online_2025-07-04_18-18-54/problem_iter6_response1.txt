```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: Identify bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item
    
    if np.any(feasible_bins):
        # Tight Fit Priority: Prioritize bins where the item fits snugly.
        remaining_space = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] += 1.0 / (remaining_space + 1e-9)  # Avoid division by zero

        # Fill Ratio Priority: Prioritize bins with higher fill ratios after adding the item
        fill_ratios = item / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] += fill_ratios

        # Excess Capacity Penalty: Penalize bins with large remaining capacity after adding the item
        excess_capacity = bins_remain_cap[feasible_bins] - item
        penalty_factor = 0.1  # Adjust this parameter as needed
        priorities[feasible_bins] -= penalty_factor * (excess_capacity**2)

    return priorities
```
