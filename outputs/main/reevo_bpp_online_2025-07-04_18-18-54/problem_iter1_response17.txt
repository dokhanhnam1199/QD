```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing-like: prefer bins with enough space.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1

    # Prefer bins with smaller remaining capacity after placing the item,
    # but only if the item fits.
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1 / (remaining_after_fit + 1e-6)  # Avoid division by zero

    # Penalize bins that cannot fit the item by a large negative number
    # unless all bins are full, we dont do it.
    if np.any(fit_mask):
        priorities[~fit_mask] -= 1000

    return priorities
```
