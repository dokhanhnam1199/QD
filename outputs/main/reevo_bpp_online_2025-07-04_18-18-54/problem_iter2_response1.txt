```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Feasibility - Must fit
    fit_mask = bins_remain_cap >= item
    priorities[~fit_mask] = -np.inf  # Infeasible bins get -inf priority
    priorities[fit_mask] += 1 #slight increase for being feasible.

    # Heuristic 2: Best Fit - Minimize Waste
    waste = bins_remain_cap - item
    waste[~fit_mask] = np.inf #ignore bins where it doesn't fit for this
    best_fit_idx = np.argmin(waste)
    priorities[best_fit_idx] += 5  # Substantially prioritize best fit

    # Heuristic 3: Fill Percentage - Prefer higher fill
    fill_percentage = item / bins_remain_cap
    fill_percentage[~fit_mask] = 0  # Set fill to 0 where it doesn't fit
    priorities += fill_percentage * 2 #slight incentive

    # Heuristic 4: Avoid Excessive Waste
    large_waste_mask = bins_remain_cap > 2 * item
    priorities[large_waste_mask] -= 1 #slight penalty

    # Heuristic 5: Almost Full Bin - Strong Incentive
    almost_full_mask = (waste >= 0) & (waste <= 0.1)
    priorities[almost_full_mask] += 10  # Huge incentive for almost full

    return priorities
```
