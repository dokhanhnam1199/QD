```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very high priority for bins that can fit perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # A very large priority
    
    # High priority for bins that can fit and leave smallest waste
    can_fit = bins_remain_cap >= item
    waste = bins_remain_cap - item
    priorities[can_fit] = 100 / (waste[can_fit] + 0.0001) # avoid division by zero
    
    # Negative priority to bins that cannot fit.  This avoids selecting completely unsuited bins, ever
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = -1000  
    
    return priorities
```
