```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give a high priority to bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item
    
    if np.any(feasible_bins):
        # Prioritize bins with tighter fit.
        remaining_space = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = 1 / (remaining_space + 1e-9) # avoid division by zero
        
        # Further prioritize bins where the item occupies a significant portion
        # and doesn't leave much wasted space.
        fill_ratios = item / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] += fill_ratios

        # Penalize bins with high remaining capacity, to encourage packing into bins that are already somewhat full.
        # The penalty is proportional to the remaining capacity beyond the item size.
        # A higher factor means stronger penalty.
        penalty_factor = 0.1 
        excess_capacity = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] -= penalty_factor * excess_capacity
    

    # Optionally, penalize infeasible bins (though usually best to leave these at 0)
    # priorities[~feasible_bins] = -1e9 # Very negative priority.

    return priorities
```
