```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that are too small.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Mark as infeasible

    # 2. Maximize space utilization: Prefer bins that fit the item best
    # but avoid bins where item will be a tight fit
    # Add a small constant to both numerator and denominator to
    # bias towards partially filled bins and help diversify bin selection.
    fit_scores = (bins_remain_cap - item + 0.1) / (bins_remain_cap + 0.1)
    fit_scores[infeasible_bins] = -np.inf # Reset fit score for infeasible bins

    # 3. Reward partially filled bins: Add bonus if bin is not empty but
    # less than half full (encourage usage of partially filled bins).

    partially_filled = (bins_remain_cap > item) & (bins_remain_cap < 0.5)

    priorities += fit_scores

    priorities[partially_filled] += 0.5 # give priority to partially filled bins.

    #4. Penalty for almost full bins that don't have enough space. Only applicable if item is too big, since otherwise the bin would already be disqualified
    almost_full = (bins_remain_cap > 0) & (bins_remain_cap < item)
    priorities[almost_full] -= 1.0 # Give a penalty. This should be negative because item is too large anyway. The higher penalty helps to prevent bins being almost filled

    return priorities
```
