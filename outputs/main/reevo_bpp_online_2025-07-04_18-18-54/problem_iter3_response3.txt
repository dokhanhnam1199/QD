```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0 # Assuming bin size of 1

    # Feasibility check: Hard constraint - invalidates bins that can't fit item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # 1. Fill Ratio Prioritization: Encourages higher fill ratios.
    fill_ratio = (bin_size - bins_remain_cap) / bin_size  # Existing fill ratio
    new_fill_ratio_if_added = (bin_size - (bins_remain_cap - item)) / bin_size
    
    # Prioritize higher fill ratios after adding the item
    priorities += 2 * new_fill_ratio_if_added
    
    # 2. Tight Fit Bonus: Prioritize bins where the item fits snugly.
    remaining_space = bins_remain_cap - item
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):
        min_waste = np.min(remaining_space[fit_mask])
        tight_fit_bonus = np.exp(-5 * (remaining_space / min_waste))  # Exponential decay
        priorities[fit_mask] += tight_fit_bonus[fit_mask]
        
    # 3. Near-Full Penalty: Discourage filling bins too close to capacity.
    near_full_threshold = 0.95 * bin_size
    near_full_mask = (bins_remain_cap - item) < (bin_size - near_full_threshold)  #Check if after adding we go above threshold

    priorities[near_full_mask] -= 3 # Strong penalty if adding this gets us near full
        
    # Normalize the Priorities:
    if np.any(priorities != -np.inf): # only normalise if a feasible bin exists.
        max_priority = np.max(priorities[priorities != -np.inf])
        min_priority = np.min(priorities[priorities != -np.inf])
        if max_priority > min_priority:
            priorities[priorities != -np.inf] = (priorities[priorities != -np.inf] - min_priority) / (max_priority - min_priority)
        else:
            priorities[priorities != -np.inf] = 0.5 # if all priorities equal give them same weighting.
    else:
        priorities = -1*np.ones_like(bins_remain_cap)
        
    return priorities
```
