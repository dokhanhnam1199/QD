```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Feasibility - Must fit
    fit_mask = bins_remain_cap >= item
    priorities[~fit_mask] -= 1000  # Large penalty for infeasibility
    priorities[fit_mask] += 1 #base priority

    # Heuristic 2: Waste Minimization - Tight Fit Bonus
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    tight_fit_threshold = 0.2 * item  # Adaptive threshold: prefer tighter fits relative to item size
    tight_fit_mask = remaining_after_fit <= tight_fit_threshold
    indices = np.where(fit_mask)[0]
    priorities[indices[tight_fit_mask]] += 5  # Significant bonus for tight fits

    # Heuristic 3: Penalize Near-Full Bins (but allow if very tight)
    nearly_full_threshold = 0.1  # Fixed threshold: if capacity is very low
    nearly_full_mask = (bins_remain_cap <= nearly_full_threshold) & fit_mask
    priorities[nearly_full_mask] -= 2

    # Heuristic 4: Penalize Excessive Remaining Capacity
    excessive_capacity_threshold = 2 * item #adaptive threshold
    excessive_capacity_mask = bins_remain_cap > excessive_capacity_threshold
    priorities[excessive_capacity_mask] -= 0.5

    # Heuristic 5: Best fit inside feasible bins
    diff = bins_remain_cap - item
    diff_fit = diff[fit_mask]
    if len(diff_fit) > 0:
        best_fit_idx = np.argmin(diff_fit)
        indices = np.where(fit_mask)[0]
        priorities[indices[best_fit_idx]] += 2  # Higher priority for the best fit
        
    return priorities
```
