```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Strongly penalize infeasible bins
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9  # Very low priority for infeasible bins

    # 2. Fill ratio: Encourage filling bins (higher ratio is better)
    fill_ratio = (bins_remain_cap - item) / bins_remain_cap
    fill_ratio[~feasible_bins] = -1  # Set to -1 to avoid influencing infeasible bins

    # 3. Tight fit: Reward bins with remaining capacity close to zero after adding the item
    remaining_space = bins_remain_cap - item
    tight_fit_score = np.exp(-10 * remaining_space) # Exponential decay for bins with larger remaining cap
    tight_fit_score[~feasible_bins] = 0

    # 4. Avoid near-full bins: Logarithmic penalty to discourage almost full bins
    almost_full = (remaining_space > 0) & (remaining_space <= 0.1)
    almost_full_penalty = np.zeros_like(bins_remain_cap)
    almost_full_penalty[almost_full] = -np.log(0.1 - remaining_space[almost_full] + 0.001)
    
    # 5. Combine and normalize priorities
    priorities = fill_ratio + 0.5 * tight_fit_score + almost_full_penalty
    
    # Normalize to scale the priorities between 0 and 1. This helps in exploration
    if np.max(priorities) > np.min(priorities):
      priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities))
    else:
      priorities = np.zeros_like(bins_remain_cap)  # All bins have same priority

    return priorities
```
