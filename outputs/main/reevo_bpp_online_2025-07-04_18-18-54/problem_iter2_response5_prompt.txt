{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Large bins are preferred for smaller items (try to leave larger bins for larger items later)\n    priorities[bins_remain_cap >= item] = bins_remain_cap[bins_remain_cap >= item]  # Favor bins that can fit the item\n\n    # If no bin can fit the item, use the bin with the most remaining capacity\n    if np.all(bins_remain_cap < item):\n        priorities = bins_remain_cap # Use the bins with largest capacity even if they can't fit the item\n        priorities = priorities / np.max(priorities) # scale to range from 0 to 1\n\n    # Try to avoid almost full bins if possible\n    almost_full = (bins_remain_cap < (item + 0.1)) & (bins_remain_cap >= item) # added threshold for floating point inaccuracies\n    priorities[almost_full] -= 0.5  # slightly disincentivize nearly full bins (but still allow).\n\n\n    # Give higher priority to bins where the item fills a larger proportion of space\n    fill_ratio = item / bins_remain_cap\n    priorities[bins_remain_cap >= item] += fill_ratio[bins_remain_cap >= item]\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate remaining capacity after adding the item\n    remaining_after_add = bins_remain_cap - item\n\n    # Give high priority to bins where the item fits\n    fit_indices = remaining_after_add >= 0\n    priorities[fit_indices] = 1.0 / (remaining_after_add[fit_indices] + 0.00001)  # Avoid division by zero and prefer tighter fits\n\n    # Give a negative priority to bins where the item does not fit (discourage)\n    priorities[~fit_indices] = -np.inf\n\n    # Normalize the priorities (optional, but can sometimes help)\n    # valid_priorities = priorities[np.isfinite(priorities)]\n    # if len(valid_priorities) > 0:\n    #     min_priority = np.min(valid_priorities)\n    #     max_priority = np.max(valid_priorities)\n    #     if max_priority > min_priority:\n    #         priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)\n\n\n    return priorities\n\n[Reflection]\nPrioritize feasible bins with tighter fits. Discourage infeasible bins strongly. Consider normalization for finer control.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}