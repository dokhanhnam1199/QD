```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired heuristic: Prioritize bins that can fit the item closely
    # and avoid bins that are too large relative to the item size.

    # 1. Bins that cannot fit the item get a very negative priority (discouraged)
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = -np.inf  # Very low priority

    # 2. For bins that can fit the item:
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):  # Only do calculations if any bin can fit. Prevents division by zero.

        # Calculate the waste if the item is placed in each bin
        waste = bins_remain_cap[can_fit] - item

        # Prioritize the bins such that the waste is minimal (tighter fit is better)
        priorities[can_fit] = -waste

        # If multiple bins have the same amount of waste, then give priority to smaller bins
        # This encourages bins with slightly smaller capacity to be utilized instead of leaving bigger bins open with capacity.
        # Add a tiny bias to prioritize smaller bins, but only if they can fit.
        priorities[can_fit] += -0.00000001 * bins_remain_cap[can_fit]


    return priorities
```
