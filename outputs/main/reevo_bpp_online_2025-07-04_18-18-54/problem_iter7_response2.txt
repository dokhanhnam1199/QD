```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The full capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: Huge negative priority if item doesn't fit
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -1e9  # Very high negative priority
    
    # Reward tight fits based on remaining space AFTER packing
    remaining_after_pack = bins_remain_cap - item
    
    # Only consider bins where the item fits
    feasible_bins_mask = bins_remain_cap >= item
    
    # Tight fit reward: Higher priority for smaller remaining space
    priorities[feasible_bins_mask] += 1.0 / (remaining_after_pack[feasible_bins_mask] + 1e-6)  # Avoid division by zero

    # Reward high fill ratio (item size / original bin capacity)
    fill_ratio = item / bin_capacity
    priorities[feasible_bins_mask] += fill_ratio * 2

    # Reward bins that become nearly full after packing:
    almost_full_mask = (remaining_after_pack >= 0) & (remaining_after_pack <= 0.1 * bin_capacity)
    priorities[almost_full_mask] += 5
    

    #Prioritize bins with smaller initial remaining space:
    priorities[feasible_bins_mask] += 1.0 / (bins_remain_cap[feasible_bins_mask] + 1e-6)
    
    return priorities
```
