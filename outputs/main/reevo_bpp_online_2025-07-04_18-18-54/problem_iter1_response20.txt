```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: Bin must have enough capacity.
    feasible_bins = bins_remain_cap >= item
    
    # 2. If no bin is feasible, assign a very low priority to all bins.
    if not np.any(feasible_bins):
        return priorities - 1e9  # Return very low priority
    
    # 3. Calculate remaining capacity after placing the item (only for feasible bins).
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[~feasible_bins] = -1  # Mark infeasible bins
    
    # 4. Calculate priority based on how full the bin would be after placement.
    #    Prioritize bins that become fuller, but not too full.  We want a good fit, 
    #    but also want to avoid bins being too close to full to allow future placements
    
    # a. Fill ratio
    fill_ratio = (bins_remain_cap - remaining_capacities) / 1.0 #Assume bin capacity is 1.0
    
    # b. Prioritize bins with a higher fill ratio, up to a point (e.g., 90% full).
    priorities = fill_ratio

    # c. Penalize bins that would be very full
    very_full = remaining_capacities < 0.1
    priorities[very_full & feasible_bins] -= 0.5 # Substantial penalty.

    # d. Incentivize almost full, if possible
    almost_full = (remaining_capacities >= 0.05) & (remaining_capacities < 0.1) & feasible_bins
    priorities[almost_full] += 0.2
    

    # 5. Give infeasible bins very low priority.
    priorities[~feasible_bins] = -1e9

    return priorities
```
