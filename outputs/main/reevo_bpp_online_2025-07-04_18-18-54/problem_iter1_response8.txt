```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspiration: Give highest priority to bins that can fit the item best
    # Reward bins that have a capacity close to the item size, but not smaller (avoid wasting too much space)
    # Give -inf priority to bins that cannot fit the item.
    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf
        else:
            # Calculate wasted space if the item is placed in this bin
            wasted_space = cap - item
            # Priority is higher for bins that minimize wasted space.
            # Adding a small constant to the item size to avoid division by zero if wasted_space is 0
            priorities[i] = 1 / (wasted_space + 0.0001)

            # Secondary priority: Prefer bins that are not too full already.
            priorities[i] += 0.1 * (1 - (cap / np.max(bins_remain_cap))) # Add bonus for being relatively empty.
    return priorities
```
