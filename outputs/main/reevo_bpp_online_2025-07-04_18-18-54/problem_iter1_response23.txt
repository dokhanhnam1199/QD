```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing-like heuristic: Prefer bins that can fit the item,
    # and among those, prefer bins with less remaining space after packing the item.
    # This helps in packing items more densely and potentially leaving larger bins for
    # potentially larger upcoming items.

    # Give a large negative priority if the bin cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # For bins that can fit the item:
    valid_bins = bins_remain_cap >= item
    remaining_space_after_packing = bins_remain_cap[valid_bins] - item

    # Give a higher priority to bins that have less remaining space after packing
    # We use a scaled negative remaining space, so smaller remaining space -> higher priority.
    # Adding a small constant to avoid zero values if remaining space is small/zero.
    priorities[valid_bins] = -remaining_space_after_packing

    # Boost slightly bins that have larger remaining capacity. The aim is to somehow favor using empty bins or bins with a bit larger room.
    # This is a tunable parameter and might improve or worsen the performance depending on test cases.
    # Larger room also can cause to postpone fragmentation of the bin by smaller objects.

    priorities[valid_bins] += 0.01 * bins_remain_cap[valid_bins]

    return priorities
```
