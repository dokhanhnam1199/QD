```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0  # Assuming bin size is 1, can be parameterized

    # 1. Feasibility: Strongly penalize bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -1e9  # Very low priority

    # 2. Fill Ratio: Prioritize bins with higher fill ratio *after* packing
    remaining_after_pack = bins_remain_cap - item
    fill_ratio_after_pack = (bin_size - remaining_after_pack) / bin_size
    fill_ratio_after_pack[infeasible_mask] = 0  # Zero fill for infeasible bins

    priorities += fill_ratio_after_pack

    # 3. Tight Fit: Reward bins where the remaining capacity after packing is small
    #    but avoid bins that are nearly full to prevent fragmentation.
    
    fit_mask = bins_remain_cap >= item
    remaining_capacity_after_pack = bins_remain_cap - item
    remaining_capacity_after_pack[~fit_mask] = 1e9 #large number

    tight_fit_bonus = np.exp(-5 * remaining_capacity_after_pack)  # Exponential decay
    priorities += tight_fit_bonus
    
    almost_full_mask = (remaining_capacity_after_pack > 0) & (remaining_capacity_after_pack <= 0.1)
    priorities[almost_full_mask] += 1 #small benefit
    
    # 4. Logarithmic Penalty for Near-Full Bins: Discourage bins close to full to avoid future problems
    near_full_mask = (bins_remain_cap > item) & (bins_remain_cap - item < 0.2)  # Adjust threshold as needed

    priorities[near_full_mask] -= 0.2 * np.log(1 / (bins_remain_cap[near_full_mask] - item + 0.0001)) #small log penalty

    # 5. Normalization: Scale priorities to a reasonable range (e.g., 0 to 10)
    min_priority = np.min(priorities)
    max_priority = np.max(priorities)

    if max_priority > min_priority:
        priorities = 10 * (priorities - min_priority) / (max_priority - min_priority)

    return priorities
```
