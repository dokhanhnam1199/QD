```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Must fit
    fit_mask = bins_remain_cap >= item
    priorities[~fit_mask] = -np.inf  # Absolutely avoid bins that don't fit

    # Tight-Fit Bonus: Reward bins with small remaining capacity after placement.
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    
    # Avoid division by zero by adding small value to avoid division by zero.
    priorities[fit_mask] += np.exp(-remaining_after_fit / (item + 1e-6))

    # Waste Minimization: Penalize excessive remaining capacity
    avg_cap = np.mean(bins_remain_cap)
    excess_mask = bins_remain_cap > (avg_cap + item / 2)
    priorities[excess_mask] -= 0.2

    # Near-Full Penalty: Discourage almost-full bins (risk of small items later)
    almost_full_threshold = 0.95
    almost_full_mask = (bins_remain_cap < item * (1 / almost_full_threshold)) & fit_mask
    priorities[almost_full_mask] -= 0.1  # Small penalty
    
    return priorities
```
