```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Remove infeasible bins immediately.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority

    # 2. Fill Ratio: Prioritize higher fill ratios.
    fill_ratios = item / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] = fill_ratios

    # 3. Waste Minimization (Tie-breaker): Slightly favor bins with less waste.
    waste = bins_remain_cap[feasible_bins] - item
    # Scale the waste inversely to the bin size. The smaller the bin, the more important minimizing waste is.
    waste_penalty = -waste / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] += waste_penalty * 0.1

    # 4. Randomness (Exploration): Add a small random value to break ties and encourage exploration.
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.001

    return priorities
```
