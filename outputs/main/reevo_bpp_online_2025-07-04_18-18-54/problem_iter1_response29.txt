```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give higher priority to bins that can accommodate the item
    valid_bins = bins_remain_cap >= item
    
    if np.any(valid_bins):
      
        # Prioritize bins where the item fills a larger percentage of the remaining space,
        # but penalize bins that are left with very little space
        fill_ratios = item / bins_remain_cap[valid_bins]
        remaining_space = bins_remain_cap[valid_bins] - item
        
        # Apply a function that balances fill ratio and remaining space.  We want to favor bins with
        # good fill ratios but avoid bins that would leave very little remaining space. A small value like 0.1 helps preventing log(0).
        priorities[valid_bins] = fill_ratios - 0.5*np.log(remaining_space + 0.1)
    
    else:
        # If no bin can fit the item, assign a very low priority (negative infinity) to all bins
        priorities[:] = -np.inf
        
    return priorities
```
