```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Give -inf priority if item doesn't fit.
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    
    # 2. Best Fit: Higher priority for bins with smallest remaining capacity after placement.
    #    But only if it's not too tight (to avoid fragmentation)
    
    feasible_mask = ~infeasible_mask
    remaining_after_placement = bins_remain_cap[feasible_mask] - item
    
    # a) Fragmentation penalty: if remaining capacity is too small.
    fragmentation_threshold = 0.1 #tuneable, relative to bin size 
    
    fragmentation_penalty_mask = remaining_after_placement < fragmentation_threshold
    remaining_after_placement[fragmentation_penalty_mask] *= -1 #make them undesirable.

    # b) Best Fit score: higher priority for bins that leave smallest amount of space
    priorities[feasible_mask] = -remaining_after_placement
    
    # 3. Avoid Overfilling (Safety Buffer): Slightly prefer bins with larger capacities relative to item size, even if other factors are equal
    #    Use the ratio as a smoothing/dampening factor.  Small values can be problematic
    capacity_ratio = item / bins_remain_cap
    safe_mask = ~infeasible_mask
    priorities[safe_mask] += 0.1* (1-capacity_ratio[safe_mask])
    
    # 4. Ties - break ties randomly
    ties_mask = priorities == np.max(priorities)
    if np.sum(ties_mask) > 1:
      priorities[ties_mask] += np.random.normal(0, 0.001, np.sum(ties_mask))

    return priorities
```
