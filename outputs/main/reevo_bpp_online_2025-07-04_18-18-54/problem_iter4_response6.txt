```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0  # Assuming bin size is 1, can be parameterized

    # 1. Feasibility: Strongly penalize bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -1e9  # Very low priority

    # 2. Fill Ratio: Prioritize bins with higher fill ratio *after* packing
    remaining_after_pack = bins_remain_cap - item
    fill_ratio_after_pack = (bin_size - remaining_after_pack) / bin_size
    fill_ratio_after_pack[infeasible_mask] = 0  # Zero fill for infeasible bins

    priorities += 2 * fill_ratio_after_pack

    # 3. Tight Fit: Reward bins where the remaining capacity after packing is small
    #    but avoid bins that are nearly full to prevent fragmentation.

    remaining_capacity_after_pack = np.copy(bins_remain_cap)
    remaining_capacity_after_pack[infeasible_mask] = 1  # Set to 1 to avoid division by zero

    tight_fit_bonus = np.exp(-5 * np.abs(remaining_after_pack))  # Exponential decay
    tight_fit_bonus[infeasible_mask] = 0

    priorities += tight_fit_bonus

    # 4. Logarithmic Penalty for Near-Full Bins: Discourage bins close to full to avoid future problems
    near_full_threshold = 0.2 * bin_size
    near_full_mask = (bins_remain_cap >= item) & (remaining_after_pack <= near_full_threshold)  # Adjust threshold as needed

    priorities[near_full_mask] -= np.log(near_full_threshold - remaining_after_pack[near_full_mask] + 0.0001)

    return priorities
```
