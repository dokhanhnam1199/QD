```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin must have sufficient capacity to hold the item
    feasible_bins = bins_remain_cap >= item
    
    # If no bin is feasible, return an array of -inf
    if not np.any(feasible_bins):
        return np.full_like(bins_remain_cap, -np.inf)
    
    
    # Prioritize bins based on remaining capacity after placing the item
    remaining_capacity_after_placement = bins_remain_cap - item
    
    # Only consider feasible bins
    remaining_capacity_after_placement[~feasible_bins] = -1  # Mark infeasible bins
    
    # Prioritize based on how full the bin would be, but also penalize almost full bins
    priorities[feasible_bins] = (item / bins_remain_cap[feasible_bins])  + np.exp(-10*(bins_remain_cap[feasible_bins] - item))
    
    return priorities
```
