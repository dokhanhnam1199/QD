{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Strongly penalize infeasible bins\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -1e9  # Very low priority for infeasible bins\n\n    # 2. Fill ratio: Encourage filling bins (higher ratio is better)\n    fill_ratio = (bins_remain_cap - item) / bins_remain_cap\n    fill_ratio[~feasible_bins] = -1  # Set to -1 to avoid influencing infeasible bins\n\n    # 3. Tight fit: Reward bins with remaining capacity close to zero after adding the item\n    remaining_space = bins_remain_cap - item\n    tight_fit_score = np.exp(-10 * remaining_space) # Exponential decay for bins with larger remaining cap\n    tight_fit_score[~feasible_bins] = 0\n\n    # 4. Avoid near-full bins: Logarithmic penalty to discourage almost full bins\n    almost_full = (remaining_space > 0) & (remaining_space <= 0.1)\n    almost_full_penalty = np.zeros_like(bins_remain_cap)\n    almost_full_penalty[almost_full] = -np.log(0.1 - remaining_space[almost_full] + 0.001)\n    \n    # 5. Combine and normalize priorities\n    priorities = fill_ratio + 0.5 * tight_fit_score + almost_full_penalty\n    \n    # Normalize to scale the priorities between 0 and 1. This helps in exploration\n    if np.max(priorities) > np.min(priorities):\n      priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities))\n    else:\n      priorities = np.zeros_like(bins_remain_cap)  # All bins have same priority\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Heuristic 1: Prefer bins that can fit the item (First-Fit Decreasing inspired)\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += 1  # Give a base priority to bins that can fit\n    \n    # Heuristic 2: Reward bins with capacity closest to item size (Best-Fit inspired)\n    diff = bins_remain_cap - item\n    diff_fit = diff[fit_mask]\n    if len(diff_fit) > 0:\n        best_fit_idx = np.argmin(diff_fit)\n        indices = np.where(fit_mask)[0]\n        priorities[indices[best_fit_idx]] += 2  # Higher priority for the best fit\n    \n    # Heuristic 3: Penalize bins with very large remaining capacity. Prevents from filling one bin very slowly\n    large_cap_mask = bins_remain_cap > 2 * item\n    priorities[large_cap_mask] -= 0.5 #reduce their chance\n\n    #Heuristic 4: If the bin is almost full after adding the item give a huge incentive\n    almost_full_cap = bins_remain_cap - item\n    almost_full_mask = (almost_full_cap <= 0.1) & (almost_full_cap >= 0)\n    priorities[almost_full_mask] += 5 #high priority if we almost fill\n\n    #Heuristic 5: Do not pick a bin if the item doesn't fit\n    no_fit_mask = bins_remain_cap < item\n    priorities[no_fit_mask] = -np.inf # do not pick a bin that doens't fit\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, best-fit, and filling bins effectively, while penalizing large remaining capacities.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}