[
  {
    "stdout_filepath": "problem_iter6_response0.txt_stdout.txt",
    "code_path": "problem_iter6_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Strongly penalize infeasible bins\n    cannot_fit = bins_remain_cap < item\n    priorities[cannot_fit] = -np.inf\n\n    # 2. Prioritize tight fits for feasible bins\n    can_fit = bins_remain_cap >= item\n    if np.any(can_fit):\n        waste = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = -waste\n\n        # Break ties by prioritizing smaller bins (avoid leaving large gaps)\n        priorities[can_fit] -= 1e-9 * bins_remain_cap[can_fit]\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response1.txt_stdout.txt",
    "code_path": "problem_iter6_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Feasibility check: Identify bins that can accommodate the item\n    feasible_bins = bins_remain_cap >= item\n    \n    if np.any(feasible_bins):\n        # Tight Fit Priority: Prioritize bins where the item fits snugly.\n        remaining_space = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] += 1.0 / (remaining_space + 1e-9)  # Avoid division by zero\n\n        # Fill Ratio Priority: Prioritize bins with higher fill ratios after adding the item\n        fill_ratios = item / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] += fill_ratios\n\n        # Excess Capacity Penalty: Penalize bins with large remaining capacity after adding the item\n        excess_capacity = bins_remain_cap[feasible_bins] - item\n        penalty_factor = 0.1  # Adjust this parameter as needed\n        priorities[feasible_bins] -= penalty_factor * (excess_capacity**2)\n\n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response2.txt_stdout.txt",
    "code_path": "problem_iter6_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Strongly penalize infeasible bins\n    cannot_fit = bins_remain_cap < item\n    priorities[cannot_fit] = -np.inf\n\n    # 2. Prioritize tight fits for feasible bins\n    can_fit = bins_remain_cap >= item\n    if np.any(can_fit):\n        waste = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = -waste\n\n        # Break ties by prioritizing smaller bins (avoid leaving large gaps)\n        priorities[can_fit] -= 0.00000001 * bins_remain_cap[can_fit]\n\n    return priorities",
    "response_id": 2,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response3.txt_stdout.txt",
    "code_path": "problem_iter6_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Feasibility - Must fit\n    fit_mask = bins_remain_cap >= item\n    priorities[~fit_mask] -= 1000  # Large penalty for infeasibility\n    priorities[fit_mask] += 1  # Base priority\n\n    # Heuristic 2: Waste Minimization - Tight Fit Bonus (Adaptive threshold)\n    remaining_after_fit = bins_remain_cap[fit_mask] - item\n    tight_fit_threshold = 0.2 * item  # Adaptive threshold\n    tight_fit_mask = remaining_after_fit <= tight_fit_threshold\n    indices = np.where(fit_mask)[0]\n    priorities[indices[tight_fit_mask]] += 5  # Significant bonus for tight fits\n\n    # Heuristic 3: Penalize Near-Full Bins (but allow if very tight relative to item)\n    nearly_full_threshold = 0.1 * item  # Adaptive Threshold: If capacity is very low\n    nearly_full_mask = (bins_remain_cap <= nearly_full_threshold) & fit_mask\n    priorities[nearly_full_mask] -= 2\n\n    # Heuristic 4: Penalize Excessive Remaining Capacity (Adaptive)\n    excessive_capacity_threshold = 2 * item  # Adaptive threshold\n    excessive_capacity_mask = bins_remain_cap > excessive_capacity_threshold\n    priorities[excessive_capacity_mask] -= 0.5\n\n    # Heuristic 5: Best fit inside feasible bins (Highest priority)\n    diff = bins_remain_cap - item\n    diff_fit = diff[fit_mask]\n    if len(diff_fit) > 0:\n        best_fit_idx = np.argmin(diff_fit)\n        indices = np.where(fit_mask)[0]\n        priorities[indices[best_fit_idx]] += 10  # Higher priority for the best fit\n\n    return priorities",
    "response_id": 3,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response4.txt_stdout.txt",
    "code_path": "problem_iter6_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate remaining capacity after adding the item\n    remaining_after_add = bins_remain_cap - item\n\n    # Give high priority to bins where the item fits\n    fit_indices = remaining_after_add >= 0\n\n    # Prioritize tighter fits by inverting the remaining capacity after adding.\n    # Add a small constant to avoid division by zero.\n    priorities[fit_indices] = 1.0 / (0.00001 + remaining_after_add[fit_indices])\n\n    # Give a very negative priority to bins where the item does not fit (discourage strongly)\n    priorities[~fit_indices] = -np.inf\n\n    # Normalize the priorities to scale between 0 and 1.\n    valid_priorities = priorities[np.isfinite(priorities)]\n    if len(valid_priorities) > 0:\n        min_priority = np.min(valid_priorities)\n        max_priority = np.max(valid_priorities)\n        if max_priority > min_priority:\n            priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)\n    \n    return priorities",
    "response_id": 4,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response5.txt_stdout.txt",
    "code_path": "problem_iter6_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Heuristic 1: Prefer bins that can fit the item (First-Fit Decreasing inspired)\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += 1  # Give a base priority to bins that can fit\n    \n    # Heuristic 2: Reward bins with capacity closest to item size (Best-Fit inspired)\n    diff = bins_remain_cap - item\n    diff_fit = diff[fit_mask]\n    if len(diff_fit) > 0:\n        best_fit_idx = np.argmin(diff_fit)\n        indices = np.where(fit_mask)[0]\n        priorities[indices[best_fit_idx]] += 5  # Higher priority for the best fit\n\n    \n    # Heuristic 3: Penalize bins with very large remaining capacity. Prevents from filling one bin very slowly\n    large_cap_mask = bins_remain_cap > 2 * item\n    priorities[large_cap_mask] -= 0.5 #reduce their chance\n\n    #Heuristic 4: If the bin is almost full after adding the item give a huge incentive\n    almost_full_cap = bins_remain_cap - item\n    almost_full_mask = (almost_full_cap <= 0.1) & (almost_full_cap >= 0)\n    priorities[almost_full_mask] += 10 #high priority if we almost fill\n\n    #Heuristic 5: Do not pick a bin if the item doesn't fit\n    no_fit_mask = bins_remain_cap < item\n    priorities[no_fit_mask] -=100 # do not pick a bin that doens't fit\n\n    return priorities",
    "response_id": 5,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response6.txt_stdout.txt",
    "code_path": "problem_iter6_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Strongly penalize infeasible bins\n    cannot_fit = bins_remain_cap < item\n    priorities[cannot_fit] = -np.inf\n\n    # 2. Prioritize tight fits for feasible bins\n    can_fit = bins_remain_cap >= item\n    if np.any(can_fit):\n        waste = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = -waste\n\n        # Break ties by prioritizing bins with smaller initial remaining capacity (more full)\n        priorities[can_fit] -= 0.00000001 * bins_remain_cap[can_fit]\n\n    return priorities",
    "response_id": 6,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response7.txt_stdout.txt",
    "code_path": "problem_iter6_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Strongly penalize infeasible bins\n    cannot_fit = bins_remain_cap < item\n    priorities[cannot_fit] = -np.inf\n\n    # 2. Prioritize tight fits for feasible bins\n    can_fit = bins_remain_cap >= item\n    if np.any(can_fit):\n        waste = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = -waste\n\n        # Break ties by prioritizing bins with higher remaining capacity *before* adding item,\n        # thus favoring bins that were already somewhat full. This can help consolidate items.\n        priorities[can_fit] += 0.00000001 * bins_remain_cap[can_fit]\n\n    return priorities",
    "response_id": 7,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response8.txt_stdout.txt",
    "code_path": "problem_iter6_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Strongly penalize infeasible bins\n    cannot_fit = bins_remain_cap < item\n    priorities[cannot_fit] = -np.inf\n\n    # 2. Prioritize tight fits for feasible bins\n    can_fit = bins_remain_cap >= item\n    if np.any(can_fit):\n        waste = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = -waste\n\n        # Break ties by prioritizing bins that were already mostly full to consolidate\n        priorities[can_fit] += 0.00000001 * bins_remain_cap[can_fit]\n\n    return priorities",
    "response_id": 8,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response9.txt_stdout.txt",
    "code_path": "problem_iter6_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Remove infeasible bins immediately.\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf  # Very low priority\n\n    # 2. Fill Ratio: Prioritize higher fill ratios, but only for feasible bins.\n    if np.any(feasible_bins):\n        fill_ratios = item / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] = fill_ratios\n\n        # 3. Waste Minimization (Tie-breaker): Slightly favor bins with less waste.\n        waste = bins_remain_cap[feasible_bins] - item\n        # Scale the waste inversely to the bin size. The smaller the bin, the more important minimizing waste is.\n        waste_penalty = -waste / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] += waste_penalty * 0.1\n\n        # 4. Randomness (Exploration): Add a small random value to break ties and encourage exploration.\n        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.001\n\n    return priorities",
    "response_id": 9,
    "obj": 4.048663741523748,
    "exec_success": true
  }
]