```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Huge penalty for bins that can't fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -1e9  # Very high negative priority

    # 2. Reward tight fits (Best-Fit principle)
    feasible_mask = bins_remain_cap >= item
    remaining_space = bins_remain_cap[feasible_mask] - item
    
    if len(remaining_space) > 0:
        # Normalize remaining space to bin size for fair comparison
        normalized_remaining_space = remaining_space / np.max(bins_remain_cap)
        
        # Convert to a "tightness" score; lower remaining space = higher score
        tightness_score = 1 - normalized_remaining_space

        # Assign tightness score to relevant bins
        feasible_indices = np.where(feasible_mask)[0]
        priorities[feasible_indices] += 10 * tightness_score # Scale score
    
    # 3. Reward bins that become almost full after packing
    almost_full_mask = (bins_remain_cap - item) / np.max(bins_remain_cap) <= 0.1
    priorities[almost_full_mask] += 5 # Extra incentive
    
    # 4. Prioritize smaller remaining capacity to help balance bin usage and fill bins faster
    priorities += (bins_remain_cap/np.max(bins_remain_cap)) * 0.1

    # 5. Bins with lower remaining capacity are more penalized by adding the item and therefore, get low priority if not almost full.
    not_almost_full = (bins_remain_cap - item) / np.max(bins_remain_cap) > 0.1
    priorities[not_almost_full] -= (1 - bins_remain_cap[not_almost_full]/np.max(bins_remain_cap)) * 0.05

    return priorities
```
