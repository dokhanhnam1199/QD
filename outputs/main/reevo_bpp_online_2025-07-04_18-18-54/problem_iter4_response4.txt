```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Infeasible bins get -inf priority
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    # 2. Best-Fit: Prioritize bins with the smallest remaining capacity after adding the item
    remaining_capacity = bins_remain_cap - item
    # Only consider feasible bins for best-fit calculation
    remaining_capacity[~feasible_bins] = np.inf  # set infeasible bins to infinity for argmin

    best_fit_index = np.argmin(remaining_capacity)
    if np.isfinite(remaining_capacity[best_fit_index]):  # Check if a feasible bin exists
        priorities[best_fit_index] += 3  # Give a high priority boost

    # 3. Fill-Level: Give a bonus to bins that are filled to a good level.
    fill_level = 1 - remaining_capacity / bins_remain_cap
    # Apply only to feasible bins
    fill_level[~feasible_bins] = 0

    # Reward fill levels between 0.7 and 0.9
    good_fill = (fill_level >= 0.7) & (fill_level <= 0.9)
    priorities[good_fill] += 2  # Medium priority boost

    # 4. Avoid Overfilling: Penalize bins that are close to being full after adding the item
    almost_full = (remaining_capacity > 0) & (remaining_capacity <= 0.1)
    priorities[almost_full] -= 1 # Small penalty

    # 5. Penalize Large Remaining Capacity: Discourage bins with large remaining capacity
    large_capacity = bins_remain_cap > 2 * item
    priorities[large_capacity] -= 0.5  # Small penalty for large capacity

    return priorities
```
