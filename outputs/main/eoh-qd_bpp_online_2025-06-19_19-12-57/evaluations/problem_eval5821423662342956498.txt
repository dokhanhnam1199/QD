def priority_v2(item, bins_remain_cap):
    """{This algorithm calculates priority scores for each bin based on a combination of remaining capacity and a penalty for bins with capacities smaller than the item size, favoring bins that can accommodate the item with minimal remaining space while penalizing bins that can't fit the item.}"""
    priority = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority.append(1 / (cap - item + 0.00001))  # Prioritize bins with minimal remaining space after placing the item
        else:
            priority.append(-1000)  # Heavily penalize bins that cannot fit the item
    return priority
