def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority based on a weighted combination of remaining capacity after placement and the fill percentage of the bin after placement, favoring bins that can accommodate the item well and lead to higher fill rates.}"""
  priority = []
  for cap in bins_remain_cap:
    if item <= cap:
      remaining_after_placement = cap - item
      fill_percentage_after_placement = (1 - (remaining_after_placement / 100)) * 100  # Assuming bin size of 100

      priority_score = (0.6 * fill_percentage_after_placement) + (0.4 * (100 - remaining_after_placement)) # weights fill_percentage and remaining capacity
      priority.append(priority_score)
    else:
      priority.append(-1)  # Assign low priority if item doesn't fit

  return priority
