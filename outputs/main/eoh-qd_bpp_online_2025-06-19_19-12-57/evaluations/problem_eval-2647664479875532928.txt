def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns priority to bins based on a combination of remaining capacity fit and a bonus for bins that are neither too full nor too empty.}"""
  priority = []
  for cap in bins_remain_cap:
    if cap >= item:
      fit_score = cap - item  # Smaller difference is better
      # Bonus for bins with capacity between 50% and 90% full after packing
      if cap > 0:
        after_fill_ratio = (1 - (cap - item) / (cap + item)) if (cap + item) > 0 else 0
      else:
          after_fill_ratio = 0
      
      
      if 0.5 <= after_fill_ratio <= 0.9:
        bonus = 1
      else:
        bonus = 0
      
      priority_score = 1 / (fit_score + 1) + bonus # Avoiding division by zero
    else:
      priority_score = -1  # Assign negative priority if item doesn't fit
    priority.append(priority_score)
  return priority
