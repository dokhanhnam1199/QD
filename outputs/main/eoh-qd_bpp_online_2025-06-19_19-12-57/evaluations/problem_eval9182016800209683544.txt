def priority_v2(item, bins_remain_cap):
  """{Assign a priority score to each bin based on remaining capacity relative to item size, favoring bins that can accommodate the item with minimal wasted space, but also considering bins that are nearly full to consolidate space.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      priority = (item / cap) + (1 - (cap - item) / max(bins_remain_cap))  # Favor near fit and larger bins.
    else:
      priority = -1  # Cannot fit
    priorities.append(priority)
  return priority
