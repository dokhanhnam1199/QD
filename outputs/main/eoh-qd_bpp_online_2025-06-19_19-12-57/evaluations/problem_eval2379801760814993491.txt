def priority_v2(item, bins_remain_cap):
    """{Assign a priority score to each bin based on how well the item fits, considering both waste and potential for future items.}"""
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            waste = cap - item
            # Prioritize bins with smaller waste, but also consider the potential for future items.
            # Higher remaining capacity after packing the item is better, but only if it's not too high (avoiding excessive waste).
            priority = 1.0 / (waste + 0.000001) + (min(item, cap-item) / (item+0.000001)) #added item to avoid zero divison error.
        else:
            priority = -1
        priorities.append(priority)
    return priority
