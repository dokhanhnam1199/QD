def priority_v2(item, bins_remain_cap):
    """
    {Assign a priority score to each bin based on a combination of remaining capacity and how well the item fits, favoring bins with sufficient space and a tighter fit.}
    """
    priorities = []
    for cap in bins_remain_cap:
        if cap >= item:
            priority = (cap - item) / cap  # Smaller remaining capacity is better. Normalize between 0 and 1.
            priorities.append(1 - priority) # Invert so that higher values are better.
        else:
            priorities.append(-1)  # Assign a negative priority if the item doesn't fit

    return priority
