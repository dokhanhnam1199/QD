def priority_v2(item, bins_remain_cap):
  """{This algorithm assigns higher priority to bins with remaining capacity close to the item size, but also considers the overall fullness of the bin to avoid leaving very small gaps.}"""
  priorities = []
  for cap in bins_remain_cap:
    if cap >= item:
      # Calculate the wasted space if the item is placed in this bin
      wasted_space = cap - item
      
      # Calculate the fullness of the bin after placing the item (as a ratio)
      fullness = item / (cap + item - wasted_space) if (cap + item - wasted_space) > 0 else 0
      
      # Give higher priority to bins with less wasted space and higher fullness.
      # The square of the wasted space penalizes bins with a lot of wasted space more heavily.
      # The division by (1 + wasted_space) reduces the impact of large wasted space values.
      priority = (1 / (1 + wasted_space**2)) * (fullness * 10)
      
    else:
      priority = -1  # Assign a very low priority (or -infinity) if the item doesn't fit

    priorities.append(priority)
  return priority
