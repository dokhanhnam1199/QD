```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Prioritize bins that can fit the item
            priority = (cap - item) / cap  # Remaining space ratio, higher is better (less waste)
            priorities[i] = priority

    # Adjust for full bins. Prioritize bins that can fit the item but penalize almost full bins
    almost_full_threshold = 0.9  # Adjust this value to tune aggressiveness

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            fill_ratio = item / cap
            if (1 - fill_ratio) < 1e-6: # if it fits *exactly*, that should be optimal
                priorities[i] += 1

            if cap > 0 and item / cap > almost_full_threshold: #If fills greater than some threshold
                priorities[i] -= (item / cap) * 0.5 #reduce priority to reduce waste
            else:
                pass

        else:
            priorities[i] = -1e9 #Negative value. Disqualify from selection if the item won't fit
    return priorities
```
