```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines near-fit, fragmentation avoidance, and fill-completion."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    near_fit_threshold = 0.85
    near_fit_bonus = 15.0
    complete_fill_bonus = 25.0
    small_fragment_threshold = 0.1
    large_fragment_penalty = -7.0

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item

    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = -np.inf
            continue
        
        # Near Fit
        fill_ratio = item / remaining_cap
        if fill_ratio >= near_fit_threshold:
            priorities[i] += near_fit_bonus

        # Complete Fill
        if item == remaining_cap:
            priorities[i] += complete_fill_bonus

        # Fragmentation
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bins_remain_cap[0]) < small_fragment_threshold:
            priorities[i] += large_fragment_penalty
            
    #Slight preference if possible bins exist
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001

    return priorities
```
