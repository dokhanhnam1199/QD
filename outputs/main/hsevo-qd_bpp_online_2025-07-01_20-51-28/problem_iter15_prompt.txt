{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines near-fit, fragmentation avoidance, capacity ratio, with handling for full bins and dynamic adjustments.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    near_fit_threshold = 0.9\n    near_fit_bonus = 10.0\n    small_fragment_threshold = 0.1\n    large_fragment_penalty = -5.0\n    complete_fill_bonus = 20.0\n    capacity_ratio_weight = 2.0\n\n    valid_bins = bins_remain_cap > 0\n    if not np.any(valid_bins):\n        return priorities\n    \n    possible_bins = bins_remain_cap >= item\n\n    avg_bin_capacity = np.mean(bins_remain_cap[valid_bins])\n\n    for i, remaining_cap in enumerate(bins_remain_cap):\n        if remaining_cap < item:\n            priorities[i] = -np.inf\n            continue\n\n        # Near Fit\n        near_fit_ratio = item / remaining_cap\n        if near_fit_ratio >= near_fit_threshold:\n            priorities[i] += near_fit_bonus\n        \n        if item == remaining_cap:\n            priorities[i] += complete_fill_bonus\n\n        # Fragmentation\n        new_remaining = remaining_cap - item\n        if new_remaining > 0 and (new_remaining / avg_bin_capacity) < small_fragment_threshold:\n            priorities[i] += large_fragment_penalty\n\n        # Capacity Ratio\n        priorities[i] += near_fit_ratio * capacity_ratio_weight\n\n    # If no possible bins are good, make all possible bins minimally acceptable.\n    if not np.any(priorities[possible_bins] > -np.inf):\n        priorities[possible_bins] += 0.001\n        \n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, here's a refined approach to \"Current Self-Reflection\" for heuristic design, focusing on actionable advice and avoiding common pitfalls, tailored for optimizing bin packing heuristics:\n\n*   **Keywords:** Multifaceted, dynamic weighting, fragmentation avoidance, near-fit, complete fill, parameter optimization, edge case handling.\n\n*   **Advice:** Design heuristics using a weighted combination of factors like near-fit, minimizing fragmentation, aiming for complete fills, and current fill level. Implement dynamic weighting that adjusts based on the item being packed and the current state of the bins.\n\n*   **Avoid:** Over-reliance on simplistic ratios or single-factor approaches. Neglecting edge cases. Static weighting schemes.\n\n*   **Explanation:** Effective heuristics balance multiple objectives. Dynamic weighting allows the heuristic to adapt to different scenarios. Experimentation is essential to find optimal default parameter values, providing a solid base for parameter adjustment and improvement.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}