```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins based on a combination of factors:
    1. Remaining capacity relative to item size. Bins closer to the item size are preferred.
    2. Absolute remaining capacity. Avoids filling nearly empty bins unnecessarily.
    3. A small bonus for using a bin if it's not full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Find bins that can fit the item
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return np.zeros_like(bins_remain_cap) # No bin can fit the item

    # Calculate ratios of item size to remaining capacity
    ratios = item / bins_remain_cap[fit_mask]

    # Calculate a score based on how close the remaining capacity is to the item size
    capacity_score = np.exp(-np.abs(bins_remain_cap[fit_mask] - item) / item)

    # Give higher priority to bins with larger remaining capacity (but can still fit)
    remaining_capacity_score = bins_remain_cap[fit_mask]

    # Combine the scores.
    priorities[fit_mask] = capacity_score * remaining_capacity_score #* (1 + 0.1*(bins_remain_cap[fit_mask] < 1))
    # Adding a very small incentive for using already partly filled bins
    priorities[fit_mask] = priorities[fit_mask] + (bins_remain_cap[fit_mask] < np.max(bins_remain_cap))*0.001*np.max(bins_remain_cap)


    return priorities
```
