```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_capacity = bins_remain_cap[0]  # Assuming all bins have the same capacity


    # Heuristic 1: Near Fit (Adaptive)
    near_fit_threshold = 0.85  # Target near fit ratio
    near_fit_bonus_base = 15.0
    near_fit_bonus = near_fit_bonus_base * np.exp(-abs((bins_remain_cap - item) / bin_capacity))  # Adaptive bonus based on how close it is to target

    # Heuristic 2: Avoid Fragmentation (Context-Aware)
    fragmentation_penalty_exponent = 2
    small_fragment_threshold = 0.1
    large_fragment_penalty = -7.0

    # Heuristic 3: Complete Fill
    complete_fill_bonus = 25.0

    # Heuristic 4: Balance Utilization (Encourage even usage across bins)
    utilization_penalty_factor = -0.1  # Scale penalty to keep values sensible
    average_utilization = np.mean(1 - bins_remain_cap / bin_capacity) # Calculate average bin utilization
    utilization_penalty = utilization_penalty_factor * np.abs((1 - bins_remain_cap / bin_capacity) - average_utilization)  # Penalize bins deviating from average

    # Heuristic 5: Reward bins with higher relative available capacity.
    relative_capacity_bonus_factor = 0.05
    relative_capacity_bonus = relative_capacity_bonus_factor * bins_remain_cap

    # Handle cases where remaining capacity is zero to avoid division by zero and also not allow packing to filled bins
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item

    for i, remaining_cap in enumerate(bins_remain_cap):

        if remaining_cap < item:  # Disqualify bins that are too small
            priorities[i] = -np.inf  # Significantly low priority
            continue

        # Near Fit
        if item / remaining_cap >= near_fit_threshold:
            priorities[i] += near_fit_bonus[i] # Use adaptive bonus

        if item == remaining_cap:
            priorities[i] += complete_fill_bonus

        # Fragmentation
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bin_capacity) < small_fragment_threshold:
            priorities[i] += large_fragment_penalty

        # Balance Utilization
        priorities[i] += utilization_penalty[i]
        
        # Relative Capacity
        priorities[i] += relative_capacity_bonus[i]

    # If no bins can contain the item (after applying fragmentation penalty), slightly raise score of potential bins for placement
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001

    return priorities
```
