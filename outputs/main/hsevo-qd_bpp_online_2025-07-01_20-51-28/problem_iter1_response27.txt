```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several heuristics inspired by physical analogies
    and observations about good packing strategies.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # 1. Avoid Overfilling (Fundamental!)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        # If no bin can fit, prioritize the bin that has the most space *anyway*.
        # Desperate measures.  Maybe a split is in order elsewhere.
        priorities = bins_remain_cap
        return priorities


    # 2. "Minimize Wasted Space" - A Boltzmann-esque factor.
    # Higher priority to bins that *almost* perfectly fit the item.
    # exp(-E/kT), E ~ wasted space.  Lower temperature, higher selectivity.
    # "temperature" is a hyperparameter. Higher temp == less selective.
    temperature = 0.1 # Tune this!  How sensitive should we be?
    wasted_space = bins_remain_cap - item
    wasted_space = np.clip(wasted_space, a_min=0, a_max=None)  # Only consider bins it fits in

    #Boltzmann Factor, normalizing over valid bins:
    boltzmann_factor = np.exp(-wasted_space[valid_bins] / temperature)
    #priorities[valid_bins] = boltzmann_factor

    # 3. A Touch of "First Fit Decreasing": Prioritize fuller bins FIRST, among
    #  the *valid* bins.  Less space to waste later. Weak effect, just in case.
    #  Scale it so it isn't the *only* factor.
    fullness_factor = bins_remain_cap / bins_remain_cap.max() #scaled fullness
    fullness_factor = np.clip(fullness_factor, a_min=0, a_max=1) #prevent weird cases


    # 4. Combined Priority, applying different scaling to different heuristics
    priorities[valid_bins] = (boltzmann_factor +  fullness_factor[valid_bins] * 0.1)

    return priorities
```
