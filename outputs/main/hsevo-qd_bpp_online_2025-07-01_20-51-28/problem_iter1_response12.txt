```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Iterate through each bin
    for i, remaining_capacity in enumerate(bins_remain_cap):
        # Bin cannot fit the item, so it has zero priority
        if item > remaining_capacity:
            priorities[i] = -np.inf  # Or a large negative value
            continue

        # Calculate the wasted space if the item is placed in this bin
        wasted_space = remaining_capacity - item

        # Prefer bins where item fills a large portion of remaining space
        fill_ratio = item / remaining_capacity
        priorities[i] = fill_ratio

        # Add a small bonus if the remaining space after adding item is small, 
        # This favors more complete filling
        priorities[i] += np.exp(-10 * wasted_space) # Experiment with 10, and possibly make the exponential even more impactful by increasing the factor

        # Reduce the score if it means leaving a very small space that will likely be unusable, avoids fragmentation.
        if wasted_space > 0 and wasted_space < 0.1:
            priorities[i] -= 0.5 #Penalizes leaving almost useless space

    return priorities
```
