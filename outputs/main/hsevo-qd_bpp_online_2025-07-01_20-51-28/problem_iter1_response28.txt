```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Fill bins that fit more tightly first.  Consider both absolute wasted space and relative.

        wasted_space = bins_remain_cap - item
        relative_wasted = wasted_space / bins_remain_cap

        priorities[valid_bins] = 1 / (wasted_space[valid_bins] + 1e-9) + 1 / (relative_wasted[valid_bins] + 1e-9)

        #Bonus for bins almost exactly full
        almost_full = np.abs(relative_wasted) < 0.1
        priorities[valid_bins & almost_full] += 1

        # Small bonus to use bins more frequently in general - avoids just filling the first bins over and over
        priorities[valid_bins] += 0.01 * np.random.rand(np.sum(valid_bins))
    else:
        # If no bin fits, strongly prioritize bins with largest remaining cap.
        priorities = bins_remain_cap

    return priorities
```
