```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines near-fit, fragmentation avoidance, capacity ratio, with handling for full bins and dynamic adjustments.
    Adaptive weights based on remaining capacities and item size.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Named arguments with optimized defaults
    near_fit_threshold = 0.95
    near_fit_bonus = 15.0
    small_fragment_threshold = 0.1
    large_fragment_penalty = -7.0
    complete_fill_bonus = 25.0
    capacity_ratio_weight = 3.0
    very_small_item_threshold = 0.05  # Threshold for considering an item "very small"
    very_small_item_bonus = 5.0 # Bonus to small items
    avg_bin_capacity_weight = 1.0

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
      return priorities
    
    avg_bin_capacity = np.mean(bins_remain_cap[valid_bins])
    max_bin_capacity = np.max(bins_remain_cap[valid_bins])
    min_bin_capacity = np.min(bins_remain_cap[valid_bins])

    # Dynamic weight adjustments based on the state of bins
    capacity_range = max_bin_capacity - min_bin_capacity
    capacity_diversity_factor = capacity_range / avg_bin_capacity if avg_bin_capacity > 0 else 0.0
    
    # Adjust near-fit bonus based on how full bins are getting
    dynamic_near_fit_bonus = near_fit_bonus * (1 + capacity_diversity_factor * 0.5)
    
    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = -np.inf
            continue

        # Near Fit
        near_fit_ratio = item / remaining_cap
        if near_fit_ratio >= near_fit_threshold:
            priorities[i] += dynamic_near_fit_bonus

        # Complete Fill
        if item == remaining_cap:
            priorities[i] += complete_fill_bonus
            
        # Fragmentation
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / avg_bin_capacity) < small_fragment_threshold:
            priorities[i] += large_fragment_penalty
        
        # Capacity Ratio
        priorities[i] += near_fit_ratio * capacity_ratio_weight

        # Very small item heuristic
        if item / avg_bin_capacity < very_small_item_threshold:
            priorities[i] += very_small_item_bonus # Incentivize placing very small items

        # Avg bin capacity penalty
        priorities[i] += (remaining_cap / avg_bin_capacity - 1) * avg_bin_capacity_weight

    # If no possible bins are good, make all possible bins minimally acceptable.
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001

    return priorities
```
