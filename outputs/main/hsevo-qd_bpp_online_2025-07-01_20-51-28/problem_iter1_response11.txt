```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the interplay of energy and space, I propose a heuristic that balances the fit of the item within a bin against the "relative energy" of filling that bin. A tighter fit corresponds to a lower "energy state" but should be balanced with the potential to accommodate future items (space).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate "fitting factor" - a measure of how well the item fits.
            # A tighter fit (smaller remainder) is generally preferred.
            fitting_factor = (cap - item) / cap

            # Calculate "relative fill" - a measure of how much of the bin
            # would be filled by adding the item.  Want to encourage not wasting space.
            relative_fill = item / cap

            # "Energy-like" term: penalized if bin is too empty
            space_utilization_penalty = np.exp(-5 * relative_fill) # Smaller relative_fill -> Large penalty

            # Prioritize based on fitting factor (avoiding excessive waste)
            # balancing fill level (space utilization penalty).
            priorities[i] = (1 - fitting_factor) - space_utilization_penalty # Try to fill the bin well and without wasting. Also, smaller fitting factor more preferrable.

            # Add an extra boost for nearly full bins, so prefer completely fill bin if we have item of exactly the size
            if abs(cap - item) < 1e-6:
                priorities[i] += 1
    return priorities
```
