{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray,\n                near_fit_threshold: float = 0.5667358291405592,\n                near_fit_bonus: float = 22.38135249108899,\n                fragmentation_penalty_exponent: int = 2.308462920455862,\n                small_fragment_threshold: float = 0.08288814949623513,\n                large_fragment_penalty: float = -11.55606595135383,\n                complete_fill_bonus: float = 48.856383562403046,\n                desperate_priority_increase: float = 0.07980886411476741) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        near_fit_threshold: Threshold for considering a near fit.\n        near_fit_bonus: Bonus for a near fit.\n        fragmentation_penalty_exponent: Exponent for the fragmentation penalty.\n        small_fragment_threshold: Threshold for considering a fragment small.\n        large_fragment_penalty: Penalty for a large fragment.\n        complete_fill_bonus: Bonus for completely filling a bin.\n        desperate_priority_increase: priority increase when no bins are available.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Handle cases where remaining capacity is zero to avoid division by zero and also not allow packing to filled bins\n    valid_bins = bins_remain_cap > 0\n    if not np.any(valid_bins):\n        return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version introduces dynamic weighting and considers bin fill level.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = bins_remain_cap[0]  # Assuming all bins have the same capacity.\n\n    # Heuristic 1: Near Fit (Dynamic bonus based on fill level)\n    near_fit_threshold_low = 0.75\n    near_fit_threshold_high = 0.95\n    near_fit_bonus_max = 15.0\n\n    # Heuristic 2: Fragmentation Penalty (Adaptive based on item size)\n    fragmentation_penalty_exponent = 2\n    small_fragment_threshold = 0.1\n    large_fragment_penalty_factor = -5.0\n\n    # Heuristic 3: Complete Fill Bonus\n    complete_fill_bonus = 25.0\n\n    # Heuristic 4: Fill Level Preference (Encourage filling emptier bins first, but temper)\n    fill_level_preference_weight = 2.0\n\n    # Heuristic 5: Avoid Overfill (Strong Negative Priority)\n    overfill_penalty = -np.inf\n\n    valid_bins = bins_remain_cap > 0\n    if not np.any(valid_bins):\n        return priorities\n\n    possible_bins = bins_remain_cap >= item\n\n    for i, remaining_cap in enumerate(bins_remain_cap):\n        if remaining_cap < item:\n            priorities[i] = overfill_penalty\n            continue\n\n        # Complete Fill\n        if item == remaining_cap:\n            priorities[i] += complete_fill_bonus\n            continue #Short circuit to avoid other calculations\n\n        # Near Fit (Dynamic Bonus)\n        fill_ratio = item / remaining_cap\n        if near_fit_threshold_low <= fill_ratio <= near_fit_threshold_high:\n            # Scale bonus based on how close it is to the ideal near fit.\n            near_fit_bonus = near_fit_bonus_max * (1 - abs(fill_ratio - (near_fit_threshold_low + near_fit_threshold_high)/2) / ((near_fit_threshold_high - near_fit_threshold_low)/2))\n            priorities[i] += near_fit_bonus\n\n        # Fragmentation Penalty (Adaptive)\n        new_remaining = remaining_cap - item\n        if new_remaining > 0:\n            fragment_ratio = new_remaining / bin_capacity\n            if fragment_ratio < small_fragment_threshold:\n                # Scale penalty based on the item size.  Larger items causing fragmentation receive more penalty.\n                penalty = large_fragment_penalty_factor * (item / bin_capacity)\n                priorities[i] += penalty\n\n        # Fill Level Preference\n        priorities[i] += fill_level_preference_weight * (1 - (remaining_cap / bin_capacity))\n\n    # If no bins can contain the item (after applying fragmentation penalty), slightly raise score of potential bins for placement\n    if not np.any(priorities[possible_bins] > overfill_penalty):\n        priorities[possible_bins] += 0.001\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates near-fit, fragmentation avoidance, and complete fill bonuses with explicit control over bin qualification and penalties, while the worst uses a simple log ratio. (2nd) vs (19th) shows a similar contrast. Comparing (1st) vs (2nd), we see the inclusion of capacity ratio weighting and its effect. (3rd) vs (4th) reveals the impact of handling bins that can't contain items and marking all possible bins minimally acceptable. Comparing (2nd) vs (3rd), we observe no functional difference. Comparing (16th) vs (20th), again no change. Comparing (7th) vs (8th), there's a shift to using named arguments with preset default values, which are optimized, for all parameters affecting scoring. (13th) vs (16th), using dynamic bonus. Overall: The better heuristics use a combination of different strategies.\n- \nOkay, let's refine \"Current self-reflection\" to drive better heuristic design.\n\n*   **Keywords:** Adaptive weighting, state-dependent, multifaceted scoring, constraint balancing, dynamic prioritization, implicit constraints.\n\n*   **Advice:** Design heuristics that dynamically adapt factor weights based on current bin and item states. Model implicit constraints and balances different potentially conflicting objectives.\n\n*   **Avoid:** Static weights, rigid factor combinations, ignoring state information, and a single-objective focus.\n\n*   **Explanation:** Move beyond fixed approaches. Create heuristics that intelligently react to the specific packing situation, balancing factors and addressing implicit constraints dynamically.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}