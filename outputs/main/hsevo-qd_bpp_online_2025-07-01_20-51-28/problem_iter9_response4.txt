```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Heuristic 1: Near Fit (Adaptive bonus)
    near_fit_threshold_high = 0.95
    near_fit_threshold_low = 0.85
    
    #Heuristic 2: Complete fill
    complete_fill_bonus = 20.0

    # Heuristic 3: Fragmentation (Adaptive penalty)
    small_fragment_threshold = 0.1
    large_fragment_penalty = -5.0
    fragmentation_penalty_exponent = 2

    # Heuristic 4: Bin Usage Rate (incentivize using emptier bins early on)
    bin_usage_weight = 5.0

    # Heuristic 5: Item size consideration (penalize small items going to large bins, only activate if there are enough bins)
    item_size_penalty_threshold = 0.5
    item_size_penalty_weight = -2.0
    
    # Heuristic 6: Adapt near fit bonus depending on number of available bins
    bonus_scale_factor = 1.0

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item
    
    
    for i, remaining_cap in enumerate(bins_remain_cap):
        
        if remaining_cap < item: # Disqualify bins that are too small
            priorities[i] = -np.inf
            continue

        # Near Fit
        if item / remaining_cap >= near_fit_threshold_low and item / remaining_cap <= near_fit_threshold_high:
            near_fit_bonus = 10.0 * bonus_scale_factor
            priorities[i] += near_fit_bonus
            
        if item == remaining_cap:
            priorities[i] += complete_fill_bonus

        # Fragmentation
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bins_remain_cap[0]) < small_fragment_threshold:
            priorities[i] += large_fragment_penalty * (small_fragment_threshold - (new_remaining / bins_remain_cap[0]))**fragmentation_penalty_exponent
        

        # Bin Usage Rate
        usage_rate = 1 - (remaining_cap / bins_remain_cap[0])
        priorities[i] += bin_usage_weight * usage_rate
    
        # Item Size Consideration
        if num_bins > 5 and item < item_size_penalty_threshold * bins_remain_cap[0]:
             priorities[i] += item_size_penalty_weight * (1 - (item / bins_remain_cap[0]))

    # If no bins can contain the item (after applying fragmentation penalty), slightly raise score of potential bins for placement
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001
    
    return priorities
```
