```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    
    # Heuristic 1: "Near Fit" - Prefer bins where the item fills a significant portion
    near_fit_threshold = 0.85  # Adjust this to fine-tune "nearness"
    near_fit_bonus_base = 15.0

    # Heuristic 2: Avoid Fragmentation - Penalize bins that would become highly fragmented
    fragmentation_penalty_exponent = 2 # Higher exponent means stronger penalty for fragmentation
    small_fragment_threshold = 0.1 # What counts as a small fragment relative to bin size?
    large_fragment_penalty_base = -8.0 # Subtract points for producing a very small remaining fragment

    # Heuristic 3: Try to completely fill
    complete_fill_bonus_base = 25.0

    # Heuristic 4: Balance - Distribute items across bins to avoid over-filling some early
    balance_bonus = 5.0
    
    # Heuristic 5: Bin occupancy rate
    occupancy_rate_factor = 2.0

    # Handle cases where remaining capacity is zero
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item

    # Calculate total remaining capacity
    total_remaining_capacity = np.sum(bins_remain_cap)

    # Calculate average remaining capacity
    average_remaining_capacity = total_remaining_capacity / num_bins if num_bins > 0 else 0

    for i, remaining_cap in enumerate(bins_remain_cap):
        
        if remaining_cap < item: # Disqualify bins that are too small
            priorities[i] = -np.inf
            continue

        # Near Fit (Adaptive Bonus)
        near_fit_ratio = item / remaining_cap
        if near_fit_ratio >= near_fit_threshold:
            near_fit_bonus = near_fit_bonus_base * (1 + (near_fit_ratio - near_fit_threshold) * 5) # Scale bonus based on how close it is to perfect fit
            priorities[i] += near_fit_bonus
        
        # Complete Fill (Adaptive Bonus)
        if item == remaining_cap:
            complete_fill_bonus = complete_fill_bonus_base * 1.2  #Slight increase for complete fill
            priorities[i] += complete_fill_bonus

        # Fragmentation (Adaptive Penalty)
        new_remaining = remaining_cap - item
        if new_remaining > 0:
            fragment_ratio = new_remaining / bins_remain_cap[0]
            if fragment_ratio < small_fragment_threshold:
                large_fragment_penalty = large_fragment_penalty_base * (1 - (fragment_ratio / small_fragment_threshold)) #Scale penalty based on fragment size
                priorities[i] += large_fragment_penalty

        # Balance (Try to keep bins at similar fill levels)
        capacity_difference = remaining_cap - average_remaining_capacity
        balance_score = -abs(capacity_difference) / average_remaining_capacity * balance_bonus if average_remaining_capacity > 0 else 0
        priorities[i] += balance_score
        
        # Bin occupancy rate
        occupancy_rate = (bins_remain_cap[0] - remaining_cap) / bins_remain_cap[0]
        priorities[i] += occupancy_rate * occupancy_rate_factor
        
    # If no bins can contain the item, slightly raise score of potential bins for placement
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001

    return priorities
```
