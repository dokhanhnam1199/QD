```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins where the item fits
    fits = bins_remain_cap >= item
    priorities[fits] = 1  # Base priority for fitting bins

    # Adjust priority based on remaining capacity after packing
    remaining_after_pack = bins_remain_cap - item
    priorities[fits] += remaining_after_pack[fits] / bins_remain_cap[fits]  # Higher priority for bins with less remaining space

    # Add a small bonus if the remaining capacity is close to item size.
    close_fit = (bins_remain_cap >= item) & (bins_remain_cap <= 1.2 * item)  #within 20% of item size
    priorities[close_fit] += 0.5

    # Give a strong negative priority to bins where item doesn't fit to avoid them.
    priorities[~fits] = -1e9 
    
    return priorities
```
