```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a more sophisticated heuristic considering multiple factors.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority: closer to full is better, but not too close
            space_waste = cap - item
            priorities[i] = 1.0 / (space_waste + 0.01) # Avoid division by zero

            # Bonus for bins that are already somewhat full
            occupancy = 1.0 - (cap / bins_remain_cap.max()) #Relative occupancy, maximum relative cap
            priorities[i] += occupancy * 0.5 #weight

            # Penalize bins where item would fill up almost all capacity: reduce fragmentation.
            if space_waste < bins_remain_cap.max()*0.1:
                priorities[i] -= 0.2  # Penalize excessive filling (risk of small leftovers)
        else:
            priorities[i] = -np.inf # Disqualify bins that can't fit the item

    return priorities
```
