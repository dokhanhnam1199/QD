```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Encourage bins that can accommodate the item with minimal wasted space.
    # A small amount of wasted space indicates a better fit.
    waste = bins_remain_cap - item
    valid_bins = waste >= 0

    if np.any(valid_bins):
        priorities[valid_bins] = np.exp(-waste[valid_bins] / item)  # Exponential decay based on waste.
        # Slightly prioritize bins closer to being full after placing item
        priorities[valid_bins] += 0.1 * (1 - waste[valid_bins] / bins_remain_cap[valid_bins])


    # For bins that cannot accommodate the item, give a very low priority. This should ideally never be selected
    priorities[~valid_bins] = -1e9 # Very Low Priority.

    return priorities
```
