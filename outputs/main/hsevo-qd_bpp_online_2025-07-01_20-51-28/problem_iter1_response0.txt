```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins that can accommodate the item
    can_accommodate = bins_remain_cap >= item
    priorities[can_accommodate] += 1  # Base priority for fitting
    
    # Prioritize bins with less wasted space (smaller remaining capacity after placing item)
    remaining_after_fit = bins_remain_cap[can_accommodate] - item
    priorities[can_accommodate] += np.exp(-remaining_after_fit) # Adding the fitness bonus. Smaller values result in larger bonus

    # Penalize bins that cannot accommodate the item
    priorities[~can_accommodate] -= 0.1  # Small negative priority to discourage

    return priorities
```
