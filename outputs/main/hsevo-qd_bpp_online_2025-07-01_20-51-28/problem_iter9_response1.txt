```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, with adaptive weighting.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_capacity = bins_remain_cap[0] # Assuming all bins have the same initial capacity
    
    # Heuristic 1: "Near Fit" - Adaptive bonus based on remaining capacity
    near_fit_threshold_high = 0.95
    near_fit_threshold_low = 0.85
    near_fit_bonus_max = 15.0
    near_fit_bonus_min = 5.0

    # Heuristic 2: Avoid Fragmentation - Adaptive penalty based on item size and bin state
    fragmentation_penalty_exponent = 2
    small_fragment_threshold = 0.1
    large_fragment_penalty_max = -10.0
    large_fragment_penalty_min = -2.0

    # Heuristic 3: Complete Fill - Bonus increases as bins are more full
    complete_fill_bonus_max = 25.0
    complete_fill_bonus_min = 10.0

    # Heuristic 4: Balance - Favor bins with closer to average remaining capacity
    # This helps prevent one or two bins from filling up much faster than others
    avg_remaining_cap = np.mean(bins_remain_cap)
    balance_penalty_scale = -1.0 # Reduced from -2 to be less aggressive. Should be negative.

    # Heuristic 5: Number of Possible Bins
    num_possible_bins = np.sum(bins_remain_cap >= item)

    # Handle cases where remaining capacity is zero
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities
    
    possible_bins = bins_remain_cap >= item

    for i, remaining_cap in enumerate(bins_remain_cap):
        
        if remaining_cap < item:
            priorities[i] = -np.inf
            continue

        # Near Fit (Adaptive Bonus)
        near_fit_ratio = item / remaining_cap
        if near_fit_ratio >= near_fit_threshold_low and near_fit_ratio <= near_fit_threshold_high:
            # Linearly scale the bonus between min and max based on how close we are to the target ratio.
            bonus = near_fit_bonus_min + (near_fit_bonus_max - near_fit_bonus_min) * ((near_fit_ratio - near_fit_threshold_low) / (near_fit_threshold_high - near_fit_threshold_low))
            priorities[i] += bonus

        # Complete Fill (Adaptive Bonus)
        if item == remaining_cap:
            # More bonus points if bin is already full
            bonus = complete_fill_bonus_min + (complete_fill_bonus_max - complete_fill_bonus_min) * (1 - (remaining_cap/bin_capacity))
            priorities[i] += bonus

        # Fragmentation (Adaptive Penalty)
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bin_capacity) < small_fragment_threshold:
            # Scale penalty based on item size relative to bin capacity
            penalty = large_fragment_penalty_min + (large_fragment_penalty_max - large_fragment_penalty_min) * (item / bin_capacity)
            priorities[i] += penalty
        
        # Balance (Penalty for Divergence from average)
        priorities[i] += balance_penalty_scale * abs(remaining_cap - avg_remaining_cap) / bin_capacity
        
    # If no bins can contain the item, slightly raise score of potential bins
    if not np.any(priorities[possible_bins] > -np.inf):
         priorities[possible_bins] += 0.001

    return priorities
```
