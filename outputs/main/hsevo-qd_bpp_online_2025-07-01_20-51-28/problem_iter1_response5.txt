```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # 1. Can the item fit? If not, priority is -infinity
    can_fit = item <= bins_remain_cap
    priorities[~can_fit] = -np.inf

    # 2. If item fits perfectly, assign maximum priority
    perfect_fit = item == bins_remain_cap
    priorities[perfect_fit] = np.inf
    
    # 3. Prefer bins where the remaining capacity after adding the item will be small, but non-zero.
    remaining_after_fit = bins_remain_cap - item
    valid_bins = can_fit & ~perfect_fit
    
    if np.any(valid_bins): #added protection
        priorities[valid_bins] = -remaining_after_fit[valid_bins] # Smaller remaining capacity is better. Prioritize.
    
    # 4. Add small random component to break ties
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-6

    return priorities
```
