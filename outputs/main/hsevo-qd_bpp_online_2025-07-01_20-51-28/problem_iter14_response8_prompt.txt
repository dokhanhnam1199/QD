{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines near-fit, fragmentation avoidance, capacity ratio, with handling for full bins and dynamic adjustments.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    near_fit_threshold = 0.9\n    near_fit_bonus = 10.0\n    small_fragment_threshold = 0.1\n    large_fragment_penalty = -5.0\n    complete_fill_bonus = 20.0\n    capacity_ratio_weight = 2.0\n\n    valid_bins = bins_remain_cap > 0\n    if not np.any(valid_bins):\n        return priorities\n    \n    possible_bins = bins_remain_cap >= item\n\n    avg_bin_capacity = np.mean(bins_remain_cap[valid_bins])\n\n    for i, remaining_cap in enumerate(bins_remain_cap):\n        if remaining_cap < item:\n            priorities[i] = -np.inf\n            continue\n\n        # Near Fit\n        near_fit_ratio = item / remaining_cap\n        if near_fit_ratio >= near_fit_threshold:\n            priorities[i] += near_fit_bonus\n        \n        if item == remaining_cap:\n            priorities[i] += complete_fill_bonus\n\n        # Fragmentation\n        new_remaining = remaining_cap - item\n        if new_remaining > 0 and (new_remaining / avg_bin_capacity) < small_fragment_threshold:\n            priorities[i] += large_fragment_penalty\n\n        # Capacity Ratio\n        priorities[i] += near_fit_ratio * capacity_ratio_weight\n\n    # If no possible bins are good, make all possible bins minimally acceptable.\n    if not np.any(priorities[possible_bins] > -np.inf):\n        priorities[possible_bins] += 0.001\n        \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version introduces dynamic weighting and considers bin fill level.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = bins_remain_cap[0]  # Assuming all bins have the same capacity.\n\n    # Heuristic 1: Near Fit (Dynamic bonus based on fill level)\n    near_fit_threshold_low = 0.75\n    near_fit_threshold_high = 0.95\n    near_fit_bonus_max = 15.0\n\n    # Heuristic 2: Fragmentation Penalty (Adaptive based on item size)\n    fragmentation_penalty_exponent = 2\n    small_fragment_threshold = 0.1\n    large_fragment_penalty_factor = -5.0\n\n    # Heuristic 3: Complete Fill Bonus\n    complete_fill_bonus = 25.0\n\n    # Heuristic 4: Fill Level Preference (Encourage filling emptier bins first, but temper)\n    fill_level_preference_weight = 2.0\n\n    # Heuristic 5: Avoid Overfill (Strong Negative Priority)\n    overfill_penalty = -np.inf\n\n    valid_bins = bins_remain_cap > 0\n    if not np.any(valid_bins):\n        return priorities\n\n    possible_bins = bins_remain_cap >= item\n\n    for i, remaining_cap in enumerate(bins_remain_cap):\n        if remaining_cap < item:\n            priorities[i] = overfill_penalty\n            continue\n\n        # Complete Fill\n        if item == remaining_cap:\n            priorities[i] += complete_fill_bonus\n            continue #Short circuit to avoid other calculations\n\n        # Near Fit (Dynamic Bonus)\n        fill_ratio = item / remaining_cap\n        if near_fit_threshold_low <= fill_ratio <= near_fit_threshold_high:\n            # Scale bonus based on how close it is to the ideal near fit.\n            near_fit_bonus = near_fit_bonus_max * (1 - abs(fill_ratio - (near_fit_threshold_low + near_fit_threshold_high)/2) / ((near_fit_threshold_high - near_fit_threshold_low)/2))\n            priorities[i] += near_fit_bonus\n\n        # Fragmentation Penalty (Adaptive)\n        new_remaining = remaining_cap - item\n        if new_remaining > 0:\n            fragment_ratio = new_remaining / bin_capacity\n            if fragment_ratio < small_fragment_threshold:\n                # Scale penalty based on the item size.  Larger items causing fragmentation receive more penalty.\n                penalty = large_fragment_penalty_factor * (item / bin_capacity)\n                priorities[i] += penalty\n\n        # Fill Level Preference\n        priorities[i] += fill_level_preference_weight * (1 - (remaining_cap / bin_capacity))\n\n    # If no bins can contain the item (after applying fragmentation penalty), slightly raise score of potential bins for placement\n    if not np.any(priorities[possible_bins] > overfill_penalty):\n        priorities[possible_bins] += 0.001\n\n    return priorities\n\n### Analyze & experience\n- *   Comparing (1st) vs (20th), we see the best heuristic incorporates near-fit, fragmentation avoidance, capacity ratio, complete fill bonuses, and dynamic adjustments, while the worst only uses the inverse log of the item-to-bin capacity ratio.\n*   Comparing (2nd best) vs (second worst), which are both identical with the best one, we see the second best is identical to the best, and second worst is identical to the worst.\n*   Comparing (1st) vs (2nd), we see there is no difference between them.\n*   Comparing (3rd) vs (4th), we see the 3rd has same code with 1st and 2nd. 4th version uses a different approach in calculating fragmentation penalty. It also normalizes remaining capacity.\n*   Comparing (second worst) vs (worst), we see there is no difference between them.\n*   Comparing (9th) vs (10th), they are identical.\n*   Comparing (16th) vs (17th), they are identical.\n\nOverall: The better heuristics are characterized by a comprehensive consideration of factors like near-fit, fragmentation, capacity utilization, and employ dynamic adjustments based on the current state of the bin packing process. Adaptive weighting and penalties seem crucial. Simpler heuristics focusing solely on ratios perform poorly.\n- \nOkay, here's a refined approach to \"Current Self-Reflection\" for heuristic design, focusing on actionable advice and avoiding common pitfalls, tailored for optimizing bin packing heuristics:\n\n*   **Keywords:** Multifaceted, dynamic weighting, fragmentation avoidance, near-fit, complete fill, parameter optimization, edge case handling.\n\n*   **Advice:** Design heuristics using a weighted combination of factors like near-fit, minimizing fragmentation, aiming for complete fills, and current fill level. Implement dynamic weighting that adjusts based on the item being packed and the current state of the bins.\n\n*   **Avoid:** Over-reliance on simplistic ratios or single-factor approaches. Neglecting edge cases. Static weighting schemes.\n\n*   **Explanation:** Effective heuristics balance multiple objectives. Dynamic weighting allows the heuristic to adapt to different scenarios. Experimentation is essential to find optimal default parameter values, providing a solid base for parameter adjustment and improvement.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}