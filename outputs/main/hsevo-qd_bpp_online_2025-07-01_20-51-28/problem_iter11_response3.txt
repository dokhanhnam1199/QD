```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic combining near-fit, fragmentation, and first-fit."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    near_fit_threshold = 0.9
    near_fit_bonus = 15.0
    fragmentation_penalty = -10.0
    complete_fill_bonus = 25.0
    first_fit_bonus = 5.0
    small_fragment_threshold = 0.1

    avg_bin_capacity = np.mean(bins_remain_cap) if num_bins > 0 else 1.0
    if avg_bin_capacity < 0.3:
        near_fit_threshold = 0.85
    elif avg_bin_capacity > 0.7:
        near_fit_threshold = 0.95

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item

    first_possible_bin_index = -1
    for i in range(num_bins):
        if bins_remain_cap[i] >= item:
            first_possible_bin_index = i
            break

    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = -np.inf
            continue

        if item / remaining_cap >= near_fit_threshold:
            priorities[i] += near_fit_bonus

        if item == remaining_cap:
            priorities[i] += complete_fill_bonus

        new_remaining = remaining_cap - item
        if new_remaining > 0:
            fragment_ratio = new_remaining / bins_remain_cap[0]
            if fragment_ratio < small_fragment_threshold:
                priorities[i] += fragmentation_penalty

        if i == first_possible_bin_index and first_possible_bin_index != -1:
            priorities[i] += first_fit_bonus

    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001

    return priorities
```
