```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fits (capacity >= item size)
    and prefers to fill bins as much as possible without overflowing.
    If no bins can accommodate the item, it penalizes nearly full bins the least.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item.
    can_fit = bins_remain_cap >= item
    if np.any(can_fit):
        #Prioritize the bins with the least remaining space after putting the item there, to fill them better
        remaining_space = bins_remain_cap - item
        priorities[can_fit] = -remaining_space[can_fit]

    else:
        # If no bin can fit, prioritize nearly full bins (least waste if we were to open a new one instead)

        priorities = bins_remain_cap # prioritize small empty space


    return priorities
```
