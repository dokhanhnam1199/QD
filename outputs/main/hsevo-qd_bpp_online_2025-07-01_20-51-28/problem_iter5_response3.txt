```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering near fit, fragmentation, and fill level."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap[0]
    near_fit_threshold = 0.8
    near_fit_bonus = 12.0
    small_fragment_threshold = 0.1
    large_fragment_penalty = -6.0
    complete_fill_bonus = 22.0
    fill_level_weight = 1.5
    overfill_penalty = -np.inf

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item

    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = overfill_penalty
            continue

        if item == remaining_cap:
            priorities[i] += complete_fill_bonus
            continue

        fill_ratio = item / remaining_cap
        if fill_ratio >= near_fit_threshold:
            near_fit_bonus_scaled = near_fit_bonus * (fill_ratio - near_fit_threshold) / (1 - near_fit_threshold) if fill_ratio < 1 else near_fit_bonus
            priorities[i] += near_fit_bonus_scaled

        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bin_capacity) < small_fragment_threshold:
            penalty = large_fragment_penalty * (item / bin_capacity)
            priorities[i] += penalty
            
        priorities[i] += fill_level_weight * (1 - (remaining_cap / bin_capacity))

    if not np.any(priorities[possible_bins] > overfill_penalty):
        priorities[possible_bins] += 0.001

    return priorities
```
