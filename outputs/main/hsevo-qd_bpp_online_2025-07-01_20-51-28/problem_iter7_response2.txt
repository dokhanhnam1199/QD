import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                near_fit_threshold: float = 0.4674718504515387,
                near_fit_bonus: float = 60.84478031577849,
                fragmentation_penalty_exponent: int = 4.431989848409911,
                small_fragment_threshold: float = 0.4161263990481148,
                large_fragment_penalty: float = -87.36108719691698,
                complete_fill_bonus: float = 3.2824247235928805,
                raise_potential_bins_score: float = 0.6952693098250062) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        near_fit_threshold: Threshold for near fit heuristic.
        near_fit_bonus: Bonus for near fit heuristic.
        fragmentation_penalty_exponent: Exponent for fragmentation penalty.
        small_fragment_threshold: Threshold for small fragment.
        large_fragment_penalty: Penalty for large fragment.
        complete_fill_bonus: Bonus for complete fill.
        raise_potential_bins_score: Score for raising potential bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Handle cases where remaining capacity is zero to avoid division by zero and also not allow packing to filled bins
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities
    
    
    possible_bins = bins_remain_cap >= item
    
    for i, remaining_cap in enumerate(bins_remain_cap):
        
        if remaining_cap < item: # Disqualify bins that are too small
            priorities[i] = -np.inf # Significantly low priority (lower than zero) to disallow item placement
            continue
        

        # Near Fit
        if item / remaining_cap >= near_fit_threshold:
            priorities[i] += near_fit_bonus
        
        if item == remaining_cap:
            priorities[i] += complete_fill_bonus
        

        # Fragmentation
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bins_remain_cap[0]) < small_fragment_threshold:  #Compare against a base capacity
                priorities[i] += large_fragment_penalty # Severe penalty

    # If no bins can contain the item (after applying fragmentation penalty), slightly raise score of potential bins for placement
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += raise_potential_bins_score

    return priorities
