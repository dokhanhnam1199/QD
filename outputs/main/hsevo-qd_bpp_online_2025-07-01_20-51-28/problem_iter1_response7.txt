```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: "Near Fit" - Prefer bins where the item fills a significant portion
    #  but doesn't overflow. We'll add a penalty for overflow later.
    near_fit_threshold = 0.9  # Adjust this to fine-tune "nearness"
    near_fit_bonus = 10.0 # Significant boost for near fits

    # Heuristic 2: Avoid Fragmentation - Penalize bins that would become highly fragmented
    fragmentation_penalty_exponent = 2 # Higher exponent means stronger penalty for fragmentation
    small_fragment_threshold = 0.1 # What counts as a small fragment relative to bin size?
    large_fragment_penalty = -5.0 # Subtract points for producing a very small remaining fragment
    
    # Heuristic 3: Try to completely fill
    complete_fill_bonus = 20.0

    # Handle cases where remaining capacity is zero to avoid division by zero and also not allow packing to filled bins
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities
    
    
    possible_bins = bins_remain_cap >= item
    
    for i, remaining_cap in enumerate(bins_remain_cap):
        
        if remaining_cap < item: # Disqualify bins that are too small
            priorities[i] = -np.inf # Significantly low priority (lower than zero) to disallow item placement
            continue
        

        # Near Fit
        if item / remaining_cap >= near_fit_threshold:
            priorities[i] += near_fit_bonus
        
        if item == remaining_cap:
            priorities[i] += complete_fill_bonus
        

        # Fragmentation
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bins_remain_cap[0]) < small_fragment_threshold:  #Compare against a base capacity
                priorities[i] += large_fragment_penalty # Severe penalty

    # If no bins can contain the item (after applying fragmentation penalty), slightly raise score of potential bins for placement
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001

    return priorities
```
