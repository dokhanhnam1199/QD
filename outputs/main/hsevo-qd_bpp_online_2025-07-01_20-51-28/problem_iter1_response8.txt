```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate the remaining capacity after adding the item
            remaining_capacity = cap - item

            # Prioritize bins that can fit the item perfectly or with minimal waste.
            # Heuristic 1: Favor bins with smaller remaining capacity
            priority_remaining_cap = -remaining_capacity

            # Heuristic 2: Consider item as a fraction of available space to capture density
            priority_density = item / cap

            # Heuristic 3: Give higher priority to bins with remaining capacity closest to a predefined target size (e.g., average item size)
            # target_remaining = 0.2 # Example: target remaining capacity is 20% of bin size (assuming bin size is 1)
            # priority_target = -abs(remaining_capacity - target_remaining)
            priority_target = 0 # disable priority_target for now

            # Heuristic 4: If item is a significant portion of the bin, slightly de-prioritize to potentially consolidate smaller items later
            portion = item/1.0 # assuming bin_size ==1, otherwise normalize
            if portion > 0.7 :
                penalty = -0.1
            else:
                penalty = 0

            # Combine the heuristics with weights. Experiment with weights to fine-tune performance.
            priorities[i] = 0.6 * priority_remaining_cap + 0.3 * priority_density + 0.1 * priority_target + penalty # adjust weights based on observed packing

        else:
            # If item doesn't fit, assign a very low priority so that other bins are tried first.
            priorities[i] = -np.inf
    return priorities
```
