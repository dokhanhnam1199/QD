```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority array with zeros.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask] #remaining fraction after placing the item

    # Penalize bins that cannot fit the item significantly
    no_fit_mask = ~fit_mask
    priorities[no_fit_mask] = -np.inf  # Assign very low priority if the item doesn't fit

    # Normalize the valid priorities between 0 and 1.
    valid_priorities = priorities[priorities >= 0] # only consider the fit_mask
    if len(valid_priorities) > 0:
        priorities[fit_mask] = (priorities[fit_mask] - np.min(valid_priorities)) / (np.max(valid_priorities) - np.min(valid_priorities)) if (np.max(valid_priorities) - np.min(valid_priorities)) > 0 else 0 #rescale 0 to 1

    return priorities
```
