```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A more adaptive priority function for online bin packing, combining near-fit,
    fragmentation avoidance, fill level, and dynamic weight adjustments.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # --- Parameter Defaults (Tunable) ---
    near_fit_threshold = 0.95  # Increased threshold
    near_fit_bonus = 15.0  # Increased bonus
    small_fragment_threshold = 0.1
    large_fragment_penalty = -7.0  # Increased penalty
    complete_fill_bonus = 25.0  # Increased bonus
    capacity_ratio_weight = 3.0  # Increased weight
    bin_utilization_weight = 1.5
    empty_bin_penalty = -10.0

    # --- Dynamic Adjustments ---
    avg_bin_capacity = np.mean(bins_remain_cap[bins_remain_cap > 0]) if np.any(bins_remain_cap > 0) else 1.0 # Avoid division by zero
    total_items_size = np.sum(item) if isinstance(item, np.ndarray) else item
    
    # Early stage: Emphasize near-fit and complete fills
    if np.sum(bins_remain_cap) > 3 * total_items_size * avg_bin_capacity:
        near_fit_bonus *= 1.2
        complete_fill_bonus *= 1.3
    # Late stage: Emphasize fragmentation avoidance
    elif np.sum(bins_remain_cap) < total_items_size * avg_bin_capacity:
        large_fragment_penalty *= 1.5

    # --- Calculate Priorities ---
    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = -np.inf  # Impossible to fit
            continue
        
        # Complete Fill Bonus
        if item == remaining_cap:
            priorities[i] += complete_fill_bonus
            continue  # Skip further calculations if perfectly filled.

        # Near Fit
        near_fit_ratio = item / remaining_cap
        if near_fit_ratio >= near_fit_threshold:
            priorities[i] += near_fit_bonus

        # Fragmentation
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / avg_bin_capacity) < small_fragment_threshold:
            priorities[i] += large_fragment_penalty

        # Capacity Ratio
        priorities[i] += near_fit_ratio * capacity_ratio_weight

        # Bin Utilization: Prefer bins that are already somewhat full
        bin_utilization = (bins_remain_cap[i] - remaining_cap) / avg_bin_capacity if avg_bin_capacity > 0 else 0
        priorities[i] += bin_utilization * bin_utilization_weight
    
    # Empty Bin Penalty: Discourage using empty bins unless necessary
    empty_bins = bins_remain_cap == bins_remain_cap.max() # identify empty bins (or largest)
    if np.any(empty_bins):
        priorities[empty_bins] += empty_bin_penalty

    # --- Handle Edge Cases: If no 'good' bins, make possible bins acceptable ---
    possible_bins = bins_remain_cap >= item
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001
    
    return priorities
```
