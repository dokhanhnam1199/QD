```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_capacity = bins_remain_cap[0] # Assuming all bins have the same capacity
    
    # Heuristic 1: "Near Fit" - Prefer bins where the item fills a significant portion
    near_fit_threshold = 0.85  # Slightly adjusted from 0.9
    near_fit_bonus = 12.0       # Increased bonus

    # Heuristic 2: Avoid Fragmentation - Penalize bins that would become highly fragmented
    fragmentation_penalty_exponent = 2.5 # Increased penalty
    small_fragment_threshold = 0.1 # Small fragment definition
    large_fragment_penalty = -7.0  # Increased penalty

    # Heuristic 3: Try to completely fill
    complete_fill_bonus = 25.0  # Increased bonus

    # Heuristic 4: Balance Load - Distribute items across bins
    load_balance_factor = 2.0  # Scales the remaining capacity for load balancing
    
    # Heuristic 5: Consider item size relative to bin capacity
    item_size_penalty_threshold = 0.75 # if item is bigger than this ratio, penalize
    large_item_penalty = -3.0

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item

    for i, remaining_cap in enumerate(bins_remain_cap):

        if remaining_cap < item:  # Disqualify bins that are too small
            priorities[i] = -np.inf
            continue

        # Near Fit
        if item / remaining_cap >= near_fit_threshold:
            priorities[i] += near_fit_bonus

        # Complete Fill
        if item == remaining_cap:
            priorities[i] += complete_fill_bonus

        # Fragmentation
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bin_capacity) < small_fragment_threshold:
            priorities[i] += large_fragment_penalty

        # Load Balancing (Prioritize emptier bins)
        priorities[i] += load_balance_factor * (remaining_cap / bin_capacity)

        #Large item penalty
        if item/bin_capacity > item_size_penalty_threshold:
            priorities[i] += large_item_penalty

    # If no bins can contain the item (after applying fragmentation penalty), slightly raise score of potential bins for placement
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001

    return priorities
```
