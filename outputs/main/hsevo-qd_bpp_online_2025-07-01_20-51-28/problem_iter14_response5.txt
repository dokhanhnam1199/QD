```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines near-fit, fragmentation avoidance, capacity ratio, complete fill bonus, and adaptive weighting."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_capacity = bins_remain_cap[0] if num_bins > 0 else 1.0 # Avoid division by zero

    near_fit_threshold = 0.9
    near_fit_bonus_base = 10.0
    small_fragment_threshold = 0.1
    large_fragment_penalty_base = -5.0
    complete_fill_bonus_base = 20.0
    utilization_penalty_exponent = 1
    high_utilization_threshold = 0.75
    high_utilization_penalty_factor = -2.0
    empty_bin_bonus_base = 5.0

    near_fit_bonus = near_fit_bonus_base * (1 + (1 - item / bin_capacity))
    large_fragment_penalty = large_fragment_penalty_base * (1 + (item / bin_capacity))
    complete_fill_bonus = complete_fill_bonus_base * (1 + (item / bin_capacity))
    
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item

    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = -np.inf
            continue

        # Near Fit
        if item / remaining_cap >= near_fit_threshold:
            priorities[i] += near_fit_bonus

        # Complete Fill
        if item == remaining_cap:
            priorities[i] += complete_fill_bonus

        # Fragmentation
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bin_capacity) < small_fragment_threshold:
            priorities[i] += large_fragment_penalty

        # Utilization Balancing
        utilization = 1 - (remaining_cap / bin_capacity)
        if utilization >= high_utilization_threshold:
            priorities[i] += high_utilization_penalty_factor * (utilization ** utilization_penalty_exponent)
            
        # Empty Bin Bonus
        if remaining_cap == bin_capacity:
            priorities[i] += empty_bin_bonus_base

    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001

    return priorities
```
