```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Heuristic 1: "Near Fit" - Prefer bins where the item fills a significant portion
    #  but doesn't overflow. We'll add a penalty for overflow later.
    near_fit_threshold_lower = 0.75  # Adjust this to fine-tune "nearness"
    near_fit_threshold_upper = 0.95
    near_fit_bonus = 15.0  # Significant boost for near fits

    # Heuristic 2: Avoid Fragmentation - Penalize bins that would become highly fragmented
    fragmentation_penalty_exponent = 2  # Higher exponent means stronger penalty for fragmentation
    small_fragment_threshold = 0.1  # What counts as a small fragment relative to bin size?
    large_fragment_penalty = -7.0  # Subtract points for producing a very small remaining fragment

    # Heuristic 3: Try to completely fill
    complete_fill_bonus = 25.0

    # Heuristic 4: Balance Utilization - Encourage filling bins somewhat evenly.
    utilization_std_penalty_factor = 2.0  # Penalize high standard deviation of bin utilization
    
    # Heuristic 5: Reward bins close to the item size, even if not a "near fit" strictly
    close_size_bonus_range = 0.2 # percentage range
    close_size_bonus = 5.0
    
    # Heuristic 6: Penalize bins that are already very full, to save space for potentially larger items later
    already_full_threshold = 0.2 #Remaining capacity threshold
    already_full_penalty = -3.0
    
    # Handle cases where remaining capacity is zero to avoid division by zero and also not allow packing to filled bins
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item

    # Calculate current utilization for the utilization heuristic
    current_utilization = (bins_remain_cap[0] - bins_remain_cap) / bins_remain_cap[0] # Assumes all bins are the same initial size

    for i, remaining_cap in enumerate(bins_remain_cap):

        if remaining_cap < item:  # Disqualify bins that are too small
            priorities[i] = -np.inf  # Significantly low priority (lower than zero) to disallow item placement
            continue

        # Near Fit
        fit_ratio = item / remaining_cap
        if near_fit_threshold_lower <= fit_ratio <= near_fit_threshold_upper:
            priorities[i] += near_fit_bonus

        if item == remaining_cap:
            priorities[i] += complete_fill_bonus
        
        # Close size bonus
        if remaining_cap >= item and remaining_cap <= item * (1 + close_size_bonus_range):
            priorities[i] += close_size_bonus

        # Fragmentation
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bins_remain_cap[0]) < small_fragment_threshold:  # Compare against a base capacity
            priorities[i] += large_fragment_penalty  # Severe penalty
            
        #Already Full Penalty
        if remaining_cap / bins_remain_cap[0] < already_full_threshold:
            priorities[i] += already_full_penalty

    # Balance Utilization - Penalize variance in utilization
    utilization_after_placement = current_utilization.copy()
    for i in range(num_bins):
        if possible_bins[i]:
           utilization_after_placement[i] = (bins_remain_cap[0] - (bins_remain_cap[i]-item)) / bins_remain_cap[0]

    utilization_std = np.std(utilization_after_placement)
    priorities -= utilization_std * utilization_std_penalty_factor

    # If no bins can contain the item (after applying fragmentation penalty), slightly raise score of potential bins for placement
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001

    return priorities
```
