```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, small_fragment_threshold: float = 0.47, 
                 large_fragment_penalty: float = -10.0, complete_fill_bonus: float = 38.0, 
                 capacity_ratio_weight: float = 0.1) -> np.ndarray:
    """Combines near-fit, fragmentation avoidance, and capacity ratio for bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    remaining_after_fit = bins_remain_cap - item
    
    # Near-fit bonus (avoiding small fragments)
    near_fit_bonus = (remaining_after_fit > 0) & (remaining_after_fit < small_fragment_threshold)
    priorities[near_fit_bonus] += complete_fill_bonus
    
    # Fragmentation penalty
    large_fragment = remaining_after_fit > item
    priorities[large_fragment] += large_fragment_penalty

    # Capacity ratio component
    capacity_ratios = item / bins_remain_cap
    priorities += capacity_ratio_weight * (1 - capacity_ratios)

    # Complete Fill Bonus
    complete_fill = remaining_after_fit == 0
    priorities[complete_fill] += complete_fill_bonus

    return priorities
```
