```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Adjust capacities to avoid division by zero and enhance responsiveness
    adjusted_capacities = bins_remain_cap + 1e-6  # Small epsilon to avoid division by zero
    
    # Calculate capacity ratios; penalize bins where item nearly fills them.
    capacity_ratios = item / adjusted_capacities
    
    # Penalize exceeding capacity by a large factor; if exceeds capacity make it the smallest priority.
    exceeds_capacity = item > bins_remain_cap
    capacity_ratios[exceeds_capacity] = 1e9

    
    # Invert and scale the ratios for a priority score. Smaller ratios (better fit) get higher scores.
    priorities = 1.0 / (capacity_ratios + 1e-6)

    # Emphasize nearly full bins:
    nearly_full = (item <= bins_remain_cap) & (bins_remain_cap - item <= 0.1)  # Define what is "nearly full" (e.g., remaining capacity < 0.1)
    priorities[nearly_full] *= 2.0 # Boost the priority of near-full bins

    # Greatly reduce priority for bins with no space.
    priorities[exceeds_capacity] = -1e9

    return priorities
```
