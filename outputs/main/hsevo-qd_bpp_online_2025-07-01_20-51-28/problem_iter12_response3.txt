```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function for online bin packing, combining near-fit, 
    fragmentation avoidance, capacity utilization, and dynamic adjustments.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # --- Parameter Defaults ---
    near_fit_threshold = 0.95
    near_fit_bonus = 15.0
    small_fragment_threshold = 0.15
    large_fragment_penalty = -7.5
    complete_fill_bonus = 25.0
    capacity_ratio_weight = 3.0
    bin_occupancy_weight = 1.5
    adapt_rate = 0.05

    # --- Valid Bin Check ---
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item

    # --- Dynamic Average Remaining Capacity ---
    avg_bin_capacity = np.mean(bins_remain_cap[valid_bins])

    # --- Scoring Loop ---
    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = -np.inf  # Impossible bin
            continue

        # --- Near Fit ---
        near_fit_ratio = item / remaining_cap
        if near_fit_ratio >= near_fit_threshold:
            priorities[i] += near_fit_bonus

        # --- Complete Fill ---
        if item == remaining_cap:
            priorities[i] += complete_fill_bonus

        # --- Fragmentation Avoidance ---
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / avg_bin_capacity) < small_fragment_threshold:
            priorities[i] += large_fragment_penalty

        # --- Capacity Ratio ---
        priorities[i] += near_fit_ratio * capacity_ratio_weight

        # --- Bin Occupancy ---
        occupancy_ratio = (bins_remain_cap[i] - remaining_cap) / bins_remain_cap[i] if bins_remain_cap[i] > 0 else 0
        priorities[i] += occupancy_ratio * bin_occupancy_weight

    # --- Handling No Good Bins ---
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001 # Give minimal acceptance

    return priorities
```
