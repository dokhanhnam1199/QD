```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Rule 1: If the item fits, prioritize bins with smallest remaining capacity (but still fit the item). Try to fill bins as much as possible.
    fits = bins_remain_cap >= item
    if np.any(fits):
        priorities[fits] = 1 / bins_remain_cap[fits]  # Inverse of remaining capacity

    # Rule 2: Penalize bins that don't fit (assign a very low priority)
    priorities[~fits] = -1e9  # Very low priority if the item doesn't fit

    # Rule 3: Give a small bonus to bins with a remaining capacity close to the item size
    close_fit = np.abs(bins_remain_cap - item)
    priorities[fits] += np.exp(-close_fit[fits]) # Bonus for a closer fit
    return priorities
```
