```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing Heuristic Enhancement
    # Prefer bins where the item fits comfortably but avoids excessive waste.
    # Penalize bins that are too full after placing the item
    # Reward bins that have enough space after placing the item.

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            remaining_space = cap - item

            #High priority for almost-full bins.
            priorities[i] = (item/cap) * 10

            # Prioritize lower fragmentation: slight preference for fitting somewhat snugly.
            priorities[i] += np.exp(-2*remaining_space)
        else:
            priorities[i] = -np.inf # Cannot fit

    # Boost priority for almost full, but valid placements

    return priorities
```
