import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                near_fit_threshold: float = 0.8892170912421444,
                near_fit_bonus: float = 12.7331365097305,
                fragmentation_penalty_exponent: float = 1.5641005514260153,
                small_fragment_threshold: float = 0.16255805696842351,
                large_fragment_penalty: float = -10.4530140557107,
                complete_fill_bonus: float = 21.90014940008904,
                first_fit_bonus: float = 6.301463924824955,
                no_potential_bins_bonus: float = 0.0008673650376100667) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates dynamic adaptation based on bin utilization
    and more nuanced fragmentation handling, along with a first-fit consideration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        near_fit_threshold: Threshold for considering a near fit.
        near_fit_bonus: Bonus for a near fit.
        fragmentation_penalty_exponent: Exponent for fragmentation penalty calculation.
        small_fragment_threshold: Threshold for considering a fragment small.
        large_fragment_penalty: Penalty for creating a small fragment.
        complete_fill_bonus: Bonus for completely filling a bin.
        first_fit_bonus: Bonus for placing in the first available bin.
        no_potential_bins_bonus: Small bonus if no bins can contain the item.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Bin Utilization Awareness: Adjust near_fit_threshold based on avg bin capacity
    avg_bin_capacity = np.mean(bins_remain_cap) if num_bins > 0 else 1.0 # avoid division by zero
    if avg_bin_capacity < 0.3:
      near_fit_threshold_adjusted = 0.85 # be more aggressive if bins are filling up
    elif avg_bin_capacity > 0.7:
      near_fit_threshold_adjusted = 0.95 # be stricter if bins are mostly empty
    else:
      near_fit_threshold_adjusted = near_fit_threshold


    # --- Heuristic Logic ---

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item

    first_possible_bin_index = -1
    for i in range(num_bins):
        if bins_remain_cap[i] >= item:
            first_possible_bin_index = i
            break

    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = -np.inf
            continue

        # Near Fit
        if item / remaining_cap >= near_fit_threshold_adjusted:
            priorities[i] += near_fit_bonus

        if item == remaining_cap:
            priorities[i] += complete_fill_bonus
            

        # Fragmentation - More nuanced penalty calculation
        new_remaining = remaining_cap - item
        if new_remaining > 0:
            fragment_ratio = new_remaining / bins_remain_cap[0]
            if fragment_ratio < small_fragment_threshold:
                priorities[i] += large_fragment_penalty  # Strong penalty

        # First Fit Preference (slight nudge, if applicable)
        if i == first_possible_bin_index and first_possible_bin_index != -1:
            priorities[i] += first_fit_bonus

    # If no bins can contain the item, slightly raise score of potential bins
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += no_potential_bins_bonus

    return priorities
