```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fills a significant, but not overwhelming, portion of the remaining capacity. It uses a combination of factors:
    1. How much of the bin's capacity will be filled. (item / bins_remain_cap)
    2. A bonus for bins where the item fits (bins_remain_cap > item).  This makes feasible bins more appealing.
    3. A penalty to bins where the item nearly fills the bin (preventing excessive fragmentation). This is achieved via an exponential term.
    4. A strong negative penalty to infeasible bins (where bins_remain_cap < item). This ensures that we don't even consider these.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Handle infeasible bins first with extremely low priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Ensure infeasible bins are never chosen

    # Calculate priority for feasible bins
    feasible_mask = ~infeasible_mask
    remaining_capacities = bins_remain_cap[feasible_mask]

    fill_ratios = item / remaining_capacities
    
    # Reward bins where item fits but not too snugly (prevent fragmentation)
    # The penalty should gradually decrease as the bins get less full.
    fragmentation_penalty = np.exp(5 * (fill_ratios - 0.9)) #significant penalty above 0.9

    # Apply a base priority based on fill ratio and discount the penalty
    base_priority = fill_ratios - 0.1 * fragmentation_penalty
    priorities[feasible_mask] = base_priority
    
    return priorities
```
