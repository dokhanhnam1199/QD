```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Heuristic 1: "Near Fit" - Prefer bins where the item fills a significant portion
    near_fit_threshold_upper = 0.98
    near_fit_threshold_lower = 0.7  # Increased lower bound for better fit
    near_fit_bonus = 15.0

    # Heuristic 2: Avoid Fragmentation - Penalize bins that would become highly fragmented
    fragmentation_penalty_exponent = 2
    small_fragment_threshold = 0.1
    large_fragment_penalty = -10.0  # Increased penalty
    
    # Heuristic 3: Try to completely fill
    complete_fill_bonus = 30.0

    # Heuristic 4: Balance Utilization - Reward bins with higher initial capacity
    utilization_reward_factor = 2.0
    
    # Heuristic 5: Item size based priority
    item_size_threshold = 0.3 #If item is bigger than 30% of bin size.
    big_item_penalty = -5 # Try to avoid putting big items into bins.

    # Handle cases where remaining capacity is zero
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item
    
    # Calculate initial capacity fractions (for utilization balancing)
    initial_capacity_fractions = bins_remain_cap / np.max(bins_remain_cap) # Normalize by maximum remaining capacity
    
    for i, remaining_cap in enumerate(bins_remain_cap):
        
        if remaining_cap < item:
            priorities[i] = -np.inf
            continue

        # Near Fit (with tighter bounds)
        if near_fit_threshold_lower <= (item / remaining_cap) <= near_fit_threshold_upper:
            priorities[i] += near_fit_bonus
        
        # Complete Fill
        if item == remaining_cap:
            priorities[i] += complete_fill_bonus
        
        # Fragmentation
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / np.max(bins_remain_cap)) < small_fragment_threshold:  # Compare against max capacity
            priorities[i] += large_fragment_penalty
        
        # Balance Utilization - Scale reward by remaining capacity
        priorities[i] += initial_capacity_fractions[i] * utilization_reward_factor

        # Big item penalty
        if item / np.max(bins_remain_cap) > item_size_threshold:
            priorities[i] += big_item_penalty
            
    # Slightly raise score of potential bins if no bins are suitable
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001
    
    return priorities
```
