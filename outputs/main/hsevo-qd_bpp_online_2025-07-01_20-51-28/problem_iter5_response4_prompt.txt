{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines near-fit, fragmentation avoidance, and a capacity ratio to prioritize bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    near_fit_threshold = 0.9\n    near_fit_bonus = 10.0\n    small_fragment_threshold = 0.1\n    large_fragment_penalty = -5.0\n    complete_fill_bonus = 20.0\n    capacity_ratio_weight = 2.0  # Weight for the capacity ratio\n\n    valid_bins = bins_remain_cap > 0\n    if not np.any(valid_bins):\n        return priorities\n    \n    possible_bins = bins_remain_cap >= item\n\n    for i, remaining_cap in enumerate(bins_remain_cap):\n        if remaining_cap < item:\n            priorities[i] = -np.inf\n            continue\n\n        # Near Fit\n        if item / remaining_cap >= near_fit_threshold:\n            priorities[i] += near_fit_bonus\n        \n        if item == remaining_cap:\n            priorities[i] += complete_fill_bonus\n\n        # Fragmentation\n        new_remaining = remaining_cap - item\n        if new_remaining > 0 and (new_remaining / bins_remain_cap[0]) < small_fragment_threshold:\n            priorities[i] += large_fragment_penalty\n\n        # Capacity Ratio - more continuous measure of suitability\n        priorities[i] += (item / remaining_cap) * capacity_ratio_weight\n\n    if not np.any(priorities[possible_bins] > -np.inf):\n        priorities[possible_bins] += 0.001\n        \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic considers \"Near Fit\", \"Fragmentation Avoidance\", and \"Complete Fill\" with specific bonuses and penalties, while the worst only uses a log ratio of item size to remaining capacity. Comparing (2nd best) vs (second worst), we see the same pattern - the more complex heuristic with defined strategies outperforms the simplistic ratio-based one. Comparing (1st) vs (2nd), we see that the first three heuristics are identical. Comparing (3rd) vs (4th) the major difference is heuristic 4 introduces `capacity_ratio_weight` and calculation for  `priorities[i] += (item / remaining_cap) * capacity_ratio_weight` to have a more continuous measure of suitability. Comparing (second worst) vs (worst), all three are identical. Comparing (17th) vs (18th), (17th) heuristic is more complex, by consider \"Near Fit\", \"Fragmentation Avoidance\", \"Complete Fill\", \"Fill Level Preference\", \"Avoid Overfill\", which gives better result. Overall: The better heuristics incorporate multiple factors, using bonuses and penalties to guide the item placement process towards desired outcomes (e.g., minimizing fragmentation, maximizing near fits). Simpler approaches relying solely on ratios are less effective. Adding dynamic weights and fill level preferences improves performance. The best heuristics also handle edge cases gracefully, such as when no valid bins are available.\n- \nOkay, let's refine \"Current Self-Reflection\" to be more effective for heuristic design.\n\nHere's a breakdown:\n\n*   **Keywords:** State-awareness, dynamic adaptation, problem-specific tuning, factor interaction analysis.\n\n*   **Advice:** Instead of just stating \"adjust weights,\" focus on *how* to adjust them. Think about learning mechanisms (e.g., reinforcement learning, adaptive search) to guide weight tuning based on observed performance and the state of the packing. Also, consider how different factors interact with each other and what happens if those interactions go wrong.\n\n*   **Avoid:** Vague recommendations like \"handle edge cases explicitly.\"\n\n*   **Explanation:** A good heuristic design involves actively observing its performance in different conditions, analyzing its failures to learn better adjustment strategies for parameters, and understanding factor dependencies.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}