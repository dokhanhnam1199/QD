```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, incorporating adaptive weights and multiple factors.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)
    
    # --- Hyperparameters with reasonable defaults ---
    near_fit_threshold = 0.95
    near_fit_bonus = 15.0
    small_fragment_threshold = 0.1
    large_fragment_penalty = -7.0
    complete_fill_bonus = 25.0
    capacity_ratio_weight = 3.0
    bin_usage_weight = 1.5  # Weight to encourage using already opened bins
    scarcity_penalty = -2.0 # Penalize using bins if there is a lot of space

    # --- Adaptive Weighting based on remaining capacity ---
    total_remaining_capacity = np.sum(bins_remain_cap[bins_remain_cap > 0])
    average_remaining_capacity = total_remaining_capacity / n_bins if n_bins > 0 else 0.0
    
    # If overall remaining capacity is high, reduce near-fit bonus and increase fragmentation penalty
    if total_remaining_capacity > 0.75 * n_bins: 
        near_fit_bonus *= 0.75
        large_fragment_penalty *= 1.25
        scarcity_penalty *= 0.5
    #If overall remaining capacity is low, increase near_fit bonus and reduce fragmentation penalty
    elif total_remaining_capacity < 0.25 * n_bins:
        near_fit_bonus *= 1.25
        large_fragment_penalty *= 0.75
        scarcity_penalty *= 1.5

    valid_bins = bins_remain_cap > 0
    possible_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    # --- Calculate bin usage score ---
    bin_usage_score = np.zeros_like(bins_remain_cap, dtype=float)
    non_empty_bins_count = np.sum(bins_remain_cap < 1.0)
    if non_empty_bins_count > 0 :
        bin_usage_score[bins_remain_cap < 1.0] = bin_usage_weight # Encourages using already opened bins.


    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = -np.inf
            continue

        # Near Fit Score
        near_fit_ratio = item / remaining_cap
        if near_fit_ratio >= near_fit_threshold:
            priorities[i] += near_fit_bonus

        if item == remaining_cap:
            priorities[i] += complete_fill_bonus
            
        # Fragmentation Score
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / average_remaining_capacity) < small_fragment_threshold:
            priorities[i] += large_fragment_penalty

        # Capacity Ratio Score
        priorities[i] += near_fit_ratio * capacity_ratio_weight
        
        # Bin Usage Score
        priorities[i] += bin_usage_score[i]

        #Scarcity Penalty
        if remaining_cap > average_remaining_capacity:
             priorities[i] += scarcity_penalty

    # If no possible bins are good, make all possible bins minimally acceptable.
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001

    return priorities
```
