```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines near fit, fragmentation, and fill level for bin priority."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap[0]  # Assume same capacity
    near_fit_bonus = 10.0
    fragment_penalty = -5.0
    fill_preference_weight = 2.0
    overfill_penalty = -np.inf
    small_fragment_threshold = 0.2

    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = overfill_penalty
            continue

        if item == remaining_cap:
            priorities[i] = 20.0  # Complete fill bonus
            continue

        new_remaining = remaining_cap - item
        fill_ratio = item / remaining_cap

        if 0.75 <= fill_ratio <= 0.95:
            priorities[i] += near_fit_bonus

        if new_remaining > 0:
            fragment_ratio = new_remaining / bin_capacity
            if fragment_ratio < small_fragment_threshold:
                priorities[i] += fragment_penalty

        priorities[i] += fill_preference_weight * (1 - (remaining_cap / bin_capacity))

    #If no bins can contain the item, slightly raise score of potential bins for placement
    possible_bins = bins_remain_cap >= item
    if not np.any(priorities[possible_bins] > overfill_penalty):
        priorities[possible_bins] += 0.001
    return priorities
```
