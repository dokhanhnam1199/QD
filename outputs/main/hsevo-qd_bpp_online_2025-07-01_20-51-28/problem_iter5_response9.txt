```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines near fit, fragmentation avoidance, complete fill, and fill level preference with dynamic weighting."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap[0]

    near_fit_bonus_max = 15.0
    small_fragment_threshold = 0.1
    large_fragment_penalty_factor = -5.0
    complete_fill_bonus = 25.0
    fill_level_preference_weight = 2.0
    overfill_penalty = -np.inf

    possible_bins = bins_remain_cap >= item

    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = overfill_penalty
            continue

        if item == remaining_cap:
            priorities[i] += complete_fill_bonus
            continue

        fill_ratio = item / remaining_cap
        if 0.75 <= fill_ratio <= 0.95:
            near_fit_bonus = near_fit_bonus_max * (1 - abs(fill_ratio - 0.85) / 0.1)
            priorities[i] += near_fit_bonus

        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bin_capacity) < small_fragment_threshold:
            penalty = large_fragment_penalty_factor * (item / bin_capacity)
            priorities[i] += penalty

        priorities[i] += fill_level_preference_weight * (1 - (remaining_cap / bin_capacity))

    if not np.any(priorities[possible_bins] > overfill_penalty):
        priorities[possible_bins] += 0.001

    return priorities
```
