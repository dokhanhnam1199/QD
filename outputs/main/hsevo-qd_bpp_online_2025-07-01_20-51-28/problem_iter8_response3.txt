```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines near-fit, fragmentation, and fill level considerations."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap[0]

    near_fit_bonus_max = 15.0
    frag_penalty_factor = -5.0
    fill_level_weight = 2.0
    overfill_penalty = -np.inf

    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = overfill_penalty
            continue

        if item == remaining_cap:
            priorities[i] = 25.0 # Complete fill
            continue

        new_remaining = remaining_cap - item
        fill_ratio = item / remaining_cap

        # Near-fit bonus
        if 0.75 <= fill_ratio <= 0.95:
            near_fit_bonus = near_fit_bonus_max * (1 - abs(fill_ratio - 0.85) / 0.1)
            priorities[i] += near_fit_bonus

        # Fragmentation penalty
        if new_remaining > 0 and new_remaining / bin_capacity < 0.1:
            penalty = frag_penalty_factor * (item / bin_capacity)
            priorities[i] += penalty

        # Fill-level preference
        priorities[i] += fill_level_weight * (1 - (remaining_cap / bin_capacity))

    possible_bins = bins_remain_cap >= item
    if not np.any(priorities[possible_bins] > overfill_penalty):
        priorities[possible_bins] += 0.001

    return priorities
```
