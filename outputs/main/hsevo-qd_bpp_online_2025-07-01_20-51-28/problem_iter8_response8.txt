```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines near-fit, fragmentation, fill-level, adaptively weighted."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = bins_remain_cap.max()

    near_fit_bonus_max = 15.0
    frag_penalty_factor = -5.0
    fill_pref_weight = 2.0
    overfill_penalty = -np.inf

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item

    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = overfill_penalty
            continue

        if item == remaining_cap:
            priorities[i] += 25.0
            continue

        fill_ratio = item / remaining_cap
        near_fit_threshold_low = 0.70
        near_fit_threshold_high = 0.90
        if near_fit_threshold_low <= fill_ratio <= near_fit_threshold_high:
            near_fit_bonus = near_fit_bonus_max * (1 - abs(fill_ratio - (near_fit_threshold_low + near_fit_threshold_high)/2) / ((near_fit_threshold_high - near_fit_threshold_low)/2))
            priorities[i] += near_fit_bonus

        new_remaining = remaining_cap - item
        if new_remaining > 0:
            frag_ratio = new_remaining / bin_capacity
            small_frag_threshold = 0.1
            if frag_ratio < small_frag_threshold:
                penalty = frag_penalty_factor * (item / bin_capacity) * (1 - remaining_cap / bin_capacity) #Adapt penalty based on remain cap
                priorities[i] += penalty

        priorities[i] += fill_pref_weight * (1 - (remaining_cap / bin_capacity))

    if not np.any(priorities[possible_bins] > overfill_penalty):
        priorities[possible_bins] += 0.001

    return priorities
```
