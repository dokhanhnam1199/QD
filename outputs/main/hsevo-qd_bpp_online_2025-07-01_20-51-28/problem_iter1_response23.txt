```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            # Prioritize bins that can fit the item
            priorities[i] = (capacity - item) / capacity  # Remaining space ratio, smaller is better, so closer to 0 means a good fit. But, since we need high priority: 1- (capacity - item)/capacity.

            #add bonus to bins that nearly fill the remaining space
            nearly_full_bonus = np.exp(-10*(capacity - item)/item)
            priorities[i]+=nearly_full_bonus

        else:
            # Negative priority for bins that cannot fit
            priorities[i] = -1e9  # Very low priority, practically impossible

    return priorities
```
