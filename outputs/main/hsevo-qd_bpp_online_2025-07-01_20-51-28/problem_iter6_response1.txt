```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Heuristic 1: "Near Fit" - Prefer bins where the item fills a significant portion
    near_fit_threshold_low = 0.75  # Wider range for near fit
    near_fit_threshold_high = 0.95
    near_fit_bonus = 15.0

    # Heuristic 2: Avoid Fragmentation - Penalize bins that would become highly fragmented
    fragmentation_penalty_exponent = 2
    small_fragment_threshold = 0.1
    large_fragment_penalty = -7.0

    # Heuristic 3: Try to completely fill
    complete_fill_bonus = 25.0

    # Heuristic 4: Balance bins - discourage using bins that are already very full or very empty.
    # Middle ground is good, promote usage for these bins
    middle_utilization_bonus = 5.0
    utilization_low = 0.2  # Target for promoting mid-utilization
    utilization_high = 0.8

    # Heuristic 5: Number of possible placements. If few options available, prioritize more to allow flexibility later.
    desperation_bonus = 3.0

    # Handle cases where remaining capacity is zero
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities

    possible_bins = bins_remain_cap >= item
    num_possible = np.sum(possible_bins)

    for i, remaining_cap in enumerate(bins_remain_cap):

        if remaining_cap < item:
            priorities[i] = -np.inf
            continue

        # Near Fit (expanded range)
        if near_fit_threshold_low <= item / remaining_cap <= near_fit_threshold_high:
            priorities[i] += near_fit_bonus

        if item == remaining_cap:
            priorities[i] += complete_fill_bonus

        # Fragmentation
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bins_remain_cap[0]) < small_fragment_threshold:
            priorities[i] += large_fragment_penalty

        # Middle utilization
        current_utilization = (bins_remain_cap[0] - remaining_cap) / bins_remain_cap[0] #Assumes bins have same capacity
        if utilization_low <= current_utilization <= utilization_high:
            priorities[i] += middle_utilization_bonus

    # Desperation bonus
    if 0 < num_possible <= num_bins/4: # Apply bonus only if the number of possible bins is quite small
        priorities[possible_bins] += desperation_bonus

    # If no bins can contain the item, slightly raise score of potential bins for placement
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001

    return priorities
```
