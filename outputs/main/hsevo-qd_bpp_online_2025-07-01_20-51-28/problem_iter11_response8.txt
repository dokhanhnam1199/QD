```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using near-fit, fragmentation, and capacity ratio."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Near-fit parameters
    near_fit_threshold = 0.8
    near_fit_bonus_base = 10.0

    # Fragmentation penalty parameters
    small_fragment_threshold = 0.2
    large_fragment_penalty_base = -5.0

    # Capacity ratio weight
    capacity_ratio_weight = 2.0

    # Iterate through bins and calculate priorities
    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = -np.inf  # Disqualify bins that can't fit the item
            continue

        # Near-fit bonus
        near_fit_ratio = item / remaining_cap
        if near_fit_ratio >= near_fit_threshold:
            priorities[i] += near_fit_bonus_base * (near_fit_ratio - near_fit_threshold) / (1 - near_fit_threshold)

        # Fragmentation penalty
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bins_remain_cap[0]) < small_fragment_threshold:
            priorities[i] += large_fragment_penalty_base * (small_fragment_threshold - (new_remaining / bins_remain_cap[0])) / small_fragment_threshold

        # Capacity ratio score
        priorities[i] += (item / remaining_cap) * capacity_ratio_weight

    return priorities
```
