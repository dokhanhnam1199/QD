```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Initialize very small constant to avoid division by zero
    epsilon = 1e-9

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate the waste if item is added to the bin
            waste = cap - item

            # A bin closer to fully utilized is prioritized
            # Penalize the cases where waste is very large. The higher the exponent, the stronger is the effect.
            priorities[i] = (1 / (waste + epsilon)) - (waste**3)


            # Small adjustment for nearly full bins. Bins that are very very close to the item size have best priority
            nearly_full_threshold = item*0.01  # Adjust threshold as needed
            if waste <= nearly_full_threshold:
              priorities[i] += 10 # Increase the chance that small items get stacked on each other

        else:
            priorities[i] = -np.inf  # Cannot add to bin
    #Avoid too many -inf, try a place it a new one
    if np.all(priorities == -np.inf):
      priorities = np.ones_like(bins_remain_cap, dtype=float)
      return priorities
    # Normalizes to be in range 0,1 if needed
    min_priority = np.min(priorities[priorities != -np.inf])
    max_priority = np.max(priorities[priorities != -np.inf])
    priorities[priorities != -np.inf] = (priorities[priorities != -np.inf] - min_priority)/(max_priority - min_priority+epsilon)
    return priorities
```
