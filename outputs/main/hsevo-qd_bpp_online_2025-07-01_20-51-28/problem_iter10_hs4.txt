import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, near_fit_threshold: float = 0.07496424015040382, near_fit_bonus: float = 71.49321103907742,
                 small_fragment_threshold: float = 0.13139814041294562, large_fragment_penalty: float = -15.769590643338613,
                 complete_fill_bonus: float = 40.39426001198173, capacity_ratio_weight: float = 0.4405686970211248) -> np.ndarray:
    """Combines near-fit, fragmentation avoidance, capacity ratio, with handling for full bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities
    
    possible_bins = bins_remain_cap >= item

    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = -np.inf
            continue

        # Near Fit
        if item / remaining_cap >= near_fit_threshold:
            priorities[i] += near_fit_bonus
        
        if item == remaining_cap:
            priorities[i] += complete_fill_bonus

        # Fragmentation
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bins_remain_cap[0]) < small_fragment_threshold:
            priorities[i] += large_fragment_penalty

        # Capacity Ratio
        priorities[i] += (item / remaining_cap) * capacity_ratio_weight

    # If no possible bins are good, make all possible bins minimally acceptable.
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001
        
    return priorities
