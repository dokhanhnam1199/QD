```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a combination of remaining capacity and a "near-miss" bonus.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = bins_remain_cap[can_fit] - item # Remaining capacity *after* packing. smaller is better (almost-full bins are preferred.)
    priorities[can_fit] = -priorities[can_fit] # Invert for priorities, such that higher is better

    # Bonus for bins that are a "near miss" (avoid extreme fragmentation)
    near_miss_threshold = item * 1.5  # Define a near-miss range (e.g., within 50% of item size)
    near_miss = (bins_remain_cap < item) & (bins_remain_cap >= (item-0.01)) # Slightly less than item fits, due to rounding.
    priorities[near_miss] = -1e9 # Very low score, so near-miss isn't preferred

    almost_full = (bins_remain_cap > 0) & (bins_remain_cap < 0.01)
    priorities[almost_full] = -1e9
    cannot_fit = bins_remain_cap < (item-0.01)

    priorities[cannot_fit] = -1e9  # Ensure invalid bins have very low priority, and don't get picked by default

    return priorities
```
