```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A heuristic inspired by black hole thermodynamics and information entropy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero.  Bins with zero capacity are essentially unusable.
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap) - np.inf # All bins are unusable.  Avoid placing item in any bin
    
    valid_capacities = bins_remain_cap[valid_bins]

    #Calculate waste if item were added to bin.
    waste = valid_capacities - item
    
    #Higher priority for bins where waste is low.

    priority = np.zeros_like(bins_remain_cap) - np.inf  #Initialize with low priority.
    
    #Consider only bins that can accomodate the item.
    can_fit = waste >= 0
    
    if not np.any(can_fit):
        # if item cannot fit into any bin, then fill as full as possible to prevent other items from potentially fitting in, wasting space
        priority[valid_bins] = valid_capacities / item
        return priority

    valid_waste = waste[can_fit]
    
    #Calculate "Bekenstein-Hawking entropy" based on remaining capacity (area of the event horizon). In this context, a smaller remaining capacity indicates a "hotter" black hole (more information density), which should be preferred for the incoming item.
    
    
    horizon_scale = np.max(valid_waste) if np.max(valid_waste) > 0 else 1.0 # Prevent log(0)
    scaled_waste = valid_waste/horizon_scale #Scale to [0,1]
    
    entropy = -scaled_waste * np.log(scaled_waste + 1e-9) #avoid log(0)
    
    
    valid_indices = np.where(valid_bins)[0][can_fit]
    priority[valid_indices] =  entropy  #Higher entropy means higher priority. Prefer packing as much as possible
    

    return priority
```
