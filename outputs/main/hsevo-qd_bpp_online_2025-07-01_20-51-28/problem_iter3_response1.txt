```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)

    # Heuristic 1: "Near Fit" - Prefer bins where the item fills a significant portion
    near_fit_threshold_upper = 0.95
    near_fit_threshold_lower = 0.75
    near_fit_bonus = 15.0

    # Heuristic 2: Avoid Fragmentation - Penalize bins that would become highly fragmented
    fragmentation_penalty_exponent = 2
    small_fragment_threshold = 0.1
    large_fragment_penalty = -10.0

    # Heuristic 3: Reward complete fill
    complete_fill_bonus = 25.0

    # Heuristic 4: Consider bin utilization
    bin_utilization_bonus_factor = 5.0  # Higher utilization is better
    
    # Heuristic 5: Prefer bins with more average fill (attempting to balance load)
    average_fill_preference = 2.0

    # Handle cases where remaining capacity is zero to avoid division by zero
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities
    
    possible_bins = bins_remain_cap >= item
    
    total_capacity = np.sum(bins_remain_cap)
    average_remaining = total_capacity / n_bins if n_bins > 0 else 0 #To avoid zero division

    for i, remaining_cap in enumerate(bins_remain_cap):
        
        if remaining_cap < item: # Disqualify bins that are too small
            priorities[i] = -np.inf
            continue

        # Near Fit (refined)
        fill_ratio = item / remaining_cap
        if near_fit_threshold_lower <= fill_ratio <= near_fit_threshold_upper:
            priorities[i] += near_fit_bonus

        if item == remaining_cap:
            priorities[i] += complete_fill_bonus

        # Fragmentation (more robust)
        new_remaining = remaining_cap - item
        if new_remaining > 0 and (new_remaining / bins_remain_cap[0]) < small_fragment_threshold:
            priorities[i] += large_fragment_penalty
            
        # Bin Utilization (encourage higher utilization)
        utilization = 1.0 - (remaining_cap / bins_remain_cap[0])
        priorities[i] += bin_utilization_bonus_factor * utilization
        
        # Average fill preference
        priorities[i] += average_fill_preference * (average_remaining - remaining_cap)
        

    # If no bins can contain the item, slightly raise score of potential bins for placement
    if not np.any(priorities[possible_bins] > -np.inf):
        priorities[possible_bins] += 0.001

    return priorities
```
