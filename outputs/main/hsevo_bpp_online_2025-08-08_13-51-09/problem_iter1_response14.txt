```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Exact Fit First strategy.
    Prioritizes bins where the item fits exactly.
    If no exact fit, prioritizes bins that leave the smallest remaining capacity.
    If item doesn't fit anywhere, it gets a zero priority.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Check for exact fits
    exact_fit_indices = np.where(bins_remain_cap == item)[0]
    if exact_fit_indices.size > 0:
        priorities[exact_fit_indices] = 1.0  # High priority for exact fits
        return priorities

    # If no exact fit, find bins that fit the item
    fitting_indices = np.where(bins_remain_cap >= item)[0]
    
    if fitting_indices.size > 0:
        remaining_capacities = bins_remain_cap[fitting_indices] - item
        # Assign priority based on the smallest remaining capacity (closest to zero)
        # We can use the negative of remaining capacity to sort in descending order
        # so that smallest positive remaining capacity gets highest priority.
        priorities[fitting_indices] = -remaining_capacities 
        
    return priorities
```
