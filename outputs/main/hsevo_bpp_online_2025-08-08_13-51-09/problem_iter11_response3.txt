```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit's tightness with an exploration bonus favoring less utilized bins,
    using a balanced approach to combine these factors.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    suitable_bins_mask = bins_remain_cap >= item

    if not np.any(suitable_bins_mask):
        return np.zeros_like(bins_remain_cap)

    suitable_bins_remain_cap = bins_remain_cap[suitable_bins_mask]

    # Best Fit Component: Prioritize bins with minimal remaining capacity after placement.
    # Negative of remaining capacity to favor smaller (more negative) values for minimization.
    best_fit_scores = -(suitable_bins_remain_cap - item)

    # Exploration Component: Favor bins that are less utilized (larger original capacity).
    # Normalize remaining capacities of suitable bins using min-max scaling.
    min_cap = np.min(suitable_bins_remain_cap)
    max_cap = np.max(suitable_bins_remain_cap)
    if max_cap - min_cap > 1e-9:
        exploration_scores = (suitable_bins_remain_cap - min_cap) / (max_cap - min_cap)
    else:
        exploration_scores = np.zeros_like(suitable_bins_remain_cap)

    # Combined Score: Balance Best Fit and Exploration.
    # A weighted sum is used. We give a slightly higher weight to Best Fit (tightness)
    # as it's generally a primary goal in BPP, while exploration acts as a tie-breaker
    # or secondary optimization.
    # We add exploration_scores to best_fit_scores. Higher values (closer to zero for BF) are better.
    # Exploration scores are positive and higher is better.
    combined_scores = best_fit_scores + 0.7 * exploration_scores # Weight for exploration

    priorities[suitable_bins_mask] = combined_scores

    # If all suitable bins are identical in terms of combined score, argmin will pick the first.
    # This heuristic aims to find a good balance, leaning towards tight fits but
    # considering bin utilization as a secondary factor.
    return priorities
```
