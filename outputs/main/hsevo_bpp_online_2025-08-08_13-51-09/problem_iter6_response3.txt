```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using a refined heuristic.

    This heuristic aims to balance fitting the item snugly (similar to Best Fit)
    while also considering bins that have more remaining capacity to potentially
    accommodate future items more effectively. It prioritizes bins where the
    remaining capacity after placing the item is maximized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate potential remaining capacity for each bin if the item fits
    potential_remaining_caps = bins_remain_cap - item
    
    # Only consider bins that can actually fit the item
    suitable_bins_mask = potential_remaining_caps >= 0
    
    if np.any(suitable_bins_mask):
        # For suitable bins, assign a priority based on the potential remaining capacity.
        # Higher remaining capacity gets a higher priority.
        # We add a small epsilon to avoid division by zero or extremely large values
        # if a bin has exactly 0 remaining capacity after fitting.
        priorities[suitable_bins_mask] = potential_remaining_caps[suitable_bins_mask] + 1e-9
        
        # Normalize priorities to a range (optional, but can make interpretation easier)
        # If all suitable bins have the same remaining capacity, this would give them equal priority.
        min_priority = np.min(priorities[suitable_bins_mask])
        max_priority = np.max(priorities[suitable_bins_mask])
        
        if max_priority > min_priority:
            priorities[suitable_bins_mask] = (priorities[suitable_bins_mask] - min_priority) / (max_priority - min_priority)
        else:
            # If all suitable bins have the same priority value, assign a uniform priority
            priorities[suitable_bins_mask] = 1.0

        # Apply a slight penalty for bins that are almost full after placing the item
        # This encourages using bins that leave more "room" for future items.
        # For example, if remaining capacity is < 10% of original bin capacity (assuming bins are of a fixed total capacity)
        # or simply a small absolute value if bin capacity isn't readily available.
        # For now, let's consider a small absolute threshold.
        small_remaining_threshold = 1.0 # This is an arbitrary threshold, can be tuned.
        almost_full_mask = (potential_remaining_caps >= 0) & (potential_remaining_caps < small_remaining_threshold)
        priorities[almost_full_mask] *= 0.8 # Reduce priority by 20%

    return priorities
```
