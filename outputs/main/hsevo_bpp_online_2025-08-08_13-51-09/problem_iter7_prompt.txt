{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines tight fit with diversified exploration using scaled inverse remaining capacity\n    and a sigmoid-based penalty for bins that are too full.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    valid_bins_mask = bins_remain_cap >= item\n    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]\n    \n    if valid_bins_remain_cap.size > 0:\n        # Metric 1: Tight Fit Score (inverse of remaining capacity after fitting)\n        # Favors bins that will have less space left after item is placed.\n        fit_scores = 1.0 / (valid_bins_remain_cap - item + 1e-9)\n        \n        # Metric 2: Diversification Bonus (inverse of current remaining capacity)\n        # Favors less utilized bins to prevent premature concentration.\n        # Use original remaining capacity for this, scaled.\n        diversification_scores = 1.0 / (bins_remain_cap[valid_bins_mask] + 1e-9)\n        \n        # Combine using a weighted sum. Heuristic 19/20's balanced approach inspires this.\n        # We give slightly more weight to the tight fit, but diversification is significant.\n        combined_priorities = 0.6 * fit_scores + 0.4 * diversification_scores\n        \n        # Assign priorities back to the original array\n        priorities[valid_bins_mask] = combined_priorities\n        \n        # Normalize priorities to ensure the highest score is clearly dominant\n        max_priority = np.max(priorities[valid_bins_mask])\n        if max_priority > 0:\n            priorities[valid_bins_mask] /= max_priority\n            \n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}