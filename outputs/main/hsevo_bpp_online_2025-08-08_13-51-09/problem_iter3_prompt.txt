{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using First Fit decreasing heuristic logic.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    suitable_bins_mask = bins_remain_cap >= item\n    priorities[suitable_bins_mask] = bins_remain_cap[suitable_bins_mask] - item\n    best_fit_bin_index = np.argmin(priorities)\n    priorities[:] = 0\n    priorities[best_fit_bin_index] = 1\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n*   **Keywords:** Bin packing, heuristic design, local search, neighborhood exploration, diversification.\n*   **Advice:** Focus on refining the *quality* of \"tight fit\" assessment by exploring diverse metrics beyond simple inverse relationships. Consider how different neighborhood structures in local search can expose novel packing solutions.\n*   **Avoid:** Over-reliance on fixed scaling functions. Avoid neglecting the impact of initial solutions; consider a diversification strategy for starting points.\n*   **Explanation:** \"Tight fit\" can be multifaceted. Instead of just inverse relationships, explore metrics that capture volume utilization *and* adjacency benefits. Different local search neighborhoods explore different parts of the solution space, preventing getting stuck in poor local optima. Diverse starting points ensure a broader exploration.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}