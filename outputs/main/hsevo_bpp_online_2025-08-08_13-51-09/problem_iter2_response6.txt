```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit with an exploration bonus for less full bins.

    Prioritizes bins that are a tight fit (best fit) but also explores
    less full bins to potentially improve overall packing.
    """
    epsilon = 0.1
    priorities = np.full_like(bins_remain_cap, -np.inf)

    suitable_bins_mask = bins_remain_cap >= item

    if np.any(suitable_bins_mask):
        suitable_bins_cap = bins_remain_cap[suitable_bins_mask]

        # Best Fit component: inverse of remaining capacity after fitting
        best_fit_scores = 1.0 / (suitable_bins_cap - item + 1e-9)

        # Exploration component: bonus for bins with more remaining capacity (less full)
        avg_remaining_capacity = np.mean(suitable_bins_cap)
        exploration_bonus = np.maximum(0, avg_remaining_capacity - suitable_bins_cap) * epsilon

        priorities[suitable_bins_mask] = best_fit_scores + exploration_bonus

    return priorities
```
