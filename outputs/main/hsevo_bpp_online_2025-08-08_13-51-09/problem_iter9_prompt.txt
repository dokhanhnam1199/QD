{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines Best Fit (tightest residual space) with an exploration bonus\n    favoring bins with higher remaining capacity, normalized for balance.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    suitable_bins_mask = bins_remain_cap >= item\n\n    if not np.any(suitable_bins_mask):\n        return priorities\n\n    suitable_bins_caps = bins_remain_cap[suitable_bins_mask]\n\n    # Metric 1: Best Fit - Prioritize bins with minimal remaining capacity after placement.\n    # Higher score for smaller remaining capacity (more tightly fitting).\n    remaining_after_placement = suitable_bins_caps - item\n    best_fit_scores = 1.0 / (remaining_after_placement + 1e-6)\n\n    # Metric 2: Exploration Bonus - Prioritize bins with more initial remaining capacity.\n    # This encourages using less full bins for better future packing flexibility.\n    # Use min-max normalization for a balanced exploration score.\n    if suitable_bins_caps.size > 0:\n        min_cap = np.min(suitable_bins_caps)\n        max_cap = np.max(suitable_bins_caps)\n        if max_cap - min_cap > 1e-6:\n            exploration_scores = (suitable_bins_caps - min_cap) / (max_cap - min_cap)\n        else:\n            exploration_scores = np.ones_like(suitable_bins_caps) * 0.5 # Handle case where all suitable bins have same capacity\n    else:\n        exploration_scores = np.array([])\n\n    # Normalize Best Fit scores to be in a comparable range [0, 1]\n    if np.max(best_fit_scores) > 1e-6:\n        normalized_best_fit = best_fit_scores / np.max(best_fit_scores)\n    else:\n        normalized_best_fit = np.zeros_like(best_fit_scores)\n\n    # Combine scores with weights: 70% for tight fit, 30% for exploration.\n    # This prioritizes filling bins efficiently while still considering diversification.\n    combined_scores = 0.7 * normalized_best_fit + 0.3 * exploration_scores\n\n    priorities[suitable_bins_mask] = combined_scores\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nHere's a redefined approach to self-reflection for designing better heuristics, focusing on avoiding ineffective practices:\n\n*   **Keywords:** Objective balancing, nuanced scoring, robust metrics, avoiding simplicity.\n*   **Advice:** Focus on how multiple objectives (primary/secondary) interact. Develop score combinations that reflect these interactions, not just additive weighting. Ensure metrics are sensitive to problem specifics.\n*   **Avoid:** Sigmoid/inverse functions *solely* for scaling without justification. Blindly prioritizing \"tight fit\" over exploration. Over-reliance on simplistic, single-metric evaluations.\n*   **Explanation:** The goal is to create heuristics that learn and adapt by understanding trade-offs, not by applying pre-defined, inflexible transformations. Complex interactions between objectives require thoughtful metric design and combination.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}