```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit (tightness) with a 'fair share' exploration bonus,
    prioritizing bins that are neither too full nor too empty, relative to others.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    suitable_bins_mask = bins_remain_cap >= item

    if not np.any(suitable_bins_mask):
        return priorities

    valid_bins_remain_cap = bins_remain_cap[suitable_bins_mask]

    # Best Fit component: Inverse of remaining capacity after placing the item.
    # Smaller difference implies a tighter fit and higher score.
    tightness_scores = 1.0 / (valid_bins_remain_cap - item + 1e-9)

    # Exploration component: Penalize bins that are excessively full or empty
    # relative to the average remaining capacity of suitable bins. This encourages
    # a more balanced distribution. We use a quadratic penalty.
    avg_remain_cap = np.mean(valid_bins_remain_cap)
    # Deviation from average, squared to penalize larger deviations more.
    # We add a small constant to avoid zero deviation resulting in zero penalty.
    fairness_penalty = (valid_bins_remain_cap - avg_remain_cap)**2 / (avg_remain_cap + 1e-9)

    # Combine scores: Higher tightness is good, lower penalty (closer to avg) is good.
    # We subtract the penalty as it's a negative aspect.
    # Weights can be tuned; here, tightness is prioritized.
    combined_scores = tightness_scores - fairness_penalty * 0.2 # Tunable parameter for penalty influence

    # Normalize scores to be between 0 and 1.
    min_score = np.min(combined_scores)
    max_score = np.max(combined_scores)

    if max_score - min_score > 1e-9:
        priorities[suitable_bins_mask] = (combined_scores - min_score) / (max_score - min_score)
    elif np.any(suitable_bins_mask):
        # If all suitable bins have very similar combined scores, distribute equally.
        priorities[suitable_bins_mask] = 1.0 / np.sum(suitable_bins_mask)

    return priorities
```
