```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Almost Full Fit: Prioritize bins that are almost full but can still fit the item.
    # We want to put the item in a bin where the remaining capacity after fitting
    # the item is as small as possible (but non-negative).
    
    # Calculate the remaining capacity if the item is placed in each bin
    potential_remain_cap = bins_remain_cap - item

    # Filter out bins where the item cannot fit
    valid_bins_mask = potential_remain_cap >= 0
    
    # For valid bins, the priority is the negative of the remaining capacity.
    # This makes bins with smaller remaining capacity (i.e., closer to full) have higher priority.
    # We use a large negative number for bins that cannot fit the item, ensuring they are not chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf)
    priorities[valid_bins_mask] = -potential_remain_cap[valid_bins_mask]
    
    return priorities
```
