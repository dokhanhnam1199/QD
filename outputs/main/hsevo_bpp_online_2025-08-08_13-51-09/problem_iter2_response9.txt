```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines sigmoid fit score with an exploration bonus for diverse bin selection.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Calculate potential remaining capacity for valid bins
    potential_remaining_cap = bins_remain_cap - item
    valid_bins_mask = potential_remaining_cap >= 0

    # If no bins can accommodate the item, return zeros
    if not np.any(valid_bins_mask):
        return np.zeros_like(bins_remain_cap)

    # Normalize remaining capacities of valid bins for sigmoid calculation
    valid_capacities = bins_remain_cap[valid_bins_mask]
    
    # Use a sigmoid function to get a "tight fit" score.
    # We want bins that leave minimal remaining capacity, so we use the negative
    # of the remaining capacity. The scaling factor controls steepness.
    scaling_factor = 2.0
    tight_fit_scores = 1 / (1 + np.exp(-scaling_factor * (-potential_remaining_cap[valid_bins_mask])))

    # Introduce an exploration bonus: bins with more remaining capacity get a small bonus
    # to encourage exploring less full bins. Normalize capacities for bonus calculation.
    # Add a small epsilon to avoid division by zero if a bin is already full (though filtered by valid_bins_mask)
    exploration_bonus = 0.1 * (valid_capacities / (np.mean(valid_capacities) + 1e-9))

    # Combine tight fit score with exploration bonus.
    # The exploration bonus is added to the tight fit score.
    combined_scores = tight_fit_scores + exploration_bonus

    # Initialize priorities with zeros
    priorities = np.zeros_like(bins_remain_cap)
    
    # Assign the combined scores to the valid bins
    priorities[valid_bins_mask] = combined_scores

    return priorities
```
