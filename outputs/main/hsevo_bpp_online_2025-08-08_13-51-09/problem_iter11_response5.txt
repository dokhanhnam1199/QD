```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit with an exploration bonus favoring less utilized bins,
    using logarithmic scaling for exploration to enhance bin distribution.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    suitable_bins_mask = bins_remain_cap >= item

    if not np.any(suitable_bins_mask):
        return priorities

    suitable_bins_remain_cap = bins_remain_cap[suitable_bins_mask]

    # Metric 1: Best Fit (minimize remaining space after packing)
    # Higher score for bins with less remaining space after packing the item.
    # Adding a small epsilon to avoid division by zero.
    tightness_score = 1.0 / (suitable_bins_remain_cap - item + 1e-9)

    # Metric 2: Exploration Bonus (favor less utilized bins)
    # Logarithmic scaling of remaining capacity. Favors bins that are less full,
    # encouraging a more even distribution of items across bins.
    exploration_score = np.log(suitable_bins_remain_cap + 1e-9)

    # Combine scores. Weighting favors tightness slightly, but exploration
    # provides a bonus for less-used bins. These weights are subject to tuning.
    combined_scores = 0.55 * tightness_score + 0.45 * exploration_score

    # Normalize the combined scores to a [0, 1] range for consistent priority.
    # Avoid division by zero if all combined scores are identical.
    min_score = np.min(combined_scores)
    max_score = np.max(combined_scores)
    if max_score - min_score > 1e-9:
        normalized_scores = (combined_scores - min_score) / (max_score - min_score)
    else:
        normalized_scores = np.ones_like(combined_scores) * 0.5 # Default to mid-range if all scores are equal

    priorities[suitable_bins_mask] = normalized_scores

    return priorities
```
