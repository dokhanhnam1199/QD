```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by balancing a tight fit (minimal residual space)
    with an exploration bonus (favoring less utilized bins) using a
    logarithmic transformation for better distribution.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    suitable_bins_mask = bins_remain_cap >= item

    if not np.any(suitable_bins_mask):
        return priorities

    suitable_bins_remain_cap = bins_remain_cap[suitable_bins_mask]

    # Metric 1: Tight Fit (minimize remaining space after packing)
    # Use inverse of remaining capacity after packing, add epsilon for stability.
    # Higher score for smaller remaining space.
    tightness_score = 1.0 / (suitable_bins_remain_cap - item + 1e-9)

    # Metric 2: Exploration Bonus (favor less utilized bins)
    # Use log of remaining capacity. Higher score for bins with more remaining capacity.
    # This encourages using less full bins to potentially improve overall packing.
    exploration_score = np.log(suitable_bins_remain_cap + 1e-9)

    # Combine scores with weights. Prioritize tightness slightly more.
    # Weights can be tuned.
    combined_scores = 0.6 * tightness_score + 0.4 * exploration_score

    # Normalize scores to a [0, 1] range to ensure comparable priorities.
    # Handle cases where all scores are identical to avoid division by zero.
    min_score = np.min(combined_scores)
    max_score = np.max(combined_scores)
    if max_score - min_score > 1e-9:
        normalized_scores = (combined_scores - min_score) / (max_score - min_score)
    else:
        normalized_scores = np.ones_like(combined_scores) * 0.5 # Mid-range if all equal

    priorities[suitable_bins_mask] = normalized_scores

    return priorities
```
