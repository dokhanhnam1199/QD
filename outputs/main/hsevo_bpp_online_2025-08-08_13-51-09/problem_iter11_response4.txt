```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines a tight fit metric with an exploration bonus, favoring bins
    that minimize remaining space while also considering less utilized bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    suitable_bins_mask = bins_remain_cap >= item

    if not np.any(suitable_bins_mask):
        return priorities

    suitable_bins_remain_cap = bins_remain_cap[suitable_bins_mask]

    # Metric 1: Tight Fit (similar to priority_v0)
    # Prioritize bins that leave minimal remaining space after packing.
    # Add epsilon for numerical stability. Higher score for smaller remaining space.
    tightness_score = 1.0 / (suitable_bins_remain_cap - item + 1e-9)

    # Metric 2: Exploration Bonus (inspired by priority_v0 and priority_v10/11/12)
    # Favor bins that are less full (more remaining capacity).
    # Using log1p for slightly better distribution at lower capacities.
    # Higher score for bins with more remaining capacity.
    exploration_score = np.log1p(suitable_bins_remain_cap)

    # Combine scores with weights.
    # Giving a slight edge to tightness, but exploration is also important.
    # These weights can be tuned based on empirical performance.
    combined_scores = 0.55 * tightness_score + 0.45 * exploration_score

    # Normalize combined scores to a [0, 1] range.
    # This ensures that the relative priorities are maintained even with different
    # scales of the individual metrics. Handle cases where all scores are equal.
    min_score = np.min(combined_scores)
    max_score = np.max(combined_scores)
    if max_score - min_score > 1e-9:
        normalized_scores = (combined_scores - min_score) / (max_score - min_score)
    else:
        normalized_scores = np.ones_like(combined_scores) * 0.5

    priorities[suitable_bins_mask] = normalized_scores

    return priorities
```
