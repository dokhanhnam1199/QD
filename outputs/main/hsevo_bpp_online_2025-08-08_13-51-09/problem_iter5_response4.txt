```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with a smoothed penalty for large remaining capacities and normalization.

    Prioritizes bins that tightly fit the item, while smoothly penalizing
    bins that would leave excessive empty space, ensuring a balanced approach.
    """
    available_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(available_bins_mask):
        valid_capacities = bins_remain_cap[available_bins_mask]

        # Heuristic 1: "Best Fit" component using inverse of difference
        # Higher score for smaller differences (tighter fit)
        differences = valid_capacities - item
        best_fit_scores = 1.0 / (differences + 1e-9)

        # Heuristic 2: Sigmoid applied to the *remaining* capacity after fitting
        # Penalizes bins that will have a lot of space left, but smoothly.
        # Centered to give higher scores to smaller remaining capacities.
        scaling_factor = 15.0 # Increased scaling factor for a sharper penalty
        potential_remaining_capacities = valid_capacities - item
        # Using a slightly different sigmoid formulation for a smoother penalty curve
        sigmoided_penalty = 1 / (1 + np.exp(scaling_factor * (potential_remaining_capacities - 0.2)))

        # Combine scores: Prioritize good fits and penalize large remaining capacities
        combined_scores = best_fit_scores * sigmoided_penalty

        # Normalize the combined scores to prevent extreme values and ensure comparability
        if combined_scores.size > 0:
            min_score = np.min(combined_scores)
            max_score = np.max(combined_scores)
            if max_score - min_score > 1e-9:
                normalized_scores = (combined_scores - min_score) / (max_score - min_score)
            else:
                normalized_scores = np.ones_like(combined_scores) * 0.5
        else:
            normalized_scores = np.array([])

        priorities[available_bins_mask] = normalized_scores

    return priorities
```
