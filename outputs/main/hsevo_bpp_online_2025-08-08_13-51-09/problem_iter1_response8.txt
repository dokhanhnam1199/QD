```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Epsilon-Greedy priority for online Bin Packing Problem.

    This priority function aims to balance exploration (trying less full bins)
    and exploitation (using bins that are a good fit).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 0.1
    priorities = np.zeros_like(bins_remain_cap)
    
    suitable_bins = bins_remain_cap >= item
    
    if np.any(suitable_bins):
        
        best_fit_score = 1 / (bins_remain_cap[suitable_bins] - item + 1e-9) 
        
        
        avg_remaining_capacity = np.mean(bins_remain_cap[suitable_bins])
        exploration_bonus = np.zeros_like(bins_remain_cap)
        exploration_bonus[suitable_bins] = np.maximum(0, avg_remaining_capacity - bins_remain_cap[suitable_bins]) * epsilon

        
        priorities[suitable_bins] = best_fit_score + exploration_bonus[suitable_bins]
    else:
        
        priorities = np.ones_like(bins_remain_cap) * -np.inf 
        
    return priorities
```
