```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with a Sigmoid-based penalty for large remaining capacities.

    Prioritizes bins that closely fit the item, with a smooth penalty for bins
    that would have a significantly larger remaining capacity after placement.
    """
    available_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(available_bins_mask):
        valid_capacities = bins_remain_cap[available_bins_mask]
        
        # Heuristic 1: "Best Fit" component using inverse of difference
        # Higher score for smaller differences (tighter fit)
        differences = valid_capacities - item
        best_fit_scores = 1.0 / (differences + 1e-9)

        # Heuristic 2: Sigmoid applied to the *remaining* capacity after fitting
        # Penalizes bins that will have a lot of space left, but smoothly.
        # Centered to give higher scores to smaller remaining capacities.
        scaling_factor = 10.0 # Tune this to control sensitivity to remaining space
        potential_remaining_capacities = valid_capacities - item
        sigmoided_penalty = 1 / (1 + np.exp(scaling_factor * (potential_remaining_capacities - 0.1))) # Penalty for remaining capacity > 0.1

        # Combine scores: Prioritize good fits and penalize large remaining capacities
        # A simple multiplication or weighted sum can be used. Here, we multiply
        # to ensure that both conditions (good fit AND small remaining capacity) are met.
        combined_scores = best_fit_scores * sigmoided_penalty

        priorities[available_bins_mask] = combined_scores

    return priorities
```
