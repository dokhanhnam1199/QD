```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines tight packing (Best Fit) with a diversification bonus favoring
    less utilized bins. Balances fitting tightly with spreading load.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=np.float64)
    suitable_bins_mask = bins_remain_cap >= item

    if not np.any(suitable_bins_mask):
        return priorities

    suitable_bins_cap = bins_remain_cap[suitable_bins_mask]
    remaining_after_placement = suitable_bins_cap - item

    # Primary objective: Tight Fit (Best Fit)
    # Higher score for smaller remaining capacity. Use reciprocal for emphasis.
    tight_fit_score = 1.0 / (remaining_after_placement + 1e-9)

    # Secondary objective: Diversification (Favor less utilized bins)
    # This encourages using bins that are not already very full.
    # We can measure this by the *remaining capacity after placement* relative to the
    # *total capacity of the bin*. A higher ratio here means the bin was less full.
    # Use min-max scaling for a robust normalized score between 0 and 1.
    min_rem_after = np.min(remaining_after_placement)
    max_rem_after = np.max(remaining_after_placement)

    exploration_bonus = np.zeros_like(remaining_after_placement)
    if max_rem_after > min_rem_after:
        # Normalize remaining capacity after placement to get exploration score
        exploration_bonus = (remaining_after_placement - min_rem_after) / (max_rem_after - min_rem_after)
    else:
        # If all suitable bins result in the same remaining capacity, no bonus from this metric.
        pass

    # Combine scores: Primarily driven by tight fit, with an additive exploration bonus.
    # The exploration bonus is scaled down to ensure tight fit remains dominant,
    # but it serves as a tie-breaker and encourages exploration.
    # A weight of 0.1 is empirically chosen to give exploration a modest influence.
    final_priorities = tight_fit_score + 0.1 * exploration_bonus

    priorities[suitable_bins_mask] = final_priorities

    return priorities
```
