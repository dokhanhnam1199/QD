```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a combination of inverse difference and remaining capacity.

    This heuristic combines the "best fit" aspect of inverse difference with a
    penalty for bins with excessively large remaining capacity, promoting tighter fits.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins_mask = bins_remain_cap >= item
    
    if np.any(valid_bins_mask):
        valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]
        
        differences = valid_bins_remain_cap - item
        
        # Inverse difference for best fit, scaled by inverse of remaining capacity to penalize large gaps
        # Adding a small epsilon to the denominator to prevent division by zero
        scaled_inverse_differences = 1.0 / (differences + 1e-9) / (valid_bins_remain_cap + 1e-9)
        
        priorities[valid_bins_mask] = scaled_inverse_differences

    return priorities
```
