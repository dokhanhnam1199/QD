```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Scores bins by best-fit with inverse slack, near-full and exact-fit boosts, epsilon-greedy exploration, and jitter.
    """
    eps = 0.1
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return scores
    if np.random.rand() < eps:
        scores[feasible] = np.random.rand(feasible.sum())
        return scores
    slack = bins_remain_cap[feasible] - item
    base = 1.0 / (slack + 1e-9)
    near_full = slack <= 0.05 * item
    base[near_full] += 0.5
    exact = np.isclose(slack, 0, atol=1e-9)
    base[exact] += 1.0
    base += 0.01 * np.random.rand(len(base))
    scores[feasible] = base
    return scores
```
