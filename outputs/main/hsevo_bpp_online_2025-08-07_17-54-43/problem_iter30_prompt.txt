{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit with near\u2011full and exact fit boosts, jitter, and index bias.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return priorities\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    near_full_boost = 0.5\n    exact_fit_boost = 1.0\n    base[slack <= near_full_thresh] += near_full_boost\n    base[slack == 0] += exact_fit_boost\n    jitter = (np.random.rand(base.size) - 0.5) * 1e-9\n    base += jitter\n    indices = np.arange(n)[feasible]\n    base += indices * 1e-12\n    priorities[feasible] = base\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~feasible] = -np.inf\n        priorities = rand_scores\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords:** adaptive deterministic core, explicit infeasibility marking, near\u2011full/exact\u2011fit bonuses, lightweight jitter, vectorized simple scoring.  \n- **Advice:** Use a best\u2011fit core with \u03b5\u2011greedy decay, add near\u2011full/exact\u2011fit boosts, mark infeasible moves explicitly, jitter scores slightly; keep logic vectorized and well\u2011documented.  \n- **Avoid:** static \u03b5, duplicated code, heavy softmax, over\u2011parameterization, multiplicative boosts, per\u2011item random mixing, dead branches.  \n- **Explanation:** These choices clarify intent, cut noise, enforce feasibility, and enable easy tuning, yielding more robust, high\u2011quality packings.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}