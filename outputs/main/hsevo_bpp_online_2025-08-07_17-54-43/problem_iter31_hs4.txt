import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    near_full_thresh_min: float = 0.028581748351795846,
    near_full_thresh_factor: float = 0.06686536100410445,
    near_full_boost: float = 0.9038239176579964,
    exact_fit_boost: float = 0.23825402286760733,
    jitter_scale: float = 6.971531941261685e-08,
    index_bias_scale: float = 5.003762529601364e-11,
    epsilon_initial: float = 0.1700037234429151,
    epsilon_min: float = 0.06812273738389024,
    epsilon_decay: float = 0.9390885105243252) -> np.ndarray:
    """Adaptive epsilon‑greedy best‑fit with near‑full and exact fit boosts, jitter, and index bias."""
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = epsilon_initial
        priority_v2._epsilon_min = epsilon_min
        priority_v2._epsilon_decay = epsilon_decay
        priority_v2._step = 0
    priority_v2._step += 1
    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)
    n = bins_remain_cap.size
    priorities = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priorities
    slack = bins_remain_cap[feasible] - item
    base = -slack
    near_full_thresh = max(near_full_thresh_min, near_full_thresh_factor * item)
    base[slack <= near_full_thresh] += near_full_boost
    base[slack == 0] += exact_fit_boost
    jitter = (np.random.rand(base.size) - 0.5) * jitter_scale
    base += jitter
    indices = np.arange(n)[feasible]
    base += indices * index_bias_scale
    priorities[feasible] = base
    if np.random.rand() < priority_v2._epsilon:
        rand_scores = np.random.rand(n)
        rand_scores[~feasible] = -np.inf
        priorities = rand_scores
    return priorities
