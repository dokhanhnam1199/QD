```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by negative slack, near‑full & exact‑fit boosts, ratio penalty, dead‑space filter, and capped inverse slack."""
    n = bins_remain_cap.size
    scores = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    near_full_thr = max(0.01, 0.03 * item)
    near_full_boost = np.where(slack <= near_full_thr, 0.5, 0.0)
    exact_boost = np.where(np.isclose(slack, 0.0, atol=1e-9), 1.0, 0.0)
    ratio = item / bins_remain_cap[feasible]
    ratio_penalty = 0.3 * ratio
    max_cap = bins_remain_cap.max()
    dead_thr = max_cap * 0.01
    dead_space = (slack > 0) & (slack < dead_thr)
    dead_penalty = np.where(dead_space, -2.0, 0.0)
    smooth_boost = np.minimum(0.5 / (slack + 1e-12), 5.0)
    scores[feasible] = base + near_full_boost + exact_boost = base + near_full_boost + exact_boost - ratio_penalty + dead_penalty + smooth_boost
    return scores
```
