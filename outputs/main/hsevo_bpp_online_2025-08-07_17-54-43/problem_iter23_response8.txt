```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit with static ε‑greedy exploration, ratio tie‑breaker, and index jitter."""
    # constant exploration probability
    epsilon = 0.08
    n = bins_remain_cap.size
    scores = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    ratio = item / bins_remain_cap[feasible]
    base += 0.05 * ratio
    idx = np.flatnonzero(feasible)
    base += 1e-6 * idx
    scores[feasible] = base
    if np.random.rand() < epsilon:
        rand = np.random.rand(n)
        rand[~feasible] = -np.inf
        scores = rand
    return scores
```
