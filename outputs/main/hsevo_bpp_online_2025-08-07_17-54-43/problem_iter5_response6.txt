```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive epsilon‑greedy best‑fit: prioritize minimal slack, boost near‑full bins, decay epsilon, mark infeasible as -inf."""
    if not hasattr(priority_v2, "epsilon"):
        priority_v2.epsilon = 0.2
        priority_v2.min_epsilon = 0.0
        priority_v2.decay = 0.995
        priority_v2.near_full_thresh = 0.05
        priority_v2.near_full_boost = 0.5
    eps = priority_v2.epsilon
    n = bins_remain_cap.size
    priorities = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    slack = bins_remain_cap[feasible] - item
    base = -slack
    near_full = slack <= priority_v2.near_full_thresh
    base[near_full] += priority_v2.near_full_boost
    if np.random.rand() < eps:
        rand_scores = np.random.rand(feasible.sum())
        priorities[feasible] = rand_scores
    else:
        priorities[feasible] = base
    priority_v2.epsilon = max(priority_v2.min_epsilon, eps * priority_v2.decay)
    return priorities
```
