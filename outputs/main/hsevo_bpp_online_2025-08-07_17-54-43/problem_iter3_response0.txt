```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive epsilon‑greedy best‑fit priority with near‑full boost and infeasibility handling."""
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.2
        priority_v2._epsilon_min = 0.01
        priority_v2._epsilon_decay = 0.995
        priority_v2._step = 0
    priority_v2._step += 1
    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)
    n = bins_remain_cap.size
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    valid = bins_remain_cap >= item
    if not np.any(valid):
        return priorities
    slack = bins_remain_cap[valid] - item
    base_priority = -slack
    near_full_thresh = max(0.02, 0.05 * item)
    boost = 0.5
    base_priority[slack <= near_full_thresh] += boost
    priorities[valid] = base_priority
    if np.random.rand() < priority_v2._epsilon:
        rand_scores = np.random.rand(n)
        rand_scores[~valid] = -np.inf
        priorities = rand_scores
    return priorities
```
