```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    ratio_weight: float = 0.5,
    dead_space_ratio: float = 0.01,
    epsilon: float = 0.1,
    jitter_scale: float = 1e-6,
) -> np.ndarray:
    """Combine ratio, dead‑space filter and ε‑greedy jitter for online BPP."""
    n = bins_remain_cap.size
    priorities = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return priorities
    slack = bins_remain_cap - item
    max_cap = bins_remain_cap.max()
    dead_thr = max_cap * dead_space_ratio
    dead_space = (slack > 0) & (slack < dead_thr)
    usable = feasible & ~dead_space
    mask = usable if usable.any() else feasible
    ratio = item / bins_remain_cap[mask]
    slack_norm = slack[mask] / max_cap
    base_score = ratio_weight * ratio - (1.0 - ratio_weight) * slack_norm
    random_jitter = epsilon * np.random.rand(mask.sum())
    if jitter_scale:
        random_jitter += jitter_scale * np.random.rand(mask.sum())
    priorities[mask] = base_score + random_jitter
    return priorities
```
