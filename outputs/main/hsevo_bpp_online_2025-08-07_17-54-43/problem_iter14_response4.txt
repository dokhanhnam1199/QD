```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit: negative slack + inverse‑slack boost, adaptive ε‑greedy tie‑break."""
    valid = bins_remain_cap >= item
    n = bins_remain_cap.size
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if not np.any(valid):
        return priorities

    slack = bins_remain_cap[valid] - item
    base = -slack

    boost_factor = 0.5
    tiny = 1e-6
    max_boost = 5.0
    boost = boost_factor / (slack + tiny)
    boost = np.minimum(boost, max_boost)

    priorities[valid] = base + boost

    epsilon_factor = 0.1
    epsilon = epsilon_factor * (1 - np.count_nonzero(valid) # wait, bug.

We need to fix that.

Actually:

epsilon = epsilon_factor * (1 - np.count_nonzero(valid) / n)

Ok.

Now if random < epsilon, tie break: select random valid bin, add small tie_breaker.

Add:

tie_breaker = 1e-3

if np.random.rand() < epsilon:
    idx = np.random.choice(np.flatnonzero(valid))
    priorities[idx] += tie_breaker

Return priorities.

Let's produce final correct code.

```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit: negative slack + inverse‑slack boost, adaptive ε‑greedy tie‑break."""
    valid = bins_remain_cap >= item
    n = bins_remain_cap.size
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if not np.any(valid):
        return priorities

    slack = bins_remain_cap[valid] - item
    base = -slack
    boost_factor = 0.5
    tiny = 1e-6
    max_boost = 5.0 # Wait, we need to fix. Let's write correct code again.

We need to produce final correct code now.

I realize the above snippet still contains errors. Let's reconstruct the final code carefully.

We want:

```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit: negative slack + inverse‑slack boost, adaptive ε‑greedy tie‑break."""
    valid = bins_remain_cap >= item
    n = bins_remain_cap.size
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if not np.any(valid):
        return priorities

    slack = bins_remain_cap[valid] - item
    base = -slack
    boost_factor = 0.5
    tiny = 1e-6
    max_boost = 5.0
    boost = boost_factor / (slack + tiny)
    boost = np.minimum(boost, max_boost)

    priorities[valid] = base + boost

    epsilon_factor = 0.1
    epsilon = epsilon_factor * (1 - np.count_nonzero(valid) / n)
    if np.random.rand # still broken.

We need to finalize.

Ok, let's start from scratch with final correct code.

```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit priority: negative slack + inverse‑slack boost, adaptive ε‑greedy tie‑break."""
    valid = bins_remain_cap >= item
    n = bins_remain_cap.size
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(valid):
        return priorities

    slack = bins_remain_cap[valid] - item
    base = -slack
    boost_factor = 0.5
    tiny = 1e-6
    max_boost = 5.0
    boost = boost_factor / (slack + tiny)
    boost = np.minimum(boost, max_boost)

    priorities[valid] = base + boost

    epsilon_factor = 0.1
    epsilon = epsilon_factor * (1 - np.count_nonzero(valid) / n)
    if np.random.rand() < epsilon:
        idx = np.random.choice(np.flatnonzero(valid))
        priorities[idx] += 1e-3

    return priorities
```
