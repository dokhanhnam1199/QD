```python
import numpy as np

# priority_v2: epsilon‑greedy best‑fit with ratio penalty, near‑full boost, jitter, and decay.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Epsilon‑greedy best‑fit heuristic: score bins by negative slack, apply small ratio penalty,
    boost near‑full bins, add jitter, decay epsilon for exploration. Infeasible bins get -inf."""
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.2
        priority_v2._epsilon_min = 0.01
        priority_v2._epsilon_decay = 0.995
        priority_v2._step = 0
    priority_v2._step += 1
    priority_v2._epsilon = max(priority_v2._epsilon_min,
                               priority_v2._epsilon * priority_v2._epsilon_decay)
    eps = priority_v2._epsilon
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    ratio = item / bins_remain_cap[feasible]
    ratio_weight = 0.02
    base -= ratio_weight * ratio
    near_full_thresh = max(0.02, 0.05 * item)
    boost = 0.5
    base[slack <= near_full_thresh] += boost
    base += np.random.rand(feasible.sum()) * 1e-6
    scores[feasible] = base
    if np.random.rand() < eps:
        rand_scores = np.random.rand(bins_remain_cap.size)
        rand_scores[~feasible] = -np.inf
        scores = rand_scores
    return scores
```
