```python
import numpy as np

# Inverse‑slack best‑fit with additive near‑full/exact‑fit boost and fixed ε‑greedy.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit (inverse slack) with modest near‑full boost and fixed ε‑greedy."""
    if not hasattr(priority_v2, "epsilon"):
        priority_v2.epsilon = 0.15               # exploration probability
        priority_v2.near_full_thresh = 0.1       # slack ≤ this is “near full”
        priority_v2.near_full_boost = 0.5        # additive boost for near‑full bins
        priority_v2.exact_fit_boost = 3.0        # large boost for exact fits
    eps = np.finfo(float).eps
    can_fit = bins_remain_cap >= item
    slack = bins_remain_cap - item
    scores = np.where(can_fit, 1.0 / (slack + eps), -np.inf)
    near_full = (slack <= priority_v2.near_full_thresh) & can_fit
    scores[near_full] += priority_v2.near_full_boost
    exact_fit = (slack <= eps) & can_fit
    scores[exact_fit] += priority_v2.exact_fit_boost
    if np.random.rand() < priority_v2.epsilon:
        scores = np.where(can_fit, np.random.rand(len(bins_remain_cap)), -np.inf)
    return scores
```
