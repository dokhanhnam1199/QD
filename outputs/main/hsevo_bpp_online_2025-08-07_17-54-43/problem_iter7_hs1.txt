import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                epsilon: float = 0.5585626136616816,
                epsilon_min: float = 0.07425165359579952,
                epsilon_decay: float = 0.8626744767676546,
                near_full_thresh_base: float = 0.09876781941237733,
                near_full_thresh_multiplier: float = 0.06069854262708351,
                base_priority_increment: float = 0.3458537173984821,
                small_eps: float = 1.2997585529387213e-09) -> np.ndarray:
    """
    Adaptive epsilon‑greedy best‑fit with slack inverse, near‑full boost, and infeasibility handling.
    """
    # Initialize static attributes on first call
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = epsilon
        priority_v2._epsilon_min = epsilon_min
        priority_v2._epsilon_decay = epsilon_decay
        priority_v2._step = 0

    priority_v2._step += 1
    priority_v2._epsilon = max(priority_v2._epsilon_min,
                               priority_v2._epsilon * priority_v2._epsilon_decay)

    n = bins_remain_cap.size
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    valid = bins_remain_cap >= item
    if not np.any(valid):
        return priorities

    slack = bins_remain_cap[valid] - item
    base_priority = 1.0 / (slack + small_eps)

    near_full_thresh = max(near_full_thresh_base, near_full_thresh_multiplier * item)
    base_priority[slack <= near_full_thresh] += base_priority_increment

    priorities[valid] = base_priority

    if np.random.rand() < priority_v2._epsilon:
        rand_scores = np.random.rand(n)
        rand_scores[~valid] = -np.inf
        priorities = rand_scores

    return priorities
