```python
import numpy as np

# Priority function for online bin packing
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Return priority scores combining best-fit, smooth near‑full boost,
    exact‑fit bonus, and adaptive ε‑greedy exploration.
    """
    n = bins_remain_cap.size
    valid = bins_remain_cap >= item
    scores = np.full(n, -np.inf, dtype=float)
    if not valid.any():
        return scores

    slack = bins_remain_cap[valid] - item
    tiny = 1e-6
    smooth_boost = 0.5 / (slack + tiny)
    smooth_boost = np.minimum(smooth_boost, 5.0)

    base = -slack
    threshold = max(0.02, 0.05 * item)
    near_full_mask = slack <= threshold
    exact_mask = np.isclose(slack, 0.0, atol=1e-9)

    near_full_boost = 0.5
    exact_fit_boost = 1.0
    scores[valid] = base + smooth_boost + near_full_boost * near_full_mask + exact_fit_boost * exact_mask

    # adaptive epsilon-greedy exploration
    epsilon_factor = 0.5
    tie_breaker = 1.0
    epsilon = epsilon_factor * (1 - np.count_nonzero(valid) / n)
    if np.random.rand() < epsilon:
        idx = np.random.choice(np.flatnonzero(valid))
        scores[idx] += tie_breaker

    return scores
```
