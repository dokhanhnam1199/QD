```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit slack + capped inverse‑slack boost + ratio, with ε‑greedy and jitter."""
    n = bins_remain_cap.size
    feasible = bins_remain_cap >= item
    priorities = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priorities
    slack = bins_remain_cap[feasible] - item
    base = -slack
    ratio = item / bins_remain_cap[feasible]
    tiny = 1e-8
    boost_factor = 0.5
    max_boost = 3.0
    boost = np.minimum(boost_factor / (slack + tiny), max_boost)
    scores = base + boost + 0.2 * ratio
    scores += np.random.rand(scores.shape[0]) * 1e-6
    priorities[feasible] = scores
    epsilon = 0.02
    if np.random.rand() < epsilon:
        priorities[feasible] = np.random.rand(scores.shape[0])
    return priorities
```
