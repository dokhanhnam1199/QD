```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive ε‑greedy best‑fit with near‑full/exact‑fit boost and deterministic jitter."""
    if not hasattr(priority_v2, "epsilon"):
        priority_v2.epsilon = 0.2
        priority_v2.epsilon_min = 0.01
        priority_v2.epsilon_decay = 0.995
        priority_v2.step = 0
    priority_v2.step += 1
    priority_v2.epsilon = max(priority_v2.epsilon_min, priority_v2.epsilon * priority_v2.epsilon_decay)
    n = bins_remain_cap.size
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    near_full_thresh = max(0.02, 0.05 * item)
    base[slack <= near_full_thresh] += 0.5
    base[slack <= 1e-9] += 0.3
    idx = np.where(feasible)[0]
    base += 1e-9 * idx
    if np.random.rand() < priority_v2.epsilon:
        scores[feasible] = np.random.rand(slack.size)
    else:
        scores[feasible] = base
    return scores
```
