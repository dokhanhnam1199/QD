```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Compute priority scores for bins: best‑fit (-slack) with near‑full and exact‑fit bonuses, decaying ε‑greedy exploration and tiny jitter."""
    # Initialize static ε‑greedy parameters on first call
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.2
        priority_v2._epsilon_min = 0.01
        priority_v2._epsilon_decay = 0.995
        priority_v2._step = 0
    # Update ε
    priority_v2._step += 1
    priority_v2._epsilon = max(priority_v2._epsilon_min,
                               priority_v2._epsilon * priority_v2._epsilon_decay)
    n = bins_remain_cap.size
    # Default to -inf for infeasible bins
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priorities
    slack = bins_remain_cap[feasible] - item
    base = -slack
    # Near‑full boost
    near_full_thresh = max(0.02, 0.05 * item)
    base[slack <= near_full_thresh] += 0.5
    # Exact‑fit boost
    base[slack <= 1e-9] += 1.0
    # Tiny jitter to break ties
    base += 1e-6 * np.random.rand(base.size)
    priorities[feasible] = base
    # ε‑greedy random exploration
    if np.random.rand() < priority_v2._epsilon:
        rand_scores = np.random.rand(n)
        rand_scores[~feasible] = -np.inf
        priorities = rand_scores
    return priorities
```
