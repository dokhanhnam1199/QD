```python
import numpy as np

def priority_v2(item, bins_remain_cap):
    """Inverse‑slack best‑fit with near‑full & exact‑fit boosts and ε‑greedy exploration."""
    n = bins_remain_cap.size
    priorities = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return priorities
    slack = bins_remain_cap[feasible] - item
    eps = np.finfo(float).eps
    scores = 1.0 / (slack + eps)
    near_full_thresh = max(0.02, 0.05 * item)
    scores[slack <= near_full_thresh] += 0.5
    scores[slack <= eps] += 3.0
    priorities[feasible] = scores
    exploration_prob = 0.1
    if np.random.rand() < exploration_prob:
        rand = np.random.rand(n)
        rand[~feasible] = -np.inf
        priorities = rand
    return priorities
```
