```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Hybrid best‑fit with ratio bias, near‑full/exact‑fit boosts, and adaptive ε‑greedy jitter.
    """
    # Initialize adaptive ε‑greedy parameters
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.2
        priority_v2._epsilon_min = 0.01
        priority_v2._epsilon_decay = 0.995
        priority_v2._step = 0
    priority_v2._step += 1
    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)

    n = bins_remain_cap.size
    priorities = np.full(n, -np.inf, dtype=float)

    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priorities

    slack = bins_remain_cap[feasible] - item

    # Best‑fit core with a mild ratio bias
    base = -slack + 0.2 * (item / bins_remain_cap[feasible])

    # Near‑full boost
    near_full_thresh = max(0.02, 0.05 * item)
    base[slack <= near_full_thresh] += 0.5

    # Exact‑fit boost
    base[slack <= 1e-9] += 0.7

    priorities[feasible] = base

    # Random exploration with decaying ε
    if np.random.rand() < priority_v2._epsilon:
        priorities[feasible] = np.random.rand(np.sum(feasible))

    # Tiny jitter to break ties
    priorities[feasible] += 1e-6 * np.random.rand(np.sum(feasible))

    return priorities
```
