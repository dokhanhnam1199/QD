```python
import numpy as np

_EPSILON = 0.05

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n = bins_remain_cap.size
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    valid = bins_remain_cap >= item
    if not np.any(valid):
        return priorities
    slack = bins_remain_cap[valid] - item
    base_score = -slack
    boost = (np.arange(n) / n) * 0.001
    priorities[valid] = base_score + boost[valid]
    max_remain = bins_remain_cap.max()
    if np.any(bins_remain_cap[valid] < max_remain):
        empty_bins = (bins_remain_cap == max_remain) & valid
        priorities[empty_bins] = -np.inf
    if np.random.rand() < _EPSILON:
        rand_scores = np.random.rand(n)
        rand_scores[~valid] = -np.inf
        priorities = rand_scores
    return priorities
```
