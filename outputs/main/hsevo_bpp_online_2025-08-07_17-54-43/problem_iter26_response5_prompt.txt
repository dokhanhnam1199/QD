{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Best\u2011fit with static \u03b5\u2011greedy exploration, ratio tie\u2011breaker, and index jitter.\"\"\"\n    # constant exploration probability\n    epsilon = 0.08\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    ratio = item / bins_remain_cap[feasible]\n    base += 0.05 * ratio\n    idx = np.flatnonzero(feasible)\n    base += 1e-6 * idx\n    scores[feasible] = base\n    if np.random.rand() < epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        scores = rand\n    return scores\n\n### Analyze & experience\n- - **Best vs Worst** \u2013 The best function uses an adaptive epsilon\u2011greedy scheme with a decaying epsilon, a negative\u2011slack base priority, a near\u2011full boost, and proper infeasibility handling. The worst is an incomplete stub that returns all \u2011\u221e scores, imports many unused modules, and lacks any real scoring logic.\n- **Second Best vs Second Worst** \u2013 The second best mirrors the best (adaptive epsilon, slack scoring, near\u2011full boost). The second worst is essentially identical to the worst: it contains no scoring logic and merely returns \u2011\u221e for all bins.\n- **1st vs 2nd** \u2013 These two functions are identical; both implement the same adaptive, near\u2011full\u2011boosted, best\u2011fit logic, so there is no performance difference.\n- **3rd vs 4th** \u2013 The 3rd function keeps the adaptive epsilon and near\u2011full logic. The 4th uses a static epsilon, simple best\u2011fit scoring, and only a tiny index offset for tie\u2011breaking; it lacks dynamic exploration or slack bonuses.\n- **Second Worst vs Worst** \u2013 Both are incomplete and return no priorities. The worst additionally imports unnecessary modules (random, math, scipy, torch), making it less efficient.\n- **Overall** \u2013 Top heuristics integrate adaptive exploration, negative\u2011slack base priority, near\u2011full boosts, ratio penalties, jitter, and robust infeasibility handling. Bottom heuristics miss these features or are syntactically incomplete, leading to poor or undefined behavior.\n- \n- **Keywords**: remaining capacity, deterministic tie\u2011break, capacity ordering, static parameters.  \n- **Advice**: Choose the bin with the smallest remaining capacity (raw free space) and break ties by a fixed priority; keep the scoring rule linear and plain.  \n- **Avoid**: adaptive \u03b5\u2011decay, near\u2011full, jitter, explicit infeasibility flags, multiplicative boosts, per\u2011item random mixing, softmax scaling, stateful parameters.  \n- **Explanation**: A simple deterministic, slack\u2011based heuristic stays transparent, eliminates hidden hyper\u2011parameters, and yields stable performance across diverse instances.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}