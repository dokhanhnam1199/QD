```python
import numpy as np

# Combines slack-based best fit with ratio scoring and adaptive ε‑greedy exploration
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best‑fit slack with item‑to‑bin ratio, adaptive ε‑greedy, and tie‑breaker."""
    n = bins_remain_cap.size
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    boost_factor = 0.5
    max_boost = 5.0
    tiny = 1e-6
    boost = np.minimum(boost_factor / (slack + tiny), max_boost)
    ratio = item / bins_remain_cap[feasible]
    scores[feasible] = base + boost + 0.1 * ratio
    if not hasattr(priority_v2, "_call_count"):
        priority_v2._call_count = 0
    priority_v2._call_count += 1
    eps = 0.05 * (1 - np.count_nonzero(feasible) / n)
    if np.random.rand() < eps:
        idx = np.random.choice(np.flatnonzero(feasible))
        scores[idx] += 1e-3
    return scores
```
