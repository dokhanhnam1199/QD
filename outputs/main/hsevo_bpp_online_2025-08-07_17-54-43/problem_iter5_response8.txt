```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive epsilon‑greedy best‑fit with near‑full boost.
    """
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.3
        priority_v2._epsilon_min = 0.05
        priority_v2._decay = 0.99
        priority_v2._step = 0
        priority_v2._boost_factor = 1.5
    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._decay)
    priority_v2._step += 1
    slack = bins_remain_cap - item
    feasible = slack >= 0
    eps_num = np.finfo(float).eps
    base_score = np.where(feasible, 1.0/(slack+eps_num), 0.0)
    near_full_thresh = 0.05 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.0
    near_full_mask = (slack <= near_full_thresh) & feasible
    base_score[near_full_mask] *= priority_v2._boost_factor
    random_score = np.random.rand(len(bins_remain_cap))
    scores = np.where(feasible, (1 - priority_v2._epsilon) * base_score + priority_v2._epsilon * random_score, -np.inf)
    return scores
```
