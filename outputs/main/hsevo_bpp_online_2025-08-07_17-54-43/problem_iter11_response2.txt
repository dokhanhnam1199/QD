```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by negative slack with inverse slack term, near‑full boost, and ε‑greedy exploration."""
    eps = 1e-12
    epsilon = 0.1
    n = bins_remain_cap.size
    scores = np.full(n, -np.inf, dtype=float)
    slack = bins_remain_cap - item
    feasible = slack >= 0
    if not np.any(feasible):
        return scores
    base = -slack[feasible]
    inv = 1.0 / (slack[feasible] + eps)
    base = base +  # combine best‑fit with inverse slack term
    0.1 * inv
    near_full_thresh = max(0.02, 0.05 * item)
    boost = np.zeros_like(base)
    exact_fit = slack[feasible] == 0
    near_full = slack[feasible] <= near_full_thresh
    boost[exact_fit] = 10.0
    boost[near_full] += 3.0
    scores[feasible] = base + boost
    if np.random.rand() < epsilon:
        rand = np.random.rand(n)
        rand[~feasible] = -np.inf
        return rand
    return scores
```
