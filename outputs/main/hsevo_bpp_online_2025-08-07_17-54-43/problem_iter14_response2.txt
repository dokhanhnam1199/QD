```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Inverse‑slack scoring with ε‑greedy random exploration and softmax normalization."""
    epsilon = 0.05
    n = bins_remain_cap.shape[0]
    scores = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = 1.0 / (slack + 1e-12)
    if np.random.rand() < epsilon:
        base = np.random.rand(base.shape[0])
    max_val = np.max(base)
    exp_vals = np.exp(base - max_val)
    probs = exp_vals / np.sum(exp_vals)
    scores[feasible] = probs
    return scores
```
