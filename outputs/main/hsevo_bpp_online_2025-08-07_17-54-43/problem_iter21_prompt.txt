{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords:** best\u2011fit core, capacity\u2011ratio scoring, deterministic selection, look\u2011ahead pruning, vectorized updates, clear documentation.  \n- **Advice:** Use a static capacity\u2011ratio score (item size\u202f/\u202fremaining bin space), apply a simple deterministic tie\u2011breaker, incorporate a one\u2011step look\u2011ahead to reject moves that create dead\u2011space, keep implementation fully vectorized the code and comment intent.  \n- **Avoid:** Adaptive \u03b5\u2011decay, jitter, near\u2011full/exact\u2011fit bonuses, multiplicative boosts, per\u2011item random mixing, stateful parameters, explicit infeasibility masks, heavy softmax, over\u2011parameterization.  \n- **Explanation:** This yields transparent, fast heuristics with minimal hyper\u2011parameters, reduces hidden bias, and eases maintenance while still guiding items toward tight fits.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}