```python
import numpy as np

# Priority for online bin packing: best‑fit core, ratio weight, near‑full & exact‑fit boosts,
# static ε‑greedy exploration, and tiny jitter for tie‑breaking.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit priority using negative slack, ratio weighting, near‑full & exact‑fit boosts, static ε‑greedy, jitter."""
    feasible = bins_remain_cap >= item
    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    if not np.any(feasible):
        return priorities
    slack = bins_remain_cap[feasible] - item
    base = -slack
    ratio = item / bins_remain_cap[feasible]
    ratio_weight = 0.1
    near_full_thresh = max(0.02, 0.05 * item)
    boost = np.zeros_like(base)
    boost[slack <= near_full_thresh] += 0.5
    boost[slack <= 1e-9] += 1.0
    deterministic = base + ratio_weight * ratio + boost
    deterministic += 1e-6 * np.random.rand(deterministic.size)
    epsilon = 0.05
    if np.random.rand() < epsilon:
        rand_scores = np.random.rand(bins_remain_cap.size)
        rand_scores[~feasible] = -np.inf
        priorities = rand_scores
    else:
        priorities[feasible] = deterministic
    return priorities
```
