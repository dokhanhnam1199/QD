```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive ε‑greedy priority: exact‑fit and near‑full bonuses, minimal jitter."""
    import numpy as np
    n = bins_remain_cap.size
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full(n, -np.inf, dtype=float)
    feasible_ratio = np.mean(feasible)
    epsilon = max(0.05, min(0.5, 0.5 * (1 - feasible_ratio) + 0.05))
    if np.random.rand() < epsilon:
        scores = np.random.rand(n)
        scores[~feasible] = -np.inf
        return scores
    slack = bins_remain_cap - item
    scores = np.full(n, -np.inf, dtype=float)
    scores[feasible] = slack[feasible]
    exact_mask = np.isclose(slack, 0)
    scores[exact_mask] += 1.0
    near_mask = np.full_like(bins_remain_cap, False, dtype=bool)
    near_mask[feasible] = (slack[feasible] > 0) & (slack[feasible] <= 0.05 * bins_remain_cap[feasible])
    scores[near_mask] += 0.5
    scores[feasible] += np.random.uniform(0, 1e-6, size=feasible.sum())
    return scores
```
