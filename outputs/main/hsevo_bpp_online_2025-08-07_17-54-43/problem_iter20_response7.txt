```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best-fit scoring with near-full/exact-fit boosts, ratio weighting, capped smooth boost, epsilon-greedy exploration, and jitter."""
    n = bins_remain_cap.size
    feasible = bins_remain_cap >= item
    scores = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    threshold = max(0.02, 0.05 * item)
    near_full = slack <= threshold
    exact = np.isclose(slack, 0.0, atol=1e-9)
    ratio = item / bins_remain_cap[feasible]
    smooth_boost = 0.5 / (slack + 1e-12)
    smooth_boost = np.minimum(smooth_boost, 5.0)
    scores[feasible] = base + 0.5 * near_full + 1.0 * exact + smooth_boost + 0.1 * ratio
    scores[feasible] += 1e-6 * np.random.rand(feasible.sum())
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.5
        priority_v2._epsilon_min = 0.05
        priority_v2._epsilon_decay = 0.99
    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)
    epsilon = priority_v2._epsilon
    if np.random.rand() < epsilon:
        idx = np.random.choice(np.flatnonzero(feasible))
        scores[idx] += 10.0
    return scores
```
