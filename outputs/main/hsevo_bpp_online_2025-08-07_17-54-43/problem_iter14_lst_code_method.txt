{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    valid = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, -1e9, dtype=float)\n    if np.any(valid):\n        slack = bins_remain_cap[valid] - item\n        priorities[valid] = -slack\n        valid_count = np.count_nonzero(valid)\n        epsilon = 0.05 * (1 - valid_count / n)\n        if np.random.rand() < epsilon:\n            idx = np.random.choice(np.flatnonzero(valid))\n            priorities[idx] += 1e-3\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    default_priority: float = -585775408519.5737,\n    epsilon_factor: float = 0.8199524253832372,\n    tie_breaker: float = 0.003761928048808475,\n) -> np.ndarray:\n    \"\"\"\n    Compute priorities for bins based on remaining capacity and item size.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be placed.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the bins.\n    default_priority : float, optional\n        Sentinel priority assigned to all bins initially (default: -1e9).\n    epsilon_factor : float, optional\n        Base factor used to compute epsilon for random tie\u2011breaking (default: 0.05).\n    tie_breaker : float, optional\n        Small positive increment added to break ties when the random condition is met (default: 1e-3).\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority values for each bin.\n    \"\"\"\n    n = bins_remain_cap.size\n    valid = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, default_priority, dtype=float)\n\n    if np.any(valid):\n        slack = bins_remain_cap[valid] - item\n        priorities[valid] = -slack\n        valid_count = np.count_nonzero(valid)\n        epsilon = epsilon_factor * (1 - valid_count / n)\n\n        if np.random.rand() < epsilon:\n            idx = np.random.choice(np.flatnonzero(valid))\n            priorities[idx] += tie_breaker\n\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    default_priority: float = -585775408519.5737,\n    epsilon_factor: float = 0.8199524253832372,\n    tie_breaker: float = 0.003761928048808475,\n) -> np.ndarray:\n    \"\"\"\n    Compute priorities for bins based on remaining capacity and item size.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be placed.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the bins.\n    default_priority : float, optional\n        Sentinel priority assigned to all bins initially (default: -1e9).\n    epsilon_factor : float, optional\n        Base factor used to compute epsilon for random tie\u2011breaking (default: 0.05).\n    tie_breaker : float, optional\n        Small positive increment added to break ties when the random condition is met (default: 1e-3).\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority values for each bin.\n    \"\"\"\n    n = bins_remain_cap.size\n    valid = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, default_priority, dtype=float)\n\n    if np.any(valid):\n        slack = bins_remain_cap[valid] - item\n        priorities[valid] = -slack\n        valid_count = np.count_nonzero(valid)\n        epsilon = epsilon_factor * (1 - valid_count / n)\n\n        if np.random.rand() < epsilon:\n            idx = np.random.choice(np.flatnonzero(valid))\n            priorities[idx] += tie_breaker\n\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    default_priority: float = -585775408519.5737,\n    epsilon_factor: float = 0.8199524253832372,\n    tie_breaker: float = 0.003761928048808475,\n) -> np.ndarray:\n    \"\"\"\n    Compute priorities for bins based on remaining capacity and item size.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be placed.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the bins.\n    default_priority : float, optional\n        Sentinel priority assigned to all bins initially (default: -1e9).\n    epsilon_factor : float, optional\n        Base factor used to compute epsilon for random tie\u2011breaking (default: 0.05).\n    tie_breaker : float, optional\n        Small positive increment added to break ties when the random condition is met (default: 1e-3).\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority values for each bin.\n    \"\"\"\n    n = bins_remain_cap.size\n    valid = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, default_priority, dtype=float)\n\n    if np.any(valid):\n        slack = bins_remain_cap[valid] - item\n        priorities[valid] = -slack\n        valid_count = np.count_nonzero(valid)\n        epsilon = epsilon_factor * (1 - valid_count / n)\n\n        if np.random.rand() < epsilon:\n            idx = np.random.choice(np.flatnonzero(valid))\n            priorities[idx] += tie_breaker\n\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\n# Inverse\u2011slack priority with simple \u03b5\u2011greedy exploration.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by inverse slack, using fixed \u03b5\u2011greedy random fallback.\"\"\"\n    eps = 1e-9\n    explore_prob = 0.1\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    scores[feasible] = 1.0 / (slack + eps)\n    if np.random.rand() < explore_prob:\n        scores[feasible] = np.random.rand(feasible.sum())\n    return scores\n\n[Heuristics 8th]\nimport numpy as np\n\n# Inverse\u2011slack priority with simple \u03b5\u2011greedy exploration.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by inverse slack, using fixed \u03b5\u2011greedy random fallback.\"\"\"\n    eps = 1e-9\n    explore_prob = 0.1\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    scores[feasible] = 1.0 / (slack + eps)\n    if np.random.rand() < explore_prob:\n        scores[feasible] = np.random.rand(feasible.sum())\n    return scores\n\n[Heuristics 9th]\nimport numpy as np\n\n# Inverse\u2011slack priority with simple \u03b5\u2011greedy exploration.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by inverse slack, using fixed \u03b5\u2011greedy random fallback.\"\"\"\n    eps = 1e-9\n    explore_prob = 0.1\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    scores[feasible] = 1.0 / (slack + eps)\n    if np.random.rand() < explore_prob:\n        scores[feasible] = np.random.rand(feasible.sum())\n    return scores\n\n[Heuristics 10th]\nimport numpy as np\n\n# Priority function using best\u2011fit, smooth tightness boost, jitter, and fixed \u03b5\u2011greedy.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by negative slack plus smooth boost for tight fits; penalize infeasibility; add jitter; \u03b5\u2011greedy random fallback.\"\"\"\n    eps = 0.05\n    if np.random.rand() < eps:\n        rand = np.random.rand(bins_remain_cap.shape[0])\n        rand[bins_remain_cap < item] = -1e9\n        return rand\n    slack = bins_remain_cap - item\n    feasible = slack >= 0\n    scores = np.full(bins_remain_cap.shape, -1e9, dtype=float)\n    if not np.any(feasible):\n        return scores\n    base = -slack[feasible]\n    tiny = 1e-6\n    boost_factor = 0.5\n    max_boost = 5.0\n    boost = boost_factor / (slack[feasible] + tiny)\n    boost = np.minimum(boost, max_boost)\n    scores[feasible] = base + boost\n    jitter = 0.01 * item\n    if jitter > 0:\n        scores[feasible] += np.random.uniform(-jitter, jitter, size=feasible.sum())\n    return scores\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    epsilon = 0.05\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = 1.0 / (slack + 1e-12)\n    near_full_thresh = max(0.02, 0.05 * item)\n    base += np.where(slack <= near_full_thresh, 0.5, 0.0)\n    base += np.where(slack <= 1e-12, 2.0, 0.0)\n    scores[feasible] = base\n    if np.random.rand() < epsilon:\n        scores[feasible] = np.random.rand(feasible.sum())\n    return scores\n\n[Heuristics 12th]\nimport numpy as np\n\n# Priority function using best\u2011fit, smooth tightness boost, jitter, and fixed \u03b5\u2011greedy.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by negative slack plus smooth boost for tight fits; penalize infeasibility; add jitter; \u03b5\u2011greedy random fallback.\"\"\"\n    eps = 0.05\n    if np.random.rand() < eps:\n        rand = np.random.rand(bins_remain_cap.shape[0])\n        rand[bins_remain_cap < item] = -1e9\n        return rand\n    slack = bins_remain_cap - item\n    feasible = slack >= 0\n    scores = np.full(bins_remain_cap.shape, -1e9, dtype=float)\n    if not np.any(feasible):\n        return scores\n    base = -slack[feasible]\n    tiny = 1e-6\n    boost_factor = 0.5\n    max_boost = 5.0\n    boost = boost_factor / (slack[feasible] + tiny)\n    boost = np.minimum(boost, max_boost)\n    scores[feasible] = base + boost\n    jitter = 0.01 * item\n    if jitter > 0:\n        scores[feasible] += np.random.uniform(-jitter, jitter, size=feasible.sum())\n    return scores\n\n[Heuristics 13th]\nimport numpy as np\n\n# Priority function using best\u2011fit, smooth tightness boost, jitter, and fixed \u03b5\u2011greedy.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by negative slack plus smooth boost for tight fits; penalize infeasibility; add jitter; \u03b5\u2011greedy random fallback.\"\"\"\n    eps = 0.05\n    if np.random.rand() < eps:\n        rand = np.random.rand(bins_remain_cap.shape[0])\n        rand[bins_remain_cap < item] = -1e9\n        return rand\n    slack = bins_remain_cap - item\n    feasible = slack >= 0\n    scores = np.full(bins_remain_cap.shape, -1e9, dtype=float)\n    if not np.any(feasible):\n        return scores\n    base = -slack[feasible]\n    tiny = 1e-6\n    boost_factor = 0.5\n    max_boost = 5.0\n    boost = boost_factor / (slack[feasible] + tiny)\n    boost = np.minimum(boost, max_boost)\n    scores[feasible] = base + boost\n    jitter = 0.01 * item\n    if jitter > 0:\n        scores[feasible] += np.random.uniform(-jitter, jitter, size=feasible.sum())\n    return scores\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    epsilon = 0.05\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = 1.0 / (slack + 1e-12)\n    near_full_thresh = max(0.02, 0.05 * item)\n    base += np.where(slack <= near_full_thresh, 0.5, 0.0)\n    base += np.where(slack <= 1e-12, 2.0, 0.0)\n    scores[feasible] = base\n    if np.random.rand() < epsilon:\n        scores[feasible] = np.random.rand(feasible.sum())\n    return scores\n\n[Heuristics 15th]\nimport numpy as np\n\n# Best-fit scoring with \u03b5\u2011greedy exploration and near\u2011full/exact\u2011fit boosts\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Best-fit scoring with \u03b5\u2011greedy exploration and near\u2011full/exact\u2011fit boosts, prioritizing bins with minimal slack while exploring occasionally.\n    \"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.1\n        priority_v2.near_full_thresh = 0.05\n        priority_v2.near_full_boost = 0.5\n        priority_v2.exact_fit_boost = 1.0\n    eps = priority_v2.epsilon\n    feasible = bins_remain_cap >= item\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    if np.random.rand() < eps:\n        scores[feasible] = np.random.rand(feasible.sum())\n    else:\n        slack = bins_remain_cap[feasible] - item\n        base = -slack\n        near_full = slack <= priority_v2.near_full_thresh\n        base[near_full] += priority_v2.near_full_boost\n        exact_fit = slack == 0\n        base[exact_fit] += priority_v2.exact_fit_boost\n        scores[feasible] = base\n    return scores\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Static epsilon\u2011greedy best\u2011fit: negative slack, +boost for near\u2011full and exact fits.\"\"\"\n    epsilon = 0.1\n    near_full_factor = 0.05\n    near_full_abs_thresh = 0.02\n    near_full_boost = 0.5\n    exact_fit_boost = 1.0\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return scores\n    # Compute slack for feasible bins\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    # Apply near\u2011full boost\n    near_full_thresh = max(near_full_abs_thresh, near_full_factor * item)\n    base[slack <= near_full_thresh] += near_full_boost\n    # Apply exact\u2011fit boost\n    base[np.isclose(slack, 0.0, atol=1e-9)] += exact_fit_boost\n    scores[feasible] = base\n    # \u03b5\u2011greedy exploration\n    if np.random.rand() < epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        scores = rand\n    return scores\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Static epsilon\u2011greedy best\u2011fit: negative slack, +boost for near\u2011full and exact fits.\"\"\"\n    epsilon = 0.1\n    near_full_factor = 0.05\n    near_full_abs_thresh = 0.02\n    near_full_boost = 0.5\n    exact_fit_boost = 1.0\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return scores\n    # Compute slack for feasible bins\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    # Apply near\u2011full boost\n    near_full_thresh = max(near_full_abs_thresh, near_full_factor * item)\n    base[slack <= near_full_thresh] += near_full_boost\n    # Apply exact\u2011fit boost\n    base[np.isclose(slack, 0.0, atol=1e-9)] += exact_fit_boost\n    scores[feasible] = base\n    # \u03b5\u2011greedy exploration\n    if np.random.rand() < epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        scores = rand\n    return scores\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit with small \u03b5\u2011greedy exploration and item\u2011scaled near\u2011full boost.\"\"\"\n    epsilon = 0.1\n    boost = 0.5\n    near_full_thresh = max(0.02, 0.05 * item)\n    feasible = bins_remain_cap >= item\n    n = bins_remain_cap.shape[0]\n    scores = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full = slack <= near_full_thresh\n    base[near_full] += boost\n    scores[feasible] = base\n    if np.random.rand() < epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~feasible] = -np.inf\n        scores = rand_scores\n    return scores\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit with small \u03b5\u2011greedy exploration and item\u2011scaled near\u2011full boost.\"\"\"\n    epsilon = 0.1\n    boost = 0.5\n    near_full_thresh = max(0.02, 0.05 * item)\n    feasible = bins_remain_cap >= item\n    n = bins_remain_cap.shape[0]\n    scores = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full = slack <= near_full_thresh\n    base[near_full] += boost\n    scores[feasible] = base\n    if np.random.rand() < epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~feasible] = -np.inf\n        scores = rand_scores\n    return scores\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit with small \u03b5\u2011greedy exploration and item\u2011scaled near\u2011full boost.\"\"\"\n    epsilon = 0.1\n    boost = 0.5\n    near_full_thresh = max(0.02, 0.05 * item)\n    feasible = bins_remain_cap >= item\n    n = bins_remain_cap.shape[0]\n    scores = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full = slack <= near_full_thresh\n    base[near_full] += boost\n    scores[feasible] = base\n    if np.random.rand() < epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~feasible] = -np.inf\n        scores = rand_scores\n    return scores\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}