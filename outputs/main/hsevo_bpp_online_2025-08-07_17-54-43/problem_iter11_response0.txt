```python
import numpy as np

# Priority function using best‑fit, smooth tightness boost, jitter, and fixed ε‑greedy.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by negative slack plus smooth boost for tight fits; penalize infeasibility; add jitter; ε‑greedy random fallback."""
    eps = 0.05
    if np.random.rand() < eps:
        rand = np.random.rand(bins_remain_cap.shape[0])
        rand[bins_remain_cap < item] = -1e9
        return rand
    slack = bins_remain_cap - item
    feasible = slack >= 0
    scores = np.full(bins_remain_cap.shape, -1e9, dtype=float)
    if not np.any(feasible):
        return scores
    base = -slack[feasible]
    tiny = 1e-6
    boost_factor = 0.5
    max_boost = 5.0
    boost = boost_factor / (slack[feasible] + tiny)
    boost = np.minimum(boost, max_boost)
    scores[feasible] = base + boost
    jitter = 0.01 * item
    if jitter > 0:
        scores[feasible] += np.random.uniform(-jitter, jitter, size=feasible.sum())
    return scores
```
