{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    valid = bins_remain_cap >= item\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base = -slack / bins_remain_cap[valid]\n    base += np.isclose(slack, 0.0, atol=1e-9) * 1.0\n    base += (slack <= 0.05 * bins_remain_cap[valid]) * 0.5\n    base += (np.random0 if False else (np.random.rand(valid.sum()) - 0.5) * 1e-6)\n    priorities[valid] = base\n    feasible = np.count_nonzero(valid)\n    epsilon = 0.05 * (1 - feasible / n)\n    if np.random.rand() < epsilon:\n        idx = np.random.choice(np.flatnonzero(valid))\n        priorities[idx] += 1.0\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\n# Combines slack-based best fit with ratio scoring and adaptive \u03b5\u2011greedy exploration\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best\u2011fit slack with item\u2011to\u2011bin ratio, adaptive \u03b5\u2011greedy, and tie\u2011breaker.\"\"\"\n    n = bins_remain_cap.size\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    boost_factor = 0.5\n    max_boost = 5.0\n    tiny = 1e-6\n    boost = np.minimum(boost_factor / (slack + tiny), max_boost)\n    ratio = item / bins_remain_cap[feasible]\n    scores[feasible] = base + boost + 0.1 * ratio\n    if not hasattr(priority_v2, \"_call_count\"):\n        priority_v2._call_count = 0\n    priority_v2._call_count += 1\n    eps = 0.05 * (1 - np.count_nonzero(feasible) / n)\n    if np.random.rand() < eps:\n        idx = np.random.choice(np.flatnonzero(feasible))\n        scores[idx] += 1e-3\n    return scores\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    return np.where(bins_remain_cap >= item, item / bins_remain_cap, -np.inf)\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best-fit with near-full/exact-fit boost, ratio bias, and decaying epsilon-greedy jitter.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    # The above line is redundant; no comments allowed\n    if not np.any(feasible):\n        return priorities\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    ratio = item / bins_remain_cap[feasible]\n    base += 0.3 * ratio\n    near_full_thresh = max(0.02, 0.05 * item)\n    base[slack <= near_full_thresh] += 0.5\n    exact_fit_thresh = 1e-9\n    base[slack <= exact_fit_thresh] += 0.7\n    priorities[feasible] = base\n    if np.random.rand() < priority_v2._epsilon:\n        jitter = np.random.rand(np.sum(feasible)) * 0.01\n        priorities[feasible] += jitter\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\n# Combines slack-based best fit with ratio scoring and adaptive \u03b5\u2011greedy exploration\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best\u2011fit slack with item\u2011to\u2011bin ratio, adaptive \u03b5\u2011greedy, and tie\u2011breaker.\"\"\"\n    n = bins_remain_cap.size\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    boost_factor = 0.5\n    max_boost = 5.0\n    tiny = 1e-6\n    boost = np.minimum(boost_factor / (slack + tiny), max_boost)\n    ratio = item / bins_remain_cap[feasible]\n    scores[feasible] = base + boost + 0.1 * ratio\n    if not hasattr(priority_v2, \"_call_count\"):\n        priority_v2._call_count = 0\n    priority_v2._call_count += 1\n    eps = 0.05 * (1 - np.count_nonzero(feasible) / n)\n    if np.random.rand() < eps:\n        idx = np.random.choice(np.flatnonzero(feasible))\n        scores[idx] += 1e-3\n    return scores\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    return np.where(bins_remain_cap >= item, item / bins_remain_cap, -np.inf)\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit priority with smooth near\u2011full boost, exact\u2011fit bonus, fill\u2011ratio weighting, and adaptive \u03b5\u2011greedy tie\u2011breaker.\"\"\"\n    n = bins_remain_cap.size\n    feasible = bins_remain_cap >= item\n    scores = np.full(n, -np.inf, dtype=float)\n    if not feasible.any():\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    tiny = 1e-6\n    smooth_boost = 0.5 / (slack + tiny)\n    smooth_boost = np.minimum(smooth_boost, 5.0)\n    threshold = max(0.02, 0.05 * item)\n    near_full = slack <= threshold\n    exact = np.isclose(slack, 0.0, atol=1e-9)\n    fill_ratio = item / bins_remain_cap[feasible]\n    scores[feasible] = base + smooth_boost + 0.5 * near_full + 1.0 * exact + 0.1 * fill_ratio\n    epsilon_factor = 0.5\n    epsilon = epsilon_factor * (1 - feasible.sum() / n)\n    if np.random.rand() < epsilon:\n        idx = np.random.choice(np.flatnonzero(feasible))\n        scores[idx] += 1.0\n    return scores\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit priority with smooth near\u2011full boost, exact\u2011fit bonus, fill\u2011ratio weighting, and adaptive \u03b5\u2011greedy tie\u2011breaker.\"\"\"\n    n = bins_remain_cap.size\n    feasible = bins_remain_cap >= item\n    scores = np.full(n, -np.inf, dtype=float)\n    if not feasible.any():\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    tiny = 1e-6\n    smooth_boost = 0.5 / (slack + tiny)\n    smooth_boost = np.minimum(smooth_boost, 5.0)\n    threshold = max(0.02, 0.05 * item)\n    near_full = slack <= threshold\n    exact = np.isclose(slack, 0.0, atol=1e-9)\n    fill_ratio = item / bins_remain_cap[feasible]\n    scores[feasible] = base + smooth_boost + 0.5 * near_full + 1.0 * exact + 0.1 * fill_ratio\n    epsilon_factor = 0.5\n    epsilon = epsilon_factor * (1 - feasible.sum() / n)\n    if np.random.rand() < epsilon:\n        idx = np.random.choice(np.flatnonzero(feasible))\n        scores[idx] += 1.0\n    return scores\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Compute priority scores for bins: best\u2011fit (-slack) with near\u2011full and exact\u2011fit bonuses, decaying \u03b5\u2011greedy exploration and tiny jitter.\"\"\"\n    # Initialize static \u03b5\u2011greedy parameters on first call\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    # Update \u03b5\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min,\n                               priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    # Default to -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return priorities\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    # Near\u2011full boost\n    near_full_thresh = max(0.02, 0.05 * item)\n    base[slack <= near_full_thresh] += 0.5\n    # Exact\u2011fit boost\n    base[slack <= 1e-9] += 1.0\n    # Tiny jitter to break ties\n    base += 1e-6 * np.random.rand(base.size)\n    priorities[feasible] = base\n    # \u03b5\u2011greedy random exploration\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~feasible] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Compute priority scores for bins: best\u2011fit (-slack) with near\u2011full and exact\u2011fit bonuses, decaying \u03b5\u2011greedy exploration and tiny jitter.\"\"\"\n    # Initialize static \u03b5\u2011greedy parameters on first call\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    # Update \u03b5\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min,\n                               priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    # Default to -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return priorities\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    # Near\u2011full boost\n    near_full_thresh = max(0.02, 0.05 * item)\n    base[slack <= near_full_thresh] += 0.5\n    # Exact\u2011fit boost\n    base[slack <= 1e-9] += 1.0\n    # Tiny jitter to break ties\n    base += 1e-6 * np.random.rand(base.size)\n    priorities[feasible] = base\n    # \u03b5\u2011greedy random exploration\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~feasible] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Compute priority scores for bins: best\u2011fit (-slack) with near\u2011full and exact\u2011fit bonuses, decaying \u03b5\u2011greedy exploration and tiny jitter.\"\"\"\n    # Initialize static \u03b5\u2011greedy parameters on first call\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    # Update \u03b5\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min,\n                               priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    # Default to -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return priorities\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    # Near\u2011full boost\n    near_full_thresh = max(0.02, 0.05 * item)\n    base[slack <= near_full_thresh] += 0.5\n    # Exact\u2011fit boost\n    base[slack <= 1e-9] += 1.0\n    # Tiny jitter to break ties\n    base += 1e-6 * np.random.rand(base.size)\n    priorities[feasible] = base\n    # \u03b5\u2011greedy random exploration\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~feasible] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best-fit scoring with negative slack, near\u2011full and exact\u2011fit boosts, decaying \u03b5\u2011greedy exploration, and tiny jitter for tie\u2011breaking.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min,\n                               priority_v2._epsilon * priority_v2._epsilon_decay)\n\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n\n    near_full_thresh = max(0.02, 0.05 * item)\n    near_full_boost = 0.5\n    exact_fit_thresh = 1e-9\n    exact_fit_boost = 1.0\n\n    boost = np.zeros_like(base)\n    boost[slack <= near_full_thresh] += near_full_boost\n    boost[slack <= exact_fit_thresh] += exact_fit_boost\n\n    deterministic = base + boost\n    deterministic += 1e-6 * np.random.rand(deterministic.size)  # tiny jitter\n\n    if np.random.rand() < priority_v2._epsilon:\n        rand_vals = np.random.rand(n)\n        rand_vals[~feasible] = -np.inf\n        scores = rand_vals\n    else:\n        scores[feasible] = deterministic\n\n    return scores\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best-fit scoring with negative slack, near\u2011full and exact\u2011fit boosts, decaying \u03b5\u2011greedy exploration, and tiny jitter for tie\u2011breaking.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min,\n                               priority_v2._epsilon * priority_v2._epsilon_decay)\n\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n\n    near_full_thresh = max(0.02, 0.05 * item)\n    near_full_boost = 0.5\n    exact_fit_thresh = 1e-9\n    exact_fit_boost = 1.0\n\n    boost = np.zeros_like(base)\n    boost[slack <= near_full_thresh] += near_full_boost\n    boost[slack <= exact_fit_thresh] += exact_fit_boost\n\n    deterministic = base + boost\n    deterministic += 1e-6 * np.random.rand(deterministic.size)  # tiny jitter\n\n    if np.random.rand() < priority_v2._epsilon:\n        rand_vals = np.random.rand(n)\n        rand_vals[~feasible] = -np.inf\n        scores = rand_vals\n    else:\n        scores[feasible] = deterministic\n\n    return scores\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best-fit scoring with negative slack, near\u2011full and exact\u2011fit boosts, decaying \u03b5\u2011greedy exploration, and tiny jitter for tie\u2011breaking.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min,\n                               priority_v2._epsilon * priority_v2._epsilon_decay)\n\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n\n    near_full_thresh = max(0.02, 0.05 * item)\n    near_full_boost = 0.5\n    exact_fit_thresh = 1e-9\n    exact_fit_boost = 1.0\n\n    boost = np.zeros_like(base)\n    boost[slack <= near_full_thresh] += near_full_boost\n    boost[slack <= exact_fit_thresh] += exact_fit_boost\n\n    deterministic = base + boost\n    deterministic += 1e-6 * np.random.rand(deterministic.size)  # tiny jitter\n\n    if np.random.rand() < priority_v2._epsilon:\n        rand_vals = np.random.rand(n)\n        rand_vals[~feasible] = -np.inf\n        scores = rand_vals\n    else:\n        scores[feasible] = deterministic\n\n    return scores\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best-fit scoring with negative slack, near\u2011full and exact\u2011fit boosts, decaying \u03b5\u2011greedy exploration, and tiny jitter for tie\u2011breaking.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min,\n                               priority_v2._epsilon * priority_v2._epsilon_decay)\n\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n\n    near_full_thresh = max(0.02, 0.05 * item)\n    near_full_boost = 0.5\n    exact_fit_thresh = 1e-9\n    exact_fit_boost = 1.0\n\n    boost = np.zeros_like(base)\n    boost[slack <= near_full_thresh] += near_full_boost\n    boost[slack <= exact_fit_thresh] += exact_fit_boost\n\n    deterministic = base + boost\n    deterministic += 1e-6 * np.random.rand(deterministic.size)  # tiny jitter\n\n    if np.random.rand() < priority_v2._epsilon:\n        rand_vals = np.random.rand(n)\n        rand_vals[~feasible] = -np.inf\n        scores = rand_vals\n    else:\n        scores[feasible] = deterministic\n\n    return scores\n\n[Heuristics 18th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    boost_factor: float = 0.7616942763907281,\n    max_boost: float = 5.806140777564599,\n    tiny: float = 0.00034508672935174283,\n    ratio_weight: float = 0.5247167888808204,\n    eps_base: float = 0.08986838647668337,\n    tie_breaker_boost: float = 0.000340990722271134,\n) -> np.ndarray:\n    \"\"\"Combines best\u2011fit slack with item\u2011to\u2011bin ratio, adaptive \u03b5\u2011greedy, and tie\u2011breaker.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to place.\n    bins_remain_cap : np.ndarray\n        Remaining capacity of each bin.\n    boost_factor : float, optional\n        Weight for the slack\u2011based boost (default 0.5).\n    max_boost : float, optional\n        Upper bound for the boost term (default 5.0).\n    tiny : float, optional\n        Small constant to avoid division\u2011by\u2011zero (default 1e-6).\n    ratio_weight : float, optional\n        Weight applied to the item\u2011to\u2011bin ratio term (default 0.1).\n    eps_base : float, optional\n        Base factor for the adaptive \u03b5\u2011greedy probability (default 0.05).\n    tie_breaker_boost : float, optional\n        Small boost added when the \u03b5\u2011greedy path is taken (default 1e-3).\n\n    Returns\n    -------\n    np.ndarray\n        Scores for each bin (``-inf`` for infeasible bins).\n    \"\"\"\n    n = bins_remain_cap.size\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return scores\n\n[Heuristics 19th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    boost_factor: float = 0.7616942763907281,\n    max_boost: float = 5.806140777564599,\n    tiny: float = 0.00034508672935174283,\n    ratio_weight: float = 0.5247167888808204,\n    eps_base: float = 0.08986838647668337,\n    tie_breaker_boost: float = 0.000340990722271134,\n) -> np.ndarray:\n    \"\"\"Combines best\u2011fit slack with item\u2011to\u2011bin ratio, adaptive \u03b5\u2011greedy, and tie\u2011breaker.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to place.\n    bins_remain_cap : np.ndarray\n        Remaining capacity of each bin.\n    boost_factor : float, optional\n        Weight for the slack\u2011based boost (default 0.5).\n    max_boost : float, optional\n        Upper bound for the boost term (default 5.0).\n    tiny : float, optional\n        Small constant to avoid division\u2011by\u2011zero (default 1e-6).\n    ratio_weight : float, optional\n        Weight applied to the item\u2011to\u2011bin ratio term (default 0.1).\n    eps_base : float, optional\n        Base factor for the adaptive \u03b5\u2011greedy probability (default 0.05).\n    tie_breaker_boost : float, optional\n        Small boost added when the \u03b5\u2011greedy path is taken (default 1e-3).\n\n    Returns\n    -------\n    np.ndarray\n        Scores for each bin (``-inf`` for infeasible bins).\n    \"\"\"\n    n = bins_remain_cap.size\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return scores\n\n[Heuristics 20th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    boost_factor: float = 0.7616942763907281,\n    max_boost: float = 5.806140777564599,\n    tiny: float = 0.00034508672935174283,\n    ratio_weight: float = 0.5247167888808204,\n    eps_base: float = 0.08986838647668337,\n    tie_breaker_boost: float = 0.000340990722271134,\n) -> np.ndarray:\n    \"\"\"Combines best\u2011fit slack with item\u2011to\u2011bin ratio, adaptive \u03b5\u2011greedy, and tie\u2011breaker.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to place.\n    bins_remain_cap : np.ndarray\n        Remaining capacity of each bin.\n    boost_factor : float, optional\n        Weight for the slack\u2011based boost (default 0.5).\n    max_boost : float, optional\n        Upper bound for the boost term (default 5.0).\n    tiny : float, optional\n        Small constant to avoid division\u2011by\u2011zero (default 1e-6).\n    ratio_weight : float, optional\n        Weight applied to the item\u2011to\u2011bin ratio term (default 0.1).\n    eps_base : float, optional\n        Base factor for the adaptive \u03b5\u2011greedy probability (default 0.05).\n    tie_breaker_boost : float, optional\n        Small boost added when the \u03b5\u2011greedy path is taken (default 1e-3).\n\n    Returns\n    -------\n    np.ndarray\n        Scores for each bin (``-inf`` for infeasible bins).\n    \"\"\"\n    n = bins_remain_cap.size\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return scores\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}