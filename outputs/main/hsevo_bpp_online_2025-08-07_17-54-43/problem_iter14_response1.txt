```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit scoring with inverse‑slack boost and adaptive ε‑greedy tie‑breaker."""
    n = bins_remain_cap.size
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap - item
    base = -slack[feasible]
    tiny = 1e-6
    boost_factor = 0.5
    max_boost = 5.0
    boost = boost_factor / (slack[feasible] + tiny)
    boost = np.minimum(boost, max_boost)
    scores[feasible] = base + boost
    eps = 0.05 * (1 - np.count_nonzero(feasible) / n)
    if np.random.rand() < eps:
        idx = np.random.choice(np.flatnonzero(feasible))
        scores[idx] += 1e-3
    return scores
```
