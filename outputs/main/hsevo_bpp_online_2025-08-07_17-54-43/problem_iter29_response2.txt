```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit scoring with ratio penalty, near‑full boost, tie‑breaker, and decaying epsilon jitter."""
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.5
        priority_v2._epsilon_min = 0.01
        priority_v2._epsilon_decay = 0.995
    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)
    eps = priority_v2._epsilon
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priorities
    cap_feas = bins_remain_cap[feasible]
    slack = cap_feas - item
    base = -slack
    base += 0.05 * (item / cap_feas)
    base += 0.5 * (slack <= 0.05 * cap_feas)
    idx = np.flatnonzero(feasible)
    base += 1e-6 * idx
    if eps > 0:
        base += eps * 1e-4 * np.random.rand(base.shape[0])
    priorities[feasible] = base
    return priorities
```
