```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit priority with exact/near‑full bonuses, tiny jitter, and adaptive ε‑greedy."""
    # Feasibility mask
    valid = bins_remain_cap >= item
    n = bins_remain_cap.size
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(valid):
        return priorities

    # Slack and base priority (smaller slack → higher score)
    slack = bins_remain_cap[valid] - item
    base = -slack

    # Exact‑fit boost
    base[np.isclose(slack, 0.0, atol=1e-9)] += 1.0
    # Near‑full boost (≤5 % of bin capacity left)
    base[slack <= 0.05 * bins_remain_cap[valid]] += 0.5? Actually we need to add 0.5.

I realize there's a mistake in the last line. The correct code should be:

```python
    base[slack <= 0.05 * bins_remain_cap[valid]] += 0.5
```

Let's fix the whole function:

```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit priority with exact/near‑full bonuses, tiny jitter, and adaptive ε‑greedy."""
    valid = bins_remain_cap >= item
    n = bins_remain_cap.size
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(valid):
        return priorities

    slack = bins_remain_cap[valid] - item
    base = -slack
    base[np.isclose(slack, 0.0, atol=1e-9)] += 1.0
    base[slack <= 0.05 * bins_remain_cap[valid]] += 0.5
    base += (np.random.rand(valid.sum()) - 0.5) * 1.0e-6
    priorities[valid] = base

    epsilon = 0.05 * (1 - valid.sum() / n)
    if np.random.rand() < epsilon:
        idx = np.random.choice(np.flatnonzero(valid))
        priorities[idx] += 1.0
    return priorities
```
