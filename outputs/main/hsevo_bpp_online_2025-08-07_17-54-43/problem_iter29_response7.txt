```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit with epsilon‑greedy, ratio tie‑breaker, and near‑full boost."""
    n = bins_remain_cap.size
    scores = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    ratio = item / bins_remain_cap[feasible]
    ratio_weight = 0.02
    near_full_threshold = 0.05
    near_full_bonus = 0.1
    near_full = np.where(slack <= near_full_threshold * bins_remain_cap[feasible], near_full_bonus, 0.0)
    deterministic = base + ratio_weight * ratio + near_full
    idx = np.flatnonzero(feasible)
    deterministic += idx * 1e-9
    epsilon = 0.05
    if np.random.rand() < epsilon:
        scores[feasible] = np.random.rand(deterministic.shape[0])
    else:
        jitter = np.random.uniform(0, 1e-6, size=deterministic.shape)
        scores[feasible] = deterministic + jitter
    return scores
```
