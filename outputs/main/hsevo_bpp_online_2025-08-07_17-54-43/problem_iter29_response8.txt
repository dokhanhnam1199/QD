```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive ε‑greedy best‑fit: favors smallest slack, boosts near‑full bins, adds jitter, infeasibility = -inf."""
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.2          # initial exploration rate
        priority_v2._epsilon_min = 0.01    # floor for ε
        # decay factor per item
        priority_v2._epsilon_decay = 0.995
        priority_v2._step = 0
    priority_v2._step += 1
    # exponential decay of ε
    priority_v2._epsilon = max(priority_v2._epsilon_min,
                               priority_v2._epsilon * priority_v2._epsilon_decay)
    n = bins_remain_cap.shape[0]
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack                         # best‑fit core (smaller slack → higher score)
    near_full_thresh = max(0.02, 0.05 * item)
    base[slack <= near_full_thresh] += 0.5   # boost bins that are almost full
    idx = np.flatnonzero(feasible)
    base += 1e-9 * idx                    # tiny tie‑breaker by bin index
    base += np.random.rand(base.size) * 1e-6   # jitter to break exact ties
    scores[feasible] = base
    if np.random.rand() < priority_v2._epsilon:
        rand_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
        rand_scores[feasible] = np.random.rand(feasible.sum())
        scores = rand_scores               # ε‑greedy random exploration
    return scores
```
