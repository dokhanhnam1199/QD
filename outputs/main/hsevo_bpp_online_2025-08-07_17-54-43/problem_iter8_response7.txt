```python
import numpy as np

# Fixed ε‑greedy best‑fit with modest near‑full boost.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by -slack, boost near‑full bins; ε‑greedy random fallback."""
    if not hasattr(priority_v2, "epsilon"):
        priority_v2.epsilon = 0.2          # exploration probability
        priority_v2.near_full_factor = 0.05
        priority_v2.boost = 0.5            # additive boost for tight fits
    n = bins_remain_cap.size
    scores = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    near_full_thresh = max(0.02, priority_v2.near_full_factor * item)
    base[slack <= near_full_thresh] += priority_v2.boost
    scores[feasible] = base
    if np.random.rand() < priority_v2.epsilon:
        rand = np.random.rand(n)
        rand[~feasible] = -np.inf
        scores = rand
    return scores
```
