```python
import numpy as np

# Priority function for online bin packing: best‑fit with ε‑greedy fallback and softmax.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by item/remaining capacity, occasional ε‑greedy random pick, softmax output."""
    eps = 0.05
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if np.random.rand() < eps:
        scores = np.random.rand(bins_remain_cap.shape[0])
        scores[~feasible] = -np.inf
        return scores
    raw = np.where(feasible, item / bins_remain_cap, -np.inf)
    max_raw = np.max(raw)
    exp_vals = np.exp(raw - max_raw)
    probs = exp_vals / np.sum(exp_vals)
    return probs
```
