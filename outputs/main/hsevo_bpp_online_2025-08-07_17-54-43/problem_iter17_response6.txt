```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best-fit with near-full/exact-fit boost, ratio bias, and decaying epsilon-greedy jitter."""
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.2
        priority_v2._epsilon_min = 0.01
        priority_v2._epsilon_decay = 0.995
        priority_v2._step = 0
    priority_v2._step += 1
    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)
    n = bins_remain_cap.size
    priorities = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    # The above line is redundant; no comments allowed
    if not np.any(feasible):
        return priorities
    slack = bins_remain_cap[feasible] - item
    base = -slack
    ratio = item / bins_remain_cap[feasible]
    base += 0.3 * ratio
    near_full_thresh = max(0.02, 0.05 * item)
    base[slack <= near_full_thresh] += 0.5
    exact_fit_thresh = 1e-9
    base[slack <= exact_fit_thresh] += 0.7
    priorities[feasible] = base
    if np.random.rand() < priority_v2._epsilon:
        jitter = np.random.rand(np.sum(feasible)) * 0.01
        priorities[feasible] += jitter
    return priorities
```
