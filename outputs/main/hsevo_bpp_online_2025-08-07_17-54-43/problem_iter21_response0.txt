```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n = bins_remain_cap.size
    priorities = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return priorities
    slack = bins_remain_cap - item
    dead_space_ratio = 0.01
    bin_capacity = bins_remain_cap.max()
    dead_space_thr = bin_capacity * dead_space_ratio
    dead_space = (slack > 0) & (slack < dead_space_thr)
    usable = feasible & ~dead_space
    if not usable.any():
        return priorities
    ratio = item / bins_remain_cap[usable]
    eps = np.finfo(float).eps
    priorities[usable] = ratio + eps * (-slack[usable])
    return priorities
```
