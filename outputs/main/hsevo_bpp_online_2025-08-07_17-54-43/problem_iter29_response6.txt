```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive epsilon‑greedy scoring with near‑full and exact‑fit bonuses, ratio penalty, jitter, and tie‑break."""
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.4
        priority_v2._epsilon_min = 0.05
        priority_v2._epsilon_decay = 0.995
    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)
    eps = priority_v2._epsilon
    feasible = bins_remain_cap >= item
    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    if not np.any(feasible):
        return priorities
    slack = bins_remain_cap[feasible] - item
    base = -slack
    near_full_thresh = 0.1 * bins_remain_cap.max()
    near_full_bonus = 0.5
    base += np.where(slack <= near_full_thresh, near_full_bonus, 0.0)
    exact_fit_bonus = 1.0
    base += np.where(slack == 0, exact_fit_bonus, 0.0)
    ratio_penalty = 0.05 * (item / bins_remain_cap[feasible])
    base -= ratio_penalty
    jitter_scale = 1e-4
    jitter = (np.random.rand(len(slack)) - 0.5) * jitter_scale
    tie_break = np.arange(bins_remain_cap.size)[feasible] * 1e-6
    scores = base + jitter + tie_break
    if np.random.rand() < eps:
        scores = np.random.rand(len(slack))
    priorities[feasible] = scores
    return priorities
```
