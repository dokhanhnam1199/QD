```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best-fit scoring with negative slack, near‑full and exact‑fit boosts, decaying ε‑greedy exploration, and tiny jitter for tie‑breaking."""
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.2
        priority_v2._epsilon_min = 0.01
        priority_v2._epsilon_decay = 0.995
        priority_v2._step = 0
    priority_v2._step += 1
    priority_v2._epsilon = max(priority_v2._epsilon_min,
                               priority_v2._epsilon * priority_v2._epsilon_decay)

    n = bins_remain_cap.size
    scores = np.full(n, -np.inf, dtype=float)

    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return scores

    slack = bins_remain_cap[feasible] - item
    base = -slack

    near_full_thresh = max(0.02, 0.05 * item)
    near_full_boost = 0.5
    exact_fit_thresh = 1e-9
    exact_fit_boost = 1.0

    boost = np.zeros_like(base)
    boost[slack <= near_full_thresh] += near_full_boost
    boost[slack <= exact_fit_thresh] += exact_fit_boost

    deterministic = base + boost
    deterministic += 1e-6 * np.random.rand(deterministic.size)  # tiny jitter

    if np.random.rand() < priority_v2._epsilon:
        rand_vals = np.random.rand(n)
        rand_vals[~feasible] = -np.inf
        scores = rand_vals
    else:
        scores[feasible] = deterministic

    return scores
```
