```python
import numpy as np

# Fixed exploration probability (static ε‑greedy)
_EPSILON = 0.2
_EPS = 1e-12

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Inverse‑slack best‑fit with near‑full/exact‑fit boost and static ε‑greedy exploration."""
    slack = bins_remain_cap - item
    feasible = slack >= 0
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(feasible):
        return priorities
    base = 1.0 / (slack[feasible] + _EPS)
    near_full_thresh = max(0.02, 0.05 * item)
    near_full = slack[feasible] <= near_full_thresh
    base[near_full] += 0.5
    exact_fit = slack[feasible] <= _EPS
    base[exact_fit] += 3.0
    priorities[feasible] = base
    if np.random.rand() < _EPSILON:
        rand_scores = np.random.rand(bins_remain_cap.size)
        rand_scores[~feasible] = -np.inf
        priorities = rand_scores
    return priorities
```
