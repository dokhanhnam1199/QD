```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.15
        priority_v2._epsilon_min = 0.01
        priority_v2._epsilon_decay = 0.99
        priority_v2._step = 0
    priority_v2._step += 1
    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)
    n = bins_remain_cap.size
    priorities = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priorities
    if np.random.rand() < priority_v2._epsilon:
        rand_scores = np.random.rand(n)
        rand_scores[~feasible] = -np.inf
        return rand_scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    near_full_thresh = max(0.02, 0.05 * item)
    near_full_boost = 0.3
    exact_fit_boost = 0.6
    base[slack <= near_full_thresh] += near_full_boost
    base[slack <= 1e-12] += exact_fit_boost
    jitter = (np.random.rand(base.size) - 0.5) * 1e-9
    base += jitter
    idx = np.arange(n)[feasible]
    base += idx * 1e-12
    priorities[feasible] = base
    return priorities
```
