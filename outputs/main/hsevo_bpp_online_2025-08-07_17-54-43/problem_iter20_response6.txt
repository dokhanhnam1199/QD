```python
import numpy as np

# Computes priority for online bin packing: best‑fit core with ratio tie‑breaker, bonuses, and jitter.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Score bins using best-fit (-slack) with ratio tie‑breaker, near‑full and exact‑fit bonuses, and jitter.
    """
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    near_full_thresh = 0.05 * item
    near_full_boost = 0.5
    exact_fit_thresh = 1e-9
    exact_fit_boost = 1.0
    boost = np.zeros_like(base)
    boost[slack <= near_full_thresh] += near_full_boost
    boost[slack <= exact_fit_thresh] += exact_fit_boost
    ratio = item / bins_remain_cap[feasible]
    deterministic = base + boost + 0.01 * ratio
    deterministic += 1e-6 * np.random.rand(deterministic.size)
    scores[feasible] = deterministic
    return scores
```
