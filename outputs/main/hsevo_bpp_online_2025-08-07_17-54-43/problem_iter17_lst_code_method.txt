{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit scoring with inverse\u2011slack boost and adaptive \u03b5\u2011greedy tie\u2011breaker.\"\"\"\n    n = bins_remain_cap.size\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap - item\n    base = -slack[feasible]\n    tiny = 1e-6\n    boost_factor = 0.5\n    max_boost = 5.0\n    boost = boost_factor / (slack[feasible] + tiny)\n    boost = np.minimum(boost, max_boost)\n    scores[feasible] = base + boost\n    eps = 0.05 * (1 - np.count_nonzero(feasible) / n)\n    if np.random.rand() < eps:\n        idx = np.random.choice(np.flatnonzero(feasible))\n        scores[idx] += 1e-3\n    return scores\n\n[Heuristics 5th]\nimport numpy as np\n\n# Priority function for online bin packing\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Return priority scores combining best-fit, smooth near\u2011full boost,\n    exact\u2011fit bonus, and adaptive \u03b5\u2011greedy exploration.\n    \"\"\"\n    n = bins_remain_cap.size\n    valid = bins_remain_cap >= item\n    scores = np.full(n, -np.inf, dtype=float)\n    if not valid.any():\n        return scores\n\n    slack = bins_remain_cap[valid] - item\n    tiny = 1e-6\n    smooth_boost = 0.5 / (slack + tiny)\n    smooth_boost = np.minimum(smooth_boost, 5.0)\n\n    base = -slack\n    threshold = max(0.02, 0.05 * item)\n    near_full_mask = slack <= threshold\n    exact_mask = np.isclose(slack, 0.0, atol=1e-9)\n\n    near_full_boost = 0.5\n    exact_fit_boost = 1.0\n    scores[valid] = base + smooth_boost + near_full_boost * near_full_mask + exact_fit_boost * exact_mask\n\n    # adaptive epsilon-greedy exploration\n    epsilon_factor = 0.5\n    tie_breaker = 1.0\n    epsilon = epsilon_factor * (1 - np.count_nonzero(valid) / n)\n    if np.random.rand() < epsilon:\n        idx = np.random.choice(np.flatnonzero(valid))\n        scores[idx] += tie_breaker\n\n    return scores\n\n[Heuristics 6th]\nimport numpy as np\n\n# best\u2011fit with slack, exact\u2011fit boost, jitter, and adaptive epsilon\u2011greedy\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best\u2011fit, exact\u2011fit boost, near\u2011full boost, jitter, and adaptive epsilon\u2011greedy.\"\"\"\n    valid = bins_remain_cap >= item\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if np.any(valid):\n        slack = bins_remain_cap[valid] - item\n        base = -slack / bins_remain_cap[valid]\n        base[np.isclose(slack, 0.0, atol=1e-9)] += 1.0\n        base[slack <= 0.05 * bins_remain_cap[valid]] += 0.5\n        base += (np.random.rand(valid.sum()) - 0.5) * 0.01\n        priorities[valid] = base\n        valid_count = np.count_nonzero(valid)\n        epsilon = 0.05 * (1 - valid_count / n)\n        if np.random.rand() < epsilon:\n            idx = np.random.choice(np.flatnonzero(valid))\n            priorities[idx] += 1.0\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit scoring with inverse\u2011slack boost and adaptive \u03b5\u2011greedy tie\u2011breaker.\"\"\"\n    n = bins_remain_cap.size\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap - item\n    base = -slack[feasible]\n    tiny = 1e-6\n    boost_factor = 0.5\n    max_boost = 5.0\n    boost = boost_factor / (slack[feasible] + tiny)\n    boost = np.minimum(boost, max_boost)\n    scores[feasible] = base + boost\n    eps = 0.05 * (1 - np.count_nonzero(feasible) / n)\n    if np.random.rand() < eps:\n        idx = np.random.choice(np.flatnonzero(feasible))\n        scores[idx] += 1e-3\n    return scores\n\n[Heuristics 8th]\nimport numpy as np\n\n# best\u2011fit with slack, exact\u2011fit boost, jitter, and adaptive epsilon\u2011greedy\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best\u2011fit, exact\u2011fit boost, near\u2011full boost, jitter, and adaptive epsilon\u2011greedy.\"\"\"\n    valid = bins_remain_cap >= item\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if np.any(valid):\n        slack = bins_remain_cap[valid] - item\n        base = -slack / bins_remain_cap[valid]\n        base[np.isclose(slack, 0.0, atol=1e-9)] += 1.0\n        base[slack <= 0.05 * bins_remain_cap[valid]] += 0.5\n        base += (np.random.rand(valid.sum()) - 0.5) * 0.01\n        priorities[valid] = base\n        valid_count = np.count_nonzero(valid)\n        epsilon = 0.05 * (1 - valid_count / n)\n        if np.random.rand() < epsilon:\n            idx = np.random.choice(np.flatnonzero(valid))\n            priorities[idx] += 1.0\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit heuristic: fill ratio + small inverse\u2011slack boost, \u03b5\u2011greedy, softmax probabilities.\"\"\"\n    epsilon = 0.05\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    fill_ratio = item / bins_remain_cap[feasible]\n    inv_slack = 1.0 / (slack + 1e-12)\n    inv_norm = inv_slack / (inv_slack.max() + 1e-12)\n    alpha = 0.1\n    base = fill_ratio + alpha * inv_norm\n    scores[feasible] = base\n    if np.random.rand() < epsilon:\n        scores[feasible] = np.random.rand(feasible.sum())\n    max_score = np.max(scores[feasible])\n    exp_scores = np.zeros_like(scores)\n    exp_scores[feasible] = np.exp and np.exp(scores[feasible] - max_score)\n    total = exp_scores.sum()\n    if total > 0:\n        exp_scores /= total\n    return exp_scores\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit heuristic: fill ratio + small inverse\u2011slack boost, \u03b5\u2011greedy, softmax probabilities.\"\"\"\n    epsilon = 0.05\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    fill_ratio = item / bins_remain_cap[feasible]\n    inv_slack = 1.0 / (slack + 1e-12)\n    inv_norm = inv_slack / (inv_slack.max() + 1e-12)\n    alpha = 0.1\n    base = fill_ratio + alpha * inv_norm\n    scores[feasible] = base\n    if np.random.rand() < epsilon:\n        scores[feasible] = np.random.rand(feasible.sum())\n    max_score = np.max(scores[feasible])\n    exp_scores = np.zeros_like(scores)\n    exp_scores[feasible] = np.exp and np.exp(scores[feasible] - max_score)\n    total = exp_scores.sum()\n    if total > 0:\n        exp_scores /= total\n    return exp_scores\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Normalized fill ratio scoring with static \u03b5\u2011greedy random fallback and softmax.\"\"\"\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not feasible.any():\n        return scores\n    scores[feasible] = item / bins_remain_cap[feasible]\n    epsilon = 0.05\n    if np.random.rand() < epsilon:\n        rand = np.random.rand(bins_remain_cap.size)\n        rand[~feasible] = -np.inf\n        scores = rand\n    max_score = np.max(scores[feasible])\n    exp_scores = np.exp(scores - max_score)\n    probs = exp_scores / np.sum(exp_scores)\n    return probs\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Scores bins by best-fit with inverse slack, near-full and exact-fit boosts, epsilon-greedy exploration, and jitter.\n    \"\"\"\n    eps = 0.1\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return scores\n    if np.random.rand() < eps:\n        scores[feasible] = np.random.rand(feasible.sum())\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = 1.0 / (slack + 1e-9)\n    near_full = slack <= 0.05 * item\n    base[near_full] += 0.5\n    exact = np.isclose(slack, 0, atol=1e-9)\n    base[exact] += 1.0\n    base += 0.01 * np.random.rand(len(base))\n    scores[feasible] = base\n    return scores\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Scores bins by best-fit with inverse slack, near-full and exact-fit boosts, epsilon-greedy exploration, and jitter.\n    \"\"\"\n    eps = 0.1\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return scores\n    if np.random.rand() < eps:\n        scores[feasible] = np.random.rand(feasible.sum())\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = 1.0 / (slack + 1e-9)\n    near_full = slack <= 0.05 * item\n    base[near_full] += 0.5\n    exact = np.isclose(slack, 0, atol=1e-9)\n    base[exact] += 1.0\n    base += 0.01 * np.random.rand(len(base))\n    scores[feasible] = base\n    return scores\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    epsilon = 0.05\n    n = bins_remain_cap.size\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return np.full(n, -np.inf, dtype=float)\n    if np.random.rand() < epsilon:\n        rand = np.random.rand(n)\n        rand[~valid] = 0.0\n        return rand / np.sum(rand)\n    scores = np.full(n, -np.inf, dtype=float)\n    scores[valid] = 1.0 - bins_remain_cap[valid] + item\n    max_score = np.max(scores[valid])\n    exp_scores = np.exp(scores - max_score)\n    probs = exp_scores / np.sum(exp_scores)\n    return probs\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    epsilon = 0.05\n    n = bins_remain_cap.size\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return np.full(n, -np.inf, dtype=float)\n    if np.random.rand() < epsilon:\n        rand = np.random.rand(n)\n        rand[~valid] = 0.0\n        return rand / np.sum(rand)\n    scores = np.full(n, -np.inf, dtype=float)\n    scores[valid] = 1.0 - bins_remain_cap[valid] + item\n    max_score = np.max(scores[valid])\n    exp_scores = np.exp(scores - max_score)\n    probs = exp_scores / np.sum(exp_scores)\n    return probs\n\n[Heuristics 16th]\nimport numpy as np\n\n# Priority function for online bin packing: best\u2011fit with \u03b5\u2011greedy fallback and softmax.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by item/remaining capacity, occasional \u03b5\u2011greedy random pick, softmax output.\"\"\"\n    eps = 0.05\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if np.random.rand() < eps:\n        scores = np.random.rand(bins_remain_cap.shape[0])\n        scores[~feasible] = -np.inf\n        return scores\n    raw = np.where(feasible, item / bins_remain_cap, -np.inf)\n    max_raw = np.max(raw)\n    exp_vals = np.exp(raw - max_raw)\n    probs = exp_vals / np.sum(exp_vals)\n    return probs\n\n[Heuristics 17th]\nimport numpy as np\n\n# Priority function for online bin packing: best\u2011fit with \u03b5\u2011greedy fallback and softmax.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by item/remaining capacity, occasional \u03b5\u2011greedy random pick, softmax output.\"\"\"\n    eps = 0.05\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if np.random.rand() < eps:\n        scores = np.random.rand(bins_remain_cap.shape[0])\n        scores[~feasible] = -np.inf\n        return scores\n    raw = np.where(feasible, item / bins_remain_cap, -np.inf)\n    max_raw = np.max(raw)\n    exp_vals = np.exp(raw - max_raw)\n    probs = exp_vals / np.sum(exp_vals)\n    return probs\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse\u2011slack scoring with \u03b5\u2011greedy random exploration and softmax normalization.\"\"\"\n    epsilon = 0.05\n    n = bins_remain_cap.shape[0]\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = 1.0 / (slack + 1e-12)\n    if np.random.rand() < epsilon:\n        base = np.random.rand(base.shape[0])\n    max_val = np.max(base)\n    exp_vals = np.exp(base - max_val)\n    probs = exp_vals / np.sum(exp_vals)\n    scores[feasible] = probs\n    return scores\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse\u2011slack scoring with \u03b5\u2011greedy random exploration and softmax normalization.\"\"\"\n    epsilon = 0.05\n    n = bins_remain_cap.shape[0]\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = 1.0 / (slack + 1e-12)\n    if np.random.rand() < epsilon:\n        base = np.random.rand(base.shape[0])\n    max_val = np.max(base)\n    exp_vals = np.exp(base - max_val)\n    probs = exp_vals / np.sum(exp_vals)\n    scores[feasible] = probs\n    return scores\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse\u2011slack scoring with \u03b5\u2011greedy random exploration and softmax normalization.\"\"\"\n    epsilon = 0.05\n    n = bins_remain_cap.shape[0]\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = 1.0 / (slack + 1e-12)\n    if np.random.rand() < epsilon:\n        base = np.random.rand(base.shape[0])\n    max_val = np.max(base)\n    exp_vals = np.exp(base - max_val)\n    probs = exp_vals / np.sum(exp_vals)\n    scores[feasible] = probs\n    return scores\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}