```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best-fit priority with ε‑greedy adaptive exploration. Feasible bins get -slack; with probability ε random scores are used. ε decays each call toward a minimum."""
    if not hasattr(priority_v2, 'epsilon'):
        priority_v2.epsilon = 0.2
        priority_v2.min_epsilon = 0.01
        priority_v2.decay = 0.995
    eps = priority_v2.epsilon
    n = bins_remain_cap.size
    priorities = np.full(n, -np.inf, dtype=float)
    valid = bins_remain_cap >= item
    priorities[valid] = -(bins_remain_cap[valid] - item)
    if np.random.rand() < eps:
        rand_scores = np.random.random(n)
        priorities[valid] = rand_scores[valid]
    priority_v2.epsilon = max(priority_v2.min_epsilon, eps * priority_v2.decay)
    return priorities
```
