```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit slack with capped boost, exact/near‑full bonuses, jitter, ε‑greedy."""
    # Feasibility mask
    valid = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(valid):
        return priorities

    # Slack and base score (prefer smaller slack)
    slack = bins_remain_cap[valid] - item
    base = -slack

    # Capped boost inversely proportional to slack
    boost_factor = 0.5
    max_boost = 3.0
    tiny = 1e-6
    boost = np.minimum(boost_factor / (slack + tiny), max_boost)
    base += boost

    # Exact‑fit and near‑full bonuses
    base += np.isclose(slack, 0.0, atol=1e-9) * 1.0
    base += (slack <= 0.05 * bins_remain_cap[valid]) * 0.5

    # Tiny jitter for tie‑breaking
    base += (np.random.rand(valid.sum()) - 0.5) * 1e-6

    priorities[valid] = base

    # Adaptive ε‑greedy exploration
    n = bins_remain_cap.size
    feasible = valid.sum()
    epsilon = 0.05 * (1 - feasible / n)
    if feasible and np.random.rand() < epsilon:
        idx = np.random.choice(np.flatnonzero(valid))
        priorities[idx] += 1.0

    return priorities
```
