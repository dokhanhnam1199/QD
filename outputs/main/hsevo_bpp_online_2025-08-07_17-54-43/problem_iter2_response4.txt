```python
import numpy as np

# Combined best-fit with ε‑greedy exploration and adaptive ε based on feasible bin count.
def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Best‑fit score with ε‑greedy exploration; infeasible bins receive -inf."""
    n = bins_remain_cap.shape[0]
    priorities = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priorities
    waste = bins_remain_cap[feasible] - item
    bestfit = -waste
    adapt_eps = epsilon / (1.0 + np.log1p(feasible.sum()))
    explore = np.random.rand(bestfit.size) < adapt_eps
    random_score = np.random.rand(bestfit.size)
    priorities[feasible] = np.where(explore, random_score, bestfit)
    return priorities
```
