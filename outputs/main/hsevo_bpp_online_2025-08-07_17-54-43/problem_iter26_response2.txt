```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n = bins_remain_cap.size
    priorities = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return priorities
    idx_feas = np.where(feasible)[0]
    slack = bins_remain_cap[feasible] - item
    near_full_threshold = 0.1 * bins_remain_cap.max()
    near_full_bonus = 0.5
    jitter_scale = 1e-3
    epsilon = 0.05
    tie_break = idx_feas[::-1] * 1e-6
    bonus = np.where(slack <= near_full_threshold, near_full_bonus, 0.0)
    jitter = (np.random.rand(len(slack)) - 0.5) * jitter_scale
    base = -slack + bonus + jitter + tie_break
    if np.random.rand() < epsilon:
        priorities[feasible] = np.random.rand(len(slack))
    else:
        priorities[feasible] = base
    return priorities
```
