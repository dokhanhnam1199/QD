```python
import numpy as np

# Best‑fit with inverse slack, -inf for infeasible, ε‑greedy exploration and decaying ε.
_EPS = 0.2          # initial exploration rate
_EPS_DECAY = 0.99   # decay factor per call
_EPS_MIN = 0.01     # lower bound

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit inverse‑slack scoring, infeasible bins get -inf, ε‑greedy exploration (ε decays)."""
    slack = bins_remain_cap - item
    feasible = slack >= 0
    eps = 1e-9
    best_fit = np.where(feasible, 1.0 / (slack + eps), -np.inf)
    rand = np.random.rand(bins_remain_cap.size)
    scores = np.where(feasible, (1 - _EPS) * best_fit + _EPS * rand, -np.inf)
    global _EPS
    _EPS = max(_EPS_MIN, _EPS * _EPS_DECAY)
    return scores
```
