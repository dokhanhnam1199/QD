```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Best‑fit priority with epsilon‑greedy exploration and near‑full boost.
    """
    import numpy as np
    epsilon = 0.1
    eps_small = np.finfo(float).eps
    slack = bins_remain_cap - item
    feasible = slack >= 0
    base = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    base[feasible] = 1.0 / (slack[feasible] + eps_small)
    if np.max(bins_remain_cap) > 0:
        near_full_thresh = 0.05 * np.max(bins_remain_cap)
    else:
        near_full_thresh = 0.0
    near_full_mask = (slack <= near_full_thresh) & feasible
    base[near_full_mask] += 0.5
    exact_fit_mask = (slack == 0) & feasible
    base[exact_fit_mask] += 3.0
    rand_scores = np.random.rand(len(bins_remain_cap))
    if np.random.rand() < epsilon:
        scores = np.where(feasible, rand_scores, -np.inf)
    else:
        scores = np.where(feasible, base, -np.inf)
    return scores
```
