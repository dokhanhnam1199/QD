{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by tightness (best\u2011fit) plus capacity\u2011ratio; optional \u03b5\u2011greedy exploration.\"\"\"\n    n = bins_remain_cap.size\n    feasible = bins_remain_cap >= item\n    priorities = np.full(n, -np.inf, dtype=float)   # infeasible bins get -inf\n    if not np.any(feasible):\n        return priorities\n    slack = bins_remain_cap[feasible] - item       # remaining space after placing\n    base = -slack                                   # best\u2011fit: smaller slack \u2192 higher score\n    ratio = item / bins_remain_cap[feasible]       # capacity\u2011ratio: tighter fit \u2192 higher score\n    scores = base + 0.2 * ratio                     # combine both components\n    scores += np.random.rand(scores.shape[0]) * 1e-6  # tiny jitter to break ties\n    priorities[feasible] = scores\n    epsilon = 0.02                                 # small chance to explore randomly\n    if np.random.rand() < epsilon:\n        priorities[feasible] = np.random.rand(scores.shape[0])\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}