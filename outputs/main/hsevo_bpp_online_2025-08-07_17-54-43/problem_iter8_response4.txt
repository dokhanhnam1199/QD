```python
import numpy as np

# Priority function for online bin packing using simple best-fit and fixed ε‑greedy.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit scoring with fixed ε‑greedy exploration and near‑full, exact‑fit boosts."""
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.1  # constant exploration probability
    n = bins_remain_cap.size
    scores = np.full(n, -np.inf, dtype=float)               # infeasible bins get -inf
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return scores
    # base best‑fit score (higher is better)
    slack = bins_remain_cap[feasible] - item
    base = -slack
    # near‑full and exact‑fit boosts
    near_full_thresh = max(0.02, 0.05 * item)
    boost = np.zeros_like(slack)
    boost[slack == 0] = 10.0
    boost[slack <= near_full_thresh] += 3.0
    base += boost
    scores[feasible] = base
    # ε‑greedy: replace with pure random scores with probability ε
    if np.random.rand() < priority_v2._epsilon:
        rand = np.random.rand(n)
        rand[~feasible] = -np.inf
        return rand
    return scores
```
