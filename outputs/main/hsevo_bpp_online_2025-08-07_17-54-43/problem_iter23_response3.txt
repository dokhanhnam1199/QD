```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best-fit priority with static ε‑greedy, ratio tie‑breaker, and capped boost."""
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    ratio = item / bins_remain_cap[feasible]
    ratio_weight = 0.01
    boost = np.minimum(0.05, 0.1 / (slack + 1.0))
    deterministic = base + ratio_weight * ratio + boost
    epsilon = 0.05
    if np.random.rand() < epsilon:
        scores[feasible] = np.random.rand(feasible.sum())
    else:
        scores[feasible] = deterministic
    return scores
```
