```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive ε‑greedy best‑fit with near‑full boost and slight worst‑fit bias."""
    # Initialize static parameters on first call
    if not hasattr(priority_v2, "epsilon"):
        priority_v2.epsilon = 0.2          # initial exploration rate
        priority_v2.epsilon_min = 0.01    # floor for exploration
        priority_v2.decay = 0.995         # exponential decay factor
        priority_v2.near_full_thresh = 0.1  # slack threshold for near‑full bins
        priority_v2.beta = 0.05           # worst‑fit bias coefficient
        priority_v2.boost = 0.5           # boost added to near‑full bins
    # Decay epsilon after each call
    priority_v2.epsilon = max(priority_v2.epsilon_min,
                              priority_v2.epsilon * priority_v2.decay)
    # Feasibility mask
    can_fit = bins_remain_cap >= item
    slack = bins_remain_cap - item
    eps = np.finfo(float).eps
    # Base score: inverse slack (best‑fit) with a small worst‑fit bias
    base_score = np.where(can_fit,
                          1.0 / (slack + eps) - priority_v2.beta * slack,
                          -np.inf)
    # Add boost for bins that are nearly full
    near_full = (slack <= priority_v2.near_full_thresh) & can_fit
    base_score[near_full] += priority_v2.boost
    # ε‑greedy exploration: random scores with probability epsilon
    if np.random.rand() < priority_v2.epsilon:
        scores = np.where(can_fit, np.random.rand(len(bins_remain_cap)), -np.inf)
    else:
        scores = base_score
    return scores
```
