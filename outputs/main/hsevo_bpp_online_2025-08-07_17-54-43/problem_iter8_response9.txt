```python
import numpy as np

# Simple epsilon‑greedy best‑fit with additive near‑full boost.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Static epsilon‑greedy best‑fit priority with near‑full boost and -inf for infeasible bins."""
    epsilon = 0.1
    n = bins_remain_cap.size
    priorities = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return priorities
    slack = bins_remain_cap[feasible] - item
    scores = -slack
    near_full_thresh = max(0.02, 0.05 * item)
    boost = 0.5
    scores[slack <= near_full_thresh] += boost
    priorities[feasible] = scores
    if np.random.rand() < epsilon:
        rand = np.random.rand(n)
        rand[~feasible] = -np.inf
        priorities = rand
    return priorities
```
