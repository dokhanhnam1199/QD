import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    default_priority: float = -905946347784.9226,
    epsilon_factor: float = 0.37134574598237946,
    tie_breaker: float = 0.007256680490923484,
) -> np.ndarray:
    """
    Compute priorities for bins based on remaining capacity and item size.

    Parameters
    ----------
    item : float
        Size of the item to be placed.
    bins_remain_cap : np.ndarray
        Remaining capacities of the bins.
    default_priority : float, optional
        Sentinel priority assigned to all bins initially (default: -1e9).
    epsilon_factor : float, optional
        Base factor used to compute epsilon for random tieâ€‘breaking (default: 0.05).
    tie_breaker : float, optional
        Small positive increment added to break ties when the random condition is met (default: 1e-3).

    Returns
    -------
    np.ndarray
        Array of priority values for each bin.
    """
    n = bins_remain_cap.size
    valid = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, default_priority, dtype=float)

    if np.any(valid):
        slack = bins_remain_cap[valid] - item
        priorities[valid] = -slack
        valid_count = np.count_nonzero(valid)
        epsilon = epsilon_factor * (1 - valid_count / n)

        if np.random.rand() < epsilon:
            idx = np.random.choice(np.flatnonzero(valid))
            priorities[idx] += tie_breaker

    return priorities
