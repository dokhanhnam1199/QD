```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive best-fit: prioritize low slack, boost near-full bins, decaying epsilon-greedy exploration."""
    if not hasattr(priority_v2, "epsilon"):
        priority_v2.epsilon = 0.2
        priority_v2.min_epsilon = 0.01
        priority_v2.decay = 0.995
        priority_v2.near_full_thresh = 0.1
        priority_v2.boost = 0.5
    eps = priority_v2.epsilon
    n = bins_remain_cap.size
    priorities = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    slack = bins_remain_cap[feasible] - item
    base = -slack
    boost_mask = slack <= priority_v2.near_full_thresh
    base[boost_mask] + = priority_v2.boost
    random_score = np.random.rand(base.shape[0])
    priorities[feasible] = (1 - eps) * base + eps * random_score
    priority_v2.epsilon = max(priority_v2.min_epsilon, eps * priority_v2.decay)
    return priorities
```
