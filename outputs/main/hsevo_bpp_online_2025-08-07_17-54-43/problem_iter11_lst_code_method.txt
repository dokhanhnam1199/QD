{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit with inverse\u2011slack base, exact\u2011fit and near\u2011full boosts.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = 1.0 / (slack + 1e-12)\n    near_full_thresh = max(0.02, 0.05 * item)\n    base_priority += np.where(slack <= near_full_thresh, 0.5, 0.0)\n    base_priority += np.where(slack <= 1e-12, 3.0, 0.0)\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit with inverse\u2011slack base, exact\u2011fit and near\u2011full boosts.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = 1.0 / (slack + 1e-12)\n    near_full_thresh = max(0.02, 0.05 * item)\n    base_priority += np.where(slack <= near_full_thresh, 0.5, 0.0)\n    base_priority += np.where(slack <= 1e-12, 3.0, 0.0)\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\n# Priority function for online bin packing using simple best-fit and fixed \u03b5\u2011greedy.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit scoring with fixed \u03b5\u2011greedy exploration and near\u2011full, exact\u2011fit boosts.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.1  # constant exploration probability\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)               # infeasible bins get -inf\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    # base best\u2011fit score (higher is better)\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    # near\u2011full and exact\u2011fit boosts\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = np.zeros_like(slack)\n    boost[slack == 0] = 10.0\n    boost[slack <= near_full_thresh] += 3.0\n    base += boost\n    scores[feasible] = base\n    # \u03b5\u2011greedy: replace with pure random scores with probability \u03b5\n    if np.random.rand() < priority_v2._epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        return rand\n    return scores\n\n[Heuristics 4th]\nimport numpy as np\n\n# Priority function for online bin packing using simple best-fit and fixed \u03b5\u2011greedy.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit scoring with fixed \u03b5\u2011greedy exploration and near\u2011full, exact\u2011fit boosts.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.1  # constant exploration probability\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)               # infeasible bins get -inf\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    # base best\u2011fit score (higher is better)\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    # near\u2011full and exact\u2011fit boosts\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = np.zeros_like(slack)\n    boost[slack == 0] = 10.0\n    boost[slack <= near_full_thresh] += 3.0\n    base += boost\n    scores[feasible] = base\n    # \u03b5\u2011greedy: replace with pure random scores with probability \u03b5\n    if np.random.rand() < priority_v2._epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        return rand\n    return scores\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    epsilon = 0.1\n    n = bins_remain_cap.size\n    priorities = np.full(n, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if np.any(valid):\n        priorities[valid] = item / bins_remain_cap[valid]\n    if np.random.rand() < epsilon:\n        random_scores = np.random.rand(n)\n        random_scores[~valid] = -np.inf\n        priorities = random_scores\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit with fixed \u03b5\u2011greedy exploration and near\u2011full boost.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.1\n        priority_v2.near_full_thresh = 0.05\n        priority_v2.boost = 0.5\n    eps = priority_v2.epsilon\n    feasible = bins_remain_cap >= item\n    n = bins_remain_cap.shape[0]\n    scores = np.full(n, -np.inf, dtype=float)\n    if np.random.rand() < eps:\n        scores[feasible] = np.random.rand(feasible.sum())\n    else:\n        slack = bins_remain_cap[feasible] - item\n        base = -slack\n        near_full = slack <= priority_v2.near_full_thresh\n        base[near_full] += priority_v2.boost\n        scores[feasible] = base\n    return scores\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit with fixed \u03b5\u2011greedy exploration and near\u2011full boost.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.1\n        priority_v2.near_full_thresh = 0.05\n        priority_v2.boost = 0.5\n    eps = priority_v2.epsilon\n    feasible = bins_remain_cap >= item\n    n = bins_remain_cap.shape[0]\n    scores = np.full(n, -np.inf, dtype=float)\n    if np.random.rand() < eps:\n        scores[feasible] = np.random.rand(feasible.sum())\n    else:\n        slack = bins_remain_cap[feasible] - item\n        base = -slack\n        near_full = slack <= priority_v2.near_full_thresh\n        base[near_full] += priority_v2.boost\n        scores[feasible] = base\n    return scores\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit with fixed \u03b5\u2011greedy exploration and near\u2011full boost.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.1\n        priority_v2.near_full_thresh = 0.05\n        priority_v2.boost = 0.5\n    eps = priority_v2.epsilon\n    feasible = bins_remain_cap >= item\n    n = bins_remain_cap.shape[0]\n    scores = np.full(n, -np.inf, dtype=float)\n    if np.random.rand() < eps:\n        scores[feasible] = np.random.rand(feasible.sum())\n    else:\n        slack = bins_remain_cap[feasible] - item\n        base = -slack\n        near_full = slack <= priority_v2.near_full_thresh\n        base[near_full] += priority_v2.boost\n        scores[feasible] = base\n    return scores\n\n[Heuristics 9th]\nimport numpy as np\n\n# Simple epsilon\u2011greedy best\u2011fit with additive near\u2011full boost.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Static epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and -inf for infeasible bins.\"\"\"\n    epsilon = 0.1\n    n = bins_remain_cap.size\n    priorities = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return priorities\n    slack = bins_remain_cap[feasible] - item\n    scores = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    scores[slack <= near_full_thresh] += boost\n    priorities[feasible] = scores\n    if np.random.rand() < epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        priorities = rand\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\n# Simple epsilon\u2011greedy best\u2011fit with additive near\u2011full boost.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Static epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and -inf for infeasible bins.\"\"\"\n    epsilon = 0.1\n    n = bins_remain_cap.size\n    priorities = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return priorities\n    slack = bins_remain_cap[feasible] - item\n    scores = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    scores[slack <= near_full_thresh] += boost\n    priorities[feasible] = scores\n    if np.random.rand() < epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        priorities = rand\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\n# Fixed \u03b5\u2011greedy best\u2011fit with modest near\u2011full boost.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by -slack, boost near\u2011full bins; \u03b5\u2011greedy random fallback.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.2          # exploration probability\n        priority_v2.near_full_factor = 0.05\n        priority_v2.boost = 0.5            # additive boost for tight fits\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full_thresh = max(0.02, priority_v2.near_full_factor * item)\n    base[slack <= near_full_thresh] += priority_v2.boost\n    scores[feasible] = base\n    if np.random.rand() < priority_v2.epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        scores = rand\n    return scores\n\n[Heuristics 12th]\nimport numpy as np\n\n# Fixed \u03b5\u2011greedy best\u2011fit with modest near\u2011full boost.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by -slack, boost near\u2011full bins; \u03b5\u2011greedy random fallback.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.2          # exploration probability\n        priority_v2.near_full_factor = 0.05\n        priority_v2.boost = 0.5            # additive boost for tight fits\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full_thresh = max(0.02, priority_v2.near_full_factor * item)\n    base[slack <= near_full_thresh] += priority_v2.boost\n    scores[feasible] = base\n    if np.random.rand() < priority_v2.epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        scores = rand\n    return scores\n\n[Heuristics 13th]\nimport numpy as np\n\n# Fixed \u03b5\u2011greedy best\u2011fit with modest near\u2011full boost.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by -slack, boost near\u2011full bins; \u03b5\u2011greedy random fallback.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.2          # exploration probability\n        priority_v2.near_full_factor = 0.05\n        priority_v2.boost = 0.5            # additive boost for tight fits\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full_thresh = max(0.02, priority_v2.near_full_factor * item)\n    base[slack <= near_full_thresh] += priority_v2.boost\n    scores[feasible] = base\n    if np.random.rand() < priority_v2.epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        scores = rand\n    return scores\n\n[Heuristics 14th]\nimport numpy as np\n\n# Fixed \u03b5\u2011greedy best\u2011fit with modest near\u2011full boost.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by -slack, boost near\u2011full bins; \u03b5\u2011greedy random fallback.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.2          # exploration probability\n        priority_v2.near_full_factor = 0.05\n        priority_v2.boost = 0.5            # additive boost for tight fits\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full_thresh = max(0.02, priority_v2.near_full_factor * item)\n    base[slack <= near_full_thresh] += priority_v2.boost\n    scores[feasible] = base\n    if np.random.rand() < priority_v2.epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        scores = rand\n    return scores\n\n[Heuristics 15th]\nimport numpy as np\n\n# Fixed \u03b5\u2011greedy best\u2011fit with modest near\u2011full boost.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by -slack, boost near\u2011full bins; \u03b5\u2011greedy random fallback.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.2          # exploration probability\n        priority_v2.near_full_factor = 0.05\n        priority_v2.boost = 0.5            # additive boost for tight fits\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full_thresh = max(0.02, priority_v2.near_full_factor * item)\n    base[slack <= near_full_thresh] += priority_v2.boost\n    scores[feasible] = base\n    if np.random.rand() < priority_v2.epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        scores = rand\n    return scores\n\n[Heuristics 16th]\nimport numpy as np\n\n# Inverse\u2011slack best\u2011fit with additive near\u2011full/exact\u2011fit boost and fixed \u03b5\u2011greedy.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best\u2011fit (inverse slack) with modest near\u2011full boost and fixed \u03b5\u2011greedy.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.15               # exploration probability\n        priority_v2.near_full_thresh = 0.1       # slack \u2264 this is \u201cnear full\u201d\n        priority_v2.near_full_boost = 0.5        # additive boost for near\u2011full bins\n        priority_v2.exact_fit_boost = 3.0        # large boost for exact fits\n    eps = np.finfo(float).eps\n    can_fit = bins_remain_cap >= item\n    slack = bins_remain_cap - item\n    scores = np.where(can_fit, 1.0 / (slack + eps), -np.inf)\n    near_full = (slack <= priority_v2.near_full_thresh) & can_fit\n    scores[near_full] += priority_v2.near_full_boost\n    exact_fit = (slack <= eps) & can_fit\n    scores[exact_fit] += priority_v2.exact_fit_boost\n    if np.random.rand() < priority_v2.epsilon:\n        scores = np.where(can_fit, np.random.rand(len(bins_remain_cap)), -np.inf)\n    return scores\n\n[Heuristics 17th]\nimport numpy as np\n\n# Fixed exploration probability (static \u03b5\u2011greedy)\n_EPSILON = 0.2\n_EPS = 1e-12\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse\u2011slack best\u2011fit with near\u2011full/exact\u2011fit boost and static \u03b5\u2011greedy exploration.\"\"\"\n    slack = bins_remain_cap - item\n    feasible = slack >= 0\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priorities\n    base = 1.0 / (slack[feasible] + _EPS)\n    near_full_thresh = max(0.02, 0.05 * item)\n    near_full = slack[feasible] <= near_full_thresh\n    base[near_full] += 0.5\n    exact_fit = slack[feasible] <= _EPS\n    base[exact_fit] += 3.0\n    priorities[feasible] = base\n    if np.random.rand() < _EPSILON:\n        rand_scores = np.random.rand(bins_remain_cap.size)\n        rand_scores[~feasible] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                epsilon: float = 0.9825005672646011,\n                near_full_abs_thresh: float = 0.10978901021995602,\n                near_full_factor: float = 0.052058968616339074,\n                exact_fit_boost: float = 9.449197182550307,\n                near_full_boost: float = 8.679489449768846) -> np.ndarray:\n    \"\"\"Best\u2011fit scoring with \u03b5\u2011greedy exploration and near\u2011full, exact\u2011fit boosts.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to pack.\n    bins_remain_cap : np.ndarray\n        Remaining capacity of each bin.\n    epsilon : float, optional\n        Exploration probability for \u03b5\u2011greedy selection.\n    near_full_abs_thresh : float, optional\n        Minimum absolute slack threshold for near\u2011full boost.\n    near_full_factor : float, optional\n        Relative factor of item size to compute near\u2011full slack threshold.\n    exact_fit_boost : float, optional\n        Boost added to bins where slack is exactly zero.\n    near_full_boost : float, optional\n        Boost added to bins where slack is less than or equal to the near\u2011full threshold.\n    \"\"\"\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n\n[Heuristics 19th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                epsilon: float = 0.9825005672646011,\n                near_full_abs_thresh: float = 0.10978901021995602,\n                near_full_factor: float = 0.052058968616339074,\n                exact_fit_boost: float = 9.449197182550307,\n                near_full_boost: float = 8.679489449768846) -> np.ndarray:\n    \"\"\"Best\u2011fit scoring with \u03b5\u2011greedy exploration and near\u2011full, exact\u2011fit boosts.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to pack.\n    bins_remain_cap : np.ndarray\n        Remaining capacity of each bin.\n    epsilon : float, optional\n        Exploration probability for \u03b5\u2011greedy selection.\n    near_full_abs_thresh : float, optional\n        Minimum absolute slack threshold for near\u2011full boost.\n    near_full_factor : float, optional\n        Relative factor of item size to compute near\u2011full slack threshold.\n    exact_fit_boost : float, optional\n        Boost added to bins where slack is exactly zero.\n    near_full_boost : float, optional\n        Boost added to bins where slack is less than or equal to the near\u2011full threshold.\n    \"\"\"\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item, bins_remain_cap):\n    \"\"\"Adaptive best-fit with near\u2011full and exact fit boosts, epsilon\u2011greedy exploration.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.3\n        priority_v2.near_full_threshold_factor = 0.05\n        priority_v2.alpha = 0.01\n        priority_v2.exact_fit_boost = 3.0\n        priority_v2.near_full_boost = 0.5\n    if np.random.rand() < priority_v2.epsilon:\n        return np.random.random(bins_remain_cap.shape)\n    slack = bins_remain_cap - item\n    valid = slack >= 0\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priorities[valid] = -slack[valid] + priority_v2.alpha * slack[valid]\n    priorities[valid & (slack == 0)] += priority_v2.exact_fit_boost\n    threshold = min(0.1, priority_v2.near_full_threshold_factor * np.max(bins_remain_cap))\n    near_full = (slack <= threshold) & valid\n    priorities[near_full] += priority_v2.near_full_boost\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}