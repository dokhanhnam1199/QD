{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0, ratio_weight: float = 0.2, jitter_scale: float = 1e-6, epsilon_base: float = 0.05) -> np.ndarray:\n    \"\"\"Best\u2011fit with capped boost, near\u2011full bonuses, ratio penalty, jitter, adaptive \u03b5\u2011greedy.\"\"\"\n    valid = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base = -slack\n    boost_factor = 0.5\n    max_boost = 3.0\n    tiny = 1e-6\n    boost = np.minimum(boost_factor / (slack + tiny), max_boost)\n    base += boost\n    base += np.isclose(slack, 0.0, atol=1e-9) * 1.0\n    base += (slack <= 0.05 * bins_remain_cap[valid]) * 0.5\n    base -= ratio_weight * (bins_remain_cap[valid] / bin_capacity)\n    base += (np.random.rand(valid.sum()) - 0.5) * jitter_scale\n    priorities[valid] = base\n    feasible = valid.sum()\n    epsilon = epsilon_base * (1 - feasible / bins_remain_cap.size)\n    if feasible and np.random.rand() < epsilon:\n        idx = np.random.choice(np.flatnonzero(valid))\n        priorities[idx] += 1.0\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}