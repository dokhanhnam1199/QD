```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                epsilon: float = 0.05,
                boost_factor: float = 0.5,
                max_boost: float = 5.0,
                ratio_weight: float = 0.1,
                jitter: float = 1e-12) -> np.ndarray:
    """Score bins for online BPP: best‑fit (negative slack), capped boost, ratio weight, ε‑greedy, tiny jitter."""
    n = bins_remain_cap.size
    feasible = bins_remain_cap >= item
    scores = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    tiny = 1e-6
    boost = np.minimum(boost_factor / (slack + tiny), max_boost)
    ratio = item / bins_remain_cap[feasible]
    combined = base + boost + ratio_weight * ratio
    if epsilon > 0:
        rand = np.random.rand(combined.size)
        combined = (1 - epsilon) * combined + epsilon * rand
    idx = np.flatnonzero(feasible)
    combined += jitter * idx
    scores[feasible] = combined
    return scores
```
