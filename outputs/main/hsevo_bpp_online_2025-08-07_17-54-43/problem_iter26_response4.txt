```python
import numpy as np

# Simple deterministic priority for online bin packing
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Score bins by negative slack after placement, add a small ratio term, and deterministic index offset for tie-breaking. Infeasible bins get -inf.
    """
    n = bins_remain_cap.size
    scores = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    ratio = item / bins_remain_cap[feasible]
    ratio_weight = 0.1
    base = -slack
    combined = base + ratio_weight * ratio
    idx = np.flatnonzero(feasible)
    tie_break = 1e-9 / (idx + 1)
    combined += tie_break
    scores[feasible] = combined
    return scores
```
