```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit priority with smooth near‑full boost, exact‑fit bonus, fill‑ratio weighting, and adaptive ε‑greedy tie‑breaker."""
    n = bins_remain_cap.size
    feasible = bins_remain_cap >= item
    scores = np.full(n, -np.inf, dtype=float)
    if not feasible.any():
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    tiny = 1e-6
    smooth_boost = 0.5 / (slack + tiny)
    smooth_boost = np.minimum(smooth_boost, 5.0)
    threshold = max(0.02, 0.05 * item)
    near_full = slack <= threshold
    exact = np.isclose(slack, 0.0, atol=1e-9)
    fill_ratio = item / bins_remain_cap[feasible]
    scores[feasible] = base + smooth_boost + 0.5 * near_full + 1.0 * exact + 0.1 * fill_ratio
    epsilon_factor = 0.5
    epsilon = epsilon_factor * (1 - feasible.sum() / n)
    if np.random.rand() < epsilon:
        idx = np.random.choice(np.flatnonzero(feasible))
        scores[idx] += 1.0
    return scores
```
