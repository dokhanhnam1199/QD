{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords:** static\u202f\u03b5, normalized slack ratio, implicit infeasibility, stateless, softmax selection  \n- **Advice:** Use a constant small\u202f\u03b5 for occasional random picks, score each item as (capacity\u2011slack)/capacity, turn scores into probabilities via a softmax, and keep functions pure with no extra parameters.  \n- **Avoid:** per\u2011iteration \u03b5 adjustments, custom near\u2011full bonuses, jitter, stateful objects, explicit infeasibility flags, multiplicative or additive boost terms, random mixing per element, over\u2011parameterized designs.  \n- **Explanation:** These choices keep the heuristic transparent, limit hidden bias, ensure reproducibility and generality, and focus the search on true capacity efficiency without fragile problem\u2011specific tricks.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}