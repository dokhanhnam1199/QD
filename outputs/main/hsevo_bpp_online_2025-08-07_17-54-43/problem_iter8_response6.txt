```python
import numpy as np

# This priority function uses best-fit scoring with a small near-full boost and
# a static epsilon-greedy exploration step.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Simple best-fit priority with near-full boost and epsilon-greedy exploration."""
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.2
    n = bins_remain_cap.size
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priorities
    slack = bins_remain_cap[feasible] - item
    base = -slack
    near_full_thresh = max(0.02, 0.05 * item)
    boost = 0.5
    base[slack <= near_full_thresh] += boost
    priorities[feasible] = base
    if np.random.rand() < priority_v2._epsilon:
        rand_scores = np.random.rand(n)
        rand_scores[~feasible] = -np.inf
        priorities = rand_scores
    return priorities
```
