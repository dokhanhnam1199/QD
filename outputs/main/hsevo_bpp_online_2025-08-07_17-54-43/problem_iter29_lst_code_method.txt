{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\n# Simple deterministic best\u2011fit priority for online bin packing.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Deterministic best\u2011fit: prioritize smallest remaining capacity; tie\u2011break by index.\"\"\"\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    idx = np.flatnonzero(feasible)\n    base += idx * 1e-9  # tiny index bias for deterministic tie\u2011breaking\n    scores[feasible] = base\n    return scores\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    priorities = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return priorities\n    idx_feas = np.where(feasible)[0]\n    slack = bins_remain_cap[feasible] - item\n    near_full_threshold = 0.1 * bins_remain_cap.max()\n    near_full_bonus = 0.5\n    jitter_scale = 1e-3\n    epsilon = 0.05\n    tie_break = idx_feas[::-1] * 1e-6\n    bonus = np.where(slack <= near_full_threshold, near_full_bonus, 0.0)\n    jitter = (np.random.rand(len(slack)) - 0.5) * jitter_scale\n    base = -slack + bonus + jitter + tie_break\n    if np.random.rand() < epsilon:\n        priorities[feasible] = np.random.rand(len(slack))\n    else:\n        priorities[feasible] = base\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\n# deterministic best\u2011fit scoring with slack, ratio penalty, near\u2011full boost and index tie\u2011breaker\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Deterministic best\u2011fit scoring with negative slack base, item/remaining ratio penalty, near\u2011full boost, and index offset tie\u2011breaker.\"\"\"\n    valid = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base = -slack\n    ratio = item / bins_remain_cap[valid]\n    base += 0.05 * ratio\n    base += (slack <= 0.05 * bins_remain_cap[valid]) * 0.5\n    idx = np.flatnonzero(valid)\n    base += 1e-6 * idx\n    priorities[valid] = base\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\n# Adaptive epsilon\u2011greedy best\u2011fit with near\u2011full boost and ratio penalty\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins using negative slack, a small ratio penalty, and a near\u2011full boost. Occasionally explore random bins with decaying epsilon.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(\n        priority_v2._epsilon_min,\n        priority_v2._epsilon * priority_v2._epsilon_decay,\n    )\n    eps = priority_v2._epsilon\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack, base = bins_remain_cap[feasible] - item, None\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    ratio = item / bins_remain_cap[feasible]\n    ratio_weight = 0.02\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    bonus = np.where(slack <= near_full_thresh, boost, 0.0)\n    deterministic = base + ratio_weight * ratio + bonus\n    if np.random.rand() < eps:\n        scores[feasible] = np.random.rand(feasible.sum())\n    else:\n        jitter = np.random.rand(feasible.sum()) * 1e-6\n        scores[feasible] = deterministic + jitter\n    return scores\n\n[Heuristics 11th]\nimport numpy as np\n\n# Adaptive epsilon\u2011greedy best\u2011fit with near\u2011full boost and ratio penalty\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins using negative slack, a small ratio penalty, and a near\u2011full boost. Occasionally explore random bins with decaying epsilon.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(\n        priority_v2._epsilon_min,\n        priority_v2._epsilon * priority_v2._epsilon_decay,\n    )\n    eps = priority_v2._epsilon\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack, base = bins_remain_cap[feasible] - item, None\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    ratio = item / bins_remain_cap[feasible]\n    ratio_weight = 0.02\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    bonus = np.where(slack <= near_full_thresh, boost, 0.0)\n    deterministic = base + ratio_weight * ratio + bonus\n    if np.random.rand() < eps:\n        scores[feasible] = np.random.rand(feasible.sum())\n    else:\n        jitter = np.random.rand(feasible.sum()) * 1e-6\n        scores[feasible] = deterministic + jitter\n    return scores\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    priorities = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return priorities\n    idx_feas = np.where(feasible)[0]\n    slack = bins_remain_cap[feasible] - item\n    near_full_threshold = 0.1 * bins_remain_cap.max()\n    near_full_bonus = 0.5\n    jitter_scale = 1e-3\n    epsilon = 0.05\n    tie_break = idx_feas[::-1] * 1e-6\n    bonus = np.where(slack <= near_full_threshold, near_full_bonus, 0.0)\n    jitter = (np.random.rand(len(slack)) - 0.5) * jitter_scale\n    base = -slack + bonus + jitter + tie_break\n    if np.random.rand() < epsilon:\n        priorities[feasible] = np.random.rand(len(slack))\n    else:\n        priorities[feasible] = base\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\n# Simple deterministic best\u2011fit priority for online bin packing.\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Deterministic best\u2011fit: prioritize smallest remaining capacity; tie\u2011break by index.\"\"\"\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    idx = np.flatnonzero(feasible)\n    base += idx * 1e-9  # tiny index bias for deterministic tie\u2011breaking\n    scores[feasible] = base\n    return scores\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    idx = np.flatnonzero(feasible)\n    base += 1e-9 * idx\n    scores[feasible] = base\n    eps = 0.07\n    if np.random.rand() < eps:\n        chosen = np.random.choice(idx)\n        scores[chosen] += 1.0\n    return scores\n\n[Heuristics 15th]\nimport numpy as np\n\n# deterministic best\u2011fit scoring with slack, ratio penalty, near\u2011full boost and index tie\u2011breaker\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Deterministic best\u2011fit scoring with negative slack base, item/remaining ratio penalty, near\u2011full boost, and index offset tie\u2011breaker.\"\"\"\n    valid = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base = -slack\n    ratio = item / bins_remain_cap[valid]\n    base += 0.05 * ratio\n    base += (slack <= 0.05 * bins_remain_cap[valid]) * 0.5\n    idx = np.flatnonzero(valid)\n    base += 1e-6 * idx\n    priorities[valid] = base\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Simple best\u2011fit with \u03b5\u2011greedy, ratio tie\u2011breaker and capped near\u2011full boost.\"\"\"\n    feasible = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    ratio = item / bins_remain_cap[feasible]\n    ratio_weight = 0.02\n    near_full_threshold = 0.05\n    near_full_boost = np.where(slack <= near_full_threshold * bins_remain_cap[feasible], 0.1, 0.0)\n    boost = np.minimum(near_full_boost, 0.2)\n    deterministic = base + ratio_weight * ratio + boost\n    epsilon = 0.05\n    if np.random.rand() < epsilon:\n        scores[feasible] = np.random.rand(feasible.sum())\n    else:\n        jitter = np.random.uniform(0, 1e-6, size=deterministic.shape)\n        scores[feasible] = deterministic + jitter\n    return scores\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best-fit with near-full boost, static \u03b5\u2011greedy exploration, and deterministic tie\u2011breaking.\"\"\"\n    epsilon = 0.05\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base[slack <= near_full_thresh] += boost\n    idx = np.where(feasible)[0]\n    deterministic = base + 1e-9 * idx\n    if np.random.rand() < epsilon:\n        scores[feasible] = np.random.rand(slack.size)\n    else:\n        scores[feasible] = deterministic\n    return scores\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best-fit with near-full boost, static \u03b5\u2011greedy exploration, and deterministic tie\u2011breaking.\"\"\"\n    epsilon = 0.05\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base[slack <= near_full_thresh] += boost\n    idx = np.where(feasible)[0]\n    deterministic = base + 1e-9 * idx\n    if np.random.rand() < epsilon:\n        scores[feasible] = np.random.rand(slack.size)\n    else:\n        scores[feasible] = deterministic\n    return scores\n\n[Heuristics 19th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon_initial: float = 0.9756100440469143,\n    epsilon_min: float = 0.3969712981652447,\n    epsilon_decay: float = 0.9946724161595234,\n    ratio_weight: float = 0.028269689818119448,\n    near_full_thresh_const: float = 0.08392783746092114,\n    near_full_thresh_factor: float = 0.17790197457083207,\n    boost: float = 1.1754640891512518,\n    jitter_scale: float = 8.633295903113424e-05,\n) -> np.ndarray:\n    \"\"\"Score bins using negative slack, a small ratio penalty, and a near\u2011full boost.\n    Occasionally explore random bins with decaying epsilon.\"\"\"\n    # Initialise epsilon state on first call\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = epsilon_initial\n        priority_v2._epsilon_min = epsilon_min\n        priority_v2._epsilon_decay = epsilon_decay\n        priority_v2._step = 0\n    priority_v2._step += 1\n\n    # Decay epsilon\n    priority_v2._epsilon = max(\n        priority_v2._epsilon_min,\n        priority_v2._epsilon * priority_v2._epsilon_decay,\n    )\n    eps = priority_v2._epsilon\n\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n\n[Heuristics 20th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon_initial: float = 0.9756100440469143,\n    epsilon_min: float = 0.3969712981652447,\n    epsilon_decay: float = 0.9946724161595234,\n    ratio_weight: float = 0.028269689818119448,\n    near_full_thresh_const: float = 0.08392783746092114,\n    near_full_thresh_factor: float = 0.17790197457083207,\n    boost: float = 1.1754640891512518,\n    jitter_scale: float = 8.633295903113424e-05,\n) -> np.ndarray:\n    \"\"\"Score bins using negative slack, a small ratio penalty, and a near\u2011full boost.\n    Occasionally explore random bins with decaying epsilon.\"\"\"\n    # Initialise epsilon state on first call\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = epsilon_initial\n        priority_v2._epsilon_min = epsilon_min\n        priority_v2._epsilon_decay = epsilon_decay\n        priority_v2._step = 0\n    priority_v2._step += 1\n\n    # Decay epsilon\n    priority_v2._epsilon = max(\n        priority_v2._epsilon_min,\n        priority_v2._epsilon * priority_v2._epsilon_decay,\n    )\n    eps = priority_v2._epsilon\n\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}