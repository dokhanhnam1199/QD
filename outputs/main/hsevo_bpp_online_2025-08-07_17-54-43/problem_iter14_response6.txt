```python
import numpy as np

# best‑fit with slack, exact‑fit boost, jitter, and adaptive epsilon‑greedy
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best‑fit, exact‑fit boost, near‑full boost, jitter, and adaptive epsilon‑greedy."""
    valid = bins_remain_cap >= item
    n = bins_remain_cap.size
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if np.any(valid):
        slack = bins_remain_cap[valid] - item
        base = -slack / bins_remain_cap[valid]
        base[np.isclose(slack, 0.0, atol=1e-9)] += 1.0
        base[slack <= 0.05 * bins_remain_cap[valid]] += 0.5
        base += (np.random.rand(valid.sum()) - 0.5) * 0.01
        priorities[valid] = base
        valid_count = np.count_nonzero(valid)
        epsilon = 0.05 * (1 - valid_count / n)
        if np.random.rand() < epsilon:
            idx = np.random.choice(np.flatnonzero(valid))
            priorities[idx] += 1.0
    return priorities
```
