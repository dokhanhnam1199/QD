{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    epsilon = 0.05\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = 1.0 / (slack + 1e-12)\n    near_full_thresh = max(0.02, 0.05 * item)\n    base += np.where(slack <= near_full_thresh, 0.5, 0.0)\n    base += np.where(slack <= 1e-12, 2.0, 0.0)\n    scores[feasible] = base\n    if np.random.rand() < epsilon:\n        scores[feasible] = np.random.rand(feasible.sum())\n    return scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Static epsilon\u2011greedy best\u2011fit: negative slack, +boost for near\u2011full and exact fits.\"\"\"\n    epsilon = 0.1\n    near_full_factor = 0.05\n    near_full_abs_thresh = 0.02\n    near_full_boost = 0.5\n    exact_fit_boost = 1.0\n    n = bins_remain_cap.size\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return scores\n    # Compute slack for feasible bins\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    # Apply near\u2011full boost\n    near_full_thresh = max(near_full_abs_thresh, near_full_factor * item)\n    base[slack <= near_full_thresh] += near_full_boost\n    # Apply exact\u2011fit boost\n    base[np.isclose(slack, 0.0, atol=1e-9)] += exact_fit_boost\n    scores[feasible] = base\n    # \u03b5\u2011greedy exploration\n    if np.random.rand() < epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        scores = rand\n    return scores\n\n### Analyze & experience\n- Comparing Heuristic\u202f1 (adaptive \u03b5\u2011greedy with decay, near\u2011full boost, clear docstring) vs Heuristic\u202f20 (static \u03b5\u2011greedy, only a near\u2011full boost, generic docstring) shows the impact of adaptive exploration: \u03b5 decays over time, reducing random moves, while Heuristic\u202f20\u2019s \u03b5 stays fixed, leading to unnecessary randomness. Heuristic\u202f1 uses `-np.inf` for infeasible bins, whereas Heuristic\u202f20 uses an arbitrary huge negative sentinel, making infeasibility handling less clean.  \n\nHeuristic\u202f2 is identical to Heuristic\u202f1; the ranking discrepancy likely reflects non\u2011code factors (e.g., runtime overhead) rather than functionality.  \n\nHeuristic\u202f3 employs a simple linear penalty (`-slack`) and computes \u03b5 as `0.05\u202f\u00d7\u202f(1\u202f\u2013\u202fvalid_count/n)`. It lacks a docstring and only adds a tiny random boost, so its guidance is weak. In contrast, Heuristics\u202f4\u20116 contain many unused imports, an enormous default priority (`-5.857e11`), and a high \u03b5\u2011factor (~0.82). Their docstrings mention \u201cepsilon_factor\u201d and \u201ctie_breaker,\u201d but the parameters are arbitrarily large, causing excessive randomness and poorer deterministic decisions.  \n\nHeuristics\u202f7\u20119 use inverse\u2011slack (`1/(slack+\u03b5)`) with a fixed \u03b5\u2011greedy fallback (0.1). They have no near\u2011full or exact\u2011fit boosts, making them less discriminative. Heuristic\u202f10 introduces a smooth boost `0.5/(slack+tiny)` capped at\u202f5, adds jitter, and uses a modest \u03b5\u202f=\u202f0.05 fallback. Its docstring explicitly cites \u201cbest\u2011fit, smooth tightness boost, jitter,\u201d yielding finer granularity and better tie\u2011breaking than Heuristics\u202f7\u20119.  \n\nComparing Heuristic\u202f10 with Heuristic\u202f11 (inverse\u2011slack plus step\u2011wise boosts) highlights that a continuous boost (10) provides smoother ranking than the step\u2011wise 0.5 boost and exact\u2011fit boost of\u202f2.0 in\u202f11. Both use \u03b5\u2011greedy, but only\u202f10 adds jitter, reducing lock\u2011in on equal scores.  \n\nHeuristic\u202f15 adds an exact\u2011fit boost (1.0) and a fixed near\u2011full threshold (0.05) on top of a static \u03b5\u202f=\u202f0.1. Heuristic\u202f16 refines this by separating a relative factor (0.05\u202f\u00d7\u202fitem) and an absolute floor (0.02), and uses `np.isclose` for exact fits. This extra flexibility improves handling of varied item sizes, explaining why\u202f16 outranks\u202f15.  \n\nHeuristic\u202f18 (and duplicates\u202f19\u201120) omit the exact\u2011fit boost altogether and rely solely on a near\u2011full boost, with a static \u03b5. The lack of adaptive \u03b5 decay and smoother boosting makes it the weakest among the best\u2011fit family.  \n\nOverall, the ranking reflects three clear design trends: (1) adaptive \u03b5\u2011decay outperforms static \u03b5; (2) smooth, continuous slack\u2011based boosts with jitter dominate step\u2011wise or purely inverse\u2011slack scores; (3) concise code, purposeful imports, and well\u2011written docstrings correlate with higher ranks, while redundant imports and arbitrary large constants penalize lower ranks.\n- \n- **Keywords:** static\u202f\u03b5, normalized slack ratio, implicit infeasibility, stateless, softmax selection  \n- **Advice:** Use a constant small\u202f\u03b5 for occasional random picks, score each item as (capacity\u2011slack)/capacity, turn scores into probabilities via a softmax, and keep functions pure with no extra parameters.  \n- **Avoid:** per\u2011iteration \u03b5 adjustments, custom near\u2011full bonuses, jitter, stateful objects, explicit infeasibility flags, multiplicative or additive boost terms, random mixing per element, over\u2011parameterized designs.  \n- **Explanation:** These choices keep the heuristic transparent, limit hidden bias, ensure reproducibility and generality, and focus the search on true capacity efficiency without fragile problem\u2011specific tricks.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}