{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\n# Adaptive epsilon\u2011greedy best\u2011fit with near\u2011full boost and ratio penalty\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins using negative slack, a small ratio penalty, and a near\u2011full boost. Occasionally explore random bins with decaying epsilon.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(\n        priority_v2._epsilon_min,\n        priority_v2._epsilon * priority_v2._epsilon_decay,\n    )\n    eps = priority_v2._epsilon\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack, base = bins_remain_cap[feasible] - item, None\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    ratio = item / bins_remain_cap[feasible]\n    ratio_weight = 0.02\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    bonus = np.where(slack <= near_full_thresh, boost, 0.0)\n    deterministic = base + ratio_weight * ratio + bonus\n    if np.random.rand() < eps:\n        scores[feasible] = np.random.rand(feasible.sum())\n    else:\n        jitter = np.random.rand(feasible.sum()) * 1e-6\n        scores[feasible] = deterministic + jitter\n    return scores\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}