import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                epsilon: float = 1.022425976533208,
                near_full_abs_thresh: float = 0.461743166650335,
                near_full_factor: float = 0.31415906121817716,
                exact_fit_boost: float = 1.5954974667047694,
                near_full_boost: float = 6.45048377797721) -> np.ndarray:
    """Best‑fit scoring with ε‑greedy exploration and near‑full, exact‑fit boosts.

    Parameters
    ----------
    item : float
        Size of the item to pack.
    bins_remain_cap : np.ndarray
        Remaining capacity of each bin.
    epsilon : float, optional
        Exploration probability for ε‑greedy selection.
    near_full_abs_thresh : float, optional
        Minimum absolute slack threshold for near‑full boost.
    near_full_factor : float, optional
        Relative factor of item size to compute near‑full slack threshold.
    exact_fit_boost : float, optional
        Boost added to bins where slack is exactly zero.
    near_full_boost : float, optional
        Boost added to bins where slack is less than or equal to the near‑full threshold.
    """
    n = bins_remain_cap.size
    scores = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return scores

    slack = bins_remain_cap[feasible] - item
    base = -slack

    near_full_thresh = max(near_full_abs_thresh, near_full_factor * item)

    boost = np.zeros_like(slack)
    boost[slack == 0] = exact_fit_boost
    boost[slack <= near_full_thresh] += near_full_boost
    base += boost
    scores[feasible] = base

    if np.random.rand() < epsilon:
        rand = np.random.rand(n)
        rand[~feasible] = -np.inf
        return rand
    return scores
