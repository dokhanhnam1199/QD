```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by tightness (best‑fit) plus capacity‑ratio; optional ε‑greedy exploration."""
    n = bins_remain_cap.size
    feasible = bins_remain_cap >= item
    priorities = np.full(n, -np.inf, dtype=float)   # infeasible bins get -inf
    if not np.any(feasible):
        return priorities
    slack = bins_remain_cap[feasible] - item       # remaining space after placing
    base = -slack                                   # best‑fit: smaller slack → higher score
    ratio = item / bins_remain_cap[feasible]       # capacity‑ratio: tighter fit → higher score
    scores = base + 0.2 * ratio                     # combine both components
    scores += np.random.rand(scores.shape[0]) * 1e-6  # tiny jitter to break ties
    priorities[feasible] = scores
    epsilon = 0.02                                 # small chance to explore randomly
    if np.random.rand() < epsilon:
        priorities[feasible] = np.random.rand(scores.shape[0])
    return priorities
```
