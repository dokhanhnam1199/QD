```python
import numpy as np

# deterministic best‑fit scoring with slack, ratio penalty, near‑full boost and index tie‑breaker
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Deterministic best‑fit scoring with negative slack base, item/remaining ratio penalty, near‑full boost, and index offset tie‑breaker."""
    valid = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(valid):
        return priorities
    slack = bins_remain_cap[valid] - item
    base = -slack
    ratio = item / bins_remain_cap[valid]
    base += 0.05 * ratio
    base += (slack <= 0.05 * bins_remain_cap[valid]) * 0.5
    idx = np.flatnonzero(valid)
    base += 1e-6 * idx
    priorities[valid] = base
    return priorities
```
