```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best-fit with smooth near‑full boost, exact‑fit bonus, capacity ratio weight, and decaying epsilon‑greedy exploration."""
    if not hasattr(priority_v2, "_epsilon"):
        priority_v2._epsilon = 0.2
        priority_v2._epsilon_min = 0.01
        priority_v2._epsilon_decay = 0.995
    n = bins_remain_cap.size
    scores = np.full(n, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    base = -slack
    tiny = 1e-8
    smooth_boost = 0.5 / (slack + tiny)
    smooth_boost = np.minimum(smooth_boost, 5.0)
    near_full_threshold = max(0.02, 0.05 * item)
    near_full_bonus = np.where(slack <= near_full_threshold, 0.5, 0.0)
    exact_fit_bonus = np.where(np.isclose(slack, 0.0, atol=1e-9), 1.0, 0.0)
    ratio = item / bins_remain_cap[feasible]
    scores[feasible] = base + smooth_boost + near_full_bonus + exact_fit_bonus + 0.1 * ratio
    scores[feasible] += 1e-6 * np.random.rand(scores[feasible].size)
    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)
    if np.random.rand() < priority_v2._epsilon:
        idx = np.random.choice(np.flatnonzero(feasible))
        scores[idx] = np.max(scores) + 1.0
    return scores
```
