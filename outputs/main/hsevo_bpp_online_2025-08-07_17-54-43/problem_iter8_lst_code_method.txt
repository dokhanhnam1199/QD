{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Adaptive epsilon\u2011greedy best\u2011fit with slack inverse, near\u2011full boost, and infeasibility handling.\n    \"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = 1.0 / (slack + 1e-12)\n    near_full_thresh = max(0.02, 0.05 * item)\n    base_priority[slack <= near_full_thresh] += 0.5\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Adaptive epsilon\u2011greedy best\u2011fit with slack inverse, near\u2011full boost, and infeasibility handling.\n    \"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = 1.0 / (slack + 1e-12)\n    near_full_thresh = max(0.02, 0.05 * item)\n    base_priority[slack <= near_full_thresh] += 0.5\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.3\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.99\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full(n, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        return rand_scores\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = np.zeros_like(slack)\n    boost[slack == 0] = 10.0\n    boost[slack <= near_full_thresh] += 3.0\n    base_priority += boost\n    priorities[valid] = base_priority\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit: prioritize minimal slack, boost near\u2011full bins, decay epsilon, mark infeasible as -inf.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.2\n        priority_v2.min_epsilon = 0.0\n        priority_v2.decay = 0.995\n        priority_v2.near_full_thresh = 0.05\n        priority_v2.near_full_boost = 0.5\n    eps = priority_v2.epsilon\n    n = bins_remain_cap.size\n    priorities = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full = slack <= priority_v2.near_full_thresh\n    base[near_full] += priority_v2.near_full_boost\n    if np.random.rand() < eps:\n        rand_scores = np.random.rand(feasible.sum())\n        priorities[feasible] = rand_scores\n    else:\n        priorities[feasible] = base\n    priority_v2.epsilon = max(priority_v2.min_epsilon, eps * priority_v2.decay)\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive \u03b5\u2011greedy best\u2011fit with near\u2011full boost and slight worst\u2011fit bias.\"\"\"\n    # Initialize static parameters on first call\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.2          # initial exploration rate\n        priority_v2.epsilon_min = 0.01    # floor for exploration\n        priority_v2.decay = 0.995         # exponential decay factor\n        priority_v2.near_full_thresh = 0.1  # slack threshold for near\u2011full bins\n        priority_v2.beta = 0.05           # worst\u2011fit bias coefficient\n        priority_v2.boost = 0.5           # boost added to near\u2011full bins\n    # Decay epsilon after each call\n    priority_v2.epsilon = max(priority_v2.epsilon_min,\n                              priority_v2.epsilon * priority_v2.decay)\n    # Feasibility mask\n    can_fit = bins_remain_cap >= item\n    slack = bins_remain_cap - item\n    eps = np.finfo(float).eps\n    # Base score: inverse slack (best\u2011fit) with a small worst\u2011fit bias\n    base_score = np.where(can_fit,\n                          1.0 / (slack + eps) - priority_v2.beta * slack,\n                          -np.inf)\n    # Add boost for bins that are nearly full\n    near_full = (slack <= priority_v2.near_full_thresh) & can_fit\n    base_score[near_full] += priority_v2.boost\n    # \u03b5\u2011greedy exploration: random scores with probability epsilon\n    if np.random.rand() < priority_v2.epsilon:\n        scores = np.where(can_fit, np.random.rand(len(bins_remain_cap)), -np.inf)\n    else:\n        scores = base_score\n    return scores\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive \u03b5\u2011greedy best\u2011fit with near\u2011full boost and softmax weighting for online bin packing.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base[slack <= near_full_thresh] += boost\n    max_base = base.max()\n    exp_scores = np.exp(base - max_base)\n    scores[feasible] = exp_scores\n    total = scores[feasible].sum()\n    if total > 0:\n        scores[feasible] = scores[feasible] / total\n    if np.random.rand() < priority_v2._epsilon:\n        rand = np.random.rand(n)\n        rand[~feasible] = -np.inf\n        return rand\n    return scores\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive \u03b5\u2011greedy best\u2011fit with near\u2011full boost; -inf for infeasible bins.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.2\n        priority_v2.epsilon_min = 0.01\n        priority_v2.decay = 0.995\n        priority_v2.near_full_thresh = 0.05\n        priority_v2.boost = 0.5\n    eps = priority_v2.epsilon\n    n = bins_remain_cap.shape[0]\n    feasible = bins_remain_cap >= item\n    scores = np.full(n, -np.inf, dtype=float)\n    if np.random.rand() < eps:\n        scores[feasible] = np.random.rand(feasible.sum())\n    else:\n        slack = bins_remain_cap[feasible] - item\n        near_full = slack <= priority_v2.near_full_thresh\n        base = 1.0 / (slack + np.finfo(float).eps)\n        base[near_full] += priority_v2.boost\n        scores[feasible] = base\n    priority_v2.epsilon = max(priority_v2.epsilon_min, eps * priority_v2.decay)\n    return scores\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive \u03b5\u2011greedy best\u2011fit with near\u2011full boost; -inf for infeasible bins.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.2\n        priority_v2.epsilon_min = 0.01\n        priority_v2.decay = 0.995\n        priority_v2.near_full_thresh = 0.05\n        priority_v2.boost = 0.5\n    eps = priority_v2.epsilon\n    n = bins_remain_cap.shape[0]\n    feasible = bins_remain_cap >= item\n    scores = np.full(n, -np.inf, dtype=float)\n    if np.random.rand() < eps:\n        scores[feasible] = np.random.rand(feasible.sum())\n    else:\n        slack = bins_remain_cap[feasible] - item\n        near_full = slack <= priority_v2.near_full_thresh\n        base = 1.0 / (slack + np.finfo(float).eps)\n        base[near_full] += priority_v2.boost\n        scores[feasible] = base\n    priority_v2.epsilon = max(priority_v2.epsilon_min, eps * priority_v2.decay)\n    return scores\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive \u03b5\u2011greedy best\u2011fit with near\u2011full boost; -inf for infeasible bins.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.2\n        priority_v2.epsilon_min = 0.01\n        priority_v2.decay = 0.995\n        priority_v2.near_full_thresh = 0.05\n        priority_v2.boost = 0.5\n    eps = priority_v2.epsilon\n    n = bins_remain_cap.shape[0]\n    feasible = bins_remain_cap >= item\n    scores = np.full(n, -np.inf, dtype=float)\n    if np.random.rand() < eps:\n        scores[feasible] = np.random.rand(feasible.sum())\n    else:\n        slack = bins_remain_cap[feasible] - item\n        near_full = slack <= priority_v2.near_full_thresh\n        base = 1.0 / (slack + np.finfo(float).eps)\n        base[near_full] += priority_v2.boost\n        scores[feasible] = base\n    priority_v2.epsilon = max(priority_v2.epsilon_min, eps * priority_v2.decay)\n    return scores\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive best-fit with worst\u2011fit bias, near\u2011full boost and \u03b5\u2011greedy.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.5\n        priority_v2.epsilon_min = 0.05\n        priority_v2.decay = 0.995\n        priority_v2.step = 0\n        priority_v2.near_full_thresh = 0.1\n        priority_v2.alpha = 0.01\n    if np.random.rand() < priority_v2.epsilon:\n        return np.random.random(bins_remain_cap.shape)\n    slack = bins_remain_cap - item\n    valid = slack >= 0\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priorities[valid] = -slack[valid] + priority_v2.alpha * slack[valid]\n    near_full = slack <= priority_v2.near_full_thresh\n    priorities[valid & near_full] += 0.5\n    priority_v2.epsilon = max(priority_v2.epsilon_min, priority_v2.epsilon * priority_v2.decay)\n    priority_v2.step += 1\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive best-fit with worst\u2011fit bias, near\u2011full boost and \u03b5\u2011greedy.\"\"\"\n    if not hasattr(priority_v2, \"epsilon\"):\n        priority_v2.epsilon = 0.5\n        priority_v2.epsilon_min = 0.05\n        priority_v2.decay = 0.995\n        priority_v2.step = 0\n        priority_v2.near_full_thresh = 0.1\n        priority_v2.alpha = 0.01\n    if np.random.rand() < priority_v2.epsilon:\n        return np.random.random(bins_remain_cap.shape)\n    slack = bins_remain_cap - item\n    valid = slack >= 0\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priorities[valid] = -slack[valid] + priority_v2.alpha * slack[valid]\n    near_full = slack <= priority_v2.near_full_thresh\n    priorities[valid & near_full] += 0.5\n    priority_v2.epsilon = max(priority_v2.epsilon_min, priority_v2.epsilon * priority_v2.decay)\n    priority_v2.step += 1\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                epsilon: float = 0.3029490039237682,\n                epsilon_min: float = 0.07292259727499244,\n                epsilon_decay: float = 0.8704448752801879,\n                near_full_thresh_base: float = 0.06244361354635141,\n                near_full_thresh_multiplier: float = 0.05249682954368101,\n                base_priority_increment: float = 1.2963271146145878,\n                small_eps: float = 7.4448870973632495e-09) -> np.ndarray:\n    \"\"\"\n    Adaptive epsilon\u2011greedy best\u2011fit with slack inverse, near\u2011full boost, and infeasibility handling.\n    \"\"\"\n    # Initialize static attributes on first call\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = epsilon\n        priority_v2._epsilon_min = epsilon_min\n        priority_v2._epsilon_decay = epsilon_decay\n        priority_v2._step = 0\n\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min,\n                               priority_v2._epsilon * priority_v2._epsilon_decay)\n\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Adaptive epsilon\u2011greedy best\u2011fit with near\u2011full boost.\n    \"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.3\n        priority_v2._epsilon_min = 0.05\n        priority_v2._decay = 0.99\n        priority_v2._step = 0\n        priority_v2._boost_factor = 1.5\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._decay)\n    priority_v2._step += 1\n    slack = bins_remain_cap - item\n    feasible = slack >= 0\n    eps_num = np.finfo(float).eps\n    base_score = np.where(feasible, 1.0/(slack+eps_num), 0.0)\n    near_full_thresh = 0.05 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.0\n    near_full_mask = (slack <= near_full_thresh) & feasible\n    base_score[near_full_mask] *= priority_v2._boost_factor\n    random_score = np.random.rand(len(bins_remain_cap))\n    scores = np.where(feasible, (1 - priority_v2._epsilon) * base_score + priority_v2._epsilon * random_score, -np.inf)\n    return scores\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Adaptive epsilon\u2011greedy best\u2011fit with near\u2011full boost.\n    \"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.3\n        priority_v2._epsilon_min = 0.05\n        priority_v2._decay = 0.99\n        priority_v2._step = 0\n        priority_v2._boost_factor = 1.5\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._decay)\n    priority_v2._step += 1\n    slack = bins_remain_cap - item\n    feasible = slack >= 0\n    eps_num = np.finfo(float).eps\n    base_score = np.where(feasible, 1.0/(slack+eps_num), 0.0)\n    near_full_thresh = 0.05 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.0\n    near_full_mask = (slack <= near_full_thresh) & feasible\n    base_score[near_full_mask] *= priority_v2._boost_factor\n    random_score = np.random.rand(len(bins_remain_cap))\n    scores = np.where(feasible, (1 - priority_v2._epsilon) * base_score + priority_v2._epsilon * random_score, -np.inf)\n    return scores\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit with near\u2011full boost; infeasible bins get -inf.\"\"\"\n    # stateful parameters for epsilon decay and near\u2011full boost\n    if not hasattr(priority_v2, \"exploration_epsilon\"):\n        priority_v2.exploration_epsilon = 0.3\n        priority_v2.epsilon_min = 0.01\n        priority_v2.decay = 0.995\n        priority_v2.step = 0\n        priority_v2.near_full_threshold = 0.1\n        priority_v2.near_full_boost = 2.0\n        priority_v2.eps_small = 1e-12\n    # decay exploration epsilon\n    priority_v2.exploration_epsilon = max(\n        priority_v2.epsilon_min,\n        priority_v2.exploration_epsilon * priority_v2.decay,\n    )\n    eps = priority_v2.exploration_epsilon\n    priority_v2.step += 1\n    slack = bins_remain_cap.astype(float) - item\n    feasible = slack >= 0\n    n = bins_remain_cap.shape[0]\n    scores = np.full(n, -np.inf, dtype=float)\n    if not feasible.any():\n        return scores\n    base = 1.0 / (slack[feasible] + priority_v2.eps_small)\n    near_full = slack[feasible] <= priority_v2.near_full_threshold\n    if near_full.any():\n        base[near_full] *= priority_v2.near_full_boost\n    rand_vals = np.random.rand(base.size)\n    explore = np.random.rand(base.size) < eps\n    bin_scores = np.where(explore, rand_vals, base)\n    idx = np.where(feasible)[0]\n    bin_scores += -idx * 1e-6\n    scores[feasible] = bin_scores\n    return scores\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit with near\u2011full boost; infeasible bins get -inf.\"\"\"\n    # stateful parameters for epsilon decay and near\u2011full boost\n    if not hasattr(priority_v2, \"exploration_epsilon\"):\n        priority_v2.exploration_epsilon = 0.3\n        priority_v2.epsilon_min = 0.01\n        priority_v2.decay = 0.995\n        priority_v2.step = 0\n        priority_v2.near_full_threshold = 0.1\n        priority_v2.near_full_boost = 2.0\n        priority_v2.eps_small = 1e-12\n    # decay exploration epsilon\n    priority_v2.exploration_epsilon = max(\n        priority_v2.epsilon_min,\n        priority_v2.exploration_epsilon * priority_v2.decay,\n    )\n    eps = priority_v2.exploration_epsilon\n    priority_v2.step += 1\n    slack = bins_remain_cap.astype(float) - item\n    feasible = slack >= 0\n    n = bins_remain_cap.shape[0]\n    scores = np.full(n, -np.inf, dtype=float)\n    if not feasible.any():\n        return scores\n    base = 1.0 / (slack[feasible] + priority_v2.eps_small)\n    near_full = slack[feasible] <= priority_v2.near_full_threshold\n    if near_full.any():\n        base[near_full] *= priority_v2.near_full_boost\n    rand_vals = np.random.rand(base.size)\n    explore = np.random.rand(base.size) < eps\n    bin_scores = np.where(explore, rand_vals, base)\n    idx = np.where(feasible)[0]\n    bin_scores += -idx * 1e-6\n    scores[feasible] = bin_scores\n    return scores\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit with near\u2011full boost; infeasible bins get -inf.\"\"\"\n    # stateful parameters for epsilon decay and near\u2011full boost\n    if not hasattr(priority_v2, \"exploration_epsilon\"):\n        priority_v2.exploration_epsilon = 0.3\n        priority_v2.epsilon_min = 0.01\n        priority_v2.decay = 0.995\n        priority_v2.step = 0\n        priority_v2.near_full_threshold = 0.1\n        priority_v2.near_full_boost = 2.0\n        priority_v2.eps_small = 1e-12\n    # decay exploration epsilon\n    priority_v2.exploration_epsilon = max(\n        priority_v2.epsilon_min,\n        priority_v2.exploration_epsilon * priority_v2.decay,\n    )\n    eps = priority_v2.exploration_epsilon\n    priority_v2.step += 1\n    slack = bins_remain_cap.astype(float) - item\n    feasible = slack >= 0\n    n = bins_remain_cap.shape[0]\n    scores = np.full(n, -np.inf, dtype=float)\n    if not feasible.any():\n        return scores\n    base = 1.0 / (slack[feasible] + priority_v2.eps_small)\n    near_full = slack[feasible] <= priority_v2.near_full_threshold\n    if near_full.any():\n        base[near_full] *= priority_v2.near_full_boost\n    rand_vals = np.random.rand(base.size)\n    explore = np.random.rand(base.size) < eps\n    bin_scores = np.where(explore, rand_vals, base)\n    idx = np.where(feasible)[0]\n    bin_scores += -idx * 1e-6\n    scores[feasible] = bin_scores\n    return scores\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}