```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Normalized fill ratio scoring with static ε‑greedy random fallback and softmax."""
    feasible = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not feasible.any():
        return scores
    scores[feasible] = item / bins_remain_cap[feasible]
    epsilon = 0.05
    if np.random.rand() < epsilon:
        rand = np.random.rand(bins_remain_cap.size)
        rand[~feasible] = -np.inf
        scores = rand
    max_score = np.max(scores[feasible])
    exp_scores = np.exp(scores - max_score)
    probs = exp_scores / np.sum(exp_scores)
    return probs
```
