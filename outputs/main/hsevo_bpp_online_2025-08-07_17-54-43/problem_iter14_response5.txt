```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit heuristic: fill ratio + small inverse‑slack boost, ε‑greedy, softmax probabilities."""
    epsilon = 0.05
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return scores
    slack = bins_remain_cap[feasible] - item
    fill_ratio = item / bins_remain_cap[feasible]
    inv_slack = 1.0 / (slack + 1e-12)
    inv_norm = inv_slack / (inv_slack.max() + 1e-12)
    alpha = 0.1
    base = fill_ratio + alpha * inv_norm
    scores[feasible] = base
    if np.random.rand() < epsilon:
        scores[feasible] = np.random.rand(feasible.sum())
    max_score = np.max(scores[feasible])
    exp_scores = np.zeros_like(scores)
    exp_scores[feasible] = np.exp and np.exp(scores[feasible] - max_score)
    total = exp_scores.sum()
    if total > 0:
        exp_scores /= total
    return exp_scores
```
