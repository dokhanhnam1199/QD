{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive epsilon\u2011greedy best\u2011fit priority with near\u2011full boost and infeasibility handling.\"\"\"\n    if not hasattr(priority_v2, \"_epsilon\"):\n        priority_v2._epsilon = 0.2\n        priority_v2._epsilon_min = 0.01\n        priority_v2._epsilon_decay = 0.995\n        priority_v2._step = 0\n    priority_v2._step += 1\n    priority_v2._epsilon = max(priority_v2._epsilon_min, priority_v2._epsilon * priority_v2._epsilon_decay)\n    n = bins_remain_cap.size\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base_priority = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base_priority[slack <= near_full_thresh] += boost\n    priorities[valid] = base_priority\n    if np.random.rand() < priority_v2._epsilon:\n        rand_scores = np.random.rand(n)\n        rand_scores[~valid] = -np.inf\n        priorities = rand_scores\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best\u2011fit and epsilon\u2011greedy random exploration.\n    \"\"\"\n    eps = 0.1\n    can_fit = bins_remain_cap >= item\n    if np.random.rand() < eps:\n        scores = np.where(can_fit, np.random.rand(len(bins_remain_cap)), -np.inf)\n    else:\n        slack = bins_remain_cap - item\n        eps_num = np.finfo(float).eps\n        scores = np.where(can_fit, 1.0/(slack + eps_num), -np.inf)\n    return scores\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best\u2011fit and epsilon\u2011greedy random exploration.\n    \"\"\"\n    eps = 0.1\n    can_fit = bins_remain_cap >= item\n    if np.random.rand() < eps:\n        scores = np.where(can_fit, np.random.rand(len(bins_remain_cap)), -np.inf)\n    else:\n        slack = bins_remain_cap - item\n        eps_num = np.finfo(float).eps\n        scores = np.where(can_fit, 1.0/(slack + eps_num), -np.inf)\n    return scores\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best\u2011fit and epsilon\u2011greedy random exploration.\n    \"\"\"\n    eps = 0.1\n    can_fit = bins_remain_cap >= item\n    if np.random.rand() < eps:\n        scores = np.where(can_fit, np.random.rand(len(bins_remain_cap)), -np.inf)\n    else:\n        slack = bins_remain_cap - item\n        eps_num = np.finfo(float).eps\n        scores = np.where(can_fit, 1.0/(slack + eps_num), -np.inf)\n    return scores\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Epsilon\u2011greedy best\u2011fit heuristic with softmax weighting for online bin packing. Uses adaptive epsilon for exploration, marking infeasible bins with -inf and applying softmax to negative slack for exploitation.\"\"\"\n    if not hasattr(priority_v2, \"_calls\"):\n        priority_v2._calls = 0\n    priority_v2._calls += 1\n    eps = max(0.01, 0.2 / np.sqrt(priority_v2._calls))\n    n = bins_remain_cap.size\n    if np.random.rand() < eps:\n        return np.random.rand(n)\n    slack = bins_remain_cap - item\n    feasible = slack >= 0\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    scores[feasible] = -slack[feasible]\n    if feasible.any():\n        max_score = scores[feasible].max()\n        exp_scores = np.exp(scores - max_score)\n        exp_scores[~feasible] = 0.0\n        total = exp_scores.sum()\n        if total > 0:\n            return exp_scores / total\n    return np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best-fit priority with \u03b5\u2011greedy adaptive exploration. Feasible bins get -slack; with probability \u03b5 random scores are used. \u03b5 decays each call toward a minimum.\"\"\"\n    if not hasattr(priority_v2, 'epsilon'):\n        priority_v2.epsilon = 0.2\n        priority_v2.min_epsilon = 0.01\n        priority_v2.decay = 0.995\n    eps = priority_v2.epsilon\n    n = bins_remain_cap.size\n    priorities = np.full(n, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    priorities[valid] = -(bins_remain_cap[valid] - item)\n    if np.random.rand() < eps:\n        rand_scores = np.random.random(n)\n        priorities[valid] = rand_scores[valid]\n    priority_v2.epsilon = max(priority_v2.min_epsilon, eps * priority_v2.decay)\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best-fit priority with \u03b5\u2011greedy adaptive exploration. Feasible bins get -slack; with probability \u03b5 random scores are used. \u03b5 decays each call toward a minimum.\"\"\"\n    if not hasattr(priority_v2, 'epsilon'):\n        priority_v2.epsilon = 0.2\n        priority_v2.min_epsilon = 0.01\n        priority_v2.decay = 0.995\n    eps = priority_v2.epsilon\n    n = bins_remain_cap.size\n    priorities = np.full(n, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    priorities[valid] = -(bins_remain_cap[valid] - item)\n    if np.random.rand() < eps:\n        rand_scores = np.random.random(n)\n        priorities[valid] = rand_scores[valid]\n    priority_v2.epsilon = max(priority_v2.min_epsilon, eps * priority_v2.decay)\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Best-fit priority with \u03b5\u2011greedy adaptive exploration. Feasible bins get -slack; with probability \u03b5 random scores are used. \u03b5 decays each call toward a minimum.\"\"\"\n    if not hasattr(priority_v2, 'epsilon'):\n        priority_v2.epsilon = 0.2\n        priority_v2.min_epsilon = 0.01\n        priority_v2.decay = 0.995\n    eps = priority_v2.epsilon\n    n = bins_remain_cap.size\n    priorities = np.full(n, -np.inf, dtype=float)\n    valid = bins_remain_cap >= item\n    priorities[valid] = -(bins_remain_cap[valid] - item)\n    if np.random.rand() < eps:\n        rand_scores = np.random.random(n)\n        priorities[valid] = rand_scores[valid]\n    priority_v2.epsilon = max(priority_v2.min_epsilon, eps * priority_v2.decay)\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Best-fit with a small worst\u2011fit bias and \u03b5\u2011greedy exploration.\n    \"\"\"\n    eps = 0.05\n    if np.random.rand() < eps:\n        return np.random.random(bins_remain_cap.shape)\n    slack = bins_remain_cap - item\n    valid = slack >= 0\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priorities[valid] = -slack[valid] + 0.01 * bins_remain_cap[valid]\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Best-fit with a small worst\u2011fit bias and \u03b5\u2011greedy exploration.\n    \"\"\"\n    eps = 0.05\n    if np.random.rand() < eps:\n        return np.random.random(bins_remain_cap.shape)\n    slack = bins_remain_cap - item\n    valid = slack >= 0\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priorities[valid] = -slack[valid] + 0.01 * bins_remain_cap[valid]\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Best-fit with a small worst\u2011fit bias and \u03b5\u2011greedy exploration.\n    \"\"\"\n    eps = 0.05\n    if np.random.rand() < eps:\n        return np.random.random(bins_remain_cap.shape)\n    slack = bins_remain_cap - item\n    valid = slack >= 0\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priorities[valid] = -slack[valid] + 0.01 * bins_remain_cap[valid]\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:\n    \"\"\"Best\u2011fit priority with \u03b5\u2011greedy exploration.\"\"\"\n    feasible = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    base_priority = np.where(feasible, 1.0/(waste + 1e-12), -np.inf)\n    random_priority = np.random.rand(bins_remain_cap.size)\n    return np.where(feasible, (1 - epsilon) * base_priority + epsilon * random_priority, -np.inf)\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:\n    \"\"\"Best\u2011fit priority with \u03b5\u2011greedy exploration.\"\"\"\n    feasible = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    base_priority = np.where(feasible, 1.0/(waste + 1e-12), -np.inf)\n    random_priority = np.random.rand(bins_remain_cap.size)\n    return np.where(feasible, (1 - epsilon) * base_priority + epsilon * random_priority, -np.inf)\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.05) -> np.ndarray:\n    slack = bins_remain_cap.astype(float) - item\n    eps = 1e-9\n    feasible = slack >= 0\n    base = np.where(feasible, 1.0 / (slack + eps), -np.inf)\n    rand = np.random.rand(bins_remain_cap.shape[0])\n    scores = np.where(feasible, (1 - epsilon) * base + epsilon * rand, -np.inf)\n    return scores\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.05) -> np.ndarray:\n    slack = bins_remain_cap.astype(float) - item\n    eps = 1e-9\n    feasible = slack >= 0\n    base = np.where(feasible, 1.0 / (slack + eps), -np.inf)\n    rand = np.random.rand(bins_remain_cap.shape[0])\n    scores = np.where(feasible, (1 - epsilon) * base + epsilon * rand, -np.inf)\n    return scores\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.05) -> np.ndarray:\n    slack = bins_remain_cap.astype(float) - item\n    eps = 1e-9\n    feasible = slack >= 0\n    base = np.where(feasible, 1.0 / (slack + eps), -np.inf)\n    rand = np.random.rand(bins_remain_cap.shape[0])\n    scores = np.where(feasible, (1 - epsilon) * base + epsilon * rand, -np.inf)\n    return scores\n\n[Heuristics 18th]\nimport numpy as np\n_EPSILON = 0.1\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.shape[0]\n    scores = np.full(n, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return scores\n    waste = bins_remain_cap[feasible] - item\n    best_fit = -waste\n    rand_vals = np.random.rand(best_fit.size)\n    explore = np.random.rand(best_fit.size) < _EPSILON\n    combined = np.where(explore, rand_vals, best_fit)\n    idx = np.where(feasible)[0]\n    tie_penalty = -idx * 1e-6\n    final = combined + tie_penalty\n    scores[feasible] = final\n    return scores\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Combines best\u2011fit (inverse slack) with worst\u2011fit (slack) scoring and optional epsilon\u2011greedy exploration for flexible bin selection.\n    \"\"\"\n    feasible = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    priorities[feasible] = 1.0 / (waste[feasible] + 1e-12) + alpha * waste[feasible]\n    if epsilon > 0:\n        noise = epsilon * np.random.rand(np.count_nonzero(feasible))\n        priorities[feasible] += noise\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1, alpha: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Combines best\u2011fit (inverse slack) with worst\u2011fit (slack) scoring and optional epsilon\u2011greedy exploration for flexible bin selection.\n    \"\"\"\n    feasible = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    priorities[feasible] = 1.0 / (waste[feasible] + 1e-12) + alpha * waste[feasible]\n    if epsilon > 0:\n        noise = epsilon * np.random.rand(np.count_nonzero(feasible))\n        priorities[feasible] += noise\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}