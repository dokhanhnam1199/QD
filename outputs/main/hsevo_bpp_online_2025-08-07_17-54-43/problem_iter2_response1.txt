```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Epsilon‑greedy best‑fit heuristic with softmax weighting for online bin packing. Uses adaptive epsilon for exploration, marking infeasible bins with -inf and applying softmax to negative slack for exploitation."""
    if not hasattr(priority_v2, "_calls"):
        priority_v2._calls = 0
    priority_v2._calls += 1
    eps = max(0.01, 0.2 / np.sqrt(priority_v2._calls))
    n = bins_remain_cap.size
    if np.random.rand() < eps:
        return np.random.rand(n)
    slack = bins_remain_cap - item
    feasible = slack >= 0
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    scores[feasible] = -slack[feasible]
    if feasible.any():
        max_score = scores[feasible].max()
        exp_scores = np.exp(scores - max_score)
        exp_scores[~feasible] = 0.0
        total = exp_scores.sum()
        if total > 0:
            return exp_scores / total
    return np.full_like(bins_remain_cap, -np.inf, dtype=float)
```
