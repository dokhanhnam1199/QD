```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1, alpha: float = 0.1) -> np.ndarray:
    """
    Combines best‑fit (inverse slack) with worst‑fit (slack) scoring and optional epsilon‑greedy exploration for flexible bin selection.
    """
    feasible = bins_remain_cap >= item
    waste = bins_remain_cap - item
    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    priorities[feasible] = 1.0 / (waste[feasible] + 1e-12) + alpha * waste[feasible]
    if epsilon > 0:
        noise = epsilon * np.random.rand(np.count_nonzero(feasible))
        priorities[feasible] += noise
    return priorities
```
