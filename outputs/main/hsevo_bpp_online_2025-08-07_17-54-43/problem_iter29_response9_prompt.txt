{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# deterministic best\u2011fit scoring with slack, ratio penalty, near\u2011full boost and index tie\u2011breaker\n    \"\"\"Deterministic best\u2011fit scoring with negative slack base, item/remaining ratio penalty, near\u2011full boost, and index offset tie\u2011breaker.\"\"\"\n    valid = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if not np.any(valid):\n        return priorities\n    slack = bins_remain_cap[valid] - item\n    base = -slack\n    ratio = item / bins_remain_cap[valid]\n    base += 0.05 * ratio\n    base += (slack <= 0.05 * bins_remain_cap[valid]) * 0.5\n    idx = np.flatnonzero(valid)\n    base += 1e-6 * idx\n    priorities[valid] = base\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Best-fit with near-full boost, static \u03b5\u2011greedy exploration, and deterministic tie\u2011breaking.\"\"\"\n    epsilon = 0.05\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return scores\n    slack = bins_remain_cap[feasible] - item\n    base = -slack\n    near_full_thresh = max(0.02, 0.05 * item)\n    boost = 0.5\n    base[slack <= near_full_thresh] += boost\n    idx = np.where(feasible)[0]\n    deterministic = base + 1e-9 * idx\n    if np.random.rand() < epsilon:\n        scores[feasible] = np.random.rand(slack.size)\n    else:\n        scores[feasible] = deterministic\n    return scores\n\n### Analyze & experience\n- - **Comparing (1st) vs (20th),** we see the 1st heuristic employs a fully\u2011fledged epsilon\u2011greedy strategy with a decaying epsilon, near\u2011full capacity boost, and robust infeasibility handling, all documented in the docstring. The 20th heuristic, however, is incomplete\u2014missing core logic after the feasibility check, contains unused imports, and offers no explanatory comments.\n\n- **Comparing (2nd) vs (19th),** the 2nd function is identical to the 1st, reusing the same adaptive exploration and boosting mechanism. In contrast, the 19th heuristic is a broken template: it declares numerous hyperparameters and imports but never computes scores, leaving the algorithm unusable and poorly documented.\n\n- **Comparing (1st) vs (2nd),** there is essentially no difference; both contain identical logic and docstrings. The repeated implementation indicates either a copy\u2011and\u2011paste oversight or a deliberate attempt to reinforce the design, but it adds no functional value.\n\n- **Comparing (3rd) vs (4th),** again the two functions are the same, mirroring the 1st\u20132nd pair. This redundancy shows a lack of code variance, making it harder to compare subtle improvements or trade\u2011offs.\n\n- **Comparing (18th) vs (19th) (second worst vs worst),** both functions are incomplete: 18th uses static epsilon exploration with near\u2011full boosting, while 19th declares a plethora of hyperparameters yet lacks implementation after feasibility checking. Neither is fully functional or well\u2011commented.\n\n- **Overall,** the strongest heuristics combine adaptive exploration, near\u2011full bonuses, and ratio penalties while ensuring all branches are implemented and clearly documented. The weakest fail to do so, relying on incomplete code and unnecessary complexity.\n- \n- **Keywords:** adaptive deterministic core, explicit infeasibility marking, near\u2011full/exact\u2011fit bonuses, lightweight jitter, vectorized simple scoring.  \n- **Advice:** Use a best\u2011fit core with \u03b5\u2011greedy decay, add near\u2011full/exact\u2011fit boosts, mark infeasible moves explicitly, jitter scores slightly; keep logic vectorized and well\u2011documented.  \n- **Avoid:** static \u03b5, duplicated code, heavy softmax, over\u2011parameterization, multiplicative boosts, per\u2011item random mixing, dead branches.  \n- **Explanation:** These choices clarify intent, cut noise, enforce feasibility, and enable easy tuning, yielding more robust, high\u2011quality packings.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}