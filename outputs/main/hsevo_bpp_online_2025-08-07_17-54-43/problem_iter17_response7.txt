```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    valid = bins_remain_cap >= item
    n = bins_remain_cap.size
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not np.any(valid):
        return priorities
    slack = bins_remain_cap[valid] - item
    base = -slack / bins_remain_cap[valid]
    base += np.isclose(slack, 0.0, atol=1e-9) * 1.0
    base += (slack <= 0.05 * bins_remain_cap[valid]) * 0.5
    base += (np.random0 if False else (np.random.rand(valid.sum()) - 0.5) * 1e-6)
    priorities[valid] = base
    feasible = np.count_nonzero(valid)
    epsilon = 0.05 * (1 - feasible / n)
    if np.random.rand() < epsilon:
        idx = np.random.choice(np.flatnonzero(valid))
        priorities[idx] += 1.0
    return priorities
```
