```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving the Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This function calculates prior indicators of how promising it is to include each edge in a solution,
    considering distance, demand, angle between nodes, and sparsifying the matrix.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Parameters for tuning the heuristic
    alpha = 1.0   # Weight for distance
    beta = 1.0    # Weight for demand
    gamma = 0.5   # Weight for angle
    sparsity_threshold = 10 # Keep top k promising edges
    # Calculate angle cost using law of cosines
    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor: encourage shorter edges
                distance_factor = 1 / distance_matrix[i, j]

                # Demand factor: discourage edges that lead to capacity violation
                demand_factor = 1.0  # Default: neutral if no capacity constraints violated

                # Angle factor: Penalize sharp turns. Avoids drastic changes in routing directions.
                angle_cost = 0.0
                if i != 0 and j !=0:
                  vector_oi = coordinates[i] - coordinates[0]
                  vector_oj = coordinates[j] - coordinates[0]
                  cosine_angle = np.dot(vector_oi, vector_oj) / (np.linalg.norm(vector_oi) * np.linalg.norm(vector_oj))
                  angle_cost = (1 - cosine_angle)/2  # Scale the angle cost to [0,1]

                # Combine factors
                heuristic_matrix[i, j] = (alpha * distance_factor +
                                         + gamma * (1 - angle_cost)) # Larger is more promising
            else:
                heuristic_matrix[i, j] = 0  # No self-loops

    # Sparsify the matrix: only keep top k promising edges
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[-sparsity_threshold:]
        mask = np.zeros(n, dtype=bool)
        mask[indices] = True
        heuristic_matrix[i, ~mask] = 0

    return heuristic_matrix
```
