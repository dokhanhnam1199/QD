{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristic function for CVRP via stochastic solution sampling, incorporating distance,\n    normalized demand, depot proximity, angle to depot, and adaptive sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix.\n        coordinates (np.ndarray): Node coordinates.\n        demands (np.ndarray): Customer demands.\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators for promising edges.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n\n    # Parameters (Tunable)\n    alpha = 1.1 # Distance influence\n    beta = 0.8  # Demand attraction\n    gamma = 0.9 # Depot proximity\n    delta = 0.5  # Angle towards depot\n\n    # Normalized demand\n    normalized_demands = demands / capacity\n\n    # Depot Proximity\n    depot_distances = distance_matrix[0, :]\n    max_depot_distance = np.max(depot_distances)\n    depot_proximity = (max_depot_distance - depot_distances) / (max_depot_distance + 1e-6)\n\n    # Angle to Depot\n    angle_to_depot = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                vector_i = coordinates[i] - coordinates[0]\n                vector_j = coordinates[j] - coordinates[0]\n                dot_product = np.dot(vector_i, vector_j)\n                norm_i = np.linalg.norm(vector_i)\n                norm_j = np.linalg.norm(vector_j)\n                cos_angle = dot_product / (norm_i * norm_j + 1e-6)\n                cos_angle = np.clip(cos_angle, -1.0, 1.0)\n                angle = np.arccos(cos_angle)\n                angle_to_depot[i, j] = 1 - (angle / np.pi) # Normalize between 0 and 1\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristics[i, j] = 0\n            else:\n                #Adjust depot connection heuristic\n                depot_factor_i = 1.0 if i == 0 else depot_proximity[i]\n                depot_factor_j = 1.0 if j == 0 else depot_proximity[j]\n\n                heuristics[i, j] = (\n                    (1 / (distance_matrix[i, j] + 1e-6))**alpha *\n                    (normalized_demands[i] + normalized_demands[j])**beta *\n                    (depot_factor_i * depot_factor_j)**gamma *\n                    (angle_to_depot[i, j])**delta\n                )\n    #Sparsification based on distance\n    distance_threshold = np.mean(distance_matrix) + 0.6 * np.std(distance_matrix)\n    heuristics[distance_matrix > distance_threshold] = 0\n\n    # Sparsification based on demand\n    demand_threshold = 0.85  # Slightly less aggressive than before.\n    for i in range(1, n):\n        for j in range(1, n):\n             if i != j and normalized_demands[i] + normalized_demands[j] > demand_threshold:\n                heuristics[i, j] = 0\n                heuristics[j, i] = 0\n\n    # Adaptive Sparsification: Keep top k edges\n    k = max(2, int(np.sqrt(n))) #Adaptive k\n    for i in range(n):\n        row = heuristics[i, :]\n        indices = np.argpartition(row, -k)[-k:]  # Get indices of k largest elements\n        mask = np.ones(row.shape, dtype=bool)\n        mask[indices] = False\n        row[mask] = 0\n        heuristics[i, :] = row\n\n    return heuristics\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    Further refined version with enhanced savings calculation, adaptive sparsification, and prioritized depot connections.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Calculate savings matrix (Clarke-Wright Savings) - enhanced\n    savings_matrix = np.zeros((n, n))\n    max_savings = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[i, j] = savings\n            savings_matrix[j, i] = savings\n            max_savings = max(max_savings, savings)\n\n    # Node proximity to depot\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-6)\n\n    # Demand factor - Normalized by capacity\n    demand_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                demand_factor[i, j] = 1 - min((demands[i] + demands[j]) / capacity, 1)\n\n\n    # Angle factor (try to avoid sharp turns)\n    angle_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                # Calculate angle between vectors depot->i and depot->j\n                vector_i = coordinates[i] - coordinates[0]\n                vector_j = coordinates[j] - coordinates[0]\n                dot_product = np.dot(vector_i, vector_j)\n                magnitudes = np.linalg.norm(vector_i) * np.linalg.norm(vector_j)\n                if magnitudes > 0:\n                    cos_angle = np.clip(dot_product / magnitudes, -1.0, 1.0)\n                    angle = np.arccos(cos_angle)\n                    angle_factor[i, j] = 1 - (angle / np.pi) # Scale angle between 0 and 1 (larger = better)\n                else:\n                    angle_factor[i, j] = 0\n\n    # Normalize factors\n    if max_savings > 0:\n         savings_matrix = savings_matrix / max_savings\n    else:\n        savings_matrix = np.zeros((n, n))\n\n    depot_proximity = (depot_proximity - np.min(depot_proximity)) / (np.max(depot_proximity) - np.min(depot_proximity) + 1e-6)\n    demand_factor = (demand_factor - np.min(demand_factor)) / (np.max(demand_factor) - np.min(demand_factor) + 1e-6)\n    angle_factor = (angle_factor - np.min(angle_factor)) / (np.max(angle_factor) - np.min(angle_factor) + 1e-6)\n\n\n    # Combine factors with weights\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = (\n                    0.5 * savings_matrix[i, j]\n                    + 0.2 * (depot_proximity[i] + depot_proximity[j])\n                    + 0.15 * demand_factor[i, j]\n                    + 0.15 * angle_factor[i, j]\n                ) / (distance_matrix[i, j] + 1e-6)\n\n    # Prioritize depot connections and nearby nodes\n    for i in range(1, n):\n        heuristics_matrix[0, i] *= 1.3  # Stronger priority for depot connections\n        heuristics_matrix[i, 0] *= 1.3\n\n    # Adaptive Sparsification based on distance and capacity\n    avg_distance = np.mean(distance_matrix)\n    sparsification_threshold = 0.6 + 0.4 * (capacity / np.sum(demands))  #Adjust threshold based on capacity\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 100 * sparsification_threshold)  #Adaptively remove a percentage\n\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    # Set diagonal to zero and make matrix asymmetric\n    for i in range(n):\n        heuristics_matrix[i, i] = 0\n\n    return heuristics_matrix\n\n[Reflection]\nSavings calculation, normalization, adaptive sparsification, and prioritized depot connections improved the heuristic.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}