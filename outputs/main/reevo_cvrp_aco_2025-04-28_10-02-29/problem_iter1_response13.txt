```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings matrix (Clarke-Wright savings)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node proximity factor
    proximity_factor = 1 / (distance_matrix + 1e-6)  # Avoid division by zero

    # Demand consideration
    demand_factor = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
              if demands[i] + demands[j] > capacity:
                  demand_factor[i, j] = 0.1 # discourage this edge, but not completely

    # Depot proximity - favor edges connected to the depot
    depot_proximity = np.zeros((n,n))
    for i in range(1,n):
      depot_proximity[0,i] = 1
      depot_proximity[i,0] = 1


    # Combine factors
    heuristics_matrix = (0.5 * proximity_factor + 0.3 * savings_matrix / np.max(savings_matrix) + 0.2 * depot_proximity) * demand_factor

    # Sparsify the matrix: remove edges that are too long or not promising
    threshold = np.mean(heuristics_matrix) / 4 # dynamically determined threshold
    heuristics_matrix[heuristics_matrix < threshold] = 0

    # Ensure diagonal is zero and no self-loops
    for i in range(n):
        heuristics_matrix[i, i] = 0.0

    return heuristics_matrix
```
