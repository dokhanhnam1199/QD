{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Calculate savings matrix (Clarke-Wright Savings)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Node proximity to depot\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-6)\n\n    # Demand factor\n    demand_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                demand_factor[i, j] = 1 / (demands[i] + demands[j] + 1e-6)  # Avoid division by zero\n\n    # Angle cost: penalize sharp turns\n    angle_cost = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                # Vectors from depot to i and depot to j\n                vector_i = coordinates[i] - coordinates[0]\n                vector_j = coordinates[j] - coordinates[0]\n\n                # Calculate cosine of the angle\n                norm_i = np.linalg.norm(vector_i)\n                norm_j = np.linalg.norm(vector_j)\n                if norm_i > 0 and norm_j > 0:\n                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)\n                    angle_cost[i, j] = max(0, cos_angle)  # Penalize small angles (sharp turns)\n                else:\n                    angle_cost[i, j] = 0\n\n    # Normalize Factors\n    savings_matrix_norm = savings_matrix / np.max(savings_matrix + 1e-6)\n    depot_proximity_norm = depot_proximity / np.max(depot_proximity + 1e-6)\n    demand_factor_norm = demand_factor / np.max(demand_factor + 1e-6)\n    angle_cost_norm = angle_cost / np.max(angle_cost + 1e-6)\n\n    # Combine factors, penalizing long distances, edges between nodes with high demands\n    # and rewarding high savings and proximity to the depot\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = (\n                    0.4 * savings_matrix_norm[i, j]\n                    + 0.2 * (depot_proximity_norm[i] + depot_proximity_norm[j])\n                    + 0.1 * demand_factor_norm[i, j]\n                    - 0.1 * distance_matrix[i, j] / np.max(distance_matrix + 1e-6) # Normalize distance\n                    - 0.2 * angle_cost_norm[i, j] #Penalize sharp angle\n                )\n\n    #Sparsify the matrix (remove edges with small values)\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 40) #remove bottom 40%\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    #Prioritize edges connected to the depot\n    for i in range(1, n):\n        heuristics_matrix[0, i] *= 1.2\n        heuristics_matrix[i, 0] *= 1.2\n    \n\n    #Set diagonal to zero and make matrix asymmetric\n    for i in range(n):\n        heuristics_matrix[i, i] = 0\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    Refined edge scoring with normalized, weighted factors (savings, depot proximity, demand, angle).\n    Dynamically sparsify the edge matrix based on vehicle capacity and edge scores.\n    Prioritize depot connections and adapt thresholds for improved efficiency.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Calculate savings matrix (Clarke-Wright Savings)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Node proximity to depot (normalized)\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-6)\n    depot_proximity /= np.max(depot_proximity)\n\n\n    # Demand factor (normalized)\n    demand_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                demand_factor[i, j] = 1 / (demands[i] + demands[j] + 1e-6)  # Avoid division by zero\n    demand_factor /= np.max(demand_factor)\n\n    #Angle Factor\n    angle_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                vector_i = coordinates[i] - coordinates[0]\n                vector_j = coordinates[j] - coordinates[0]\n                dot_product = np.dot(vector_i, vector_j)\n                magn_i = np.linalg.norm(vector_i)\n                magn_j = np.linalg.norm(vector_j)\n                cos_angle = dot_product / (magn_i * magn_j + 1e-6)\n                angle_factor[i, j] = cos_angle  # Closer to 1 means similar angle\n    angle_factor /= np.max(angle_factor + 1e-6)\n\n\n    # Combine factors with weights\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = (\n                    0.4 * (savings_matrix[i, j] / (np.max(savings_matrix) + 1e-6)) #Normalized Savings\n                    + 0.3 * (depot_proximity[i] + depot_proximity[j])\n                    + 0.1 * demand_factor[i, j]\n                    + 0.2 * angle_factor[i,j]\n                ) / (distance_matrix[i, j] + 1e-6)\n\n    # Prioritize depot connections.  Boost score if one of the nodes is depot.\n    for i in range(1,n):\n        heuristics_matrix[0,i] *= 1.2\n        heuristics_matrix[i,0] *= 1.2\n\n    # Dynamic Sparsification based on capacity and heuristic score\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 40)  # Adaptive threshold\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n\n    # Ensure depot connections remain\n    for i in range(1, n):\n         if distance_matrix[0,i] > 0 and heuristics_matrix[0,i] == 0:\n            heuristics_matrix[0,i] = threshold #Ensure depot connections remain if distance not zero\n\n    #Set diagonal to zero and make matrix asymmetric\n    for i in range(n):\n        heuristics_matrix[i, i] = 0\n\n\n    return heuristics_matrix\n\n[Reflection]\nBetter code normalizes factors, refines weights, and uses dynamic sparsification based on vehicle capacity.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}