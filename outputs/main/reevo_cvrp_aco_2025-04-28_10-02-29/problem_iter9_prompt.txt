{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Prior reflection]\nPrioritize adaptive sparsification based on problem features. Accentuate depot influence with angle scaling and inverse angles. Use geometric mean for demand. Normalize savings effectively and tune factors dynamically with capacity.\n- Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\n\n[Code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    Improves upon v1 with enhanced capacity and demand handling, angle calculation, and adaptive sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Calculate savings matrix (Clarke-Wright Savings)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Node proximity to depot\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-6)\n\n    # Demand factor (geometric mean, capacity awareness, and slack utilization)\n    demand_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                combined_demand = demands[i] + demands[j]\n                if combined_demand > capacity:\n                    demand_factor[i, j] = 0.0  # Heavily penalize exceeding capacity\n                else:\n                    geometric_mean_demand = np.sqrt(demands[i] * demands[j]) + 1e-6\n                    remaining_capacity_ratio = (capacity - combined_demand) / capacity  # Normalized slack\n                    demand_factor[i, j] = (1 / geometric_mean_demand) * (0.5 + 0.5 * remaining_capacity_ratio) # Bias towards routes with less demand\n\n\n    # Angle Factor (angle between nodes i and j w.r.t the depot) - improved angle calculation\n    angle_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            vector_i = coordinates[i] - coordinates[0]\n            vector_j = coordinates[j] - coordinates[0]\n            norm_i = np.linalg.norm(vector_i)\n            norm_j = np.linalg.norm(vector_j)\n            if norm_i > 0 and norm_j > 0:\n                cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)\n                cos_angle = np.clip(cos_angle, -1.0, 1.0) # ensure value is within [-1, 1]\n                angle = np.arccos(cos_angle)  # Angle in radians\n                angle_factor[i, j] = 1 / (angle + 0.1)  # Inverse angle with smoothing\n                angle_factor[j, i] = angle_factor[i, j]\n\n\n    # Normalize factors\n    savings_matrix = (savings_matrix - np.min(savings_matrix)) / (np.max(savings_matrix) - np.min(savings_matrix) + 1e-6)\n    depot_proximity = (depot_proximity - np.min(depot_proximity)) / (np.max(depot_proximity) - np.min(depot_proximity) + 1e-6)\n    demand_factor = (demand_factor - np.min(demand_factor)) / (np.max(demand_factor) - np.min(demand_factor) + 1e-6)\n    angle_factor = (angle_factor - np.min(angle_factor)) / (np.max(angle_factor) - np.min(angle_factor) + 1e-6)\n\n\n    # Combine factors with weights and distance penalization\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = (\n                    0.35 * savings_matrix[i, j]\n                    + 0.15 * (depot_proximity[i] + depot_proximity[j])\n                    + 0.3 * demand_factor[i, j]\n                    + 0.2 * angle_factor[i, j]\n                ) / (distance_matrix[i, j] + 1e-6)\n\n    # Prioritize depot connections, less aggressively\n    for i in range(1, n):\n        heuristics_matrix[0, i] *= 1.1  # Boost depot edges\n        heuristics_matrix[i, 0] *= 1.1\n\n\n    # Adaptive Sparsification (adjust threshold based on instance characteristics)\n    non_zero_values = heuristics_matrix[heuristics_matrix > 0]\n    if non_zero_values.size > 0:\n        # More aggressive sparsification for larger instances\n        sparsification_percentile = min(50, 10 + int(np.log(n)))\n        threshold = np.percentile(non_zero_values, sparsification_percentile)\n        heuristics_matrix[heuristics_matrix < threshold] = 0\n\n\n    # Set diagonal to zero\n    for i in range(n):\n        heuristics_matrix[i, i] = 0\n\n    return heuristics_matrix\n\n[Improved code]\nPlease write a mutated function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}