{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Capacitated Vehicle Routing Problem (CVRP) using stochastic solution sampling.\n\n    Combines several factors to determine how promising it is to select an edge,\n    and sparsifies the matrix by setting unpromising elements to zero. Normalizes features,\n    adapts thresholds, and prioritizes trips to/from the depot for improved performance.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution\n                    (shape: same as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n\n    # Parameters (can be tuned)\n    alpha = 1.0  # Weight for distance\n    beta = 1.0   # Weight for demand attraction\n    gamma = 0.5  # Weight for depot proximity\n\n    # Calculate depot proximity (normalized distance to depot)\n    max_depot_distance = np.max(distance_matrix[0, 1:])\n    depot_distances = distance_matrix[0, :] / max_depot_distance if max_depot_distance > 0 else np.zeros(n)\n    depot_proximity = 1 - depot_distances\n\n    # Normalized demand\n    max_demand = np.max(demands[1:])\n    normalized_demands = demands / max_demand if max_demand > 0 else np.zeros(n)\n\n\n    # Normalize Distance Matrix\n    max_distance = np.max(distance_matrix)\n    normalized_distance_matrix = distance_matrix / max_distance if max_distance > 0 else np.zeros_like(distance_matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristics[i, j] = 0  # No self-loops\n            else:\n                # Encourage trips to depot more strongly\n                depot_prox_factor_i = depot_proximity[i] if i != 0 else 1.0\n                depot_prox_factor_j = depot_proximity[j] if j != 0 else 1.0\n\n                heuristics[i, j] = (\n                    (1 / normalized_distance_matrix[i, j])**alpha *  # Distance factor\n                    (normalized_demands[i] + normalized_demands[j])**beta * # Demand factor, favoring larger demands\n                    (depot_prox_factor_i * depot_prox_factor_j)**gamma  #Depot Proximity - more important if a node is far from the depot\n                )\n\n    # Sparsify the matrix: remove edges that are too long or connect nodes with high demand that would likely overload a vehicle early on\n    distance_threshold = np.mean(normalized_distance_matrix) + np.std(normalized_distance_matrix)  # Dynamic threshold\n    demand_threshold = 0.75 # Cap on demand (as proportion of total capacity)\n\n    for i in range(n):\n        for j in range(n):\n            if normalized_distance_matrix[i, j] > distance_threshold:\n                heuristics[i, j] = 0\n            # Disincentivize immediate connections that violate capacity too easily, excluding depot connections\n            elif demands[i] + demands[j] > demand_threshold * capacity and i != 0 and j !=0:\n               heuristics[i,j] = 0\n\n    return heuristics\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    Refined edge scoring with normalized, weighted factors (savings, depot proximity, demand, angle).\n    Dynamically sparsify the edge matrix based on vehicle capacity and edge scores.\n    Prioritize depot connections and adapt thresholds for improved efficiency.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Calculate savings matrix (Clarke-Wright Savings)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Node proximity to depot (normalized)\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-6)\n    depot_proximity /= np.max(depot_proximity)\n\n\n    # Demand factor (normalized)\n    demand_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                demand_factor[i, j] = 1 / (demands[i] + demands[j] + 1e-6)  # Avoid division by zero\n    demand_factor /= np.max(demand_factor)\n\n    #Angle Factor\n    angle_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                vector_i = coordinates[i] - coordinates[0]\n                vector_j = coordinates[j] - coordinates[0]\n                dot_product = np.dot(vector_i, vector_j)\n                magn_i = np.linalg.norm(vector_i)\n                magn_j = np.linalg.norm(vector_j)\n                cos_angle = dot_product / (magn_i * magn_j + 1e-6)\n                angle_factor[i, j] = cos_angle  # Closer to 1 means similar angle\n    angle_factor /= np.max(angle_factor + 1e-6)\n\n\n    # Combine factors with weights\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = (\n                    0.4 * (savings_matrix[i, j] / (np.max(savings_matrix) + 1e-6)) #Normalized Savings\n                    + 0.3 * (depot_proximity[i] + depot_proximity[j])\n                    + 0.1 * demand_factor[i, j]\n                    + 0.2 * angle_factor[i,j]\n                ) / (distance_matrix[i, j] + 1e-6)\n\n    # Prioritize depot connections.  Boost score if one of the nodes is depot.\n    for i in range(1,n):\n        heuristics_matrix[0,i] *= 1.2\n        heuristics_matrix[i,0] *= 1.2\n\n    # Dynamic Sparsification based on capacity and heuristic score\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 40)  # Adaptive threshold\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n\n    # Ensure depot connections remain\n    for i in range(1, n):\n         if distance_matrix[0,i] > 0 and heuristics_matrix[0,i] == 0:\n            heuristics_matrix[0,i] = threshold #Ensure depot connections remain if distance not zero\n\n    #Set diagonal to zero and make matrix asymmetric\n    for i in range(n):\n        heuristics_matrix[i, i] = 0\n\n\n    return heuristics_matrix\n\n[Reflection]\nIncorporate savings, angles, and adaptive sparsification. Prioritize depot connections, normalize factors with appropriate weights.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}