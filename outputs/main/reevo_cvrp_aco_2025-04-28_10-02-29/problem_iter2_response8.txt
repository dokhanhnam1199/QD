```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates Clarke-Wright savings, normalized distance, demand considerations, and
    selective sparsification to guide the search process.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings matrix (Clarke-Wright savings heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Normalize distance matrix (lower distance is better)
    normalized_distance = 1 / (distance_matrix + 1e-6)  # Adding a small value to avoid division by zero
    normalized_distance = (normalized_distance - np.min(normalized_distance)) / (np.max(normalized_distance) - np.min(normalized_distance) + 1e-6)


    # Normalize savings matrix (higher savings are better)
    normalized_savings = (savings_matrix - np.min(savings_matrix)) / (np.max(savings_matrix) - np.min(savings_matrix) + 1e-6)

    # Demand factor: penalize edges connecting nodes with high demands, prioritize depot connections
    demand_factor = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            demand_factor[i, j] = (demands[i] + demands[j]) / (2 * capacity)  # Average demand relative to capacity


    # Combine factors
    heuristic_matrix = normalized_distance + 0.6 * normalized_savings - 0.3 * demand_factor
    heuristic_matrix = np.clip(heuristic_matrix, 0, 1)

    # Sparsify the matrix (optional): remove less promising edges
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 25)  # Keep top 75%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure depot connections are not zeroed out too aggressively:
    for i in range(1, n):
        heuristic_matrix[0, i] = max(heuristic_matrix[0,i], np.percentile(heuristic_matrix[0, 1:], 10)) #at least top 90%
        heuristic_matrix[i, 0] = max(heuristic_matrix[i, 0], np.percentile(heuristic_matrix[1:, 0], 10)) #at least top 90%
    return heuristic_matrix
```
