{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for CVRP using a combination of factors and sparsification.\n\n    Args:\n        distance_matrix: Distance matrix between nodes.\n        coordinates: Euclidean coordinates of nodes.\n        demands: Demand of each node.\n        capacity: Vehicle capacity.\n\n    Returns:\n        A matrix of the same shape as distance_matrix, indicating the\n        promise of each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    promise = np.zeros((n, n))\n\n    # Heuristic factors:\n    # 1. Distance: Shorter distances are preferred.\n    distance_factor = 1 / (distance_matrix + 1e-6)  # Avoid division by zero\n\n    # 2. Demand proximity: Nodes with related demands might be grouped.\n    #    (This part could be refined based on domain knowledge)\n    demand_similarity = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            demand_similarity[i, j] = 1 - abs(demands[i] - demands[j]) / capacity\n\n    # 3. Angle to depot: Avoid sharp turns relative to the depot.  Penalize edges that lead away from returning to depot\n    depot_angle_factor = np.zeros((n, n))\n    for i in range(1, n):  # skip depot as origin\n        for j in range(1, n):\n            if i == j:\n                depot_angle_factor[i,j] = 0\n                continue\n\n            vec_i = coordinates[i] - coordinates[0]\n            vec_j = coordinates[j] - coordinates[0]\n\n            norm_i = np.linalg.norm(vec_i)\n            norm_j = np.linalg.norm(vec_j)\n\n            if norm_i > 0 and norm_j > 0:\n                cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)\n                #Higher the cos the more similar the directions, penalizing angles that deviate\n                depot_angle_factor[i, j] = (cos_angle + 1) / 2 # normalize to [0,1]\n            else:\n                depot_angle_factor[i, j] = 0\n\n    # Combine factors (weighted): Experiment with different weights\n    promise = (\n        0.5 * distance_factor +\n        0.2 * demand_similarity +\n        0.3 * depot_angle_factor\n    )\n\n    # Sparsification: Remove unpromising edges\n    threshold = np.percentile(promise[promise > 0], 20)  # Keep top 80% non-zero\n    promise[promise < threshold] = 0\n\n\n    #Ensure that edges back to the depot are more favored. This helps with forming routes.\n    for i in range(1,n):\n        promise[i,0] = promise[i,0] * 1.5\n        promise[0,i] = promise[0,i] * 1.5 #Favor edges back to depot\n\n\n    return promise\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate savings for each edge\n    savings_matrix = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Combine distance and savings\n    heuristic_matrix = (1 / (distance_matrix + 1e-9)) + (savings_matrix / np.max(savings_matrix))\n\n    # Penalize edges connecting nodes with high demands\n    for i in range(1, n):\n        for j in range(1, n):\n            heuristic_matrix[i, j] /= (demands[i] + demands[j]) / (2 * capacity)\n\n    # Favor edges close to the depot (node 0)\n    for i in range(1, n):\n        heuristic_matrix[0, i] *= 2  # Boost edges connected to depot\n        heuristic_matrix[i, 0] = heuristic_matrix[0, i]\n\n\n    # Sparsify the matrix (remove unpromising edges)\n    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 25)  # Keep top 75% edges, avoid zero division\n\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Ensure depot connections are always considered, even if sparsified\n    for i in range(1, n):\n      if heuristic_matrix[0, i] == 0:\n        heuristic_matrix[0, i] = threshold/2 if threshold > 0 else 0.01\n      if heuristic_matrix[i, 0] == 0:\n        heuristic_matrix[i, 0] = threshold/2 if threshold > 0 else 0.01\n\n    return heuristic_matrix\n\n[Reflection]\nSavings calculations, demand-based penalties, and prioritized depot connections yield improved heuristic performance.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}