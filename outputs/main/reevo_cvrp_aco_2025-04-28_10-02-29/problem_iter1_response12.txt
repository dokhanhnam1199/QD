```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]

    # Initialize heuristics matrix
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings for each pair of customers (Clarke-Wright Savings)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance and savings
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to prevent division by zero
            else:
                heuristics_matrix[i, j] = 0  # No self-loops

    # Penalize edges connecting nodes with high demands if they're distant
    demand_penalty = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            demand_penalty[i, j] = (demands[i] + demands[j]) / (capacity + 1e-6) # Ratio of combined demand to capacity

    heuristics_matrix = heuristics_matrix / (1 + demand_penalty * distance_matrix / np.mean(distance_matrix))
    
    # Sparsify the matrix - keep only the top K edges for each node
    K = int(np.sqrt(n)) # Adjust this parameter as needed
    for i in range(n):
        # Find the indices of the K largest elements in each row
        ind = np.argpartition(heuristics_matrix[i, :], -K)[-K:]  # Top K indices
        mask = np.ones(n, dtype=bool)
        mask[ind] = False
        heuristics_matrix[i, mask] = 0  # Zero out all but top K

    # Ensure depot connections remain
    for i in range(1,n):
        heuristics_matrix[0,i] = max(heuristics_matrix[0,i], np.mean(heuristics_matrix))
        heuristics_matrix[i,0] = max(heuristics_matrix[i,0], np.mean(heuristics_matrix))

    return heuristics_matrix
```
