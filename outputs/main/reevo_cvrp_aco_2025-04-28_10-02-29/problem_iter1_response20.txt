```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP) that combines
    distance, demand, and angular considerations to estimate the desirability of each edge.

    Args:
        distance_matrix (np.ndarray): A matrix of distances between all nodes.
        coordinates (np.ndarray): Coordinates of each node.
        demands (np.ndarray): Demands of each node.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: A matrix of heuristic values indicating the desirability of each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters (can be tuned)
    distance_weight = 0.5  # Weight for the distance factor
    demand_weight = 0.3    # Weight for the demand factor
    angle_weight = 0.2     # Weight for the angle factor
    sparse_threshold = 0.1  # Threshold for sparsifying the matrix

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor: Shorter distances are more desirable
                distance_factor = 1 / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0

                # Demand factor:  Penalize edges connecting to high-demand nodes
                demand_factor = 1 / (demands[i] + demands[j]) if (demands[i] + demands[j]) > 0 else 0
                if i == 0 or j == 0:
                    demand_factor = 1 # avoid penalizing edges to/from depot

                # Angle factor: Favor edges that don't cause sharp turns (more direct routes).
                # Calculate the angle between the vectors from node i to j, and from node j to depot (0)
                if i != 0 and j != 0:
                    vector_ij = coordinates[j] - coordinates[i]
                    vector_j0 = coordinates[0] - coordinates[j]

                    # Normalize vectors to prevent magnitude from affecting the dot product
                    norm_ij = np.linalg.norm(vector_ij)
                    norm_j0 = np.linalg.norm(vector_j0)

                    if norm_ij > 0 and norm_j0 > 0:
                        vector_ij_normalized = vector_ij / norm_ij
                        vector_j0_normalized = vector_j0 / norm_j0

                        dot_product = np.dot(vector_ij_normalized, vector_j0_normalized)
                        angle = np.arccos(np.clip(dot_product, -1.0, 1.0)) # Clip to prevent errors due to floating point precision
                        angle_factor = 1 - (angle / np.pi) # Scale angle factor to [0, 1], higher values indicate less sharp turn
                    else:
                        angle_factor = 0  # Default value if normalization fails

                else:
                    angle_factor = 1 # Edges involving the depot node are not penalized on angles


                # Combine the factors
                heuristic_value = (
                    distance_weight * distance_factor +
                    demand_weight * demand_factor +
                    angle_weight * angle_factor
                )

                heuristic_matrix[i, j] = heuristic_value

    # Sparsify the matrix: Set values below a threshold to zero
    max_heuristic = np.max(heuristic_matrix)
    threshold = sparse_threshold * max_heuristic
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
