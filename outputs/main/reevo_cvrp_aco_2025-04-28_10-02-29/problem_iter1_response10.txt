```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                  The return is of the same shape as the distance_matrix. The depot node is indexed by 0.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate savings for each edge
    savings_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Symmetric matrix

    # Proximity factor: Inverse distance
    proximity = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # Demand factor: Prioritize edges connecting nodes with manageable demand. Edges that
    # leads to infeasible solution should be penalized.
    demand_factor = np.ones_like(distance_matrix, dtype=float)
    for i in range(n):
      for j in range(n):
        if i != j:
          if demands[i] + demands[j] > capacity and (i != 0 and j != 0):
              demand_factor[i,j] = 0.1 # drastically reduce this edge.
          else:
              demand_factor[i, j] = 1.0  # no change needed

    # Depot connection preference: Prefer connecting nodes to the depot, especially at the beginning
    depot_preference = np.ones_like(distance_matrix, dtype=float)
    for i in range(1, n):
        depot_preference[0, i] = 2.0  # Prefer edges connecting to the depot
        depot_preference[i, 0] = 2.0
        
    # Combine factors with weights
    heuristic_matrix = (0.5 * proximity + 0.3 * savings_matrix + 0.2 * depot_preference) * demand_factor

    # Sparsify the matrix: Zero out unpromising edges
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20)  # Remove the bottom 20%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure that diagonal elements are zero
    np.fill_diagonal(heuristic_matrix, 0)

    return heuristic_matrix
```
