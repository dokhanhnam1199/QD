```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates savings, depot proximity, and demand considerations, combined with distance,
    to yield improved edge prioritization.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings matrix (Clarke-Wright Savings)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node proximity to depot (using inverse square for stronger effect)
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / (distance_matrix[0, i]**2 + 1e-6) # inverse square, avoid div by zero

    # Demand factor - Penalize edges if combined demand is close to exceeding capacity
    demand_factor = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                combined_demand_ratio = (demands[i] + demands[j]) / capacity
                demand_factor[i, j] = max(0, 1 - combined_demand_ratio)  # Higher is better if combined demand is low
    

    # Combine factors, penalizing long distances and rewarding high savings, proximity to the depot, and low combined demand.
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (
                    0.4 * savings_matrix[i, j]
                    + 0.3 * (depot_proximity[i] + depot_proximity[j])
                    + 0.3 * demand_factor[i, j]
                ) / (distance_matrix[i, j] + 1e-6)
    
    # Sparsify the matrix (remove edges with small values) - adaptive threshold
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 30)  # Remove bottom 30%
    heuristics_matrix[heuristics_matrix < threshold] = 0
    

    # Set diagonal to zero
    for i in range(n):
        heuristics_matrix[i, i] = 0

    return heuristics_matrix
```
