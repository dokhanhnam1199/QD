{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    Incorporates savings, geometric mean demand, inverse angle, capacity awareness, and robust sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Calculate savings matrix (Clarke-Wright Savings)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Node proximity to depot (using inverse distance, avoid division by zero)\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-6)\n\n    # Demand factor (geometric mean and capacity awareness)\n    demand_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                combined_demand = demands[i] + demands[j]\n                if combined_demand > capacity:\n                    demand_factor[i, j] = 0.0  # Heavily penalize if exceeding capacity\n                else:\n                    demand_factor[i, j] = 1 / (np.sqrt(demands[i] * demands[j]) + 1e-6)  # Geometric mean\n                    demand_factor[i, j] *= (1 - (combined_demand / capacity)) # Scale by remaining capacity\n\n    # Angle Factor (angle between nodes i and j w.r.t the depot)\n    angle_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            vector_i = coordinates[i] - coordinates[0]\n            vector_j = coordinates[j] - coordinates[0]\n            norm_i = np.linalg.norm(vector_i)\n            norm_j = np.linalg.norm(vector_j)\n            if norm_i > 0 and norm_j > 0:\n                cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)\n                angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))  # Clip to avoid domain errors\n                angle_factor[i, j] = 1 / (angle + 1e-6)  # Inverse angle\n                angle_factor[j, i] = angle_factor[i, j]\n\n    # Normalize factors (handle cases where max == min)\n    def safe_normalize(matrix):\n        matrix_min = np.min(matrix)\n        matrix_max = np.max(matrix)\n        if matrix_max - matrix_min == 0:\n            return np.zeros_like(matrix)  # Return zeros if all values are the same\n        else:\n            return (matrix - matrix_min) / (matrix_max - matrix_min + 1e-6)\n\n    savings_matrix = safe_normalize(savings_matrix)\n    depot_proximity = safe_normalize(depot_proximity)\n    demand_factor = safe_normalize(demand_factor)\n    angle_factor = safe_normalize(angle_factor)\n\n    # Combine factors with weights and distance penalization\n    alpha = 0.4 # Savings weight\n    beta = 0.15 # Depot Proximity weight\n    gamma = 0.3 # Demand Factor weight\n    delta = 0.15 # Angle Factor weight\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = (\n                    alpha * savings_matrix[i, j]\n                    + beta * (depot_proximity[i] + depot_proximity[j])\n                    + gamma * demand_factor[i, j]\n                    + delta * angle_factor[i, j]\n                ) / (distance_matrix[i, j] + 1e-6) # Penalize by Distance\n\n    # Prioritize depot connections slightly\n    for i in range(1, n):\n        heuristics_matrix[0, i] *= 1.05  # Boost depot edges\n        heuristics_matrix[i, 0] *= 1.05\n\n    # Dynamic Sparsification using a robust percentile calculation\n    non_zero_values = heuristics_matrix[heuristics_matrix > 0]\n    if non_zero_values.size > 0:  # Ensure there are non-zero values\n        threshold = np.percentile(non_zero_values, 50) # Further increased percentile for sparser graph\n        heuristics_matrix[heuristics_matrix < threshold] = 0\n    else:\n        # If all values are zero, skip sparsification\n        pass\n\n   # Additional Sparsification: Keep only the top-k edges per node\n    k = max(1, int(np.sqrt(n)))  # Adaptive k based on problem size\n    for i in range(n):\n        row = heuristics_matrix[i, :]\n        indices = np.argpartition(row, -k)[-k:]  # Indices of k largest elements\n        mask = np.zeros(row.shape, dtype=bool)\n        mask[indices] = True\n        heuristics_matrix[i, :] = 0  # Reset row\n        heuristics_matrix[i, mask] = row[mask]  # Keep the best ones, preserving their scores\n        heuristics_matrix[i, i] = 0  # Remove self loops\n\n    # Set diagonal to zero\n    for i in range(n):\n        heuristics_matrix[i, i] = 0\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Savings Matrix (Clarke-Wright Savings)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Depot Proximity (scaled inverse distance)\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-6)\n\n    # Demand Factor (Geometric Mean + Capacity Consideration)\n    demand_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                combined_demand = demands[i] + demands[j]\n                if combined_demand > capacity:\n                    demand_factor[i, j] = 0.0  # Capacity constraint\n                else:\n                    geometric_mean_demand = np.sqrt(demands[i] * demands[j]) + 1e-6\n                    slack_ratio = (capacity - combined_demand) / capacity  # How much capacity is remaining\n                    demand_factor[i, j] = (1 / geometric_mean_demand) * (0.6 + 0.4 * slack_ratio)  # Favour less demand\n\n    # Angle Factor (Angle between nodes i and j w.r.t. the depot)\n    angle_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            vector_i = coordinates[i] - coordinates[0]\n            vector_j = coordinates[j] - coordinates[0]\n            norm_i = np.linalg.norm(vector_i)\n            norm_j = np.linalg.norm(vector_j)\n            if norm_i > 0 and norm_j > 0:\n                cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)\n                cos_angle = np.clip(cos_angle, -1.0, 1.0)\n                angle = np.arccos(cos_angle)\n                angle_factor[i, j] = 1 / (angle + 0.05)\n                angle_factor[j, i] = angle_factor[i, j]\n\n    # Normalize all factors\n    savings_matrix = (savings_matrix - np.min(savings_matrix)) / (np.max(savings_matrix) - np.min(savings_matrix) + 1e-6)\n    depot_proximity = (depot_proximity - np.min(depot_proximity)) / (np.max(depot_proximity) - np.min(depot_proximity) + 1e-6)\n    demand_factor = (demand_factor - np.min(demand_factor)) / (np.max(demand_factor) - np.min(demand_factor) + 1e-6)\n    angle_factor = (angle_factor - np.min(angle_factor)) / (np.max(angle_factor) - np.min(angle_factor) + 1e-6)\n\n    # Combine factors with weights\n    alpha, beta, gamma, delta = 0.4, 0.1, 0.3, 0.2\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = (alpha * savings_matrix[i, j] +\n                                            beta * (depot_proximity[i] + depot_proximity[j]) +\n                                            gamma * demand_factor[i, j] +\n                                            delta * angle_factor[i, j]) / (distance_matrix[i, j] + 1e-6)\n\n    # Stronger depot connection boost\n    for i in range(1, n):\n        heuristics_matrix[0, i] *= 1.2\n        heuristics_matrix[i, 0] *= 1.2\n\n    # Adaptive Sparsification\n    non_zero_values = heuristics_matrix[heuristics_matrix > 0]\n    if non_zero_values.size > 0:\n        sparsification_percentile = min(60, 15 + int(np.log(n)))  # Slightly relaxed sparsification\n        threshold = np.percentile(non_zero_values, sparsification_percentile)\n        heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    # Ensure no self-loops\n    for i in range(n):\n        heuristics_matrix[i, i] = 0\n\n    return heuristics_matrix\n\n[Reflection]\nRefine demand factor, angle handling, sparsification, and depot boosting for better heuristic performance.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}