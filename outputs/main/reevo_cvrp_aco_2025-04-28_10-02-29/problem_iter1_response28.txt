```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates several factors to determine the promise of an edge:
        - Inverse distance: Shorter distances are preferred.
        - Demand factor: Edges connecting nodes with higher demands are penalized (less promising).
        - Angle factor: Edges that create sharp turns are penalized (to promote smoother routes).
        - Capacity consideration: Prioritize edges to nodes that haven't been visited in the current sampled route given the capacity constraints.

    It also sparsifies the matrix by setting very unpromising elements to zero.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))

    # Inverse distance factor
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small value to avoid division by zero

    # Demand factor
    demand_factor = np.outer(demands, demands)
    demand_factor = 1 / (demand_factor + 1e-6) #Smaller demand factors is more promising

    # Angle factor (penalize sharp turns)
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        # Calculate angle between vectors (i -> j) and (i -> k)
                        v1 = coordinates[j] - coordinates[i]
                        v2 = coordinates[k] - coordinates[i]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes > 0:
                            angle = np.arccos(np.clip(dot_product / magnitudes, -1.0, 1.0))
                            angles.append(angle)

                if angles:  # Avoid taking mean of empty array
                  avg_angle = np.mean(angles) # penalize high average turning angles if i-j edge is selected
                  angle_factor[i,j] = 1/(avg_angle + 1e-6)
                else:
                  angle_factor[i,j] = 1 #No penalization is neighbours does not exists

    #Capacity awareness: Give some boost to the edges going out from the depot 0.
    depot_boost = np.ones((n,n))
    depot_boost[0,:] = 2 #Boost going out from depot
    depot_boost[:,0] = 2 # Boost going into depot
    depot_boost[0,0] = 1


    heuristics = inverse_distance * demand_factor * angle_factor * depot_boost #Combine individual edge ratings

    # Sparsify the matrix
    threshold = np.percentile(heuristics[heuristics > 0], 20) #Keep the 20 percentile and above
    heuristics[heuristics < threshold] = 0

    return heuristics
```
