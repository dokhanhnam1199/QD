```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version combines several factors to determine the promise of selecting an edge:
    - Distance between nodes
    - Demand of the destination node
    - Closeness to the depot (penalizes edges far from the depot, encouraging depot visits)
    - Sparsification: Sets unpromising edges to zero based on a threshold.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate depot distances
    depot_distances = distance_matrix[0, :]  # Distance from depot to each node

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Combine factors to determine heuristic value
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero
                demand_factor = 1 / (demands[j] / capacity + 1e-6) # smaller demand more preferable. maxes at 1 / (1/cap)
                depot_proximity_factor = np.exp(-depot_distances[j] / np.mean(depot_distances)) # Prefer closer to depot
                
                heuristic_matrix[i, j] = distance_factor * demand_factor * depot_proximity_factor

    # Sparsify the matrix:  zero out edges with low heuristic values
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25)  # Remove bottom 25%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    #normalize non-zero elements

    non_zero_elements = heuristic_matrix[heuristic_matrix > 0]
    if non_zero_elements.size > 0:
        min_val = np.min(non_zero_elements)
        max_val = np.max(non_zero_elements)
        heuristic_matrix[heuristic_matrix > 0] = (heuristic_matrix[heuristic_matrix > 0] - min_val) / (max_val - min_val)

    return heuristic_matrix
```
