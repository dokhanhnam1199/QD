```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for the Capacitated Vehicle Routing Problem (CVRP)
    based on stochastic solution sampling principles.

    This function combines distance, demand, and geometric factors to create
    a prior indicator matrix for edge selection.  It also sparsifies the matrix
    by zeroing out edges deemed unlikely to be in the optimal solution.

    Args:
        distance_matrix (np.ndarray): A symmetric matrix (n x n) representing
            the distances between nodes.
        coordinates (np.ndarray): A matrix (n x 2) containing the Euclidean
            coordinates of each node.
        demands (np.ndarray): A vector (n) of customer demands, including the depot.
        capacity (int): The capacity of each vehicle.

    Returns:
        np.ndarray: A matrix (n x n) of prior indicators for edge selection.
                     Higher values indicate a more promising edge.  The matrix
                     is sparse, with many elements set to zero.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters (tunable)
    distance_weight = 0.5       # Weight for distance factor
    demand_weight = 0.3         # Weight for demand factor
    angle_weight = 0.2          # Weight for angle factor
    capacity_threshold = 0.8    # Maximum demand/capacity ratio for local consideration
    sparsification_threshold = 0.1  # Threshold for sparsification

    # Calculate demand factor
    demand_factor = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                demand_factor[i, j] = min(demands[i] + demands[j], capacity) / capacity # Encourages selection of edges based on how full vehicle can be loaded.


    # Calculate angle factor (penalizes sharp turns)
    angle_factor = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                # Consider angle formed by nodes i, depot, and j
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[0]

                # Normalize vectors
                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)
                if norm_i > 0 and norm_j > 0:  # Avoid division by zero at depot
                    vector_i = vector_i / norm_i
                    vector_j = vector_j / norm_j
                    dot_product = np.dot(vector_i, vector_j)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))  # Clip for numerical stability
                    angle_factor[i, j] = 1 - (angle / np.pi)  # Smaller angle = better.

    # Combine factors
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = (
                    (1 / (distance_matrix[i, j] + 1e-9)) * distance_weight +  # Adding small value to avoid zero division
                    demand_factor[i, j] * demand_weight +
                    angle_factor[i, j] * angle_weight
                )


    # Sparsify the matrix (zero out unlikely edges)
    max_heuristic = np.max(heuristic_matrix)
    for i in range(n):
        for j in range(n):
            if heuristic_matrix[i, j] < sparsification_threshold * max_heuristic:
                heuristic_matrix[i, j] = 0.0

    # Ensure depot connections are more promising (important for feasibility)
    for i in range(1, n):
        heuristic_matrix[0, i] *= 1.2  # Increase weights connecting depot to all other nodes
        heuristic_matrix[i, 0] *= 1.2


    return heuristic_matrix
```
