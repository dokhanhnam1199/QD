{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Capacitated Vehicle Routing Problem (CVRP) using stochastic solution sampling.\n\n    Emphasizes depot proximity, normalized demand, and dynamic sparsification thresholds for improved CVRP heuristics.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution\n                    (shape: same as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n\n    # Parameters (can be tuned)\n    alpha = 1.0  # Weight for distance\n    beta = 1.0   # Weight for demand attraction\n    gamma = 1.0  # Weight for depot proximity\n\n    # Calculate depot proximity (normalized distance to depot)\n    depot_distances = distance_matrix[0, :]\n    max_depot_distance = np.max(depot_distances[1:]) # Avoid division by zero if all nodes are at depot.\n    depot_proximity = np.zeros(n)\n    for i in range(1,n):\n         depot_proximity[i] = 1 - (depot_distances[i] / (max_depot_distance + 1e-9)) # Normalize, avoid division by zero.\n\n    # Normalized demand\n    total_demand = np.sum(demands[1:]) #sum of all customer demands\n    normalized_demands = demands / total_demand #relative size of each demand.\n\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristics[i, j] = 0  # No self-loops\n            else:\n                # Encourage trips to depot more strongly\n                depot_prox_factor = (depot_proximity[i] + depot_proximity[j])  # Combine proximities\n\n                heuristics[i, j] = (\n                    (1 / distance_matrix[i, j])**alpha *  # Distance factor\n                    (normalized_demands[i] + normalized_demands[j])**beta * # Demand factor, favoring larger demands\n                    (depot_prox_factor)**gamma  #Depot Proximity - more important if a node is far from the depot\n                )\n\n    # Dynamic Sparsification based on Distance\n    distance_threshold = np.mean(distance_matrix) + np.std(distance_matrix)\n    heuristics[distance_matrix > distance_threshold] = 0\n\n    # Dynamic Sparsification based on Demand\n    demand_threshold = 0.7  # Cap on demand (as proportion of vehicle capacity)\n    for i in range(1, n):  # Exclude depot connections\n        for j in range(1, n):\n            if i != j and demands[i] + demands[j] > demand_threshold * capacity:\n                heuristics[i, j] = 0\n                heuristics[j, i] = 0  # Ensure symmetry\n\n    # Further Sparsification: keep only top k edges for each node based on heuristics value\n    k = 6  # Number of edges to keep per node\n    for i in range(n):\n        # Get indices of top k edges\n        top_k_indices = np.argsort(heuristics[i, :])[::-1][:k]\n        # Zero out all other edges\n        for j in range(n):\n            if j not in top_k_indices:\n                heuristics[i, j] = 0\n\n    return heuristics\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    Refined with normalized, weighted factors (savings, depot proximity, demand, angle),\n    dynamic sparsification, and depot connection prioritization.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Calculate savings matrix (Clarke-Wright Savings)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Node proximity to depot\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-6)\n\n    # Demand factor (normalized inverse demand)\n    demand_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                demand_factor[i, j] = 1 / (np.sqrt(demands[i] * demands[j]) + 1e-6)  # Geometric mean\n\n\n    # Angle Factor (angle between nodes i and j w.r.t the depot)\n    angle_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            vector_i = coordinates[i] - coordinates[0]\n            vector_j = coordinates[j] - coordinates[0]\n            norm_i = np.linalg.norm(vector_i)\n            norm_j = np.linalg.norm(vector_j)\n            if norm_i > 0 and norm_j > 0:\n                cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)\n                angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))  # Clip to avoid domain errors\n                angle_factor[i, j] = 1 / (angle + 1e-6) # closer to 0 angle => higher the score\n                angle_factor[j, i] = angle_factor[i, j]\n\n\n    # Normalize factors\n    savings_matrix = (savings_matrix - np.min(savings_matrix)) / (np.max(savings_matrix) - np.min(savings_matrix) + 1e-6)\n    depot_proximity = (depot_proximity - np.min(depot_proximity)) / (np.max(depot_proximity) - np.min(depot_proximity) + 1e-6)\n    demand_factor = (demand_factor - np.min(demand_factor)) / (np.max(demand_factor) - np.min(demand_factor) + 1e-6)\n    angle_factor = (angle_factor - np.min(angle_factor)) / (np.max(angle_factor) - np.min(angle_factor) + 1e-6)\n    \n    # Combine factors with weights, penalizing long distances\n    distance_norm = distance_matrix / np.max(distance_matrix + 1e-6)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = (\n                    0.4 * savings_matrix[i, j]\n                    + 0.2 * (depot_proximity[i] + depot_proximity[j])\n                    + 0.2 * demand_factor[i, j]\n                    + 0.2 * angle_factor[i, j]\n                ) / (distance_norm[i, j] + 1e-6)\n\n    # Prioritize depot connections: Increase score for edges connected to the depot.\n    for i in range(1, n):\n        heuristics_matrix[0, i] *= 1.2  # Boost depot edges\n        heuristics_matrix[i, 0] *= 1.2\n\n\n    # Sparsify the matrix (remove edges with small values) - Dynamic Threshold\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 40)  # adaptive threshold\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    # Set diagonal to zero\n    for i in range(n):\n        heuristics_matrix[i, i] = 0\n\n    return heuristics_matrix\n\n[Reflection]\nSavings, angles, and normalized, weighted combinations improve CVRP heuristics. Sparsification and depot prioritization are crucial.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}