```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for CVRP based on distance, demand, and angular proximity.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate angles relative to the depot (node 0)
    depot_x, depot_y = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # Disallow self-loops
                continue

            # Base heuristic: inverse distance
            heuristic = 1 / (distance_matrix[i, j] + 1e-9)  # Adding a small constant to prevent division by zero

            # Demand factor: Penalize edges connecting nodes with high combined demand
            demand_penalty = (demands[i] + demands[j]) / (2 * capacity)  # Normalize by twice the capacity
            heuristic /= (demand_penalty + 0.1)  # Add a small constant to avoid extreme penalization when demand_penalty is zero


            # Angle proximity factor: Encourage edges between nodes close in angle from depot.  This helps route contiguity.
            angle_diff = np.abs(angles[i] - angles[j])
            angle_diff = np.min([angle_diff, 2 * np.pi - angle_diff])  # Account for circularity

            angle_proximity = 1 / (angle_diff + 0.1) # Favoring smaller angular difference
            heuristic *= (angle_proximity)

            heuristic_matrix[i, j] = heuristic

    # Sparsify: Zero out elements below a threshold to focus the search.
    # The threshold is adaptive and depends on average edge value.
    average_heuristic = np.mean(heuristic_matrix)
    threshold = 0.1 * average_heuristic  # keep the top 10% edges based on heuristic value

    heuristic_matrix[heuristic_matrix < threshold] = 0
    return heuristic_matrix
```
