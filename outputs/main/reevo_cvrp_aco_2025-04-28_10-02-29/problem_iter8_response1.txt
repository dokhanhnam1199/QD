```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Further refined version with enhanced savings calculation, adaptive sparsification, and prioritized depot connections.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings matrix (Clarke-Wright Savings) - enhanced
    savings_matrix = np.zeros((n, n))
    max_savings = 0
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[i, j] = savings
            savings_matrix[j, i] = savings
            max_savings = max(max_savings, savings)

    # Node proximity to depot
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-6)

    # Demand factor - Normalized by capacity
    demand_factor = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_factor[i, j] = 1 - min((demands[i] + demands[j]) / capacity, 1)

    # Angle factor (try to avoid sharp turns)
    angle_factor = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Calculate angle between vectors depot->i and depot->j
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[0]
                dot_product = np.dot(vector_i, vector_j)
                magnitudes = np.linalg.norm(vector_i) * np.linalg.norm(vector_j)
                if magnitudes > 0:
                    cos_angle = np.clip(dot_product / magnitudes, -1.0, 1.0)
                    angle = np.arccos(cos_angle)
                    angle_factor[i, j] = 1 - (angle / np.pi)  # Scale angle between 0 and 1 (larger = better)
                else:
                    angle_factor[i, j] = 0

    # Normalize factors
    if max_savings > 0:
        savings_matrix = savings_matrix / max_savings
    else:
        savings_matrix = np.zeros((n, n))

    depot_proximity = (depot_proximity - np.min(depot_proximity)) / (
            np.max(depot_proximity) - np.min(depot_proximity) + 1e-6)
    demand_factor = (demand_factor - np.min(demand_factor)) / (
            np.max(demand_factor) - np.min(demand_factor) + 1e-6)
    angle_factor = (angle_factor - np.min(angle_factor)) / (
            np.max(angle_factor) - np.min(angle_factor) + 1e-6)

    # Combine factors with weights
    alpha = 0.5
    beta = 0.2
    gamma = 0.15
    delta = 0.15

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (
                        alpha * savings_matrix[i, j]
                        + beta * (depot_proximity[i] + depot_proximity[j])
                        + gamma * demand_factor[i, j]
                        + delta * angle_factor[i, j]
                ) / (distance_matrix[i, j] + 1e-6)

    # Prioritize depot connections and nearby nodes
    depot_boost = 1.3
    for i in range(1, n):
        heuristics_matrix[0, i] *= depot_boost  # Stronger priority for depot connections
        heuristics_matrix[i, 0] *= depot_boost

    # Adaptive Sparsification based on distance and capacity
    sparsification_threshold = 0.6 + 0.4 * (capacity / np.sum(demands))  # Adjust threshold based on capacity
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0],
                               100 * sparsification_threshold)  # Adaptively remove a percentage

    heuristics_matrix[heuristics_matrix < threshold] = 0

    # Sparsify further by keeping only top k edges per node.
    k = max(2, int(np.sqrt(n)))  # Adaptive k
    for i in range(n):
        row = heuristics_matrix[i, :]
        indices = np.argpartition(row, -k)[-k:]  # Get indices of k largest elements
        mask = np.ones(row.shape, dtype=bool)
        mask[indices] = False
        row[mask] = 0
        heuristics_matrix[i, :] = row

    # Set diagonal to zero
    for i in range(n):
        heuristics_matrix[i, i] = 0

    return heuristics_matrix
```
