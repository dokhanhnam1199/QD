```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Refined version with normalized factors, sparsification, and prioritized depot connections.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings matrix (Clarke-Wright Savings)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node proximity to depot
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-6)

    # Demand factor
    demand_factor = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_factor[i, j] = 1 / (demands[i] + demands[j] + 1e-6)  # Avoid division by zero

    # Angle factor (try to avoid sharp turns)
    angle_factor = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Calculate angle between vectors depot->i and depot->j
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[0]
                dot_product = np.dot(vector_i, vector_j)
                magnitudes = np.linalg.norm(vector_i) * np.linalg.norm(vector_j)
                if magnitudes > 0:
                    cos_angle = np.clip(dot_product / magnitudes, -1.0, 1.0)
                    angle = np.arccos(cos_angle)
                    angle_factor[i, j] = 1 - (angle / np.pi) # Scale angle between 0 and 1 (larger = better)
                else:
                    angle_factor[i, j] = 0

    # Distance factor
    distance_factor = 1 / (distance_matrix + 1e-6)
    # Normalize factors
    savings_matrix = (savings_matrix - np.min(savings_matrix)) / (np.max(savings_matrix) - np.min(savings_matrix) + 1e-6)
    depot_proximity = (depot_proximity - np.min(depot_proximity)) / (np.max(depot_proximity) - np.min(depot_proximity) + 1e-6)
    demand_factor = (demand_factor - np.min(demand_factor)) / (np.max(demand_factor) - np.min(demand_factor) + 1e-6)
    angle_factor = (angle_factor - np.min(angle_factor)) / (np.max(angle_factor) - np.min(angle_factor) + 1e-6)
    distance_factor = (distance_factor - np.min(distance_factor)) / (np.max(distance_factor) - np.min(distance_factor) + 1e-6)


    # Combine factors with weights (geometric mean)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (
                    savings_matrix[i, j]**0.4
                    * (depot_proximity[i] * depot_proximity[j])**0.1
                    * demand_factor[i, j]**0.1
                    * angle_factor[i, j]**0.2
                    * distance_factor[i,j]**0.2
                )

    # Prioritize depot connections and nearby nodes
    for i in range(1, n):
        heuristics_matrix[0, i] *= 1.3  # Increase priority for depot connections
        heuristics_matrix[i, 0] *= 1.3

    # Sparsify the matrix (remove edges with small values) - adaptive threshold

    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 50)  # Remove bottom 50%
    heuristics_matrix[heuristics_matrix < threshold] = 0

    #Capacity Constraint consideration
    for i in range(1,n):
        for j in range(1,n):
            if demands[i] + demands[j] > capacity and i!=j:
                heuristics_matrix[i,j] = heuristics_matrix[i,j]*0.5

    # Set diagonal to zero and make matrix asymmetric
    for i in range(n):
        heuristics_matrix[i, i] = 0

    return heuristics_matrix
```
