{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and angular proximity.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Calculate angles relative to the depot (node 0)\n    depot_x, depot_y = coordinates[0]\n    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # Disallow self-loops\n                continue\n\n            # Base heuristic: inverse distance\n            heuristic = 1 / (distance_matrix[i, j] + 1e-9)  # Adding a small constant to prevent division by zero\n\n            # Demand factor: Penalize edges connecting nodes with high combined demand\n            demand_penalty = (demands[i] + demands[j]) / (2 * capacity)  # Normalize by twice the capacity\n            heuristic /= (demand_penalty + 0.1)  # Add a small constant to avoid extreme penalization when demand_penalty is zero\n\n\n            # Angle proximity factor: Encourage edges between nodes close in angle from depot.  This helps route contiguity.\n            angle_diff = np.abs(angles[i] - angles[j])\n            angle_diff = np.min([angle_diff, 2 * np.pi - angle_diff])  # Account for circularity\n\n            angle_proximity = 1 / (angle_diff + 0.1) # Favoring smaller angular difference\n            heuristic *= (angle_proximity)\n\n            heuristic_matrix[i, j] = heuristic\n\n    # Sparsify: Zero out elements below a threshold to focus the search.\n    # The threshold is adaptive and depends on average edge value.\n    average_heuristic = np.mean(heuristic_matrix)\n    threshold = 0.1 * average_heuristic  # keep the top 10% edges based on heuristic value\n\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    Combines several factors to determine the promise of each edge and sparsifies the matrix.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros((n, n))\n\n    # Calculate savings for each edge (Clarke-Wright savings heuristic)\n    savings = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings[j, i] = savings[i, j]\n\n    # Normalize distance matrix (smaller is better)\n    normalized_distance = 1 / (distance_matrix + 1e-6)  # Avoid division by zero\n\n    # Normalize savings matrix (larger is better)\n    normalized_savings = (savings - np.min(savings)) / (np.max(savings) - np.min(savings) + 1e-6)\n\n    # Demand factor: penalize edges connecting nodes with high combined demand relative to capacity.\n    demand_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                demand_factor[i, j] = max(0, (demands[i] + demands[j]) / capacity)\n\n    # Distance from depot factor: Encourages edges close to the depot\n    depot_proximity = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n             depot_proximity[i,j] = 1 - (distance_matrix[0,i] + distance_matrix[0,j]) / (2 * np.max(distance_matrix))\n\n\n    # Combine factors\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                 heuristics[i, j] = (0.5 * normalized_distance[i, j] + 0.4 * normalized_savings[i,j] + 0.1 * depot_proximity[i,j]) / (1 + demand_factor[i,j]) # Weight the components.\n\n    # Sparsify the matrix: Keep only the top k edges for each node\n    k = int(np.sqrt(n)) #Adjust k based on problem size\n    for i in range(n):\n        row = heuristics[i, :].copy()  # Copy the row to avoid modifying the original during sorting\n        indices = np.argsort(row)[-k:]  # Get indices of top k values\n        heuristics[i, :] = 0  # Zero out the entire row\n        heuristics[i, indices] = row[indices]  # Restore only the top k values\n\n\n    return heuristics\n\n[Reflection]\nSavings calculation, depot proximity, and demand-based penalization with adaptive sparsification improve heuristic quality.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}