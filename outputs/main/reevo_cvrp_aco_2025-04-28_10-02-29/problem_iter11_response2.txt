```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Improves upon v1 with enhanced capacity and demand handling, angle calculation, and adaptive sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings matrix (Clarke-Wright Savings)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node proximity to depot (scaled)
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = np.exp(-distance_matrix[0, i] / np.mean(distance_matrix[0, 1:]))


    # Demand factor (geometric mean, capacity awareness, and slack utilization)
    demand_factor = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                combined_demand = demands[i] + demands[j]
                if combined_demand > capacity:
                    demand_factor[i, j] = -1.0  # Strong penalty
                else:
                    geometric_mean_demand = np.sqrt(demands[i] * demands[j]) + 1e-6
                    remaining_capacity = capacity - combined_demand
                    slack_ratio = remaining_capacity / capacity
                    demand_factor[i, j] = (1 / (geometric_mean_demand)) * (slack_ratio**0.5)  # Non-linear scaling


    # Angle Factor (angle between nodes i and j w.r.t the depot) - improved angle calculation
    angle_factor = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            vector_i = coordinates[i] - coordinates[0]
            vector_j = coordinates[j] - coordinates[0]
            norm_i = np.linalg.norm(vector_i)
            norm_j = np.linalg.norm(vector_j)
            if norm_i > 0 and norm_j > 0:
                cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                cos_angle = np.clip(cos_angle, -1.0, 1.0) # ensure value is within [-1, 1]
                angle = np.arccos(cos_angle)  # Angle in radians
                angle_factor[i, j] = np.exp(-angle)  # Exponential decay with angle
                angle_factor[j, i] = angle_factor[i, j]


    # Normalize factors (Robust scaling)
    def robust_scale(matrix):
        median = np.median(matrix[matrix != 0])
        mad = np.median(np.abs(matrix[matrix != 0] - median))
        scaled_matrix = (matrix - median) / (1.4826 * mad + 1e-6)  # 1.4826 for normal distribution
        return scaled_matrix

    savings_matrix = robust_scale(savings_matrix)
    depot_proximity = robust_scale(depot_proximity)
    demand_factor = robust_scale(demand_factor)
    angle_factor = robust_scale(angle_factor)



    # Combine factors with adaptive weights and distance penalization
    weight_savings = 0.4
    weight_depot = 0.2
    weight_demand = 0.25
    weight_angle = 0.15

    for i in range(n):
        for j in range(n):
            if i != j:
                # More aggressive distance penalization
                distance_penalty = np.exp(-distance_matrix[i, j] / np.mean(distance_matrix) ) #Adaptive distance scaling
                heuristics_matrix[i, j] = (
                    weight_savings * savings_matrix[i, j]
                    + weight_depot * (depot_proximity[i] + depot_proximity[j])
                    + weight_demand * demand_factor[i, j]
                    + weight_angle * angle_factor[i, j]
                ) * distance_penalty

                #Capacity violation penalty
                if demand_factor[i,j] < 0:
                    heuristics_matrix[i, j] *= 0.1



    # Prioritize depot connections, dynamically
    depot_boost = 1.2
    for i in range(1, n):
        heuristics_matrix[0, i] *= depot_boost
        heuristics_matrix[i, 0] *= depot_boost


    # Adaptive Sparsification
    non_zero_values = heuristics_matrix[heuristics_matrix > 0]
    if non_zero_values.size > 0:
        sparsification_percentile = max(10, min(75, 20 + int(np.log(n))))  # Dynamic percentile
        threshold = np.percentile(non_zero_values, sparsification_percentile)
        heuristics_matrix[heuristics_matrix < threshold] = 0

    #Set Diagonals to zero
    for i in range(n):
        heuristics_matrix[i, i] = 0

    return heuristics_matrix
```
