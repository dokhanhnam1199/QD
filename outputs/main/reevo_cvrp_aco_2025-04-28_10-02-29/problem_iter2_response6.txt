```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates savings, demand penalties, prioritized depot connections, and angle considerations.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate savings for each edge
    savings_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance and savings
    heuristic_matrix = (1 / (distance_matrix + 1e-9)) + (savings_matrix / np.max(savings_matrix))

    # Penalize edges connecting nodes with high demands
    for i in range(1, n):
        for j in range(1, n):
            heuristic_matrix[i, j] /= 1 + ((demands[i] + demands[j]) / (2 * capacity)) #penalize but not too harshly

    # Favor edges close to the depot (node 0)
    for i in range(1, n):
        heuristic_matrix[0, i] *= 1.75  # Boost edges connected to depot
        heuristic_matrix[i, 0] = heuristic_matrix[0, i]

    # Angle to depot: Avoid sharp turns relative to the depot. Penalize edges that lead away from returning to depot
    depot_angle_factor = np.zeros((n, n))
    for i in range(1, n):  # skip depot as origin
        for j in range(1, n):
            if i == j:
                depot_angle_factor[i,j] = 1.0
                continue

            vec_i = coordinates[i] - coordinates[0]
            vec_j = coordinates[j] - coordinates[0]

            norm_i = np.linalg.norm(vec_i)
            norm_j = np.linalg.norm(vec_j)

            if norm_i > 0 and norm_j > 0:
                cos_angle = np.dot(vec_i, vec_j) / (norm_i * norm_j)
                #Higher the cos the more similar the directions, penalizing angles that deviate
                depot_angle_factor[i, j] = (cos_angle + 1) / 2 # normalize to [0,1]
            else:
                depot_angle_factor[i, j] = 0.5 #Assign a default value

    heuristic_matrix = heuristic_matrix * (0.75 + 0.25 * depot_angle_factor) #Incorporate angle, but not dominant


    # Sparsify the matrix (remove unpromising edges)
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 25)  # Keep top 75% edges, avoid zero division

    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure depot connections are always considered, even if sparsified
    for i in range(1, n):
      if heuristic_matrix[0, i] == 0:
        heuristic_matrix[0, i] = threshold/2 if threshold > 0 else 0.01
      if heuristic_matrix[i, 0] == 0:
        heuristic_matrix[i, 0] = threshold/2 if threshold > 0 else 0.01

    return heuristic_matrix
```
