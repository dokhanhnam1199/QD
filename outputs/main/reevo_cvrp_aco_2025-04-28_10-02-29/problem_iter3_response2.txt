```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings matrix (Clarke-Wright Savings)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node proximity to depot
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-6)

    # Demand factor
    demand_factor = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_factor[i, j] = 1 / (demands[i] + demands[j] + 1e-6)  # Avoid division by zero

    # Angle cost: penalize sharp turns
    angle_cost = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Vectors from depot to i and depot to j
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[0]

                # Calculate cosine of the angle
                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)
                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle_cost[i, j] = max(0, cos_angle)  # Penalize small angles (sharp turns)
                else:
                    angle_cost[i, j] = 0

    # Normalize Factors
    savings_matrix_norm = savings_matrix / np.max(savings_matrix + 1e-6)
    depot_proximity_norm = depot_proximity / np.max(depot_proximity + 1e-6)
    demand_factor_norm = demand_factor / np.max(demand_factor + 1e-6)
    angle_cost_norm = angle_cost / np.max(angle_cost + 1e-6)

    # Combine factors, penalizing long distances, edges between nodes with high demands
    # and rewarding high savings and proximity to the depot
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (
                    0.4 * savings_matrix_norm[i, j]
                    + 0.2 * (depot_proximity_norm[i] + depot_proximity_norm[j])
                    + 0.1 * demand_factor_norm[i, j]
                    - 0.1 * distance_matrix[i, j] / np.max(distance_matrix + 1e-6) # Normalize distance
                    - 0.2 * angle_cost_norm[i, j] #Penalize sharp angle
                )

    #Sparsify the matrix (remove edges with small values)
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 40) #remove bottom 40%
    heuristics_matrix[heuristics_matrix < threshold] = 0

    #Prioritize edges connected to the depot
    for i in range(1, n):
        heuristics_matrix[0, i] *= 1.2
        heuristics_matrix[i, 0] *= 1.2
    

    #Set diagonal to zero and make matrix asymmetric
    for i in range(n):
        heuristics_matrix[i, i] = 0

    return heuristics_matrix
```
