{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version incorporates Clarke-Wright savings, normalized distance, demand considerations, and\n    selective sparsification to guide the search process.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Calculate savings matrix (Clarke-Wright savings heuristic)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Normalize distance matrix (lower distance is better)\n    normalized_distance = 1 / (distance_matrix + 1e-6)  # Adding a small value to avoid division by zero\n    normalized_distance = (normalized_distance - np.min(normalized_distance)) / (np.max(normalized_distance) - np.min(normalized_distance) + 1e-6)\n\n\n    # Normalize savings matrix (higher savings are better)\n    normalized_savings = (savings_matrix - np.min(savings_matrix)) / (np.max(savings_matrix) - np.min(savings_matrix) + 1e-6)\n\n    # Demand factor: penalize edges connecting nodes with high demands, prioritize depot connections\n    demand_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            demand_factor[i, j] = (demands[i] + demands[j]) / (2 * capacity)  # Average demand relative to capacity\n\n\n    # Combine factors\n    heuristic_matrix = normalized_distance + 0.6 * normalized_savings - 0.3 * demand_factor\n    heuristic_matrix = np.clip(heuristic_matrix, 0, 1)\n\n    # Sparsify the matrix (optional): remove less promising edges\n    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 25)  # Keep top 75%\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Ensure depot connections are not zeroed out too aggressively:\n    for i in range(1, n):\n        heuristic_matrix[0, i] = max(heuristic_matrix[0,i], np.percentile(heuristic_matrix[0, 1:], 10)) #at least top 90%\n        heuristic_matrix[i, 0] = max(heuristic_matrix[i, 0], np.percentile(heuristic_matrix[1:, 0], 10)) #at least top 90%\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version incorporates savings, depot proximity, and demand considerations, combined with distance,\n    to yield improved edge prioritization.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Calculate savings matrix (Clarke-Wright Savings)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Node proximity to depot (using inverse square for stronger effect)\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i]**2 + 1e-6) # inverse square, avoid div by zero\n\n    # Demand factor - Penalize edges if combined demand is close to exceeding capacity\n    demand_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                combined_demand_ratio = (demands[i] + demands[j]) / capacity\n                demand_factor[i, j] = max(0, 1 - combined_demand_ratio)  # Higher is better if combined demand is low\n    \n\n    # Combine factors, penalizing long distances and rewarding high savings, proximity to the depot, and low combined demand.\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = (\n                    0.4 * savings_matrix[i, j]\n                    + 0.3 * (depot_proximity[i] + depot_proximity[j])\n                    + 0.3 * demand_factor[i, j]\n                ) / (distance_matrix[i, j] + 1e-6)\n    \n    # Sparsify the matrix (remove edges with small values) - adaptive threshold\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 30)  # Remove bottom 30%\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n    \n\n    # Set diagonal to zero\n    for i in range(n):\n        heuristics_matrix[i, i] = 0\n\n    return heuristics_matrix\n\n[Reflection]\nPrioritize depot proximity, combined demand, and savings, scaled by distance, with adaptive sparsification and zero diagonals.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}