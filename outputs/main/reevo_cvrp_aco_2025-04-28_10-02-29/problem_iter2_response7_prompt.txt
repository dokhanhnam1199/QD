{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version combines several factors to determine the promise of selecting an edge:\n    - Distance between nodes\n    - Demand of the destination node\n    - Closeness to the depot (penalizes edges far from the depot, encouraging depot visits)\n    - Sparsification: Sets unpromising edges to zero based on a threshold.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate depot distances\n    depot_distances = distance_matrix[0, :]  # Distance from depot to each node\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n            else:\n                # Combine factors to determine heuristic value\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero\n                demand_factor = 1 / (demands[j] / capacity + 1e-6) # smaller demand more preferable. maxes at 1 / (1/cap)\n                depot_proximity_factor = np.exp(-depot_distances[j] / np.mean(depot_distances)) # Prefer closer to depot\n                \n                heuristic_matrix[i, j] = distance_factor * demand_factor * depot_proximity_factor\n\n    # Sparsify the matrix:  zero out edges with low heuristic values\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25)  # Remove bottom 25%\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    #normalize non-zero elements\n\n    non_zero_elements = heuristic_matrix[heuristic_matrix > 0]\n    if non_zero_elements.size > 0:\n        min_val = np.min(non_zero_elements)\n        max_val = np.max(non_zero_elements)\n        heuristic_matrix[heuristic_matrix > 0] = (heuristic_matrix[heuristic_matrix > 0] - min_val) / (max_val - min_val)\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Calculate savings matrix (Clarke-Wright Savings)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Node proximity to depot\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / distance_matrix[0, i]\n\n    # Demand factor\n    demand_factor = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                demand_factor[i, j] = 1 / (demands[i] + demands[j] + 1e-6)  # Avoid division by zero\n\n\n    # Combine factors, penalizing long distances, edges between nodes with high demands\n    # and rewarding high savings and proximity to the depot\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = (\n                    0.5 * savings_matrix[i, j]\n                    + 0.3 * (depot_proximity[i] + depot_proximity[j])\n                    + 0.2 * demand_factor[i, j]\n                ) / (distance_matrix[i, j] + 1e-6)\n    \n    #Sparsify the matrix (remove edges with small values)\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 25) #remove bottom 25%\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n    \n\n    #Set diagonal to zero and make matrix asymmetric\n    for i in range(n):\n        heuristics_matrix[i, i] = 0\n\n    return heuristics_matrix\n\n[Reflection]\nSavings, depot proximity, and demand considerations, combined with distance, yield improved edge prioritization.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}