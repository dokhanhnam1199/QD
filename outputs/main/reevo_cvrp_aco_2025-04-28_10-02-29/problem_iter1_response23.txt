```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """

    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with zeros. We'll build it up.
    heuristic_matrix = np.zeros_like(distance_matrix)

    # 1. Distance-based heuristic (inverse of distance)
    distance_heuristic = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Demand-based heuristic: discourage edges that would quickly fill up a vehicle.
    demand_heuristic = np.ones_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            else:
                # Scale inversely to average demand of the two nodes. Nodes with larger demand are visited later, so have less opportunity to connect earlier.
                demand_heuristic[i, j] = 1 / ((demands[i] + demands[j]) + 1e-9)


    # 3. Angle-based heuristic: discourage sharp turns away from the depot.
    angle_heuristic = np.ones_like(distance_matrix)
    depot_index = 0
    for i in range(1, n): # start from 1, don't look at the depot
        for j in range(1, n):
            if i == j:
                angle_heuristic[i,j] = 0
                continue
            # Calculate vectors from node i and j to the depot.
            vector_i = coordinates[depot_index] - coordinates[i]
            vector_j = coordinates[depot_index] - coordinates[j]
            # Normalize the vectors.
            vector_i = vector_i / (np.linalg.norm(vector_i) + 1e-9)
            vector_j = vector_j / (np.linalg.norm(vector_j) + 1e-9)
            # Calculate the cosine of the angle between the vectors (dot product of normalized vectors).
            cos_angle = np.dot(vector_i, vector_j)

            # Since we want to *encourage* connections *toward* the depot, we use cos_angle directly.
            # A larger cos_angle means a smaller angle, i.e., nodes point more towards the depot, thus are good
            # to connect. If nodes point away from the depot, cos_angle will be negative or small, and we want
            # to discourage such connections.
            angle_heuristic[i, j] = cos_angle # Larger means nodes are pointing towards the depot (good)


    # Combine the heuristics.  Weight distance most heavily.
    heuristic_matrix = (0.6 * distance_heuristic +
                        0.2 * demand_heuristic +
                        0.2 * angle_heuristic)

    # Sparsify the matrix:  Set a threshold based on the mean value of the heuristics
    threshold = np.mean(heuristic_matrix)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Remove self-loops:
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
