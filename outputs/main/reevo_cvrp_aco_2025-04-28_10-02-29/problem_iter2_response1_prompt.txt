{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP) that combines\n    distance, demand, and angular considerations to estimate the promise of each edge.\n\n    Args:\n        distance_matrix (np.ndarray): A matrix of pairwise distances between nodes.\n        coordinates (np.ndarray):  Euclidean coordinates of nodes.\n        demands (np.ndarray): A vector of customer demands.\n        capacity (int): The vehicle capacity.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each element\n                  indicates the heuristic promise of including the corresponding edge\n                  in a solution.  Higher values indicate more promising edges.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Calculate savings matrix (Clark-Wright savings heuristic component)\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Angular penalty (penalize sharp turns away from the depot)\n    angular_penalty = np.zeros((n, n))\n    depot_x, depot_y = coordinates[0]\n    for i in range(1, n):\n        for j in range(1,n):\n             if i == j:\n                angular_penalty[i, j] = 0\n             else:\n                x_i, y_i = coordinates[i]\n                x_j, y_j = coordinates[j]\n\n                angle_i = np.arctan2(y_i - depot_y, x_i - depot_x)\n                angle_j = np.arctan2(y_j - depot_y, x_j - depot_x)\n\n                angular_diff = np.abs(angle_i - angle_j)\n                angular_diff = np.min([angular_diff, 2 * np.pi - angular_diff]) # Make sure it's the smaller angle\n                angular_penalty[i,j] = angular_diff\n                angular_penalty[j,i] = angular_penalty[i,j]\n\n\n    # Demand penalty: Higher demand between two customers makes an edge less desirable,\n    # as the edge limits flexibility in filling the vehicle\n\n    demand_penalty = np.zeros((n, n))\n    for i in range(1,n):\n        for j in range(1,n):\n            if i ==j:\n                demand_penalty[i,j] = 0\n            else:\n                demand_penalty[i, j] = demands[i] + demands[j]\n                demand_penalty[j, i] = demand_penalty[i, j]\n    demand_penalty = demand_penalty / (2*capacity)  #Scaled by vehicle capacity to keep values from dominating\n\n    # Combine factors. Distance should be the biggest determinant; otherwise, shortest paths are not found\n    # Consider savings matrix as secondary objective after distance\n    # Angular penalty to avoid sharp turns away from the depot\n    # Demand penalty reduces the probability that edges between large demand nodes are used in shortest paths\n\n    heuristic_matrix = (1 / (distance_matrix + 1e-9)) + (0.5 * savings_matrix / np.max(savings_matrix + 1e-9)) - (0.2 * angular_penalty / np.max(angular_penalty + 1e-9)) - (0.1 * demand_penalty)\n\n    # Sparsify: set less promising edges to zero\n    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20)  #Keep the top 80%\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    #Ensure diagonal is zero\n    for i in range(n):\n        heuristic_matrix[i,i] = 0\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Capacitated Vehicle Routing Problem (CVRP) using stochastic solution sampling.\n\n    Combines several factors to determine how promising it is to select an edge,\n    and sparsifies the matrix by setting unpromising elements to zero.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution\n                    (shape: same as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n\n    # Parameters (can be tuned)\n    alpha = 1.0  # Weight for distance\n    beta = 1.0   # Weight for demand attraction\n    gamma = 0.5  # Weight for depot proximity\n\n    # Calculate depot proximity (normalized distance to depot)\n    depot_distances = distance_matrix[0, :] / np.max(distance_matrix[0, :])\n    depot_proximity = 1 - depot_distances\n\n    # Node Attraction to Depot (demand-weighted)\n    node_attraction = demands / capacity\n\n    # Normalized demand\n    normalized_demands = demands / np.max(demands)\n\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristics[i, j] = 0  # No self-loops\n            else:\n                # Encourage trips to depot more strongly\n                if i == 0:\n                    depot_prox_factor_i = 1\n                else:\n                    depot_prox_factor_i = depot_proximity[i]\n\n                if j == 0:\n                    depot_prox_factor_j = 1\n                else:\n                    depot_prox_factor_j = depot_proximity[j]\n\n\n                heuristics[i, j] = (\n                    (1 / distance_matrix[i, j])**alpha *  # Distance factor\n                    (normalized_demands[i] + normalized_demands[j])**beta * # Demand factor, favoring larger demands\n                    (depot_prox_factor_i + depot_prox_factor_j)**gamma  #Depot Proximity - more important if a node is far from the depot\n                )\n\n    # Sparsify the matrix: remove edges that are too long or connect nodes with high demand that would likely overload a vehicle early on\n    distance_threshold = np.mean(distance_matrix) + np.std(distance_matrix)  # Dynamic threshold\n    demand_threshold = 0.8 # Cap on demand (as proportion of total capacity)\n\n    for i in range(n):\n        for j in range(n):\n            if distance_matrix[i, j] > distance_threshold:\n                heuristics[i, j] = 0\n            # Disincentivize immediate connections that violate capacity too easily\n            elif demands[i] + demands[j] > demand_threshold * capacity and i != 0 and j !=0:\n               heuristics[i,j] = 0\n\n    return heuristics\n\n[Reflection]\nPrioritize distance, demand, and depot proximity with tunable weights and dynamic sparsification based on capacity.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}