```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters for tuning
    alpha = 1.0  # Weight for distance
    beta = 0.5   # Weight for demand
    gamma = 0.2  # Weight for angle
    sparsity_threshold = 0.1  # Threshold for sparsification

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor: shorter distances are more promising
                distance_factor = 1 / distance_matrix[i, j]

                # Demand factor: consider demands of the nodes
                demand_factor = 1 / (demands[i] + demands[j] + 1e-6)  # Avoid division by zero

                # Angle factor: penalize sharp turns away from the depot (node 0)
                if i != 0 and j != 0:
                  vector_i = coordinates[i] - coordinates[0]
                  vector_j = coordinates[j] - coordinates[0]
                  norm_i = np.linalg.norm(vector_i)
                  norm_j = np.linalg.norm(vector_j)

                  if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    angle_factor = (cos_angle + 1) / 2 # scale between 0 and 1, 1 indicates the direction towards the depot
                  else:
                    angle_factor = 0.5  #Default value if vector cannot be defined
                else:
                    angle_factor = 1.0  # Directly connected to depot, always good.


                # Combine the factors
                heuristic_matrix[i, j] = (alpha * distance_factor +
                                            beta * demand_factor +
                                            gamma * angle_factor)

    # Normalize the heuristic matrix
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
      heuristic_matrix = heuristic_matrix / max_heuristic

    # Sparsify the matrix: set small values to zero
    heuristic_matrix[heuristic_matrix < sparsity_threshold] = 0

    return heuristic_matrix
```
