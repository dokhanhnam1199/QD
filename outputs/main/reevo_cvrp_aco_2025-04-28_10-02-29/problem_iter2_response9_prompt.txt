{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for CVRP using a combination of factors:\n    - Distance: Shorter distances are more promising.\n    - Demand: Edges connecting to nodes with high demand might be less promising\n      if they quickly consume vehicle capacity.\n    - Angle: Edges forming sharp turns are penalized, encouraging smoother routes.\n    - Capacity utilization: Edges that would cause capacity overflow are strongly penalized.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic matrix (n x n) indicating edge promisingness.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Parameters to control the influence of each factor. Tune these to improve performance!\n    distance_weight = 1.0\n    demand_weight = 0.5\n    angle_weight = 0.7\n    capacity_weight = 2.0  # Higher weight means strong penalty for capacity issues\n    sparsification_threshold = 0.1\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            # Distance factor: Inverse distance. Add a small constant to avoid division by zero.\n            distance_factor = distance_weight / (distance_matrix[i, j] + 1e-6)\n\n            # Demand factor: Penalize edges that lead to high demand nodes. Normalize demand.\n            normalized_demand_i = demands[i] / capacity\n            normalized_demand_j = demands[j] / capacity\n            demand_factor = (1 - demand_weight * (normalized_demand_i + normalized_demand_j)/2)\n\n\n            # Angle factor: Encourage smoother routes. Only consider for nodes other than the depot.\n            angle_factor = 1.0\n            if i != 0 and j != 0: # Avoid calculating the angle based on the depot (node 0)\n                # Get coordinates\n                x_i, y_i = coordinates[i]\n                x_j, y_j = coordinates[j]\n\n                # Find the nearest nodes k to node i and j (excluding node j for i and node i for j)\n                best_angle_i = 0\n                best_angle_j = 0\n                for k in range(n):\n                    if k != i and k != j:\n                        x_k, y_k = coordinates[k]\n                        vector_ij = np.array([x_j - x_i, y_j - y_i])\n                        vector_ik = np.array([x_k - x_i, y_k - y_i])\n                        vector_ji = np.array([x_i - x_j, y_i - y_j])\n                        vector_jk = np.array([x_k - x_j, y_k - y_j])\n\n                        # Calculate the angle between the edges\n                        angle_i = np.degrees(np.arccos(np.dot(vector_ij, vector_ik) / (np.linalg.norm(vector_ij) * np.linalg.norm(vector_ik) + 1e-6)))\n                        angle_j = np.degrees(np.arccos(np.dot(vector_ji, vector_jk) / (np.linalg.norm(vector_ji) * np.linalg.norm(vector_jk) + 1e-6)))\n\n                        # Update the best angle for node i and j\n                        best_angle_i = max(best_angle_i, angle_i)\n                        best_angle_j = max(best_angle_j, angle_j)\n                angle_factor = 1 - angle_weight * (best_angle_i + best_angle_j)/360\n            # Capacity factor: Heavily penalize edges that would likely cause capacity overflow early on.\n            # Simplistic approximation: just consider the demands of the two nodes connected by the edge.\n\n            if demands[i] + demands[j] > capacity * 0.8 : #tune 0.8\n              capacity_factor = 0.01  # Strongly penalize; set close to zero but non-zero.\n\n            else:\n              capacity_factor = 1.0 # set to 1\n\n            # Combine the factors\n            heuristic_matrix[i, j] = distance_factor * demand_factor * angle_factor * capacity_factor\n\n    #Sparsify the matrix\n    max_heuristic = np.max(heuristic_matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if heuristic_matrix[i,j] < sparsification_threshold * max_heuristic :\n              heuristic_matrix[i, j] = 0.0\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.\n                  The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate savings for each edge\n    savings_matrix = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]  # Symmetric matrix\n\n    # Proximity factor: Inverse distance\n    proximity = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero\n\n    # Demand factor: Prioritize edges connecting nodes with manageable demand. Edges that\n    # leads to infeasible solution should be penalized.\n    demand_factor = np.ones_like(distance_matrix, dtype=float)\n    for i in range(n):\n      for j in range(n):\n        if i != j:\n          if demands[i] + demands[j] > capacity and (i != 0 and j != 0):\n              demand_factor[i,j] = 0.1 # drastically reduce this edge.\n          else:\n              demand_factor[i, j] = 1.0  # no change needed\n\n    # Depot connection preference: Prefer connecting nodes to the depot, especially at the beginning\n    depot_preference = np.ones_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        depot_preference[0, i] = 2.0  # Prefer edges connecting to the depot\n        depot_preference[i, 0] = 2.0\n        \n    # Combine factors with weights\n    heuristic_matrix = (0.5 * proximity + 0.3 * savings_matrix + 0.2 * depot_preference) * demand_factor\n\n    # Sparsify the matrix: Zero out unpromising edges\n    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20)  # Remove the bottom 20%\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Ensure that diagonal elements are zero\n    np.fill_diagonal(heuristic_matrix, 0)\n\n    return heuristic_matrix\n\n[Reflection]\nSavings calculation, explicit depot preference, and demand-based edge penalization improved heuristic performance.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}