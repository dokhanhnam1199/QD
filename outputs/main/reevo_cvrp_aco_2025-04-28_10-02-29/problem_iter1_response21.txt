```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for solving Capacitated Vehicle Routing Problem (CVRP)
    via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                    The return is of the same shape as the distance_matrix.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of customers (Clarke-Wright Savings)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Normalize distance and savings matrices
    normalized_distance = distance_matrix / np.max(distance_matrix) if np.max(distance_matrix) > 0 else np.zeros_like(distance_matrix)
    normalized_savings = savings_matrix / np.max(savings_matrix) if np.max(savings_matrix) > 0 else np.zeros_like(savings_matrix)
    
    # Consider demand compatibility:  edges between nodes with very high demands relative to capacity are penalized.
    demand_compatibility = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            demand_compatibility[i, j] = max(0, 1 - (demands[i] + demands[j]) / (2 * capacity)) # penalize if sum of demands close to exceeding capacity
    
    # Combine the heuristics
    heuristic_matrix = (0.5 * normalized_savings + 0.5 * demand_compatibility) / (0.01 + normalized_distance)  #Add small constant to avoid division by zero

    #Sparsify: set low probability edges to 0
    threshold = np.percentile(heuristic_matrix[np.triu_indices_from(heuristic_matrix, k=1)], 20)  # Keep top 80% edges
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure no connections to itself
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
