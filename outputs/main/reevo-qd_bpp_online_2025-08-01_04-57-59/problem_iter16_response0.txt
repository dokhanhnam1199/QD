```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, extending v1
    by further enhancing the non-linear rewards for both snug fits and high bin
    utilization, and adding an explicit bonus for perfect fits.

    This version aims to be even more aggressive in 'closing' bins by giving a
    stronger non-linear penalty for less full bins, and explicitly rewarding
    exact fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a more desirable placement.
    """
    # Tunable parameters for the heuristic
    # WEIGHT_FIT: Emphasizes finding a snug fit (minimizing post-placement remaining space).
    # WEIGHT_FULLNESS: Emphasizes putting items into bins that are already more full,
    #                  to help 'close' them and improve overall bin utilization.
    # FIT_EXPONENT: Makes the reward for very tight fits significantly higher (non-linear).
    # FULLNESS_EXPONENT: Makes the reward for very full bins significantly higher (non-linear).
    # PERFECT_FIT_BONUS: An additional large bonus for an exact fit.
    # EPSILON: A small value to prevent division by zero or handle near-zero values.
    WEIGHT_FIT = 2.5 # Slightly increased emphasis on snug fits
    WEIGHT_FULLNESS = 1.5 # Slightly increased emphasis on fuller bins
    FIT_EXPONENT = 2.5 # Increased non-linearity for snug fits
    FULLNESS_EXPONENT = 1.5 # New: non-linearity for bin fullness
    PERFECT_FIT_BONUS = 1000.0 # Explicit large bonus for a perfect fit
    EPSILON = 1e-9

    # Initialize priority scores. Bins that cannot fit will retain a score of 0.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the remaining space in each bin *after* placing the current item.
    potential_remaining_space = bins_remain_cap - item

    # Create a boolean mask for bins where the item can actually fit.
    # Using -EPSILON allows for slight floating point inaccuracies near zero.
    can_fit_mask = potential_remaining_space >= -EPSILON

    # Apply calculations only to bins where the item can fit
    if np.any(can_fit_mask):
        # Filter for only the bins that can fit the item
        fitting_potential_rem_space = potential_remaining_space[can_fit_mask]
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

        # 1. Best Fit Component (Aggressively Non-linear Reward for Tight Fits):
        # This part prioritizes bins that would have the smallest remaining capacity
        # after the item is placed. The higher exponent (FIT_EXPONENT) makes this
        # preference for tight fits more pronounced, strongly penalizing larger
        # remaining spaces and rewarding smaller ones.
        fit_score_component = 1.0 / ((fitting_potential_rem_space + EPSILON)**FIT_EXPONENT)

        # 2. Bin Fullness Component (Aggressively Maximizing Bin Efficiency/Utilization):
        # This part prioritizes bins that are already more utilized (i.e., have less
        # remaining capacity *before* the item is placed). By using FULLNESS_EXPONENT,
        # it makes the preference for more full bins much stronger, encouraging them to be 'closed'.
        fullness_score_component = 1.0 / ((fitting_bins_remain_cap + EPSILON)**FULLNESS_EXPONENT)

        # 3. Perfect Fit Bonus:
        # A significant, explicit bonus for bins where the item perfectly fills the remaining space.
        # This directly encourages exact fits, which are ideal for minimizing bin count.
        perfect_fit_mask = np.isclose(fitting_potential_rem_space, 0.0, atol=EPSILON)
        perfect_fit_bonus_component = np.zeros_like(fitting_potential_rem_space)
        perfect_fit_bonus_component[perfect_fit_mask] = PERFECT_FIT_BONUS

        # Combine the components using their respective weights and add the perfect fit bonus.
        priority_scores[can_fit_mask] = (
            WEIGHT_FIT * fit_score_component +
            WEIGHT_FULLNESS * fullness_score_component +
            perfect_fit_bonus_component
        )

    return priority_scores
```
