{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, implementing a Best-Fit heuristic.\n\n    For each bin, if the item fits, the priority is calculated such that a tighter\n    fit (leaving less remaining space in the bin) results in a higher priority score.\n    Bins where the item cannot fit are assigned a very low (negative infinity) priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity if the item were placed in each bin.\n    # A negative value indicates the item does not fit.\n    hypothetical_remaining = bins_remain_cap - item\n\n    # Initialize priority scores for all bins to a very low value.\n    # This ensures that bins that cannot fit the item are effectively deprioritized.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify which bins can actually accommodate the item.\n    # These are bins where the hypothetical_remaining capacity is non-negative.\n    can_fit_mask = hypothetical_remaining >= 0\n\n    # For bins where the item can fit, calculate their priority.\n    # In Best-Fit, we want to minimize the remaining space.\n    # To achieve this with a \"highest priority\" selection, we take the negative\n    # of the remaining space. A smaller positive remaining space (tight fit)\n    # will result in a larger (less negative, or even positive if it's a perfect fit)\n    # priority score.\n    # E.g., if remaining is 0.1, priority is -0.1. If remaining is 0.5, priority is -0.5.\n    # -0.1 is greater than -0.5, so the tighter fit gets higher priority.\n    priority_scores[can_fit_mask] = -hypothetical_remaining[can_fit_mask]\n\n    return priority_scores\n\n[Reflection]\nIntegrate item and bin properties; prioritize options that best fit and optimize remaining space to minimize waste.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}