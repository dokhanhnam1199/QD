```python
import numpy as np

# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.
# This is a common practice in normalized Bin Packing Problem contexts where
# item sizes and capacities are scaled between 0 and 1. If your problem
# uses different absolute capacities (e.g., 100, 500), this constant
# should ideally be passed as an argument or configured externally.
BIN_CAPACITY_ASSUMED = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using a strategy that strongly focuses on Best Fit while robustly
    encouraging the filling of already-started bins.

    This strategy refines the previous version by applying the 'current bin fill level'
    as a multiplicative boost to the 'best fit' score. This ensures that a tighter fit
    remains the primary driver for priority, but among bins with similar tightness,
    those that are already partially filled receive a proportionally higher priority.
    It effectively penalizes starting new, empty bins when existing, partially filled
    bins offer a reasonable fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for
                         calculating the current fill level.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit,
        significantly boosted by the bin's current (pre-placement) fill level.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit
    # (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    epsilon = 1e-9 # A small positive value to handle exact fits (0 remaining space)
                   # and prevent division by zero for very tight fits.

    # --- Component 1: Best Fit (Tightness) ---
    # This component provides the core 'tightest fit' preference. It assigns a very high
    # score for bins where the item fits snugly (potential_remaining_space is small),
    # strongly prioritizing exact or near-exact fits.
    # We invert the remaining space to ensure smaller remaining space yields higher score.
    best_fit_component = np.zeros_like(bins_remain_cap, dtype=float)
    best_fit_component[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)

    # --- Component 2: Current Bin Fill Level (Utilization Bias) ---
    # This component quantifies how much a bin is currently filled (before placing the item).
    # It ranges from 0 (empty bin, bins_remain_cap = BIN_CAPACITY_ASSUMED) to 1 (full bin).
    # This acts as a multiplier to encourage continuing to fill existing bins.
    current_fill_level = np.zeros_like(bins_remain_cap, dtype=float)
    # Calculate current fill level only for bins that can fit the item
    current_fill_level[can_fit_mask] = (BIN_CAPACITY_ASSUMED - bins_remain_cap[can_fit_mask]) / BIN_CAPACITY_ASSUMED

    # --- Combine Components: Multiplicative Boost ---
    # The total priority score is the best_fit_component multiplied by (1 + current_fill_level).
    # This means:
    # - If current_fill_level is 0 (empty bin), the boost is 1x (no boost from fill level).
    # - If current_fill_level is 0.5 (half full), the boost is 1.5x.
    # - If current_fill_level is 1.0 (nearly full), the boost is 2.0x.
    # This approach ensures that the fundamental 'tight fit' priority is preserved
    # (very tight fits still yield very high scores), but existing, fuller bins
    # get a substantial proportional advantage over empty bins for similarly
    # 'loose' or 'average' fits.
    priority_scores[can_fit_mask] = best_fit_component[can_fit_mask] * (1.0 + current_fill_level[can_fit_mask])

    return priority_scores
```
