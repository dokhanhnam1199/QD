```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a refined Best Fit heuristic with distinct priority tiers.

    This version improves continuity and robustness of priority assignment
    compared to v1, ensuring clear separation of tiers while maintaining
    the Best Fit principle within each valid tier. It prioritizes:
    1. Perfect fits (remaining capacity is exactly 0).
    2. Near-perfect fits (remaining capacity is small and positive, below a threshold).
    3. Standard best fits (smallest positive remaining capacity beyond the near-perfect threshold).
    Bins that cannot fit the item receive the lowest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Calculate potential remaining capacity if the item were placed in each bin
    potential_remaining = bins_remain_cap - item

    # Initialize scores for all bins to a very low value (-np.inf).
    # Bins that cannot fit the item will retain this value, ensuring they are never chosen.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Define constants for distinct priority tiers.
    # These base scores ensure clear numerical separation between the tiers.
    # The actual score within a tier will be (TIER_BASE_SCORE - potential_remaining).
    # This means smaller potential_remaining will result in a higher score within a given tier.
    PERFECT_FIT_TIER_BASE_SCORE = 3.0  # Highest tier for perfect fits
    NEAR_PERFECT_TIER_BASE_SCORE = 2.0  # Second highest tier for near-perfect fits
    STANDARD_BF_TIER_BASE_SCORE = 1.0  # Third tier for general Best Fit

    # Define threshold for what constitutes a "near-perfect" fit.
    # For example, if bin capacities are normalized to 1.0, 0.05 means 5% of bin capacity.
    near_perfect_threshold = 0.05

    # --- Apply scoring logic for bins that can fit the item ---

    # Mask for bins where the item *can* fit (potential_remaining is non-negative)
    can_fit_mask = potential_remaining >= 0

    if not np.any(can_fit_mask):
        # If no bins can fit the item, all scores remain -np.inf.
        return scores

    # 1. Perfect Fit: If potential_remaining is exactly 0
    perfect_fit_mask = can_fit_mask & (potential_remaining == 0)
    # Score is simply the highest base score, as -potential_remaining is 0.
    scores[perfect_fit_mask] = PERFECT_FIT_TIER_BASE_SCORE

    # 2. Near-Perfect Fit: If 0 < potential_remaining <= near_perfect_threshold
    #    These bins are prioritized higher than standard Best Fit bins but lower than perfect fits.
    near_perfect_mask = can_fit_mask & (potential_remaining > 0) & (potential_remaining <= near_perfect_threshold)
    scores[near_perfect_mask] = NEAR_PERFECT_TIER_BASE_SCORE - potential_remaining[near_perfect_mask]

    # 3. Standard Best Fit: If potential_remaining > near_perfect_threshold
    #    These are the general Best Fit choices, where smaller remaining capacity is better.
    standard_bf_mask = can_fit_mask & (potential_remaining > near_perfect_threshold)
    scores[standard_bf_mask] = STANDARD_BF_TIER_BASE_SCORE - potential_remaining[standard_bf_mask]

    # The chosen base scores ensure the following strict priority order:
    # - Perfect fits (score = 3.0)
    # - Near-perfect fits (e.g., for remaining 0.001 to 0.05, scores are 1.999 down to 1.95)
    # - Standard best fits (e.g., for remaining 0.051 to 1.0, scores are 0.949 down to 0.0)
    # - Bins that cannot fit (score = -inf)

    return scores
```
