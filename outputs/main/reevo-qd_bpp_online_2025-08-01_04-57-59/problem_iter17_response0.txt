```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, combining tight fit and bin fullness.

    This strategy aims to:
    1. Aggressively reward near-perfect fits to minimize fragmentation (Best Fit-like).
    2. Strategically consolidate items into existing, already relatively full bins,
       to improve overall bin utilization (encouraging "First Fit Decreasing"-like filling within bins).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a more desirable bin.
    """
    # Assumption for BIN_CAPACITY:
    # For the 'bin fullness' component, we need the total capacity of a bin.
    # As this is not passed as an argument, we assume a standard bin capacity.
    # In many Bin Packing Problem variations, items and capacities are normalized,
    # so a common choice for BIN_CAPACITY is 1.0. If items or bins can exceed 1.0,
    # this constant should be adjusted or passed as an explicit argument.
    BIN_CAPACITY = 1.0 
    
    # Heuristic tuning parameters
    epsilon = 1e-9 # Small value to prevent division by zero for perfect fits and stabilize scores
    tight_fit_exponent = 2.0 # Exponent to make small remaining spaces (tight fits) disproportionately attractive
    fullness_exponent = 2.0 # Exponent to make bins that are already relatively full disproportionately attractive
    fullness_weight = 0.5 # Weight of the fullness component relative to the tight fit component

    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0 for bins that cannot fit the item.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Apply calculations only to bins where the item fits
    if np.any(can_fit_mask): # Proceed only if at least one bin can accommodate the item
        
        # --- Component 1: Tight Fit Score (aggressive Best Fit) ---
        # This component heavily rewards bins that would have very little space left after placing the item.
        # The inverse relationship combined with an exponent (tight_fit_exponent) makes this reward non-linear
        # and very aggressive for near-perfect fits.
        tight_fit_component = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)**tight_fit_exponent

        # --- Component 2: Bin Fullness Score (consolidation strategy) ---
        # This component rewards bins that are already relatively full, promoting consolidation
        # and preventing unnecessary opening of new bins or leaving many partially filled bins.
        current_filled_space = BIN_CAPACITY - bins_remain_cap[can_fit_mask]
        
        # Ensure filled space is not negative due to floating point inaccuracies, though it should be handled
        # by BIN_CAPACITY consistency.
        current_filled_space = np.maximum(current_filled_space, 0)
        
        bin_fullness_ratio = current_filled_space / BIN_CAPACITY
        
        # Apply an exponent (fullness_exponent) to disproportionately reward bins that are already quite full.
        fullness_component = bin_fullness_ratio**fullness_exponent

        # --- Combine the scores ---
        # The overall priority score is a weighted sum of the tight fit and bin fullness components.
        # The tight_fit_component typically yields much larger values, ensuring that excellent fits
        # are always highly prioritized. The fullness_weight scales the fullness_component so it acts
        # as a valuable secondary criterion or tie-breaker, guiding items towards fuller bins among
        # similarly fitting options.
        priority_scores[can_fit_mask] = tight_fit_component + (fullness_weight * fullness_component)
        
    return priority_scores
```
