```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin, incorporating
    an amplified Best Fit strategy with a preference for already utilized bins.

    This strategy aims to:
    1.  Minimize fragmentation by choosing bins that leave the smallest possible
        remaining capacity (Best Fit principle).
    2.  Provide significantly higher rewards for "near-perfect" fits, making them
        highly attractive options. This is achieved through a non-linear (power)
        scaling of the best-fit component.
    3.  Strongly favor placing items into bins that are already partially filled/highly
        utilized, over equally well-fitting empty bins. This helps to consolidate items
        and reduce the number of bins used, implicitly preparing for future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit and/or higher bin utilization.
    """
    # --- Tunable Parameters ---
    # Used for the Best Fit component:
    EPSILON_FIT = 1e-9  # Small positive value to prevent division by zero when an item
                        # perfectly fills a bin (potential_remaining_space = 0).
    POWER_FIT = 2.0     # Exponent to amplify the reward for tight fits.
                        # POWER_FIT=1.0 is the inverse linear reward from priority_v1.
                        # Higher values (e.g., 2.0, 3.0) make near-perfect fits dramatically
                        # more attractive compared to less tight fits.

    # Used for the Utilization Preference component:
    EPSILON_UTIL = 1e-9 # Small positive value to prevent division by zero if a bin's
                        # remaining capacity is extremely small or zero (i.e., bin is full).
    ALPHA_UTIL = 0.5    # Weight for the utilization preference component.
                        # Controls how much we favor already utilized bins.
                        # 0 means no preference for utilization; higher values mean stronger preference.

    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Get the indices of bins where the item can fit
    fitting_bins_indices = np.where(can_fit_mask)[0]

    # If no bins can fit the item, return an array of zeros
    if fitting_bins_indices.size == 0:
        return priority_scores

    # Extract relevant data for only the bins where the item can fit
    fitting_potential_remaining_space = potential_remaining_space[fitting_bins_indices]
    fitting_bins_current_cap = bins_remain_cap[fitting_bins_indices]

    # 1. Best Fit Component: Rewards small remaining space, amplified by POWER_FIT.
    # This heavily prioritizes 'snug' fits, especially those very close to perfect.
    best_fit_component = 1.0 / ((fitting_potential_remaining_space + EPSILON_FIT)**POWER_FIT)

    # 2. Utilization Preference Component: Rewards bins that are already more utilized
    # (i.e., have less remaining capacity *before* adding the item).
    # This helps to consolidate items into existing bins rather than opening new ones
    # or using mostly empty bins, promoting higher bin utilization.
    utilization_component = 1.0 / (fitting_bins_current_cap + EPSILON_UTIL)

    # Combine the components: An additive combination allows both the tightness of fit
    # and the existing bin utilization to contribute to the overall priority score.
    priority_scores[fitting_bins_indices] = best_fit_component + ALPHA_UTIL * utilization_component

    return priority_scores
```
