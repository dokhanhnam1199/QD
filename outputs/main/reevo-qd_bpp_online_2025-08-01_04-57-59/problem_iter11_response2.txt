```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit-like strategy,
    with an added strong bias towards bins that are already highly utilized, to minimize fragmentation.

    This strategy combines two goals:
    1.  **Best Fit (minimize remaining space):** Aims to leave the smallest possible remaining capacity
        in a bin after placing the item, which helps in 'snugly' fitting items and preserving
        larger empty spaces in other bins for future larger items. This is achieved by penalizing
        larger `potential_remaining_space`.
    2.  **Favor High Utilization:** Strongly prefers placing items into bins that are already
        more utilized (have less remaining capacity before the item is placed). This helps in
        consolidating items and minimizing the number of partially filled bins, thus reducing fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit AND/OR
        a bin that is already more utilized.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Epsilon to prevent division by zero and provide a large (but finite) score for perfect fits.
    epsilon = 1e-9

    # Apply calculations only to the bins where the item fits.
    if np.any(can_fit_mask):
        # Retrieve the relevant remaining capacities and potential remaining spaces for fitting bins.
        current_bins_remain_cap_fitting = bins_remain_cap[can_fit_mask]
        potential_remaining_space_fitting = potential_remaining_space[can_fit_mask]

        # Introduce a penalty factor based on the bin's current remaining capacity.
        # Bins that have a large 'current_bins_remain_cap_fitting' (i.e., are relatively empty)
        # will have a larger penalty_factor.
        # This factor will effectively inflate the 'potential_remaining_space' for less utilized bins,
        # thereby significantly decreasing their final priority score.
        # This strongly biases the selection towards bins that are already more full.
        # The '1 + ...' ensures the factor is always >= 1, meaning it only penalizes
        # (or at least doesn't reward) more empty bins.
        # The specific scaling assumes that bins_remain_cap are on a sensible scale (e.g., 0 to max_capacity).
        penalty_factor = (1 + current_bins_remain_cap_fitting)

        # Calculate a modified potential_remaining_space for priority scoring.
        # This new value effectively incorporates both the Best Fit criterion and the
        # 'favor high utilization' criterion.
        modified_potential_remaining_space = potential_remaining_space_fitting * penalty_factor

        # Assign priority scores: 1.0 / (modified_potential_remaining_space + epsilon).
        # A smaller modified_potential_remaining_space (due to a tighter fit AND/OR
        # the bin already being significantly utilized) results in a higher priority score.
        priority_scores[can_fit_mask] = 1.0 / (modified_potential_remaining_space + epsilon)

    return priority_scores
```
