```python
import numpy as np

# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.
BIN_CAPACITY_ASSUMED = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using a strategy that balances tight fits with the preference for filling
    already-started bins, aiming to optimize overall bin utilization and
    minimize the number of open bins.

    This strategy refines the 'priority_v1' approach by using a more
    linearly scaled tightness score and an explicitly weighted 'current bin fill level'
    component, making the balance between "best fit" and "filling existing bins"
    more controllable and effective. It calculates priority based on:
    1. How tightly the item fits into the bin (minimizing remaining space).
    2. How full the bin currently is (favoring already-used bins).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for
                         calculating the current fill level.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a better choice.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit
    can_fit_mask = potential_remaining_space >= 0

    # Define a weight for the current bin fill level component.
    # A higher value means current fill level has a stronger influence.
    # Setting it to 2.0 makes the 'fill level' component potentially more impactful
    # than the 'tightness' component, encouraging closing existing bins more aggressively.
    WEIGHT_FILL_LEVEL = 2.0

    # --- Component 1: Tightness of Fit (Best Fit) ---
    # This component scores tightness by penalizing larger remaining space.
    # A perfect fit (potential_remaining_space == 0) gets a score of 0.
    # A looser fit (e.g., potential_remaining_space = 0.5) gets -0.5.
    # The goal is to maximize this component (i.e., make it closer to 0 or less negative).
    tightness_component = np.zeros_like(bins_remain_cap, dtype=float)
    tightness_component[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    # --- Component 2: Current Bin Fill Level (Utilization Bias) ---
    # This component encourages using bins that are already partially filled.
    # It's calculated as the proportion of the bin's total capacity that is currently
    # occupied. This value ranges from 0 (empty bin) to 1.0 (full bin).
    current_fill_component = np.zeros_like(bins_remain_cap, dtype=float)
    current_fill_component[can_fit_mask] = (BIN_CAPACITY_ASSUMED - bins_remain_cap[can_fit_mask]) / BIN_CAPACITY_ASSUMED

    # --- Combine Components ---
    # The total priority score is the sum of the tightness component and the weighted
    # current fill component.
    # By using negative for tightness (higher is better, closer to 0) and positive
    # for fill level (higher is better), they contribute additively to the overall score.
    # The WEIGHT_FILL_LEVEL allows explicit tuning of how much 'filling existing bins'
    # influences the decision relative to 'tightness of fit'. This can lead to
    # fewer open bins overall.
    priority_scores[can_fit_mask] = tightness_component[can_fit_mask] + (WEIGHT_FILL_LEVEL * current_fill_component[can_fit_mask])

    return priority_scores
```
