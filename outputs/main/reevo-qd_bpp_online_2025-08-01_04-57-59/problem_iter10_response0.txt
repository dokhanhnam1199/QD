```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic with distinct priority tiers for
    perfect fits, near-perfect fits, and general best fits.

    This strategy explicitly assigns the highest priority to bins that result
    in a perfect fit (remaining capacity of 0). It then gives a significant
    bonus to 'near-perfect' fits (where the remaining capacity is very small
    but positive), ensuring these are preferred over general best fits.
    For all other valid fits, it reverts to the standard Best Fit principle,
    prioritizing the bin that leaves the smallest positive remaining capacity.
    This aims to minimize overall fragmentation and improve packing density
    by strongly encouraging the complete or almost complete filling of bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Calculate potential remaining capacity if the item were placed in each bin
    potential_remaining = bins_remain_cap - item

    # Initialize scores for all bins to a base value.
    # Bins that cannot fit the item will eventually get -np.inf.
    scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Define thresholds and constants for scoring tiers
    # These values define the distinct priority levels.
    PERFECT_FIT_SCORE = 1000.0  # Score for a perfect fit (remaining == 0)
    NEAR_PERFECT_BONUS_MAGNITUDE = 100.0  # Maximum bonus for a near-perfect fit (as remaining approaches 0)
    # Threshold for what constitutes a "near-perfect" fit.
    # Assuming capacities are normalized, e.g., to 1.0, 0.05 means 5% of bin capacity.
    near_perfect_threshold = 0.05

    # --- Apply scoring logic based on potential_remaining for bins that can fit ---

    # 1. Perfect Fit: If potential_remaining is exactly 0
    perfect_fit_mask = potential_remaining == 0
    scores[perfect_fit_mask] = PERFECT_FIT_SCORE

    # 2. Near-Perfect Fit: If 0 < potential_remaining <= near_perfect_threshold
    near_perfect_mask = (potential_remaining > 0) & (potential_remaining <= near_perfect_threshold)
    if np.any(near_perfect_mask):
        # Calculate a bonus that scales linearly from NEAR_PERFECT_BONUS_MAGNITUDE (for remaining close to 0)
        # down to 0 (for remaining at the threshold).
        # This bonus is added to the standard Best Fit score (-potential_remaining).
        scaled_bonus = NEAR_PERFECT_BONUS_MAGNITUDE * (1 - potential_remaining[near_perfect_mask] / near_perfect_threshold)
        scores[near_perfect_mask] = scaled_bonus - potential_remaining[near_perfect_mask]

    # 3. Standard Best Fit: If potential_remaining > near_perfect_threshold
    standard_bf_mask = potential_remaining > near_perfect_threshold
    scores[standard_bf_mask] = -potential_remaining[standard_bf_mask] # Maximize score by minimizing remaining

    # Finally, for any bin where the item simply cannot fit (potential_remaining < 0 or bins_remain_cap < item),
    # assign a very low (negative infinity) score to ensure they are never chosen.
    cannot_fit_mask = bins_remain_cap < item
    scores[cannot_fit_mask] = -np.inf

    return scores
```
