```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a Best Fit-like strategy that prioritizes 'snugness'
    (leaving the smallest possible remaining capacity) to efficiently utilize bins
    and preserve larger capacities in other bins for future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a very low (negative infinity)
        priority score, effectively ruling them out during selection.
        For bins that can fit, a higher score (less negative) indicates a 'tighter' fit
        (smaller remaining capacity). An exact fit (0 remaining capacity) receives the highest score of 0.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores for all bins to negative infinity.
    # This ensures that bins incapable of holding the item are always ranked lowest.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, assign a priority based on the negative of the remaining space.
    # A smaller remaining space results in a larger (less negative) priority score.
    # For example:
    #   - If remaining space is 5, score is -5.
    #   - If remaining space is 1, score is -1.
    #   - If remaining space is 0 (a perfect fit), score is 0.
    # This direct mapping ensures that 'snugger' fits (smaller positive remaining space or exact fit)
    # receive higher priority scores, aligning with the Best Fit heuristic and
    # the goal of preserving larger capacities in other bins.
    priority_scores[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priority_scores
```
