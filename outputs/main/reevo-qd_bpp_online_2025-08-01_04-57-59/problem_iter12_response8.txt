```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using a negative exponential
    reward for remaining capacity.

    This strategy implements an enhanced Best Fit approach by strongly prioritizing near-perfect
    fits. It applies an exponentially decaying reward as the potential remaining space increases,
    thereby aggressively favoring bins that result in very small remaining capacity after placing
    the item. This approach minimizes fragmentation and maximizes bin utilization more effectively
    than a simple linear or inverse relationship.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score (approaching 1) indicates a 'tighter' fit
        (smaller remaining capacity), with a strong emphasis on perfect or very tight fits.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, we assign a priority using a negative exponential.
    # The exponential function e^(-alpha * x) ensures that as x (potential_remaining_space)
    # approaches 0, the score approaches 1 (perfect fit), and as x increases, the score
    # rapidly decays towards 0, strongly penalizing larger remaining spaces.
    # The 'alpha' parameter controls the steepness of this decay. A higher alpha means
    # a stronger preference for tighter fits, making the drop-off in score more aggressive
    # as remaining space increases. A value like 5.0 typically provides a significant
    # differentiation.
    alpha = 5.0 # Sensitivity parameter for the exponential decay. Tune this for desired aggression.

    # Apply the negative exponential calculation only to the bins where the item fits.
    # This ensures that bins offering a near-perfect fit receive a disproportionately
    # higher score, reflecting the preference for high utilization and reduced fragmentation.
    priority_scores[can_fit_mask] = np.exp(-alpha * potential_remaining_space[can_fit_mask])

    return priority_scores
```
