```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic with distinct priority tiers, and
    an additional preference for more-filled bins within the standard
    Best Fit tier.

    This strategy explicitly assigns the highest priority to bins that result
    in a perfect fit (remaining capacity of 0), aiming to fully close bins.
    It then gives a significant bonus to 'near-perfect' fits (where the
    remaining capacity is very small but positive), ensuring these are preferred
    over general best fits to minimize small fragments.
    For all other valid fits (the standard Best Fit range), it primarily
    prioritizes the bin that leaves the smallest positive remaining capacity.
    Additionally, within this standard Best Fit tier, it introduces a secondary
    preference: if two bins offer similar best-fit remaining capacities,
    the one that was *already more filled* (i.e., had a smaller initial
    bins_remain_cap) is subtly preferred. This aims to consolidate items into
    existing, partially filled bins before utilizing less-filled ones,
    further optimizing bin utilization and potentially reducing the total
    number of active bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Calculate potential remaining capacity if the item were placed in each bin
    potential_remaining = bins_remain_cap - item

    # Initialize scores for all bins to a base value.
    # Bins that cannot fit the item will eventually get -np.inf.
    scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Define thresholds and constants for scoring tiers
    PERFECT_FIT_SCORE = 1000.0  # Score for a perfect fit (remaining == 0)
    NEAR_PERFECT_BONUS_MAGNITUDE = 100.0  # Maximum bonus for a near-perfect fit
    # Threshold for what constitutes a "near-perfect" fit.
    # Assuming capacities are normalized, e.g., to 1.0, 0.05 means 5% of bin capacity.
    near_perfect_threshold = 0.05

    # A small factor to slightly penalize bins with larger initial remaining capacity
    # (i.e., less filled bins) within the standard Best Fit tier.
    # This acts as a tie-breaker or secondary preference. It must be small enough
    # not to overturn the primary Best Fit objective (-potential_remaining).
    INITIAL_FILL_PREFERENCE_FACTOR = 0.01

    # --- Apply scoring logic based on potential_remaining for bins that can fit ---

    # 1. Perfect Fit: If potential_remaining is exactly 0
    perfect_fit_mask = potential_remaining == 0
    scores[perfect_fit_mask] = PERFECT_FIT_SCORE

    # 2. Near-Perfect Fit: If 0 < potential_remaining <= near_perfect_threshold
    near_perfect_mask = (potential_remaining > 0) & (potential_remaining <= near_perfect_threshold)
    if np.any(near_perfect_mask):
        # Calculate a bonus that scales linearly from NEAR_PERFECT_BONUS_MAGNITUDE (for remaining close to 0)
        # down to 0 (for remaining at the threshold).
        # This bonus is added to the standard Best Fit score (-potential_remaining).
        scaled_bonus = NEAR_PERFECT_BONUS_MAGNITUDE * (1 - potential_remaining[near_perfect_mask] / near_perfect_threshold)
        scores[near_perfect_mask] = scaled_bonus - potential_remaining[near_perfect_mask]

    # 3. Standard Best Fit with Secondary Fill Preference: If potential_remaining > near_perfect_threshold
    #    For these, we want to minimize potential_remaining (standard Best Fit), but also subtly prefer
    #    bins that were already more filled (i.e., had smaller bins_remain_cap).
    standard_bf_mask = potential_remaining > near_perfect_threshold
    if np.any(standard_bf_mask):
        # Base Best Fit score: maximize by minimizing potential_remaining
        base_bf_score = -potential_remaining[standard_bf_mask]
        # Secondary preference: penalize based on initial remaining capacity.
        # A smaller bins_remain_cap (more filled bin) results in a smaller penalty, thus a higher score.
        fill_preference_penalty = INITIAL_FILL_PREFERENCE_FACTOR * bins_remain_cap[standard_bf_mask]
        scores[standard_bf_mask] = base_bf_score - fill_preference_penalty

    # Finally, for any bin where the item simply cannot fit (potential_remaining < 0),
    # assign a very low (negative infinity) score to ensure they are never chosen.
    cannot_fit_mask = potential_remaining < 0
    scores[cannot_fit_mask] = -np.inf

    return scores
```
