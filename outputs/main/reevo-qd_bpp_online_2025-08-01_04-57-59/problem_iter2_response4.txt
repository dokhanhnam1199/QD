```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Worst Fit heuristic.

    This function implements the Worst Fit (WF) heuristic. It prioritizes bins that,
    after placing the item, would result in the largest remaining capacity.
    This strategy aims to keep the "most empty" bins available for potentially
    larger future items or to spread items more evenly across existing bins,
    rather than compacting them into a few bins. This can be beneficial in scenarios
    where a wider distribution of items is desired or if there's a risk of
    bins becoming "almost full" but not quite, hindering future large items.

    A very low priority (-infinity) is assigned to bins where the item does not fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher score means higher priority.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value here means the item does not fit.
    potential_leftover = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item cannot fit will never be selected
    # unless no other bin is available (which would typically trigger opening a new bin).
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits.
    # An item fits if the potential remaining capacity is non-negative.
    fitting_bins_mask = potential_leftover >= 0

    # For bins where the item fits, set the priority to the leftover space itself.
    # To implement Worst Fit (maximize leftover space), we directly use the
    # potential remaining capacity as the priority score.
    # Maximizing this priority score will naturally pick the bin with the largest
    # positive leftover space, thus implementing Worst Fit.
    priority_scores[fitting_bins_mask] = potential_leftover[fitting_bins_mask]

    return priority_scores
```
