```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, extending the Best Fit
    strategy by additionally favoring bins that are already closer to being full.

    This strategy aims to:
    1. Minimize the remaining capacity in a bin after placing the item (Best Fit principle),
       thereby creating 'tight fits'.
    2. Prioritize bins that were already more utilized (had less remaining capacity)
       before the item was placed. This explicitly promotes 'closing' bins faster and
       reducing the number of active, partially filled bins, which helps optimize bin
       utilization and reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a combination of a 'tighter' fit
        AND a bin that was already more utilized.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0 for bins that cannot fit or have no priority.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # A small positive value to handle exact fits (0 remaining space) and to prevent
    # division by zero if bins_remain_cap somehow becomes zero (though valid bins should be > 0).
    epsilon = 1e-9

    # Apply the compound priority calculation only to the bins where the item fits.
    # The priority score is a product of two terms:
    # 1. Best Fit component: `1.0 / (potential_remaining_space + epsilon)`
    #    This term gives a higher score for smaller remaining space after item placement,
    #    strongly favoring exact fits (where potential_remaining_space is 0).
    # 2. Bin Fullness component: `1.0 / (bins_remain_cap + epsilon)`
    #    This term gives a higher score for bins that were already closer to being full
    #    (i.e., had a smaller `bins_remain_cap`). This biases selection towards bins that are
    #    already significantly utilized, helping to "finish them off" and reduce open bins.
    # The multiplication amplifies the preference for bins that simultaneously offer a tight
    # fit for the current item AND were already near capacity.
    priority_scores[can_fit_mask] = (1.0 / (potential_remaining_space[can_fit_mask] + epsilon)) * \
                                    (1.0 / (bins_remain_cap[can_fit_mask] + epsilon))

    return priority_scores
```
