```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add an item to each bin, combining
    a "tight fit" strategy with a "bin fullness" strategy using non-linear scoring.

    This strategy aggressively rewards near-perfect fits to minimize fragmentation
    and strategically consolidates items into existing, already fuller bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         Assumes bins have a maximum capacity of 1.0 for the
                         'bin fullness' calculation (common in normalized BPP).

    Returns:
        Array of same size as bins_remain_cap with priority score for each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a more desirable bin
        (due to a combination of tight fit and existing fullness).
    """
    # --- Tunable Parameters ---
    # Epsilon to prevent division by zero for perfect fits (potential_remaining_space = 0).
    epsilon = 1e-9

    # Power for the tight fit component. A higher power (e.g., 2.0) makes the reward
    # for very small remaining space exponentially more significant.
    tight_fit_power = 2.0

    # --- Calculation ---

    # 1. Calculate potential remaining space if the item were placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores to 0. Bins that cannot fit the item will retain this score.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Only process bins where the item can fit.
    if np.any(can_fit_mask):
        fitting_potential_remaining_space = potential_remaining_space[can_fit_mask]
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

        # Component 1: Tight Fit Score (TFS)
        # This rewards bins that leave very little space remaining after placing the item (snug fit).
        # The inverse power function (1 / x^power) aggressively assigns higher scores
        # to smaller remaining capacities (closer to 0).
        tight_fit_scores = 1.0 / (fitting_potential_remaining_space**tight_fit_power + epsilon)

        # Component 2: Bin Fullness Score (BFS)
        # This rewards bins that are already relatively full. This encourages consolidating
        # items into existing, used bins rather than starting new, empty ones.
        # `(1.0 - fitting_bins_remain_cap)` represents the current occupancy of the bin
        # (0 for empty, 1 for full, assuming initial bin capacity is 1.0).
        # `np.exp` provides a strong non-linear boost for higher occupancy levels.
        bin_fullness_scores = np.exp(1.0 - fitting_bins_remain_cap)

        # Combined Score: Multiply the two components.
        # This ensures that a bin receives a high priority score only if it offers
        # both a tight fit AND is already relatively full. This multiplicative
        # combination inherently provides a non-linear weighting, amplifying the
        # effect when both conditions are met.
        priority_scores[can_fit_mask] = tight_fit_scores * bin_fullness_scores

    return priority_scores
```
