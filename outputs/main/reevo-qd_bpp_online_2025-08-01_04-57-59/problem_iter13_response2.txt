```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, incorporating Best Fit with
    a strong bias towards bins that are already partially utilized, and using an aggressively
    non-linear reward for tight fits.

    This strategy aims to leave the smallest possible remaining capacity (Best Fit) while also
    prioritizing filling up bins that are already in use, to maximize overall bin efficiency and
    reduce the need to open new bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        A higher score indicates a more preferred bin.
    """
    # Define constants for the heuristic
    # Assumes bins have a maximum capacity of 1.0 (normalized).
    # This is crucial for calculating a meaningful 'current_utilization'.
    BIN_MAX_CAPACITY = 1.0
    epsilon = 1e-9           # Small value to prevent division by zero for perfect fits (remaining space = 0)
    power = 2                # Exponent for the non-linear reward for tight fits (makes it more aggressive)
    utilization_weight = 5.0 # Weight for the current bin utilization component in the priority score

    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, calculate their priority score.
    if np.any(can_fit_mask): # Only proceed if there are any bins that can fit the item
        # --- Component 1: Aggressive Best Fit Score ---
        # This component aggressively rewards tight fits. A smaller potential_remaining_space
        # (closer to a perfect fit) results in a disproportionately higher score due to the 'power' exponent.
        # This addresses "aggressively prioritize tight and near-perfect fits using non-linear rewards".
        best_fit_component = (1.0 / (potential_remaining_space[can_fit_mask] + epsilon))**power

        # --- Component 2: Current Bin Utilization Bonus ---
        # This component rewards bins that are already partially utilized. This encourages filling
        # up existing bins before opening new ones, which contributes to "maximize bin efficiency"
        # and "strategically preserving capacity" in other, larger bins.
        # Current utilization is (initial_capacity - current_remaining_capacity) / initial_capacity.
        # Assuming BIN_MAX_CAPACITY is the initial capacity.
        current_utilization = (BIN_MAX_CAPACITY - bins_remain_cap[can_fit_mask]) / BIN_MAX_CAPACITY
        utilization_component = utilization_weight * current_utilization

        # --- Combined Priority Score ---
        # The total priority is an additive combination of the aggressive best fit score and
        # the utilization bonus. This balances finding tight fits with the desire to consolidate
        # items into already-started bins.
        priority_scores[can_fit_mask] = best_fit_component + utilization_component

    return priority_scores
```
