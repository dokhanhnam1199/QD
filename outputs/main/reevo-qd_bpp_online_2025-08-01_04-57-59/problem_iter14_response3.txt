```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit
    strategy augmented with a preference for more utilized bins.

    This strategy aims to:
    1.  Place the item in a bin where it fits snugly (minimizing remaining space).
        This is the primary Best Fit component, which typically leads to efficient packing.
    2.  Give a higher priority to bins that are already partially filled. This secondary
        component encourages the completion of existing bins before opening new ones,
        thereby potentially reducing the total number of bins used by consolidating items.
        A new (empty) bin will only be chosen if it offers a significantly superior
        'snug fit' compared to existing, partially filled bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         It is assumed that all bins initially have a total capacity of 1.0
                         (or are normalized) to correctly derive their current fill level.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a more preferred placement.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores for all bins to 0. Bins that cannot fit the item
    # or are not considered for other reasons will retain this default score.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    # A bin can fit the item if the potential remaining space is non-negative.
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, calculate two components for the priority score:

    # 1. Best Fit Component: Rewards tight fits (i.e., small potential_remaining_space).
    #    A small epsilon is added to the denominator to prevent division by zero in case of
    #    an exact fit (potential_remaining_space = 0). This also results in a very high
    #    score for exact fits, making them highly desirable.
    epsilon = 1e-9

    best_fit_component = np.zeros_like(bins_remain_cap, dtype=float)
    best_fit_component[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)

    # 2. Bin Utilization Component: Rewards bins that are already more utilized (i.e., fuller).
    #    Assuming a normalized total bin capacity of 1.0, the current fill level of a bin
    #    is (1.0 - bins_remain_cap). A bin with 0.5 remaining capacity is 0.5 utilized.
    #    A bin with 1.0 remaining capacity (empty) is 0.0 utilized.
    current_fill_level = 1.0 - bins_remain_cap

    # Combine the two components.
    # The Best Fit component typically yields much larger values and will primarily
    # drive the selection. The Bin Utilization component acts as a valuable secondary
    # factor, providing a boost for already-used bins, especially when multiple bins
    # offer similar Best Fit scores. This prioritizes completing existing bins.
    priority_scores[can_fit_mask] = best_fit_component[can_fit_mask] + current_fill_level[can_fit_mask]

    return priority_scores
```
