```python
import numpy as np

# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.
# This is a common practice in normalized Bin Packing Problem contexts where
# item sizes and capacities are scaled between 0 and 1. If your problem
# uses different absolute capacities (e.g., 100, 500), this constant
# should ideally be passed as an argument or configured externally.
BIN_CAPACITY_ASSUMED = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a strategy that explicitly prioritizes:
    1. Exact fits (most preferred, regardless of bin state).
    2. Consolidating into existing (partially filled) bins, with a preference
       for tighter fits among them.
    3. Opening new (empty) bins, with a preference for tighter fits among them.

    This function combines Best Fit logic with a strong bias towards utilizing
    already-started bins before considering new ones, unless an exact fit
    is available in a new bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        A higher score indicates a more preferred bin.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores to 0. Bins that cannot fit will retain this score.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit
    can_fit_mask = potential_remaining_space >= 0

    epsilon = 1e-9 # A small positive value to prevent division by zero for exact fits.

    # --- Component 1: Best Fit (Tightness) ---
    # This component provides the core 'tightest fit' preference. It assigns a high
    # score for bins where the item fits snugly (potential_remaining_space is small).
    # Exact fits (potential_remaining_space = 0) will result in a very large score (1/epsilon).
    best_fit_component = np.zeros_like(bins_remain_cap, dtype=float)
    # Apply 1 / (remaining_space + epsilon) for bins that can fit
    best_fit_component[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)

    # --- Component 2: Consolidation Bias (Prefer Existing Bins) ---
    # A substantial boost is added to the priority of bins that are already partially filled.
    # This ensures that, for non-exact fits, existing bins are strongly preferred over new ones.
    # This constant should be large enough to typically overcome the difference in
    # `best_fit_component` between an existing bin and an empty bin, unless the empty bin
    # offers an exact fit (which results in `1/epsilon`, far greater than this boost).
    # For example, if min item size is 0.01, max 1/x for non-exact fit is 1/0.01 = 100.
    # A boost of 1000 ensures existing bins (BestFit + 1000) generally outscore new bins (BestFit).
    PRIORITY_BOOST_FOR_EXISTING_BIN = 1000.0

    # Identify bins that are currently empty vs. partially filled.
    is_empty_bin_mask = (bins_remain_cap == BIN_CAPACITY_ASSUMED)
    is_not_empty_bin_mask = ~is_empty_bin_mask

    # Combine masks: bins that can fit AND are not empty.
    can_fit_and_not_empty_mask = can_fit_mask & is_not_empty_bin_mask

    # --- Component 3: Current Bin Fill Level (Secondary Tie-Breaker) ---
    # This provides a slight additional preference for bins that are already
    # more full, acting as a tie-breaker when other scores are very similar.
    current_fill_component = np.zeros_like(bins_remain_cap, dtype=float)
    current_fill_component[can_fit_mask] = (BIN_CAPACITY_ASSUMED - bins_remain_cap[can_fit_mask]) / BIN_CAPACITY_ASSUMED

    # --- Combine Components to Form Final Priority Score ---
    # Start with the Best Fit component for all eligible bins.
    priority_scores[can_fit_mask] = best_fit_component[can_fit_mask]

    # Add the significant boost for existing, non-empty bins.
    # This creates two distinct tiers of priority.
    priority_scores[can_fit_and_not_empty_mask] += PRIORITY_BOOST_FOR_EXISTING_BIN

    # Add the current fill level as a fine-grained preference (applies to all eligible bins).
    # This helps break ties if multiple bins have identical tightness scores within their tier.
    priority_scores[can_fit_mask] += current_fill_component[can_fit_mask]

    return priority_scores
```
