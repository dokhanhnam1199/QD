```python
import numpy as np

# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.
# This is a common practice in normalized Bin Packing Problem contexts where
# item sizes and capacities are scaled between 0 and 1. If your problem
# uses different absolute capacities (e.g., 100, 500), this constant
# should ideally be passed as an argument or configured externally.
BIN_CAPACITY_ASSUMED = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version refines the strategy by strongly prioritizing 'best fit'
    (minimizing remaining space after placement) and using 'current bin utilization'
    as a strong secondary criterion or tie-breaker, aiming for both efficient
    packing and reduction in the total number of bins used, in line with the reflection.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for
                         calculating the current fill level.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a combination of
        tighter fit after placement and a preference for already-started bins.
    """
    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit, return all zeros as no bin has a valid priority
    if not np.any(can_fit_mask):
        return priority_scores

    # Filter capacities for bins that can fit the item
    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Component 1: Best Fit (Minimizing remaining space after placement) ---
    # This component measures how full the bin would be *after* placing the item.
    # Maximizing this value corresponds to choosing the bin that leaves the least
    # remaining capacity (i.e., the tightest fit). A score of 1.0 indicates a perfect fit.
    # Calculated as the new fill level: (Total_Capacity - New_Remaining_Capacity) / Total_Capacity
    new_potential_fill_level = (BIN_CAPACITY_ASSUMED - (eligible_bins_remain_cap - item)) / BIN_CAPACITY_ASSUMED

    # --- Component 2: Current Bin Utilization (Maximizing current fill level) ---
    # This component measures how full the bin *currently* is, before the new item is placed.
    # Prioritizing already-filled bins helps to 'complete' existing bins before
    # opening new ones, which is crucial for reducing the total number of bins used.
    current_fill_level = (BIN_CAPACITY_ASSUMED - eligible_bins_remain_cap) / BIN_CAPACITY_ASSUMED

    # --- Combine Components ---
    # The total priority score is a weighted sum of the two components.
    # To strictly follow the reflection's emphasis on combining 'best fit'
    # with 'current utilization', we set weights such that 'best fit' is
    # the primary determinant, and 'current utilization' serves as a strong
    # secondary criterion or tie-breaker.
    #
    # A large `BEST_FIT_WEIGHT` ensures that even a small difference in
    # the tightness of fit (e.g., leaving 0.01 vs 0.02 remaining capacity)
    # outweighs the entire range of 'current_fill_level' (0.0 to 1.0).
    BEST_FIT_WEIGHT = 100.0  # Dominant weight for best fit
    CURRENT_UTILIZATION_WEIGHT = 1.0  # Secondary weight for current utilization

    priority_scores[can_fit_mask] = (
        BEST_FIT_WEIGHT * new_potential_fill_level +
        CURRENT_UTILIZATION_WEIGHT * current_fill_level
    )

    return priority_scores
```
