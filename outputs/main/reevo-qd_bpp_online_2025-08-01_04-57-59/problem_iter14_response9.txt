```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin,
    using an enhanced Best Fit strategy that prioritizes bins based on their post-placement utilization.

    This strategy aims to maximize the utilization of existing bins by strongly
    rewarding bins where the item fills a large proportion of the bin's remaining capacity.
    A non-linear power function is applied to the 'filled ratio' to aggressively
    favor bins that result in high utilization, effectively pushing items into
    bins where they represent a significant portion of the available space.

    Args:
        item: Size of item to be added to the bin. Must be non-negative.
        bins_remain_cap: Array of remaining capacities for each bin. Must be non-negative.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item (or if the item size is zero) will have a priority score of 0.
        For bins that can fit, a higher score indicates a higher "filled ratio"
        (i.e., the item takes up a larger percentage of the available space in that bin),
        with a strong emphasis on very high utilization. Scores are normalized between 0 and 1.
    """
    # Initialize priority scores to 0. Bins that cannot fit the item will remain 0.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # If the item size is non-positive, it cannot "fill" any bin in a meaningful way.
    # All priorities remain 0.
    if item <= 0:
        return priority_scores

    # Define the exponent for the non-linear reward function.
    # A higher exponent results in a stronger preference for higher utilization.
    # For instance, 4.0 significantly boosts scores for ratios close to 1.0.
    POWER_EXPONENT = 4.0

    # Create a boolean mask for bins where the item can actually fit.
    # This correctly handles cases where bins_remain_cap is zero or less than the item size.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the 'filled ratio' only for bins where the item can fit.
    # This ratio represents the proportion of the bin's current remaining capacity that the item would fill.
    # It ranges from (item / total_bin_capacity) up to 1.0 (for a perfect fit).
    filled_ratios = item / bins_remain_cap[can_fit_mask]

    # Apply the non-linear power function to strongly reward higher filled ratios.
    # This makes scores for near-perfect fills (ratios close to 1) disproportionately higher
    # compared to loose fits.
    priority_scores[can_fit_mask] = filled_ratios ** POWER_EXPONENT

    return priority_scores
```
