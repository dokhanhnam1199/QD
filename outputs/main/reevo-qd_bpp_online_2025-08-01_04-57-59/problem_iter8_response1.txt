```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a 'Most Full Bin First' strategy.

    This strategy aims to maximize the utilization of already-open bins by prioritizing those that are
    currently the most full (i.e., have the smallest remaining capacity), among those that can fit the item.
    This encourages consolidating items into fewer bins, contributing to overall space efficiency by
    finishing off bins before using new or mostly empty ones.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates the bin is more full (smaller remaining capacity).
    """
    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    # An item can fit if its size is less than or equal to the bin's remaining capacity.
    can_fit_mask = bins_remain_cap >= item

    # A small positive value to prevent division by zero if a bin's remaining capacity is extremely close to zero,
    # ensuring a very large, but finite, score for nearly full bins.
    epsilon = 1e-9 

    # For bins that can fit the item, we want to assign a priority.
    # In the 'Most Full Bin First' strategy, we prefer bins that currently have the *smallest* remaining capacity
    # (i.e., they are the most full). To translate "smallest remaining capacity" into "highest priority score",
    # we use the inverse: 1 / (remaining_capacity + epsilon).
    # A smaller remaining_capacity leads to a larger priority score.
    priority_scores[can_fit_mask] = 1.0 / (bins_remain_cap[can_fit_mask] + epsilon)

    return priority_scores
```
