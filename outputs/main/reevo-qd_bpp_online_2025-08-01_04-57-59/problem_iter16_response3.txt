```python
import numpy as np

# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.
# This is a common practice in normalized Bin Packing Problem contexts where
# item sizes and capacities are scaled between 0 and 1. If your problem
# uses different absolute capacities (e.g., 100, 500), this constant
# should ideally be passed as an argument or configured externally.
BIN_CAPACITY_ASSUMED = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using a multi-tiered strategy that strongly prioritizes exact fits,
    then best fits, and uses current bin utilization as a tie-breaker or secondary factor.

    This strategy refines priority_v1 by explicitly separating and
    prioritizing exact fits before considering other 'best fit' scenarios.
    For exact fits, it prefers bins that are already more utilized.
    For non-exact fits, it primarily follows a Best Fit strategy,
    with a slight preference for already-started bins, ensuring best-fit
    dominates over utilization for non-exact scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for
                         calculating the current fill level.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        A higher score indicates a more preferred bin.
    """
    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Create a boolean mask for bins where the item can actually fit
    # (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= -1e-9 # Allow small floating point tolerance

    # Apply the mask to only consider bins where the item fits
    valid_potential_remaining_space = potential_remaining_space[can_fit_mask]
    valid_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Tier 1: Exact Fits ---
    # Identify bins where the item fits perfectly, leaving effectively 0 remaining space.
    # Use a small tolerance for floating point comparisons for exact zero.
    exact_fit_mask = (valid_potential_remaining_space <= 1e-9)

    # Base score for exact fits should be very high to ensure they are always chosen
    # over any non-exact fit.
    EXACT_FIT_BASE_SCORE = 1e10 # A large constant to guarantee highest tier priority

    if np.any(exact_fit_mask):
        # Among exact fits, prioritize those that are already more full.
        # This aligns with the "full bin utilization" aspect of the reflection.
        # Current fill level is calculated before placing the item.
        current_fill_for_exact_fits = (BIN_CAPACITY_ASSUMED - valid_bins_remain_cap[exact_fit_mask]) / BIN_CAPACITY_ASSUMED
        
        # Add the current fill level to the base score. Higher fill = higher priority within exact fits.
        priority_scores[can_fit_mask][exact_fit_mask] = EXACT_FIT_BASE_SCORE + current_fill_for_exact_fits

    # --- Tier 2: Non-Exact Fits (Best Fit Principle with Utilization Bias) ---
    # For bins where the item fits but not exactly (potential_remaining_space > 0).
    # We exclude the exact fits that were handled in Tier 1.
    non_exact_fit_mask = (valid_potential_remaining_space > 1e-9)

    if np.any(non_exact_fit_mask):
        # Best Fit component: A higher score for smaller positive remaining space.
        # Since we've already filtered out exact zeros, valid_potential_remaining_space
        # for this subset is strictly positive, making `1.0 / ...` safe and effective.
        best_fit_component = 1.0 / valid_potential_remaining_space[non_exact_fit_mask]

        # Current Bin Fill Level (Utilization Bias):
        # This component gives a preference to bins that are already partially filled.
        current_fill_component = (BIN_CAPACITY_ASSUMED - valid_bins_remain_cap[non_exact_fit_mask]) / BIN_CAPACITY_ASSUMED

        # A small weight for the fill component ensures it acts as a secondary tie-breaker
        # or a minor boost, without overriding the primary best-fit objective unless
        # best-fit scores are very close. This ensures 'tight fit' remains dominant for non-exact fits.
        # A weight of 0.1 is chosen to be noticeable for tie-breaking but not large enough
        # to flip choices for significantly different best-fit scores (e.g., 1/0.1 vs 1/0.2).
        FILL_COMPONENT_WEIGHT = 0.1 

        priority_scores[can_fit_mask][non_exact_fit_mask] = \
            best_fit_component + (FILL_COMPONENT_WEIGHT * current_fill_component)

    return priority_scores
```
