```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, near_perfect_threshold: float = 0.05) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic with a refined emphasis on minimizing
    remaining capacity, especially for near-perfect fits.

    This strategy aims to minimize the remaining capacity after placing an item
    (Best Fit principle), but gives an even stronger preference to bins that result
    in a very small, almost unusable, positive remaining capacity. This encourages
    'filling up' bins as much as possible, beyond just finding the tightest fit,
    to reduce overall fragmentation and improve packing density. Perfect fits
    (0 remaining capacity) remain the highest priority.

    Improvements over v1 include:
    - The `near_perfect_threshold` is now a configurable parameter, allowing
      for dynamic tuning of the heuristic's sensitivity to near-perfect fits
      without modifying the code.
    - Enhanced clarity in comments regarding the scoring logic.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.
        near_perfect_threshold: A floating-point value defining the upper limit
                                for what is considered a "near-perfect" fit.
                                Remaining capacities less than or equal to this
                                threshold (but greater than 0) will receive a
                                higher priority bonus. Default is 0.05, assuming
                                bin capacities are normalized (e.g., to 1.0).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item. These bins will never be selected.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after placing the item for eligible bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Apply a non-linear scoring based on remaining capacity:
    # 1. If remaining_after_fit is exactly 0 (perfect fit), the 'scaled_remaining' will be 0.
    #    This results in a score of 0, which is the highest possible priority.
    # 2. If 0 < remaining_after_fit <= near_perfect_threshold (near-perfect fit),
    #    the 'scaled_remaining' is quadratically reduced (r * r / threshold).
    #    This makes the resulting score (-scaled_remaining) less negative than a
    #    standard best-fit score, giving these bins higher priority. Smaller 'r'
    #    values within this range get disproportionately higher scores.
    # 3. If remaining_after_fit > near_perfect_threshold (standard fit),
    #    the 'scaled_remaining' is simply the remaining_after_fit.
    #    This results in a score of -remaining_after_fit, implementing the
    #    standard Best Fit heuristic (minimize remaining capacity).
    scaled_remaining = np.where(
        (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_threshold),
        remaining_after_fit * (remaining_after_fit / near_perfect_threshold),
        remaining_after_fit
    )
    
    # Assign the calculated scores to the eligible bins.
    scores[can_fit_mask] = -scaled_remaining

    return scores
```
