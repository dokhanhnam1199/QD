```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using a Best Fit heuristic with a penalty for very small, likely unusable, leftovers.

    This function aims to minimize the number of bins used, which is a primary
    objective in Bin Packing. It incorporates the Best Fit strategy by
    preferring bins that result in the smallest remaining capacity.
    Additionally, it makes an "informed decision" by penalizing bins that,
    after placing the item, would be left with a very small, non-zero capacity.
    Such tiny remaining capacities are often too small to accommodate future items
    and thus represent wasted space, a common issue in online BPP.

    Perfect fits (zero leftover) are still given the highest possible priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher score means higher priority.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value here means the item does not fit.
    potential_leftover = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item cannot fit will never be selected.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits.
    fitting_bins_mask = potential_leftover >= 0

    # For fitting bins, apply the standard Best Fit logic:
    # priority = -(potential_leftover).
    # This means a smaller positive leftover results in a higher (less negative) priority.
    # A perfect fit (leftover 0) results in a priority of 0, which is the highest.
    priority_scores[fitting_bins_mask] = -potential_leftover[fitting_bins_mask]

    # --- Informed Decision / Penalty for Tiny Unusable Gaps ---
    # Define a threshold for what constitutes a "tiny" or "unusable" remaining capacity.
    # This value is heuristic and depends on the expected scale of item sizes and bin capacity.
    # For example, 0.05 could represent 5% of a typical bin capacity (if capacity is 1.0).
    # This attempts to avoid "fragmentation" where bins are left with many tiny, wasted spaces.
    EPSILON_UNUSABLE_GAP = 0.05
    # Define a penalty to apply to such bins. This penalty should be significant enough
    # to make these bins less attractive than those leaving larger, potentially more useful, gaps.
    PENALTY_FOR_TINY_GAP = 0.1

    # Identify bins that result in a "tiny" non-zero leftover.
    # We use np.finfo(float).eps for a robust check against exact zero for floating points.
    tiny_leftover_mask = (potential_leftover > np.finfo(float).eps) & \
                         (potential_leftover < EPSILON_UNUSABLE_GAP) & \
                         fitting_bins_mask

    # Apply the penalty to the priority scores of bins with tiny leftovers.
    # This makes them less desirable than bins that leave a larger, potentially more useful, space.
    # Perfect fits (leftover == 0) are explicitly excluded from this penalty by `potential_leftover > np.finfo(float).eps`.
    priority_scores[tiny_leftover_mask] -= PENALTY_FOR_TINY_GAP

    return priority_scores
```
