```python
import numpy as np

# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.
# This is a common practice in normalized Bin Packing Problem contexts where
# item sizes and capacities are scaled between 0 and 1. If your problem
# uses different absolute capacities (e.g., 100, 500), this constant
# should ideally be passed as an argument or configured externally.
BIN_CAPACITY_ASSUMED = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using a strategy that strongly prioritizes Best Fit, and then
    gives a significant preference to already-started (non-empty) bins,
    with a minor boost for higher current utilization.

    This strategy refines the combination logic from priority_v1 by explicitly
    adding a substantial bonus for any bin that is not empty, promoting the
    filling of existing bins before opening new ones, while still allowing
    an exceptionally tight fit in a new bin to take precedence.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for
                         calculating the current fill level.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit,
        potentially boosted by whether the bin is already in use and its current fill level.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit
    # (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    epsilon = 1e-9 # A small positive value to handle exact fits (0 remaining space)
                   # and prevent division by zero in the best_fit_component.

    # --- Component 1: Best Fit (Tightness) ---
    # This component provides the core 'tightest fit' preference. It assigns a very high
    # score for bins where the item fits snugly (potential_remaining_space is small),
    # strongly prioritizing exact or near-exact fits. This is usually the dominant factor.
    best_fit_component = np.zeros_like(bins_remain_cap, dtype=float)
    # Apply to only bins that can fit the item
    best_fit_component[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)

    # --- Component 2: Strong Preference for Non-Empty Bins ---
    # This component gives a substantial, fixed bonus to any bin that is *not* currently empty.
    # This pushes already-started bins significantly higher in priority compared to new, empty bins,
    # unless an empty bin offers a drastically better (e.g., perfect) Best Fit.
    # The value of this bonus should be carefully chosen:
    # - Too low, and it won't effectively prevent opening new bins.
    # - Too high, and it might override truly superior tight fits in new bins.
    # A value of 10.0 is chosen assuming best_fit_component values typically range from ~1 (loose fit)
    # to 1000+ (perfect fit), making it impactful without being absolute.
    NON_EMPTY_BIN_BONUS = 10.0

    # A bin is considered 'not empty' if its remaining capacity is less than the total capacity.
    is_not_empty_mask = (bins_remain_cap < BIN_CAPACITY_ASSUMED)
    non_empty_bonus_component = np.zeros_like(bins_remain_cap, dtype=float)
    # Apply bonus only to bins that can fit the item AND are not empty
    non_empty_bonus_component[can_fit_mask & is_not_empty_mask] = NON_EMPTY_BIN_BONUS

    # --- Component 3: Current Bin Fill Level (Minor Tie-breaker) ---
    # This component acts as a secondary tie-breaker among bins that are already in use,
    # giving a slight additional preference to those that are more full. It's less
    # impactful than the non_empty_bonus_component but still contributes to maximizing utilization.
    current_fill_ratio_component = np.zeros_like(bins_remain_cap, dtype=float)
    # Calculate current fill for bins that can fit and are not empty
    mask_for_fill_calc = can_fit_mask & is_not_empty_mask
    current_fill_ratio_component[mask_for_fill_calc] = \
        (BIN_CAPACITY_ASSUMED - bins_remain_cap[mask_for_fill_calc]) / BIN_CAPACITY_ASSUMED

    # --- Combine Components ---
    # The total priority score is the sum of these three components.
    # Best Fit is the primary driver.
    # The Non-Empty Bin Bonus provides a strong preference for continuing to fill existing bins.
    # The Current Fill Ratio provides a subtle additional preference for more-filled existing bins.
    priority_scores[can_fit_mask] = \
        best_fit_component[can_fit_mask] + \
        non_empty_bonus_component[can_fit_mask] + \
        current_fill_ratio_component[can_fit_mask]

    return priority_scores
```
