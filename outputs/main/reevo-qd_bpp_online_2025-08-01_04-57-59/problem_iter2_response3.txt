```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing an enhanced Best Fit (BF) heuristic by more aggressively
    penalizing larger remaining capacities.

    The strategy aims to maximize the "tightness" of the fit, reflecting the
    "immediate placement impact" for "greedy, space-efficient bin selection".
    A perfect fit (0 remaining capacity) is still ideal. Bins that cannot
    accommodate the item receive a very low priority. To amplify the preference
    for bins that result in very small remaining capacities, the squared negative
    of the remaining capacity is used as the priority score. This makes larger
    unused spaces disproportionately less desirable.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item can fit, calculate the remaining capacity after placing the item.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Apply a squared penalty to the remaining capacity.
    # This non-linear transformation makes smaller positive remaining capacities
    # result in scores closer to zero (e.g., 0.1 squared is 0.01),
    # while larger positive remaining capacities are penalized more severely
    # (e.g., 0.5 squared is 0.25). A perfect fit (0 remaining capacity)
    # still receives the highest possible score of 0.0.
    scores[can_fit_mask] = -(remaining_after_fit ** 2)

    return scores
```
