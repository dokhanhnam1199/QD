```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version implements a Best-Fit heuristic: it prioritizes bins where the
    item fits most tightly, i.e., leaves the smallest remaining capacity after placement.
    Bins where the item does not fit are assigned the lowest possible priority.

    In the event of a tie (multiple bins result in the exact same minimal
    remaining capacity), the bin that appears earliest in the `bins_remain_cap`
    array (i.e., with a lower index) will implicitly be chosen if the selection
    mechanism (e.g., `np.argmax`) selects the first occurrence of the maximum value.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    # Initialize all priorities to a very low value (negative infinity).
    # This ensures bins where the item does not fit will never be chosen
    # unless no other option exists (which implies a new bin needs to be opened).
    priorities = np.full_like(bins_remain_cap, fill_value=float('-inf'), dtype=float)

    # Identify which bins can currently accommodate the item.
    fitting_bins_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item were placed in each fitting bin.
    # For Best Fit, we want to minimize this remaining capacity.
    # To convert this into a "priority" where higher is better, we take the negative
    # of the remaining capacity. A smaller positive remaining capacity (e.g., 0.1)
    # will result in a larger (less negative) priority score (e.g., -0.1) than
    # a larger remaining capacity (e.g., 0.5 results in -0.5).
    remaining_after_placement = bins_remain_cap[fitting_bins_mask] - item
    best_fit_scores = -remaining_after_placement

    # Assign these Best Fit scores to the corresponding fitting bins in the priorities array.
    priorities[fitting_bins_mask] = best_fit_scores

    return priorities
```
