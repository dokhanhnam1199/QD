{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This implementation utilizes a \"Squared Best Fit\" heuristic:\n    - Bins that cannot fit the item are assigned the lowest possible priority (-infinity).\n    - For bins where the item can fit, the priority is calculated based on the\n      remaining capacity after the item is placed (remainder = bin_capacity - item_size).\n    - A perfect fit (remainder == 0) results in the highest possible score (0).\n    - For positive remainders, the score is the negative square of the remainder.\n      This non-linear penalty aggressively prioritizes smaller positive remainders,\n      making the heuristic strongly favor \"snug\" fits that leave minimal empty space,\n      while still ensuring perfect fits are top priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    \n    # Calculate the remaining capacity for each bin if the item were placed in it.\n    remainder_if_placed = bins_remain_cap - item\n    \n    # Initialize all priorities to negative infinity. This ensures that bins\n    # which cannot accommodate the item are never chosen.\n    priorities = np.full_like(bins_remain_cap, fill_value=-np.inf, dtype=float)\n    \n    # Create a boolean mask to identify bins where the item can fit (remainder is non-negative).\n    can_fit_mask = remainder_if_placed >= 0\n    \n    # For bins where the item can fit, calculate their priority score.\n    # The score is the negative square of the remainder.\n    # - If remainder is 0 (perfect fit), score is 0 (highest possible).\n    # - If remainder is small positive (e.g., 0.1), score is -0.01 (very high).\n    # - If remainder is large positive (e.g., 5.0), score is -25.0 (much lower).\n    priorities[can_fit_mask] = -(remainder_if_placed[can_fit_mask] ** 2)\n    \n    return priorities\n\n[Reflection]\nUtilize problem-specific data to prioritize choices that minimize wasted space and satisfy constraints.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}