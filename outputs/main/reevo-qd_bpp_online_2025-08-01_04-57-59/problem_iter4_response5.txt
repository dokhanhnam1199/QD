```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic with distinct priority tiers for
    perfect, near-perfect, and other fits.

    This strategy aims to maximize bin utilization and reduce fragmentation by:
    1. Giving the highest priority to perfect fits (zero remaining capacity).
    2. Giving a significant positive priority to 'near-perfect' fits (those
       leaving very small, hard-to-use remaining capacity), with better scores
       for smaller remaining capacity within this range.
    3. Giving a lower priority (negative) to other valid fits,
       following the Best Fit principle (smaller remaining capacity is better).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after fit for eligible bins
    # This array will only contain values for bins where the item can fit
    eligible_bins_remaining = bins_remain_cap[can_fit_mask] - item

    # Define thresholds and constants for scoring
    # Assumes item sizes and bin capacities are normalized, e.g., to a maximum of 1.0.
    PERFECT_FIT_SCORE = 1000.0  # Highest score for a perfect fit
    NEAR_PERFECT_THRESHOLD = 0.05 # e.g., 5% of a standard bin capacity
    NEAR_PERFECT_MAX_SCORE = 500.0 # Score for a near-perfect fit that leaves almost 0
    NEAR_PERFECT_MIN_SCORE = 1.0   # Score for a near-perfect fit at the threshold (must be > 0)

    # 1. Default scores for all bins that can fit: negative of remaining capacity.
    # This assigns lower scores for larger remaining capacities (standard Best Fit).
    # These scores will be overridden for perfect and near-perfect fits.
    scores[can_fit_mask] = -eligible_bins_remaining

    # 2. Re-score Near-Perfect Fits (0 < remaining <= NEAR_PERFECT_THRESHOLD)
    # The masks below refer to the *original* bins_remain_cap array indices.
    near_perfect_mask_overall = (bins_remain_cap >= item) & \
                                (bins_remain_cap - item > 0) & \
                                (bins_remain_cap - item <= NEAR_PERFECT_THRESHOLD)
    
    if np.any(near_perfect_mask_overall): # Process only if there are any near-perfect fits
        # Get the actual remaining capacities for these specific bins
        remaining_np_actual = bins_remain_cap[near_perfect_mask_overall] - item
        
        if NEAR_PERFECT_THRESHOLD > 0: # Avoid division by zero if threshold is 0
            # Calculate a score that scales from NEAR_PERFECT_MAX_SCORE down to NEAR_PERFECT_MIN_SCORE
            # as remaining_np_actual goes from just above 0 to NEAR_PERFECT_THRESHOLD.
            # (remaining_np_actual / NEAR_PERFECT_THRESHOLD) scales from approx 0 to 1.
            # (1 - scaled_remaining_ratio) scales from 1 to 0.
            scaled_remaining_ratio = remaining_np_actual / NEAR_PERFECT_THRESHOLD
            near_perfect_scores_actual = NEAR_PERFECT_MIN_SCORE + \
                                         (1 - scaled_remaining_ratio) * \
                                         (NEAR_PERFECT_MAX_SCORE - NEAR_PERFECT_MIN_SCORE)
            scores[near_perfect_mask_overall] = near_perfect_scores_actual
            
    # 3. Re-score Perfect Fits (remaining == 0)
    # Using np.isclose for robust floating-point comparison to zero.
    # This ensures exact zero remaining capacity gets the highest priority, overriding any
    # 'near-perfect' classification that might arise from tiny floating point inaccuracies.
    perfect_fit_mask_overall = (bins_remain_cap >= item) & \
                               (np.isclose(bins_remain_cap - item, 0.0))
    scores[perfect_fit_mask_overall] = PERFECT_FIT_SCORE

    return scores
```
