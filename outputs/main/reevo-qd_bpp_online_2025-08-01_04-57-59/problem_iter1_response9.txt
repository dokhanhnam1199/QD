```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation utilizes a "Squared Best Fit" heuristic:
    - Bins that cannot fit the item are assigned the lowest possible priority (-infinity).
    - For bins where the item can fit, the priority is calculated based on the
      remaining capacity after the item is placed (remainder = bin_capacity - item_size).
    - A perfect fit (remainder == 0) results in the highest possible score (0).
    - For positive remainders, the score is the negative square of the remainder.
      This non-linear penalty aggressively prioritizes smaller positive remainders,
      making the heuristic strongly favor "snug" fits that leave minimal empty space,
      while still ensuring perfect fits are top priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    
    # Calculate the remaining capacity for each bin if the item were placed in it.
    remainder_if_placed = bins_remain_cap - item
    
    # Initialize all priorities to negative infinity. This ensures that bins
    # which cannot accommodate the item are never chosen.
    priorities = np.full_like(bins_remain_cap, fill_value=-np.inf, dtype=float)
    
    # Create a boolean mask to identify bins where the item can fit (remainder is non-negative).
    can_fit_mask = remainder_if_placed >= 0
    
    # For bins where the item can fit, calculate their priority score.
    # The score is the negative square of the remainder.
    # - If remainder is 0 (perfect fit), score is 0 (highest possible).
    # - If remainder is small positive (e.g., 0.1), score is -0.01 (very high).
    # - If remainder is large positive (e.g., 5.0), score is -25.0 (much lower).
    priorities[can_fit_mask] = -(remainder_if_placed[can_fit_mask] ** 2)
    
    return priorities
```
