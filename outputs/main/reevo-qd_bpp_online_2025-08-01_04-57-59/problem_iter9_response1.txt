```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using a Best Fit-like strategy with enhanced non-linear rewards
    to close bins and a bias towards existing, partially filled bins.

    This strategy aims to:
    1. Heavily reward very tight fits to 'close' bins by using a quadratic inverse for remaining space.
    2. Provide a small bonus for using existing, partially filled bins over opening new ones (empty bins),
       acting as a tie-breaker for similar best-fit scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity),
        and potentially a bonus for being partially filled.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, calculate a base priority score.
    # We use a power of 2 for a stronger non-linear reward. This heavily favors
    # very small remaining spaces, directly aiming to 'close' bins and
    # minimize fragmentation, leading to higher bin utilization.
    epsilon = 1e-9 # A small positive value to handle exact fits (0 remaining space)
    power = 2.0    # Higher power (e.g., 2.0 instead of 1.0) amplifies preference for tight fits

    # Calculate base scores for bins that can fit.
    priority_scores[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)**power

    # --- Implement "Favor existing, partially filled bins." ---
    # This requires identifying "empty" bins versus "partially filled" bins.
    # We infer BIN_CAPACITY as the maximum value present in bins_remain_cap.
    # This assumption works if there is at least one truly empty bin (with full capacity)
    # represented in the bins_remain_cap array when new bins can be opened.
    if bins_remain_cap.size > 0:
        bin_capacity = np.max(bins_remain_cap)
        
        # Identify bins that are currently partially filled (not at full capacity)
        # and are also capable of fitting the current item.
        is_partially_filled_and_can_fit_mask = (bins_remain_cap < bin_capacity) & can_fit_mask

        # Apply a small fixed bonus to the priority score for partially filled bins.
        # This acts as a tie-breaker: if two bins offer very similar 'tight fit' scores,
        # the partially filled one will be preferred, encouraging the system to fill
        # existing bins before opening new ones. The bonus value is kept small to
        # ensure it doesn't override a significantly better tight fit offered by an empty bin.
        bonus_for_partial_bin = 0.001 # A small fixed bonus

        priority_scores[is_partially_filled_and_can_fit_mask] += bonus_for_partial_bin

    return priority_scores
```
