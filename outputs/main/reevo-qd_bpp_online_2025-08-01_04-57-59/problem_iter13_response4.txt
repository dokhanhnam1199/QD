```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    aggressively prioritizing tight fits and considering current bin utilization.

    This strategy aims to:
    1. Aggressively reward bins that result in very little remaining capacity
       after placing the item (near-perfect fits), reducing fragmentation.
    2. Prefer bins that are already more utilized (less remaining capacity),
       to consolidate items and maximize overall bin efficiency.
    3. Implicitly preserve larger empty bins for potentially larger future items,
       unless a very tight fit is found in a less-utilized bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a higher priority.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Apply calculations only to the bins where the item fits.
    # Add a small epsilon to denominators to prevent division by zero,
    # especially for perfect fits (potential_remaining_space = 0) or nearly full bins (bins_remain_cap = 0).
    epsilon = 1e-9

    # Factor 1: Aggressively prioritize tight fits (small potential_remaining_space).
    # Using a power (e.g., 2) makes the reward non-linear and much stronger for very small remainders.
    tight_fit_score = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)**2

    # Factor 2: Prefer bins that are already more utilized (smaller bins_remain_cap).
    # This helps in consolidating items into existing, partially full bins.
    current_utilization_score = 1.0 / (bins_remain_cap[can_fit_mask] + epsilon)

    # Combine the two factors multiplicatively.
    # This ensures that bins with both a tight fit AND high current utilization get the highest scores.
    priority_scores[can_fit_mask] = tight_fit_score * current_utilization_score

    return priority_scores
```
