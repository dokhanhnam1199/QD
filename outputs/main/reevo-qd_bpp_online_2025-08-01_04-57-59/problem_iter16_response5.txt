```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin,
    with an even stronger emphasis on strategic fit and accelerated bin utilization.

    This version enhances the Best Fit strategy by using a higher exponent, making
    near-perfect fits exceptionally desirable. It also applies a non-linear weighting
    to bin fullness, disproportionately favoring bins that are already very close to full,
    thereby accelerating the 'closing' of bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a more desirable placement.
    """
    # Tunable parameters for the heuristic
    # WEIGHT_TIGHT_FIT: Amplifies the importance of finding a snug fit.
    # WEIGHT_ACCEL_FULLNESS: Increases the reward for putting items into bins
    #                        that are already highly utilized, to 'close' them faster.
    # FIT_EXPONENT: Makes the reward for very tight fits significantly higher (more aggressive non-linear).
    # FULLNESS_EXPONENT: Introduces a non-linear reward for higher current bin utilization.
    # EPSILON: A small value to prevent division by zero when calculating inverse scores.
    WEIGHT_TIGHT_FIT = 3.0
    WEIGHT_ACCEL_FULLNESS = 1.5
    FIT_EXPONENT = 3.0  # Increased from 2.0 in v1 for stronger emphasis on tight fits
    FULLNESS_EXPONENT = 1.5 # New exponent for bin fullness component
    EPSILON = 1e-9

    # Initialize priority scores. Bins that cannot fit will retain a score of 0.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the remaining space in each bin *after* placing the current item.
    potential_remaining_space = bins_remain_cap - item

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = potential_remaining_space >= 0

    # Apply calculations only to bins where the item can fit
    if np.any(can_fit_mask):
        # 1. Enhanced Tight Fit Component (Aggressive Non-linear Reward for Tight Fits):
        # This strongly prioritizes bins that would have the smallest remaining capacity
        # after the item is placed. The higher FIT_EXPONENT makes this preference for
        # extremely tight fits even more pronounced compared to v1, strongly rewarding
        # near-zero remaining spaces and heavily penalizing larger ones.
        fit_score_component = 1.0 / ((potential_remaining_space[can_fit_mask] + EPSILON)**FIT_EXPONENT)

        # 2. Accelerated Bin Fullness Component (Maximizing Bin Efficiency/Utilization):
        # This part prioritizes bins that are already more utilized (i.e., have less
        # remaining capacity *before* the item is placed). By applying FULLNESS_EXPONENT,
        # the reward for bins that are very close to full becomes disproportionately higher,
        # encouraging the rapid closure of partially filled bins.
        fullness_score_component = 1.0 / ((bins_remain_cap[can_fit_mask] + EPSILON)**FULLNESS_EXPONENT)

        # Combine the two components using their respective weights.
        # The sum represents the overall priority score for each fit-able bin.
        priority_scores[can_fit_mask] = (
            WEIGHT_TIGHT_FIT * fit_score_component +
            WEIGHT_ACCEL_FULLNESS * fullness_score_component
        )

    return priority_scores
```
