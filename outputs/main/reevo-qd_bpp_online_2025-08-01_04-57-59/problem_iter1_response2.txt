```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit heuristic.

    This function prioritizes bins that, after placing the item, would result in the
    smallest remaining capacity. This strategy aims to leave larger spaces in other bins
    for potentially larger future items, or compact items into existing bins efficiently.

    A very low priority (-infinity) is assigned to bins where the item does not fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher score means higher priority.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value here means the item does not fit.
    potential_leftover = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item cannot fit will never be selected
    # unless no other bin is available (which would typically trigger opening a new bin).
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits.
    # An item fits if the potential remaining capacity is non-negative.
    fitting_bins_mask = potential_leftover >= 0

    # For bins where the item fits, set the priority.
    # To implement Best Fit (minimize leftover space), we set the priority
    # to the negative of the leftover space.
    # This means:
    # - A leftover of 0 will get a priority of 0 (highest possible for fitting items).
    # - A small positive leftover (e.g., 0.1) will get a priority of -0.1.
    # - A larger positive leftover (e.g., 0.5) will get a priority of -0.5.
    # Maximizing this priority score will naturally pick the bin with the smallest
    # positive leftover space, thus implementing Best Fit.
    priority_scores[fitting_bins_mask] = -potential_leftover[fitting_bins_mask]

    return priority_scores
```
