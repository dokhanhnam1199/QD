{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin,\n    implementing a Best Fit heuristic with an enhanced, more aggressive emphasis\n    on minimizing remaining capacity, particularly for near-perfect fits.\n\n    This strategy assigns positive priority scores to perfect or very near-perfect\n    fits, making them strictly preferred. For other fits, it reverts to the\n    standard Best Fit principle (negative score proportional to remaining capacity).\n    The goal is to strongly encourage 'filling up' bins to reduce fragmentation and\n    improve overall packing density by making very tight fits extremely attractive.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate a more desirable bin.\n    \"\"\"\n    # Initialize all priorities to a very low negative number (effectively -infinity)\n    # for bins that cannot accommodate the item.\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify bins where the item can fit\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate remaining capacity after fit for eligible bins.\n    # This array `remaining_after_fit_for_valid_bins` now only contains\n    # remaining capacities for bins where the item fits.\n    remaining_after_fit_for_valid_bins = bins_remain_cap[can_fit_mask] - item\n\n    # Define a threshold for what constitutes a \"near-perfect\" fit.\n    # This threshold assumes items and bin capacities are normalized, e.g., to 1.0.\n    # A remaining capacity <= 0.05 (e.g., 5% of a standard bin) is considered near-perfect.\n    near_perfect_threshold = 0.05\n\n    # Create a temporary array for scores of valid bins.\n    # By default, initialize these with the standard Best Fit negative scores.\n    # This covers the `remaining_after_fit_for_valid_bins > near_perfect_threshold` case.\n    temp_scores_for_valid_bins = -remaining_after_fit_for_valid_bins\n\n    # Identify bins within the \"near-perfect\" range from the *filtered* remaining capacities.\n    # This mask applies directly to `remaining_after_fit_for_valid_bins`.\n    near_perfect_mask_in_valid_bins = remaining_after_fit_for_valid_bins <= near_perfect_threshold\n\n    # Apply the aggressive non-linear scoring for near-perfect fits.\n    # The formula `near_perfect_threshold - 2 * remaining` provides:\n    # - `near_perfect_threshold` (e.g., 0.05) for a perfect fit (remaining=0),\n    #   making it the highest possible score.\n    # - A positive score that decreases as remaining capacity increases, reaching 0\n    #   when remaining capacity is `near_perfect_threshold / 2`.\n    # - A negative score (but still better than typical Best Fit) when remaining\n    #   capacity is between `near_perfect_threshold / 2` and `near_perfect_threshold`.\n    temp_scores_for_valid_bins[near_perfect_mask_in_valid_bins] = (\n        near_perfect_threshold - 2 * remaining_after_fit_for_valid_bins[near_perfect_mask_in_valid_bins]\n    )\n\n    # Assign the calculated scores back to the main `scores` array using the original mask.\n    scores[can_fit_mask] = temp_scores_for_valid_bins\n\n    return scores\n\n[Reflection]\nPrioritize minimizing remaining capacity; strongly reward near-perfect fits to reduce fragmentation and improve density.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}