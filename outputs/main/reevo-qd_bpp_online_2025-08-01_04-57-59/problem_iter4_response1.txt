```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an optimized Best Fit strategy.

    This strategy aims to minimize the remaining capacity in a bin after placing the item.
    A smaller non-negative remaining capacity results in a higher (less negative) priority score,
    thereby prioritizing a 'snug' fit and preserving larger empty spaces in other bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a very low (negative infinity) priority score.
        For bins that can fit, a higher (less negative) score indicates a 'tighter' fit
        (smaller remaining capacity). An exact fit (0 remaining capacity) will result in
        the highest possible score (0), making it the top priority.
    """
    # Calculate the potential remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores to a very low value (negative infinity).
    # This ensures that bins which cannot fit the item (or are otherwise unsuitable)
    # are never selected by a simple argmax operation.
    priority_scores = np.full_like(bins_remain_cap, fill_value=float('-inf'), dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    # A bin can fit the item if its remaining capacity is greater than or equal to the item size,
    # which translates to potential_remaining_space being non-negative.
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, assign a priority score.
    # To implement Best Fit, we want to select the bin that results in the *smallest*
    # potential_remaining_space. By taking the negative of this value, a smaller
    # positive remaining space will yield a score closer to zero (e.g., -0.1 is better than -0.5),
    # and an exact fit (potential_remaining_space = 0) will yield the highest score of 0.
    priority_scores[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priority_scores
```
