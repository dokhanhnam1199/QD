```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit-like strategy,
    strongly favoring existing bins and applying non-linear rewards for tight fits.

    This strategy aims to leave the smallest possible remaining capacity in a bin after placing the item,
    thereby 'snugly' fitting items and preserving larger empty spaces in other bins for future larger items.
    It strongly prefers using existing partially-filled bins over opening new ones, which helps
    minimize the total number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The total capacity of a new, empty bin. This is used to distinguish
                      between new (empty) bins and existing (partially filled) bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity),
        with a significant bonus for existing bins.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Define a small epsilon to handle exact fits (0 remaining space) and avoid division by zero.
    epsilon = 1e-9

    # Define an exponent for the non-linear reward. A higher exponent makes near-perfect fits
    # (very small potential_remaining_space) significantly more attractive.
    # This addresses "especially near-perfect ones, using non-linear rewards to minimize fragmentation."
    fit_score_exponent = 2.0  # Common choice: 2.0 (quadratic inverse), can be tuned (e.g., 3.0)

    # Calculate base Best Fit scores for bins that can fit.
    # 1.0 / ( (remaining_space + epsilon) ^ exponent )
    base_fit_scores = np.zeros_like(bins_remain_cap, dtype=float)
    base_fit_scores[can_fit_mask] = 1.0 / ((potential_remaining_space[can_fit_mask] + epsilon) ** fit_score_exponent)

    # Identify existing (partially-filled) bins.
    # An existing bin is one whose remaining capacity is less than its full capacity.
    # Use a small tolerance for floating-point comparisons to `bin_capacity`.
    tolerance = 1e-6
    is_existing_bin = (bins_remain_cap < bin_capacity - tolerance)

    # Define a large bonus for existing bins. This bonus ensures that an existing bin
    # is strongly preferred over a new bin, even if the new bin offers a slightly better base fit,
    # unless the new bin offers an extremely good (e.g., perfect) fit.
    # This addresses "Strongly favor existing bins for high utilization."
    # The value should be large enough to typically outweigh base fit score differences for non-perfect fits.
    existing_bin_bonus = 1e6  # This value can be tuned based on typical base fit scores.

    # Apply the bonus to the priority scores for existing bins that can fit.
    priority_scores[can_fit_mask & is_existing_bin] = base_fit_scores[can_fit_mask & is_existing_bin] + existing_bin_bonus

    # For new (empty) bins that can fit, their priority is just their base fit score.
    priority_scores[can_fit_mask & ~is_existing_bin] = base_fit_scores[can_fit_mask & ~is_existing_bin]

    return priority_scores
```
