```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit-like heuristic.

    The Best Fit heuristic aims to minimize the unused space in a bin
    after placing an item, thus leaving larger gaps in new bins for
    subsequent items.

    This function assigns a higher priority score to bins that:
    1. Can accommodate the item.
    2. Would have the smallest remaining capacity after the item is placed
       (i.e., provide the "tightest" fit).

    Invalid bins (where the item does not fit) receive a very low (negative infinity)
    priority to ensure they are never selected.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest priority score should be chosen.
    """
    # Initialize all priorities to a very low value (negative infinity).
    # This ensures that bins where the item cannot fit will have the lowest priority
    # and will not be selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate the remaining capacity if the current 'item' were placed in each bin.
    # This value will be negative for bins where the item does not fit.
    potential_remaining_capacities_after_fit = bins_remain_cap - item

    # Create a boolean mask to identify only the valid bins (where the item fits).
    valid_bins_mask = potential_remaining_capacities_after_fit >= 0

    # For valid bins, we want to prioritize the bin that leaves the least remaining space.
    # This means we want to maximize -(remaining_space), so smaller remaining space
    # (e.g., 0.1) gets a priority of -0.1, while larger remaining space (e.g., 0.5)
    # gets a priority of -0.5.
    # The `np.argmax` function (or equivalent selection logic) will then correctly
    # choose the bin with the smallest positive remaining capacity after the item is placed.
    priorities[valid_bins_mask] = -potential_remaining_capacities_after_fit[valid_bins_mask]

    return priorities
```
