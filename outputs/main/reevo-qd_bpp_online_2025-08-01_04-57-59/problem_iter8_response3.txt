```python
import numpy as np

# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.
# This is a common practice in normalized Bin Packing Problem contexts where
# item sizes and capacities are scaled between 0 and 1. If your problem
# uses different absolute capacities (e.g., 100, 500), this constant
# should ideally be passed as an argument or configured externally.
BIN_CAPACITY_ASSUMED = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using a strategy that strongly prioritizes Best Fit (maximizing the final
    fill level of a bin) and secondarily prefers bins that are already
    partially filled. This aligns with the reflection by ensuring that
    "snug fits" are truly prioritized over "existing bins" unless the snugness
    is virtually identical.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for
                         calculating the current fill level.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a combination of
        tighter fit after placement and a preference for already-started bins.
    """
    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit, return all zeros as no bin has a valid priority
    if not np.any(can_fit_mask):
        return priority_scores

    # Filter capacities for bins that can fit the item
    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Component 1: Best Fit (Future Fill Level) ---
    # This component measures how full the bin would be *after* placing the item.
    # Maximizing this value directly corresponds to choosing the bin that leaves the least
    # remaining capacity (Best Fit). It's calculated as the proportion of the bin
    # that would be occupied after the item is placed. Values range from item/BIN_CAPACITY to 1.0.
    new_potential_fill_level = (BIN_CAPACITY_ASSUMED - (eligible_bins_remain_cap - item)) / BIN_CAPACITY_ASSUMED

    # --- Component 2: Current Bin Fill Level (Utilization Bias) ---
    # This component measures how full the bin *currently* is, before the new item is placed.
    # Prioritizing already-filled bins encourages 'completing' existing bins before
    # opening new ones, which helps reduce the total number of bins used.
    # Values range from 0.0 (empty) to 1.0 (full).
    current_fill_level = (BIN_CAPACITY_ASSUMED - eligible_bins_remain_cap) / BIN_CAPACITY_ASSUMED

    # --- Combine Components ---
    # To truly "prioritize" snug fits as the primary criterion, the BEST_FIT_WEIGHT
    # must be significantly larger than the maximum possible range of the
    # CURRENT_FILL_WEIGHT component. This ensures that even a small advantage
    # in "snugness" will outweigh the maximum possible advantage from "current fill".
    # For instance, if current_fill_level ranges from 0 to 1, and CURRENT_FILL_WEIGHT is 1,
    # the maximum contribution from current_fill_level is 1.0.
    # By setting BEST_FIT_WEIGHT to a sufficiently large number (e.g., 1000.0),
    # a minimal difference in new_potential_fill_level (e.g., 0.001, which is often
    # the practical granularity in normalized problems) will result in a score
    # difference of 1.0, which is enough to always dominate the current_fill_level
    # component (scaled by 1.0). This makes the best-fit component strictly dominant,
    # with the current fill level acting as a true tie-breaker.
    BEST_FIT_WEIGHT = 1000.0  # Increased weight for strict prioritization of Best Fit
    CURRENT_FILL_WEIGHT = 1.0

    priority_scores[can_fit_mask] = (
        BEST_FIT_WEIGHT * new_potential_fill_level +
        CURRENT_FILL_WEIGHT * current_fill_level
    )

    return priority_scores
```
