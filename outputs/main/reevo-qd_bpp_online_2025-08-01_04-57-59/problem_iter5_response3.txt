```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit-like strategy.

    This strategy aims to leave the smallest possible remaining capacity in a bin after placing the item,
    thereby 'snugly' fitting items and preserving larger empty spaces in other bins for future larger items.
    It directly uses the negative of the remaining space as the priority, where a smaller (closer to zero)
    remaining space yields a higher (less negative, or zero) priority score. This formulation aims
    to be more numerically stable for exact fits than using an inverse (1/x).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0 (consistent with v1 behavior).
        For bins that can fit, a higher score (closer to zero or zero) indicates a 'tighter' fit
        (smaller remaining capacity). A perfect fit results in a score of 0, which is the maximum possible.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0.
    # As per the requirement, bins that cannot fit get a score of 0.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, we assign a priority.
    # In a Best Fit strategy, we prefer bins that leave the *smallest* amount of space remaining.
    # To achieve this, we use the negative of the potential remaining space.
    # - A smaller (closer to zero) positive remaining space will result in a larger (closer to zero) negative score.
    # - An exact fit (0 remaining space) will result in a score of 0, which is the highest possible.
    # This correctly maintains the ranking for Best Fit: higher score (closer to zero) means better fit.
    priority_scores[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priority_scores
```
