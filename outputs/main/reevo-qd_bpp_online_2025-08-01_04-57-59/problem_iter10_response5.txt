```python
import numpy as np

# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.
# This is a common practice in normalized Bin Packing Problem contexts where
# item sizes and capacities are scaled between 0 and 1. If your problem
# uses different absolute capacities (e.g., 100, 500), this constant
# should ideally be passed as an argument or configured externally.
BIN_CAPACITY_ASSUMED = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which to add an item to each bin,
    implementing a robust strategy that prioritizes Best Fit as the primary
    criterion and then prioritizes completing existing bins as a secondary
    tie-breaker. This directly aligns with the reflection: "Maximize bin fill
    (Best Fit) and prioritize completing existing bins."

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for
                         calculating the current fill level.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a combination of
        tighter fit after placement and a preference for already-started bins.
    """
    # Initialize priority scores. Default to 0, indicating no priority or inability to fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return all zeros as no bin has a valid priority
    if not np.any(can_fit_mask):
        return priority_scores

    # Filter capacities for bins that are eligible to receive the item
    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Component 1: Best Fit (Primary Criterion) ---
    # To maximize bin fill (Best Fit), we want to minimize the remaining capacity
    # *after* placing the item. This 'gap' is `eligible_bins_remain_cap - item`.
    # To convert this minimization into a maximization priority score, we take the negative.
    # A smaller positive gap results in a larger (less negative, closer to zero) score.
    # A perfect fit (gap=0) yields a score of 0, which is the highest possible for this component.
    gap_after_placement = eligible_bins_remain_cap - item
    best_fit_component = -gap_after_placement

    # --- Component 2: Prioritize Completing Existing Bins (Secondary Criterion/Tie-breaker) ---
    # This component measures how full the bin *currently* is, before the new item is placed.
    # Prioritizing already-filled bins (higher current fill level) encourages 'completing'
    # existing bins before opening new ones, which helps reduce the total number of bins used.
    # Current fill level is `BIN_CAPACITY_ASSUMED - eligible_bins_remain_cap`.
    # Scores for this component range from 0 (empty bin) to BIN_CAPACITY_ASSUMED (full bin).
    current_fill_component = BIN_CAPACITY_ASSUMED - eligible_bins_remain_cap

    # --- Combine Components ---
    # The total priority score is a weighted sum of the two components.
    # To ensure Best Fit is the primary sorting key, its weight must be significantly
    # larger than the maximum possible range of the secondary component.
    # For BIN_CAPACITY_ASSUMED = 1.0, current_fill_component ranges from 0 to 1.0.
    # The `best_fit_component` (negative gap) generally ranges from -1.0 (for small item in new bin)
    # to 0.0 (perfect fit). A change in the gap by, for example, 0.001 (a small item size)
    # must outweigh the entire range of the current fill component (1.0).
    # Therefore, `WEIGHT_PRIMARY_BEST_FIT * 0.001` should be greater than `WEIGHT_SECONDARY_CURRENT_FILL * 1.0`.
    # A common robust choice is to make `WEIGHT_PRIMARY_BEST_FIT` 1000 times larger than `WEIGHT_SECONDARY_CURRENT_FILL`.

    WEIGHT_PRIMARY_BEST_FIT = 1000.0  # Large weight to ensure Best Fit dominates
    WEIGHT_SECONDARY_CURRENT_FILL = 1.0 # Smaller weight for tie-breaking

    priority_scores[can_fit_mask] = (
        WEIGHT_PRIMARY_BEST_FIT * best_fit_component +
        WEIGHT_SECONDARY_CURRENT_FILL * current_fill_component
    )

    return priority_scores
```
