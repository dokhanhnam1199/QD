```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an enhanced Best Fit strategy.

    This strategy aims to strongly prioritize near-perfect fits to minimize fragmentation and maximize
    the utilization of existing bins. It uses a non-linear reward function to aggressively
    favor bins that result in very small remaining capacity after placing the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity),
        with a strong emphasis on very tight fits.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, we assign a priority.
    # To strongly reward near-perfect fits (i.e., very small potential_remaining_space)
    # and to minimize fragmentation, we use a non-linear inverse square relation.
    # This makes the score increase much more rapidly as potential_remaining_space approaches zero.
    # A small epsilon is added to the denominator to prevent division by zero if an item
    # perfectly fills a bin (potential_remaining_space = 0) and to provide a finite, very
    # high score for such cases.
    epsilon = 1e-9 # A small positive value to handle exact fits (0 remaining space)

    # Apply the non-linear inverse square calculation only to the bins where the item fits.
    # This ensures that bins offering a near-perfect fit receive a disproportionately
    # higher score, reflecting the preference for high utilization and reduced fragmentation.
    priority_scores[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask]**2 + epsilon)

    return priority_scores
```
