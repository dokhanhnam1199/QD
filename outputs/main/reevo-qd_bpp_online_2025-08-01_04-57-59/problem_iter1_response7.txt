```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit (BF) strategy.

    The Best Fit strategy aims to minimize the remaining empty space in a bin
    after placing an item, among all bins that can accommodate it. This often
    leads to leaving larger gaps in other bins for potentially larger future items.

    Priority Calculation:
    1. For bins that *cannot* accommodate the item (remaining capacity < item size),
       a very low priority (negative infinity) is assigned to ensure they are not chosen.
    2. For bins that *can* accommodate the item (remaining capacity >= item size),
       the priority is calculated as the negative of the difference between the
       bin's remaining capacity and the item's size.
       This means:
       - A smaller difference (tighter fit) results in a larger (closer to zero or positive) priority score.
       - A perfect fit (difference = 0) results in a score of 0, which is the highest possible score
         for a fitting bin with this formula.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        The bin with the highest priority score (closest to 0 or positive) should be selected.
    """
    # Initialize all priorities to a very low value (negative infinity).
    # This ensures that bins that cannot fit the item will never be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins that can accommodate the current item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the priority score.
    # The score is the negative of the remaining space in the bin after placing the item.
    # This makes a smaller difference (tighter fit) correspond to a higher score (closer to 0).
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
