```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, enhancing Best Fit with a strong preference for exact fits.

    This strategy explicitly prioritizes bins that would be exactly filled by the item, effectively 'closing' them.
    Among bins that are not exactly filled but can still accommodate the item, it follows a Best Fit approach,
    aiming to leave the smallest possible remaining capacity. This combined approach optimizes bin utilization,
    reduces fragmentation by completing bins, and contributes to minimizing the total number of open bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit or an exact fit.
    """
    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate potential remaining space for all bins if the item were to be placed.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Define a small tolerance for floating point comparisons (e.g., for checking exact fits)
    # and to prevent division by zero for very small remaining spaces in the Best Fit calculation.
    tolerance_epsilon = 1e-9

    # 1. Identify bins where the item cannot fit. These bins will retain their default priority score of 0.
    # A bin can fit the item if its remaining capacity is greater than or equal to the item's size.
    can_fit_mask = bins_remain_cap >= item
    
    # 2. Identify "exact fits" among the bins that can actually fit the item.
    # An exact fit occurs when placing the item leaves approximately zero remaining space.
    exact_fit_mask = can_fit_mask & np.isclose(potential_remaining_space, 0.0, atol=tolerance_epsilon)
    
    # Assign a very high, distinct priority score for exact fits. This ensures that if an
    # exact fit is available, it will always be chosen over any non-exact fit.
    # The value must be sufficiently large to exceed any possible score from the inverse calculation (1/x).
    exact_fit_priority_score = 1e12 
    priority_scores[exact_fit_mask] = exact_fit_priority_score

    # 3. Identify "non-exact fits" among the bins that can fit the item.
    # These are bins that can accommodate the item but will result in a positive remaining space.
    non_exact_fit_mask = can_fit_mask & ~exact_fit_mask
    
    # For non-exact fits, apply a Best Fit-like strategy:
    # Prefer bins that leave the smallest amount of positive space remaining.
    # The score is inversely proportional to the remaining space.
    # Add `tolerance_epsilon` to the denominator to ensure stability and prevent division by zero
    # if `potential_remaining_space` is extremely small (but still positive).
    priority_scores[non_exact_fit_mask] = 1.0 / (potential_remaining_space[non_exact_fit_mask] + tolerance_epsilon)

    return priority_scores
```
