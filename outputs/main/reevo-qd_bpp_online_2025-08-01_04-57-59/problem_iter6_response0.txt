```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a tiered Best Fit heuristic with strong rewards for
    perfect and near-perfect fits.

    This strategy prioritizes bins based on a clear hierarchy:
    1. Perfect fits: Item fills the bin exactly, leaving 0 capacity.
    2. Near-perfect fits: Item leaves a very small, predefined amount of capacity.
    3. Standard best fits: Item fits, but leaves more than the 'near-perfect' threshold.
    Bins that cannot accommodate the item are assigned the lowest possible priority.

    The tiered scoring ensures that perfect/near-perfect fits are always preferred
    over any standard fit, regardless of the precise remaining capacity of the
    standard fit. Within the near-perfect tier, smaller remaining capacities are
    given quadratically higher scores, reinforcing the "fill-up" principle.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after fit for eligible bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Define a threshold for what constitutes a "near-perfect" fit.
    # This threshold assumes items and bin capacities are normalized, e.g., to 1.0.
    # A remaining capacity <= 0.05 (e.g., 5% of a standard bin capacity) is considered near-perfect.
    near_perfect_threshold = 0.05

    # --- Tiered Scoring Logic ---

    # Create masks for each tier based on remaining_after_fit
    perfect_fit_mask = (remaining_after_fit == 0)
    near_perfect_mask = (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_threshold)
    standard_fit_mask = (remaining_after_fit > near_perfect_threshold)

    # 1. Perfect Fits (remaining_after_fit == 0)
    # Assign a very high positive constant score to ensure highest priority
    scores[can_fit_mask][perfect_fit_mask] = 100.0

    # 2. Near-Perfect Fits (0 < remaining_after_fit <= near_perfect_threshold)
    # Score decreases quadratically from 10.0 down to 0.0 as remaining capacity increases
    # within the threshold. This strongly rewards smaller remaining capacities.
    scaled_rem_ratio = remaining_after_fit[near_perfect_mask] / near_perfect_threshold
    scores[can_fit_mask][near_perfect_mask] = 10.0 * (1 - scaled_rem_ratio**2)

    # 3. Standard Best Fits (remaining_after_fit > near_perfect_threshold)
    # Score is the negative of the remaining capacity. This follows the Best Fit principle:
    # smaller remaining capacity results in a less negative (higher) score.
    scores[can_fit_mask][standard_fit_mask] = -remaining_after_fit[standard_fit_mask]

    return scores
```
