```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing an aggressively enhanced Best Fit heuristic with a
    multi-stage non-linear reward system, focusing on maximizing the
    priority for perfect and near-perfect fits to minimize fragmentation
    and improve packing density.

    This version further amplifies the Best Fit principle by:
    1. Assigning a very high, distinct positive score for perfect fits
       (remaining capacity exactly 0). This makes perfect fits unequivocally
       the top choice, regardless of other small remaining capacities.
    2. Applying an even more pronounced non-linear (higher-order polynomial)
       reward for bins that result in a very small positive remaining capacity
       within a defined 'near-perfect' threshold. These scores will be positive,
       gradually decreasing towards zero as the remaining capacity approaches
       the threshold. This strongly incentivizes filling bins close to capacity.
    3. For remaining capacities above the threshold, a standard linear
       penalty is applied, resulting in negative scores that decrease
       linearly with increasing remaining capacity. This maintains the
       Best Fit preference for larger remaining capacities while clearly
       distinguishing them from highly desired fits.

    This multi-stage scoring ensures that perfect fits are always the top
    choice, followed by near-perfect fits, thereby strongly encouraging the
    filling of bins to their maximum capacity and reducing the creation of
    bins with small, unusable leftover spaces.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after fit for eligible bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Define a threshold for what constitutes a "near-perfect" fit.
    # This threshold assumes items and bin capacities are normalized, e.g., to 1.0.
    # A remaining capacity <= 0.05 (e.g., 5% of a standard bin) is considered near-perfect.
    # This value might need tuning based on typical item sizes in a specific problem context.
    near_perfect_threshold = 0.05

    # Power factor for the non-linear scaling for near-perfect fits.
    # A higher power_factor provides an even more aggressive incentive for very small
    # remaining capacities within the threshold. Increased from 4 in v1 to 5.
    power_factor = 5

    # Bonus score for a perfect fit, making it the highest possible priority.
    perfect_fit_bonus = 1000.0 # A large positive number

    # Temporary array to hold scores for eligible bins
    temp_scores = np.zeros_like(remaining_after_fit)

    # Case 1: Perfect Fit (remaining capacity is exactly 0)
    # These bins get the highest possible bonus score.
    perfect_fit_mask = (remaining_after_fit == 0)
    temp_scores[perfect_fit_mask] = perfect_fit_bonus

    # Case 2: Near-Perfect Fit (0 < remaining capacity <= near_perfect_threshold)
    # The score is a decaying positive value, ranging from perfect_fit_bonus (as remaining -> 0)
    # down to 0 (as remaining -> near_perfect_threshold).
    near_perfect_mask = (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_threshold)
    r_np = remaining_after_fit[near_perfect_mask]
    # Score smoothly decreases from perfect_fit_bonus to 0.
    # (r_np / near_perfect_threshold)**power_factor scales from ~0 to 1.
    temp_scores[near_perfect_mask] = perfect_fit_bonus * (1 - (r_np / near_perfect_threshold)**power_factor)

    # Case 3: Standard Fit (remaining capacity > near_perfect_threshold)
    # Apply a linear penalty (negative score), making larger remaining capacities less desirable.
    # The score is simply the negative of the remaining capacity. This is continuous
    # with the near-perfect scoring which hits 0 at the threshold.
    standard_fit_mask = remaining_after_fit > near_perfect_threshold
    r_sf = remaining_after_fit[standard_fit_mask]
    temp_scores[standard_fit_mask] = -r_sf

    # Assign calculated scores back to the main scores array for eligible bins
    scores[can_fit_mask] = temp_scores

    return scores
```
