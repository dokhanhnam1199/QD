```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit-like strategy,
    with an aggressive non-linear reward for perfect/near-perfect fits.

    This strategy aims to leave the smallest possible remaining capacity in a bin after placing the item,
    thereby 'snugly' fitting items and preserving larger empty spaces in other bins for future larger items.
    It aggressively rewards very small remaining capacities to minimize fragmentation, maximizing bin utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity),
        with a stronger, non-linear emphasis on near-perfect fits.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Define the power for aggressive non-linear rewarding.
    # A power > 1 (e.g., 2.0 for quadratic aggression) makes the reward for smaller
    # remaining space significantly higher, prioritizing very tight fits more strongly.
    tightness_aggressiveness_power = 2.0 

    # Epsilon to prevent division by zero for exact fits (potential_remaining_space = 0)
    # and provide a very high (but finite) score for such cases.
    epsilon = 1e-9

    # Apply the aggressive inverse calculation only to the bins where the item fits.
    # By raising potential_remaining_space to a power greater than 1, we ensure that
    # very small remaining spaces (near-perfect fits) result in an even smaller
    # denominator, thus yielding a disproportionately larger priority score.
    priority_scores[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask]**tightness_aggressiveness_power + epsilon)

    return priority_scores
```
