```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, combining Best Fit
    with a strategy to maximize bin efficiency and strategically preserve capacity.

    This version aggressively prioritizes near-perfect fits using a non-linear reward
    and also considers the current utilization (fullness) of bins to encourage closing them.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a more desirable placement.
    """
    # Tunable parameters for the heuristic
    # WEIGHT_FIT: Emphasizes finding a snug fit (minimizing post-placement remaining space).
    # WEIGHT_FULLNESS: Emphasizes putting items into bins that are already more full,
    #                  to help 'close' them and improve overall bin utilization.
    # FIT_EXPONENT: Makes the reward for very tight fits significantly higher (non-linear).
    # EPSILON: A small value to prevent division by zero when calculating inverse scores.
    WEIGHT_FIT = 2.0
    WEIGHT_FULLNESS = 1.0
    FIT_EXPONENT = 2.0
    EPSILON = 1e-9

    # Initialize priority scores. Bins that cannot fit will retain a score of 0.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the remaining space in each bin *after* placing the current item.
    potential_remaining_space = bins_remain_cap - item

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = potential_remaining_space >= 0

    # Apply calculations only to bins where the item can fit
    if np.any(can_fit_mask):
        # 1. Best Fit Component (Aggressive Non-linear Reward for Tight Fits):
        # This part prioritizes bins that would have the smallest remaining capacity
        # after the item is placed. The higher exponent (FIT_EXPONENT) makes this
        # preference for tight fits more pronounced, strongly penalizing larger
        # remaining spaces and rewarding smaller ones.
        fit_score_component = 1.0 / ((potential_remaining_space[can_fit_mask] + EPSILON)**FIT_EXPONENT)

        # 2. Bin Fullness Component (Maximizing Bin Efficiency/Utilization):
        # This part prioritizes bins that are already more utilized (i.e., have less
        # remaining capacity *before* the item is placed). This encourages filling
        # up existing bins to their capacity, aiming to 'close' them and minimize
        # the total number of bins used.
        fullness_score_component = 1.0 / (bins_remain_cap[can_fit_mask] + EPSILON)

        # Combine the two components using their respective weights.
        # The sum represents the overall priority score for each fit-able bin.
        priority_scores[can_fit_mask] = (
            WEIGHT_FIT * fit_score_component +
            WEIGHT_FULLNESS * fullness_score_component
        )

    return priority_scores
```
