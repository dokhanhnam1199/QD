```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit strategy.

    This version assigns a priority score that is the negative of the remaining capacity
    after placing the item. This approach naturally prioritizes bins that result in
    smaller remaining capacities (tighter fits), including perfect fits (zero remaining capacity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a very low (negative infinity) priority score.
        For bins that can fit, a higher score (closer to zero or positive) indicates a 'tighter' fit
        (smaller remaining capacity). Perfect fits receive a score of 0, which is the highest among valid bins.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores to negative infinity. This ensures that any bin
    # that cannot fit the item will have the lowest possible priority.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, we want to prioritize those that leave the *smallest*
    # amount of space remaining (Best Fit). To achieve this with a "highest priority" selection,
    # we use the negative of the potential remaining space as the score.
    #
    # - If remaining_space is 0 (perfect fit), score is 0 (highest priority for valid fits).
    # - If remaining_space is small positive (e.g., 0.1), score is -0.1.
    # - If remaining_space is large positive (e.g., 5.0), score is -5.0.
    #
    # This correctly ranks smaller positive remaining spaces higher (closer to 0)
    # than larger positive remaining spaces.
    priority_scores[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priority_scores
```
