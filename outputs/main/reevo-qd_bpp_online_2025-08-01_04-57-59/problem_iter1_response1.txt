```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic, 'Near-Perfect Fit (NPF)', prioritizes bins that will have
    the smallest possible remaining capacity after the item is placed,
    giving an exceptionally high priority to a perfect fit (where the bin becomes full).
    It uses an inverse relationship to emphasize very small remaining spaces.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher score indicates higher priority. Bins where the item does not
        fit have a score of -np.inf.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # A very small positive constant to handle potential division by zero
    # for perfect fits and to ensure finite, large scores for near-perfect fits.
    epsilon = 1e-9

    # Calculate the remaining capacity if the item were placed in each bin
    remaining_after_placement = bins_remain_cap - item

    # Identify bins where the item can fit (remaining capacity is non-negative,
    # allowing for a small floating point tolerance).
    can_fit_mask = remaining_after_placement >= -epsilon

    # --- Scoring Logic ---

    # 1. Prioritize perfect fits (remaining capacity is effectively zero) with infinite score.
    #    This ensures they are always chosen if available.
    perfect_fit_mask = np.isclose(remaining_after_placement, 0.0, atol=epsilon)
    scores[perfect_fit_mask] = np.inf

    # 2. For bins where the item fits but is not a perfect fit,
    #    assign a score based on the inverse of the remaining capacity.
    #    The smaller the remaining capacity, the higher the score.
    non_perfect_fit_mask = can_fit_mask & ~perfect_fit_mask
    if np.any(non_perfect_fit_mask): # Only calculate if there are such bins
        # Adding epsilon prevents division by zero if remaining_after_placement somehow becomes exactly zero
        # after filtering by perfect_fit_mask (should not happen, but for robustness).
        scores[non_perfect_fit_mask] = 1.0 / (remaining_after_placement[non_perfect_fit_mask] + epsilon)

    return scores
```
