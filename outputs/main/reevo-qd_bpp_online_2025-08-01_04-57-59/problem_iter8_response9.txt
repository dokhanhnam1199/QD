```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic with a strong positive reward for near-perfect fits.

    This strategy prioritizes bins that result in the smallest remaining capacity
    (Best Fit). It heavily rewards bins that become perfectly full (0 remaining capacity)
    or nearly perfectly full (remaining capacity below a small threshold), assigning
    them high positive scores. Bins with larger remaining capacities receive lower,
    potentially negative, scores. This aims to aggressively "close" bins and
    minimize fragmentation, which is crucial for overall packing efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (-infinity)
    # for bins that cannot accommodate the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item
    
    # Get the indices of bins that can fit the item
    fit_indices = np.where(can_fit_mask)[0]

    # If no bins can fit the item, return the initialized scores
    if len(fit_indices) == 0:
        return scores

    # Calculate remaining capacity after placing the item in eligible bins
    remaining_after_fit = bins_remain_cap[fit_indices] - item

    # Define thresholds and reward constants
    # The 'near_perfect_threshold' defines what constitutes a "near-perfect" fit.
    # Assuming bin capacities are normalized (e.g., a bin has capacity 1.0),
    # 0.05 implies that up to 5% of the bin capacity remaining is considered near-perfect.
    near_perfect_threshold = 0.05
    
    # Score for a perfect fit (remaining capacity is exactly 0). This is the highest priority.
    PERFECT_FIT_SCORE = 1000.0
    
    # Maximum score for a near-perfect fit (remaining capacity > 0 and <= near_perfect_threshold).
    # This value should be significantly positive but less than PERFECT_FIT_SCORE.
    MAX_NEAR_PERFECT_REWARD = 100.0 
    
    # --- Apply scoring logic based on remaining capacity ---

    # 1. Perfect Fits: remaining_after_fit == 0
    # These bins are completely filled and thus "closed" optimally.
    perfect_fit_mask = remaining_after_fit == 0
    scores[fit_indices[perfect_fit_mask]] = PERFECT_FIT_SCORE

    # 2. Near-Perfect Fits: 0 < remaining_after_fit <= near_perfect_threshold
    # These bins are almost full; prioritizing them helps minimize small, fragmented spaces.
    near_perfect_mask = (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_threshold)
    
    # Calculate a score that decreases linearly from MAX_NEAR_PERFECT_REWARD down to 0.
    # A smaller 'remaining_after_fit' (closer to a perfect fit) results in a higher score.
    # The term (1 - (r / threshold)) scales from nearly 1 (for r close to 0) to 0 (for r at threshold).
    scaled_reward = MAX_NEAR_PERFECT_REWARD * (1 - (remaining_after_fit[near_perfect_mask] / near_perfect_threshold))
    scores[fit_indices[near_perfect_mask]] = scaled_reward

    # 3. Other Fits: remaining_after_fit > near_perfect_threshold
    # For all other bins, we apply the standard Best Fit principle: prefer the tightest fit.
    # Assign a negative score proportional to the remaining capacity. A smaller (less negative)
    # remaining capacity results in a higher priority (closer to 0).
    other_fit_mask = remaining_after_fit > near_perfect_threshold
    scores[fit_indices[other_fit_mask]] = -remaining_after_fit[other_fit_mask]
    
    return scores
```
