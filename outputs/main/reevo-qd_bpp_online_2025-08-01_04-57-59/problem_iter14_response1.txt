```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing an enhanced Best Fit heuristic.

    This strategy strongly prioritizes perfect or near-perfect fits by assigning
    them strictly positive scores, ensuring they are always preferred over standard
    Best Fit candidates which receive negative scores. The aim is to
    aggressively 'fill up' bins and minimize fragmentation, leading to
    a reduced total number of bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate potential remaining capacity for all bins if the item were placed.
    potential_remaining = bins_remain_cap - item

    # Identify bins where the item can fit (remaining capacity must be non-negative).
    can_fit_mask = potential_remaining >= 0

    # Extract remaining capacities for only the bins where the item fits.
    remaining_for_valid_bins = potential_remaining[can_fit_mask]

    # --- Define Scoring Parameters ---
    # This threshold defines what constitutes a "near-perfect" fit.
    # Assuming a normalized bin capacity (e.g., 1.0), 0.05 means within 5% of being full.
    NEAR_PERFECT_THRESHOLD = 0.05

    # Score for a perfect fit (remaining capacity is exactly 0). This should be the highest.
    PERFECT_FIT_SCORE = 1.0

    # Base score for near-perfect fits (0 < remaining <= NEAR_PERFECT_THRESHOLD).
    # This value sets the maximum positive score for a near-perfect fit that isn't perfect.
    # We want these scores to be positive and decay as remaining capacity increases,
    # but always lower than PERFECT_FIT_SCORE.
    NEAR_PERFECT_MAX_SCORE_NON_PERFECT = 0.5

    # --- Apply Scoring Logic ---
    # Initialize scores for valid bins with the standard Best Fit principle:
    # negative of the remaining capacity. This serves as the default for bins
    # that fit but are not 'near-perfect' or 'perfect'.
    current_bin_scores = -remaining_for_valid_bins

    # 1. Identify and score perfect fits (remaining capacity is exactly 0).
    # These receive the highest priority.
    perfect_fit_mask_in_valid_bins = (remaining_for_valid_bins == 0)
    current_bin_scores[perfect_fit_mask_in_valid_bins] = PERFECT_FIT_SCORE

    # 2. Identify and score near-perfect fits (0 < remaining <= NEAR_PERFECT_THRESHOLD).
    # These receive positive scores, linearly decreasing from NEAR_PERFECT_MAX_SCORE_NON_PERFECT
    # down to 0 as remaining capacity approaches NEAR_PERFECT_THRESHOLD.
    near_perfect_fit_mask_in_valid_bins = (
        (remaining_for_valid_bins > 0) & (remaining_for_valid_bins <= NEAR_PERFECT_THRESHOLD)
    )
    # Check if there are any near-perfect fits to avoid division by zero if NEAR_PERFECT_THRESHOLD is 0
    # or if the mask is empty.
    if np.any(near_perfect_fit_mask_in_valid_bins):
        # Calculate scores for near-perfect fits.
        # The term (remaining / NEAR_PERFECT_THRESHOLD) scales the remaining capacity
        # from 0 to 1 within the threshold range. Subtracting it from 1 and
        # multiplying by the max score ensures a decreasing positive score.
        current_bin_scores[near_perfect_fit_mask_in_valid_bins] = \
            NEAR_PERFECT_MAX_SCORE_NON_PERFECT * (1 - remaining_for_valid_bins[near_perfect_fit_mask_in_valid_bins] / NEAR_PERFECT_THRESHOLD)

    # Assign the calculated scores for valid bins back to the main `scores` array
    # using the original `can_fit_mask`. Bins that could not fit remain at -np.inf.
    scores[can_fit_mask] = current_bin_scores

    return scores
```
