```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add an item to each bin using an enhanced Best Fit-like strategy.

    This strategy aims to:
    1. Provide stronger non-linear rewards for tight/near-perfect fits to encourage closing bins.
       This minimizes fragmentation by ensuring that bins are filled as completely as possible.
    2. Favor existing, partially filled bins over opening new (empty) ones when viable.
       This encourages higher utilization of current bins before creating new ones.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit or a preference
        due to the bin being partially filled.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Define constants for the heuristic
    epsilon_tight_fit = 1e-9  # A small positive value to prevent division by zero for perfect fits (0 remaining space)
    power_for_tight_fit = 2.0 # Power for non-linear reward: squaring makes very tight fits exponentially preferred.
                              # e.g., 0.1 remaining gives 100, 0.01 gives 10,000.

    # Calculate the core Best Fit score for bins that can fit.
    # A smaller potential_remaining_space (tighter fit) leads to a much higher score.
    core_bf_scores = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon_tight_fit)**power_for_tight_fit

    # --- Incorporate "Favor existing, partially filled bins" ---
    # Identify the maximum remaining capacity among all bins, which typically represents the capacity
    # of an empty (or "newly available") bin. This assumes a consistent bin size.
    max_initial_cap = 0.0
    if bins_remain_cap.size > 0:
        max_initial_cap = np.max(bins_remain_cap)

    # Define a penalty factor for bins that appear to be empty or "new".
    # This factor will reduce their priority compared to partially filled bins,
    # encouraging the use of bins already in circulation.
    penalty_for_empty_bin = 0.75 # A value less than 1.0 (e.g., 0.75) to slightly penalize empty bins
    epsilon_empty_check = 1e-6   # Tolerance for floating-point comparison when checking for 'empty' bins

    # Create a boolean mask for bins that are considered "empty" or "new".
    # This check is applied only to the subset of bins that can actually fit the item.
    is_empty_or_new_bin_mask = np.isclose(bins_remain_cap[can_fit_mask], max_initial_cap, atol=epsilon_empty_check)

    # Apply the penalty: multiply the core Best Fit score by the penalty_for_empty_bin
    # for those bins identified as empty/new. Partially filled bins retain their original core_bf_score.
    adjusted_scores = core_bf_scores
    adjusted_scores[is_empty_or_new_bin_mask] *= penalty_for_empty_bin

    # Assign the calculated and adjusted scores to the final priority_scores array.
    priority_scores[can_fit_mask] = adjusted_scores

    return priority_scores
```
