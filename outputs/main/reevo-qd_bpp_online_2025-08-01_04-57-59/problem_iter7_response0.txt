```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a more aggressive Best Fit-like strategy.

    This strategy strongly rewards perfect or near-perfect fits non-linearly to minimize remaining capacity
    and fragmentation, thereby maximizing bin utilization. It prioritizes filling existing bins as
    tightly as possible.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity).
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Hyperparameter to control the aggressiveness of the non-linear reward.
    # A higher value amplifies the priority for smaller remaining spaces.
    # Setting it to 2.0 makes the reward squared inverse, significantly penalizing
    # larger remaining spaces and heavily rewarding near-perfect fits.
    aggressiveness_power = 2.0

    # A small positive value to prevent division by zero if an item perfectly fills a bin
    # (potential_remaining_space = 0). It also ensures that perfect fits receive a very high,
    # but finite, priority score.
    epsilon = 1e-9

    # Apply the aggressive inverse power calculation only to the bins where the item fits.
    # This assigns a substantially higher score to bins where the item fits snugly,
    # aligning with the goal of aggressively rewarding perfect/near-perfect fits.
    # Using np.power ensures element-wise exponentiation.
    priority_scores[can_fit_mask] = 1.0 / (np.power(potential_remaining_space[can_fit_mask], aggressiveness_power) + epsilon)

    return priority_scores
```
