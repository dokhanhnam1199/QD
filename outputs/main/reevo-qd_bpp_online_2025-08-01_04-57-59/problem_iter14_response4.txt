```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic with an enhanced, more aggressive emphasis
    on minimizing remaining capacity, particularly for near-perfect fits.

    This strategy assigns a high positive priority score to perfect or very near-perfect
    fits, ensuring they are strictly preferred over less optimal fits. For other fits,
    it reverts to the standard Best Fit principle (negative score proportional to
    remaining capacity). The goal is to strongly encourage 'filling up' bins to
    reduce fragmentation and improve overall packing density by making very tight
    fits extremely attractive and always chosen over more fragmented options.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after fit for eligible bins.
    remaining_after_fit_for_valid_bins = bins_remain_cap[can_fit_mask] - item

    # Define a threshold for what constitutes a "near-perfect" fit.
    # This threshold assumes items and bin capacities are normalized, e.g., to 1.0.
    # A remaining capacity <= 0.05 (e.g., 5% of a standard bin) is considered near-perfect.
    near_perfect_threshold = 0.05

    # Initialize scores for valid bins with the standard Best Fit negative scores.
    # This covers the `remaining_after_fit_for_valid_bins > near_perfect_threshold` case.
    # A smaller remaining capacity results in a higher (less negative) score.
    temp_scores_for_valid_bins = -remaining_after_fit_for_valid_bins

    # Identify bins within the "near-perfect" range from the *filtered* remaining capacities.
    near_perfect_mask_in_valid_bins = remaining_after_fit_for_valid_bins <= near_perfect_threshold

    # Apply a distinct, strongly positive scoring for near-perfect fits.
    # The formula `2 * near_perfect_threshold - remaining` ensures that:
    # 1. A perfect fit (remaining=0) yields the highest score (2 * threshold).
    # 2. As `remaining` approaches `near_perfect_threshold`, the score decreases,
    #    reaching `near_perfect_threshold` when `remaining == near_perfect_threshold`.
    # 3. All scores for near-perfect fits will be positive and strictly greater than
    #    any score for a non-near-perfect fit (whose maximum score is just below
    #    `-near_perfect_threshold`). This guarantees near-perfect fits are always preferred.
    temp_scores_for_valid_bins[near_perfect_mask_in_valid_bins] = (
        2 * near_perfect_threshold - remaining_after_fit_for_valid_bins[near_perfect_mask_in_valid_bins]
    )

    # Assign the calculated scores back to the main `scores` array using the original mask.
    scores[can_fit_mask] = temp_scores_for_valid_bins

    return scores
```
