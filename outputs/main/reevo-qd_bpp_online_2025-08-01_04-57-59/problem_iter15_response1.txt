```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, combining Best Fit
    with bin utilization, using non-linear rewards.

    This strategy aims to:
    1. Aggressively prioritize near-perfect fits using a non-linear function to minimize fragmentation.
    2. Encourage filling bins to high utilization (close to 100% full) to reduce the number of open bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The maximum capacity of a single bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a more desirable placement.
    """
    # Tunable constants for weighting the components and controlling non-linearity.
    # These values can be adjusted based on desired heuristic behavior and problem characteristics.
    WEIGHT_BEST_FIT = 0.7      # Emphasizes leaving minimal remaining space
    WEIGHT_UTILIZATION = 0.3   # Emphasizes filling the bin as much as possible
    POWER_BEST_FIT = 2.0       # Higher values make "near-perfect fits" even more aggressively preferred.
                               # For example, (1-x)^2 drops faster than (1-x).

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate potential remaining space for all bins if the item were placed.
    potential_remaining_space = bins_remain_cap - item

    # Identify bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # If no bin can fit the item, return an array of zeros.
    if not np.any(can_fit_mask):
        return priority_scores

    # --- Component 1: Best Fit Score (Aggressive Non-linear Reward) ---
    # This component rewards bins that leave a very small amount of space remaining,
    # thereby promoting "snug" fits and minimizing internal fragmentation.
    
    # Normalize potential remaining space to a [0, 1] range relative to bin_capacity.
    # A value close to 0 indicates a near-perfect fit.
    norm_potential_remaining_space = potential_remaining_space[can_fit_mask] / bin_capacity
    
    # Clip values to ensure they are within [0, 1] due to potential floating point inaccuracies.
    norm_potential_remaining_space = np.clip(norm_potential_remaining_space, 0.0, 1.0)
    
    # Apply a non-linear transformation: (1 - normalized_space)^POWER_BEST_FIT.
    # A smaller normalized_space results in a value closer to 1.0. The power enhances this effect.
    best_fit_component = (1.0 - norm_potential_remaining_space)**POWER_BEST_FIT

    # --- Component 2: Bin Utilization Score (New Fill Percentage) ---
    # This component rewards bins that become highly utilized (close to 100% full)
    # after the item is placed. This helps in "closing" bins faster, reducing the
    # total number of bins used.

    # Calculate the new fill level of the bin after placing the item.
    # This is equivalent to (original_bin_fill + item_size)
    new_fill_level = bin_capacity - potential_remaining_space[can_fit_mask]
    
    # Normalize the new fill level to a [0, 1] range.
    utilization_component = new_fill_level / bin_capacity
    
    # Clip values to ensure they are within [0, 1].
    utilization_component = np.clip(utilization_component, 0.0, 1.0)

    # --- Combine the components with weights ---
    # Both components now produce scores roughly in the [0, 1] range, allowing for
    # meaningful weighted summation.
    combined_scores = (WEIGHT_BEST_FIT * best_fit_component) + \
                      (WEIGHT_UTILIZATION * utilization_component)

    # Assign the calculated combined scores to the bins that can fit the item.
    priority_scores[can_fit_mask] = combined_scores

    return priority_scores
```
