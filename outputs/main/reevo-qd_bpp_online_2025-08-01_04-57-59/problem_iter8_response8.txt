```python
import numpy as np

BIN_CAPACITY_ASSUMED = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Implements a greedy best-fit logic, strongly biased towards completing existing bins.

    This function prioritizes bins based on a tiered approach to achieve the desired packing strategy:
    1.  **Exact Fit (Highest Priority):** Bins where placing the item perfectly fills the remaining capacity.
        These are given the highest possible score to ensure they are chosen first.
    2.  **Partially Filled Bins (High Priority):** Among bins that can fit the item but not exactly,
        those that are already partially utilized (not empty) are preferred. Within this category,
        a 'Best Fit' approach is applied, meaning bins leaving less remaining space get higher priority.
        This encourages filling existing bins before opening new ones.
    3.  **Empty Bins (Lower Priority):** Bins that are currently empty but can fit the item.
        Within this category, a 'Best Fit' approach is applied, preferring bins that would be
        left with the least remaining space after placing the item.

    Bins that cannot fit the item will have a priority score of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for
                         calculating the current fill level.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Define constants for priority levels
    # A small value to handle floating-point comparisons (e.g., for exact zero or near-zero)
    epsilon = 1e-9

    # Score for exact fits, ensuring it's higher than any other possible combination
    EXACT_FIT_SCORE = 1e12

    # Offset for partially filled bins, ensuring they are preferred over empty bins,
    # even if an empty bin offers a slightly better 'best fit' in terms of remaining space.
    # This value needs to be significantly larger than the maximum possible `1/potential_remaining_space`.
    # Max possible 1/potential_remaining_space is 1/epsilon (1e9), so 1e12 works.
    PARTIAL_BIN_OFFSET = 1e9

    # Calculate potential remaining space after placing the item
    potential_remaining_space = bins_remain_cap - item

    # Create a boolean mask for bins where the item can actually fit.
    # Allowing for a tiny negative value due to floating-point precision.
    can_fit_mask = potential_remaining_space >= -epsilon

    # If no bin can fit the item, all priorities remain 0
    if not np.any(can_fit_mask):
        return priority_scores

    # --- Tier 1: Exact Fit ---
    # Identify bins where the item fits perfectly, leaving close to 0 remaining space.
    # This also implicitly ensures they are within the `can_fit_mask`.
    exact_fit_mask = can_fit_mask & (np.abs(potential_remaining_space) < epsilon)
    priority_scores[exact_fit_mask] = EXACT_FIT_SCORE

    # --- Calculate Best-Fit score for non-exact fits ---
    # Create a mask for bins that can fit, but not exactly
    non_exact_fit_mask = can_fit_mask & (~exact_fit_mask)

    if np.any(non_exact_fit_mask):
        # Calculate the base 'Best Fit' score for these bins.
        # A smaller `potential_remaining_space` (tighter fit) results in a larger score.
        # Add epsilon to the denominator to prevent division by zero for very small non-zero values
        # and ensure scores are large for near-exact fits, but not infinite.
        # It's applied only to the elements identified by `non_exact_fit_mask`.
        base_best_fit_scores_for_non_exact = 1.0 / (potential_remaining_space[non_exact_fit_mask] + epsilon)

        # --- Tier 2: Partially Filled Bins (Non-Exact Fit) ---
        # These are bins that are currently not empty (their `bins_remain_cap` is less than `BIN_CAPACITY_ASSUMED`)
        # and can fit the item (but not exactly).
        # We add `epsilon` to `BIN_CAPACITY_ASSUMED` to ensure empty bins are strictly treated as empty.
        partial_filled_bin_mask = non_exact_fit_mask & (bins_remain_cap < BIN_CAPACITY_ASSUMED - epsilon)

        # Assign scores: base best-fit score + a significant offset.
        # `partial_filled_bin_mask[non_exact_fit_mask]` creates a boolean mask that selects
        # the corresponding elements from `base_best_fit_scores_for_non_exact`.
        priority_scores[partial_filled_bin_mask] = (
            base_best_fit_scores_for_non_exact[partial_filled_bin_mask[non_exact_fit_mask]] + PARTIAL_BIN_OFFSET
        )

        # --- Tier 3: Empty Bins (Non-Exact Fit) ---
        # These are bins that are currently empty (their `bins_remain_cap` is approximately `BIN_CAPACITY_ASSUMED`)
        # and can fit the item (but not exactly).
        empty_bin_mask = non_exact_fit_mask & (bins_remain_cap >= BIN_CAPACITY_ASSUMED - epsilon)

        # Assign scores: just the base best-fit score.
        priority_scores[empty_bin_mask] = (
            base_best_fit_scores_for_non_exact[empty_bin_mask[non_exact_fit_mask]]
        )

    return priority_scores
```
