```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This strategy combines the Best Fit principle (prioritizing tight fits)
    with an additional bias towards bins that are already more filled.
    The goal is to optimize space utilization by:
    1. Primarily placing items into bins that result in the smallest remaining capacity
       after the item is placed (i.e., a "tight" fit), thus minimizing wasted space within a bin.
    2. Secondarily, among bins that offer a good fit, preferring those that are already
       closer to being full. This helps to 'close' bins more efficiently, potentially
       reducing the total number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a more desirable bin
        according to the combined strategy.
    """
    # A small positive value to handle cases where remaining space or bin capacity is zero
    # (e.g., a perfect fit) and prevent division by zero. It also ensures finite, large scores.
    epsilon = 1e-9

    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Bins that cannot fit will retain a score of 0.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Calculate the Best Fit component: Higher score for smaller potential_remaining_space.
    # This term ensures that bins where the item fits snugly receive a very high priority.
    # It's the dominant factor in this priority function.
    best_fit_component = np.zeros_like(bins_remain_cap, dtype=float)
    best_fit_component[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)

    # Calculate the "Prefer Fuller Bins" component: Higher score for smaller bins_remain_cap.
    # This term gives a boost to bins that are already closer to being full, encouraging
    # them to be filled up and 'closed' sooner.
    fuller_bin_component = np.zeros_like(bins_remain_cap, dtype=float)
    # Ensure we only apply this component to bins that can actually fit the item.
    fuller_bin_component[can_fit_mask] = 1.0 / (bins_remain_cap[can_fit_mask] + epsilon)

    # Combine the two components to get the final priority score.
    # Weights can be tuned to emphasize one strategy over the other.
    # `weight_best_fit` is typically higher as Best Fit is a strong heuristic.
    # `weight_fuller_bin` provides a secondary, fine-tuning effect.
    weight_best_fit = 1.0
    weight_fuller_bin = 0.1 # Example weight; adjust based on desired behavior

    priority_scores[can_fit_mask] = (
        weight_best_fit * best_fit_component[can_fit_mask] +
        weight_fuller_bin * fuller_bin_component[can_fit_mask]
    )

    return priority_scores
```
