```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    aggressively prioritizing tight fits and considering current bin utilization.

    This strategy aims to:
    1. Aggressively prioritize bins that result in a very small remaining capacity
       after placing the item (tight/near-perfect fits), using a non-linear reward.
    2. Combine this with the current utilization of the bin, preferring bins
       that are already more full, to maximize bin efficiency and strategically
       preserve larger capacities in other bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a more desirable bin.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0 for bins that cannot fit or have no priority.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # A small positive value to handle exact fits (0 remaining space) and prevent division by zero.
    # It also slightly biases exact fits to have a very high, but finite, score.
    epsilon = 1e-9

    # For bins that can fit the item, calculate a composite priority score.
    if np.any(can_fit_mask):
        # 1. Best Fit Component (Aggressive Non-Linear Reward):
        # This term gives a significantly higher score for smaller 'potential_remaining_space'.
        # Using square makes the reward for near-perfect fits much more pronounced.
        best_fit_term = 1.0 / (potential_remaining_space[can_fit_mask]**2 + epsilon)

        # 2. Current Bin Utilization Component:
        # This term rewards bins that are already more full (i.e., have smaller 'bins_remain_cap').
        # This encourages 'closing' bins by filling up those that are already significantly used.
        utilization_term = 1.0 / (bins_remain_cap[can_fit_mask] + epsilon)

        # Combine the two components multiplicatively.
        # A bin is highly prioritized if it results in a tight fit AND it is already well-utilized.
        priority_scores[can_fit_mask] = best_fit_term * utilization_term

    return priority_scores
```
