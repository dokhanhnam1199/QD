```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit (BF) heuristic.

    The Best Fit strategy aims to minimize the remaining capacity in a bin
    after placing an item. A perfect fit (0 remaining capacity) is ideal.
    Bins that cannot accommodate the item receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item can fit, calculate the remaining capacity after placing the item.
    # The Best Fit heuristic prioritizes minimizing this remaining capacity.
    # To convert this into a maximization problem (highest priority score wins),
    # we take the negative of the remaining capacity.
    # A smaller positive remaining capacity (e.g., 1.0) will result in a larger
    # (less negative) score (e.g., -1.0) compared to a larger positive
    # remaining capacity (e.g., 10.0), which gets a smaller score (-10.0).
    # A perfect fit (0 remaining capacity) gets a score of 0.0, which is the highest.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item
    scores[can_fit_mask] = -remaining_after_fit

    return scores
```
