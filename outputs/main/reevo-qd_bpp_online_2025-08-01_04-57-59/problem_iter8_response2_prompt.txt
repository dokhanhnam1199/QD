{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.\n# This is a common practice in normalized Bin Packing Problem contexts where\n# item sizes and capacities are scaled between 0 and 1. If your problem\n# uses different absolute capacities (e.g., 100, 500), this constant\n# should ideally be passed as an argument or configured externally.\nBIN_CAPACITY_ASSUMED = 1.0\n\n    \"\"\"Returns priority with which we want to add item to each bin,\n    using a strategy that strongly prioritizes Best Fit (maximizing the final\n    fill level of a bin) and secondarily prefers bins that are already\n    partially filled. This aims to improve overall bin utilization and reduce\n    the total number of bins used, aligning with the reflection.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for\n                         calculating the current fill level.)\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Bins that cannot fit the item will have a priority score of 0.\n        For bins that can fit, a higher score indicates a combination of\n        tighter fit after placement and a preference for already-started bins.\n    \"\"\"\n    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.\n    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Create a boolean mask for bins where the item can actually fit\n    can_fit_mask = bins_remain_cap >= item\n\n    # If no bins can fit, return all zeros as no bin has a valid priority\n    if not np.any(can_fit_mask):\n        return priority_scores\n\n    # Filter capacities for bins that can fit the item\n    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]\n\n    # --- Component 1: Best Fit (Future Fill Level) ---\n    # This component measures how full the bin would be *after* placing the item.\n    # Maximizing this value directly corresponds to choosing the bin that leaves the least\n    # remaining capacity (Best Fit). It's calculated as the proportion of the bin\n    # that would be occupied after the item is placed. Values range from item/BIN_CAPACITY to 1.0.\n    new_potential_fill_level = (BIN_CAPACITY_ASSUMED - (eligible_bins_remain_cap - item)) / BIN_CAPACITY_ASSUMED\n\n    # --- Component 2: Current Bin Fill Level (Utilization Bias) ---\n    # This component measures how full the bin *currently* is, before the new item is placed.\n    # Prioritizing already-filled bins encourages 'completing' existing bins before\n    # opening new ones, which helps reduce the total number of bins used.\n    # Values range from 0.0 (empty) to 1.0 (full).\n    current_fill_level = (BIN_CAPACITY_ASSUMED - eligible_bins_remain_cap) / BIN_CAPACITY_ASSUMED\n\n    # --- Combine Components ---\n    # The total priority score is a weighted sum of the two components.\n    # The 'new_potential_fill_level' (Best Fit) component is given a higher weight\n    # to ensure it serves as the primary criterion. This means that a bin offering\n    # a significantly tighter fit will generally be preferred.\n    # The 'current_fill_level' component acts as a strong secondary criterion or tie-breaker,\n    # boosting the priority of already-in-use bins when the tightness of fit\n    # among candidates is similar.\n    #\n    # A multiplier (e.g., 2.0) ensures that a small difference in the primary\n    # best-fit component can outweigh the entire range of the secondary fill component.\n    BEST_FIT_WEIGHT = 2.0\n    CURRENT_FILL_WEIGHT = 1.0\n\n    priority_scores[can_fit_mask] = (\n        BEST_FIT_WEIGHT * new_potential_fill_level +\n        CURRENT_FILL_WEIGHT * current_fill_level\n    )\n\n    return priority_scores\n\n[Reflection]\nPrioritize bins for best fit and current utilization to optimize packing density and minimize bin count.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}