```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an enhanced Best Fit strategy.

    This strategy aggressively rewards perfect or near-perfect fits to minimize remaining capacity
    and fragmentation, thereby maximizing bin utilization. It uses a non-linear scoring function
    that heavily penalizes larger remaining capacities and strongly rewards very small ones.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity),
        with a stronger non-linear emphasis on very small remaining spaces.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # A smaller value here indicates a 'tighter' fit.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. By default, bins that cannot fit the item will have a score of 0.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    # This means the potential_remaining_space must be non-negative.
    can_fit_mask = potential_remaining_space >= 0

    # Define parameters for the aggressive non-linear reward.
    # Epsilon prevents division by zero in case of a perfect fit (0 remaining space).
    # Power controls the agressiveness: a higher power amplifies the preference for very tight fits.
    epsilon = 1e-9  # Small value to handle perfect fits, preventing infinite scores.
    power = 3.0     # Power factor for aggressive non-linear reward. A value like 2.0 or 3.0
                    # makes the score increase much more rapidly as remaining space approaches zero,
                    # prioritizing near-perfect and perfect fits significantly.

    # Apply the inverse power function to the bins where the item can fit.
    # This formula ensures:
    # 1. Bins with smaller remaining space get significantly higher scores.
    # 2. The reward for very small remaining spaces is aggressively amplified due to `power`.
    #    For example, if remaining space is 0.1, score ~1/(0.1^power). If 0.01, score ~1/(0.01^power).
    #    The difference becomes much larger with higher 'power'.
    priority_scores[can_fit_mask] = 1.0 / ((potential_remaining_space[can_fit_mask] + epsilon)**power)

    return priority_scores
```
