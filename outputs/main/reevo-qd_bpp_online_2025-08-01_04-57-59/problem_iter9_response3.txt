```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin, extending the Best Fit
    strategy by adding a preference for existing, partially filled bins. This aims to
    encourage the 'closing' of bins and minimize fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         Assumes all bins have a consistent maximum capacity.
                         (Typically 1.0 if item sizes are normalized, as implied by float type).

    Returns:
        Array of same size as bins_remain_cap with priority score for each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit
        and/or a bin that is already more partially filled.
    """
    # A small positive value to prevent division by zero for perfect fits and provide a large score.
    epsilon = 1e-9

    # Assuming a standard bin capacity. In normalized Bin Packing, this is typically 1.0.
    # If the bins_remain_cap can be of different maximum capacities, this would need to be
    # passed as an explicit argument or inferred from context (e.g., max(bins_remain_cap)
    # if an empty bin is guaranteed to exist).
    BIN_CAPACITY = 1.0

    # Hyperparameter to control the strength of favoring already-filled bins.
    # A higher 'alpha' gives more preference to existing, partially filled bins.
    # If alpha is 0, the behavior reverts to a pure Best Fit (similar to priority_v1).
    # Setting it to 1.5 provides a noticeable boost to partially filled bins.
    alpha = 1.5

    # Calculate the remaining space in each bin after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize all priority scores to 0.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask to identify bins where the item can fit (remaining space is non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins where the item can fit:
    if np.any(can_fit_mask):
        # Extract relevant values for bins that can fit.
        fitting_potential_remaining_space = potential_remaining_space[can_fit_mask]
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

        # Calculate the base Best Fit score: inversely proportional to the remaining space.
        # This heavily penalizes loose fits and strongly rewards tight (near-perfect) fits.
        base_best_fit_score = 1.0 / (fitting_potential_remaining_space + epsilon)

        # Calculate the current fill ratio for these bins.
        # This represents how 'full' a bin already is, ranging from 0 (empty) to 1 (full).
        current_fill_ratio = (BIN_CAPACITY - fitting_bins_remain_cap) / BIN_CAPACITY

        # Apply a multiplicative bonus based on the current fill ratio.
        # This bonus prioritizes bins that are already partially filled, encouraging their
        # closure and reducing the number of open bins.
        # An empty bin (fill_ratio=0) gets a bonus factor of 1.0 (no change to base score).
        # A full bin (fill_ratio=1) gets a bonus factor of (1.0 + alpha).
        # This integrates the "favor existing, partially filled bins" aspect.
        priority_scores[can_fit_mask] = base_best_fit_score * (1.0 + alpha * current_fill_ratio)

    return priority_scores
```
