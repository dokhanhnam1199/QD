[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)",
    "response_id": 0,
    "obj": 4.487435181491823,
    "SLOC": 2.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response0.txt_stdout.txt",
    "code_path": "problem_iter1_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a Best Fit-like strategy.\n\n    This strategy aims to leave the smallest possible remaining capacity in a bin after placing the item,\n    thereby 'snugly' fitting items and preserving larger empty spaces in other bins for future larger items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Bins that cannot fit the item will have a priority score of 0.\n        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity).\n    \"\"\"\n    # Calculate the remaining capacity if the item were to be placed in each bin.\n    # This value indicates how much space would be left after placing the item.\n    potential_remaining_space = bins_remain_cap - item\n\n    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.\n    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).\n    can_fit_mask = potential_remaining_space >= 0\n\n    # For bins that can fit the item, we want to assign a priority.\n    # In a Best Fit strategy, we prefer bins that leave the *smallest* amount of space remaining.\n    # To translate \"smallest remaining space\" into \"highest priority score\", we use the inverse.\n    # A small epsilon is added to the denominator to prevent division by zero if an item\n    # perfectly fills a bin (potential_remaining_space = 0). It also slightly biases\n    # exact fits to have a finite, very large score.\n    epsilon = 1e-9 # A small positive value to handle exact fits (0 remaining space)\n\n    # Apply the inverse calculation only to the bins where the item fits.\n    # This assigns a high score to bins where the item fits snugly (potential_remaining_space is small).\n    # For example, if potential_remaining_space is 0.1, score is ~10. If it's 0.01, score is ~100.\n    priority_scores[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)\n\n    return priority_scores",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin,\n    implementing a Best Fit heuristic with a refined emphasis on minimizing\n    remaining capacity, especially for near-perfect fits.\n\n    This strategy aims to minimize the remaining capacity after placing an item\n    (Best Fit principle), but gives an even stronger preference to bins that result\n    in a very small, almost unusable, positive remaining capacity. This encourages\n    'filling up' bins as much as possible, beyond just finding the tightest fit,\n    to reduce overall fragmentation and improve packing density. Perfect fits\n    (0 remaining capacity) remain the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate a more desirable bin.\n    \"\"\"\n    # Initialize all priorities to a very low negative number (effectively -infinity)\n    # for bins that cannot accommodate the item.\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify bins where the item can fit\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate remaining capacity after fit for eligible bins\n    remaining_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # Define a threshold for what constitutes a \"near-perfect\" fit.\n    # This threshold assumes items and bin capacities are normalized, e.g., to 1.0.\n    # A remaining capacity <= 0.05 (e.g., 5% of a standard bin) is considered near-perfect.\n    near_perfect_threshold = 0.05 \n\n    # Apply a non-linear penalty for remaining capacity.\n    # If remaining_after_fit is within (0, near_perfect_threshold],\n    # the penalty is reduced, making the score less negative (higher priority).\n    # The reduction factor (r / threshold) makes smaller 'r' values result in\n    # even less penalty, smoothly transitioning to 0 for a perfect fit (r=0)\n    # and to standard penalty at the threshold.\n    scaled_remaining = np.where(\n        (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_threshold),\n        remaining_after_fit * (remaining_after_fit / near_perfect_threshold),\n        remaining_after_fit\n    )\n    \n    # If remaining_after_fit is exactly 0, scaled_remaining will be 0, and score will be 0.\n    # Otherwise, the score is the negative of the scaled remaining capacity.\n    scores[can_fit_mask] = -scaled_remaining\n\n    return scores",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response0.txt_stdout.txt",
    "code_path": "problem_iter3_code0.py",
    "code": "import numpy as np\n\n# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.\n# This is a common practice in normalized Bin Packing Problem contexts where\n# item sizes and capacities are scaled between 0 and 1. If your problem\n# uses different absolute capacities (e.g., 100, 500), this constant\n# should ideally be passed as an argument or configured externally.\nBIN_CAPACITY_ASSUMED = 1.0\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin,\n    using a strategy that combines Best Fit with a preference for filling\n    already-started bins, aiming to optimize overall bin utilization.\n\n    This strategy extends the 'tightest fit' idea from priority_v1 by adding\n    a component that favors bins that are already partially filled. This encourages\n    'completing' existing bins before using empty ones, promoting a more compact\n    overall packing solution.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for\n                         calculating the current fill level.)\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Bins that cannot fit the item will have a priority score of 0.\n        For bins that can fit, a higher score indicates a 'tighter' fit,\n        potentially boosted by the bin's current (pre-placement) fill level.\n    \"\"\"\n    # Calculate the remaining capacity if the item were to be placed in each bin.\n    # This indicates how much space would be left after placing the item.\n    potential_remaining_space = bins_remain_cap - item\n\n    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.\n    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Create a boolean mask for bins where the item can actually fit\n    # (remaining space must be non-negative).\n    can_fit_mask = potential_remaining_space >= 0\n\n    epsilon = 1e-9 # A small positive value to handle exact fits (0 remaining space)\n\n    # --- Component 1: Best Fit (Tightness) ---\n    # This component provides the core 'tightest fit' preference. It assigns a very high\n    # score for bins where the item fits snugly (potential_remaining_space is small),\n    # strongly prioritizing exact or near-exact fits.\n    best_fit_component = np.zeros_like(bins_remain_cap, dtype=float)\n    best_fit_component[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)\n\n    # --- Component 2: Current Bin Fill Level (Utilization Bias) ---\n    # This component aims to 'optimize overall bin utilization' by giving a slight\n    # preference to bins that are already partially filled (i.e., not empty).\n    # It is calculated as the proportion of the bin's total capacity that is currently\n    # occupied. For an empty bin (bins_remain_cap = BIN_CAPACITY_ASSUMED), this is 0.\n    # For a half-full bin, it's 0.5. For a nearly full bin, it's close to 1.0.\n    # This encourages continuing to fill existing bins before starting new ones,\n    # leading to fewer partially used bins.\n    current_fill_component = np.zeros_like(bins_remain_cap, dtype=float)\n    current_fill_component[can_fit_mask] = (BIN_CAPACITY_ASSUMED - bins_remain_cap[can_fit_mask]) / BIN_CAPACITY_ASSUMED\n\n    # --- Combine Components ---\n    # The total priority score is the sum of the Best Fit component and the current fill component.\n    # The Best Fit component typically provides a much larger value for very tight fits,\n    # ensuring that tightness remains the primary criterion.\n    # The current fill component acts as a tie-breaker or a slight boost,\n    # giving precedence to already-in-use bins when tightness is similar.\n    priority_scores[can_fit_mask] = best_fit_component[can_fit_mask] + current_fill_component[can_fit_mask]\n\n    return priority_scores",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response0.txt_stdout.txt",
    "code_path": "problem_iter4_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin,\n    implementing an enhanced Best Fit heuristic with a significantly stronger\n    emphasis on minimizing remaining capacity, particularly for near-perfect fits,\n    to aggressively reduce fragmentation.\n\n    This strategy extends the Best Fit principle by applying a more pronounced\n    non-linear penalty reduction for bins that result in a very small positive\n    remaining capacity. Perfect fits (0 remaining capacity) retain the highest\n    priority (score 0). For remaining capacities within a defined 'near-perfect'\n    threshold, the penalty is drastically reduced using a higher-order polynomial\n    decay (e.g., cubic), making these bins highly desirable. For capacities above\n    the threshold, a standard linear Best Fit penalty is applied. This aims to\n    'trap' items efficiently and prevent the creation of many sparsely filled bins,\n    thereby reducing overall fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate a more desirable bin.\n    \"\"\"\n    # Initialize all priorities to a very low negative number (effectively -infinity)\n    # for bins that cannot accommodate the item.\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify bins where the item can fit\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate remaining capacity after fit for eligible bins\n    remaining_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # Define a threshold for what constitutes a \"near-perfect\" fit.\n    # This threshold assumes items and bin capacities are normalized, e.g., to 1.0.\n    # A remaining capacity <= 0.05 (e.g., 5% of a standard bin) is considered near-perfect.\n    # This value might need tuning based on typical item sizes in a specific problem context.\n    near_perfect_threshold = 0.05\n\n    # Power factor for the non-linear scaling.\n    # A higher power_factor provides a more aggressive incentive for very small\n    # remaining capacities.\n    # k=2 for priority_v1 (quadratic scaling: r^2/T).\n    # k=3 for this improved version (cubic scaling: r^3/T^2).\n    # This makes the penalty for small 'r' values even smaller (closer to 0),\n    # thus making such bins significantly more attractive.\n    power_factor = 3\n    \n    # Apply a non-linear penalty for remaining capacity.\n    # If remaining_after_fit is within (0, near_perfect_threshold],\n    # the penalty is reduced significantly using a cubic function.\n    # The formula (r^k / T^(k-1)) ensures continuity at T (r=T gives T)\n    # and makes smaller 'r' values result in much less penalty (closer to 0).\n    scaled_remaining = np.where(\n        (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_threshold),\n        (remaining_after_fit ** power_factor) / (near_perfect_threshold ** (power_factor - 1)),\n        remaining_after_fit  # Standard linear penalty for remaining > threshold\n    )\n    \n    # If remaining_after_fit is exactly 0, scaled_remaining will be 0, and score will be 0,\n    # making perfect fits the highest priority.\n    # Otherwise, the score is the negative of the scaled remaining capacity.\n    scores[can_fit_mask] = -scaled_remaining\n\n    return scores",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response1.txt_stdout.txt",
    "code_path": "problem_iter6_code1.py",
    "code": "import numpy as np\n\n# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.\n# This is a common practice in normalized Bin Packing Problem contexts where\n# item sizes and capacities are scaled between 0 and 1. If your problem\n# uses different absolute capacities (e.g., 100, 500), this constant\n# should ideally be passed as an argument or configured externally.\nBIN_CAPACITY_ASSUMED = 1.0\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin,\n    using a strategy that strongly prioritizes Best Fit (maximizing the final\n    fill level of a bin) and secondarily prefers bins that are already\n    partially filled. This aims to improve overall bin utilization and reduce\n    the total number of bins used, aligning with the reflection.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for\n                         calculating the current fill level.)\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Bins that cannot fit the item will have a priority score of 0.\n        For bins that can fit, a higher score indicates a combination of\n        tighter fit after placement and a preference for already-started bins.\n    \"\"\"\n    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.\n    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Create a boolean mask for bins where the item can actually fit\n    can_fit_mask = bins_remain_cap >= item\n\n    # If no bins can fit, return all zeros as no bin has a valid priority\n    if not np.any(can_fit_mask):\n        return priority_scores\n\n    # Filter capacities for bins that can fit the item\n    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]\n\n    # --- Component 1: Best Fit (Future Fill Level) ---\n    # This component measures how full the bin would be *after* placing the item.\n    # Maximizing this value directly corresponds to choosing the bin that leaves the least\n    # remaining capacity (Best Fit). It's calculated as the proportion of the bin\n    # that would be occupied after the item is placed. Values range from item/BIN_CAPACITY to 1.0.\n    new_potential_fill_level = (BIN_CAPACITY_ASSUMED - (eligible_bins_remain_cap - item)) / BIN_CAPACITY_ASSUMED\n\n    # --- Component 2: Current Bin Fill Level (Utilization Bias) ---\n    # This component measures how full the bin *currently* is, before the new item is placed.\n    # Prioritizing already-filled bins encourages 'completing' existing bins before\n    # opening new ones, which helps reduce the total number of bins used.\n    # Values range from 0.0 (empty) to 1.0 (full).\n    current_fill_level = (BIN_CAPACITY_ASSUMED - eligible_bins_remain_cap) / BIN_CAPACITY_ASSUMED\n\n    # --- Combine Components ---\n    # The total priority score is a weighted sum of the two components.\n    # The 'new_potential_fill_level' (Best Fit) component is given a higher weight\n    # to ensure it serves as the primary criterion. This means that a bin offering\n    # a significantly tighter fit will generally be preferred.\n    # The 'current_fill_level' component acts as a strong secondary criterion or tie-breaker,\n    # boosting the priority of already-in-use bins when the tightness of fit\n    # among candidates is similar.\n    #\n    # A multiplier (e.g., 2.0) ensures that a small difference in the primary\n    # best-fit component can outweigh the entire range of the secondary fill component.\n    BEST_FIT_WEIGHT = 2.0\n    CURRENT_FILL_WEIGHT = 1.0\n\n    priority_scores[can_fit_mask] = (\n        BEST_FIT_WEIGHT * new_potential_fill_level +\n        CURRENT_FILL_WEIGHT * current_fill_level\n    )\n\n    return priority_scores",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]