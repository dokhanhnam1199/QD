{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.\n# This is a common practice in normalized Bin Packing Problem contexts where\n# item sizes and capacities are scaled between 0 and 1. If your problem\n# uses different absolute capacities (e.g., 100, 500), this constant\n# should ideally be passed as an argument or configured externally.\nBIN_CAPACITY_ASSUMED = 1.0\n\n    \"\"\"Returns priority with which we want to add item to each bin,\n    using a strategy that combines Best Fit with a preference for filling\n    already-started bins, aiming to optimize overall bin utilization.\n\n    This strategy extends the 'tightest fit' idea from priority_v1 by adding\n    a component that favors bins that are already partially filled. This encourages\n    'completing' existing bins before using empty ones, promoting a more compact\n    overall packing solution.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for\n                         calculating the current fill level.)\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Bins that cannot fit the item will have a priority score of 0.\n        For bins that can fit, a higher score indicates a 'tighter' fit,\n        potentially boosted by the bin's current (pre-placement) fill level.\n    \"\"\"\n    # Calculate the remaining capacity if the item were to be placed in each bin.\n    # This indicates how much space would be left after placing the item.\n    potential_remaining_space = bins_remain_cap - item\n\n    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.\n    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Create a boolean mask for bins where the item can actually fit\n    # (remaining space must be non-negative).\n    can_fit_mask = potential_remaining_space >= 0\n\n    epsilon = 1e-9 # A small positive value to handle exact fits (0 remaining space)\n\n    # --- Component 1: Best Fit (Tightness) ---\n    # This component provides the core 'tightest fit' preference. It assigns a very high\n    # score for bins where the item fits snugly (potential_remaining_space is small),\n    # strongly prioritizing exact or near-exact fits.\n    best_fit_component = np.zeros_like(bins_remain_cap, dtype=float)\n    best_fit_component[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)\n\n    # --- Component 2: Current Bin Fill Level (Utilization Bias) ---\n    # This component aims to 'optimize overall bin utilization' by giving a slight\n    # preference to bins that are already partially filled (i.e., not empty).\n    # It is calculated as the proportion of the bin's total capacity that is currently\n    # occupied. For an empty bin (bins_remain_cap = BIN_CAPACITY_ASSUMED), this is 0.\n    # For a half-full bin, it's 0.5. For a nearly full bin, it's close to 1.0.\n    # This encourages continuing to fill existing bins before starting new ones,\n    # leading to fewer partially used bins.\n    current_fill_component = np.zeros_like(bins_remain_cap, dtype=float)\n    current_fill_component[can_fit_mask] = (BIN_CAPACITY_ASSUMED - bins_remain_cap[can_fit_mask]) / BIN_CAPACITY_ASSUMED\n\n    # --- Combine Components ---\n    # The total priority score is the sum of the Best Fit component and the current fill component.\n    # The Best Fit component typically provides a much larger value for very tight fits,\n    # ensuring that tightness remains the primary criterion.\n    # The current fill component acts as a tie-breaker or a slight boost,\n    # giving precedence to already-in-use bins when tightness is similar.\n    priority_scores[can_fit_mask] = best_fit_component[can_fit_mask] + current_fill_component[can_fit_mask]\n\n    return priority_scores\n\n[Reflection]\nPrioritize tight fits and favor already-used bins for better utilization.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}