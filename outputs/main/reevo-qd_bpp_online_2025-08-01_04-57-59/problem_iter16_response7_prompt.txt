{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin,\n    implementing a Best Fit heuristic with distinct priority tiers for\n    perfect fits, near-perfect fits, and general best fits.\n\n    This strategy explicitly assigns the highest priority to bins that result\n    in a perfect fit (remaining capacity of 0). It then gives a significant\n    bonus to 'near-perfect' fits (where the remaining capacity is very small\n    but positive), ensuring these are preferred over general best fits.\n    For all other valid fits, it reverts to the standard Best Fit principle,\n    prioritizing the bin that leaves the smallest positive remaining capacity.\n    This aims to minimize overall fragmentation and improve packing density\n    by strongly encouraging the complete or almost complete filling of bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of current remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate a more desirable bin.\n    \"\"\"\n    # Calculate potential remaining capacity if the item were placed in each bin\n    potential_remaining = bins_remain_cap - item\n\n    # Initialize scores for all bins to a base value.\n    # Bins that cannot fit the item will eventually get -np.inf.\n    scores = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Define thresholds and constants for scoring tiers\n    # These values define the distinct priority levels.\n    PERFECT_FIT_SCORE = 1000.0  # Score for a perfect fit (remaining == 0)\n    NEAR_PERFECT_BONUS_MAGNITUDE = 100.0  # Maximum bonus for a near-perfect fit (as remaining approaches 0)\n    # Threshold for what constitutes a \"near-perfect\" fit.\n    # Assuming capacities are normalized, e.g., to 1.0, 0.05 means 5% of bin capacity.\n    near_perfect_threshold = 0.05\n\n    # --- Apply scoring logic based on potential_remaining for bins that can fit ---\n\n    # 1. Perfect Fit: If potential_remaining is exactly 0\n    perfect_fit_mask = potential_remaining == 0\n    scores[perfect_fit_mask] = PERFECT_FIT_SCORE\n\n    # 2. Near-Perfect Fit: If 0 < potential_remaining <= near_perfect_threshold\n    near_perfect_mask = (potential_remaining > 0) & (potential_remaining <= near_perfect_threshold)\n    if np.any(near_perfect_mask):\n        # Calculate a bonus that scales linearly from NEAR_PERFECT_BONUS_MAGNITUDE (for remaining close to 0)\n        # down to 0 (for remaining at the threshold).\n        # This bonus is added to the standard Best Fit score (-potential_remaining).\n        scaled_bonus = NEAR_PERFECT_BONUS_MAGNITUDE * (1 - potential_remaining[near_perfect_mask] / near_perfect_threshold)\n        scores[near_perfect_mask] = scaled_bonus - potential_remaining[near_perfect_mask]\n\n    # 3. Standard Best Fit: If potential_remaining > near_perfect_threshold\n    standard_bf_mask = potential_remaining > near_perfect_threshold\n    scores[standard_bf_mask] = -potential_remaining[standard_bf_mask] # Maximize score by minimizing remaining\n\n    # Finally, for any bin where the item simply cannot fit (potential_remaining < 0 or bins_remain_cap < item),\n    # assign a very low (negative infinity) score to ensure they are never chosen.\n    cannot_fit_mask = bins_remain_cap < item\n    scores[cannot_fit_mask] = -np.inf\n\n    return scores\n\n[Reflection]\nAssign differentiated scores based on strategic goals like minimizing remaining capacity and prioritizing perfect fits.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}