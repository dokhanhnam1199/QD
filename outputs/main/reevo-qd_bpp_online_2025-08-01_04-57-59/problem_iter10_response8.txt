```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an improved Best Fit strategy.

    This strategy directly uses the negative of the potential remaining space as a priority score.
    A smaller potential remaining space (tighter fit) results in a higher (less negative, or zero) priority score.
    This aims to minimize fragmentation by filling bins as snugly as possible, thereby preserving larger,
    more contiguous empty spaces in other bins for future larger items. This contributes to optimizing
    future item placements and minimizing the total number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a very low priority score (float('-inf'))
        to ensure they are never selected. For bins that can fit, a higher score
        (closer to zero or positive) indicates a 'tighter' fit (smaller remaining capacity).
        A perfect fit (remaining capacity of 0) will receive the highest possible score (0).
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores.
    # Assign float('-inf') to all bins initially. This ensures that any bin where the item
    # cannot fit (or where we don't calculate a specific score) will have the lowest priority.
    priority_scores = np.full_like(bins_remain_cap, fill_value=float('-inf'), dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, assign a priority score.
    # In a Best Fit strategy, we prefer bins that leave the *smallest* amount of space remaining.
    # By using the negative of the potential remaining space, a smaller remaining space (e.g., 1 unit)
    # results in a larger (less negative, e.g., -1) priority score. A perfect fit (0 remaining space)
    # results in a score of 0, which is the highest possible score for a valid fit.
    priority_scores[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priority_scores
```
