```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, implementing a Best-Fit heuristic.

    For each bin, if the item fits, the priority is calculated such that a tighter
    fit (leaving less remaining space in the bin) results in a higher priority score.
    Bins where the item cannot fit are assigned a very low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value.
    # This ensures that bins that cannot fit the item are effectively deprioritized.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can actually accommodate the item.
    # These are bins where the hypothetical_remaining capacity is non-negative.
    can_fit_mask = hypothetical_remaining >= 0

    # For bins where the item can fit, calculate their priority.
    # In Best-Fit, we want to minimize the remaining space.
    # To achieve this with a "highest priority" selection, we take the negative
    # of the remaining space. A smaller positive remaining space (tight fit)
    # will result in a larger (less negative, or even positive if it's a perfect fit)
    # priority score.
    # E.g., if remaining is 0.1, priority is -0.1. If remaining is 0.5, priority is -0.5.
    # -0.1 is greater than -0.5, so the tighter fit gets higher priority.
    priority_scores[can_fit_mask] = -hypothetical_remaining[can_fit_mask]

    return priority_scores
```
