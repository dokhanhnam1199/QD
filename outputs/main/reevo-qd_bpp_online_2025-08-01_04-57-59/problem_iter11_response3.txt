```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an enhanced Best Fit strategy.

    This strategy aims to leave the smallest possible remaining capacity, with a strong non-linear preference
    for very small remaining capacities (near-perfect fits). This promotes higher utilization of existing bins,
    thereby minimizing fragmentation and implicitly setting up for strategic future placements by preserving
    larger contiguous spaces in less-filled bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity).
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Define a power for the non-linear reward. A higher power (e.g., 2 or 3)
    # amplifies the preference for smaller remaining spaces. This effectively
    # gives a significantly higher score to 'near-perfect' fits (where
    # potential_remaining_space is very small, approaching zero).
    power = 2.0
    
    # A small positive value to prevent division by zero if an item perfectly
    # fills a bin (potential_remaining_space = 0). It also biases exact fits
    # to have an extremely high, but finite, score.
    epsilon = 1e-9

    # For bins that can fit the item, assign a priority based on the inverse
    # of the potential remaining space raised to the 'power'.
    # This non-linear transformation ensures that bins leaving minimal space
    # receive a disproportionately higher priority, strongly favoring them.
    # This strategy inherently favors existing bins that are close to being
    # filled, thus promoting high utilization and minimizing fragmentation
    # by consolidating items into fewer bins.
    priority_scores[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask]**power + epsilon)

    return priority_scores
```
