{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using an enhanced Best Fit strategy.\n\n    This strategy aims to strongly prioritize near-perfect fits to minimize fragmentation and maximize\n    the utilization of existing bins. It uses a non-linear reward function to aggressively\n    favor bins that result in very small remaining capacity after placing the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Bins that cannot fit the item will have a priority score of 0.\n        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity),\n        with a strong emphasis on very tight fits.\n    \"\"\"\n    # Calculate the remaining capacity if the item were to be placed in each bin.\n    # This value indicates how much space would be left after placing the item.\n    potential_remaining_space = bins_remain_cap - item\n\n    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.\n    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).\n    can_fit_mask = potential_remaining_space >= 0\n\n    # For bins that can fit the item, we assign a priority.\n    # To strongly reward near-perfect fits (i.e., very small potential_remaining_space)\n    # and to minimize fragmentation, we use a non-linear inverse square relation.\n    # This makes the score increase much more rapidly as potential_remaining_space approaches zero.\n    # A small epsilon is added to the denominator to prevent division by zero if an item\n    # perfectly fills a bin (potential_remaining_space = 0) and to provide a finite, very\n    # high score for such cases.\n    epsilon = 1e-9 # A small positive value to handle exact fits (0 remaining space)\n\n    # Apply the non-linear inverse square calculation only to the bins where the item fits.\n    # This ensures that bins offering a near-perfect fit receive a disproportionately\n    # higher score, reflecting the preference for high utilization and reduced fragmentation.\n    priority_scores[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask]**2 + epsilon)\n\n    return priority_scores\n\n[Reflection]\nQuantify outcome desirability (e.g., tight fit). Apply non-linear scoring to strongly reward best choices.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}