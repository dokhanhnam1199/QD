```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic with a refined emphasis on minimizing
    remaining capacity, especially for near-perfect fits.

    This strategy aims to minimize the remaining capacity after placing an item
    (Best Fit principle), but gives an even stronger preference to bins that result
    in a very small, almost unusable, positive remaining capacity. This encourages
    'filling up' bins as much as possible, beyond just finding the tightest fit,
    to reduce overall fragmentation and improve packing density. Perfect fits
    (0 remaining capacity) remain the highest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after fit for eligible bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Define a threshold for what constitutes a "near-perfect" fit.
    # This threshold assumes items and bin capacities are normalized, e.g., to 1.0.
    # A remaining capacity <= 0.05 (e.g., 5% of a standard bin) is considered near-perfect.
    near_perfect_threshold = 0.05 

    # Apply a non-linear penalty for remaining capacity.
    # If remaining_after_fit is within (0, near_perfect_threshold],
    # the penalty is reduced, making the score less negative (higher priority).
    # The reduction factor (r / threshold) makes smaller 'r' values result in
    # even less penalty, smoothly transitioning to 0 for a perfect fit (r=0)
    # and to standard penalty at the threshold.
    scaled_remaining = np.where(
        (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_threshold),
        remaining_after_fit * (remaining_after_fit / near_perfect_threshold),
        remaining_after_fit
    )
    
    # If remaining_after_fit is exactly 0, scaled_remaining will be 0, and score will be 0.
    # Otherwise, the score is the negative of the scaled remaining capacity.
    scores[can_fit_mask] = -scaled_remaining

    return scores
```
