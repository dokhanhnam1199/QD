```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation utilizes a "Relative Best Fit" or "Fill Ratio" heuristic.
    It prioritizes bins where the item fills the largest proportion of the
    *currently available* space within that bin. This approach directly aims
    to maximize the immediate utilization of a bin's remaining capacity.

    - Bins that cannot fit the item are assigned the lowest possible priority (-infinity).
    - For bins where the item can fit, the priority is calculated as the ratio
      of the item size to the current remaining capacity of the bin (`item_size / bins_remain_cap`).
    - A perfect fit (where `item_size == bins_remain_cap`) results in the
      highest possible score of 1.0.
    - Bins that are nearly full and can still accommodate the item will receive
      higher scores, encouraging efficient utilization of current bin space
      and minimizing fragmented remaining space within existing bins. This
      strategy strongly supports closing off bins efficiently.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize all priorities to negative infinity. This ensures that bins
    # which cannot accommodate the item are never chosen.
    priorities = np.full_like(bins_remain_cap, fill_value=-np.inf, dtype=float)

    # Create a boolean mask to identify bins where the item can fit.
    # An item fits if its size is less than or equal to the bin's remaining capacity.
    can_fit_mask = bins_remain_cap >= item

    # Further ensure that we don't attempt to divide by zero if a bin somehow has 0 capacity
    # but the item could still hypothetically fit (e.g., if item is also 0, though not typical for BPP).
    # For standard BPP with positive item sizes, `can_fit_mask` already implies `bins_remain_cap > 0`
    # for all bins where the item fits.
    valid_denominators_mask = (bins_remain_cap[can_fit_mask] > 0)

    # Calculate the 'Fill Ratio' for eligible bins.
    # The ratio is item_size / current_remaining_capacity.
    # This value will range from (close to) 0 (for a small item in a large remaining space) to 1.0 (for a perfect fit).
    priorities[can_fit_mask][valid_denominators_mask] = item / bins_remain_cap[can_fit_mask][valid_denominators_mask]
    
    # Handle the specific case where item is 0 and bin capacity is 0:
    # If item is 0 and bin capacity is also 0, it "fits" but the ratio 0/0 is NaN.
    # For practical BPP, items are usually positive. If a 0-size item is allowed,
    # it typically fits anywhere and doesn't change capacity. A ratio of 0.0 (or a neutral score)
    # might be appropriate here, but the current design assumes positive item sizes.
    # The `valid_denominators_mask` already handles cases where `bins_remain_cap` is 0.

    return priorities
```
