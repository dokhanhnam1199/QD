```python
import numpy as np

# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.
# This is a common practice in normalized Bin Packing Problem contexts where
# item sizes and capacities are scaled between 0 and 1. If your problem
# uses different absolute capacities (e.g., 100, 500), this constant
# should ideally be passed as an argument or configured externally.
BIN_CAPACITY_ASSUMED = 1.0

# Weights for the two strategic components.
# These can be tuned based on desired behavior:
# - A higher WEIGHT_TIGHTNESS emphasizes finding the "best fit" (least remaining space).
# - A higher WEIGHT_FILL_LEVEL emphasizes filling existing bins before starting new ones.
# By setting WEIGHT_TIGHTNESS > WEIGHT_FILL_LEVEL, we ensure that Best Fit is the primary
# criterion, and fill level acts as a secondary preference or tie-breaker.
WEIGHT_TIGHTNESS = 2.0
WEIGHT_FILL_LEVEL = 1.0


def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    combining 'Best Fit' (minimizing remaining space after placement) with
    a preference for 'maximizing existing bin utilization' (prioritizing
    bins that are already partially filled).

    This version normalizes both components to a similar scale (0-1) and
    uses configurable weights to balance their influence, making it more
    robust than simple inverse-proportion methods for Best Fit when combined
    with other objectives.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for
                         calculating the current fill level.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a more desirable bin
        based on the combined strategy.
    """
    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Create a boolean mask for bins where the item can actually fit
    # (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Filter capacities and potential remaining space for bins that can fit the item
    fit_bins_remain_cap = bins_remain_cap[can_fit_mask]
    fit_potential_remaining_space = potential_remaining_space[can_fit_mask]

    if fit_bins_remain_cap.size == 0:
        return priority_scores  # No bins can fit the item

    # --- Component 1: Normalized Best Fit (Tightness) ---
    # This component quantifies how "tight" the fit is. A smaller `potential_remaining_space`
    # means a tighter fit. We want to maximize this, so we take `1 - (normalized remaining space)`.
    # It ranges from (close to) 0 (very loose fit) to 1 (perfect fit, 0 remaining space).
    # To handle potential division by zero if BIN_CAPACITY_ASSUMED is 0, add a small epsilon
    # or ensure BIN_CAPACITY_ASSUMED is always positive.
    normalized_remaining_space = fit_potential_remaining_space / BIN_CAPACITY_ASSUMED
    tightness_score = 1.0 - normalized_remaining_space

    # --- Component 2: Normalized Current Bin Fill Level (Utilization Bias) ---
    # This component measures how full a bin currently is. A higher value means the bin
    # is more utilized. It ranges from 0 (empty bin) to 1 (fully utilized bin).
    current_fill_level = (BIN_CAPACITY_ASSUMED - fit_bins_remain_cap) / BIN_CAPACITY_ASSUMED

    # --- Combine Components with Weights ---
    # The total priority score is a weighted sum of the normalized tightness and fill level scores.
    # This allows for a tunable balance between finding the tightest fit and preferring
    # to fill already-started bins.
    priority_scores[can_fit_mask] = (WEIGHT_TIGHTNESS * tightness_score) + \
                                    (WEIGHT_FILL_LEVEL * current_fill_level)

    return priority_scores
```
