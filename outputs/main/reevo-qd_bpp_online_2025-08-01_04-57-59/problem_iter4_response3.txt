```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, prioritizing tighter fits.

    This strategy aims to leave the smallest possible remaining capacity in a bin after placing
    the item, thereby 'snugly' fitting items and preserving larger empty spaces in other bins
    for future larger items. It simplifies the scoring from v1 by directly using the negative
    of the remaining space as the priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a very low (negative infinity) priority score,
        ensuring they are never selected. For bins that can fit, a higher score (less negative)
        indicates a 'tighter' fit (smaller remaining capacity).
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores.
    # Default to -np.inf for all bins to ensure that bins which cannot fit the item
    # are never selected by np.argmax, as any valid score will be greater than -np.inf.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, assign a priority score.
    # To prioritize 'tighter' fits (i.e., smaller potential_remaining_space), we use
    # the negative of the remaining space as the score.
    # Examples:
    # - If remaining space is 0.0 (perfect fit), score is 0.0.
    # - If remaining space is 0.01 (very tight), score is -0.01.
    # - If remaining space is 0.5 (looser fit), score is -0.5.
    # When selecting the maximum priority score, 0.0 > -0.01 > -0.5, correctly
    # prioritizing the tightest fits. This avoids the need for an epsilon and division.
    priority_scores[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priority_scores
```
