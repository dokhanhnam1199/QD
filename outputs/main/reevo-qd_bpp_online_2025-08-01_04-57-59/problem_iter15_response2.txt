```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns a priority score for each bin, aiming to solve the online Bin Packing Problem
    by combining Best Fit strategy with a weighted consideration of bin utilization.

    This strategy aims to:
    1.  Aggressively prioritize near-perfect fits using a non-linear reward to minimize fragmentation.
    2.  Combine this best-fit preference with a bonus for bins that are already partially utilized,
        to maximize bin efficiency and strategically preserve empty bin capacity for larger future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The fixed total capacity of each bin. This is crucial for calculating
                      current bin utilization.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        A higher score indicates a more desirable bin for the item.
    """
    # Define hyperparameters for weighting and non-linearity. These can be tuned.
    W_BF = 1.0          # Weight for the Best Fit component
    W_UTIL = 0.5        # Weight for the Bin Utilization component
    POWER_BF = 3        # Exponent for Best Fit, makes it aggressively non-linear
    POWER_UTIL = 2      # Exponent for Bin Utilization, makes it more aggressive for fuller bins

    # A small positive value to prevent division by zero when a perfect fit occurs (potential_remaining_space = 0).
    epsilon = 1e-9

    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0 for bins where the item cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = potential_remaining_space >= 0

    # Apply calculations only to the bins where the item fits.
    fit_potential_remaining_space = potential_remaining_space[can_fit_mask]
    fit_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Component 1: Best Fit Score (BF_score) ---
    # This component aggressively rewards bins that result in the smallest remaining space
    # after placing the item. The inverse power function ensures that near-perfect fits
    # receive a disproportionately higher score.
    # `(1.0 / (x + epsilon))**POWER_BF` means small `x` (small remaining space) leads to very high scores.
    bf_score = (1.0 / (fit_potential_remaining_space + epsilon))**POWER_BF

    # --- Component 2: Bin Utilization Score (BS_score) ---
    # This component considers the current "fullness" of the bin.
    # (bin_capacity - bins_remain_cap) is the space already occupied in the bin.
    # Dividing by bin_capacity gives the current utilization ratio (0 for empty, 1 for full).
    # Raising to a power (POWER_UTIL) makes this reward more pronounced for bins that are already
    # significantly utilized, encouraging consolidation. Empty bins (utilization = 0) get a 0 bonus from this.
    current_utilization_ratio = (bin_capacity - fit_bins_remain_cap) / bin_capacity
    bs_score = current_utilization_ratio**POWER_UTIL

    # --- Combine the scores with weighted sum ---
    # The total priority score is a weighted sum of the Best Fit and Bin Utilization components.
    # W_BF is typically higher to ensure that a good fit remains the primary driver,
    # while W_UTIL provides a strategic nudge towards filling already-used bins
    # (or avoiding pristine empty ones unless the fit is excellent).
    priority_scores[can_fit_mask] = W_BF * bf_score + W_UTIL * bs_score

    return priority_scores
```
