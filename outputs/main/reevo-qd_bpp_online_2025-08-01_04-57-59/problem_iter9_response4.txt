```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit-like strategy,
    with an amplified non-linear reward for tight fits to encourage closing bins and minimize fragmentation.

    This strategy aims to leave the smallest possible remaining capacity in a bin after placing the item,
    thereby 'snugly' fitting items and preserving larger empty spaces in other bins for future larger items.
    The non-linear reward is made more aggressive to strongly prioritize bins that become
    nearly full after placing the item, facilitating bin closure and minimizing fragmentation.
    This also implicitly favors using existing, partially filled bins over opening new ones,
    as they are more likely to offer a tighter fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity).
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, we want to assign a priority.
    # In a Best Fit strategy, we prefer bins that leave the *smallest* amount of space remaining.
    # To translate "smallest remaining space" into "highest priority score", we use an inverse.
    # To implement "non-linear rewards to close bins and minimize fragmentation", we make this
    # inverse relation stronger by raising the denominator to a power (e.g., 2 or 3).
    # This significantly amplifies the score for very small remaining spaces (tight fits).
    epsilon = 1e-9 # A small positive value to handle exact fits (0 remaining space)

    # Power for the non-linear reward. A higher power amplifies the preference for tight fits,
    # making the heuristic strongly favor closing bins. A value of 2.0 or 3.0 provides
    # a much stronger non-linear reward than the default power of 1.0 (as in v1).
    power = 2.0 # Can be tuned; 2.0 provides a significant boost for tight fits.

    # Apply the amplified inverse calculation only to the bins where the item fits.
    priority_scores[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)**power

    return priority_scores
```
