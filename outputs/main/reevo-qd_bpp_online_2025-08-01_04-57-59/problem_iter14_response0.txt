```python
import numpy as np

# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.
# This is a common practice in normalized Bin Packing Problem contexts where
# item sizes and capacities are scaled between 0 and 1. If your problem
# uses different absolute capacities (e.g., 100, 500), this constant
# should ideally be passed as an argument or configured externally.
BIN_CAPACITY_ASSUMED = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This improved version builds upon the strategy from priority_v1,
    explicitly combining a strong "Best Fit" preference (maximizing the final
    fill level after item placement) with a secondary "Current Utilization" bias
    (favoring bins that are already partially filled). This dual approach
    is designed to minimize the total number of bins used by efficiently
    filling existing bins and minimizing wasted space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for
                         calculating the current fill level.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a combination of
        tighter fit after placement and a preference for already-started bins.
    """
    # Initialize priority scores. Default to 0 for bins that cannot fit or have no priority.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins where the item can actually fit
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the all-zero priority scores
    if not np.any(can_fit_mask):
        return priority_scores

    # Filter the remaining capacities to only include eligible bins
    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Component 1: Best Fit (Future State - Maximizing Final Fill Level) ---
    # This component captures the essence of "Best Fit": preferring the bin that
    # would be most full *after* the item is placed. It is calculated as the
    # proportion of the bin's total capacity that would be occupied.
    # Higher value means less empty space remaining and a tighter fit.
    # Mathematically: (current_used_capacity + item) / BIN_CAPACITY
    current_used_capacity_eligible = BIN_CAPACITY_ASSUMED - eligible_bins_remain_cap
    potential_fill_level = (current_used_capacity_eligible + item) / BIN_CAPACITY_ASSUMED

    # --- Component 2: Current Bin Utilization (Prioritizing Already-Started Bins) ---
    # This component encourages filling up bins that are already in use before
    # opening new ones. It's simply the current proportion of the bin that is filled.
    current_fill_level = current_used_capacity_eligible / BIN_CAPACITY_ASSUMED

    # --- Combine Components with Weighted Sum ---
    # The total priority score is a weighted sum.
    # The 'potential_fill_level' (Best Fit) is given a higher weight to ensure it
    # acts as the primary selection criterion, driving towards efficient space usage.
    # The 'current_fill_level' component serves as a strong tie-breaker and
    # secondary preference, encouraging the completion of existing bins.
    # The weights are chosen to reflect this hierarchy: a 2:1 ratio for Best Fit.
    BEST_FIT_WEIGHT = 2.0
    CURRENT_FILL_WEIGHT = 1.0

    priority_scores[can_fit_mask] = (
        BEST_FIT_WEIGHT * potential_fill_level +
        CURRENT_FILL_WEIGHT * current_fill_level
    )

    return priority_scores
```
