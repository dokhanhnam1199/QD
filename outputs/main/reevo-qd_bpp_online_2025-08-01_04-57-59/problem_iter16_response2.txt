```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an aggressively enhanced Best Fit strategy.

    This strategy further strengthens the best-fit principle by employing a cubic inverse relationship
    for priority scores, making the reward for near-perfect fits even more disproportionately high.
    The goal remains to minimize fragmentation and maximize bin utilization by heavily favoring bins
    that would have minimal remaining capacity after placing the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity),
        with an extremely strong emphasis on very tight fits.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Parameters for the non-linear reward function.
    # `epsilon_curve_offset`: A small positive constant added to the remaining space
    #   before the power operation. This prevents division by zero for perfect fits (0 remaining space)
    #   and slightly smooths the very steep curve for extremely small non-zero remaining spaces,
    #   ensuring numerically stable and extremely high (but finite) scores for tightest fits.
    # `power`: The exponent for the inverse relationship. A higher power (e.g., 3 instead of 2)
    #   makes the non-linear reward even more aggressive, giving a much stronger preference
    #   to smaller remaining capacities.
    epsilon_curve_offset = 1e-6 # Small offset for numerical stability and curve shape
    power = 3                    # Cubic power for more aggressive non-linear reward

    # Apply the non-linear inverse cubic calculation only to the bins where the item fits.
    # The term `(potential_remaining_space + epsilon_curve_offset)` ensures the denominator is
    # never exactly zero and controls the maximum priority score for perfect fits.
    effective_remaining_space = potential_remaining_space[can_fit_mask] + epsilon_curve_offset
    
    # Calculate priorities: 1.0 divided by the `effective_remaining_space` raised to the `power`.
    priority_scores[can_fit_mask] = 1.0 / (effective_remaining_space ** power)

    return priority_scores
```
