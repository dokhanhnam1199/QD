```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit-like strategy,
    prioritizing tighter fits and minimizing waste.

    This strategy aims to maximize the "fullness" of the bin after placing the item,
    or equivalently, minimize the remaining capacity, by scoring bins relative to the
    maximum remaining capacity among all bins that can fit the item. This ensures positive
    scores where a higher score indicates a tighter fit, without using reciprocals.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity).
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Get the potential remaining spaces for only the bins that can fit the item.
    fitting_bins_potential_rem_space = potential_remaining_space[can_fit_mask]

    # Only proceed if there is at least one bin that can fit the item.
    if fitting_bins_potential_rem_space.size > 0:
        # Find the maximum remaining space among the bins that *can* fit the item.
        # This value defines the 'worst' fit among the viable options (largest remaining space).
        max_possible_remaining_among_fitting = np.max(fitting_bins_potential_rem_space)

        # For bins that can fit the item, assign a priority score.
        # We want to assign a higher score to smaller potential_remaining_space.
        # By subtracting the actual potential_remaining_space from the maximum possible
        # remaining space, a smaller remaining space (tighter fit) results in a larger
        # positive score.
        # Example: If fitting_bins_potential_rem_space is [0.1, 0.5, 0.05]
        # max_possible_remaining_among_fitting would be 0.5.
        # Scores would be:
        # Bin with 0.1 remaining: 0.5 - 0.1 = 0.4
        # Bin with 0.5 remaining: 0.5 - 0.5 = 0.0
        # Bin with 0.05 remaining: 0.5 - 0.05 = 0.45
        # The tightest fit (0.05 remaining) correctly yields the highest score (0.45).
        priority_scores[can_fit_mask] = max_possible_remaining_among_fitting - fitting_bins_potential_rem_space

    return priority_scores
```
