```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority score for each bin, combining tight fit and bin fullness with weighted, non-linear scoring.

    This strategy aims to:
    1.  Aggressively reward near-perfect fits to minimize fragmentation, leaving minimal space in a bin.
    2.  Strategically consolidate items into existing, already fuller bins, reducing the number of partially filled bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        A higher score indicates a higher priority for placing the item.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores to 0. Bins that cannot fit will retain this score.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (potential remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Extract relevant capacities for bins that can fit the item
    fit_bins_remain_cap = bins_remain_cap[can_fit_mask]
    fit_potential_remaining_space = potential_remaining_space[can_fit_mask]

    # --- Component 1: Tight Fit Score (Best Fit-like) ---
    # This aggressively rewards bins that result in very little remaining space after placing the item.
    # The inverse function 1/x provides the desired non-linear reward: small x results in very high score.
    # epsilon_tight prevents division by zero for perfect fits (potential_remaining_space = 0)
    # and ensures perfect fits get an extremely high, but finite, score.
    epsilon_tight = 1e-9
    score_tight_fit = 1.0 / (fit_potential_remaining_space + epsilon_tight)

    # --- Component 2: Bin Fullness Score (Consolidation) ---
    # This rewards bins that are already relatively full before the item is placed.
    # A smaller bins_remain_cap (meaning the bin is more full) results in a higher score.
    # A slightly larger epsilon_fullness is used to smooth out the curve for general fullness
    # compared to the extreme sensitivity of tight fits.
    epsilon_fullness = 1e-3
    score_fullness = 1.0 / (fit_bins_remain_cap + epsilon_fullness)

    # --- Weighted Combination of Scores ---
    # Define weights to control the influence of each component.
    # W_tight_fit is set higher to prioritize "aggressive rewards for near-perfect fits" as per requirements.
    # W_fullness ensures "strategic consolidation into existing bins" contributes meaningfully.
    W_tight_fit = 0.7
    W_fullness = 0.3

    # Calculate the combined priority score for bins that can fit the item.
    combined_scores = (W_tight_fit * score_tight_fit) + (W_fullness * score_fullness)

    # Assign the calculated combined scores to the corresponding bins in the output array.
    priority_scores[can_fit_mask] = combined_scores

    return priority_scores
```
