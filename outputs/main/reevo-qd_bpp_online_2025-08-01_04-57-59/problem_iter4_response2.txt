```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit-like strategy,
    with enhanced handling for perfect fits and non-fitting bins.

    This strategy aims to leave the smallest possible remaining capacity in a bin after placing the item,
    thereby 'snugly' fitting items and preserving larger empty spaces in other bins for future larger items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of -infinity.
        Bins that can fit will have a score based on how tightly they fit:
        - Perfect fits (remaining capacity is 0) will have a score of +infinity.
        - Other fits: a higher score indicates a 'tighter' fit (smaller remaining capacity).
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to a very low value (negative infinity)
    # to denote "cannot fit" or "not a viable option". This ensures that if any
    # bin can fit, it will always have a higher score than a non-fitting bin.
    priority_scores = np.full_like(bins_remain_cap, fill_value=float('-inf'), dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Process only the bins where the item can fit
    if np.any(can_fit_mask):
        # Identify bins where the item fits perfectly (remaining space is exactly zero).
        # These are given the highest possible priority.
        perfect_fit_mask = (potential_remaining_space == 0) & can_fit_mask
        if np.any(perfect_fit_mask):
            priority_scores[perfect_fit_mask] = float('inf')

        # Identify bins where the item fits but not perfectly (remaining space is greater than zero).
        # These are scored based on the inverse of their remaining space: smaller remaining space
        # results in a higher score (Best Fit principle).
        non_perfect_fit_mask = (potential_remaining_space > 0) & can_fit_mask
        if np.any(non_perfect_fit_mask):
            # A small epsilon is added to the denominator to prevent division by zero
            # if `potential_remaining_space` was very close to zero but not exactly zero,
            # and to ensure finite, non-infinite scores for non-perfect fits.
            epsilon = 1e-9
            priority_scores[non_perfect_fit_mask] = 1.0 / (potential_remaining_space[non_perfect_fit_mask] + epsilon)

    return priority_scores
```
