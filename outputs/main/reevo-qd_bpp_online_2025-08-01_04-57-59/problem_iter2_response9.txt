```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, implementing an enhanced Best-Fit heuristic.

    This version emphasizes perfect fits and strives to optimize the remaining space to minimize overall waste.
    It prioritizes bins where the item fits perfectly with a distinct, very high score.
    Among other bins where the item fits, it applies a Best-Fit strategy, favoring bins that will have
    the least remaining space. Bins where the item cannot fit are assigned a very low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed in it.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-np.inf).
    # This ensures that bins that cannot fit the item are never chosen.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can actually accommodate the item (hypothetical_remaining must be non-negative).
    can_fit_mask = hypothetical_remaining >= 0

    # For bins where the item can fit, calculate their priority using the Best-Fit principle.
    # We want to minimize the remaining space. To achieve this with a "highest priority" selection,
    # we take the negative of the remaining space. A smaller positive remaining space (tighter fit)
    # results in a larger (less negative, or zero) priority score.
    priority_scores[can_fit_mask] = -hypothetical_remaining[can_fit_mask]

    # Enhanced prioritization for perfect fits:
    # A perfect fit (where hypothetical_remaining is exactly zero, or very close due to float precision)
    # is the most desirable outcome as it maximizes bin utilization and minimizes waste for that bin.
    # Assign an extremely high priority (infinity) to such bins to ensure they are always chosen
    # over any non-perfect fit, even if the non-perfect fit leaves a minuscule remaining capacity.
    perfect_fit_mask = np.isclose(hypothetical_remaining, 0.0)
    priority_scores[perfect_fit_mask] = np.inf

    return priority_scores
```
