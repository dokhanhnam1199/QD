```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """
    Returns priority with which to add an item to each bin,
    aggressively prioritizing tight fits and considering current bin utilization.

    This strategy aims to:
    1.  **Aggressively prioritize tight and near-perfect fits:** Bins that result in
        very little remaining capacity after placing the item receive a disproportionately
        higher score, using a non-linear (inverse square) reward. This minimizes
        fragmentation within individual bins.
    2.  **Combine 'best fit' with current bin utilization:** Among bins that offer
        comparable tight fits, those that are already more utilized (i.e., have less
        remaining capacity *before* placing the item) receive a slight boost in priority.
        This encourages filling up existing bins to capacity, maximizing bin efficiency
        and strategically preserving empty or largely empty bins for larger, future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The maximum capacity of each bin. Assumed to be constant for all bins.
                      Defaults to 1.0, a common normalized bin capacity.

    Returns:
        Array of same size as bins_remain_cap with priority score for each bin.
        Bins that cannot fit the item will have a priority score of 0.
        A higher score indicates a more preferred bin.
    """
    # Small positive epsilon to prevent division by zero for perfect fits (potential_remaining_space = 0).
    # It also ensures that very small remaining spaces still yield very high, but finite, scores.
    epsilon = 1e-9

    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, indicating no priority or inability to fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Apply calculations only to the bins where the item fits.
    if np.any(can_fit_mask):
        # Component 1: Aggressive Best Fit (non-linear reward for minimal fragmentation)
        # Using 1.0 / (x^2 + epsilon) makes the reward for very small remaining spaces
        # (x) significantly higher than for slightly larger ones. This fulfills
        # "aggressively prioritize tight and near-perfect fits using non-linear rewards".
        tight_fit_component = 1.0 / (potential_remaining_space[can_fit_mask]**2 + epsilon)

        # Component 2: Current Bin Utilization
        # This addresses "Combine 'best fit' with current bin utilization to maximize bin efficiency".
        # We calculate how full the bin currently is (normalized 0-1). Bins that are
        # already more utilized (i.e., have less remaining capacity before placement)
        # get a higher value here.
        current_utilization_normalized = (bin_capacity - bins_remain_cap[can_fit_mask]) / bin_capacity

        # Combine the scores. The `tight_fit_component` is the dominant factor due to its
        # aggressive non-linear nature. The `current_utilization_normalized` adds a
        # multiplicative boost (e.g., if a bin is 80% full, it adds a 1.8x multiplier)
        # subtly favoring fuller bins when tight fits are comparable. This helps in
        # 'closing off' bins efficiently.
        priority_scores[can_fit_mask] = tight_fit_component * (1.0 + current_utilization_normalized)

    return priority_scores
```
