```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using a hybrid strategy that combines 'Best Fit' with a preference
    for bins that are already more filled. This aims for a more strategic
    placement by not only seeking the tightest fit for the current item
    but also prioritizing the "closing" or further filling of bins
    that are already in use.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        A higher score indicates a more preferred bin.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # A small positive value to handle exact fits (0 remaining space) and avoid division by zero.
    epsilon = 1e-9 

    # --- Component 1: Best Fit (tightest fit for the current item) ---
    # Prioritizes bins that leave the smallest remaining capacity after placing the item.
    # A smaller potential_remaining_space results in a higher score.
    best_fit_scores = np.zeros_like(bins_remain_cap, dtype=float)
    best_fit_scores[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)

    # --- Component 2: Prioritize Already Fuller Bins ---
    # Prioritizes bins that currently have less remaining capacity (i.e., are more full).
    # This encourages 'closing' existing bins by filling them up further.
    # A smaller bins_remain_cap results in a higher score.
    # Ensure bins_remain_cap is positive where can_fit_mask is true (as item > 0 usually).
    fullness_preference_scores = np.zeros_like(bins_remain_cap, dtype=float)
    # Check for bins_remain_cap > 0 to prevent division by zero for bins that are already full
    # and cannot fit any item (although can_fit_mask generally handles this if item > 0).
    valid_denom_mask = bins_remain_cap[can_fit_mask] > 0
    fullness_preference_scores[can_fit_mask][valid_denom_mask] = \
        1.0 / (bins_remain_cap[can_fit_mask][valid_denom_mask] + epsilon)

    # --- Combine the two components ---
    # We can use a weighted sum to balance the two objectives.
    # For instance, a 70/30 split, giving more weight to the immediate best fit.
    # The weights (alpha, 1-alpha) can be tuned.
    alpha = 0.7  # Weight for Best Fit component
    
    priority_scores[can_fit_mask] = \
        alpha * best_fit_scores[can_fit_mask] + \
        (1 - alpha) * fullness_preference_scores[can_fit_mask]

    return priority_scores
```
