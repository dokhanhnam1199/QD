```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic with an enhanced, more aggressive emphasis
    on minimizing remaining capacity, particularly for near-perfect fits.

    This strategy assigns positive priority scores to perfect or very near-perfect
    fits, making them strictly preferred. For other fits, it reverts to the
    standard Best Fit principle (negative score proportional to remaining capacity).
    The goal is to strongly encourage 'filling up' bins to reduce fragmentation and
    improve overall packing density by making very tight fits extremely attractive.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after fit for eligible bins.
    # This array `remaining_after_fit_for_valid_bins` now only contains
    # remaining capacities for bins where the item fits.
    remaining_after_fit_for_valid_bins = bins_remain_cap[can_fit_mask] - item

    # Define a threshold for what constitutes a "near-perfect" fit.
    # This threshold assumes items and bin capacities are normalized, e.g., to 1.0.
    # A remaining capacity <= 0.05 (e.g., 5% of a standard bin) is considered near-perfect.
    near_perfect_threshold = 0.05

    # Create a temporary array for scores of valid bins.
    # By default, initialize these with the standard Best Fit negative scores.
    # This covers the `remaining_after_fit_for_valid_bins > near_perfect_threshold` case.
    temp_scores_for_valid_bins = -remaining_after_fit_for_valid_bins

    # Identify bins within the "near-perfect" range from the *filtered* remaining capacities.
    # This mask applies directly to `remaining_after_fit_for_valid_bins`.
    near_perfect_mask_in_valid_bins = remaining_after_fit_for_valid_bins <= near_perfect_threshold

    # Apply the aggressive non-linear scoring for near-perfect fits.
    # The formula `near_perfect_threshold - 2 * remaining` provides:
    # - `near_perfect_threshold` (e.g., 0.05) for a perfect fit (remaining=0),
    #   making it the highest possible score.
    # - A positive score that decreases as remaining capacity increases, reaching 0
    #   when remaining capacity is `near_perfect_threshold / 2`.
    # - A negative score (but still better than typical Best Fit) when remaining
    #   capacity is between `near_perfect_threshold / 2` and `near_perfect_threshold`.
    temp_scores_for_valid_bins[near_perfect_mask_in_valid_bins] = (
        near_perfect_threshold - 2 * remaining_after_fit_for_valid_bins[near_perfect_mask_in_valid_bins]
    )

    # Assign the calculated scores back to the main `scores` array using the original mask.
    scores[can_fit_mask] = temp_scores_for_valid_bins

    return scores
```
