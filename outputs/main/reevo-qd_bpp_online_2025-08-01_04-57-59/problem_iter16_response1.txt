```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    combining Best Fit with a strategy to maximize bin efficiency and
    strategically preserve capacity using exponential decay for scoring.

    This version prioritizes tighter fits and fuller bins using an exponential
    score function. This approach provides a smoother gradient than inverse
    power functions (like 1/x^N) and naturally assigns a maximum score (1.0)
    to a component when the ideal condition (e.g., perfect fit, completely full bin)
    is met, making the weighted combination more interpretable.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a more desirable placement.
    """
    # Tunable parameters for the heuristic
    # WEIGHT_FIT: Emphasizes finding a snug fit (minimizing post-placement remaining space).
    #             A higher value means more importance on tight fits.
    # WEIGHT_FULLNESS: Emphasizes putting items into bins that are already more full,
    #                  to help 'close' them and improve overall bin utilization.
    # FIT_DECAY_RATE: Controls how steeply the fit score drops as remaining space increases.
    #                 Higher rate means tighter fits (smaller remaining space) are much more preferred.
    # FULLNESS_DECAY_RATE: Controls how steeply the fullness score drops as remaining
    #                      capacity increases (i.e., as bin becomes emptier).
    #                      Higher rate means fuller bins (smaller remaining capacity) are much more preferred.
    WEIGHT_FIT = 2.5
    WEIGHT_FULLNESS = 1.5
    FIT_DECAY_RATE = 2.0
    FULLNESS_DECAY_RATE = 0.5

    # Initialize priority scores. Bins that cannot fit will retain a score of 0.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the remaining space in each bin *after* placing the current item.
    potential_remaining_space = bins_remain_cap - item

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = potential_remaining_space >= 0

    # Apply calculations only to bins where the item can fit
    if np.any(can_fit_mask):
        # Select only the relevant bin capacities for calculations
        eligible_potential_rem_space = potential_remaining_space[can_fit_mask]
        eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]

        # 1. Best Fit Component (Exponential Reward for Tight Fits):
        # We want to minimize 'potential_remaining_space'. The exponential decay
        # function np.exp(-x * rate) gives a score between 0 and 1 (inclusive),
        # where 0 remaining space (perfect fit) yields exp(0) = 1.0.
        fit_score_component = np.exp(-eligible_potential_rem_space * FIT_DECAY_RATE)

        # 2. Bin Fullness Component (Maximizing Bin Efficiency/Utilization):
        # We want to minimize 'bins_remain_cap' (meaning the bin is already fuller).
        # Similarly, exp(-x * rate) will give higher scores to bins with less remaining
        # capacity (i.e., more full bins).
        fullness_score_component = np.exp(-eligible_bins_remain_cap * FULLNESS_DECAY_RATE)

        # Combine the two components using their respective weights.
        # The higher the combined score, the more desirable the bin.
        priority_scores[can_fit_mask] = (
            WEIGHT_FIT * fit_score_component +
            WEIGHT_FULLNESS * fullness_score_component
        )

    return priority_scores
```
