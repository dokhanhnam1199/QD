```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add an item to each bin,
    implementing a strategy that aggressively prioritizes tight fits and
    favors already-utilized bins to minimize fragmentation and maximize bin efficiency.

    This strategy combines:
    1.  **Best Fit principle**: Rewards bins that result in the smallest remaining capacity,
        thereby achieving tight and near-perfect fits. The reward is non-linear,
        significantly increasing as the remaining space approaches zero.
    2.  **Bin Utilization**: Prioritizes bins that are already significantly utilized (i.e.,
        have less remaining capacity). This encourages "finishing off" bins that are
        already nearly full, preserving larger, less fragmented spaces in other bins
        for future, potentially larger, items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a higher priority.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This is the basis for the 'Best Fit' component.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Bins that cannot fit the item will retain a score of 0.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask to identify bins where the item can actually fit.
    # A bin can fit the item if the potential_remaining_space is non-negative.
    can_fit_mask = potential_remaining_space >= 0

    # Define small positive epsilon values to prevent division by zero
    # and to ensure perfect fits (remaining space = 0) result in a very high, finite score.
    # Different epsilons can be used for tuning the aggression of each component.
    epsilon_tight_fit = 1e-9  # For potential_remaining_space (tightness)
    epsilon_bin_util = 1e-9   # For bins_remain_cap (current utilization)

    # For the bins that can fit the item, calculate two contributing factors to the priority:
    
    # 1. Tight Fit Score (Non-linear reward for minimal fragmentation)
    # This component gives a significantly higher score as 'potential_remaining_space' approaches zero.
    # It addresses the "aggressively prioritize tight and near-perfect fits" requirement.
    tight_fit_score = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon_tight_fit)

    # 2. Bin Utilization Score (Strategic capacity preservation)
    # This component gives a higher score as 'bins_remain_cap' approaches zero, meaning
    # the bin is already heavily utilized. This helps in "finishing off" bins.
    # It addresses the "combine 'best fit' with current bin utilization to maximize bin efficiency"
    # and "strategically preserving capacity for future items" requirements.
    # Note: If a bin has 0 remaining capacity, it should generally not fit a non-zero item,
    # and thus would be filtered by `can_fit_mask`. If `item` is 0, this term would still
    # contribute to a high score for already full bins.
    utilization_score = 1.0 / (bins_remain_cap[can_fit_mask] + epsilon_bin_util)

    # Combine the two scores multiplicatively.
    # This ensures that bins offering both a tight fit AND being already well-utilized
    # receive the highest priority. The product further amplifies the aggressive nature
    # of the inverse rewards.
    priority_scores[can_fit_mask] = tight_fit_score * utilization_score

    return priority_scores
```
