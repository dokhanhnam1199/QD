```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin using a Best Fit strategy.

    This strategy aims to leave the smallest possible positive remaining capacity in a bin after placing the item,
    thereby 'snugly' fitting items and preserving larger empty spaces in other bins for future larger items.
    It uses the negative of the potential remaining space as the priority score, where 0 (exact fit)
    results in the highest priority score (0), and larger positive remaining spaces result in lower (more negative) scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a very low (negative infinity) priority score.
        For bins that can fit, a higher score (closer to 0) indicates a 'tighter' fit (smaller remaining capacity).
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # A negative value means the item does not fit.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores with a very low value (negative infinity) for all bins.
    # This ensures that bins where the item cannot fit will have the lowest possible priority
    # and will not be selected by argmax if any valid bin exists.
    priority_scores = np.full_like(bins_remain_cap, fill_value=np.finfo(np.float64).min, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, we assign a priority.
    # In a Best Fit strategy, we prefer bins that leave the *smallest* amount of space remaining.
    # To translate "smallest remaining space" into "highest priority score", we use the negative of this value.
    # An exact fit (potential_remaining_space == 0) will result in a score of 0, which is the highest possible.
    # A small positive remaining space (e.g., 0.1) will result in a score of -0.1.
    # A larger positive remaining space (e.g., 10.0) will result in a score of -10.0.
    # When `np.argmax` is used to select the bin, it will correctly pick the bin with the score closest to 0
    # (i.e., the smallest positive remaining space). This approach avoids the need for an epsilon
    # and handles exact fits (zero remaining space) naturally as the highest priority.
    priority_scores[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priority_scores
```
