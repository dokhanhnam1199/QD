```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit-like strategy,
    prioritizing options yielding the tightest fit and minimal waste.

    This strategy aims to leave the smallest possible remaining capacity in a bin after placing the item,
    thereby 'snugly' fitting items and preserving larger empty spaces in other bins for future larger items.
    The priority score is calculated as the negative of the potential remaining space. This direct
    linear scaling provides a simple yet effective way to map 'smaller remaining space' to 'higher priority score'
    without relying on inverse operations which can lead to disproportionately large scores or require epsilon handling.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of -np.inf (negative infinity),
        ensuring they are never selected.
        For bins that can fit, a higher score (closer to 0, or positive if using positive range for capacity)
        indicates a 'tighter' fit (smaller remaining capacity).
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value directly reflects the 'tightness' of the fit.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores with a very small negative number (-np.inf) for all bins.
    # This ensures that bins which cannot fit the item are always assigned the lowest possible priority.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    # A bin can fit the item if the potential remaining space is non-negative.
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, assign a priority score.
    # By taking the negative of the potential remaining space, we ensure:
    # 1. A smaller remaining space (e.g., 0.1) results in a larger (less negative) priority score (-0.1).
    # 2. A larger remaining space (e.g., 5.0) results in a smaller (more negative) priority score (-5.0).
    # A perfect fit (0 remaining space) will result in a priority score of 0, which is the highest
    # possible score for a valid bin, signifying the optimal 'tightest fit'.
    priority_scores[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priority_scores
```
