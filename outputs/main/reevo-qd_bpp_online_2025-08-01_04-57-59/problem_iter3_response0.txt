```python
import numpy as np

# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.
# This is a common practice in normalized Bin Packing Problem contexts where
# item sizes and capacities are scaled between 0 and 1. If your problem
# uses different absolute capacities (e.g., 100, 500), this constant
# should ideally be passed as an argument or configured externally.
BIN_CAPACITY_ASSUMED = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using a strategy that combines Best Fit with a preference for filling
    already-started bins, aiming to optimize overall bin utilization.

    This strategy extends the 'tightest fit' idea from priority_v1 by adding
    a component that favors bins that are already partially filled. This encourages
    'completing' existing bins before using empty ones, promoting a more compact
    overall packing solution.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for
                         calculating the current fill level.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit,
        potentially boosted by the bin's current (pre-placement) fill level.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit
    # (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    epsilon = 1e-9 # A small positive value to handle exact fits (0 remaining space)

    # --- Component 1: Best Fit (Tightness) ---
    # This component provides the core 'tightest fit' preference. It assigns a very high
    # score for bins where the item fits snugly (potential_remaining_space is small),
    # strongly prioritizing exact or near-exact fits.
    best_fit_component = np.zeros_like(bins_remain_cap, dtype=float)
    best_fit_component[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)

    # --- Component 2: Current Bin Fill Level (Utilization Bias) ---
    # This component aims to 'optimize overall bin utilization' by giving a slight
    # preference to bins that are already partially filled (i.e., not empty).
    # It is calculated as the proportion of the bin's total capacity that is currently
    # occupied. For an empty bin (bins_remain_cap = BIN_CAPACITY_ASSUMED), this is 0.
    # For a half-full bin, it's 0.5. For a nearly full bin, it's close to 1.0.
    # This encourages continuing to fill existing bins before starting new ones,
    # leading to fewer partially used bins.
    current_fill_component = np.zeros_like(bins_remain_cap, dtype=float)
    current_fill_component[can_fit_mask] = (BIN_CAPACITY_ASSUMED - bins_remain_cap[can_fit_mask]) / BIN_CAPACITY_ASSUMED

    # --- Combine Components ---
    # The total priority score is the sum of the Best Fit component and the current fill component.
    # The Best Fit component typically provides a much larger value for very tight fits,
    # ensuring that tightness remains the primary criterion.
    # The current fill component acts as a tie-breaker or a slight boost,
    # giving precedence to already-in-use bins when tightness is similar.
    priority_scores[can_fit_mask] = best_fit_component[can_fit_mask] + current_fill_component[can_fit_mask]

    return priority_scores
```
