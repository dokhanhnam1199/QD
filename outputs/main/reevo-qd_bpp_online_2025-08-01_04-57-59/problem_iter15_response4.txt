```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns a priority score for each bin, combining Best Fit with a strategy
    to maximize bin utilization after placement.

    This strategy aims to:
    1. Aggressively prioritize near-perfect fits (minimizing fragmentation) using a non-linear reward.
    2. Favor bins that become highly utilized (full) after the item is placed,
       to maximize bin efficiency and strategically finish off bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The total capacity of a single bin. Assumed to be uniform for all bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        A higher score indicates a more desirable bin for the item.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    # We allow a very small negative tolerance due to potential floating point inaccuracies.
    can_fit_mask = potential_remaining_space >= -1e-9

    # --- Heuristic Tuning Parameters ---
    # ALPHA_TIGHT_FIT: Controls the steepness of the exponential decay for the tight fit component.
    # Higher value means stronger preference for very small remaining space (more aggressive).
    ALPHA_TIGHT_FIT = 20.0

    # WEIGHT_TIGHT_FIT: Weight given to the tight fit component.
    WEIGHT_TIGHT_FIT = 1.0

    # WEIGHT_FINAL_UTILIZATION: Weight given to the final bin utilization component.
    # This encourages filling bins completely or nearly completely.
    WEIGHT_FINAL_UTILIZATION = 1.0

    # Apply the priority calculation only to the bins where the item fits.
    if np.any(can_fit_mask):
        # 1. Tight Fit Component (Aggressive non-linear reward for near-perfect fits)
        # We use an exponential decay: exp(-alpha * remaining_space).
        # This gives a high score (approaching 1.0) for very small remaining_space
        # and rapidly drops for larger remaining spaces, effectively prioritizing tight fits.
        # Clamp to 0.0 to handle any tiny negative values from floating point arithmetic.
        clamped_potential_remaining_space = np.maximum(0.0, potential_remaining_space[can_fit_mask])
        tight_fit_score = np.exp(-ALPHA_TIGHT_FIT * clamped_potential_remaining_space)

        # 2. Final Bin Utilization Component (Maximize bin efficiency and strategic filling)
        # This calculates how full the bin will be *after* the item is placed, normalized to [0, 1].
        # (bin_capacity - potential_remaining_space) represents the actual space occupied by items in the bin.
        # This component rewards bins that become highly utilized (full) after the item is placed.
        final_utilization_score = (bin_capacity - potential_remaining_space[can_fit_mask]) / bin_capacity

        # Combine the two components using weighted sum.
        # The balance between aggressively tight fits and overall bin utilization can be adjusted
        # by tuning WEIGHT_TIGHT_FIT and WEIGHT_FINAL_UTILIZATION.
        priority_scores[can_fit_mask] = (
            WEIGHT_TIGHT_FIT * tight_fit_score +
            WEIGHT_FINAL_UTILIZATION * final_utilization_score
        )

    return priority_scores
```
