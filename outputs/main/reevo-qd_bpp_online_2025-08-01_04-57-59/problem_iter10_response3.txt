```python
import numpy as np

# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.
# This is a common practice in normalized Bin Packing Problem contexts where
# item sizes and capacities are scaled between 0 and 1. If your problem
# uses different absolute capacities (e.g., 100, 500), this constant
# should ideally be passed as an argument or configured externally.
BIN_CAPACITY_ASSUMED = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a heuristic that primarily prioritizes 'Best Fit'
    (maximizing the final fill level of a bin after placement) and secondarily
    favors bins that are already partially utilized. This combined strategy aims
    to improve overall bin utilization and reduce the total number of bins used,
    aligning with the reflection.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for
                         calculating the current fill level.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a combination of
        tighter fit after placement and a preference for already-started bins.
    """
    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit, return all zeros as no bin has a valid priority
    if not np.any(can_fit_mask):
        return priority_scores

    # Filter capacities for bins that can fit the item
    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Component 1: Best Fit (Future Fill Level) ---
    # This component measures how full the bin would be *after* placing the item.
    # Maximizing this value corresponds to choosing the bin that leaves the least
    # remaining capacity (i.e., the 'tightest fit'). It's calculated as the
    # proportion of the bin that would be occupied after the item is placed.
    # Values range from (current_fill + item)/BIN_CAPACITY to 1.0.
    new_potential_fill_level = (BIN_CAPACITY_ASSUMED - (eligible_bins_remain_cap - item)) / BIN_CAPACITY_ASSUMED

    # --- Component 2: Current Bin Fill Level (Utilization Bias) ---
    # This component measures how full the bin *currently* is, before the new item is placed.
    # Prioritizing already-filled bins encourages 'completing' existing bins before
    # opening new ones, which helps reduce the total number of bins used.
    # Values range from 0.0 (empty) to 1.0 (full).
    current_fill_level = (BIN_CAPACITY_ASSUMED - eligible_bins_remain_cap) / BIN_CAPACITY_ASSUMED

    # --- Combine Components ---
    # The total priority score is a weighted sum of the two components.
    # The 'new_potential_fill_level' (Best Fit) component is given a higher weight
    # to make it the primary criterion. This means that, in general, a bin offering
    # a tighter fit will be preferred.
    # The 'current_fill_level' component acts as a strong secondary criterion.
    # The chosen weights allow for a degree of flexibility: a significant difference
    # in current utilization (e.g., choosing a near-full bin over a newly-opened one)
    # can potentially outweigh a very small difference in the 'best fit' quality,
    # leading to a balanced and robust heuristic.
    BEST_FIT_WEIGHT = 2.0
    CURRENT_FILL_WEIGHT = 1.0

    priority_scores[can_fit_mask] = (
        BEST_FIT_WEIGHT * new_potential_fill_level +
        CURRENT_FILL_WEIGHT * current_fill_level
    )

    return priority_scores
```
