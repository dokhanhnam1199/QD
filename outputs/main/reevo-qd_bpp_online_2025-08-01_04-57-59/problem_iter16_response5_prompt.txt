{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, combining Best Fit\n    with a strategy to maximize bin efficiency and strategically preserve capacity.\n\n    This version aggressively prioritizes near-perfect fits using a non-linear reward\n    and also considers the current utilization (fullness) of bins to encourage closing them.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Bins that cannot fit the item will have a priority score of 0.\n        For bins that can fit, a higher score indicates a more desirable placement.\n    \"\"\"\n    # Tunable parameters for the heuristic\n    # WEIGHT_FIT: Emphasizes finding a snug fit (minimizing post-placement remaining space).\n    # WEIGHT_FULLNESS: Emphasizes putting items into bins that are already more full,\n    #                  to help 'close' them and improve overall bin utilization.\n    # FIT_EXPONENT: Makes the reward for very tight fits significantly higher (non-linear).\n    # EPSILON: A small value to prevent division by zero when calculating inverse scores.\n    WEIGHT_FIT = 2.0\n    WEIGHT_FULLNESS = 1.0\n    FIT_EXPONENT = 2.0\n    EPSILON = 1e-9\n\n    # Initialize priority scores. Bins that cannot fit will retain a score of 0.\n    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate the remaining space in each bin *after* placing the current item.\n    potential_remaining_space = bins_remain_cap - item\n\n    # Create a boolean mask for bins where the item can actually fit.\n    can_fit_mask = potential_remaining_space >= 0\n\n    # Apply calculations only to bins where the item can fit\n    if np.any(can_fit_mask):\n        # 1. Best Fit Component (Aggressive Non-linear Reward for Tight Fits):\n        # This part prioritizes bins that would have the smallest remaining capacity\n        # after the item is placed. The higher exponent (FIT_EXPONENT) makes this\n        # preference for tight fits more pronounced, strongly penalizing larger\n        # remaining spaces and rewarding smaller ones.\n        fit_score_component = 1.0 / ((potential_remaining_space[can_fit_mask] + EPSILON)**FIT_EXPONENT)\n\n        # 2. Bin Fullness Component (Maximizing Bin Efficiency/Utilization):\n        # This part prioritizes bins that are already more utilized (i.e., have less\n        # remaining capacity *before* the item is placed). This encourages filling\n        # up existing bins to their capacity, aiming to 'close' them and minimize\n        # the total number of bins used.\n        fullness_score_component = 1.0 / (bins_remain_cap[can_fit_mask] + EPSILON)\n\n        # Combine the two components using their respective weights.\n        # The sum represents the overall priority score for each fit-able bin.\n        priority_scores[can_fit_mask] = (\n            WEIGHT_FIT * fit_score_component +\n            WEIGHT_FULLNESS * fullness_score_component\n        )\n\n    return priority_scores\n\n[Reflection]\nPrioritize strategic fit and bin utilization using weighted, non-linear scores for better performance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}