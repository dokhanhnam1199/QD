```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a
    Best Fit strategy with a strong emphasis on perfect or near-perfect fits.

    This function prioritizes bins that, after placing the item, would result in the
    smallest remaining capacity, similar to Best Fit. It employs a reciprocal scoring
    method (1 / (leftover + epsilon)) to heavily reward bins that allow for a perfect fit
    (zero leftover) or very small positive leftovers. This strategy aims for the
    tightest possible fits to minimize wasted space within bins and potentially
    reduce the total number of bins used.

    A very low priority (-infinity) is assigned to bins where the item does not fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher score means higher priority.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value here means the item does not fit.
    potential_leftover = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value (-infinity).
    # This ensures that bins where the item cannot fit will never be selected
    # unless no other bin is available (which would typically trigger opening a new bin).
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits.
    # An item fits if the potential remaining capacity is non-negative.
    fitting_bins_mask = potential_leftover >= 0

    # For bins where the item fits, set the priority.
    # To implement the emphasized Best Fit:
    # We use the reciprocal of the leftover space. This means:
    # - A leftover of 0 will get a very large positive priority (1/epsilon).
    # - A small positive leftover (e.g., 0.1) will get a high positive priority (e.g., 10).
    # - A larger positive leftover (e.g., 0.5) will get a lower positive priority (e.g., 2).
    # Maximizing this priority score will naturally pick the bin with the smallest
    # positive leftover space, strongly preferring perfect fits.
    
    # Use a small epsilon to prevent division by zero when leftover is exactly 0.
    # This also ensures that a perfect fit yields the highest possible score.
    epsilon = 1e-9 

    # Calculate scores only for the bins where the item fits.
    valid_leftovers = potential_leftover[fitting_bins_mask]
    priority_scores[fitting_bins_mask] = 1 / (valid_leftovers + epsilon)

    return priority_scores
```
