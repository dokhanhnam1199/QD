```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a combined strategy.

    This strategy aims to:
    1. Aggressively reward 'tight fits' (Best Fit-like), leaving minimal remaining space.
    2. Prefer bins that are already partially filled, encouraging consolidation and minimizing new bin usage.

    The scoring combines these two objectives using weighted, non-linear functions to prioritize
    optimal bin utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a more desirable placement.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Parameters for non-linear scoring and weighting
    epsilon = 1e-9 # A small positive value to handle exact fits (0 remaining space) and very full bins

    # Weights for combining the tight fit and bin fullness criteria
    # w_tight_fit is generally higher to emphasize minimizing fragmentation
    w_tight_fit = 1.0
    w_bin_fullness = 0.5

    # Exponents for non-linear aggression:
    # Higher exponent means smaller values (tighter fits, fuller bins) get disproportionately higher scores.
    power_tight_fit = 3.0 # Aggressively rewards near-perfect fits (e.g., if remaining space is 0.1, score is 1000; if 0.2, score is 125)
    power_bin_fullness = 2.0 # Rewards bins that are already relatively full (e.g., if bin_remain_cap is 0.1, score is 100; if 0.2, score is 25)

    # Calculate scores only for bins that can fit the item
    if np.any(can_fit_mask):
        eligible_potential_remaining_space = potential_remaining_space[can_fit_mask]
        eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]

        # Component 1: Tight Fit Score
        # Prioritizes bins where the item leaves the smallest possible remaining space.
        # This is the core Best Fit aspect, made aggressive with a high power to strongly favor near-perfect fits.
        tight_fit_component = w_tight_fit / (eligible_potential_remaining_space + epsilon)**power_tight_fit

        # Component 2: Bin Fullness Score
        # Prioritizes bins that are already more full (have less remaining capacity).
        # This encourages consolidating items into existing partially filled bins rather than
        # starting new ones or using largely empty bins for small items, helping to "close" bins faster.
        bin_fullness_component = w_bin_fullness / (eligible_bins_remain_cap + epsilon)**power_bin_fullness
        
        # Combine the components using weighted sum
        priority_scores[can_fit_mask] = tight_fit_component + bin_fullness_component

    return priority_scores
```
