```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This implementation utilizes an "Inverse Best Fit" heuristic:
    - Bins that cannot fit the item are assigned the lowest possible priority (-infinity).
    - For bins where the item can fit:
        - A perfect fit (remainder == 0) is assigned the highest possible priority (positive infinity).
        - For positive remainders, the priority is the inverse of the remainder
          (1 / remainder). This aggressively prioritizes smaller positive remainders,
          ensuring "snug" fits are preferred. A small epsilon is added to avoid division by zero
          if there was a floating point imprecision for a near-perfect fit that isn't exactly zero.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    
    # Calculate the remaining capacity for each bin if the item were placed in it.
    remainder_if_placed = bins_remain_cap - item
    
    # Initialize all priorities to negative infinity. This ensures that bins
    # which cannot accommodate the item are never chosen.
    priorities = np.full_like(bins_remain_cap, fill_value=-np.inf, dtype=float)
    
    # Create a boolean mask to identify bins where the item can fit (remainder is non-negative).
    can_fit_mask = remainder_if_placed >= 0
    
    # Get the actual indices of bins that can fit the item
    fitting_bin_indices = np.where(can_fit_mask)[0]
    
    # Get the remainders for only those bins that can fit
    fitting_remainders = remainder_if_placed[fitting_bin_indices]
    
    # Identify perfect fits (remainder is exactly zero) among the fitting bins
    perfect_fit_mask = (fitting_remainders == 0)
    
    # Assign highest priority (positive infinity) to perfect fits
    if np.any(perfect_fit_mask):
        priorities[fitting_bin_indices[perfect_fit_mask]] = np.inf
    
    # Identify positive remainders (remainder greater than zero) among the fitting bins
    positive_remainder_mask = (fitting_remainders > 0)
    
    # For positive remainders, calculate inverse priority (1 / remainder).
    # Add a small epsilon to avoid potential division by zero if remainder is extremely close
    # to zero due to floating point precision, ensuring numerical stability.
    epsilon = 1e-9 
    
    if np.any(positive_remainder_mask):
        priorities[fitting_bin_indices[positive_remainder_mask]] = \
            1.0 / (fitting_remainders[positive_remainder_mask] + epsilon)
            
    return priorities
```
