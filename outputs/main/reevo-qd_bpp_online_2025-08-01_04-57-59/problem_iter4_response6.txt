```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic with distinct preference for perfect
    and near-perfect fits to efficiently 'close' bins.

    This strategy establishes a clear three-tiered priority system:
    1. Perfect Fit: Bins that result in exactly 0 remaining capacity receive the
       highest possible score (np.inf), making them the absolute top choice.
    2. Near-Perfect Fit: Bins that result in a small, positive remaining capacity
       (below a defined threshold, e.g., 5% of bin size) receive a positive
       priority score. This score scales linearly from 1.0 (for remaining close to 0)
       down to just above 0 (for remaining at the threshold). This encourages
       filling bins very tightly, even if not perfectly.
    3. Other Fits: For all other bins where the item fits, a standard Best Fit
       approach is used. The score is the negative of the remaining capacity,
       meaning smaller remaining capacities (but still above the near-perfect
       threshold) receive higher (less negative) priority.

    This hierarchical scoring system strongly encourages filling bins to their
    maximum capacity, prioritizing 'closing' bins to reduce overall fragmentation
    and improve packing density.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after fit for eligible bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Define a threshold for what constitutes a "near-perfect" fit.
    # This threshold assumes items and bin capacities are normalized, e.g., to 1.0.
    # A remaining capacity <= 0.05 (e.g., 5% of a standard bin) is considered near-perfect.
    near_perfect_threshold = 0.05

    # --- Step 1: Handle Perfect Fits (remaining_after_fit == 0) ---
    perfect_fit_mask = (remaining_after_fit == 0)
    # Assign an extremely high priority for perfect fits to make them strictly highest.
    scores[can_fit_mask][perfect_fit_mask] = np.inf

    # --- Step 2: Handle Near-Perfect Fits (0 < remaining_after_fit <= near_perfect_threshold) ---
    # These should have positive scores, decreasing as remaining_after_fit increases.
    # The score ranges from ~1.0 (for remaining just above 0) down to ~0.0 (for remaining at threshold).
    near_perfect_mask = (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_threshold)
    remaining_near_perfect = remaining_after_fit[near_perfect_mask]

    # Calculate score: (threshold - remaining) / threshold.
    # This formula gives 1.0 when remaining is 0 (or very close), and 0.0 when remaining is threshold.
    scores[can_fit_mask][near_perfect_mask] = (near_perfect_threshold - remaining_near_perfect) / near_perfect_threshold

    # --- Step 3: Handle Other Fits (remaining_after_fit > near_perfect_threshold) ---
    # These should have negative scores, acting as a standard Best Fit (minimize remaining).
    # Scores will be -0.05 and lower, ensuring they are always less preferred than near-perfect fits.
    other_fits_mask = (remaining_after_fit > near_perfect_threshold)
    remaining_other = remaining_after_fit[other_fits_mask]
    scores[can_fit_mask][other_fits_mask] = -remaining_other

    return scores
```
