```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best-Fit heuristic with an explicit strong preference for perfect fits
    and improved robustness for floating-point comparisons.

    For each bin, if the item fits:
    - If it's a perfect fit (remaining capacity becomes 0 or very close to 0), it receives
      the highest possible priority (positive infinity). This strongly prioritizes using
      bins that will be completely filled by the current item.
    - Otherwise (it fits but not perfectly), the priority is calculated such that a tighter
      fit (leaving less remaining space) results in a higher priority score (less negative).
      This minimizes wasted space for that particular placement.
    Bins where the item cannot fit (remaining capacity is less than the item size) are
    assigned a very low (negative infinity) priority, ensuring they are never selected.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A negative value indicates the item does not fit.
    hypothetical_remaining = bins_remain_cap - item

    # Initialize priority scores for all bins to a very low value.
    # This ensures that bins where the item cannot fit are effectively deprioritized.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Define a small tolerance for floating-point comparisons.
    # Items are considered to fit if hypothetical_remaining is non-negative.
    # Perfect fit is when hypothetical_remaining is very close to zero.
    epsilon = 1e-9

    # 1. Identify bins where the item genuinely fits (remaining capacity is >= 0).
    #    This handles the case where item is too large for the bin.
    valid_fit_mask = hypothetical_remaining >= -epsilon # Allow slight negative due to float precision, but ensure it's a 'fit'

    # 2. Identify bins that are a perfect fit (remaining capacity will be effectively 0).
    #    Use np.isclose for robust floating-point comparison.
    perfect_fit_mask = np.isclose(hypothetical_remaining, 0.0, atol=epsilon) & valid_fit_mask

    # 3. Identify bins that are a "best fit" but not a perfect fit.
    #    These are bins where the item fits, but leaves some positive remaining capacity.
    best_fit_non_perfect_mask = valid_fit_mask & ~perfect_fit_mask

    # Apply scores:
    # For non-perfect best fits, prioritize less remaining space (Best-Fit logic).
    # A smaller positive remainder results in a larger (less negative) priority score.
    priority_scores[best_fit_non_perfect_mask] = -hypothetical_remaining[best_fit_non_perfect_mask]

    # For perfect fits, assign the highest possible priority (positive infinity).
    # This ensures that any perfect fit is always chosen over any non-perfect fit.
    priority_scores[perfect_fit_mask] = np.inf

    return priority_scores
```
