```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic with distinct priority tiers for
    perfect fits, near-perfect fits, and general best fits.

    This strategy explicitly assigns the highest priority to bins that result
    in a perfect fit (remaining capacity of 0). It then gives a significant
    bonus to 'near-perfect' fits (where the remaining capacity is very small
    but positive), ensuring these are preferred over general best fits.
    For all other valid fits, it reverts to the standard Best Fit principle,
    prioritizing the bin that leaves the smallest positive remaining capacity.
    This aims to minimize overall fragmentation and improve packing density
    by strongly encouraging the complete or almost complete filling of bins.

    This version structures the priority assignment by first establishing a
    base Best Fit score for all viable bins, and then applying specific
    overrides or bonuses for higher-priority scenarios (perfect fits,
    near-perfect fits) to ensure their preferential selection.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Define thresholds and constants for scoring tiers
    PERFECT_FIT_SCORE = 1000.0  # Score for a perfect fit (remaining == 0)
    # The magnitude of bonus for near-perfect fits, applied to standard BF score.
    NEAR_PERFECT_BONUS_MAGNITUDE = 100.0
    # Threshold defining what constitutes a "near-perfect" fit.
    # E.g., if bin capacity is 1.0, 0.05 means remaining capacity is <= 5% of bin size.
    near_perfect_threshold = 0.05

    # Calculate potential remaining capacity if the item were placed in each bin
    potential_remaining = bins_remain_cap - item

    # Initialize scores for all bins.
    # Start with a very low score (-np.inf) for all bins, signifying 'not usable'.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # 1. Base Score: Apply standard Best Fit logic for all bins that can fit the item.
    # For these bins, the score is based on minimizing the remaining capacity,
    # so we negate potential_remaining (higher remaining means lower score).
    can_fit_mask = potential_remaining >= 0
    scores[can_fit_mask] = -potential_remaining[can_fit_mask]

    # 2. Perfect Fit Bonus (Overwrite):
    # If a bin results in exactly 0 remaining capacity, it's a perfect fit.
    # This is the highest priority, so its score overwrites any previous score.
    perfect_fit_mask = potential_remaining == 0
    scores[perfect_fit_mask] = PERFECT_FIT_SCORE

    # 3. Near-Perfect Fit Bonus (Add-on):
    # For bins that are not perfect fits but result in a small positive remaining capacity.
    # The bonus scales inversely with the remaining capacity within the threshold.
    # This bonus is added to their existing Best Fit score.
    near_perfect_mask = (potential_remaining > 0) & (potential_remaining <= near_perfect_threshold)

    # Only calculate and apply bonus if there are any near-perfect bins to avoid empty slice warning
    if np.any(near_perfect_mask):
        # Calculate a bonus that scales linearly:
        # - Maximum bonus (NEAR_PERFECT_BONUS_MAGNITUDE) if remaining is very close to 0.
        # - Zero bonus if remaining is exactly at near_perfect_threshold.
        scaled_bonus = NEAR_PERFECT_BONUS_MAGNITUDE * (1 - potential_remaining[near_perfect_mask] / near_perfect_threshold)
        scores[near_perfect_mask] += scaled_bonus

    return scores
```
