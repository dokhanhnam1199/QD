```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing an improved Best Fit (BF) heuristic with strong preference for perfect fits.

    This strategy prioritizes bins that result in a perfect fit (0 remaining capacity)
    with an extremely high score. Among bins that do not yield a perfect fit but can
    accommodate the item, it applies the standard Best Fit logic by preferring
    bins that minimize the remaining capacity. Bins that cannot accommodate the item
    receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after placing the item for bins where it fits
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Identify perfect fits (remaining capacity is effectively zero)
    # Use a small tolerance for floating-point comparisons to handle precision issues.
    perfect_fit_mask = np.isclose(remaining_after_fit, 0.0, atol=1e-9)

    # Assign a very high score to perfect fits. This ensures they are always chosen first.
    # np.finfo(float).max provides the largest representable float.
    # This makes perfect fits absolutely preferred over any non-perfect fit.
    scores[can_fit_mask][perfect_fit_mask] = np.finfo(float).max

    # For other valid fits (not perfect), apply the standard Best Fit logic:
    # prioritize minimizing the remaining capacity by taking the negative of it.
    # This means a smaller positive remaining capacity results in a larger (less negative) score.
    imperfect_fit_mask = ~perfect_fit_mask
    scores[can_fit_mask][imperfect_fit_mask] = -remaining_after_fit[imperfect_fit_mask]

    return scores
```
