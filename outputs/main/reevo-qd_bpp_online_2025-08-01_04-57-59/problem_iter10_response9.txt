```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic with explicit tiered priority for
    perfect fits, very tight fits, and other fits, while ensuring feasibility.

    This strategy aims to:
    1.  Maximize the fill of a bin, giving the highest priority to perfect fits (0 remaining capacity).
    2.  Strongly prefer bins that result in a very small, positive remaining capacity
        (i.e., 'tight fits') to minimize fragmentation. The priority for these fits
        is scaled such that smaller remaining capacities get higher scores.
    3.  For other valid fits (where remaining capacity is larger), apply a standard
        Best Fit approach, where smaller remaining capacities yield higher scores
        (represented by less negative values).
    4.  Assign negative infinity to bins where the item does not fit, ensuring they are never chosen.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin. The scores are designed to
        create distinct priority tiers: Perfect Fit > Near-Perfect Fit > Standard Fit.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item or have not yet been evaluated.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # 1. Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after fit for eligible bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Separate masks for different priority tiers among fitting bins
    perfect_fit_mask = (remaining_after_fit == 0)
    
    # Define a threshold for what constitutes a "near-perfect" fit.
    # This threshold assumes items and bin capacities are normalized, e.g., to 1.0.
    # A remaining capacity <= 0.05 (e.g., 5% of a standard bin) is considered near-perfect.
    near_perfect_threshold = 0.05 
    near_perfect_fit_mask = (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_threshold)
    
    standard_fit_mask = (remaining_after_fit > near_perfect_threshold)

    # 2. Apply tiered scoring
    # Tier 1: Perfect Fits (highest priority)
    scores[can_fit_mask][perfect_fit_mask] = 1.0 

    # Tier 2: Near-Perfect Fits
    # These scores will fall within a range (e.g., 0.5 to <1.0), higher for tighter fits.
    if np.any(near_perfect_fit_mask):
        rem_npf = remaining_after_fit[near_perfect_fit_mask]
        # Linearly scale remaining_after_fit from (0, threshold] to a score range (0.5, 1.0)
        # 1 - (rem_npf / near_perfect_threshold) maps (0, threshold] to [0, 1)
        # 0.5 + 0.5 * [...] maps to (0.5, 1.0)
        scores[can_fit_mask][near_perfect_fit_mask] = 0.5 + 0.5 * (1 - (rem_npf / near_perfect_threshold))

    # Tier 3: Standard Best Fit
    # These scores will be negative, with smaller (closer to 0) absolute values for better fits.
    if np.any(standard_fit_mask):
        scores[can_fit_mask][standard_fit_mask] = -remaining_after_fit[standard_fit_mask]

    return scores
```
