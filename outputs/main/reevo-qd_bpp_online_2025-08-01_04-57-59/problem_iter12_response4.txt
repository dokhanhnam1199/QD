```python
import numpy as np

# For the purpose of this mutation, we will assume a default BIN_CAPACITY of 1.0.
# This is a common practice in normalized Bin Packing Problem contexts where
# item sizes and capacities are scaled between 0 and 1. If your problem
# uses different absolute capacities (e.g., 100, 500), this constant
# should ideally be passed as an argument or configured externally.
BIN_CAPACITY_ASSUMED = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using a strategy that strongly prioritizes Best Fit (minimizing remaining
    capacity after item placement) and secondarily prefers bins that are already
    partially filled. This aligns with the reflection to minimize bin count.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         (Assumed to be relative to a BIN_CAPACITY of 1.0 for
                         calculating the current fill level.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a combination of
        tighter fit after placement and a preference for already-started bins.
    """
    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit, return all zeros as no bin has a valid priority
    if not np.any(can_fit_mask):
        return priority_scores

    # Filter capacities for bins that can fit the item
    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Primary Criterion: Best Fit (Minimize Remaining Capacity After Placement) ---
    # Calculate the capacity that would remain in the bin after placing the item.
    # A smaller 'remaining_after_placement' value indicates a better fit.
    # To convert this into a 'higher is better' score for maximization, we take its negative.
    remaining_after_placement = eligible_bins_remain_cap - item
    best_fit_component = -remaining_after_placement

    # --- Secondary Criterion: Current Bin Fullness (Maximize Current Fill Level) ---
    # Calculate the current fill level of the bin. A higher 'current_fill_level'
    # indicates a bin that is already more utilized.
    current_fill_level = BIN_CAPACITY_ASSUMED - eligible_bins_remain_cap

    # --- Combine Components with Lexicographical Preference ---
    # The total priority score is a weighted sum designed to ensure that
    # the 'best_fit_component' (primary) dictates the ranking, and
    # 'current_fill_level' (secondary) acts as a tie-breaker.
    #
    # The 'LARGE_WEIGHT_PRIMARY' must be sufficiently large to ensure that
    # the smallest meaningful difference in 'best_fit_component' always outweighs
    # the largest possible difference in 'current_fill_level'.
    # For capacities normalized between 0 and 1, the maximum range of
    # `current_fill_level` is 1.0. A weight of 1000 ensures dominance over this range,
    # even considering potential floating-point precision issues for the primary term.
    LARGE_WEIGHT_PRIMARY = 1000.0

    priority_scores[can_fit_mask] = (
        LARGE_WEIGHT_PRIMARY * best_fit_component +
        current_fill_level
    )

    # This score ensures that:
    # 1. Bins that result in less remaining capacity after the item is placed
    #    (i.e., tighter fits) receive a higher priority score.
    # 2. Among bins that offer an equally tight fit (which is rare with floats,
    #    but conceptually important), those that are already more full (have less
    #    remaining capacity before placement) will be preferred as a tie-breaker.
    #    This helps consolidate items into existing bins, reducing the total bin count.

    return priority_scores
```
