```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This strategy implements an "Intelligent Best Fit" approach by combining
    multiple criteria:
    1.  Highest priority for bins that can perfectly fit the item (leaving 0 remaining capacity).
    2.  Among bins that cannot perfectly fit, prioritize those that result in the smallest
        positive remaining capacity (Best Fit principle).
    3.  As a tie-breaker for bins that offer a similar Best Fit (i.e., very close
        remaining capacities), prefer the bin that is already more filled. This
        encourages using existing bins more completely before "spreading" items
        to less-filled bins or potentially opening new ones.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin. It is assumed
                         that all bins originally have the same total capacity (e.g., 1.0),
                         and `bins_remain_cap` reflects the current available space in them.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a very low priority score (-np.inf),
        ensuring they are not selected unless no other option exists.
        A higher score indicates a higher priority for selection.
    """
    # Assuming a standard bin capacity. In typical BPP, this is 1.0.
    # If bins could have different capacities, this would need to be an array or passed.
    BIN_CAPACITY = 1.0

    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Bins that cannot fit will have -np.inf.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # If no bin can fit the item, return the initialized scores (-np.inf everywhere).
    if not np.any(can_fit_mask):
        return priority_scores

    # Extract relevant data for bins that can fit
    fitting_potential_rem_space = potential_remaining_space[can_fit_mask]
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # A small epsilon to prevent division by zero and to define "exact fit" proximity.
    epsilon = 1e-9

    # Determine which of the fitting bins are "exact fits" (remaining space effectively zero)
    is_exact_fit_mask = (fitting_potential_rem_space < epsilon)

    # Initialize scores for valid bins
    valid_bins_scores = np.zeros(np.sum(can_fit_mask), dtype=float)

    # --- Step 1: Prioritize exact fits (highest priority) ---
    # Assign an extremely high base score for exact fits.
    # Add a fractional part based on current fullness to act as a tie-breaker among exact fits.
    # (While unlikely, it's robust if multiple bins miraculously offer perfect fits).
    current_fullness_exact_fits = (BIN_CAPACITY - fitting_bins_remain_cap[is_exact_fit_mask])
    valid_bins_scores[is_exact_fit_mask] = 1e12 + (current_fullness_exact_fits / BIN_CAPACITY)

    # --- Step 2 & 3: Best Fit for non-exact fits, with fullness as tie-breaker ---
    non_exact_fit_mask = ~is_exact_fit_mask
    if np.any(non_exact_fit_mask):
        # Primary Best Fit component: Inverse of the potential remaining space.
        # Smaller remaining space -> larger inverse -> higher score.
        inverse_rem_space_scores = 1.0 / (fitting_potential_rem_space[non_exact_fit_mask] + epsilon)

        # Secondary tie-breaking component: Current fullness of the bin.
        # We want to prefer bins that are already more filled if the primary fit is similar.
        current_fullness_non_exact_fits = (BIN_CAPACITY - fitting_bins_remain_cap[non_exact_fit_mask])

        # A small weight ensures that the fullness component only influences ordering
        # when the inverse_rem_space_scores are very close (i.e., acts as a fine-grained tie-breaker).
        # This weight should be sufficiently smaller than the smallest meaningful difference
        # between inverse_rem_space_scores to ensure Best Fit is always dominant.
        weight_fullness = 1e-3 # Empirically chosen; can be tuned.

        valid_bins_scores[non_exact_fit_mask] = \
            inverse_rem_space_scores + (current_fullness_non_exact_fits * weight_fullness)

    # Assign the calculated scores back to the main priority_scores array
    priority_scores[can_fit_mask] = valid_bins_scores

    return priority_scores
```
