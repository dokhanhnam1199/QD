```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using a strategy that strongly prioritizes Best Fit (maximizing the final
    fill level of a bin) and secondarily prefers bins that are already
    partially filled. This directly implements the reflection's strategy
    and generalizes the bin capacity as an argument.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The total capacity of each bin. Defaults to 1.0,
                      consistent with normalized Bin Packing Problem contexts.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a combination of
        tighter fit after placement and a preference for already-started bins.
    """
    # Ensure bins_remain_cap is a numpy array for vectorized operations
    if not isinstance(bins_remain_cap, np.ndarray):
        bins_remain_cap = np.array(bins_remain_cap, dtype=float)

    # Initialize priority scores to zero for all bins.
    # Bins that cannot fit the item will retain this score.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins where the item can actually fit
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the all-zero priority array
    if not np.any(can_fit_mask):
        return priority_scores

    # Filter capacities for only those bins that are eligible
    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Component 1: Best Fit (Future Fill Level) ---
    # This component measures how full the bin would be *after* placing the item.
    # It represents the 'tightness' of the fit: higher values mean less space
    # remaining, which is the core idea of Best Fit.
    # Calculated as (current_filled_amount + item_size) / bin_capacity
    # which is equivalent to (bin_capacity - (remaining_capacity_before - item_size)) / bin_capacity
    new_potential_fill_level = (bin_capacity - (eligible_bins_remain_cap - item)) / bin_capacity

    # --- Component 2: Current Bin Fill Level (Utilization Bias) ---
    # This component measures how full the bin *currently* is, before the new item is placed.
    # Prioritizing bins that are already partially filled helps to 'complete'
    # existing bins before opening new ones, thereby reducing the total bin count.
    # Calculated as current_filled_amount / bin_capacity
    # which is equivalent to (bin_capacity - remaining_capacity_before) / bin_capacity
    current_fill_level = (bin_capacity - eligible_bins_remain_cap) / bin_capacity

    # --- Combine Components with Weighted Sum ---
    # The total priority score is a weighted sum.
    # BEST_FIT_WEIGHT is typically higher to ensure that finding a tight fit
    # for the item is the primary objective.
    # CURRENT_FILL_WEIGHT acts as a strong secondary criterion or tie-breaker,
    # encouraging the reuse of already-started bins when tightness of fit
    # is similar across multiple candidates.
    BEST_FIT_WEIGHT = 2.0  # Gives Best Fit (tightness) a stronger influence
    CURRENT_FILL_WEIGHT = 1.0 # Provides a bias towards already-used bins

    priority_scores[can_fit_mask] = (
        BEST_FIT_WEIGHT * new_potential_fill_level +
        CURRENT_FILL_WEIGHT * current_fill_level
    )

    return priority_scores
```
