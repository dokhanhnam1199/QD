```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    using an improved Best Fit strategy with explicit handling for perfect fits.

    This strategy aims to leave the smallest possible remaining capacity in a bin after placing the item,
    thereby 'snugly' fitting items and preserving larger empty spaces in other bins for future larger items.
    Perfect fits (where an item exactly fills a bin) receive the highest possible priority (infinity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        Perfect fits receive np.inf.
        For other bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity).
    """
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Identify bins where the item can fit (remaining space must be non-negative).
    # This also implicitly handles cases where bins_remain_cap is less than item (potential_remaining_space will be negative).
    can_fit_mask = potential_remaining_space >= 0

    # Identify bins where the item fits perfectly (remaining space is exactly zero).
    # This is the most desirable outcome, utilizing bin capacity fully.
    perfect_fit_mask = potential_remaining_space == 0

    # Assign infinite priority to bins that result in a perfect fit.
    # These bins should always be preferred above all others if available.
    priority_scores[perfect_fit_mask] = np.inf

    # For bins that can fit but are not perfect fits:
    # We want to prioritize those that leave the smallest positive amount of space remaining.
    # A small epsilon is added to the denominator to prevent division by zero for very small
    # positive remaining spaces (e.g., due to floating point inaccuracies for near-perfect fits).
    epsilon = 1e-9 # A small positive value for numerical stability in division

    # Create a mask for bins that can fit but are explicitly NOT perfect fits.
    other_fit_mask = can_fit_mask & ~perfect_fit_mask

    # Calculate priority for other fitting bins using the inverse of the remaining space.
    # A smaller remaining space results in a larger priority score, effectively preferring
    # 'snug' non-perfect fits.
    # potential_remaining_space for `other_fit_mask` is guaranteed to be > 0.
    priority_scores[other_fit_mask] = 1.0 / (potential_remaining_space[other_fit_mask] + epsilon)

    return priority_scores
```
