```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit-like strategy.

    This strategy aims to leave the smallest possible remaining capacity in a bin after placing the item,
    thereby 'snugly' fitting items and preserving larger empty spaces in other bins for future larger items.
    This version uses a linear scoring based on the inverse of remaining space, ensuring a higher score
    for tighter fits, particularly those leading to minimal remaining capacity or even closing a bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity).
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Get the potential remaining spaces for only those bins where the item fits.
    fitting_remaining_spaces = potential_remaining_space[can_fit_mask]

    if fitting_remaining_spaces.size > 0:
        # In this mutated strategy, we transform the potential remaining space linearly.
        # We want smaller remaining space to result in a higher priority score.
        # To achieve this, we can subtract the potential_remaining_space from a large enough value.
        # A natural large value is the maximum potential remaining space among the fitting bins.
        # This effectively inverts the scale: the smallest remaining space will get the highest score,
        # and the largest remaining space (among fitting bins) will get the lowest score (close to zero).

        # Find the maximum remaining space among the bins that can fit.
        # This serves as an anchor for our linear scoring.
        max_possible_fitting_rem_space = np.max(fitting_remaining_spaces)

        # Assign priority scores for bins that can fit.
        # Subtracting from `max_possible_fitting_rem_space` ensures that a smaller
        # `fitting_remaining_spaces` value yields a larger priority score.
        # Adding a small epsilon ensures that even bins resulting in the largest
        # possible remaining space (among fitting bins) get a positive score,
        # and also helps differentiate perfect fits (0 remaining space) slightly more.
        epsilon = 1e-9
        priority_scores[can_fit_mask] = (max_possible_fitting_rem_space - fitting_remaining_spaces) + epsilon

    return priority_scores
```
