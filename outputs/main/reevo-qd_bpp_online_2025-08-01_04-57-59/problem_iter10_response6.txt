```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an improved Best Fit strategy.

    This strategy leverages the specific values of item size and bin remaining capacities to make
    direct, non-arbitrary placement decisions. It aims to select the bin that results in the
    smallest non-negative remaining capacity after placing the item (a "tightest" fit).

    The priority score is defined as the negative of the remaining space in the bin after
    placing the item. This means:
    - A perfect fit (0 remaining space) yields the highest score (0).
    - A small positive remaining space (e.g., 0.1) yields a higher score (-0.1) than
      a large positive remaining space (e.g., 0.7 which yields -0.7).
    - Bins that cannot fit the item are assigned a very low (negative infinity) priority.

    This approach avoids arbitrary scaling factors or epsilon values by directly using the
    negative of the objective (minimize remaining space).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of -np.inf.
        For bins that can fit, a higher score (closer to or equal to 0) indicates a 'tighter' fit.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores to negative infinity. This ensures that any bin
    # where the item cannot fit is automatically given the lowest possible priority.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit
    # (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, assign a priority score.
    # The Best Fit strategy prefers bins that leave the *smallest* amount of space remaining.
    # By taking the negative of the `potential_remaining_space`, smaller remaining values
    # become larger (less negative or zero) priority scores, effectively ranking them
    # higher. A perfect fit (0 remaining space) will yield a priority score of 0,
    # which is the highest possible score for a valid placement.
    priority_scores[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priority_scores
```
