```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit-like strategy.

    This strategy aims to leave the smallest possible remaining capacity in a bin after placing the item,
    thereby 'snugly' fitting items and preserving larger empty spaces in other bins for future larger items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity).
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, we want to assign a priority.
    # In a Best Fit strategy, we prefer bins that leave the *smallest* amount of space remaining.
    # To translate "smallest remaining space" into "highest priority score", we use the inverse.
    # A small epsilon is added to the denominator to prevent division by zero if an item
    # perfectly fills a bin (potential_remaining_space = 0). It also slightly biases
    # exact fits to have a finite, very large score.
    epsilon = 1e-9 # A small positive value to handle exact fits (0 remaining space)

    # Apply the inverse calculation only to the bins where the item fits.
    # This assigns a high score to bins where the item fits snugly (potential_remaining_space is small).
    # For example, if potential_remaining_space is 0.1, score is ~10. If it's 0.01, score is ~100.
    priority_scores[can_fit_mask] = 1.0 / (potential_remaining_space[can_fit_mask] + epsilon)

    return priority_scores
```
