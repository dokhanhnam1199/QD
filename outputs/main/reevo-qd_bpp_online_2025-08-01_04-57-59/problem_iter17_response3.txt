```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add an item to each bin, combining
    a Best Fit-like strategy with a Bin Fullness strategy using weighted,
    non-linear scoring.

    This strategy aims to:
    1. Aggressively reward near-perfect fits to minimize fragmentation
       (tight fit component).
    2. Strategically consolidate items into existing bins by preferring
       bins that are already fuller (bin fullness component).

    The priority score is a weighted sum of these two components, both normalized
    to be between 0 and 1, with non-linear scaling for aggressiveness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         It is assumed that the original bin capacity is 1.0
                         (common normalization in BPP). If your problem uses
                         a different scale for bin capacities and item sizes
                         (e.g., bin capacity is 100), please adjust BIN_CAPACITY.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a priority score of 0.
        A higher score indicates a more desirable bin for the item based on
        the combined criteria.
    """
    # --- Tunable Parameters ---
    BIN_CAPACITY = 1.0  # Assumes item sizes and bin capacities are normalized.
                        # Adjust this if actual capacities are different (e.g., 100.0).

    W_TIGHT = 0.7       # Weight for the tight-fit component. Higher value emphasizes
                        # placing items in bins where they fit snugly.
    W_FULLNESS = 0.3    # Weight for the bin-fullness component. Higher value emphasizes
                        # placing items in bins that are already partially full,
                        # to consolidate items and close bins faster.

    POWER_TIGHT = 2.0   # Exponent for the tight-fit reward. Higher values make
                        # the preference for tighter fits more aggressive (e.g., x^2).
    POWER_FULLNESS = 2.0 # Exponent for the bin-fullness reward. Higher values
                         # make the preference for fuller bins more aggressive.

    EPSILON_TIGHT = 1e-9 # Small value to prevent division by zero for perfect fits,
                         # and to ensure a perfect fit scores 1.0 for the tight component.
    # --- End Tunable Parameters ---

    # Calculate the remaining capacity if the item were to be placed in each bin.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. Default to 0, meaning no priority or cannot fit.
    priority_scores = np.zeros_like(bins_remain_cap, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # Apply scoring only to bins that can fit the item
    if np.any(can_fit_mask):
        # Extract relevant values for bins that can fit, to avoid re-calculating on the full array.
        pr_space_fit = potential_remaining_space[can_fit_mask]
        bins_cap_fit = bins_remain_cap[can_fit_mask]

        # Component 1: Tight Fit Score
        # This rewards bins that would have very little space left after placing the item.
        # The score is normalized to be between 0 (for very loose fits) and 1.0 (for perfect fits).
        # np.power(pr_space_fit, POWER_TIGHT) makes the reward curve non-linear.
        score_tight = EPSILON_TIGHT / (np.power(pr_space_fit, POWER_TIGHT) + EPSILON_TIGHT)

        # Component 2: Bin Fullness Score
        # This rewards bins that are already relatively full *before* placing the item.
        # current_fullness_ratio ranges from 0 (for an empty bin) to 1 (for a full bin).
        current_fullness_ratio = (BIN_CAPACITY - bins_cap_fit) / BIN_CAPACITY
        # Applying a power ensures that fuller bins are rewarded disproportionately more.
        score_fullness = np.power(current_fullness_ratio, POWER_FULLNESS)

        # Combine the two normalized scores using a weighted sum.
        # Both component scores are in the range [0, 1], so the final score will also be in [0, 1].
        priority_scores[can_fit_mask] = W_TIGHT * score_tight + W_FULLNESS * score_fullness

    return priority_scores
```
