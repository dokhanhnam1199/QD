```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit-like strategy,
    prioritizing the smallest non-negative remaining capacity.

    This strategy aims to leave the smallest possible remaining capacity in a bin after placing the item,
    thereby 'snugly' fitting items and preserving larger empty spaces in other bins for future larger items.
    It directly assigns a higher priority (less negative score) to bins that result in a smaller
    positive remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a very low (negative) priority score.
        For bins that can fit, a higher score indicates a 'tighter' fit (smaller remaining capacity).
        The scores are designed such that a higher score directly corresponds to a smaller positive
        or zero remaining capacity.
    """
    # Calculate the remaining capacity if the item were to be placed in each bin.
    # This value indicates how much space would be left after placing the item.
    potential_remaining_space = bins_remain_cap - item

    # Initialize priority scores. We use a very small negative number for bins that cannot fit.
    # This ensures that bins incapable of holding the item are never chosen by a max operation.
    priority_scores = np.full_like(bins_remain_cap, np.finfo(float).min, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (remaining space must be non-negative).
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, we want to assign a priority.
    # In a Best Fit strategy, we prefer bins that leave the *smallest* amount of space remaining.
    # To translate "smallest remaining space" into "highest priority score", we use the negative of
    # the potential remaining space.
    #
    # Examples:
    # - If potential_remaining_space = 0.0 (perfect fit), score = 0.0 (highest possible priority for fitting bins).
    # - If potential_remaining_space = 0.1, score = -0.1.
    # - If potential_remaining_space = 10.0, score = -10.0.
    # This ensures that a smaller positive remaining space results in a larger (closer to zero or zero) score.
    priority_scores[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priority_scores
```
