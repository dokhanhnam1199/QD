```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit heuristic with tiered prioritization for
    perfect, near-perfect, and other fits to explicitly reduce fragmentation.

    This strategy provides distinct priority levels:
    1. Perfect fits (remaining capacity = 0) receive the highest distinct priority.
    2. Near-perfect fits (remaining capacity > 0 but <= threshold) receive
       a high priority that linearly decreases as the remaining capacity
       approaches the threshold.
    3. Other fits (remaining capacity > threshold) follow a standard Best Fit
       logic, where smaller remaining capacity results in higher priority
       (score is negative of remaining capacity).

    This approach explicitly rewards 'filling up' bins as much as possible,
    beyond just finding the tightest fit, to reduce overall fragmentation
    and improve packing density.

    Args:
        item: Size of item to be added to the bin. Assumed to be normalized
              (e.g., between 0 and 1) if using absolute thresholds.
        bins_remain_cap: Array of current remaining capacities for each bin.
                         Assumed to be normalized, typically between 0 and 1.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize all priorities to a very low negative number (effectively -infinity)
    # for bins that cannot accommodate the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after fit for eligible bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Define thresholds and constants for the tiered scoring.
    # These constants can be tuned based on problem characteristics,
    # assuming item and bin capacities are normalized (e.g., to 1.0).
    near_perfect_threshold = 0.05 # e.g., 5% of a standard bin capacity

    # Score constants for different tiers. These values ensure clear separation
    # between priority levels.
    perfect_fit_score = 1000.0     # Highest possible score for a perfect fit
    near_perfect_max_score = 100.0 # Score for an almost perfect fit (remaining -> 0+)
    near_perfect_min_score = 1.0   # Score for a fit exactly at the threshold

    # Create masks for different categories within the 'can_fit_mask' subset
    perfect_fit_sub_mask = (remaining_after_fit == 0)
    near_perfect_sub_mask = (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_threshold)
    other_fit_sub_mask = (remaining_after_fit > near_perfect_threshold)

    # Apply tiered scoring to the 'scores' array using the combined masks
    # 1. Perfect Fits
    scores[can_fit_mask][perfect_fit_sub_mask] = perfect_fit_score

    # 2. Near-Perfect Fits (0 < remaining <= threshold)
    # Score decays linearly from near_perfect_max_score (for remaining close to 0)
    # to near_perfect_min_score (for remaining exactly at the threshold).
    normalized_remaining_in_range = remaining_after_fit[near_perfect_sub_mask] / near_perfect_threshold
    scores[can_fit_mask][near_perfect_sub_mask] = (
        near_perfect_min_score +
        (near_perfect_max_score - near_perfect_min_score) * (1 - normalized_remaining_in_range)
    )

    # 3. Other Fits (remaining > threshold)
    # Standard Best Fit approach: prioritize smaller remaining capacity (less negative score).
    scores[can_fit_mask][other_fit_sub_mask] = -remaining_after_fit[other_fit_sub_mask]

    return scores
```
