```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, worst-fit, and a capacity-based score with adaptive weighting.
    Uses a statistical approach to bin selection, aiming for robustness.
    """
    sigmoid_scale = 5.0
    best_bin_boost = 1.0
    worst_fit_penalty = 0.5

    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)
    worst_bin_index = np.argmax(waste)

    priorities = np.zeros_like(bins_remain_cap)

    if np.any(valid_bins):
        capacities = bins_remain_cap[valid_bins]
        normalized_capacities = capacities / np.max(capacities)
        capacity_score = normalized_capacities

        best_fit_score = np.zeros_like(capacity_score)
        best_fit_score[np.argmin(waste)] = 1.0

        worst_fit_score = np.zeros_like(capacity_score)
        worst_fit_score[np.argmax(waste)] = -worst_fit_penalty

        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale))

        combined_score = 0.5 * sigmoid_scaled_waste + 0.3 * capacity_score + 0.2 * (best_fit_score + worst_fit_score)
        priorities[valid_bins] = combined_score
        priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost

    return priorities
```
