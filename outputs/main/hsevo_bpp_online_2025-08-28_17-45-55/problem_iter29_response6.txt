```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with dynamic exploration based on waste statistics."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities
    waste = bins_remain_cap[valid_bins] - item
    avg_waste = np.mean(waste)
    std_waste = np.std(waste)
    if std_waste == 0:
        std_waste = 1e-6
    scaled_waste = (waste - avg_waste) / std_waste
    sigmoid_scaled_waste = 1 / (1 + np.exp(-scaled_waste * 5.0))
    priorities[valid_bins] = sigmoid_scaled_waste
    exploration_boost = np.random.rand(n_bins) * 0.1 * (1 + avg_waste/item)
    priorities[valid_bins] += exploration_boost[valid_bins]
    best_bin_index = np.argmin(waste)
    priorities[np.where(valid_bins)[0][best_bin_index]] += 1.0
    return priorities
```
