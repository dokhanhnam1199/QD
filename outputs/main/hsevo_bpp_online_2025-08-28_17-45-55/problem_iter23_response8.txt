```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with diversity and exploration for robust bin packing."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities

    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)
    bin_usage = 1 - bins_remain_cap / np.max(bins_remain_cap)

    best_fit_component = 1 / (1 + np.exp(-waste * 5))
    diversity_component = bin_usage

    alpha = 0.7
    beta = 0.3
    priorities[valid_bins] = alpha * best_fit_component + beta * diversity_component
    priorities[np.where(valid_bins)[0][best_bin_index]] += 0.5

    exploration_rate = 0.1
    if np.random.rand() < exploration_rate:
        random_bin_index = np.random.choice(n_bins)
        priorities[random_bin_index] = np.max(priorities) + 1

    return priorities
```
