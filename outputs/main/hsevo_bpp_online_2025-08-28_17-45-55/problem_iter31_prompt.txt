{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\nsigmoid_scale = 1.0\nbest_bin_boost = 1.0\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    normalized_waste = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]\n    std_waste = np.std(normalized_waste)\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    \n    if std_waste > 0:\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-normalized_waste * sigmoid_scale))\n        priorities[valid_bins] = sigmoid_scaled_waste\n        best_bin_index = np.argmin(normalized_waste)\n        priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost\n    else:\n        priorities[valid_bins] = 1.0\n        best_bin_index = np.argmin(bins_remain_cap[valid_bins])\n        priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost\n        \n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}