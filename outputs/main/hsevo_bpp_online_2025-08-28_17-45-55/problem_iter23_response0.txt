```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with diversity and mild worst-fit penalty."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities
    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)
    worst_bin_index = np.argmax(waste)
    best_fit_component = np.zeros_like(bins_remain_cap)
    best_fit_component[valid_bins] = 1 / (1 + np.exp(-waste * 5))
    diversity_component = np.zeros_like(bins_remain_cap)
    bin_usage = 1 - bins_remain_cap / np.max(bins_remain_cap)
    diversity_component[valid_bins] = bin_usage[valid_bins]
    priorities = 0.6 * best_fit_component + 0.4 * diversity_component
    priorities[possible_bins][best_bin_index] += 0.2
    priorities[possible_bins][worst_bin_index] -= 0.05
    return priorities
```
