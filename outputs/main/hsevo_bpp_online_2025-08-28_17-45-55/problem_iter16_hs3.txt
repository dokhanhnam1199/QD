import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_epsilon: float = 7.981156355773246e-09, best_bin_weight: float = 0.5966612345487328, worst_bin_weight: float = 0.36548763021551856) -> np.ndarray:
    """Combines waste minimization with a worst-fit penalty to promote diversity."""
    possible_bins = bins_remain_cap >= item
    if np.sum(possible_bins) == 0:
        return np.zeros_like(bins_remain_cap)
    waste = bins_remain_cap[possible_bins] - item
    priorities = 1.0 / (waste + waste_epsilon)
    best_bin_index = np.argmin(waste)
    priorities[possible_bins][best_bin_index] += best_bin_weight
    worst_bin_index = np.argmax(waste)
    priorities[possible_bins][worst_bin_index] += worst_bin_weight
    priorities[~possible_bins] = 0.0
    return priorities
