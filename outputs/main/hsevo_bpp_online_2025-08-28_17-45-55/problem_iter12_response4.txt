```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit with a dynamic scaling factor based on bin utilization
    and a penalty for fragmentation.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    waste = bins_remain_cap[valid_bins] - item
    
    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    utilization_factor = bin_utilization[valid_bins]
    
    fragmentation_penalty = 1.0 / (1 + np.exp(-10 * (1 - bins_remain_cap / np.max(bins_remain_cap))))
    fragmentation_penalty = fragmentation_penalty[valid_bins]

    priorities[valid_bins] = (1.0 - waste / np.max(waste)) * utilization_factor + fragmentation_penalty * 0.1
    
    best_bin_index = np.argmax(priorities[valid_bins])
    priorities[np.where(valid_bins)[0][best_bin_index]] += 0.5
    
    return priorities
```
