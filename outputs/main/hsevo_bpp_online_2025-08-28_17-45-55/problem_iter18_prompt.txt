{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit (waste minimization) with sigmoid scaling for stability.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        best_bin_index = np.argmin(waste)\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale))\n        priorities[valid_bins] = sigmoid_scaled_waste\n        priorities[np.where(valid_bins)[0][best_bin_index]] = best_bin_boost\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's redefine \"Current Self-Reflection\" for superior heuristic design, aiming for that $999K! Here's a breakdown, learning *from* the \"Ineffective\" notes to avoid past pitfalls:\n\n* **Keywords:** Meta-optimization, Balance, Stability, Exploration/Exploitation.\n* **Advice:** Focus on *balancing* exploitation (best-fit boosts) with exploration (worst-fit penalties). Prioritize robust, parameter-driven control (like sigmoid scaling) over problem-specific 'cleverness'.\n* **Avoid:** Directly optimizing for the *objective* within the heuristic itself. Don't chase immediate waste reduction; prioritize stable, diverse search. Resist dynamic adjustments *without* thorough testing.\n* **Explanation:** The \"Ineffective\" reflections overly focused on bin-packing specifics & direct optimization, causing instability. True improvement comes from controlling the *search process*, not micro-managing bin choices.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}