[
  {
    "stdout_filepath": "problem_iter35_response0.txt_stdout.txt",
    "code_path": "problem_iter35_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with exploration based on waste standard deviation and sigmoid scaling.\"\"\"\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    normalized_waste = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]\n    waste_std = np.std(normalized_waste)\n    exploration_factor = np.exp(-waste_std)\n    sigmoid_scale = 5.0\n    priorities = np.zeros_like(bins_remain_cap)\n    sigmoid_scaled_waste = 1 / (1 + np.exp(-normalized_waste * sigmoid_scale))\n    priorities[valid_bins] = sigmoid_scaled_waste * (1 + exploration_factor)\n    best_bin_index = np.argmin(normalized_waste)\n    priorities[np.where(valid_bins)[0][best_bin_index]] += 1.0\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.357798165137619,
    "SLOC": 14.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 151.30376252379818,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response1.txt_stdout.txt",
    "code_path": "problem_iter35_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with modulated sigmoid scaling based on waste standard deviation and exploration bonus.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    waste = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1 / (1 + np.exp(-waste * 1.0))\n    \n    if len(waste) > 0:\n        std_waste = np.std(waste)\n        mean_waste = np.mean(waste)\n        exploration_bonus = 0.1 * np.exp(-std_waste / (mean_waste if mean_waste > 0 else 1e-6))\n        best_bin_index = np.argmin(waste)\n        priorities[valid_bins[best_bin_index]] += exploration_bonus\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 77.35341045073795,
    "SLOC": 15.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 171.1759500778849,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response2.txt_stdout.txt",
    "code_path": "problem_iter35_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with sigmoid scaling and dynamic modulation based on waste standard deviation.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    normalized_waste = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]\n    std_waste = np.std(normalized_waste)\n\n    if std_waste > 0:\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-normalized_waste * 2.0))\n        priorities[valid_bins] = sigmoid_scaled_waste\n        best_bin_index = np.argmin(normalized_waste)\n        priorities[np.where(valid_bins)[0][best_bin_index]] += 1.0\n    else:\n        priorities[valid_bins] = 1.0\n        best_bin_index = np.argmin(bins_remain_cap[valid_bins])\n        priorities[np.where(valid_bins)[0][best_bin_index]] += 1.0\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 18.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 142.13383752235586,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response3.txt_stdout.txt",
    "code_path": "problem_iter35_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with modulated sigmoid scaling based on waste standard deviation and a boost.\"\"\"\n    sigmoid_scale = 1.0\n    best_bin_boost = 1.0\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        waste_std = np.std(waste)\n        sigmoid_mod = 1.0 + waste_std\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale * sigmoid_mod))\n        priorities[valid_bins] = sigmoid_scaled_waste\n        best_bin_index = np.argmin(waste)\n        priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 14.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 112.37013046707143,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response4.txt_stdout.txt",
    "code_path": "problem_iter35_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with modulated sigmoid scaling based on waste standard deviation and a best bin boost.\"\"\"\n    sigmoid_scale = 1.0\n    best_bin_boost = 1.0\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        waste_std = np.std(waste)\n        sigmoid_mod = 1.0 + waste_std\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale * sigmoid_mod))\n        priorities[valid_bins] = sigmoid_scaled_waste\n        best_bin_index = np.argmin(waste)\n        priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 14.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 112.37013046707143,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response5.txt_stdout.txt",
    "code_path": "problem_iter35_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with sigmoid scaling modulated by waste standard deviation and best bin boost.\"\"\"\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n    waste = bins_remain_cap[valid_bins] - item\n    waste_std = np.std(waste) if len(waste) > 1 else 0.0\n    priorities = np.zeros_like(bins_remain_cap)\n    sigmoid_scale = 1.0\n    sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale))\n    modulated_sigmoid = sigmoid_scaled_waste * (1 + waste_std)\n    priorities[valid_bins] = modulated_sigmoid\n    best_bin_index = np.argmin(waste)\n    best_bin_boost = 10.0\n    priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 142.13383752235586,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response6.txt_stdout.txt",
    "code_path": "problem_iter35_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with dynamic exploration based on waste statistics.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    waste = bins_remain_cap[valid_bins] - item\n    avg_waste = np.mean(waste)\n    waste_std = np.std(waste)\n\n    if waste_std == 0:\n        waste_std = 1e-6\n\n    normalized_waste = (waste - avg_waste) / waste_std\n    sigmoid_scaled_waste = 1 / (1 + np.exp(-normalized_waste * 5.0))\n    priorities[valid_bins] = sigmoid_scaled_waste\n\n    best_bin_index = np.argmin(waste)\n    priorities[np.where(valid_bins)[0][best_bin_index]] += 1.0\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 17.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 142.13383752235586,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response7.txt_stdout.txt",
    "code_path": "problem_iter35_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, sigmoid scaling (v0) with waste std modulation (v1) for improved bin packing.\"\"\"\n    sigmoid_scale = 1.0\n    best_bin_boost = 10.0\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n    waste = bins_remain_cap[valid_bins] - item\n    waste_std = np.std(waste) if len(waste) > 1 else 0.0\n    priorities = np.zeros_like(bins_remain_cap)\n    sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale))\n    modulated_sigmoid = sigmoid_scaled_waste * (1 + waste_std * 0.1)\n    priorities[valid_bins] = modulated_sigmoid\n    best_bin_index = np.argmin(waste)\n    priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 159.81495041679716,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response8.txt_stdout.txt",
    "code_path": "problem_iter35_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with modulated sigmoid scaling based on waste statistics.\"\"\"\n    sigmoid_scale = 5.0\n    best_bin_boost = 2.0\n    waste_std_factor = 2.0\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n    waste = bins_remain_cap[valid_bins] - item\n    waste_std = np.std(waste)\n    modulated_scale = sigmoid_scale * (1 + waste_std * waste_std_factor)\n    sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * modulated_scale))\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[valid_bins] = sigmoid_scaled_waste\n    best_bin_index = np.argmin(waste)\n    priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 16.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 142.13383752235586,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter35_response9.txt_stdout.txt",
    "code_path": "problem_iter35_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with dynamic exploration, scaling by waste normalized by std.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    waste = bins_remain_cap[valid_bins] - item\n    avg_waste = np.mean(waste)\n    waste_std = np.std(waste)\n    if waste_std == 0:\n        waste_std = 1e-6\n    normalized_waste = (waste - avg_waste) / waste_std\n    sigmoid_scaled_waste = 1 / (1 + np.exp(-normalized_waste * 5.0))\n    priorities[valid_bins] = sigmoid_scaled_waste\n    best_bin_index = np.argmin(waste)\n    priorities[np.where(valid_bins)[0][best_bin_index]] += 1.0\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 17.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 142.13383752235586,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter36_response0.txt_stdout.txt",
    "code_path": "problem_iter36_code0.py",
    "code": "import numpy as np\n\nsigmoid_scale = 1.0\nbest_bin_boost = 1.0\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit with sigmoid scaling and dynamic modulation based on\n    the standard deviation of remaining bin capacities.\n    \"\"\"\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    waste = bins_remain_cap[valid_bins] - item\n    std_dev_waste = np.std(waste)\n\n    priorities = np.zeros_like(bins_remain_cap)\n\n    if std_dev_waste > 0:\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale / std_dev_waste))\n    else:\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale))\n\n    priorities[valid_bins] = sigmoid_scaled_waste\n\n    best_bin_index = np.argmin(waste)\n    priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 183.31714900750262,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter36_response1.txt_stdout.txt",
    "code_path": "problem_iter36_code1.py",
    "code": "import numpy as np\n\nsigmoid_scale = 1.0\nbest_bin_boost = 1.0\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines best-fit with dynamic sigmoid scaling based on waste distribution\n    and a small boost to the best-fit bin.\n    \"\"\"\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    waste = bins_remain_cap[valid_bins] - item\n    std_dev_waste = np.std(waste)\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    \n    if std_dev_waste > 0:\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale / std_dev_waste))\n    else:\n        sigmoid_scaled_waste = np.ones_like(waste)\n\n    priorities[valid_bins] = sigmoid_scaled_waste\n    \n    best_bin_index = np.argmin(waste)\n    priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 126.65973476959637,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter36_response2.txt_stdout.txt",
    "code_path": "problem_iter36_code2.py",
    "code": "import numpy as np\n\nsigmoid_scale = 1.0\nbest_bin_boost = 1.0\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    waste = bins_remain_cap[valid_bins] - item\n    std_dev_waste = np.std(waste) if len(waste) > 1 else 0.0\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    \n    if std_dev_waste > 0:\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale / std_dev_waste))\n    else:\n        sigmoid_scaled_waste = np.ones_like(waste)\n    \n    priorities[valid_bins] = sigmoid_scaled_waste\n    \n    best_bin_index = np.argmin(waste)\n    priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost\n    \n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 15.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 142.13383752235586,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter36_response3.txt_stdout.txt",
    "code_path": "problem_iter36_code3.py",
    "code": "import numpy as np\n\nsigmoid_scale = 1.0\nbest_bin_boost = 1.0\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    A mutated priority function for online bin packing, combining best-fit with\n    dynamic modulation based on the standard deviation of waste in valid bins.\n    \"\"\"\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    waste = bins_remain_cap[valid_bins] - item\n    std_dev_waste = np.std(waste)\n\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    if std_dev_waste == 0:\n        priorities[valid_bins] = 1.0\n    else:\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste / (std_dev_waste + 1e-6)))\n        priorities[valid_bins] = sigmoid_scaled_waste\n    \n    best_bin_index = np.argmin(waste)\n    priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost\n    \n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 124.86408532184433,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter36_response4.txt_stdout.txt",
    "code_path": "problem_iter36_code4.py",
    "code": "import numpy as np\n\nsigmoid_scale = 1.0\nbest_bin_boost = 1.0\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit with dynamic modulation based on bin capacity std deviation.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        std_dev = np.std(bins_remain_cap[valid_bins])\n        \n        modulated_waste = waste / (std_dev + 1e-6)\n        \n        sigmoid_scaled_waste = 1 / (1 + np.exp(-modulated_waste * sigmoid_scale))\n        priorities[valid_bins] = sigmoid_scaled_waste\n        \n        best_bin_index = np.argmin(waste)\n        priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 114.20025299224778,
    "exec_success": true
  }
]