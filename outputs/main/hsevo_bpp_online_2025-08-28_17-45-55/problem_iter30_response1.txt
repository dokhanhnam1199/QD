```python
import numpy as np

sigmoid_scale = 5.0
best_bin_boost = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)
    
    normalized_waste = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]
    
    waste_std = np.std(normalized_waste)
    
    exploration_factor = np.exp(-waste_std)
    
    priorities = np.zeros_like(bins_remain_cap)
    
    sigmoid_scaled_waste = 1 / (1 + np.exp(-normalized_waste * sigmoid_scale))
    
    priorities[valid_bins] = sigmoid_scaled_waste * (1 + exploration_factor)
    
    best_bin_index = np.argmin(normalized_waste)
    
    priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost
    
    return priorities
```
