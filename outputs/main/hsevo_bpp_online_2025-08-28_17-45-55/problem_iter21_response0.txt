```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, exploration_rate: float = 0.1, best_fit_weight: float = 0.7, diversity_weight: float = 0.3) -> np.ndarray:
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap[valid_bins] - item
    best_fit_score = -waste
    
    bin_counts = np.zeros_like(bins_remain_cap)
    
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] > 0:
            bin_counts[i] = 1
    
    diversity_score = bin_counts[valid_bins]
    
    priorities = (best_fit_weight * best_fit_score + diversity_weight * diversity_score)
    
    if np.any(valid_bins):
        
        best_bin_index = np.argmin(waste)
        
        priorities[valid_bins] += exploration_rate * (np.random.rand(np.sum(valid_bins)))
        priorities[np.where(valid_bins)[0][best_bin_index]] += exploration_rate * 2
        
        
    return priorities
```
