```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with a diversity component and dynamic exploration."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    waste = bins_remain_cap[valid_bins] - item
    best_fit_component = 1 / (1 + np.exp(-waste * 5))
    bin_usage = 1 - bins_remain_cap / np.max(bins_remain_cap)
    diversity_component = bin_usage

    alpha = 0.7
    beta = 0.3
    priorities[valid_bins] = alpha * best_fit_component + beta * diversity_component

    waste_std = np.std(waste)
    exploration_boost = 0.1 * np.exp(-waste_std * 2)
    priorities[valid_bins] += exploration_boost

    best_bin_index = np.argmin(waste)
    priorities[valid_bins[best_bin_index]] += 0.5

    return priorities
```
