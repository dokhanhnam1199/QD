```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive prioritization combining best-fit, first-fit, and diversity."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)

    first_fit_scores = np.where(valid_bins)[0]
    first_fit_ranks = np.argsort(first_fit_scores)
    first_fit_priority = np.zeros_like(bins_remain_cap)
    first_fit_priority[valid_bins] = 1.0 / (first_fit_ranks + 1)

    diversity_scores = np.zeros_like(bins_remain_cap)
    bin_occupancy = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    diversity_scores[valid_bins] = 1 - bin_occupancy[valid_bins]
    
    adaptive_weight_best_fit = 0.6
    adaptive_weight_first_fit = 0.3
    adaptive_weight_diversity = 0.1
    
    priorities[valid_bins] = (adaptive_weight_best_fit * (1 / (1 + np.exp(-waste * 2)))) + \
                             (adaptive_weight_first_fit * first_fit_priority[valid_bins]) + \
                             (adaptive_weight_diversity * diversity_scores[valid_bins])

    priorities[np.where(valid_bins)[0][best_bin_index]] += 0.1

    return priorities
```
