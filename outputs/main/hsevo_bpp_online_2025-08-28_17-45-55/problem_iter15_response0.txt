```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap)
    if not np.any(valid_bins):
        return priorities

    waste = bins_remain_cap[valid_bins] - item
    
    best_bin_index = np.argmin(waste)
    
    priorities[valid_bins] = 1.0 / (waste + 1e-6)
    
    exploration_factor = 0.2
    
    for i in range(len(bins_remain_cap)):
        if valid_bins[i]:
            if i != np.where(valid_bins)[0][best_bin_index]:
                priorities[i] += exploration_factor * np.random.rand()
                
    
    bin_utilization = 1 - (bins_remain_cap / bins_remain_cap.max())
    
    deprioritize_factor = 0.1
    
    for i in range(len(bins_remain_cap)):
        if valid_bins[i]:
            priorities[i] -= deprioritize_factor * bin_utilization[i]
            
    return priorities
```
