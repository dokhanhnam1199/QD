```python
import numpy as np

sigmoid_scale = 1.0
best_bin_boost = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit with a sigmoid-scaled exploration factor based on waste
    standard deviation.
    """
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)

    waste_std = np.std(waste)
    exploration_factor = 1 / (1 + np.exp(-waste_std * sigmoid_scale))

    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = 1 / (1 + np.exp(-waste * sigmoid_scale)) * exploration_factor
    priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost

    return priorities
```
