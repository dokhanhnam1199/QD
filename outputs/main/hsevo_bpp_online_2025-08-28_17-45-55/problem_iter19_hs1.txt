import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, sigmoid_epsilon: float = 5.223002952865678e-09, best_bin_boost: float = 0.7099047511647278, worst_bin_penalty: float = 0.37839314626571063) -> np.ndarray:
    """Combines waste minimization with a worst-fit penalty, using sigmoid scaling for stability."""
    possible_bins = bins_remain_cap >= item
    if np.sum(possible_bins) == 0:
        return np.zeros_like(bins_remain_cap)
    waste = bins_remain_cap[possible_bins] - item
    priorities = 1.0 / (np.exp(waste) + sigmoid_epsilon)
    best_bin_index = np.argmin(waste)
    priorities[possible_bins][best_bin_index] += best_bin_boost
    worst_bin_index = np.argmax(waste)
    priorities[possible_bins][worst_bin_index] -= worst_bin_penalty
    priorities[~possible_bins] = 0.0
    return priorities
