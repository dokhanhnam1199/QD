import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, sigmoid_scale: float = 7.939358116080859, best_bin_boost: float = 3.9638766809223895) -> np.ndarray:
    """Combines waste minimization, sigmoid scaling, and a best-bin boost, with robust handling of edge cases and numerical stability."""
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        mean_waste = np.mean(waste)
        std_waste = np.std(waste)
        if std_waste == 0:
            normalized_waste = np.zeros_like(waste)
        else:
            normalized_waste = (waste - mean_waste) / std_waste
        sigmoid_scaled_waste = 1 / (1 + np.exp(-normalized_waste * sigmoid_scale))
        priorities[valid_bins] = sigmoid_scaled_waste
        best_bin_index = np.argmin(waste)
        priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost
    return priorities
