```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins with medium remaining capacity and occasionally accepts worse fits."""
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        
        median_cap = np.median(bins_remain_cap[valid_bins])
        
        distance_from_median = np.abs(bins_remain_cap[valid_bins] - median_cap)
        
        priorities[valid_bins] = 1 / (1 + distance_from_median)
        
        
        random_bin_index = np.random.randint(0, len(bins_remain_cap[valid_bins]))
        
        
        if np.random.rand() < 0.1:
            
            worst_bin_index = np.argmax(waste)
            
            priorities[valid_bins[worst_bin_index]] += 0.5
        else:
            
            best_bin_index = np.argmin(waste)
            priorities[valid_bins[best_bin_index]] += 0.2

    return priorities
```
