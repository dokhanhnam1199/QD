{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit (waste minimization) with sigmoid scaling for stability.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        best_bin_index = np.argmin(waste)\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale))\n        priorities[valid_bins] = sigmoid_scaled_waste\n        priorities[np.where(valid_bins)[0][best_bin_index]] = best_bin_boost\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's dissect this and build a powerful foundation for heuristic design. Here's a refined self-reflection, aiming for genuinely *better* heuristics, with a focus beyond just bin packing, and geared towards winning that $999K!\n\n*   **Keywords:** Meta-optimization, Exploration-Exploitation Balance, Robustness, Parameter Sensitivity.\n*   **Advice:** Focus on *adaptive* prioritization. Shift from solely sigmoid scaling to dynamically adjusting weights between best-fit and diversity components based on population/solution state. Rigorously test parameter interactions\u2014they aren\u2019t independent.\n*   **Avoid:** Over-reliance on normalization *specifically* for stability. Stability is a *result* of good design, not a goal achieved through normalization alone. Don't treat sigmoid parameters as 'tuned' until tested across diverse problem instances.\n*   **Explanation:** The previous reflection was too bin-packing specific. True heuristic power comes from *understanding* how exploration & exploitation interact and building mechanisms to adaptively balance them. Robustness requires anticipating and handling parameter sensitivities, not just smoothing numbers.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}