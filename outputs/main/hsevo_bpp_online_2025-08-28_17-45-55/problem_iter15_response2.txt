```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Dynamic prioritization with controlled exploration."""
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        
        best_bin_index = np.argmin(waste)
        worst_bin_index = np.argmax(waste)
        
        priorities[valid_bins] = 1 / (waste + 1e-6)
        
        exploration_factor = 0.2
        priorities[np.where(valid_bins)[0][worst_bin_index]] += exploration_factor
        
        
        bin_utilization = 1 - (bins_remain_cap / bins_remain_cap.max())
        
        deprioritization_factor = 0.1 * bin_utilization
        priorities[valid_bins] -= deprioritization_factor

        priorities[np.where(valid_bins)[0][best_bin_index]] += 0.5
    return priorities
```
