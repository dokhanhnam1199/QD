```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization with sigmoid scaling and normalization for stability."""
    sigmoid_scale = 1.0
    best_bin_boost = 10.0
    possible_bins = bins_remain_cap >= item
    if np.sum(possible_bins) == 0:
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap[possible_bins] - item
    mean_waste = np.mean(waste)
    std_waste = np.std(waste)
    if std_waste == 0:
      std_waste = 1e-6
    normalized_waste = (waste - mean_waste) / std_waste
    sigmoid_scaled_waste = 1 / (1 + np.exp(-normalized_waste * sigmoid_scale))
    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = sigmoid_scaled_waste
    best_bin_index = np.argmin(waste)
    priorities[possible_bins[best_bin_index]] += best_bin_boost
    return priorities
```
