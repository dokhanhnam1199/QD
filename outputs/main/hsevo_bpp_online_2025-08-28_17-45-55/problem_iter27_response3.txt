```python
import numpy as np

sigmoid_scale = 5.0
best_bin_boost = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        best_bin_index = np.argmin(waste)
        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale))
        priorities[valid_bins] = sigmoid_scaled_waste
        priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost
        
        penalty = 0.1
        for i in range(len(bins_remain_cap)):
            if valid_bins[i] and i != np.where(valid_bins)[0][best_bin_index]:
                priorities[i] -= penalty * (bins_remain_cap[i] - item)

    return priorities
```
