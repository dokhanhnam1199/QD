```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with sigmoid scaling and dynamic exploration based on waste std."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities
    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)
    sigmoid_scale = 1.0
    std_waste = np.std(waste)
    exploration_bonus_factor = 0.1 * (std_waste / (np.mean(bins_remain_cap) + 1e-6))
    priorities[valid_bins] = 1 / (1 + np.exp(-waste * sigmoid_scale))
    priorities[np.where(valid_bins)[0][best_bin_index]] += exploration_bonus_factor
    return priorities
```
