```python
import numpy as np

sigmoid_scale = 5.0
best_bin_boost = 1.0
worst_bin_penalty = 0.1

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, worst-fit penalty, and sigmoid scaling for enhanced stability."""
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        
        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale))
        priorities[valid_bins] = sigmoid_scaled_waste

        best_bin_index = np.argmin(waste)
        priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost

        worst_bin_index = np.argmax(waste)
        priorities[np.where(valid_bins)[0][worst_bin_index]] -= worst_bin_penalty
        
    return priorities
```
