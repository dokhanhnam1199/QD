```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with a time-dependent exploration bonus for improved bin packing."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities
    waste = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = 1 / (1 + np.exp(-waste * 2.0))
    best_bin_index = np.argmin(waste)
    priorities[valid_bins][best_bin_index] += 0.5
    exploration_boost = 0.1 * np.sum(valid_bins)
    priorities[valid_bins] += exploration_boost / n_bins
    return priorities
```
