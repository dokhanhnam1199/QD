```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with a mild worst-fit penalty and exploration."""
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap)
    if not np.any(valid_bins):
        return priorities

    waste = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = 1.0 / (waste + 1e-9)

    worst_bin_index = np.argmax(waste)
    priorities[valid_bins][worst_bin_index] -= 0.1

    exploration_rate = 0.1
    priorities[valid_bins] += exploration_rate * np.random.rand(np.sum(valid_bins))

    return priorities
```
