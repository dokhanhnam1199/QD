```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive prioritization combining best-fit, worst-fit, and a diversity component."""
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)
    worst_bin_index = np.argmax(waste)

    priorities = np.zeros_like(bins_remain_cap)

    best_fit_score = 1.0 / (1.0 + waste)
    worst_fit_score = waste
    diversity_score = 1.0 / (np.sum(valid_bins) + 1e-6)

    weight_best_fit = 0.6
    weight_worst_fit = 0.2
    weight_diversity = 0.2

    priorities[valid_bins] = (weight_best_fit * best_fit_score +
                              weight_worst_fit * worst_fit_score +
                              weight_diversity * diversity_score)

    priorities[np.where(valid_bins)[0][best_bin_index]] += 0.1
    priorities[np.where(valid_bins)[0][worst_bin_index]] -= 0.05

    return priorities
```
