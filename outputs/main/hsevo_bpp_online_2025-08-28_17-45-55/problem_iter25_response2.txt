import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, exploration_bonus_factor: float = 0.22638060495953793) -> np.ndarray:
    """
    A priority function for online bin packing that dynamically adjusts exploration vs. exploitation.
    It combines best-fit with a time-dependent exploration bonus.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities
    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)
    time_step = np.sum(bins_remain_cap > 0)
    exploration_bonus = exploration_bonus_factor * np.exp(-time_step / n_bins)
    priorities[valid_bins] = -waste
    priorities[np.where(valid_bins)[0][best_bin_index]] += 1.0 + exploration_bonus
    return priorities
