```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with a time-dependent exploration bonus for better performance."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities

    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)
    sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * 0.5))
    priorities[valid_bins] = sigmoid_scaled_waste
    priorities[np.where(valid_bins)[0][best_bin_index]] += 1.0

    exploration_boost = 0.1 * (n_bins - np.sum(valid_bins))
    priorities[valid_bins] += exploration_boost

    return priorities
```
