{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit (waste minimization) with sigmoid scaling for stability.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        best_bin_index = np.argmin(waste)\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale))\n        priorities[valid_bins] = sigmoid_scaled_waste\n        priorities[np.where(valid_bins)[0][best_bin_index]] = best_bin_boost\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's craft a redefined 'Current Self-Reflection' for superior heuristic design, aiming for that $999K! Here's a breakdown, stepping through the analysis of the provided texts:\n\n**Step 1: Identify Core Conflict:** The \"Current\" & \"Ineffective\" reflections *appear* to want the same things (stability, sigmoid scaling, normalization). The difference lies in *where* to apply them. \"Ineffective\" focuses on the *objective function* directly, while \"Current\" prioritizes stability *in the heuristic itself*. This is crucial \u2013 stable heuristic behavior allows for better exploration.\n\n**Step 2: Extract Principles:** The \"Current\" reflection's success suggests robustness comes from predictable behavior, even if it means a slight compromise on immediate objective optimization. \"Ineffective\"\u2019s pitfalls stem from sensitivity.\n\n**Step 3: Redefine for Heuristic Design:**\n\n*   **Keywords:** Robustness, Predictability, Controlled Exploration, Scalability.\n*   **Advice:** Prioritize *heuristic mechanism* stability. Employ sigmoid scaling & normalization not to directly *optimize* waste *within* a step, but to *regulate* the heuristic's choices *between* steps.\n*   **Avoid:** Directly encoding objective function values into heuristic selection *without* strong smoothing and stability controls. Overly aggressive/dynamic adjustments based on immediate results.\n*   **Explanation:** A stable heuristic offers consistent search behavior. Sigmoids provide controlled selection pressure. This facilitates broader exploration and avoids getting stuck in locally optimal, yet fragile, solutions.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}