```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit (minimizing waste) with a sigmoid normalization
    for stable priority scores.
    """
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap[valid_bins] - item
    priorities = np.zeros_like(bins_remain_cap)
    
    if np.any(valid_bins):
        fit_scores = 1.0 / (waste + 1e-6)
        max_fit = np.max(fit_scores)
        
        sigmoid_input = (fit_scores / max_fit) * 10
        priorities[valid_bins] = 1.0 / (1.0 + np.exp(-sigmoid_input))
        
    return priorities
```
