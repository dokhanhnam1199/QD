```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with dynamic exploration based on remaining capacity."""
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    priorities = np.zeros_like(bins_remain_cap)
    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)

    priorities[valid_bins] = 0.5 * (1 / (1 + np.exp(-waste))) + 0.5 * (waste / np.max(waste))
    exploration_factor = np.mean(bins_remain_cap[valid_bins]) / item if np.mean(bins_remain_cap[valid_bins]) > 0 else 1.0
    exploration_factor = np.clip(exploration_factor, 0.1, 5.0)

    priorities[valid_bins] += exploration_factor * (1 / (np.arange(1, len(valid_bins) + 1)))
    priorities[np.where(valid_bins)[0][best_bin_index]] += 0.1

    return priorities
```
