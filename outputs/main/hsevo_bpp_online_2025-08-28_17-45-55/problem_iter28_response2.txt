import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, exploration_factor_min: float = 0.44559112635754583, exploration_factor_max: float = 5.7135374272756225, small_value: float = 0.00040913969750513654) -> np.ndarray:
    """Combines best-fit with a dynamic exploration factor based on average remaining capacity."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities
    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)
    exploration_factor = np.mean(bins_remain_cap[valid_bins]) / (item + small_value)
    exploration_factor = np.clip(exploration_factor, exploration_factor_min, exploration_factor_max)
    priorities[valid_bins] = (1 / (waste + small_value)) * (1 + exploration_factor * np.random.rand())
    priorities[np.where(valid_bins)[0][best_bin_index]] += 1.0
    return priorities
