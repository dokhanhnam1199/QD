import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, sigmoid_scale: float = 4.429450957068711, best_bin_boost: float = 0.25131627632770315) -> np.ndarray:
    """Combines best-fit with sigmoid scaling and dynamic modulation based on waste standard deviation."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities
    normalized_waste = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]
    std_waste = np.std(normalized_waste)
    if std_waste > 0:
        sigmoid_scaled_waste = 1 / (1 + np.exp(-normalized_waste * sigmoid_scale))
        priorities[valid_bins] = sigmoid_scaled_waste
        best_bin_index = np.argmin(normalized_waste)
        priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost
    else:
        priorities[valid_bins] = 1.0
        best_bin_index = np.argmin(bins_remain_cap[valid_bins])
        priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost
    return priorities
