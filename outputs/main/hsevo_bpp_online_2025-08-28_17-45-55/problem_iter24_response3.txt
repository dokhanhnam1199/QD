```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, worst-fit, and a dynamic exploration factor."""
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities

    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)
    worst_bin_index = np.argmax(waste)

    exploration_factor = np.mean(bins_remain_cap[valid_bins]) / item if np.mean(bins_remain_cap[valid_bins]) > 0 else 1.0
    exploration_factor = np.clip(exploration_factor, 0.1, 5.0)

    priorities[valid_bins] = (1 / (waste + 1e-6)) * (1 + exploration_factor * (np.random.rand() - 0.5))
    priorities[np.where(valid_bins)[0][best_bin_index]] += 2.0
    priorities[np.where(valid_bins)[0][worst_bin_index]] -= 0.5
    priorities[priorities < 0] = 0

    return priorities
```
