```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha=0.7, beta=0.3, exploration_rate=0.1) -> np.ndarray:
    """
    Adaptive prioritization for bin packing, balancing best-fit and diversity.

    Args:
        item (float): The size of the item to be packed.
        bins_remain_cap (np.ndarray): The remaining capacity of each bin.
        alpha (float): Weight for best-fit component.
        beta (float): Weight for diversity component.
        exploration_rate (float): Probability of choosing a random bin for exploration.

    Returns:
        np.ndarray: Priority scores for each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)

    best_fit_component = np.zeros_like(bins_remain_cap)
    best_fit_component[valid_bins] = 1 / (1 + np.exp(-waste * 5))

    diversity_component = np.zeros_like(bins_remain_cap)
    bin_usage = 1 - bins_remain_cap / np.max(bins_remain_cap)
    diversity_component[valid_bins] = bin_usage[valid_bins]

    priorities = alpha * best_fit_component + beta * diversity_component

    if np.random.rand() < exploration_rate:
        random_bin_index = np.random.choice(n_bins)
        priorities[random_bin_index] = np.max(priorities) + 1

    priorities[np.where(valid_bins)[0][best_bin_index]] += 0.5

    return priorities
```
