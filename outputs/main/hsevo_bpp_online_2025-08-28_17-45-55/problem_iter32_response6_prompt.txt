{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\nsigmoid_scale = 5.0\nbest_bin_boost = 1.0\n\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n    \n    normalized_waste = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]\n    \n    waste_std = np.std(normalized_waste)\n    \n    exploration_factor = np.exp(-waste_std)\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    \n    sigmoid_scaled_waste = 1 / (1 + np.exp(-normalized_waste * sigmoid_scale))\n    \n    priorities[valid_bins] = sigmoid_scaled_waste * (1 + exploration_factor)\n    \n    best_bin_index = np.argmin(normalized_waste)\n    \n    priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit with dynamic exploration based on waste statistics using sigmoid scaling.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    waste = bins_remain_cap[valid_bins] - item\n    avg_waste = np.mean(waste)\n    std_waste = np.std(waste)\n\n    if std_waste == 0:\n        std_waste = 1e-6\n\n    scaled_waste = (waste - avg_waste) / std_waste\n    sigmoid_scaled_waste = 1 / (1 + np.exp(-scaled_waste * 5.0))\n    priorities[valid_bins] = sigmoid_scaled_waste\n\n    exploration_boost = np.random.rand(n_bins) * 0.1 * (1 + avg_waste/item)\n    priorities[valid_bins] += exploration_boost[valid_bins]\n\n    best_bin_index = np.argmin(waste)\n    priorities[np.where(valid_bins)[0][best_bin_index]] += 1.0\n\n    return priorities\n\n### Analyze & experience\n- Comparing heuristics 1st vs 2nd, the primary difference is the `sigmoid_scale` (1.0 vs 5.0) and how exploration is handled. Heuristic 1st uses a `best_bin_boost` *after* applying the sigmoid, while 2nd modulates the sigmoid itself with an `exploration_factor` based on waste standard deviation. Both 2nd, 3rd, 4th are identical. \n\nComparing 1st vs 5th, 5th includes more detailed documentation, but functionally, they are quite similar. Heuristic 1st applies the boost after the sigmoid, whereas 5th applies the boost at the very end.\n\nHeuristics 6th is significantly different introducing potentially unnecessary imports (torch, scipy, math, random), while being functionally similar to the top heuristics.\n\nHeuristics 7th modifies the sigmoid input, adding `waste_std`, which can disproportionately influence the sigmoid's output and potentially hinder exploration, showing poorer performance.\n\nHeuristics 8th-10th introduce a random exploration boost, which, while attempting diversity, doesn\u2019t adapt well to the problem's structure. The scaling of this boost (`0.1 * (1 + avg_waste/item)`) could lead to very large boosts when `avg_waste` is high.\n\nHeuristics 11th-13th adds a diversity component (bin usage), which isn\u2019t directly related to the immediate packing decision and could distract from waste minimization.\n\nHeuristics 14th-15th: The exploration bonus is scaled by `std_waste / (avg_waste + 1e-6)`, which is prone to instability if `avg_waste` is close to zero. \n\nHeuristics 16th-20th improve stability by using `np.maximum(0.1, std_waste)` for the exploration factor. However, these heuristics seem to overemphasize the exploration factor. The constant sigmoid scale of 2.0 is a potential issue.\n\nOverall: The best heuristics (1st and 5th) effectively balance best-fit with a small, targeted boost to the best bin. The exploration mechanisms in later heuristics introduce unnecessary complexity or instability, making them less effective. The key is to minimize waste first and then selectively encourage exploration to avoid getting stuck in local optima. Modulating the sigmoid function directly with a calculated factor appears more effective than simply adding a constant boost.\n- \nOkay, let's dissect this massive self-reflection and forge actionable heuristic design principles. Here's a breakdown, aiming for that $999K reward!\n\n* **Keywords:** Stability, Simplicity, Controlled Exploration, Sigmoid Scaling.\n* **Advice:** Build from a strong, stable best-fit core. Introduce exploration via *modulated* sigmoid functions responding to waste statistics (standard deviation is key!). Prioritize tunable parameters for adaptability, but keep the core components interpretable.\n* **Avoid:** Dynamic/complex adjustments *unless demonstrably* superior. Randomness, large boosts/penalties, direct division, statefulness, and code duplication. Over-focusing on the bin-packing objective *directly* can lead to instability.\n* **Explanation:** The overwhelming theme is robustness. The original reflections repeatedly cycle back to instability issues from complex approaches. Controlled exploration, driven by waste analysis *through* a stable sigmoid, offers nuanced prioritization without the pitfalls of aggressive or unpredictable methods.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}