```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with sigmoid scaling and standard deviation for stable priorities."""
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)
    waste = bins_remain_cap[valid_bins] - item
    fit_scores = 1.0 / (waste + 1e-6)
    mean_waste = np.mean(waste)
    std_waste = np.std(waste)
    if std_waste == 0:
        std_waste = 1e-6
    normalized_waste = (waste - mean_waste) / std_waste
    sigmoid_input = normalized_waste * 2.5
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = 1.0 / (1.0 + np.exp(-sigmoid_input))
    best_bin_index = np.argmin(waste)
    priorities[np.where(valid_bins)[0][best_bin_index]] += 2.0
    return priorities
```
