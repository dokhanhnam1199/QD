```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization with sigmoid scaling for stable bin selection."""
    possible_bins = bins_remain_cap >= item
    if np.sum(possible_bins) == 0:
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap[possible_bins] - item
    relative_waste = waste / np.max(waste) if np.max(waste) > 0 else waste
    sigmoid_scaled_waste = 1 / (1 + np.exp(-5.0 * relative_waste))
    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = sigmoid_scaled_waste
    best_bin_index = np.argmin(waste)
    priorities[np.where(possible_bins)[0][best_bin_index]] += 2.0
    return priorities
```
