```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit inverse waste with worst-fit penalty and diversity."""
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)
    waste = bins_remain_cap[valid_bins] - item
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = 1.0 / (waste + 1e-9)
    worst_bin_index = np.argmax(waste)
    priorities[np.where(valid_bins)[0][worst_bin_index]] += 0.1
    diversity_score = 1.0 / (np.sum(valid_bins) + 1e-6)
    priorities[valid_bins] += 0.05 * diversity_score
    return priorities
```
