```python
import numpy as np

sigmoid_scale = 5.0
best_bin_boost = 2.0
decay_rate = 0.995

def priority_v2(item: float, bins_remain_cap: np.ndarray, iteration: int = 0) -> np.ndarray:
    """
    Combines best-fit with sigmoid scaling, a decaying best-bin boost,
    and handles edge cases for robustness.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    waste = bins_remain_cap[valid_bins] - item
    sigmoid_scaled_waste = 1 / (1 + np.exp(-sigmoid_scale * waste))

    priorities[valid_bins] = sigmoid_scaled_waste

    best_bin_index = np.argmin(waste)
    boosted_priority = priorities[valid_bins][best_bin_index] + best_bin_boost * np.exp(-decay_rate * iteration)
    priorities[np.where(valid_bins)[0][best_bin_index]] = boosted_priority

    return priorities
```
