{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit (waste minimization) with sigmoid scaling for stability.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        best_bin_index = np.argmin(waste)\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale))\n        priorities[valid_bins] = sigmoid_scaled_waste\n        priorities[np.where(valid_bins)[0][best_bin_index]] = best_bin_boost\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's dissect this and craft a response geared towards designing *better* heuristics, leveraging the provided analyses. Here's a breakdown, aiming for that $999K tip!\n\n**Here's the response:**\n\n*   **Keywords:** Exploration, Diversity, Dynamic Prioritization, Robustness\n*   **Advice:** Embrace *controlled* randomness. Introduce mechanisms rewarding 'worse' fits occasionally. Dynamically shift focus *away* from highly utilized bins, but cautiously.\n*   **Avoid:** Over-reliance on smoothing/normalization (sigmoid). Stability isn't the primary goal if it stifles exploration. Don't prioritize minimizing immediate waste; focus on long-term potential.\n*   **Explanation:** The 'Ineffective' reflection prioritized local optimization & stability. The 'Current' shows exploration is key. Better heuristics need to *balance* exploitation with diverse searching\u2014even if it means temporarily worsening waste\u2014to escape local optima.\n\n\n\n**Step-by-step thinking behind this:**\n\n1.  **Core Conflict:** The two analyses represent a fundamental tension: stability vs. exploration. The 'Ineffective' analysis fixated on stability (sigmoid, normalization, best-fit focus). The 'Current' acknowledges that can lead to premature convergence.\n2.  **The Key Insight:** The 'Current' analysis's success with exploring 'worse' fits is the most valuable piece. This suggests the algorithm was getting stuck in local optima and needed a nudge to consider alternative solutions.\n3.  **Reframing Advice:** Instead of smoothing and stabilizing, we want to *introduce* controlled disruption. Rewarding 'worse' fits and de-prioritizing popular bins accomplishes this.\n4.  **Conciseness:** Kept it brief, as requested, while still conveying the crucial shift in thinking.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}