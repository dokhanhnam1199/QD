```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit waste minimization with diversity and exploration."""
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities
    waste = bins_remain_cap[valid_bins] - item
    best_fit_score = -waste
    bin_counts = np.zeros_like(bins_remain_cap)
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] > 0:
            bin_counts[i] = 1
    diversity_score = bin_counts[valid_bins]
    priorities[valid_bins] = (0.7 * best_fit_score + 0.3 * diversity_score)
    best_bin_index = np.argmin(waste)
    priorities[valid_bins][best_bin_index] += 1.0
    priorities[valid_bins] += 0.1 * np.random.rand(np.sum(valid_bins))
    return priorities
```
