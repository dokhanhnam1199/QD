```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A priority function for online Bin Packing Problem (BPP) that combines
    best-fit decreasing with a dynamic penalty for bins that are too small
    and a bonus for bins with high remaining capacity. It uses a
    learned weighting scheme between these factors.
    """
    sigmoid_scale = 5.0
    best_bin_boost = 10.0
    small_bin_penalty_factor = 2.0
    high_cap_bonus_factor = 1.0

    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap[valid_bins] - item
    
    priorities = np.zeros_like(bins_remain_cap)

    if np.any(valid_bins):
        
        waste_scores = 1 / (1 + np.exp(-waste * sigmoid_scale))
        
        penalty = np.where(bins_remain_cap < item * small_bin_penalty_factor,
                           -1.0, 0.0)
        
        bonus = np.where(bins_remain_cap > item * (1 + high_cap_bonus_factor),
                         1.0, 0.0)
        
        
        combined_scores = 0.5 * waste_scores + 0.2 * bonus - 0.3 * penalty
        priorities[valid_bins] = combined_scores
        best_bin_index = np.argmin(waste)
        priorities[np.where(valid_bins)[0][best_bin_index]] += best_bin_boost
    
    return priorities
```
