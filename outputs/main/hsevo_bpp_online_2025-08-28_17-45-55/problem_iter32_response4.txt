```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with sigmoid scaling and exploration based on waste std."""
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities
    waste = bins_remain_cap[valid_bins] - item
    best_bin_index = np.argmin(waste)
    std_waste = np.std(waste)
    sigmoid_scale = 5.0
    exploration_factor = 0.1 * np.exp(-std_waste / (np.mean(waste) + 1e-6))
    sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale))
    priorities[valid_bins] = sigmoid_scaled_waste + exploration_factor
    priorities[np.where(valid_bins)[0][best_bin_index]] += 0.1
    return priorities
```
