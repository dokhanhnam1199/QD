```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste normalization with a best-bin boost and a worst-fit penalty."""
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    waste = bins_remain_cap[valid_bins] - item
    mean_waste = np.mean(waste)
    std_waste = np.std(waste)

    if std_waste > 0:
        normalized_waste = (waste - mean_waste) / std_waste
    else:
        normalized_waste = np.zeros_like(waste)

    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = 1 / (1 + np.exp(-normalized_waste))

    best_bin_index = np.argmin(waste)
    priorities[valid_bins[best_bin_index]] = np.max(priorities[valid_bins])

    worst_bin_index = np.argmax(waste)
    priorities[valid_bins[worst_bin_index]] -= 0.5

    return priorities
```
