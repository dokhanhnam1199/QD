```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best fit (minimizing waste) with sigmoid scaling for stability.
    Prioritizes bins that best fit the item and normalizes priority scores.
    """
    possible_bins = bins_remain_cap[bins_remain_cap >= item]
    if len(possible_bins) == 0:
        return np.zeros_like(bins_remain_cap)

    waste = possible_bins - item
    scores = 1 / (1 + np.exp(-(np.argmin(waste) - np.argsort(waste)[0]) / (np.std(waste) + 1e-6)))
    priorities = np.zeros_like(bins_remain_cap)
    bin_indices = np.where(bins_remain_cap >= item)[0]
    
    best_bin_index = bin_indices[np.argmin(waste)]
    
    priorities[best_bin_index] = scores
    
    return priorities
```
