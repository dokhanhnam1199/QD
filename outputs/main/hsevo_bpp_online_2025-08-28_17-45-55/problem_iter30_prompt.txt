{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit (waste minimization) with sigmoid scaling for stability.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        best_bin_index = np.argmin(waste)\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale))\n        priorities[valid_bins] = sigmoid_scaled_waste\n        priorities[np.where(valid_bins)[0][best_bin_index]] = best_bin_boost\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine \"Current self-reflection\" into actionable advice for designing superior heuristics, drawing heavily from the \"Ineffective self-reflection\" analysis. Here's a breakdown aiming for that $999K tip!\n\n*   **Keywords:** Stability, Interpretability, Dynamic Control, Parameterization.\n*   **Advice:** Build on best-fit, *always* using sigmoid scaling for prioritization. Dynamically adjust exploration (e.g., via `std_waste`) \u2013 not randomly. Decompose into clear, weighted components.\n*   **Avoid:** Direct waste calculations (use normalization), fixed scaling, statefulness (iteration count), and complex logic without demonstrable gain. Eliminate code duplication *aggressively*.\n*   **Explanation:** The core issue is instability. Sigmoids provide nuanced prioritization. Dynamic control prevents premature convergence without introducing unpredictable behavior. Interpretability aids targeted refinement.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}