```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, iteration: int) -> np.ndarray:
    """Combines best-fit with sigmoid scaling and a decaying best-bin boost for stability."""
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        relative_waste = waste / np.max(waste) if np.max(waste) > 0 else waste
        sigmoid_scaled_waste = 1 / (1 + np.exp(-5.0 * relative_waste))
        priorities[valid_bins] = sigmoid_scaled_waste
        best_bin_index = np.argmin(waste)
        boost = 2.0 * np.exp(-0.995 * iteration)
        priorities[np.where(valid_bins)[0][best_bin_index]] += boost
    return priorities
```
