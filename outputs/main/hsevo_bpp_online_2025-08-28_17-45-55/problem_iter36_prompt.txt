{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit (waste minimization) with sigmoid scaling for stability.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        best_bin_index = np.argmin(waste)\n        sigmoid_scaled_waste = 1 / (1 + np.exp(-waste * sigmoid_scale))\n        priorities[valid_bins] = sigmoid_scaled_waste\n        priorities[np.where(valid_bins)[0][best_bin_index]] = best_bin_boost\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, here's a redefined approach to self-reflection for heuristic design, aimed at maximizing effectiveness, based on dissecting the provided text. This is geared towards designing *better* heuristics, not just bin-packing ones.\n\n* **Keywords:** Meta-optimization, Dynamic Modulation, Stability, Interpretability.\n* **Advice:** Focus on *modulating* existing, stable heuristics (like best-fit) via waste statistics (std_dev) *directly within* priority functions (sigmoid). Prioritize interpretable components and tunable parameters controlling exploration/exploitation.\n* **Avoid:** Directly optimizing for the objective function during heuristic *design* (waste minimization is the *result*, not the guiding principle). Shun redundant code, complex statefulness, and ad-hoc boosts/penalties without clear rationale.\n* **Explanation:** The core issue is the previous self-reflection got stuck in local optima by focusing too much on the immediate objective. True improvement comes from systematically *controlling* exploration around a strong base heuristic, guided by data about the search landscape\u2014not by trying to directly \u201csolve\u201d the problem within the heuristic itself.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}