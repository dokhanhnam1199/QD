```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used an optimization heuristic. It favors bins with remaining capacity
    just above the item size and penalizes bins that are very full, as they might
    lead to fragmentation. 

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize scores with zeros
    scores = np.zeros_like(bins_remain_cap)

    # Calculate difference between remaining capacity and item size
    diff = bins_remain_cap - item

    # Assign scores: prioritize bins where item fits
    # Penalize bins that are almost full but cannot fit the item
    scores[diff == 0] = 1  # Perfect fit, highest priority
    scores[(diff > 0) & (diff < min(item * 1.2, 10))] = 0.9  # Good matches,second priority
    scores[(diff < 0) & (np.abs(diff) <= max(item * 0.2, 5))] = -0.5  # Small undercut, avoided the bin
    scores[(diff < 0) & (np.abs(diff) > max(item * 0.2, 5))] = -1  # Large undercut, discouraged the bin

    # Normalize scores with respect to the number of available bins
    scores = scores / (np.sum(bins_remain_cap > 0) + 1)

    return scores
```
