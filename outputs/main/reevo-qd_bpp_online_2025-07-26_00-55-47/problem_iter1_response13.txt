```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used penalties to encourage efficient packing while distributing load.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that are already fairly full
    fullness_penalty = 1 - (bins_remain_cap / np.max(bins_remain_cap)) ** 2
    
    # Encourage using bins with enough space in comparison to the item size
    capacity_utility = (bins_remain_cap - item) / bins_remain_cap
    
    # Penalize bins to avoid a situation where a singular bin is overloaded
    num_bins_penalty = np.arange(len(bins_remain_cap)) / len(bins_remain_cap)
    
    # Combine different strategies
    priority_scores = (
        capacity_utility * 5  # Highly important, do not risk putting big items in small bins
        - fullness_penalty  # Encourage full but not overcrowded bins
        - num_bins_penalty * 0.1  # Slightly discourage using more bins
    )
    
    # Prevent any negative utility due to insulting combinations of large items and small bins
    priority_scores = np.clip(priority_scores, a_min=0, a_max=None)
    
    return priority_scores
```
