{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used.\n    \n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the exact fit of the item in the remaining capacity\n    exact_fit = bins_remain_cap == item\n    \n    # Calculate a soft priority score for items that fit nearly perfectly with a small leftover\n    nearly_exact_fit = (bins_remain_cap / item) > 0.95\n    \n    # Penalty for leaving a lot of space, reducing the fill ratio\n    fill_ratio = (bins_remain_cap - item) / bins_remain_cap\n    \n    # Priority increases if the bin is not overly influenced by previously packed larger items\n    potential_wastage = (bins_remain_cap - item) ** 2\n    \n    # Combination of all these factors\n    priority_scores = (\n        100 * exact_fit + 60 * nearly_exact_fit -\n        50 * fill_ratio + \n        2 * (bins_remain_cap > item) / potential_wastage\n    )\n    \n    # Avoid nan values caused by division by zero\n    priority_scores[np.isnan(priority_scores)] = -np.inf\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalty for creating empty spaces is proportional to the square of the space left\n    # if the item is placed in the bin. Also, bins with less remaining capacity get a higher priority.\n    priority_scores = bins_remain_cap - (bins_remain_cap - item) ** 2\n    # Give a penalty to bins where the item would overflow\n    priority_scores[bins_remain_cap < item] = -np.inf\n    return priority_scores\n\n[Reflection]\nFocus on simple, effective penalties for space and overflows; consider bin capacity directly.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}