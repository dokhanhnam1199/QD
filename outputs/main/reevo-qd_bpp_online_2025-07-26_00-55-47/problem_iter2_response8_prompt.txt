{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used penalties to encourage efficient packing while distributing load.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize bins that are already fairly full\n    fullness_penalty = 1 - (bins_remain_cap / np.max(bins_remain_cap)) ** 2\n    \n    # Encourage using bins with enough space in comparison to the item size\n    capacity_utility = (bins_remain_cap - item) / bins_remain_cap\n    \n    # Penalize bins to avoid a situation where a singular bin is overloaded\n    num_bins_penalty = np.arange(len(bins_remain_cap)) / len(bins_remain_cap)\n    \n    # Combine different strategies\n    priority_scores = (\n        capacity_utility * 5  # Highly important, do not risk putting big items in small bins\n        - fullness_penalty  # Encourage full but not overcrowded bins\n        - num_bins_penalty * 0.1  # Slightly discourage using more bins\n    )\n    \n    # Prevent any negative utility due to insulting combinations of large items and small bins\n    priority_scores = np.clip(priority_scores, a_min=0, a_max=None)\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used an optimization heuristic. It favors bins with remaining capacity\n    just above the item size and penalizes bins that are very full, as they might\n    lead to fragmentation. \n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize scores with zeros\n    scores = np.zeros_like(bins_remain_cap)\n\n    # Calculate difference between remaining capacity and item size\n    diff = bins_remain_cap - item\n\n    # Assign scores: prioritize bins where item fits\n    # Penalize bins that are almost full but cannot fit the item\n    scores[diff == 0] = 1  # Perfect fit, highest priority\n    scores[(diff > 0) & (diff < min(item * 1.2, 10))] = 0.9  # Good matches,second priority\n    scores[(diff < 0) & (np.abs(diff) <= max(item * 0.2, 5))] = -0.5  # Small undercut, avoided the bin\n    scores[(diff < 0) & (np.abs(diff) > max(item * 0.2, 5))] = -1  # Large undercut, discouraged the bin\n\n    # Normalize scores with respect to the number of available bins\n    scores = scores / (np.sum(bins_remain_cap > 0) + 1)\n\n    return scores\n\n[Reflection]\nFocus on item-bin fit, penalize overfull bins, avoid large capacity mismatches.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}