```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used logic to make a decision, where an attempt is made to balance
    item distribution across bins to avoid any single bin being overloaded too
    early.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Priority calculation: Higher scores are more favorable
    # Encourages placing items in bins that have ideal room (not empty but not full either)
    # Subtracts small value if the bin already contains an item to avoid first-item-in-bin policy
    ideal_fit_score = np.where(bins_remain_cap >= item, (bins_remain_cap - item), -np.inf)
    balance_score = np.array(bins_remain_cap != np.max(bins_remain_cap), dtype=float) * np.max(bins_remain_cap) * 0.1
    non_empty_adjustment = np.full_like(bins_remain_cap, -1e-3)
    non_empty_adjustment[bins_remain_cap < np.max(bins_remain_cap)] = 0

    priority_scores = ideal_fit_score + balance_score + non_empty_adjustment
    return priority_scores
```
