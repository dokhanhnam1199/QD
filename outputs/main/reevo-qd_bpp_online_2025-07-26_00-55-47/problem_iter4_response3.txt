```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for adding an item to each bin in the online Bin Packing Problem.

    This implementation aims to:
    - Prioritize bins where the item fits perfectly.
    - Prioritize bins where the item fits almost perfectly (within 10% of item size).
    - Penalize bins that are almost full but cannot fit the item (within 10% of item size).
    - Favor bins that have more remaining capacity, dynamically adjusting based on the current state of bins.

    Args:
        item: Size of the item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of the same size as bins_remain_cap with the priority score of each bin.
    """
    # Calculate the maximum remaining capacity to normalize scores
    max_cap = np.max(bins_remain_cap, initial=1)
    
    # Perfect fit score
    perfect_fit_scores = (bins_remain_cap == item).astype(int) * 100
    
    # Near fit score (within 10% of item size)
    near_fit_scores = ((bins_remain_cap > item) & (bins_remain_cap <= item * 1.1)).astype(int) * 50
    
    # Penalty for bins that are almost full but cannot fit the item (within 10% of bin's current space)
    almost_full_penalty = ((bins_remain_cap < item) & (bins_remain_cap >= item * 0.1)).astype(int) * -20
    
    # Penalty for small bins to avoid filling very small spaces
    size_penalty = - ((bins_remain_cap / max_cap) ** 2) * 10
    
    # Favor bins that have more remaining capacity relative to the maximum capacity
    fill_advanced_bins = (bins_remain_cap / max_cap) * 25
    
    # Calculate the final priority score as a weighted sum of all the factors
    priority_scores = (perfect_fit_scores + near_fit_scores + almost_full_penalty +
                       size_penalty + fill_advanced_bins)
    
    return priority_scores
```
