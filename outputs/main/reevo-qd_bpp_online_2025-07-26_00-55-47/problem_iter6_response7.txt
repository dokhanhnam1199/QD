```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins where the item does not fit
    penalty_for_overflow = np.where(bins_remain_cap < item, -np.inf, 0)
    
    # Reward bins that fit the item with a score based on remaining capacity
    priority_scores = bins_remain_cap - item
    
    # Combine penalties and priorities
    priority_scores += penalty_for_overflow
    
    return priority_scores
```
