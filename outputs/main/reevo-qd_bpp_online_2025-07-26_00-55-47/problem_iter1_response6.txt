```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used penalties to encourage efficient packing while filling larger spaces.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # We give higher priority to bins with larger remaining capacity after placing the item
    priority_score = bins_remain_cap - item
    
    # Bins that cannot fit the item should have a very low priority
    priority_score[priority_score < 0] = -np.inf
    
    # Penalty for the number of bins used: more bins -> lower score
    # Normalize the decrease in score by the maximum possible capacity to give relative importance
    max_bin_cap = np.max(bins_remain_cap)
    normalized_active_bins = np.sum(bins_remain_cap >= item) / len(bins_remain_cap)
    penalty_per_bin = -normalized_active_bins * (max_bin_cap / len(bins_remain_cap))
    
    # Apply the penalty to the bins that can accept the item
    valid_bins_mask = bins_remain_cap >= item
    priority_score[valid_bins_mask] += penalty_per_bin[valid_bins_mask]
    
    return priority_score
```
