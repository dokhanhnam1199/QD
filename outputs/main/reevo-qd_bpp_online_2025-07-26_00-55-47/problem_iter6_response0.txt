```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation focuses on perfect and near-perfect fits, and penalizes bins with small remaining capacities
    to reduce fragmentation and ensure efficient use of space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Perfect fit: item fits exactly into the bin
    perfect_fit = (bins_remain_cap == item)
    priority_scores[perfect_fit] += 100
    
    # Near-perfect fit: item fits leaving less than 10% of bin's capacity
    near_perfect_fit = (bins_remain_cap > item) & (bins_remain_cap - item < 0.1 * bins_remain_cap)
    priority_scores[near_perfect_fit] += 50
    
    # Penalize bins with small remaining capacity (less than or equal to 50% of the item's size)
    small_capacity_penalty = np.where(bins_remain_cap <= 0.5 * item, -50, 0)
    priority_scores += small_capacity_penalty
    
    return priority_scores
```
