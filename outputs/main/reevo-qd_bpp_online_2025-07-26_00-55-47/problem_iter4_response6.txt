```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after placing the item in each bin
    remaining_after_item = bins_remain_cap - item
    
    # Penalize bins where the item does not fit
    penalty_for_overflow = np.where(bins_remain_cap < item, -np.inf, 0)
    
    # Penalize bins with larger remaining space after placing the item
    priority_scores = remaining_after_item - remaining_after_item ** 2
    
    # Combine penalties
    priority_scores += penalty_for_overflow
    
    # Prioritize bins with less space left after adding the item
    priority_scores += (bins_remain_cap - item) ** -1 * (bins_remain_cap >= item)
    
    return priority_scores
```
