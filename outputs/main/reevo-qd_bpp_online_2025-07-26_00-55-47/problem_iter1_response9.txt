```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used logic to make a decision, slightly adjusting to favor bins that are 
    near full but can still fit the item. It minimizes the bin count by trying to 
    make use of spaces  optimally.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensuring that bins which do not have adequate remaining capacity get very low priority
    feasible_mask = bins_remain_cap >= item
    
    # Inverse distance to full, the bins that have less space remaining after adding are prioritized
    inverse_distance_to_full = (bins_remain_cap - item)[feasible_mask]
    max_remaining = bins_remain_cap.max() if bins_remain_cap.max() != item else item
    min_in_distance_to_full = 1 if bins_remain_cap.max() == item else 1 / (min(max_remaining - item, np.min(inverse_distance_to_full[np.nonzero(inverse_distance_to_full)])) if np.any(inverse_distance_to_full) else 1)
    # Priorities are maximised if remaining spaces are least after adding, scaled linearly.
    priorities = np.zeros_like(bins_remain_cap)
    priorities[feasible_mask] = min_in_distance_to_full / (inverse_distance_to_full + 1e-6)
    
    # Adding very small positive bias to capacities that are exactly the item size.
    capacity_equals_item = (bins_remain_cap == item)
    if np.any(capacity_equals_item):
        priorities[target] += 1  # Increasing priority for upcoming near filled bins aromatic-ally, practically small-nudge
    
    return priorities
```
