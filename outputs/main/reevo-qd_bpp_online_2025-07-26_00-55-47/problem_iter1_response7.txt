```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # If an item is larger than any remaining space in a bin, give it a negative priority
    bins_full_enough = bins_remain_cap >= item
    
    # Create a base priority inversely proportional to the remaining space
    base_priority = 1 / np.where(bins_full_enough, bins_remain_cap, np.inf)
    
    # Find the density score for each bin: inversely proportional to remaining capacity
    bin_density_scores = 1 / np.maximum(bins_remain_cap, 1)  # Avoid infinites at zero capacity
    
    # Ensure non-eligible bins receive the minimum possible priority
    densities_with_penalty = np.where(bins_full_enough, bin_density_scores, 0)
    
    # Esteem higher prioritization to bins that, when using this item, have a higher density
    # Overall score will be average between base conclusion and density punishment
    priority_score = 0.5 * densities_with_penalty + 0.5 * base_priority
    
    return priority_score
```
