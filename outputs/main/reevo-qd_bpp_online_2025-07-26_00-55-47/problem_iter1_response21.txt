```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the exact fit of the item in the remaining capacity
    exact_fit = bins_remain_cap == item
    
    # Calculate a soft priority score for items that fit nearly perfectly with a small leftover
    nearly_exact_fit = (bins_remain_cap / item) > 0.95
    
    # Penalty for leaving a lot of space, reducing the fill ratio
    fill_ratio = (bins_remain_cap - item) / bins_remain_cap
    
    # Priority increases if the bin is not overly influenced by previously packed larger items
    potential_wastage = (bins_remain_cap - item) ** 2
    
    # Combination of all these factors
    priority_scores = (
        100 * exact_fit + 60 * nearly_exact_fit -
        50 * fill_ratio + 
        2 * (bins_remain_cap > item) / potential_wastage
    )
    
    # Avoid nan values caused by division by zero
    priority_scores[np.isnan(priority_scores)] = -np.inf
    
    return priority_scores
```
