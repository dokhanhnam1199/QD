```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins where the item fits perfectly or almost perfectly,
    penalizes bins that are almost full but cannot fit the item, and dynamically adjusts weights.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Give higher priority to bins where the item fits perfectly
    perfect_fit_scores = (bins_remain_cap - item == 0).astype(int) * 100
    
    # Give somewhat lower priority to bins where the item fits almost perfectly (within 10% of item size)
    near_fit_scores = ((bins_remain_cap - item > 0) & (bins_remain_cap - item <= item * 0.1)).astype(int) * 50
    
    # Penalize bins that are almost full but cannot fit the item
    almost_full_penalty = ((bins_remain_cap - item < 0) & (bins_remain_cap - item > -0.1 * item)).astype(int) * -20
    
    # Penalize bins that are already very small (less than 10% of the maximum remaining capacity)
    size_penalty = (bins_remain_cap / np.max(bins_remain_cap, initial=1) < 0.1).astype(int) * -30
    
    # Calculate the final priority as a weighted sum
    priority_scores = perfect_fit_scores + near_fit_scores + almost_full_penalty + size_penalty
    
    return priority_scores
```
