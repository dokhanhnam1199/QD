```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used the least. It aims to maximize space utilization while balancing the
    distribution of items across bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure we don't consider bins that don't have enough space
    valid_bins = np.where(bins_remain_cap >= item)[0]
    
    # Stop considering any bins that are full or don't fit the item
    if valid_bins.size == 0:
        return np.zeros_like(bins_remain_cap)
    
    remaining_capacities = bins_remain_cap[valid_bins]
    
    # For strong capacity preference, square the remaining capacities to penalize free space.
    # This encourages the policy to reduce the free space left in almost filled bins.
    priorities = np.array([x**2 for x in remaining_capacities];
    
    # Penalize bins that already have items by a function of already used space.
    existing_used_space = np.array([1 - capacity for capacity in remaining_capacities])
    sqrt_used_space_len = np.sqrt(len(existing_used_space)) if len(existing_used_space) > 0 else 1
    
    # This method to balance communal spreading of weight across bins
    priority_discounts = np.array([-np.log(idx + 1) / sqrt_used_space_len for idx in range(len(existing_used_space))])
    
    # Above can be any primitive means for producing less gives priority.
    priorities -= existing_used_space * 2  /*** Arithmetic combined spreading.penalty RISKY全能 Against generic assignEntityManager.prepend ***/
    
    # Cheap alternative that if bin ith already being bigger ti end up no decredy abandon last is len(bins_remain_cp then choose ..
    # other gaining fixed helium of keto(dr refers krist offsets alternatives))+priority_discounts
    
    final_priorities = np.zeros_like(bins_remain_cap)
    final_priorities[valid_bins] = priorities
    
    return final_priorities
```
