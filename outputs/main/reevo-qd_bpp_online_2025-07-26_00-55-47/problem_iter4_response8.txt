```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on perfect and near-perfect fits, penalizes fragmentation
    and near-overfull bins, dynamically weighs capacities, and discourages small gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize scores with zeros
    scores = np.zeros_like(bins_remain_cap)
    
    # Perfect fit
    perfect_fit_mask = bins_remain_cap == item
    scores[perfect_fit_mask] = 100
    
    # Near perfect fit (within 5% of item size)
    near_fit_mask = (bins_remain_cap > item) & (bins_remain_cap <= item * 1.05)
    scores[near_fit_mask] += 50
    
    # Penalty for bins that are almost full but cannot fit the item (within 5% of item size)
    almost_full_penalty_mask = (bins_remain_cap < item) & (bins_remain_cap >= item * 0.95)
    scores[almost_full_penalty_mask] -= 20
    
    # Penalize small remaining capacity after placing the item
    post_fit_remain = bins_remain_cap - item
    small_gap_penalty = (post_fit_remain > 0) & (post_fit_remain < item * 0.1)
    scores[small_gap_penalty] -= 10 * (item - post_fit_remain[small_gap_penalty]) / item
    
    # Encourage bins that have more remaining capacity to be filled first
    fill_large_bins = (bins_remain_cap / np.max(bins_remain_cap, initial=np.inf)) * 20
    scores += fill_large_bins

    return scores
```
