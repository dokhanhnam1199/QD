```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used through a combination of the fullness score and the spread score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the empty space in each bin
    empty_space = bins_remain_cap
    
    # Calculate the fullness score for each bin (lower is better, as it means less wasted space)
    # Prevent division by zero by adding a small epsilon
    fullness_score = empty_space / (bins_remain_cap.sum() + 1e-10)
    
    # Calculate the spread score for each bin
    # This score encourages choosing items that help in filling the bins more uniformly
    filled_space = 1 - fullness_score
    spread_score = filled_space.sum() - filled_space**2
    
    # Create a priority score that is high for bins with simulateous lowest fullness score and balanced distribution of items
    # Adjust coefficients to tune between "searching for a tight fit" and "saving room"
    priority_score = (1 - fullness_score - 0.1 * spread_score) * (bins_remain_cap >= item)
    
    # Penalize bins that cannot hold the item sufficiently
    priority_score[bins_remain_cap < item] = -1
    
    return priority_score
```
