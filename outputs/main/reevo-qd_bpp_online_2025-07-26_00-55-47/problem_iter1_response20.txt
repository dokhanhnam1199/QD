```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used penalties to encourage efficient packing while distributing load.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    remain_cap_normalized = bins_remain_cap / np.max(bins_remain_cap)
    
    # Penalize for each full bin
    full_bins_penalty = np.where(bins_remain_cap > item, 1, 0)
    
    # Reward for larger remaining capacity
    remaining_space_reward = remain_cap_normalized
    
    # Encourage the use of bins while avoiding overpacking
    priority_scores = full_bins_penalty * remaining_space_reward / (np.sum(full_bins_penalty) + 1e-9)
    
    return priority_scores
```
