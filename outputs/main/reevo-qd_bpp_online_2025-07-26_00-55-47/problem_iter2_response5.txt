```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that can fit the item with minimal gaps,
    harshly penalizes non-fit bins, and encourages using larger residual spaces progressively.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores with zeros
    priority = np.zeros_like(bins_remain_cap)
    
    # Identify bins that can fit the item
    can_fit_item_mask = bins_remain_cap >= item
    if np.any(can_fit_item_mask):
        # Calculate gaps for bins that can fit the item
        gaps = bins_remain_cap[can_fit_item_mask] - item
        
        # Penalize bins with larger gaps less harshly
        min_gap = np.min(gaps)
        gap_penalty = 1 - (gaps - min_gap) / (np.max(gaps) - min_gap) if np.max(gaps) != min_gap else 0
        
        # Reduce penalty for bins with the smallest gaps
        priority[can_fit_item_mask] = gap_penalty + 1
    
    # Harshly penalize bins that cannot fit the item
    priority[~can_fit_item_mask] -= 2
    
    # Encourage using larger residual spaces progressively
    # Normalize remaining capacities to a smaller range where larger capacities get higher scores
    remaining_cap_score = bins_remain_cap / np.max(bins_remain_cap) * 0.1
    priority += remaining_cap_score
    
    return priority
```
