{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Prioritize bins where adding the item will leave the least space unused\n    fullness_penalty = (bins_remain_cap - item) ** 2\n    # Penalize overflows harshly to reduce fragmentation\n    overflow_penalty = np.where(bins_remain_cap < item, 10 * (bins_remain_cap - item) ** 2, 0)\n    # Encourage bins that are not empty to be filled further to reduce fragmentation\n    non_empty_bonus = np.where(bins_remain_cap < np.max(bins_remain_cap), bins_remain_cap, 0)\n    \n    priority_scores = -(fullness_penalty + overflow_penalty) + non_empty_bonus\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation considers perfect fits, near-perfect fits, and penalizes bins with small remaining capacities.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priority scores\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Perfect fit: item fits exactly into the bin\n    perfect_fit = (bins_remain_cap == item)\n    priority_scores[perfect_fit] += 100\n    \n    # Near-perfect fit: item fits leaving less than 10% of bin's capacity\n    near_perfect_fit = (bins_remain_cap > item) & (bins_remain_cap - item < 0.1 * item)\n    priority_scores[near_perfect_fit] += 50\n    \n    # Penalize bins with small remaining capacity (less than or equal to 50% of the item's size)\n    small_capacity_penalty = np.where(bins_remain_cap <= 0.5 * item, -50, 0)\n    priority_scores += small_capacity_penalty\n    \n    return priority_scores\n\n[Reflection]\nFocus on perfect and near-perfect fits, penalize small bin capacities, and avoid complex penalties encouraging fragmentation.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}