```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a heuristic that penalizes placing an item in a nearly full bin
    and rewards placing it in a less occupied bin to avoid excessive fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero by ensuring that where bins_remain_cap is zero,
    # we get a high penalty (. or low priority).
    epsilon = 1e-10
    remaining_cap = np.clip(bins_remain_cap, a_min=epsilon, a_max=None)
    priority_scores = remaining_cap - item
    
    # Penalize bins that already contain many items by also considering the 
    # effect on future space occupancy.
    # Using heuristic score that combines remaining capacity and current fragments
    num_bins = bins_remain_cap.shape[0]
    current_bin_state = (bins_remain_cap <= 0).astype(int)  # 1 if full else 0
    delta_full_bins = np.zeros_like(bins_remain_cap)
    
    # Assuming max size of one bin = representative for problem average bin size
    bin_size = bins_remain_cap[0] + item * (current_bin_state == 0).mean()
    item_size_ratio = item / bin_size
    
    # LARGE penalty if it will overflow the bin, positive gain if benefits packing efficiency
    penalty_for_overflow = 10 * item if (remaining_cap < item).any() else 0
    
    total_priority_score = (
        (priority_scores / remaining_cap) -
        0.3 * item_size_ratio * current_bin_state.sum() +
        penalty_for_overflow
    )
    return total_priority_score
```
