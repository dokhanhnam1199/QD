```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins where the item fits perfectly or almost perfectly,
    penalizes bins that are almost full but cannot fit the item, and dynamically adjusts weights
    based on the remaining capacity of the bins. It also penalizes fragmentation by minimizing gaps
    and encourages filling larger bins first. This version introduces more flexibility in weighting
    and fine-tunes the thresholds and penalties.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Parameters for fine-tuning
    perfect_fit_weight = 100
    near_fit_weight = 50
    almost_full_penalty_weight = -20
    post_fit_penalty_weight = -20
    fill_large_bins_weight = 10
    fragmentation_penalty_weight = -10
    near_fit_threshold = 1.03
    almost_full_threshold = 0.97
    
    # Give higher priority to bins where the item fits perfectly
    perfect_fit_scores = (bins_remain_cap == item).astype(int) * perfect_fit_weight
    
    # Give higher priority to bins where the item fits almost perfectly (within near_fit_threshold of item size)
    near_fit_scores = ((bins_remain_cap > item) & (bins_remain_cap <= item * near_fit_threshold)).astype(int) * near_fit_weight
    
    # Penalize bins that are almost full but cannot fit the item (within almost_full_threshold of remaining space)
    almost_full_penalty = ((bins_remain_cap < item) & (bins_remain_cap >= item * almost_full_threshold)).astype(int) * almost_full_penalty_weight
    
    # Penalize bins that have a small remaining capacity after placing the item
    post_fit_penalty = (bins_remain_cap - item) / np.max(bins_remain_cap, initial=1)
    post_fit_penalty = post_fit_penalty ** 2 * post_fit_penalty_weight if item <= np.max(bins_remain_cap) else 0
    
    # Encourage bins that have more remaining capacity to be filled first
    fill_large_bins = bins_remain_cap / np.max(bins_remain_cap, initial=1) * fill_large_bins_weight
    
    # Penalize fragmentation by minimizing gaps
    fragmentation_penalty = ((bins_remain_cap - item) < item * 0.2).astype(int)
    fragmentation_penalty = (bins_remain_cap - item) * fragmentation_penalty * fragmentation_penalty_weight
    
    # Calculate the final priority as a weighted sum
    priority_scores = (perfect_fit_scores + near_fit_scores + almost_full_penalty 
                     + post_fit_penalty + fill_large_bins + fragmentation_penalty)
    
    return priority_scores
```
