```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to fit as we aim to avoid creating a completely full bin.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    #Scores considering remaining capacity inversely
    score_remaining_cap = np.where(bins_remain_cap >= item, bins_remain_cap, -np.inf)
    # Adjusting the score making bins with smaller remaining capacity less attractive
    score_remaining_cap -= (1/(bins_remain_cap + 1e-6) - 1/(bins_remain_cap + 1 - item + 1e-6)) * (bins_remain_cap > item) * 100
    
    # Penal Concavity:a smooth function like sqrt or tanh can be used instead of-linear.
    score_variance= np.sqrt(bins_remain_cap) *10 # Bin with capacity spread well attracts less.i.e unlessç²± squize peacefully.

    # Final scores
    scores = score_remaining_cap - score_variance  
    return scores
```
