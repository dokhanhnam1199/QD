```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins where the item fits perfectly or almost perfectly,
    dynamically adjusts penalties based on the remaining capacity of the bins, and minimizes gaps
    to avoid fragmentation. It also encourages filling larger bins first.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Perfect fit score
    perfect_fit_scores = (bins_remain_cap == item).astype(int) * 100

    # Near fit score (within 10% of item size)
    near_fit_scores = ((bins_remain_cap > item) & (bins_remain_cap <= item * 1.1)).astype(int) * 50

    # Penalty for bins that are almost full but cannot fit the item (within 10% of bin's current space)
    almost_full_penalty = ((bins_remain_cap < item) & (bins_remain_cap >= item * 0.1)).astype(int) * -30

    # Penalize bins that have a small remaining capacity after placing the item
    post_fit_penalty = - ((bins_remain_cap - item) / np.max(bins_remain_cap, initial=1)) ** 2 * 20

    # Encourage bins that have more remaining capacity to be filled first
    fill_large_bins = bins_remain_cap / np.max(bins_remain_cap, initial=1) * 15

    # Penalize fragmentation by minimizing gaps
    fragmentation_penalty = - (bins_remain_cap - item) * ((bins_remain_cap - item) < item * 0.2).astype(int)

    # Calculate the final priority as a weighted sum
    priority_scores = (perfect_fit_scores + near_fit_scores + almost_full_penalty
                     + post_fit_penalty + fill_large_bins + fragmentation_penalty)

    return priority_scores
```
