```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for placing an item into each bin, considering perfect fits, near fits,
    remaining capacity, and penalizing large gaps and bins that are almost full.
    
    Args:
        item: Size of the item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Returns:
        Array of the same size as bins_remain_cap with priority score of each bin.
    """
    # Priority for perfect fit
    perfect_fit = np.where(bins_remain_cap == item, 100, 0)
    
    # Priority for nearly perfect fit (within 5% of item size)
    near_perfect_fit = np.where((bins_remain_cap < item) & (bins_remain_cap >= item * 0.95), 50, 0)
    
    # Penalty for bins that are almost full but cannot fit the item (within 10% of item size)
    almost_full_penalty = np.where((bins_remain_cap < item) & (bins_remain_cap >= item * 0.9), -20, 0)
    
    # Penalty for a small remaining capacity (less than 10% of item size)
    small_remaining_penalty = np.where(bins_remain_cap < item * 0.1, -10, 0)
    
    # Penalty for large gaps (remaining capacity is much larger than the item size)
    large_gap_penalty = np.where(bins_remain_cap > item * 2, -15, 0)
    
    # Reward for bins with more remaining capacity
    fill_large_bins = bins_remain_cap / np.max(bins_remain_cap, initial=1) * 5
    
    # Calculate the final priority as a combination of all factors
    priorities = perfect_fit + near_perfect_fit + almost_full_penalty + \
                 small_remaining_penalty + large_gap_penalty + fill_large_bins
    
    return priorities
```
