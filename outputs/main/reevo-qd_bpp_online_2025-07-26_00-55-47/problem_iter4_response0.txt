```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Prioritize bins where adding the item will leave the least space unused
    fullness_penalty = (bins_remain_cap - item) ** 2
    # Penalize overflows harshly to reduce fragmentation
    overflow_penalty = np.where(bins_remain_cap < item, 10 * (bins_remain_cap - item) ** 2, 0)
    # Encourage bins that are not empty to be filled further to reduce fragmentation
    non_empty_bonus = np.where(bins_remain_cap < np.max(bins_remain_cap), bins_remain_cap, 0)
    
    priority_scores = -(fullness_penalty + overflow_penalty) + non_empty_bonus
    
    return priority_scores
```
