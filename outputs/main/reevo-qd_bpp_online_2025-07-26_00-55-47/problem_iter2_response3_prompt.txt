{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a heuristic that penalizes placing an item in a nearly full bin\n    and rewards placing it in a less occupied bin to avoid excessive fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero by ensuring that where bins_remain_cap is zero,\n    # we get a high penalty (. or low priority).\n    epsilon = 1e-10\n    remaining_cap = np.clip(bins_remain_cap, a_min=epsilon, a_max=None)\n    priority_scores = remaining_cap - item\n    \n    # Penalize bins that already contain many items by also considering the \n    # effect on future space occupancy.\n    # Using heuristic score that combines remaining capacity and current fragments\n    num_bins = bins_remain_cap.shape[0]\n    current_bin_state = (bins_remain_cap <= 0).astype(int)  # 1 if full else 0\n    delta_full_bins = np.zeros_like(bins_remain_cap)\n    \n    # Assuming max size of one bin = representative for problem average bin size\n    bin_size = bins_remain_cap[0] + item * (current_bin_state == 0).mean()\n    item_size_ratio = item / bin_size\n    \n    # LARGE penalty if it will overflow the bin, positive gain if benefits packing efficiency\n    penalty_for_overflow = 10 * item if (remaining_cap < item).any() else 0\n    \n    total_priority_score = (\n        (priority_scores / remaining_cap) -\n        0.3 * item_size_ratio * current_bin_state.sum() +\n        penalty_for_overflow\n    )\n    return total_priority_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used policy (First-Fit-Decreasing strategy).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Give higher priority to bins where the item fits perfectly or almost perfectly\n    perfect_fit_scores = (bins_remain_cap - item == 0).astype(int) * 100\n    near_fit_scores = ((bins_remain_cap - item > 0) & (bins_remain_cap - item <= item * 0.1)).astype(int) * 50\n    \n    # Penalize bins that are already very small\n    size_penalty = - ((bins_remain_cap / np.max(bins_remain_cap, initial=1)) ** 2)\n    \n    # Calculate the final priority as a weighted sum\n    priority_scores = perfect_fit_scores + near_fit_scores + size_penalty\n    \n    return priority_scores\n\n[Reflection]\nFocus on perfect/near fits, penalize small capacities, minimize complexity, and avoid division pitfalls.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}