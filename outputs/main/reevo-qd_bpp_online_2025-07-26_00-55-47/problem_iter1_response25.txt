```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that have the least remaining capacity above the item size or are already full.
    Such an approach helps in keeping bins from becoming unused and underutilized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    # Priority scores: bins that can't fit the item have priority 0
    priority_scores = np.where(can_fit_mask, bins_remain_cap - item, -np.inf)
    # Inverse the priority so bins with just enough space have higher priority
    priority_scores = -priority_scores
    # Ensure that bins with exact fit get highest priority, denoted by np.inf
    priority_scores = np.where(bins_remain_cap - item == 0, np.inf, priority_scores)
    return priority_scores
```
