{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for adding an item to each bin in the online Bin Packing Problem.\n\n    This implementation aims to:\n    - Prioritize bins where the item fits perfectly.\n    - Prioritize bins where the item fits almost perfectly (within 10% of item size).\n    - Penalize bins that are almost full but cannot fit the item (within 10% of item size).\n    - Favor bins that have more remaining capacity, dynamically adjusting based on the current state of bins.\n\n    Args:\n        item: Size of the item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of the same size as bins_remain_cap with the priority score of each bin.\n    \"\"\"\n    # Calculate the maximum remaining capacity to normalize scores\n    max_cap = np.max(bins_remain_cap, initial=1)\n    \n    # Perfect fit score\n    perfect_fit_scores = (bins_remain_cap == item).astype(int) * 100\n    \n    # Near fit score (within 10% of item size)\n    near_fit_scores = ((bins_remain_cap > item) & (bins_remain_cap <= item * 1.1)).astype(int) * 50\n    \n    # Penalty for bins that are almost full but cannot fit the item (within 10% of bin's current space)\n    almost_full_penalty = ((bins_remain_cap < item) & (bins_remain_cap >= item * 0.1)).astype(int) * -20\n    \n    # Penalty for small bins to avoid filling very small spaces\n    size_penalty = - ((bins_remain_cap / max_cap) ** 2) * 10\n    \n    # Favor bins that have more remaining capacity relative to the maximum capacity\n    fill_advanced_bins = (bins_remain_cap / max_cap) * 25\n    \n    # Calculate the final priority score as a weighted sum of all the factors\n    priority_scores = (perfect_fit_scores + near_fit_scores + almost_full_penalty +\n                       size_penalty + fill_advanced_bins)\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Prioritize bins where adding the item will leave the least space unused\n    fullness_penalty = (bins_remain_cap - item) ** 2\n    # Penalize overflows harshly to reduce fragmentation\n    overflow_penalty = np.where(bins_remain_cap < item, 10 * (bins_remain_cap - item) ** 2, 0)\n    # Encourage bins that are not empty to be filled further to reduce fragmentation\n    non_empty_bonus = np.where(bins_remain_cap < np.max(bins_remain_cap), bins_remain_cap, 0)\n    \n    priority_scores = -(fullness_penalty + overflow_penalty) + non_empty_bonus\n    \n    return priority_scores\n\n[Reflection]\nFocus on minimizing unused space, penalizing overflows heavily, and rewarding partially filled bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}