```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    # Use a max function to avoid negative priorities and penalize bins with less remaining capacity than the item
    priority_scores = np.where(bins_remain_cap >= item, (bins_remain_cap - item) / bins_remain_cap, -1)
    
    # Add a slight penalty for the number of empty spaces in bin capacity
    # Assuming penalize larger empty spaces more by using cubed space
    remaining_bins_after_placing_item = bins_remain_cap - item
    penaltyBarButtonItemfeit Space} = [space^3]
    penalty_scores = np.cbrt(remaining_bins_after_placing_item)
    
    # Discount penalty scores of bins with insufficient space to accommodate item
    conditional_penalty_scores = np.where(bins_remain_cap >= item, penalty_scores, 0)
    
    # Final priority score by reducing penalty suggesting fill bins optimally
    final_priority_scores = priority_scores - (conditional_penalty_scores / np.max(penalty_scores) if np.max(penalty_scores) > 0 else 0)

    return final_priority_scores
```
