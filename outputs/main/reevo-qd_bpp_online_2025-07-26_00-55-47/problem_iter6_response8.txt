```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for adding an item to each bin in the online Bin Packing Problem.

    This version aims to:
    - Minimize unused space by prioritizing bins with remaining capacity close to the item size.
    - Penalize bins where adding the item would cause an overflow, especially harshly.
    - Reward bins that are not completely empty to encourage less fragmentation.

    Args:
        item: Size of the item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of the same size as bins_remain_cap with the priority score of each bin.
    """
    # Penalty for unused space after adding the item
    fullness_penalty = (bins_remain_cap - item) ** 2
    
    # Harsh penalty for bins where the item would overflow
    overflow_penalty = np.where(bins_remain_cap < item, 100 * (bins_remain_cap - item) ** 2, 0)
    
    # Bonus for bins that are not completely empty to reduce fragmentation
    non_empty_bonus = np.where(bins_remain_cap < np.max(bins_remain_cap), np.max(bins_remain_cap) - bins_remain_cap, 0)
    
    # Calculate the final priority score
    priority_scores = -(fullness_penalty + overflow_penalty) + non_empty_bonus
    
    return priority_scores
```
