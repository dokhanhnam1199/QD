{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for placing an item into each bin, considering perfect fits, near fits,\n    remaining capacity, and penalizing large gaps and bins that are almost full.\n    \n    Args:\n        item: Size of the item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    \n    Returns:\n        Array of the same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Priority for perfect fit\n    perfect_fit = np.where(bins_remain_cap == item, 100, 0)\n    \n    # Priority for nearly perfect fit (within 5% of item size)\n    near_perfect_fit = np.where((bins_remain_cap < item) & (bins_remain_cap >= item * 0.95), 50, 0)\n    \n    # Penalty for bins that are almost full but cannot fit the item (within 10% of item size)\n    almost_full_penalty = np.where((bins_remain_cap < item) & (bins_remain_cap >= item * 0.9), -20, 0)\n    \n    # Penalty for a small remaining capacity (less than 10% of item size)\n    small_remaining_penalty = np.where(bins_remain_cap < item * 0.1, -10, 0)\n    \n    # Penalty for large gaps (remaining capacity is much larger than the item size)\n    large_gap_penalty = np.where(bins_remain_cap > item * 2, -15, 0)\n    \n    # Reward for bins with more remaining capacity\n    fill_large_bins = bins_remain_cap / np.max(bins_remain_cap, initial=1) * 5\n    \n    # Calculate the final priority as a combination of all factors\n    priorities = perfect_fit + near_perfect_fit + almost_full_penalty + \\\n                 small_remaining_penalty + large_gap_penalty + fill_large_bins\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after placing the item in each bin\n    remaining_after_item = bins_remain_cap - item\n    \n    # Penalize bins where the item does not fit\n    penalty_for_overflow = np.where(bins_remain_cap < item, -np.inf, 0)\n    \n    # Prioritize bins with lower post-insertion remaining capacity\n    priority_scores = -remaining_after_item\n    \n    # Combine penalties\n    priority_scores += penalty_for_overflow\n    \n    return priority_scores\n\n[Reflection]\nSimplify by focusing on fit and overflow penalties, rewarding tight packings directly.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}