```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    # Use a max function to avoid negative priorities and ensure feasibility
    priority = np.maximum(0, bins_remain_cap - item) / item
    
    # Give a diminishing return for bins that can't fit the current item
    priority[bins_remain_cap < item] *= 0.1  # Reduce the priority significantly
    
    # Secondary measure: prioritize bins with lower remaining capacities to decrease fragmentation
    normalized_capacity_remaining = (bins_remain_cap - bins_remain_cap.min()) * -1 / (bins_remain_cap.max() - bins_remain_cap.min()) if bins_remain_cap.max() != bins_remain_cap.min() else 0
    priority += normalized_capacity_remaining * 0.4
    
    return priority
```
