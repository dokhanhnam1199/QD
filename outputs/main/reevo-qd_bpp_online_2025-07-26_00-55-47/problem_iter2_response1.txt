```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that can fit the item, penalizes bins that cannot,
    and encourages bins that will result in less fragmentation by filling larger gaps first.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority score array
    priority = np.zeros_like(bins_remain_cap)
    
    # Mask for bins that can fit the item
    can_fit_item_mask = bins_remain_cap >= item
    
    # Penalize bins that cannot fit the item
    priority[~can_fit_item_mask] -= 2
    
    # Calculate the remaining capacity after adding the item for bins that can fit it
    remaining_capacity_after_item = bins_remain_cap[can_fit_item_mask] - item
    
    if np.any(can_fit_item_mask):
        # Prioritize bins that will leave larger gaps to reduce fragmentation
        sorted_remaining_capacities = np.sort(remaining_capacity_after_item)
        highest_remaining_capacity = sorted_remaining_capacities[-1] if sorted_remaining_capacities.size > 0 else 0
        second_highest_remaining_capacity = sorted_remaining_capacities[-2] if sorted_remaining_capacities.size > 1 else 0
        
        # Boost bins that will leave the highest and second highest gaps
        highest_cap_mask = np.isclose(bins_remain_cap - item, highest_remaining_capacity)
        second_highest_cap_mask = np.isclose(bins_remain_cap - item, second_highest_remaining_capacity)
        
        priority[highest_cap_mask] += 1.5  # Strong preference for the perfect fit or largest gap reduction
        priority[second_highest_cap_mask] += 1  # Moderate preference for the second largest gap reduction

    return priority
```
