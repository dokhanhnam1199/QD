```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins where the item fits well and penalizes
    bins that are overfull. It avoids large mismatches between the item size and
    the bin's remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize scores with zeros
    scores = np.zeros_like(bins_remain_cap)

    # Calculate difference between remaining capacity and item size
    diff = bins_remain_cap - item

    # Assign scores: prioritize bins where item fits well
    scores[diff == 0] = 1.0  # Perfect fit, highest priority
    scores[(diff > 0) & (diff < item)] = 0.9  # Good fits, high priority
    scores[(diff > 0) & (diff >= item)] = 0.7  # Acceptable fits, medium priority
    scores[diff < 0] = -1  # Overfull bins, lowest priority

    return scores
```
