```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation considers perfect and near-perfect fits, penalizes bins with small remaining capacities,
    and simplifies the calculation to avoid division pitfalls.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Give higher priority to bins where the item fits perfectly
    perfect_fit_scores = (bins_remain_cap - item == 0).astype(int) * 100
    
    # Give moderate priority to bins where the item fits nearly perfectly (within 10% of bin's remaining capacity)
    near_fit_scores = ((bins_remain_cap - item > 0) & (bins_remain_cap - item <= item * 0.1)).astype(int) * 50
    
    # Penalize bins with small remaining capacities
    size_penalty = - np.minimum(bins_remain_cap, item * 0.5)
    
    # Calculate the final priority as a weighted sum
    priority_scores = perfect_fit_scores + near_fit_scores + size_penalty
    
    return priority_scores
```
