{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins where the item fits perfectly or almost perfectly,\n    penalizes bins that are almost full but cannot fit the item, and dynamically adjusts weights\n    based on the remaining capacity of the bins. It also penalizes fragmentation by minimizing gaps.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Give higher priority to bins where the item fits perfectly\n    perfect_fit_scores = (bins_remain_cap - item == 0).astype(int) * 100\n    \n    # Give higher priority to bins where the item fits almost perfectly (within 5% of item size)\n    near_fit_scores = ((bins_remain_cap - item > 0) & (bins_remain_cap - item <= item * 0.05)).astype(int) * 50\n    \n    # Penalize bins that are almost full but cannot fit the item (within 5% of item size)\n    almost_full_penalty = ((bins_remain_cap < item) & (bins_remain_cap >= item * 0.95)).astype(int) * -20\n    \n    # Penalize bins that have a small remaining capacity\n    small_cap_penalty = - ((bins_remain_cap / np.max(bins_remain_cap, initial=1)) < 0.1).astype(int) * 30\n    \n    # Encourage bins that have more remaining capacity to be filled first\n    fill_large_bins = bins_remain_cap / np.max(bins_remain_cap, initial=1) * 10\n    \n    # Penalize bins that will have residual space close to 0 after insertion\n    close_to_full_penalty = - ((bins_remain_cap - item) / np.max(bins_remain_cap, initial=1) < 0.05).astype(int) * 25\n    \n    # Calculate the final priority as a weighted sum\n    priority_scores = (perfect_fit_scores + near_fit_scores + almost_full_penalty +\n                       small_cap_penalty + fill_large_bins + close_to_full_penalty)\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Prioritize bins where adding the item will leave the least space unused\n    fullness_penalty = (bins_remain_cap - item) ** 2\n    # Penalize overflows harshly to reduce fragmentation\n    overflow_penalty = np.where(bins_remain_cap < item, 10 * (bins_remain_cap - item) ** 2, 0)\n    priority_scores = -(fullness_penalty + overflow_penalty)\n\n    return priority_scores\n\n[Reflection]\nFocus on minimizing unused space and penalizing overflows more heavily, reducing fragmentation and improving efficiency.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}