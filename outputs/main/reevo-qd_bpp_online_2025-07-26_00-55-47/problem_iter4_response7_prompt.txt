{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins where the item fits well and penalizes\n    bins that are overfull. It avoids large mismatches between the item size and\n    the bin's remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize scores with zeros\n    scores = np.zeros_like(bins_remain_cap)\n\n    # Calculate difference between remaining capacity and item size\n    diff = bins_remain_cap - item\n\n    # Assign scores: prioritize bins where item fits well\n    scores[diff == 0] = 1.0  # Perfect fit, highest priority\n    scores[(diff > 0) & (diff < item)] = 0.9  # Good fits, high priority\n    scores[(diff > 0) & (diff >= item)] = 0.7  # Acceptable fits, medium priority\n    scores[diff < 0] = -1  # Overfull bins, lowest priority\n\n    return scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after placing the item in each bin\n    remaining_after_item = bins_remain_cap - item\n    \n    # Penalize bins where the item does not fit\n    penalty_for_overflow = np.where(bins_remain_cap < item, -np.inf, 0)\n    \n    # Penalize bins with larger remaining space after placing the item\n    priority_scores = remaining_after_item - remaining_after_item ** 2\n    \n    # Combine penalties\n    priority_scores += penalty_for_overflow\n    \n    return priority_scores\n\n[Reflection]\nPenalize overflows heavily, prioritize bins with lower post-insertion remaining capacity.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}