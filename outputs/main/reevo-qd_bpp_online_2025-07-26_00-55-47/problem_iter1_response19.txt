```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used since favoring bins with lower remaining capacities (worse fit) may
    lead to more bins being used overall.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    bins_new_cap = bins_remain_cap - item
    
    # Negative because our main criteria is how little space is left after the item
    primary_criteria = -bins_new_cap
    
    # Secondary criteria: less used bins (favors filling existing ones)
    secondary_criteria = np.count_nonzero(bins_remain_cap == max(bins_remain_cap))
    
    # Total priority will make sure primary is more important than secondary but take secondary into account
    priority_score = primary_criteria - secondary_criteria * (np.min(bins_remain_cap) / 10 + 0.1)
    
    # Ensuring that negative priorities (cannot fit item) get negative scores
    priority_score[bins_new_cap < 0] = -np.inf
    
    return priority_score
```
