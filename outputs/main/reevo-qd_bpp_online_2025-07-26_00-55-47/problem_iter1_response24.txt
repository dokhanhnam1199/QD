```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic: First calculate how much space would be left in each bin if we add the item
    space_left = bins_remain_cap - item
    
    # Calculate the priority score: bins with less space left after adding the item have higher priority
    # Also consider bins that can fit the item with some remaining space rather than bins left completely empty
    priority_scores = np.where(space_left >= 0, space_left, -np.inf)  # Penalize bins that can't fit the item
    
    # Normalize the priority scores to avoid bias based on bin size
    normalized_priorities = (priority_scores - np.min(priority_scores)) / (np.max(priority_scores) - np.min(priority_scores))
    
    # Increase the priority of bins with remaining space but favor bins that can fit the item with some space balancing emptier bins
    return normalized_priorities + (bins_remain_cap / np.max(bins_remain_cap))
```
