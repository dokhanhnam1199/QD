```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit, utilization, and remaining space."""

    bins_remain_cap = np.array(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities

    remaining_space = bins_remain_cap[feasible_bins] - item
    proximity_to_ideal = np.exp(-np.abs(remaining_space - (0.2 * item)) / item)

    utilization = 1 - bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)
    utilization_priority = utilization

    priorities[feasible_bins] = proximity_to_ideal * (0.5 + utilization_priority*0.5) # Balance ideal fit and utilization
    return priorities
```
