```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines space score and initial fullness with fragmentation avoidance.
    Penalizes bins that are too empty initially.
    """
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(valid_bins):
        remaining_space_after_fit = bins_remain_cap[valid_bins] - item
        space_score = np.exp(-remaining_space_after_fit)

        initial_fullness = 1 - bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
        fullness_score = np.exp(-5 * initial_fullness)  # Stronger bias towards full bins.
        priorities[valid_bins] = space_score * fullness_score

        # Penalize nearly empty bins to prevent fragmentation.
        nearly_empty_threshold = 0.9
        nearly_empty_bins = (bins_remain_cap > np.max(bins_remain_cap) * nearly_empty_threshold)
        priorities[nearly_empty_bins] *= 0.5  # Reduce priority of nearly empty bins.

    return priorities
```
