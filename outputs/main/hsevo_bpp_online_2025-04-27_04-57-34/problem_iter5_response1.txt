```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, capacity reward, and best-fit."""
    waste_penalty_weight = 0.5
    capacity_reward_weight = 0.3
    fit_reward_weight = 0.2
    min_priority_boost = 0.01
    ineligible_priority = -1e9
    fit_exponent = 2

    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(eligible_bins):
        waste = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = -waste_penalty_weight * waste

        priorities[eligible_bins] += capacity_reward_weight * bins_remain_cap[eligible_bins] / np.max(bins_remain_cap)

        fit_ratios = item / bins_remain_cap[eligible_bins]
        scaled_fit = (1 - np.clip(fit_ratios, 0, 1)) ** fit_exponent
        priorities[eligible_bins] += fit_reward_weight * scaled_fit

        priorities[eligible_bins] += min_priority_boost
    else:
        priorities[:] = ineligible_priority

    return priorities
```
