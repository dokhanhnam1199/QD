```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Consider only bins that can accommodate the item.
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # No bin can fit the item. Give minimum priority to all existing bins to signal a new bin is needed.
        return priorities

    # Calculate space utilization: how much of the bin will be filled if the item is added.
    space_utilization = item / bins_remain_cap[eligible_bins]

    # Encourage tighter packing by prioritizing bins with higher utilization. However, we don't want it to
    # always choose the absolute tightest pack, as that can be greedy. So we introduce a non-linear term.
    # A small value such as 0.001 is added to aviod numerical unstability when the bin is exactly same size as the item.
    packing_density_score = space_utilization / (1 + space_utilization**2 + 0.001)  # Non-linear to avoid being *too* greedy.

    # Consider the remaining capacity *after* the item is added. Bins with lower *remaining* capacity
    # should be preferred to avoid leaving large, unusable gaps. Introduce noise to escape local optima.
    remaining_capacity_after_fit = bins_remain_cap[eligible_bins] - item
    remaining_capacity_score = np.exp(-remaining_capacity_after_fit)  # Exponential decay

    # Combine the two scores, with some added randomness.
    priorities[eligible_bins] = packing_density_score + remaining_capacity_score + np.random.normal(0, 0.01, size=np.sum(eligible_bins)) # Introduce some randomness

    return priorities
```
