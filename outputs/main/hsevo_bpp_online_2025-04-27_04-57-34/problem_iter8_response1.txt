```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, utilization, and a tunable close-fit bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities

    waste = bins_remain_cap[feasible_bins] - item

    # Prioritize by inverse waste (smaller waste is better)
    priorities[feasible_bins] = 1.0 / (waste + 1e-9)

    # Add utilization bonus
    max_cap = np.max(bins_remain_cap)
    if max_cap > 0:
        utilization = 1.0 - bins_remain_cap[feasible_bins] / max_cap
        priorities[feasible_bins] += utilization * 0.5  # Scale utilization

    # Tunable close-fit bonus
    close_fit_threshold = 0.2 * item  # Parameter for close fit
    close_fit = (waste >= 0) & (waste <= close_fit_threshold)
    priorities[feasible_bins][close_fit] += 2  # Bonus for close fit bins

    return priorities
```
