```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on best-fit and capacity-aware bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    if not np.any(feasible_mask):
        return priorities

    remaining_capacities_after_fit = bins_remain_cap[feasible_mask] - item
    space_score = -np.abs(remaining_capacities_after_fit)

    # Capacity-aware bonus, normalized by item size.
    capacity_ratio = bins_remain_cap[feasible_mask] / bins_remain_cap.max()
    bonus = capacity_ratio * np.exp(-item/bins_remain_cap[feasible_mask])
    priorities[feasible_mask] = space_score + bonus
    return priorities
```
