```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A novel approach, inspired by celestial mechanics and the inherent desire
    for minimal displacement in the cosmos (akin to efficient bin usage).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher priority indicates a better fit.
    """
    # Initialize priorities with a base value (all bins are potentially viable)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Consider bins that *can* accommodate the item (avoiding impossible placements)
    valid_bins = bins_remain_cap >= item

    # If no bin can accomodate the item, return lowest priorities
    if not np.any(valid_bins):
      return priorities
    
    # 2. Introduce a "gravitational pull" towards bins that are nearly full
    #    after placement, incentivizing near-perfect fits (minimizing waste).
    remaining_after_placement = bins_remain_cap[valid_bins] - item
    near_full_bonus = np.exp(-np.abs(remaining_after_placement)) # Higher when closer to 0

    #3. Penalize bins with very large capacity in favor of lower-capacity bins
    size_penalty = 1.0/(bins_remain_cap[valid_bins] + 1e-9)
    
    #4. combine the factors
    priorities[valid_bins] = near_full_bonus * size_penalty

    return priorities
```
