{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins by balancing waste, capacity, and best-fit.\"\"\"\n    eligible_bins = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    if np.any(eligible_bins):\n        waste = bins_remain_cap[eligible_bins] - item\n        priorities[eligible_bins] = -waste \n\n        capacity_factor = bins_remain_cap[eligible_bins] / np.max(bins_remain_cap)\n        priorities[eligible_bins] += capacity_factor\n\n        best_fit_bonus = np.exp(-np.abs(waste) / (0.1 * item + 1e-6))\n        priorities[eligible_bins] += best_fit_bonus\n\n    else:\n        priorities[:] = -1e9\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version prioritizes bins that can accommodate the item without\n    leaving excessive space. It aims to balance fitting the item and\n    avoiding fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    bins_remain_cap = np.array(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility check: Can the item fit?\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities  # No feasible bins, all priorities remain zero\n\n    # 2. Calculate remaining space after placing the item\n    remaining_space = bins_remain_cap[feasible_bins] - item\n\n    # 3. Prioritize bins with smaller remaining space, but penalize near-full bins\n    #    The ideal remaining space is not zero (to avoid perfect fits that may block later, larger items)\n    #    and not too large (to avoid fragmentation)\n    # proximity_to_ideal = np.exp(-np.abs(remaining_space - (item/2)) / item) # Ideal remaining space is half the item size\n    proximity_to_ideal = np.exp(-np.abs(remaining_space - (0.2 * item)) / item) # Ideal remaining space is 20% of item size\n\n    # 4. Give a bonus to bins that are reasonably full after placing the item\n    fullness_bonus = np.clip((bins_remain_cap[feasible_bins] - remaining_space) / np.max(bins_remain_cap), 0, 1)\n    fullness_bonus = fullness_bonus * 0.5  # Scale the bonus to avoid dominating the proximity\n\n    # 5. Combine factors\n    priorities[feasible_bins] = proximity_to_ideal + fullness_bonus\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), we see the first heuristic includes a small boost for tie-breaking while the second does not. The first one also penalizes infeasible bins heavily with a large negative value, ensuring they are truly avoided. The second heuristic uses `1e-9` to avoid division by zero, which might not be a strong enough penalty.\n\nComparing (2nd) vs (3rd), the second heuristic directly calculates waste and uses `1.0 / (waste + 1e-9)` for prioritization, while the third heuristic uses an exponential function based on remaining capacity and utilization. The second heuristic uses a simple linear utilization factor, whereas the third uses a normalized utilization combined with an exponential fit priority. The third also explicitly checks for feasibility and returns early if no bins are feasible.\n\nComparing (3rd) vs (4th), the third heuristic prioritizes based on tightness of fit and bin utilization, while the fourth prioritizes based on waste, utilization, and close fit. They are very similar; the third checks feasibility early and the utilization factor is simpler. However, the fourth uses `1.0 / (waste + 1e-9)` similar to the second.\n\nComparing (second worst) vs (worst), they are duplicates.\n\nComparing (7th) vs (8th), the seventh one has parameters that can be tuned.\n\nOverall: The better heuristics tend to balance multiple factors (waste, utilization, best-fit) with carefully chosen functions (exponential, scaling). Explicitly handling infeasible bins with very large negative priorities is crucial. The use of tunable parameters is also a positive feature. A good balance avoids being too greedy and avoids fragmentation. Normalization of capacity is also helpful.\n- \nOkay, let's redefine \"Current self-reflection\" for better heuristic design, learning from what *not* to do.\n\n*   **Keywords:** Factor interaction, scaling, edge case handling, parameter tuning, problem instance adaptation.\n*   **Advice:** Systematically explore factor combinations, use non-linear scaling, build specific edge case responses, and design parameters for instance-specific optimization.\n*   **Avoid:** Premature optimization (vectorization), overly complex penalty/bonus systems, unnecessary parameters, and redundancy.\n*   **Explanation:** Focus on fundamental design principles first: understanding interactions, handling extreme situations, and allowing focused adaptation. Avoid performance tuning or added complexity until the basic heuristic is sound.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}