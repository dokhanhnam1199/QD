```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio and avoids fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fits = bins_remain_cap >= item

    if np.any(fits):
        remaining_space = bins_remain_cap[fits] - item
        priorities[fits] = (item / bins_remain_cap[fits]) # Fill ratio
        nearly_full = remaining_space < 0.1
        priorities[fits][nearly_full] *= 0.9 # slight penalty for nearly full
    else:
        priorities = -bins_remain_cap # put item in the largest bin
        priorities = priorities - np.min(priorities) + 1e-9

    return priorities
```
