```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, identify bins that can actually accommodate the item
    valid_bins = bins_remain_cap >= item

    # If no bins can accommodate the item, assign a default low priority (e.g., -1)
    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, -1.0)

    # Calculate fill ratio for valid bins only: (item / remaining capacity)
    fill_ratio = np.where(valid_bins, item / bins_remain_cap, 0.0)

    # Calculate wasted space (remaining capacity after adding the item) for valid bins
    wasted_space = np.where(valid_bins, bins_remain_cap - item, np.inf) # np.inf for invalid bins

    # Prioritize bins based on fill ratio and wasted space. A higher fill ratio is generally better,
    # and less wasted space is better.

    # Normalize fill ratio and wasted space to a 0-1 range for better combination.
    normalized_fill_ratio = fill_ratio / np.max(fill_ratio[valid_bins]) if np.any(valid_bins) else np.zeros_like(fill_ratio)  # Avoid division by zero

    min_wasted_space = np.min(wasted_space[valid_bins]) if np.any(valid_bins) else np.inf
    max_wasted_space = np.max(wasted_space[valid_bins]) if np.any(valid_bins) else np.inf


    normalized_wasted_space = np.where(valid_bins and max_wasted_space>min_wasted_space, (max_wasted_space - wasted_space) / (max_wasted_space - min_wasted_space),
                                        np.where(valid_bins, 1.0,0.0)) if np.any(valid_bins) else np.zeros_like(wasted_space)


    # Combine the normalized metrics into a single priority score.
    # Experiment with weights to adjust the balance between fill ratio and wasted space.
    priorities = normalized_fill_ratio + normalized_wasted_space

    # For invalid bins, ensure they have the lowest possible priority (or zero if negative priorities aren't desired)
    priorities = np.where(valid_bins, priorities, -np.inf)
    return priorities
```
