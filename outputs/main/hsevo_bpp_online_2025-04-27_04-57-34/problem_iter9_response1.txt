```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are a close fit to the item size,
    while also considering the overall remaining capacity and a penalty
    for bins that are significantly larger than the item. Includes a
    "best fit" component and a capacity utilization component, along with
    handling empty bin scenarios and potential overflow.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    bins_remain_cap = np.array(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Handle empty bins: assign a very low priority (discourage use unless necessary)
    empty_bins = bins_remain_cap == 1.0  #Assuming bin capacity is 1.0, and empty bin will have capacity 1.0
    if np.any(empty_bins):
        priorities[empty_bins] = -1e9  # Very low priority for empty bins


    # Calculate "best fit" score, prioritizing bins close to item size
    diff = np.abs(bins_remain_cap - item)
    best_fit = np.exp(-diff / (0.1 * item + 1e-6))  # Scale with item size, avoid div by zero


    # Calculate capacity utilization score, penalizing bins much larger than item
    capacity_util = np.minimum(item / (bins_remain_cap + 1e-6), 1.0)  # Avoid div by zero


    # Combine scores
    priorities = best_fit * capacity_util


    # Handle potential overflow (negative remaining capacity after packing): give these bins negative priority
    overflow_bins = bins_remain_cap < item
    if np.any(overflow_bins):
          priorities[overflow_bins] = -1e9 # very low priority
    # Prioritize bins that can perfectly fit the item if possible
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6
    if np.any(perfect_fit):
        priorities[perfect_fit] = 1e9  # Extremely high priority
    return priorities
```
