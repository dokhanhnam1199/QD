```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Heuristic 1: First-Fit Decreasing Inspired: Prioritize bins that can *just* fit the item
    # Idea: Reduce fragmentation
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
      slack = bins_remain_cap[fit_mask] - item
      priorities[fit_mask] = np.exp(-slack) # Smaller slack, higher priority

    # Heuristic 2: Avoid overfilling / penalize nearly full bins.
    # Idea: Delay filling a bin if a smaller item may be added later.
    near_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < item * 2)
    priorities[near_full_mask] -= 0.5 # Slightly penalize nearly full bins, even if they fit
    
    #Heuristic 3: If item doesn't fit in any bin, choose the bin with max remaining cap
    if not np.any(fit_mask):
      priorities = bins_remain_cap/np.max(bins_remain_cap) -1.1 #set score less than 0.

    return priorities
```
