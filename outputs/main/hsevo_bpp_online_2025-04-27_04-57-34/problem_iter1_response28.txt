```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(eligible_bins):
        # Prioritize bins with capacity closest to item size (minimize waste)
        waste = bins_remain_cap - item
        waste[~eligible_bins] = np.inf  # Ignore ineligible bins
        priorities[eligible_bins] = -np.abs(waste[eligible_bins])

        # Also, factor in the remaining capacity as a secondary priority.
        # This helps to fill bins more completely before opening new ones, but after minimizing waste for existing candidates.
        priorities[eligible_bins] += bins_remain_cap[eligible_bins] / np.max(bins_remain_cap) # scale to between 0 and 1 for balance

        # A small constant bonus can help break ties between bins with very similar remaining capacities.
        priorities[eligible_bins] += 0.001

    else:
        # If no bin can fit the item, assign all bins very negative priority to avoid selecting them (effectively creating a new bin).
        priorities[:] = -1e9

    return priorities
```
