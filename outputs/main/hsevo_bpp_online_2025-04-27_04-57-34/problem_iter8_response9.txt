```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on proximity, capacity, and fullness after item placement."""

    bins_remain_cap = np.array(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_space = bins_remain_cap[feasible_bins] - item
    proximity = np.exp(-np.abs(remaining_space - (0.2 * item)) / item)
    fullness_bonus = np.clip((bins_remain_cap[feasible_bins] - remaining_space) / np.max(bins_remain_cap), 0, 1)
    fullness_bonus = fullness_bonus * 0.5

    capacity = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)
    capacity_penalty = np.where(bins_remain_cap[feasible_bins] > 2 * item, 0.5, 1)
    priorities[feasible_bins] = proximity * capacity * capacity_penalty + fullness_bonus

    return priorities
```
