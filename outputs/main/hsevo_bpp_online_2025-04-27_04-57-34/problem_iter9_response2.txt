```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are a close fit to the item size,
    but also incorporates a factor that encourages filling bins that are already
    partially full.  It also adds a small bias towards bins that are only slightly
    larger than the item to avoid excessive fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bins_remain_cap = np.array(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap > 0

    if np.any(valid_bins):
        valid_remain_cap = bins_remain_cap[valid_bins]

        # Proximity factor: Closer fit is better
        proximity = np.exp(-np.abs(valid_remain_cap - item) / (0.5 * item))  # Adjusted scaling

        # Fill-level factor: Encourage filling partially full bins
        fill_level = 1 - (valid_remain_cap / np.max(bins_remain_cap))
        fill_level_scaled = np.power(fill_level, 2) # Increasing priority for bins already relatively full

        # Small capacity bias: Favor bins slightly larger than the item
        capacity_bias = np.where(valid_remain_cap >= item, np.exp(-(valid_remain_cap - item) / (2 * item)), 0.01)  # Exponential decay for larger bins, small base priority

        # Combine factors
        priorities[valid_bins] = proximity * (fill_level_scaled + 0.1) * capacity_bias  # Added 0.1 to ensure minimal priority

    return priorities
```
