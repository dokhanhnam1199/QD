```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, utilization, and close fit for bin selection."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float) + 1e-9
    waste = bins_remain_cap - item
    
    priorities[waste < 0] = -np.inf

    valid_bins = waste >= 0
    priorities[valid_bins] = 1.0 / (waste[valid_bins] + 1e-9)
    
    utilization = 1.0 - bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)

    priorities[valid_bins] *= (1 + utilization[valid_bins])

    close_fit_threshold = 0.1 * item
    close_fit = (waste >= 0) & (waste <= close_fit_threshold)
    priorities[close_fit] += 10

    # Add a penalty for bins that are becoming too full, but only if the item fits
    almost_full_threshold = 0.9
    almost_full = (bins_remain_cap / np.max(bins_remain_cap) < (1-almost_full_threshold)) & (waste >=0)
    priorities[almost_full] *= 0.5 # Reduce priority if bin is almost full

    return priorities
```
