```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate the remaining capacity after placing the item
    remaining_capacity = bins_remain_cap - item
    
    # Give a large negative priority if the item doesn't fit
    priorities[remaining_capacity < 0] = -np.inf
    
    # Calculate the waste (unused space) if the item is placed in the bin
    waste = remaining_capacity[remaining_capacity >= 0]
    
    # Define a priority based on how well the item fits (minimizing waste)
    # Prioritize bins that have just enough space for the item
    priorities[remaining_capacity >= 0] = -waste # lower waste, higher priority

    #Bonus for filling bin well.
    fill_ratio = item / bins_remain_cap
    priorities = priorities + (fill_ratio * (remaining_capacity >=0))

    #Adding a small random component to break ties.
    priorities = priorities + np.random.rand(len(bins_remain_cap))*0.001

    return priorities
```
