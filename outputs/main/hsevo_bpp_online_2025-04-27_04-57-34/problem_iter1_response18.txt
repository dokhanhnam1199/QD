```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., 0).
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Iterate through each bin and calculate its priority.
    for i, remaining_capacity in enumerate(bins_remain_cap):
        if remaining_capacity >= item:  # Can the item fit?

            # Heuristic 1: Maximize filled space. A bin closer to being full after placement gets higher priority.
            fill_ratio = item / remaining_capacity
            priorities[i] += fill_ratio

            # Heuristic 2: Minimize wasted space (if item fits perfectly).
            if remaining_capacity - item < 1e-6: # consider very small difference as equals
                priorities[i] += 1.0  # Boost priority if item fits perfectly
            else:
                 # Heuristic 3: Avoid Fragmentation.
                 priorities[i] +=  1.0 / (remaining_capacity-item)


        else:
            priorities[i] = -np.inf  # Very low priority if item doesn't fit.

    return priorities
```
