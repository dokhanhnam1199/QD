import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, best_fit_threshold_ratio: float = 0.11960209093897924, best_fit_bonus_value: float = 0.1732853347874969, ineligible_priority: float = -7782006978.183811) -> np.ndarray:
    """Calculate bin priorities considering waste, utilization, and best-fit."""
    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(eligible_bins):
        waste = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = -waste

        capacity_ratio = item / bins_remain_cap[eligible_bins]
        priorities[eligible_bins] += np.clip(capacity_ratio, 0, 1)

        best_fit_threshold = best_fit_threshold_ratio * item
        best_fit_bonus = np.where(waste <= best_fit_threshold, best_fit_bonus_value, 0.0)
        priorities[eligible_bins] += best_fit_bonus
    else:
        priorities[:] = ineligible_priority

    return priorities
