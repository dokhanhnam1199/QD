```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Bins that cannot accommodate the item should have zero priority
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap)

    # Only calculate priority for valid bins
    if np.any(valid_bins):
      remaining_space_after_fit = bins_remain_cap[valid_bins] - item
      
      # Calculate a score based on how much space is left after packing
      space_score = np.exp(-remaining_space_after_fit) # Encourage bins to be filled as much as possible but also not overly full.

      # Prefer bins that are not too empty initially (reduces fragmentation)
      initial_fullness = 1 - bins_remain_cap[valid_bins] / bins_remain_cap.max()
      fullness_score = np.exp(-1/ initial_fullness) # want to prioritize the full bins
      # A combined score, blending space usage and original fullness
      priorities[valid_bins] = space_score * (fullness_score +1e-6) # Add small value to avoid zero divide

    return priorities
```
