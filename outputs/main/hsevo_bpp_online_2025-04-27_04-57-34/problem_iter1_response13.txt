```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a more nuanced approach considering wasted space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give higher priority to bins that can fit the item, but penalize excessive waste.
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            # Higher priority for less waste, but decrease effect of this as capacity increases
            priorities[i] = 1 / (1 + waste + (cap-item)/ (1e-6+item)) # Prevent div by zero, prioritize less waste, higher capacity less preference

        else:
            priorities[i] = -np.inf  # Cannot fit

    # Softmax to convert priorities to probabilities, more stable to use it as priority value
    e_x = np.exp(priorities - np.max(priorities))
    priorities = e_x / e_x.sum()

    return priorities
```
