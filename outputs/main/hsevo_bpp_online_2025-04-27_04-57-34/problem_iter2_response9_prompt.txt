{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities with a base value (e.g., 0).\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Iterate through each bin and calculate its priority.\n    for i, remaining_capacity in enumerate(bins_remain_cap):\n        if remaining_capacity >= item:  # Can the item fit?\n\n            # Heuristic 1: Maximize filled space. A bin closer to being full after placement gets higher priority.\n            fill_ratio = item / remaining_capacity\n            priorities[i] += fill_ratio\n\n            # Heuristic 2: Minimize wasted space (if item fits perfectly).\n            if remaining_capacity - item < 1e-6: # consider very small difference as equals\n                priorities[i] += 1.0  # Boost priority if item fits perfectly\n            else:\n                 # Heuristic 3: Avoid Fragmentation.\n                 priorities[i] +=  1.0 / (remaining_capacity-item)\n\n\n        else:\n            priorities[i] = -np.inf  # Very low priority if item doesn't fit.\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Inspired by the dance of planets! We favour bins where the item fits comfortably (like Venus nestled near the Sun), but also consider bins nearing fullness (like Jupiter pulling objects into its orbit).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First, consider only bins that can accommodate the item. Ignore those that cannot.\n    feasible_bins = bins_remain_cap >= item\n    \n    if not np.any(feasible_bins):\n        # No suitable bin exists. Return very low priorities. This will likely result in opening a new bin.\n        return priorities\n\n    #Calculate emptiness - bigger values mean less space\n    emptiness = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n\n    # A measure of 'fit'. Smaller ratios are better (item fits comfortably).\n    fit_ratios = item / bins_remain_cap\n    \n    # Scale the fit ratio to be between 0 and 1. We take exponent of 1 / fitness for making differences more distinct.\n    # Subtracting from 1 in the power will decrease impact for tight fitting bins and increase the impact of lose fitting bins\n    scaled_fit = (1 - np.clip(fit_ratios, 0, 1)) ** (1/3)\n    \n    # Increase reward of filling up space of the bin\n    scaled_emptiness = 1 / (1 + emptiness)\n\n    # Final score with two combined bonuses\n    priorities = feasible_bins * (scaled_fit + scaled_emptiness)\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic uses a combination of fill ratio, perfect fit, and fragmentation avoidance, while the worst only considers fill ratio and perfect fit. (2nd best) vs (second worst), the heuristic emphasizes waste minimization and remaining capacity scaling, whereas its counterpart focuses solely on space usage and original fullness. Comparing (1st) vs (2nd), we see that the best heuristic explicitly calculates priorities for each bin using a for loop to apply conditions, while the second best leverages numpy vectorization for eligible bins and waste calculation. (3rd) vs (4th), the third heuristic incorporates bin utilization and close fit bonuses, while the fourth focuses on fill ratio and tightness, with a penalty for near-full bins. Comparing (second worst) vs (worst), we see that they are identical copies. Overall: The better heuristics combine multiple factors (waste, utilization, fragmentation) and use numpy efficiently. They often include bonuses/penalties to fine-tune the selection process and avoid extremes (overfilling, leaving large gaps).\n- \nOkay, let's redefine \"Current self-reflection\" for better heuristic design, actively avoiding common pitfalls.\n\nHere's a refined approach:\n\n*   **Keywords:** Iterative refinement, multi-objective, computational cost, edge-case mitigation.\n\n*   **Advice:** Structure self-reflection around iterative refinement. Evaluate computational cost and trade-offs when combining factors. Design penalties/bonuses based on *data-driven* edge-case analysis, not intuition alone.\n\n*   **Avoid:** Premature optimization, relying solely on intuition, neglecting computational cost analysis during iterative stages.\n\n*   **Explanation:** Refine heuristics iteratively by tracking performance metrics (e.g., solution quality, runtime). A good approach involves a tight feedback loop: (1) design, (2) implement, (3) test, (4) analyze, (5) refine.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}