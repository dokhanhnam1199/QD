```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, utilization, and best-fit preference."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    waste = bins_remain_cap - item
    infeasible_bins = waste < 0
    priorities[infeasible_bins] = -np.inf

    eligible_bins = waste >= 0
    if np.any(eligible_bins):
        # Prioritize bins with smaller waste
        priorities[eligible_bins] = 1.0 / (waste[eligible_bins] + 1e-9)

        # Incorporate utilization to prefer filling bins
        utilization = 1.0 - bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
        priorities[eligible_bins] += utilization[eligible_bins]

        # Best-fit bonus: reward bins where the waste is very small
        close_fit_threshold = 0.1 * item
        close_fit = (waste >= 0) & (waste <= close_fit_threshold)
        priorities[close_fit] += 5 # Boost for near perfect fit

        #Almost full penalty
        almost_full_threshold = 0.9
        almost_full = (bins_remain_cap / np.max(bins_remain_cap) < (1-almost_full_threshold)) & (waste >=0)
        priorities[almost_full] *= 0.7 # Reduce priority if bin is almost full
    return priorities
```
