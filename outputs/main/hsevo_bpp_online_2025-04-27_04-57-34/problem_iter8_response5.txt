```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins balancing waste, capacity, and best-fit with penalty."""

    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(eligible_bins):
        waste = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = -waste  # Prioritize less waste

        capacity_factor = bins_remain_cap[eligible_bins] / np.max(bins_remain_cap)
        priorities[eligible_bins] += 0.5 * capacity_factor # Scale capacity

        best_fit_bonus = np.exp(-np.abs(waste) / (0.2 * item + 1e-6)) #Tuned
        priorities[eligible_bins] += best_fit_bonus

    else:
        priorities[:] = -1e9 # Large penalty for infeasible bins

    return priorities
```
