```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Higher priority means we want to add item to the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap)

    # Immediate fit gets highest priority
    immediate_fit = np.isclose(bins_remain_cap, item)
    priorities[immediate_fit] = 1000  # Highest priority

    # Next best fit gets higher priority. Close to full, but still has capacity
    almost_full = (bins_remain_cap > item)
    space_left = bins_remain_cap - item
    priorities[almost_full] = 100 - (space_left[almost_full] / np.max(bins_remain_cap)) * 100 # Scale space_left to get score from 0 to 100

    # Penalize bins that will be nearly empty after packing
    nearly_empty = (item > bins_remain_cap)
    priorities[nearly_empty] = -1000 # large negative penalty

    # Moderate penalty to bins that fit, but have huge amount of leftover space.
    large_leftover = (bins_remain_cap > item) & (bins_remain_cap - item > np.mean(bins_remain_cap))
    priorities[large_leftover] = -50  # moderate negative penalty
    return priorities
```
