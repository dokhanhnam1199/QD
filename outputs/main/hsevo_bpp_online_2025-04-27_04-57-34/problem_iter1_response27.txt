```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by quantum mechanics, we'll use a potential well analogy.
    The bins are potential wells, and the item is a particle.
    The deeper the well (more empty space), the more attractive it is.
    However, we also want to avoid small gaps after packing, as that reduces
    overall packing efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # "Potential energy" based on remaining capacity after packing
            remaining_space = cap - item

            #Heaviside step to discourage negligible remaining space, preventing fragmentation.
            heaviside_step = 1.0 if remaining_space > 0.1 else 0.0  # Tweak threshold as needed.

            # A "quantum" term: Exponentially prefer bins with larger remaining capacity,
            # modified by remaining space to prevent fragmentation.
            # Scale prevents overflow of potential well and adjust importance

            scale = 10.0
            potential_energy = np.exp(remaining_space * scale/ cap)  # Normalize by bin capacity

            #Penalize near full bins using an inverse gaussian.
            penalization = np.exp(- (cap - item)**2 / (2 * (cap/5)**2)) if cap - item > 0 else 0.0
            priorities[i] = potential_energy * penalization
        else:
            priorities[i] = -np.inf # Impossible to pack, so extremely low priority.

    return priorities
```
