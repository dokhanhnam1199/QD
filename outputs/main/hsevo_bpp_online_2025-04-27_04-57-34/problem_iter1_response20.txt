```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Assign very low priority if the item doesn't fit.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # 2. Best Fit heuristic: Prioritize bins with smallest remaining capacity AFTER adding the item.
    #   - Avoids creating too many bins with near-empty space at the end.
    feasible_mask = ~infeasible_mask
    remaining_capacities_after_fit = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -np.abs(remaining_capacities_after_fit) # Smaller absolute remaining capacity gets higher priority

    # 3. Bonus for bins that are already somewhat full (but not too full - avoid overfilling).
    #   A sigmoid function can be used to scale the bonus smoothly.  The parameters (location and scale)
    #   are chosen such that it peaks around 0.7 * bins_remain_cap initially and flattens out to zero as the
    #   remaining capacity decreases to 0 (or increases beyond the ideal point). This encourages using already used bins.
    # bins_used_ratio = (np.max(bins_remain_cap) - bins_remain_cap[feasible_mask]) / np.max(bins_remain_cap)
    bins_used_ratio = (bins_remain_cap.max() - bins_remain_cap[feasible_mask]) / bins_remain_cap.max()

    bonus = 1 / (1 + np.exp(-10 * (bins_used_ratio - 0.7)))
    priorities[feasible_mask] += bonus
    return priorities
```
