```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base score (e.g., 0).
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item.
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bin can fit, penalize all bins heavily to potentially trigger a new bin.
        priorities = np.full_like(bins_remain_cap, -np.inf)
        return priorities # Return immediate so the remaining operation will be skipped.

    # Reward bins that can fit the item with higher priority
    # based on remaining capacity.
    # Bins with smaller remaining capacity AFTER placing the item get a higher score.
    remaining_capacity_after_placement = bins_remain_cap - item
    priorities[valid_bins] = -np.abs(remaining_capacity_after_placement[valid_bins])

    # Give extra boost to bins which are nearly full after placement.  Want to fill
    # those.
    nearly_full = (remaining_capacity_after_placement >= 0) & (remaining_capacity_after_placement <= 0.1) # Tolerate difference upto 0.1
    priorities[nearly_full] += 10  # A significant priority boost

    # Penalize bins that have large remaining capacity after placement. We want bins
    # that are almost full.
    large_remaining_capacity = (remaining_capacity_after_placement > 0.5) & valid_bins #Consider it big if remaining capacity after placement greater than 0.5
    priorities[large_remaining_capacity] -= 5

    return priorities
```
