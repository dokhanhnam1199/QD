```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors,
    including how well the item fits (fit_score), the remaining capacity
    relative to the item size (capacity_score), and a bonus for bins that
    are nearly full after adding the item (almost_full_bonus).  It also adds a penalty for bins that are significantly larger than the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bins_remain_cap = np.array(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item  # Only consider bins that can fit the item

    if np.any(valid_bins):
        valid_remain_cap = bins_remain_cap[valid_bins]

        # Fit score:  How close is the item size to the remaining capacity?
        fit_score = 1 - np.abs(valid_remain_cap - item) / (item + valid_remain_cap) # Normalized difference

        # Capacity score:  Favor bins with smaller remaining capacity (but still large enough for the item)
        capacity_score = 1 - (valid_remain_cap / np.max(bins_remain_cap)) # Normalize remaining capacity
        capacity_score = np.clip(capacity_score, 0, 1)  # Ensure score is within [0, 1]

        # Almost full bonus:  Give a bonus to bins that will be nearly full after adding the item
        remaining_after_add = valid_remain_cap - item
        almost_full_threshold = 0.1 * item  # e.g., within 10% of item size
        almost_full_bonus = np.where((remaining_after_add >= 0) & (remaining_after_add <= almost_full_threshold), 0.5, 0)

        # Penalty for bins much larger than the item
        large_bin_penalty = np.where(valid_remain_cap > 3 * item, -0.2, 0) # Significant penalty if bin is 3x item size

        # Combine the scores and bonus
        priorities[valid_bins] = fit_score + capacity_score + almost_full_bonus + large_bin_penalty


    return priorities
```
