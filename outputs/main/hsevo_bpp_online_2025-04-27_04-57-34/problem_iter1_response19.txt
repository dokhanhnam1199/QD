```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Give a high priority to bins that can fit the item
            # Prioritize bins where the item fills a large percentage of the remaining capacity
            fill_ratio = item / cap
            priorities[i] = 100 * fill_ratio  # Scale the ratio for better differentiation

            # Penalize bins that would leave a very small remaining capacity after packing the item
            remaining_after_pack = cap - item
            if remaining_after_pack < 0.1:  # If remaining capacity is very small
                priorities[i] -= 50  # Reduce priority to avoid fragmentation

        else:
            # Give a very low priority to bins that cannot fit the item
            priorities[i] = -1000  # A large negative value

    return priorities
```
