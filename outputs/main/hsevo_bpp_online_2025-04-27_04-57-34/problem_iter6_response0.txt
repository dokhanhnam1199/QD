```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are slightly larger than the item,
    aiming to minimize fragmentation. It also introduces a small penalty for
    bins that are almost full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bins_remain_cap = np.array(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Only consider bins with enough capacity
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        valid_remain_cap = bins_remain_cap[valid_bins]

        # 1. Fit Score: Prioritize bins that are slightly larger than the item.
        fit_score = np.exp(-np.abs(valid_remain_cap - item) / (0.5 * item))

        # 2. Capacity Utilization: Discourage filling bins too much.
        utilization_penalty = np.where(valid_remain_cap < 0.1 * np.max(bins_remain_cap), 0.2, 1) # Penalize almost full bins
        #utilization_penalty = 1 - (1 - (valid_remain_cap / np.max(bins_remain_cap)))**2  # Alternative penalty

        # 3. Smallest Available Space: Give preference to bins with the smallest remaining space, but still greater than item
        smallest_space_bonus = 1 / (valid_remain_cap + 1e-6)
        smallest_space_bonus = smallest_space_bonus / np.max(smallest_space_bonus)
        
        # Combine the scores
        priorities[valid_bins] = fit_score * utilization_penalty * smallest_space_bonus

    return priorities
```
