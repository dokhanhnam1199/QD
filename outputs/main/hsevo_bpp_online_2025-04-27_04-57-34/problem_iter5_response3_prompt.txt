{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit, fullness bonus, and infeasibility handling for bin selection.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    feasible_mask = ~infeasible_mask\n    if not np.any(feasible_mask):\n        return priorities\n\n    remaining_capacities_after_fit = bins_remain_cap[feasible_mask] - item\n    space_score = -np.abs(remaining_capacities_after_fit)\n\n    bins_used_ratio = (bins_remain_cap.max() - bins_remain_cap[feasible_mask]) / bins_remain_cap.max()\n    bonus = 1 / (1 + np.exp(-10 * (bins_used_ratio - 0.7)))\n\n    priorities[feasible_mask] = space_score + bonus\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version refines the priority calculation by:\n    1. Adding a \"best fit\" bonus to prioritize bins that closely match the item size.\n    2. Introducing a penalty for bins that are significantly larger than the item,\n       but making this penalty adaptive to the item size.\n    3. Incorporating a small random factor to encourage exploration and break ties.\n    4. Handles edge cases with very small remaining capacities.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    bins_remain_cap = np.array(bins_remain_cap)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    valid_bins = bins_remain_cap > 0\n    if not np.any(valid_bins):\n        return priorities\n\n    valid_remain_cap = bins_remain_cap[valid_bins]\n\n    # 1. Best Fit Bonus: Prioritize bins with capacity close to item size.\n    # Smaller absolute difference gets a higher bonus.\n    best_fit_bonus = np.exp(-np.abs(valid_remain_cap - item) / (0.1 * item + 1e-6))  # Added small constant to avoid division by zero\n\n    # 2. Large Bin Penalty: Penalize bins that are much larger than the item.\n    # The penalty is scaled relative to the item size.\n    large_bin_threshold = 1.5 * item  # Example: Penalize bins > 1.5x item size\n    large_bin_penalty = np.where(valid_remain_cap > large_bin_threshold,\n                                 0.5 * (1 - np.exp(-(valid_remain_cap - large_bin_threshold) / (0.5 * item + 1e-6))), # added small constant to denominator\n                                 1.0)\n\n    # 3. Capacity Factor: Favor bins with higher (but not too high) remaining capacity.\n    capacity_factor = valid_remain_cap / np.max(valid_remain_cap)\n\n\n    # 4. Small Random Factor: Break ties and encourage exploration.\n    random_factor = 0.01 * np.random.rand(len(valid_remain_cap))\n\n    # Combine all factors:\n    priorities[valid_bins] = best_fit_bonus * large_bin_penalty * capacity_factor + random_factor\n\n    # Normalize priorities to be between 0 and 1 (optional, but can be helpful)\n    if np.sum(priorities) > 0 :\n        priorities = priorities / np.max(priorities)\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), the first uses simpler calculations for waste, capacity, and fit, while the 20th uses a best-fit bonus, large bin penalty, and capacity factor. The 1st includes a small boost and a large negative value for infeasible bins, while 20th normalizes priorities.\n\nComparing (2nd) vs (3rd), the 2nd is a more parameterized version with weights and exponent, while the 3rd version focuses on utilization and close fit, adding a penalty for almost full bins.\n\nComparing (3rd) vs (4th), the 3rd version combines waste minimization, utilization, and close fit, while the 4th version uses best-fit, fullness bonus, and infeasibility handling. The 4th version uses sigmoid for bonus, while the 3rd version uses direct penalties and rewards.\n\nComparing (4th) vs (5th), the 4th emphasizes fullness bonus and infeasibility, whereas the 5th prioritizes fill ratio and fragmentation avoidance, with penalties for nearly full bins.\n\nComparing (2nd worst) vs (worst), both are similar with the same functionality. This indicates potential redundancy or the heuristic is not improving.\n\nComparing (1st) vs (2nd), the first uses hardcoded weights, and the second is parameterized, suggesting the first is a simplified version.\n\nOverall: the best heuristics tend to be simpler and more direct in their approach, while the worst are either redundant or introduce complex calculations that don't necessarily improve performance. Good heuristics balance several factors (fit, capacity, fragmentation), handle infeasible bins appropriately, and avoid overly complex calculations that add noise.\n- \nOkay, let's refine \"Current self-reflection\" to be more effective for heuristic design, steering clear of the pitfalls of \"Ineffective self-reflection.\"\n\nHere's a revised perspective:\n\n*   **Keywords:** Parsimony, Evidence-based, Core Factors, Adaptive Complexity.\n*   **Advice:** Begin with a minimal viable heuristic, focusing on essential factors. Rigorously test and validate each added layer of complexity based on performance gains.\n*   **Avoid:** Premature optimization, complex scoring functions without justification, and parameter proliferation without empirical evidence.\n*   **Explanation:** Prioritize creating a simple, understandable baseline. Only introduce complexity or parameterization if it demonstrably and significantly improves performance, avoiding unnecessary computational overhead. Focus on *why* additional factors are needed.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}