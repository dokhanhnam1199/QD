```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    - Closeness of item size to remaining capacity.
    - Remaining capacity relative to the item size.
    - A "best fit" bonus.
    - A penalty for bins significantly larger than the item.
    - A small random factor to break ties.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bins_remain_cap = np.array(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    valid_bins = bins_remain_cap > 0

    if np.any(valid_bins):
        valid_remain_cap = bins_remain_cap[valid_bins]

        # Closeness factor: Favor bins with remaining capacity close to the item size.
        closeness = np.exp(-np.abs(valid_remain_cap - item) / (0.1 * item + 1e-9))  # Scale by item to be relative
        # Capacity factor: Favor bins with enough capacity, penalize bins that are much larger.
        capacity_ratio = item / valid_remain_cap
        capacity_factor = np.clip(capacity_ratio, 0, 1) # changed from previous valid_remain_cap / np.max(valid_remain_cap)

        # "Best fit" bonus: If the item fits perfectly or almost perfectly, give a significant bonus.
        best_fit_threshold = 0.05 * item  # Define what "almost perfect" means
        best_fit_bonus = np.where(np.abs(valid_remain_cap - item) <= best_fit_threshold, 2.0, 1.0)

        # Large bin penalty: Penalize bins that are much larger than the item.
        large_bin_penalty = np.where(valid_remain_cap > 2.5 * item, 0.6, 1.0) # modified penalty & thresh

        # Combine factors
        priorities[valid_bins] = closeness * capacity_factor * best_fit_bonus * large_bin_penalty

        # Small random factor to break ties.
        priorities[valid_bins] += np.random.rand(len(valid_remain_cap)) * 0.001

    return priorities
```
