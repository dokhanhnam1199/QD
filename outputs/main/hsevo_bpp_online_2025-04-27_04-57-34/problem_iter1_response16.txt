```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fits (remaining capacity >= item size).
    It aims to fill bins more completely by favoring tighter fits,
    but also incorporates a penalty for bins that are almost full
    to avoid extreme fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fits = bins_remain_cap >= item

    if np.any(fits):
        # Calculate remaining space after placing the item
        remaining_space = bins_remain_cap - item

        # Prioritize bins where item fits.
        priorities[fits] = (item / bins_remain_cap[fits])  #Fill ratio (higher is better)
        priorities[fits] += (1 / (1 + remaining_space[fits])) # Prefer tighter fits

        #Small penalty to discourage near-full packing, preventing very small fragmentations.
        nearly_full = (bins_remain_cap[fits] - item) < 0.1  # e.g., < 0.1 considered nearly full
        priorities[fits][nearly_full] *= 0.9 #Slight reduction for bins considered near full

    else:
         #If nothing fits, give highest priority to smallest bin. This will ensure one bin has items instead of lots with few.
         priorities = -bins_remain_cap
         priorities = priorities - np.min(priorities) +1e-9 #to ensure its not zero, shift all values > 0
         pass


    return priorities
```
