```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by gravitational potential energy and considering fullness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero. Add a small epsilon.
    epsilon = 1e-9
    effective_capacity = bins_remain_cap + epsilon

    # Calculate how much space will be wasted if the item is placed in the bin.
    waste = effective_capacity - item

    # If the item doesn't fit, severely penalize it.  Using a very large positive number for waste if no fit
    waste = np.where(waste < 0, 1e9, waste)

    # Gravitational Potential analogy: Lower potential is more desirable
    #  Priority ~ - waste / capacity (normalize by the starting capacity).
    priorities = -waste / (effective_capacity + item) #Adding item to denominator scales properly

    # Bonus for almost full bins (Encourages filling bins before opening new ones)
    almost_full_threshold = 0.1  # Tunable hyperparameter: bins with < 10% remaining capacity are incentivized
    almost_full_bonus = np.where(effective_capacity <= almost_full_threshold, 1.0 / (effective_capacity+epsilon), 0) # Add a bonus priority value. avoid division by zero when bins_remain_cap near 0
    priorities += almost_full_bonus
    return priorities
```
