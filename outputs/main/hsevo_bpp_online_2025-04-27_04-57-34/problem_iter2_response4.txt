```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, remaining capacity, and fragmentation avoidance."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities

    # Utilization score
    space_utilization = item / bins_remain_cap[eligible_bins]
    packing_density_score = space_utilization / (1 + space_utilization**2 + 0.001)

    # Remaining capacity
    remaining_capacity_after_fit = bins_remain_cap[eligible_bins] - item
    remaining_capacity_score = np.exp(-remaining_capacity_after_fit)

    # Fragmentation avoidance (penalty for almost full)
    nearly_full_threshold = 0.1
    nearly_full_mask = (bins_remain_cap[eligible_bins] > 0) & (bins_remain_cap[eligible_bins] < nearly_full_threshold)
    fragmentation_penalty = np.zeros_like(packing_density_score)
    fragmentation_penalty[nearly_full_mask] = -0.5

    priorities[eligible_bins] = packing_density_score + remaining_capacity_score + fragmentation_penalty + np.random.normal(0, 0.01, size=np.sum(eligible_bins))

    return priorities
```
