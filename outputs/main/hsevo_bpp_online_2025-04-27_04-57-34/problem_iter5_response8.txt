```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio and avoids large leftover space."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fits = bins_remain_cap >= item

    if np.any(fits):
        priorities[fits] = item / bins_remain_cap[fits] # Fill ratio
        remaining_space = bins_remain_cap[fits] - item
        large_leftover = remaining_space > np.mean(bins_remain_cap)
        priorities[fits][large_leftover] *= 0.5 # Penalize large leftover
    else:
        priorities = -bins_remain_cap # Assign negative priorities to infeasible bins
        priorities = priorities - np.min(priorities) + 1e-9 # Shift to positive, prioritize least insufficient

    return priorities
```
