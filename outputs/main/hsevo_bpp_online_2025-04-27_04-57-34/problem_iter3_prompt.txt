{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Utilizes a combination of factors, inspired by gravitational attraction and\n    the principle of minimizing wasted space. Higher remaining capacity with closer\n    size to the item results in higher priority, encouraging efficient packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure bins_remain_cap is a numpy array to handle potential errors\n    bins_remain_cap = np.array(bins_remain_cap)\n\n    # Avoid division by zero and negative values inside log\n    valid_bins = bins_remain_cap > 0\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)  # Initialize all priorities to 0\n\n    if np.any(valid_bins): # only compute priority if at least one bin is non-empty\n        valid_remain_cap = bins_remain_cap[valid_bins]\n\n        # Proximity factor: smaller difference between item and bin capacity is better\n        proximity = np.exp(-np.abs(valid_remain_cap - item) / item)\n\n        # Capacity factor: higher remaining capacity is generally better, but penalize bins that are too large compared to the item\n        capacity = valid_remain_cap / np.max(valid_remain_cap)\n        capacity_penalty = np.where(valid_remain_cap > 2 * item, 0.5, 1) # slightly penalize bins where capacity is way larger than the item\n\n        # Combine factors to produce priority\n        priorities[valid_bins] = proximity * capacity * capacity_penalty\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's redefine \"Current self-reflection\" for better heuristic design, actively avoiding common pitfalls.\n\nHere's a refined approach:\n\n*   **Keywords:** Iterative refinement, multi-objective, computational cost, edge-case mitigation.\n\n*   **Advice:** Structure self-reflection around iterative refinement. Evaluate computational cost and trade-offs when combining factors. Design penalties/bonuses based on *data-driven* edge-case analysis, not intuition alone.\n\n*   **Avoid:** Premature optimization, relying solely on intuition, neglecting computational cost analysis during iterative stages.\n\n*   **Explanation:** Refine heuristics iteratively by tracking performance metrics (e.g., solution quality, runtime). A good approach involves a tight feedback loop: (1) design, (2) implement, (3) test, (4) analyze, (5) refine.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}