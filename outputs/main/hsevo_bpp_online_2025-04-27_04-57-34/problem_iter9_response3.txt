```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a refined combination of factors,
    including capacity fit, a small-bin preference, and a penalty for large
    discrepancies between item size and remaining capacity. It aims for better
    packing density and reduced fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bins_remain_cap = np.array(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap > 0

    if np.any(valid_bins):
        valid_remain_cap = bins_remain_cap[valid_bins]

        # Capacity fit: How well the item fits into the remaining capacity.
        capacity_fit = np.exp(-np.abs(valid_remain_cap - item) / (0.5 * item))  # Focus on tighter fit

        # Small bin preference: Encourage filling smaller bins first, but less aggressively.
        small_bin_preference = 1 / (1 + (valid_remain_cap / np.max(bins_remain_cap))**2)  # Quadratic scaling

        # Waste penalty: Penalize bins where the remaining capacity after adding the item
        # would be significantly larger than the item itself, indicating potential waste.
        waste_penalty = np.where(valid_remain_cap - item > 1.5 * item, 0.2, 1)  # Significant penalty

        # Combine the factors
        priorities[valid_bins] = capacity_fit * small_bin_preference * waste_penalty

    return priorities
```
