```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins, balancing waste, capacity, and best-fit with scaling."""
    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if not np.any(eligible_bins):
        priorities[:] = -1e9
        return priorities

    waste = bins_remain_cap[eligible_bins] - item
    
    # Best fit bonus (exponential)
    best_fit_bonus = np.exp(-np.abs(waste) / (0.2 * item + 1e-6))

    # Capacity factor (scaled)
    capacity_factor = bins_remain_cap[eligible_bins] / np.max(bins_remain_cap)

    # Combined priority (scaled & combined)
    priorities[eligible_bins] = best_fit_bonus + 0.5 * capacity_factor - waste * 0.1 # Waste as penalty

    return priorities
```
