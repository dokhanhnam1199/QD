```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins balancing waste, utilization, and close fit with scaling."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item

    infeasible_bins = waste < 0
    priorities[infeasible_bins] = -np.inf

    feasible_bins = waste >= 0
    if not np.any(feasible_bins):
        return priorities

    remaining_space = bins_remain_cap[feasible_bins] - item
    proximity_to_ideal = np.exp(-np.abs(remaining_space - (0.2 * item)) / item)

    utilization = (bins_remain_cap[feasible_bins] - remaining_space) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap[feasible_bins])
    fullness_bonus = np.clip(utilization, 0, 1) * 0.5

    priorities[feasible_bins] = proximity_to_ideal + fullness_bonus

    close_fit_threshold = 0.1 * item
    close_fit = (waste >= 0) & (waste <= close_fit_threshold)
    priorities[close_fit] += 1  # Small bonus for close fit

    return priorities
```
