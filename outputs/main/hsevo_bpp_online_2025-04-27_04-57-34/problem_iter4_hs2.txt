import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_weight: float = 0.9216792413049543, capacity_reward_weight: float = 0.8502889573008172, fit_reward_weight: float = 0.9261633818255168, fit_exponent: float = 0.42149987681314344, min_priority_boost: float = 0.0014580838785740288, ineligible_priority: float = -8094608035.662609) -> np.ndarray:
    """Calculate bin priorities considering waste, capacity, and fit."""

    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(eligible_bins):
        waste = bins_remain_cap - item
        waste[~eligible_bins] = np.inf
        priorities[eligible_bins] = -waste_penalty_weight * np.abs(waste[eligible_bins])

        priorities[eligible_bins] += capacity_reward_weight * bins_remain_cap[eligible_bins] / np.max(bins_remain_cap)
        
        fit_ratios = item / bins_remain_cap
        scaled_fit = (1 - np.clip(fit_ratios, 0, 1)) ** fit_exponent
        priorities[eligible_bins] += fit_reward_weight * scaled_fit[eligible_bins]
        
        priorities[eligible_bins] += min_priority_boost

    else:
        priorities[:] = ineligible_priority

    return priorities
