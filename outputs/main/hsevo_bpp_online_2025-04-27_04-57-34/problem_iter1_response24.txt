```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value. This handles bins that cannot fit the item.
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Identify bins that can fit the item.
    can_fit = bins_remain_cap >= item

    # Calculate priorities only for bins that can fit the item.
    if np.any(can_fit):
        remaining_space = bins_remain_cap[can_fit] - item

        # First Fit Decreasing Inspired: Prioritize bins with minimal wasted space. This reduces fragmentation.
        waste_ratio = remaining_space / bins_remain_cap[can_fit]
        priorities[can_fit] = -waste_ratio

        # Improve upon Best Fit: Add bonus for near-perfect fit (avoids making a close-to-full bin unusable).
        near_perfect_fit = (remaining_space <= 0.1 * bins_remain_cap[can_fit]) & (remaining_space > 0) # was 0.05
        priorities[can_fit][near_perfect_fit] += 1

    return priorities
```
