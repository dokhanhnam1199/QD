```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic: Best-fit with fullness bonus and fragmentation penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    remaining_capacities_after_fit = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -np.abs(remaining_capacities_after_fit)

    # Fullness bonus
    bins_used_ratio = (bins_remain_cap.max() - bins_remain_cap[feasible_mask]) / bins_remain_cap.max()
    bonus = 1 / (1 + np.exp(-10 * (bins_used_ratio - 0.7)))
    priorities[feasible_mask] += bonus

    # Fragmentation penalty - avoid near empty bins AFTER adding the item.
    penalty = np.exp(-remaining_capacities_after_fit * 5)
    priorities[feasible_mask] -= penalty
    return priorities
```
