```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fits best, but also
    considers bin utilization. It aims for a balance between fitting items
    snugly and avoiding excessive fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bins_remain_cap = np.array(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: item must fit in the bin
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No feasible bins, all priorities remain zero

    # 2. Calculate remaining capacity AFTER placing the item (if we hypothetically placed it)
    remaining_after_placement = bins_remain_cap[feasible_bins] - item

    # 3. Prioritize based on tightness of fit (lower remaining_after_placement is better, but avoid zero)
    # Avoid division by zero by adding a small constant. Larger value leads to more spread.
    fit_priority = np.exp(-remaining_after_placement / (0.1 * item)) # The constant term mitigates issues with very small remaining capacities after placement
    # 4. Introduce a bin utilization factor.  Bins with already moderate fill are favored.

    utilization = 1 - bins_remain_cap[feasible_bins] / np.max(bins_remain_cap) # Use normalized form
    utilization_priority = utilization # Higher utilization gets higher priority (encourages fill of existing bins). Simple linear for now

    # Combine fit and utilization
    priorities[feasible_bins] = fit_priority * utilization_priority

    return priorities
```
