import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_weight: float = -1.0294728673884237, capacity_weight: float = 0.29519008386117873, best_fit_scale: float = 0.10144022745865722, best_fit_epsilon: float = 7.230018111207584e-06, ineligible_priority: float = -7744622159.607029) -> np.ndarray:
    """Prioritizes bins by balancing waste, capacity, and best-fit."""
    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(eligible_bins):
        waste = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = waste_weight * waste

        capacity_factor = bins_remain_cap[eligible_bins] / np.max(bins_remain_cap)
        priorities[eligible_bins] += capacity_weight * capacity_factor

        best_fit_bonus = np.exp(-np.abs(waste) / (best_fit_scale * item + best_fit_epsilon))
        priorities[eligible_bins] += best_fit_bonus

    else:
        priorities[:] = ineligible_priority

    return priorities
