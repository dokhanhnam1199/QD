```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Heuristic 1: Fill the bin as much as possible, but do not overfill
    # Prioritize bins where item fits, higher score for bins with less remaining space after placing item.
    valid_bins = bins_remain_cap >= item
    remaining_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = 1 / (remaining_space + 0.0001) # avoid division by zero and prefer less remaining

    # Heuristic 2: If item doesn't fit, heavily penalize the bin
    priorities[bins_remain_cap < item] = -1000  # Extremely low priority if it doesn't fit

    # Heuristic 3: Give empty bins a small preference to start a new bin
    empty_bins = bins_remain_cap == np.max(bins_remain_cap) #Assuming max capacity equals the original size of the bin
    priorities[empty_bins] += 0.1

    return priorities
```
