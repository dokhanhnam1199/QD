```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Aims to balance bin usage and avoid fragmentation by prioritizing bins that:
    1. Can fit the item without excessive leftover space.
    2. Are relatively full already, indicating good space utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate leftover space
            leftover = cap - item

            # Priority 1: Avoid excessive leftover.  Prioritize smaller leftover.
            leftover_penalty = np.exp(leftover) if leftover > 0 else 1.0  # Exponentiated to penalize large leftovers more heavily

            # Priority 2: Prioritize bins that are already relatively full (high cap utilization).
            # Use a sigmoid function to prioritize bins closer to being full, but don't overly penalize near-empty bins.  The closer to capacity, the higher the value
            capacity_utilization_bonus = 1.0 / (1.0 + np.exp(-(1 - (cap / (cap+item)))))

            priorities[i] = capacity_utilization_bonus/leftover_penalty  # Combined effect: full bins with smallest leftover prioritized.
        else:
            priorities[i] = -np.inf # impossible bin is given the smallest priority

    return priorities
```
