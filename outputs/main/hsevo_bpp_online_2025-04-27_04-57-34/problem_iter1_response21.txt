```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers both the space utilization and the absolute waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small value to avoid division by zero and negative logs
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - 1e9 # Negative values for invalid bins

    # Calculate space utilization ratios (item size / remaining capacity)
    ratios = item / bins_remain_cap
    
    #Consider only bins where the item can fit
    can_fit = item <= bins_remain_cap
    
    if np.any(can_fit):

        # Give a bonus to bins that the item fits in
        priorities[can_fit] = 0

        # Calculate remaining space after placing the item, if it fits.
        remaining_space = bins_remain_cap - item
        
        # Higher utilization (ratio closer to 1) is better, but penalize large wastes.

        space_utilization_priority = np.where(can_fit, (1-np.abs(remaining_space/bins_remain_cap)), -1e9)
        #In this case, remaining_space/bins_remain_cap shows the ratio of wasted sapce to original.
        #Then, if waste is small (remaining_space/bins_remain_cap is near 0), then the subtraction value will be close to 1, which means high priority.
        #If the wasted space is larger (remaining_space/bins_remain_cap is near 1, means almost whole the bin capacity left after packing item),
        #then, the value will be closer to 0, which means small priority.


        waste_penalty = np.where(can_fit, np.exp(-remaining_space), -1e9) # Apply exponential decay to waste, encouraging lower waste

        # Combine the utilization and waste considerations
        priorities[can_fit] = space_utilization_priority[can_fit] + waste_penalty[can_fit]
        #priorities[~can_fit] = -1e9


    return priorities
```
