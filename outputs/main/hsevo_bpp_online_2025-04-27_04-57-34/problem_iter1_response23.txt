```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing heuristic inspiration: prioritize bins that can *just* fit the item.
    # This might lead to less fragmentation.
    # Add small bonus for filling up the bin more completely

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            priorities[i] = (cap - item + 1e-9) / (cap + 1e-9) # Inverted leftover, smaller is better, avoid division by zero
            priorities[i] = 1 - priorities[i] # Convert to larger is better
        else:
            priorities[i] = -np.inf # Very low priority

    # Boost very full bins (those nearly full before placement). Experimenting with sigmoid.
    prefill_level = (1 - bins_remain_cap / np.max(bins_remain_cap))

    sigmoid_boost = 1 / (1 + np.exp(-10 * (prefill_level - 0.9))) # Large increase if near capacity

    priorities = priorities + sigmoid_boost

    return priorities
```
