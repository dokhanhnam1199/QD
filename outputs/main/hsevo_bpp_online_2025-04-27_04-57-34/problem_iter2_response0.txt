```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, perfect fit, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if remaining_capacity >= item:
            fill_ratio = item / remaining_capacity
            priorities[i] += fill_ratio

            if abs(remaining_capacity - item) < 1e-6:
                priorities[i] += 1.0
            else:
                priorities[i] += 1.0 / (remaining_capacity - item + 1e-9) #added small constant for stability

            # Scale remaining capacity to avoid over-prioritizing almost full bins, 
            # incorporate a preference for more empty bins if multiple bins can accommodate the item
            priorities[i] += 0.1 * (1 - (remaining_capacity / np.max(bins_remain_cap)))
        else:
            priorities[i] = -np.inf

    return priorities
```
