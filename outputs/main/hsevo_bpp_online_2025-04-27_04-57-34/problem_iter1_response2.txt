```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small value to avoid division by zero and negative infinities later
    priorities = np.zeros_like(bins_remain_cap, dtype=float) + 1e-9

    # Calculate waste if item is placed in the bin. A smaller waste is better
    waste = bins_remain_cap - item
    
    # Bins that cannot fit the item get a very low priority.
    priorities[waste < 0] = -np.inf

    # Adjust priority based on the inverse of waste. Smaller waste means higher priority, but only for fitting bins
    valid_bins = waste >= 0
    priorities[valid_bins] = 1.0 / (waste[valid_bins] + 1e-9)  # Add a small constant to avoid division by zero
    
    # Incorporate bin utilization: a bin with higher initial fullness is preferred to consolidate items, provided it still fits
    utilization = 1.0 - bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)

    priorities[valid_bins] *= (1 + utilization[valid_bins]) # Encourage filling bins that are already partly full

    # Add a bonus to bins that are just large enough to accomodate the item
    close_fit_threshold = 0.1 * item # close fit is when the waste is less than 10% of item size
    close_fit = (waste >= 0) & (waste <= close_fit_threshold)
    priorities[close_fit] += 10 # Boost for close fits. This is to try reduce number of bins used.

    return priorities
```
