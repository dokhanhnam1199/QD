```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, capacity, and best-fit, with tuning."""
    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste_weight = 0.1
    capacity_weight = 0.2
    best_fit_scale = 0.5
    best_fit_epsilon = 1e-6
    ineligible_priority = -1e9

    if np.any(eligible_bins):
        waste = bins_remain_cap[eligible_bins] - item
        priorities[eligible_bins] = waste_weight * waste

        capacity_factor = bins_remain_cap[eligible_bins] / np.max(bins_remain_cap)
        priorities[eligible_bins] += capacity_weight * capacity_factor

        best_fit_bonus = np.exp(-np.abs(waste) / (best_fit_scale * item + best_fit_epsilon))
        priorities[eligible_bins] += best_fit_bonus

    else:
        priorities[:] = ineligible_priority

    return priorities
```
