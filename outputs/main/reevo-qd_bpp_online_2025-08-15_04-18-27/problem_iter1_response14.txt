```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First strategy.

    The Exact Fit First strategy prioritizes bins that can perfectly fit the item.
    Among bins that can perfectly fit, it prioritizes those with less remaining capacity.
    If no bin can perfectly fit the item, it prioritizes bins that have the smallest
    remaining capacity greater than the item size (First Fit Decreasing-like behavior).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate potential fits
    exact_fits_mask = (bins_remain_cap == item)
    sufficient_fits_mask = (bins_remain_cap > item)

    # High priority for exact fits
    # Among exact fits, prioritize those with less remaining capacity (which is 0 in this case, so no difference here)
    if np.any(exact_fits_mask):
        priorities[exact_fits_mask] = 1000 # High priority for exact fits

    # Medium priority for sufficient fits
    # Among sufficient fits, prioritize those with the smallest remaining capacity greater than the item size
    if np.any(sufficient_fits_mask):
        sufficient_capacities = bins_remain_cap[sufficient_fits_mask]
        # Calculate a score that favors smaller remaining capacities
        # We invert the difference (max_cap - remaining_cap) to make larger differences score lower
        # Then we add a small constant to ensure these are less than exact fits
        max_cap_overall = np.max(bins_remain_cap) # Use a stable reference for scoring
        score_for_sufficient = (max_cap_overall - (bins_remain_cap[sufficient_fits_mask] - item))
        priorities[sufficient_fits_mask] = 100 + score_for_sufficient

    # Bins that cannot fit the item get a priority of 0
    # Note: The initialization to zeros handles this.

    return priorities
```
