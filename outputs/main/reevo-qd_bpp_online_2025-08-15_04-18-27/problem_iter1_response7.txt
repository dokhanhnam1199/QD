```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit strategy.

    In Random Fit, we randomly select a bin that has enough capacity for the item.
    This heuristic aims to distribute items somewhat randomly across available bins,
    which can sometimes be effective by avoiding concentrating all items into a few bins too early.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that have enough capacity for the item
    valid_bins_mask = bins_remain_cap >= item

    # Assign a high priority to valid bins, and a low priority to invalid bins.
    # For the valid bins, we assign a random priority. This is the "Random Fit" aspect.
    # The range of random priorities can be adjusted. Here, we use a range that ensures
    # any valid bin has a higher priority than any invalid bin (which has 0).
    if np.any(valid_bins_mask):
        priorities[valid_bins_mask] = np.random.rand(np.sum(valid_bins_mask)) * 100
    # Invalid bins will keep their default priority of 0.

    return priorities
```
