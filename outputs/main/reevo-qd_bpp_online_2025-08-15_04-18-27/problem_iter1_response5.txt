```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).

    This heuristic prioritizes bins that have just enough remaining capacity to fit the item.
    Bins that are too small are heavily penalized, while bins with ample space are also
    deprioritized compared to those that are a near perfect fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between remaining capacity and item size
    diff = bins_remain_cap - item

    # Initialize priorities to a low value (or negative infinity) to penalize unusable bins
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that can fit the item
    can_fit_mask = diff >= 0

    # For bins that can fit the item, calculate the priority score
    # The priority is higher for bins where the difference is smaller (near perfect fit)
    # We use 1 / (1 + difference) to ensure positive scores and to penalize larger differences.
    # Adding 1 to the denominator prevents division by zero if diff is 0 (perfect fit).
    if np.any(can_fit_mask):
        priorities[can_fit_mask] = 1.0 / (1.0 + diff[can_fit_mask])

    return priorities
```
