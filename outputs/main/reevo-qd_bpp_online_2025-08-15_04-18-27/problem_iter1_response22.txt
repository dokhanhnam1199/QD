```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit.

    The Worst Fit strategy aims to place the current item into the bin that has
    the largest remaining capacity, but only if the item fits. The intuition is
    to leave smaller capacities available for smaller items that might come later,
    while using up the larger capacities with potentially larger items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more preferred bin. Bins that cannot fit the
        item are assigned a priority of -1. For bins that can fit the item,
        the priority is set to their remaining capacity.
    """
    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with -1 (unfittable)
    
    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item
    
    # For bins that can fit the item, assign priority based on remaining capacity
    # Higher remaining capacity means higher priority (Worst Fit)
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]
    
    return priorities
```
