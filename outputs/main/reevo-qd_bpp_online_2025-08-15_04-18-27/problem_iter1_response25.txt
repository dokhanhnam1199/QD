```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).

    The priority is calculated as 1 / (1 + (bin_capacity - item_size)).
    This prioritizes bins that have a remaining capacity closer to the item size,
    favoring a snug fit. Bins that are too large or too small will have lower priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Only consider bins that can actually fit the item
    feasible_bins_mask = bins_remain_cap >= item
    
    # Calculate the "gap" for feasible bins
    gaps = bins_remain_cap[feasible_bins_mask] - item
    
    # Calculate priorities for feasible bins: 1 / (1 + gap)
    # Adding 1 to the denominator to avoid division by zero if gap is -1 (which shouldn't happen with feasible bins)
    # and to ensure higher priority for smaller gaps.
    priorities = 1 / (1 + gaps)
    
    # Initialize priorities for all bins to 0
    all_priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign the calculated priorities to the feasible bins
    all_priorities[feasible_bins_mask] = priorities
    
    return all_priorities
```
