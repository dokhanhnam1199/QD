```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Exact Fit First.

    The Exact Fit First (EFF) strategy prioritizes bins where the item fits
    perfectly, meaning the remaining capacity of the bin after placing the item
    is zero. If no perfect fit is found, it can be extended to consider other
    strategies (like Best Fit or Worst Fit), but for pure EFF, we assign a high
    priority to perfect fits and a lower (or zero) priority to non-fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins where the item fits exactly
    perfect_fit_mask = (bins_remain_cap == item)

    # Assign a high priority to bins that offer an exact fit
    # The exact value can be tuned, but a large positive number works well.
    # We'll use 1 for exact fits, and 0 for all others.
    priorities[perfect_fit_mask] = 1.0

    # If there are no exact fits, you might consider a fallback strategy.
    # For this pure EFF implementation, if no exact fit is found,
    # all priorities remain 0, meaning no bin is "preferred" by EFF.
    # A more robust implementation might then apply Best Fit, etc.

    return priorities
```
