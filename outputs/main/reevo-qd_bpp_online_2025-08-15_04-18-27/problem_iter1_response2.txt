```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Worst Fit aims to place the item in the bin with the most remaining capacity.
    # This is because it leaves the largest bins for potentially larger future items,
    # trying to avoid situations where many small items fill up most bins,
    # leaving no space for a large item.

    # We want to prioritize bins with HIGHER remaining capacity.
    # A simple way to do this is to directly use the remaining capacity as the priority.
    # However, we only want to consider bins that can actually fit the item.
    # Bins that cannot fit the item should have a priority of 0 (or a very low value)
    # to ensure they are never selected.

    priorities = np.zeros_like(bins_remain_cap)
    # Identify bins that can accommodate the item
    suitable_bins_mask = bins_remain_cap >= item
    
    # For suitable bins, assign their remaining capacity as the priority.
    # The higher the remaining capacity, the higher the priority.
    priorities[suitable_bins_mask] = bins_remain_cap[suitable_bins_mask]

    return priorities
```
