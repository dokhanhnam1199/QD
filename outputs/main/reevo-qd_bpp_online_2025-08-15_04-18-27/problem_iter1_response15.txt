```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).

    The priority is higher for bins that have just enough space for the item (i.e.,
    small remaining capacity after packing the item). This encourages filling bins
    as much as possible before opening new ones.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after placing the item in each bin.
    # Only consider bins that have enough capacity for the item.
    potential_remaining_caps = bins_remain_cap - item
    
    # Initialize priorities to a very low value (effectively disabling bins
    # that cannot accommodate the item).
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # For bins that can fit the item, calculate the inverse of the remaining capacity.
    # We want to prioritize bins with less remaining space AFTER packing the item,
    # as this is the essence of "proximity fit" or "inverse distance" here.
    # Adding 1 to the denominator to avoid division by zero if the item perfectly fills a bin.
    # A small epsilon can also be used for robustness.
    epsilon = 1e-9  # To avoid division by zero
    fit_indices = np.where(potential_remaining_caps >= 0)[0]
    
    if len(fit_indices) > 0:
        # The core idea of "inverse distance" or "proximity fit" for BPP
        # usually means favoring the bin where the item fits "most snugly".
        # This translates to minimizing the *resulting* remaining capacity.
        # So, we want to maximize the inverse of the resulting remaining capacity.
        # A higher value of `1 / (remaining_capacity + epsilon)` means a smaller
        # remaining_capacity, hence a "better" fit according to this heuristic.
        priorities[fit_indices] = 1.0 / (potential_remaining_caps[fit_indices] + epsilon)

    return priorities
```
