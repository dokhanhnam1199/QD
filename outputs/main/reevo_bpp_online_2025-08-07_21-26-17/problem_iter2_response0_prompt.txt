{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Return a priority array for each bin following the Worst\u2011Fit strategy.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be inserted.\n    bins_remain_cap : np.ndarray\n        Remaining capacities for each bin. Expected to be non\u2011negative numeric values.\n\n    Returns\n    -------\n    np.ndarray\n        Array of scores with the same shape as ``bins_remain_cap``. The bin with\n        the maximum score will be chosen. Bins that cannot hold the item are\n        assigned a priority of -\u221e, effectively removing them from consideration.\n\n    Notes\n    -----\n    The priority is simply the amount of space that will remain after the\n    item is placed in each bin. The index with the largest residual space\n    gets the highest priority \u2013 the hallmark of the Worst\u2011Fit heuristic.\n    \"\"\"\n    # Convert to float to avoid integer overflow/underflow when subtracting\n    remain = bins_remain_cap.astype(float, copy=False) - item\n    # Bins that can't accept the item get -infinity priority\n    return np.where(remain >= 0, remain, -np.inf)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Return a priority for each bin based on a Sigmoid Fit Score.\n\n    The score is high for bins where the item will leave very little residual\n    capacity, i.e., where the item tightly fits.  Infeasible bins\n    (item > remaining capacity) receive -np.inf so they are never chosen.\n\n    Args:\n        item: Size of the item to pack.\n        bins_remain_cap: 1\u2011D array of remaining capacities of each bin.\n\n    Returns:\n        Array of the same shape as bins_remain_cap with a floating priority\n        for each bin.\n    \"\"\"\n    item = float(item)\n\n    # Compute leftover capacity after placing the item\n    leftover = bins_remain_cap - item\n    # Which bins can accept the item?\n    feasible = leftover >= 0\n\n    # Initialize priorities to -\u221e for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if np.any(feasible):\n        # Normalised leftover fraction: 0 -> tight fit, 1 -> empty bin\n        norm_leftover = leftover[feasible] / bins_remain_cap[feasible]\n\n        # Sigmoid Fit Score: Sigmoid( a - b * (norm_leftover) )\n        # Parameters a, b tune the steepness and offset.\n        a, b = 5.0, 10.0\n        logits = a - b * norm_leftover\n        # Logistic function\n        priorities[feasible] = 1.0 / (1.0 + np.exp(-logits))\n\n    return priorities\n\n[Reflection]\nUse normalized leftover with a tunable sigmoid, penalize infeasible bins, and adjust steepness per data.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}