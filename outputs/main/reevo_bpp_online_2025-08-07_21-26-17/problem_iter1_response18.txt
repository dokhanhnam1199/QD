```python
import numpy as np

# Global epsilon for the epsilon‑greedy policy.
# With probability EPSILON we favour exploration (random choice);
# with probability (1‑EPSILON) we follow the greedy heuristic.
EPSILON = 0.1


def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Epsilon‑greedy priority scores for online bin packing.

    The greedy component prefers bins that will leave the smallest waste
    after placing the item (i.e., bins with minimal remaining capacity
    - item). The exploration component adds uniform random noise to the
    priority of feasible bins, encouraging occasional exploration of non‑optimal
    bins.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array of the remaining capacities of all bins.

    Returns:
        1‑D array of priority scores, same length as ``bins_remain_cap``.
        Higher scores indicate a more desirable bin for the item.
    """
    # Ensure we work with floats.
    caps = bins_remain_cap.astype(float)

    # Feasibility mask: bins that can accommodate the item.
    feasible = caps >= item

    # If no bin can hold the item, return zeros (caller may open a new bin).
    if not np.any(feasible):
        return np.zeros_like(caps)

    # ---------- Greedy component ----------
    # Waste after placing the item.
    waste = caps - item
    # Tiny constant avoids division by zero for perfect fits.
    delta = 1e-9
    greedy_score = np.zeros_like(caps)
    # Higher score for smaller waste → 1 / (waste + delta).
    greedy_score[feasible] = 1.0 / (waste[feasible] + delta)

    # ---------- Exploration component ----------
    # Uniform random scores for feasible bins, zero for infeasible ones.
    random_score = np.zeros_like(caps)
    random_score[feasible] = np.random.rand(np.sum(feasible))

    # ---------- Combine ----------
    # Linear interpolation yields the classic epsilon‑greedy mixture.
    priorities = (1.0 - EPSILON) * greedy_score + EPSILON * random_score

    # Ensure infeasible bins stay at zero (or could be set to -inf).
    priorities[~feasible] = 0.0

    return priorities
```
