```python
import numpy as np

# Global epsilon controlling the exploration vs. exploitation balance.
_EPSILON = 0.15  # Typical values: 0.0 (pure greedy) to 1.0 (pure random).

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute a priority score for each bin using an epsilon‑greedy strategy.

    The function prefers bins that fit the item tightly (exploitation) while
    preserving a chance of exploring sub‑optimal bins (exploration) by blending
    a random component weighted by epsilon.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        Remaining capacity of each bin.

    Returns
    -------
    np.ndarray
        Priority scores for each bin; higher scores indicate more desirable bins.
    """
    # Ensure input is a NumPy array of floats.
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item.
    can_fit = bins_remain_cap >= item

    # --- Exploitation component ------------------------------------------------
    # Preference for tighter fits: smaller leftover space => larger priority.
    # Inverse of leftover space is used; a tiny epsilon avoids division by zero.
    leftover = bins_remain_cap - item
    base_priority = np.where(
        can_fit,
        1.0 / (leftover + 1e-12),
        0.0
    )

    # --- Exploration component -------------------------------------------------
    # Random scores to enable exploration of less obvious bins.
    rng = np.random.default_rng()
    random_priority = rng.random(bins_remain_cap.shape)

    # --- Blend the two components -----------------------------------------------
    # (1 - epsilon) weight for exploitation, epsilon weight for exploration.
    blended_priority = (1.0 - _EPSILON) * base_priority + _EPSILON * random_priority

    # Bins that cannot fit the item should be assigned zero priority to never be selected.
    priorities = np.where(can_fit, blended_priority, 0.0)

    return priorities
```
