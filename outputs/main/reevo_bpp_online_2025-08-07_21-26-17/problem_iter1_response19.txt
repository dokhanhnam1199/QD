```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Softmax‑Based priority for online bin packing.
    
    If the item fits into a bin, we compute the remaining free space after placing
    the item and use a negative sign to prefer bins with small leftover.
    The final priority is the exponential of these scores (softmax style);
    bins that cannot accommodate the item receive a score of zero.
    
    Parameters
    ----------
    item : float
        Size of the item to be packed.
    bins_remain_cap : np.ndarray
        1‑D array of the current free capacity in each bin.
    
    Returns
    -------
    np.ndarray
        Same shape as ``bins_remain_cap`` with a priority value for each bin.
        The highest priority bin will be chosen.
    """
    # Bins that can accept the item
    can_fit = bins_remain_cap >= item
    
    # Remaining free space if the item were placed
    leftover = bins_remain_cap - item
    
    # Create scores: use -leftover for bins that can fit, -inf otherwise
    scores = np.where(can_fit, -leftover, -np.inf)
    
    # Shift scores for numerical stability and apply exp
    finite = np.isfinite(scores)
    if finite.any():
        max_score = np.max(scores[finite])
        shifted = np.where(finite, scores - max_score, scores)
        priorities = np.where(finite, np.exp(shifted), 0.0)
    else:
        # No bin can fit: give zero priority to all bins
        priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    return priorities
```
