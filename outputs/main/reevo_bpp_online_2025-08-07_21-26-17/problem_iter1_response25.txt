```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Inverse Distance (Proximity Fit) priority function for online BPP.

    The heuristic favours bins that would have the smallest leftover slack
    after receiving the item, i.e., the tightest possible fit.  For each
    bin we compute the slack (remaining capacity minus the item size).  If
    the slack is negative the bin cannot accommodate the item and receives a
    priority of zero.  Otherwise the priority is proportional to the inverse
    of the slack raised to a configurable exponent, sharpening the preference
    for near‑perfect fits.  Finally the scores are normalised to ``[0, 1]`` so
    that they can be compared across different problem instances.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array with the current remaining capacity of each bin.

    Returns
    -------
    np.ndarray
        Priority values for each bin. Higher values indicate more desirable
        bins for the current item.
    """
    # Convert input to a NumPy float array for safe vectorised ops.
    caps = np.asarray(bins_remain_cap, dtype=np.float64)

    # Slack after (hypothetically) placing the item into each bin.
    slack = caps - item

    # Feasibility mask: only bins with non‑negative slack can host the item.
    feasible = slack >= 0.0

    # Tiny epsilon to avoid division by zero when slack is exactly zero.
    eps = np.finfo(np.float64).eps

    # Exponent > 1 accentuates the advantage of tighter fits.
    exponent = 1.5

    # Initialise priorities with zeros (infeasible bins stay zero).
    priorities = np.zeros_like(caps, dtype=np.float64)

    # Inverse‑distance weighting for feasible bins.
    priorities[feasible] = (1.0 / (slack[feasible] + eps)) ** exponent

    # Normalise to the interval [0, 1] for interpretability.
    max_prio = priorities.max()
    if max_prio > 0:
        priorities /= max_prio

    return priorities
```
