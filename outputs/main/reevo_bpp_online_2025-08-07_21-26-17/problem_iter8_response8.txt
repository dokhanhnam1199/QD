```python
import numpy as np
from typing import Optional

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                *, random_state: Optional[int] = None,
                epsilon_min: float = 0.05,
                epsilon_max: float = 0.25) -> np.ndarray:
    """
    Adaptive priority for online bin packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.
    random_state : int or None, optional
        Seed for reproducibility.
    epsilon_min, epsilon_max : float, optional
        Bounds for the exploration probability epsilon.

    Returns
    -------
    np.ndarray
        Priority scores; infeasible bins receive -np.inf.
    """
    # Ensure array
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=np.float64)

    # Feasibility mask
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Leftover after placing the item
    leftover = bins_remain_cap - item

    # Base score: tight fits get higher values
    eps = 1e-12  # avoid division by zero
    base = np.zeros_like(bins_remain_cap, dtype=np.float64)
    base[feasible] = 1.0 / (leftover[feasible] + eps)

    # Adaptive exploration rate based on variance of leftover space
    lo = leftover[feasible]
    var = np.var(lo)
    L = np.max(lo)
    var_norm = 0.0
    if L > 0:
        var_max = (L ** 2) / 4.0  # max variance in [0, L]
        var_norm = np.clip(var / var_max, 0.0, 1.0)

    epsilon = epsilon_min + (epsilon_max - epsilon_min) * (1.0 - var_norm)

    # Random exploration component
    rng = np.random.default_rng(random_state)
    random_score = rng.random(bins_remain_cap.shape)

    # Combine exploitation (tight‑fit) and exploration (random)
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    priorities[feasible] = (1.0 - epsilon) * base[feasible] + epsilon * random_score[feasible]

    # Deterministic tie‑breaker: very small incremental value
    priorities += np.arange(bins_remain_cap.size, dtype=np.float64) * 1e-12

    return priorities
```
