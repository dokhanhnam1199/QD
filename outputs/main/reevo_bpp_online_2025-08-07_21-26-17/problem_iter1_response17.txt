```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Random Fit priority function for online Bin Packing.
    Returns a random priority for each bin that can accommodate the item.
    Infeasible bins receive ``-np.inf`` so they are never selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1â€‘D array containing the remaining capacity of each currently open bin.

    Returns
    -------
    np.ndarray
        Array of the same shape as ``bins_remain_cap`` where each entry holds
        a random priority if the item fits, otherwise ``-np.inf``.
    """
    # Ensure we work with a NumPy array (copy on view, not modify caller).
    # This also allows support for Python lists or other sequences.
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Identify bins that have enough free space for the item.
    feasible = bins_remain_cap >= item

    # Initialise all priorities as -inf (worst possible).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Assign a uniform random priority to each feasible bin.
    if np.any(feasible):
        # Using a local Generator isolates the RNG state from global NumPy RNG.
        rng = np.random.default_rng()
        priorities[feasible] = rng.random(feasible.sum())

    return priorities
```
