```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic priority for online bin packing.

    The function assigns a higher priority to bins that will be left with
    less remaining capacity after the item is placed.  Bins that become
    (almost) perfectly full receive a huge bonus to force an exact fit.
    Infeasible bins are given a negative infinity priority to exclude
    them from consideration.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        An array of the same shape as ``bins_remain_cap`` containing
        priority scores.  Higher scores indicate more preferable bins.
    """
    # Ensure a NumPy array (handles list inputs, etc.)
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Compute leftover capacity after hypothetically placing the item.
    leftover = caps - item

    # Feasibility mask: True where the item fits.
    feasible = leftover >= 0

    # Start with a very low priority for all bins.
    priorities = np.full_like(caps, -np.inf, dtype=float)

    # For feasible bins, use the negative leftover as the base priority
    # (smaller leftover → higher priority).
    priorities[feasible] = -leftover[feasible]

    # Reward bins that become (almost) perfectly full.
    epsilon = 1e-9                     # tolerance for an “exact” fit
    exact_fit_bonus = 1e12              # huge positive boost
    exact_fit = feasible & np.isclose(leftover, 0.0, atol=epsilon)
    priorities[exact_fit] = exact_fit_bonus

    return priorities
```
