```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Exact Fit First priority.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array holding the remaining capacity of each existing bin.

    Returns
    -------
    np.ndarray
        Same shape as *bins_remain_cap*.  Bin indices with the largest value
        receive the item.  Bins that cannot accommodate *item* are marked
        with `-inf`.
    """
    # Start with an impossible low score; only bins that can accommodate the item
    # will be considered.
    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)

    # Bins that have enough space for the item
    can_fit = bins_remain_cap >= item

    # Exact fit gets the highest possible score.
    exact = can_fit & (bins_remain_cap == item)
    priorities[exact] = 1.0  # any positive value is fine

    # For the remaining fitting bins, favor the one that leaves the least
    # residual space after placing the item (i.e., “best fit”).
    other = can_fit & (~exact)
    priorities[other] = -(bins_remain_cap[other] - item)

    return priorities
```
