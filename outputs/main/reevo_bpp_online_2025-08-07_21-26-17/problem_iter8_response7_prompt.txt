{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    temperature: float = 1.0,\n    alpha: float = 0.5,\n    fit_weight: float = 1.0\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online bin\u2011packing problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of existing bins.\n    temperature : float, optional\n        Softmax temperature (>0). Small values make the selection more\n        deterministic; larger values yield a flatter distribution.\n    alpha : float, optional\n        Weight for the variance penalty. Larger values favour a more\n        balanced load across bins.\n    fit_weight : float, optional\n        Weight for the fit\u2011ratio term. Larger values give preference to\n        bins that fit the item tightly.\n\n    Returns\n    -------\n    np.ndarray\n        Priority values for each bin (same shape as ``bins_remain_cap``).\n        The values sum to 1 across feasible bins; infeasible bins have\n        priority 0.\n    \"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    n_bins = bins_remain_cap.size\n\n    if n_bins == 0:\n        return np.array([], dtype=float)\n\n    if temperature <= 0.0:\n        raise ValueError(\"temperature must be positive\")\n\n    # Feasibility mask\n    feasible = bins_remain_cap >= item\n\n    # No feasible bin -> zero priorities\n    if not feasible.any():\n        return np.zeros_like(bins_remain_cap)\n\n    # --- Component 1: leftover after placement ---\n    leftover = bins_remain_cap - item\n\n    # --- Component 2: fit ratio (larger is better) ---\n    with np.errstate(divide='ignore', invalid='ignore'):\n        fit_ratio = np.where(feasible, item / bins_remain_cap, 0.0)\n\n    # --- Component 3: variance after placement ---\n    total_sum = bins_remain_cap.sum()\n    total_sq_sum = np.square(bins_remain_cap).sum()\n    new_sum = total_sum - item  # total remaining capacity after placement\n\n    var_after = (\n        (total_sq_sum - 2.0 * item * bins_remain_cap + item ** 2) / n_bins\n        - (new_sum / n_bins) ** 2\n    )\n    var_after[~feasible] = 0.0\n\n    # --- Raw score: higher is better ---\n    raw = -leftover + fit_weight * fit_ratio - alpha * var_after\n    raw[~feasible] = -np.inf\n\n    # --- Softmax transformation ---\n    max_raw = raw[feasible].max()\n    exp_vals = np.exp((raw - max_raw) / temperature)\n    total_exp = exp_vals[feasible].sum()\n\n    if total_exp == 0.0:\n        # Fallback: uniform distribution over feasible bins\n        probs = np.zeros_like(bins_remain_cap)\n        probs[feasible] = 1.0 / feasible.sum()\n        return probs\n\n    probs = np.where(feasible, exp_vals / total_exp, 0.0)\n\n    return probs\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    epsilon: float = 0.02,\n    noise_scale: float = 1e-5,\n    alpha_fit: float = 10.0,\n    target_fit: float = 0.75,\n    alpha_waste: float = 12.0,\n    waste_target: float = 0.05,\n    alpha_used: float = 8.0,\n    used_target: float = 0.40,\n    random_state: Optional[int] = None,\n) -> np.ndarray:\n    \"\"\"\n    Compute a priority score for each open bin in an online Bin Packing problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array with the remaining free capacity of each currently open bin.\n    epsilon : float, optional\n        Probability of replacing the deterministic score with a random ranking\n        (\u03b5\u2011greedy exploration). Default 0.02.\n    noise_scale : float, optional\n        Scale of uniform additive noise used to break ties. Default 1e\u20115.\n    alpha_fit, target_fit : float, optional\n        Logistic parameters for the *fit\u2011ratio* component.\n        ``fit_ratio = item / remaining_capacity``.\n        The component is high when the ratio is near ``target_fit``.\n    alpha_waste, waste_target : float, optional\n        Logistic parameters for the *waste* component.\n        ``waste_norm = (remaining_capacity - item) / bin_capacity``.\n        The component is high when waste is below ``waste_target``.\n    alpha_used, used_target : float, optional\n        Logistic parameters for the *used\u2011fraction* component.\n        ``used_after = (capacity - remaining_capacity + item) / capacity``.\n        The component is high when the used fraction after placement is near\n        ``used_target``.\n    random_state : int or None, optional\n        Seed for the internal RNG. Useful for reproducibility.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher = better) for each bin. Infeasible bins receive\n        ``-np.inf`` so they will never be selected by ``np.argmax``.\n    \"\"\"\n    # Ensure a NumPy array of float64\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Edge case: no bins currently open\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n\n    # Feasibility mask\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        # No bin can accommodate the item \u2192 all scores -inf\n        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n\n    # Estimate the (static) bin capacity \u2013 the largest remaining capacity\n    bin_capacity = float(np.max(bins_remain_cap))\n    if bin_capacity <= 0.0:\n        # Defensive: all bins are full\n        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n\n    rng = np.random.default_rng(random_state)\n\n    # ------------------------------------------------------------------\n    # 1) Fit\u2011ratio component (item size relative to remaining capacity)\n    # ------------------------------------------------------------------\n    fit_ratio = np.zeros_like(bins_remain_cap, dtype=np.float64)\n    # compute only for feasible bins to avoid division by zero\n    np.divide(item, bins_remain_cap, out=fit_ratio, where=feasible)\n    # logistic: high when fit_ratio \u2248 target_fit (i.e., fills a good fraction)\n    fit_score = 1.0 / (1.0 + np.exp(-alpha_fit * (fit_ratio - target_fit)))\n\n    # ------------------------------------------------------------------\n    # 2) Waste component (leftover capacity after placement)\n    # ------------------------------------------------------------------\n    waste_norm = np.clip((bins_remain_cap - item) / bin_capacity, 0.0, 1.0)\n    # logistic decreasing: small waste \u2192 high score\n    waste_score = 1.0 / (1.0 + np.exp(alpha_waste * (waste_norm - waste_target)))\n\n    # ------------------------------------------------------------------\n    # 3) Used\u2011fraction component (how much of the bin will be occupied)\n    # ------------------------------------------------------------------\n    used_before = (bin_capacity - bins_remain_cap) / bin_capacity\n    used_after = np.clip(used_before + item / bin_capacity, 0.0, 1.0)\n    used_score = 1.0 / (1.0 + np.exp(-alpha_used * (used_after - used_target)))\n\n    # ------------------------------------------------------------------\n    # Combine components multiplicatively (stronger signal)\n    # ------------------------------------------------------------------\n    combined_score = fit_score * waste_score * used_score\n\n    # Infeasible bins must be penalised with -inf (they will never be chosen)\n    combined_score[~feasible] = -np.inf\n\n    # ------------------------------------------------------------------\n    # Small deterministic tie\u2011breaker (bin index)\n    # ------------------------------------------------------------------\n    tie_breaker = np.arange(bins_remain_cap.shape[0], dtype=np.float64) * 1e-12\n    combined_score += tie_breaker\n\n    # ------------------------------------------------------------------\n    # Add exploration noise\n    # ------------------------------------------------------------------\n    if noise_scale > 0.0:\n        noise = rng.random(bins_remain_cap.shape) * noise_scale\n        combined_score[feasible] += noise[feasible]\n\n    # ------------------------------------------------------------------\n    # \u03b5\u2011greedy exploration: with probability epsilon replace scores by random\n    # ------------------------------------------------------------------\n    if epsilon > 0.0 and rng.random() < epsilon:\n        # Random ranking only for feasible bins\n        random_scores = np.full_like(combined_score, -np.inf, dtype=np.float64)\n        random_scores[feasible] = rng.random(np.count_nonzero(feasible))\n        combined_score = random_scores\n\n    return combined_score\n\n[Reflection]\nLogistic fit/waste targets, multiply scores, tie\u2011breaker, random noise, \u03b5\u2011greedy, enforce feasibility mask.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}