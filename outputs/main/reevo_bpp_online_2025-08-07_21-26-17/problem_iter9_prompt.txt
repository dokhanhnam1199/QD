{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\n1. Score feasible bins via normalized leftover, fit\u2011ratio, variance; linear weight or softmax with temperature.  \n2. Use bounded sigmoid, adapt steepness to variance.  \n3. Mask infeasibles early.  \n4. Add tiny noise\u202f+\u202f\u03b5\u2011greedy (\u22480.01).  \n5. Pre\u2011compute masks, vectorize, tune alphas offline; avoid large exact\u2011fit bonuses.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                *, random_state: Optional[int] = None,\n                epsilon_min: float = 0.05,\n                epsilon_max: float = 0.25) -> np.ndarray:\n    \"\"\"\n    Adaptive priority for online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n    random_state : int or None, optional\n        Seed for reproducibility.\n    epsilon_min, epsilon_max : float, optional\n        Bounds for the exploration probability epsilon.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores; infeasible bins receive -np.inf.\n    \"\"\"\n    # Ensure array\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Feasibility mask\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n\n    # Leftover after placing the item\n    leftover = bins_remain_cap - item\n\n    # Base score: tight fits get higher values\n    eps = 1e-12  # avoid division by zero\n    base = np.zeros_like(bins_remain_cap, dtype=np.float64)\n    base[feasible] = 1.0 / (leftover[feasible] + eps)\n\n    # Adaptive exploration rate based on variance of leftover space\n    lo = leftover[feasible]\n    var = np.var(lo)\n    L = np.max(lo)\n    var_norm = 0.0\n    if L > 0:\n        var_max = (L ** 2) / 4.0  # max variance in [0, L]\n        var_norm = np.clip(var / var_max, 0.0, 1.0)\n\n    epsilon = epsilon_min + (epsilon_max - epsilon_min) * (1.0 - var_norm)\n\n    # Random exploration component\n    rng = np.random.default_rng(random_state)\n    random_score = rng.random(bins_remain_cap.shape)\n\n    # Combine exploitation (tight\u2011fit) and exploration (random)\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    priorities[feasible] = (1.0 - epsilon) * base[feasible] + epsilon * random_score[feasible]\n\n    # Deterministic tie\u2011breaker: very small incremental value\n    priorities += np.arange(bins_remain_cap.size, dtype=np.float64) * 1e-12\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}