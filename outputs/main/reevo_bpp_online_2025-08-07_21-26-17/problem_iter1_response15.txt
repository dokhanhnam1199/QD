```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Inverse Distance (Proximity Fit) priority for online Bin Packing.

    For each bin we compute how tightly the item would fit:
        - If the item fits (remaining capacity ≥ item), priority = 1 / (remaining‑after + ε)
          where *remaining‑after* is the free space left after placing the item.
          Smaller leftover ⇒ larger priority, i.e. a tighter fit.
        - If the item does **not** fit, the bin receives a very low priority so it
          will never be selected.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array of remaining capacities of the current bins.

    Returns:
        A NumPy array of the same shape as ``bins_remain_cap`` containing the
        priority score for each bin.
    """
    eps = 1e-12                     # avoid division by zero for perfect fits
    remaining_after = bins_remain_cap - item

    # Feasibility mask (True where the item fits)
    feasible = remaining_after >= 0

    # Inverse distance priority for feasible bins; -inf for infeasible bins
    priorities = np.where(
        feasible,
        1.0 / (remaining_after + eps),
        -np.inf
    )
    return priorities
```
