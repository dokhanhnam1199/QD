{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Return a priority array for each bin following the Worst\u2011Fit strategy.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be inserted.\n    bins_remain_cap : np.ndarray\n        Remaining capacities for each bin. Expected to be non\u2011negative numeric values.\n\n    Returns\n    -------\n    np.ndarray\n        Array of scores with the same shape as ``bins_remain_cap``. The bin with\n        the maximum score will be chosen. Bins that cannot hold the item are\n        assigned a priority of -\u221e, effectively removing them from consideration.\n\n    Notes\n    -----\n    The priority is simply the amount of space that will remain after the\n    item is placed in each bin. The index with the largest residual space\n    gets the highest priority \u2013 the hallmark of the Worst\u2011Fit heuristic.\n    \"\"\"\n    # Convert to float to avoid integer overflow/underflow when subtracting\n    remain = bins_remain_cap.astype(float, copy=False) - item\n    # Bins that can't accept the item get -infinity priority\n    return np.where(remain >= 0, remain, -np.inf)\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    First\u2011Fit priority for the online Bin Packing Problem.\n\n    The function assigns a higher score to bins with smaller indices that can\n    accommodate the incoming item, mimicking the classic First\u2011Fit rule:\n    the first (i.e., lowest\u2011index) feasible bin is preferred. Infeasible bins\n    receive a score of -inf so they are never selected.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities of the current bins.\n\n    Returns:\n        A 1\u2011D array of priority scores \u2013 the bin with the largest score will be\n        chosen for the item.\n    \"\"\"\n    # Number of existing bins\n    n_bins = bins_remain_cap.shape[0]\n\n    # Initialise all priorities as -inf (unfeasible)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    # Mask of bins that can actually hold the item\n    feasible = bins_remain_cap >= item\n\n    # Preference strictly follows the bin index: smaller index \u2192 higher priority.\n    # Using -index gives 0 for the first bin, -1 for the second, etc.\n    # This ordering guarantees First\u2011Fit behaviour.\n    indices = np.arange(n_bins)\n    priorities[feasible] = -indices[feasible]\n\n    # Optional tiny tie\u2011breaker based on leftover space (does not affect the\n    # strict First\u2011Fit order but prefers tighter fits when indices are equal).\n    # slack = bins_remain_cap[feasible] - item\n    # priorities[feasible] -= 1e-6 * slack\n\n    return priorities\n\n[Reflection]\nBlend index ordering with residual capacity; weight feasibility, add tiny tie\u2011breakers, and adjust thresholds as load changes.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}