{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for each bin for online bin packing.\n    Bins with higher scores are more desirable for the incoming item.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacity of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; higher scores indicate more desirable bins.\n    \"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item\n    can_fit = bins_remain_cap >= item\n    if not np.any(can_fit):\n        return np.zeros_like(bins_remain_cap)\n\n    # Approximate original bin capacity from the largest remaining capacity\n    bin_capacity = np.max(bins_remain_cap[can_fit])\n\n    # Remaining capacity after placing the item\n    leftover = bins_remain_cap - item\n\n    # Normalized leftover fraction for feasible bins\n    leftover_frac = leftover[can_fit] / bin_capacity\n\n    # Sigmoid function to score waste (small leftover \u2192 high score)\n    k_waste = 12.0\n    waste_sigmoid = 1.0 / (1.0 + np.exp(k_waste * (leftover_frac - 0.5)))\n\n    # Fit ratio: how much of the bin's remaining capacity the item consumes\n    fit_ratio = item / (bins_remain_cap[can_fit] + 1e-12)\n\n    # Base priority for feasible bins\n    base_priority = np.zeros_like(bins_remain_cap)\n    base_priority[can_fit] = fit_ratio * waste_sigmoid\n\n    # Forecast next item size (heuristic: 80\u202f% of the current item)\n    next_item_est = item * 0.8\n\n    # Penalize bins that leave too much leftover compared to the forecast\n    future_penalty = 1.0 / (1.0 + np.exp(10.0 * (leftover[can_fit] - next_item_est)))\n    base_priority[can_fit] *= future_penalty\n\n    # Boost exact\u2011fit bins\n    exact_fit = np.logical_and(can_fit, np.isclose(leftover, 0.0, atol=1e-8))\n    base_priority[exact_fit] *= 1.5\n\n    # Dynamic exploration\u2013exploitation trade\u2011off\n    min_left = np.min(leftover[can_fit])\n    max_left = np.max(leftover[can_fit])\n    dynamic_eps = np.clip(\n        0.05 + 0.85 * (max_left - min_left) / (max_left + 1e-12),\n        0.05,\n        0.9,\n    )\n\n    rng = np.random.default_rng()\n    noise = rng.normal(scale=1e-6, size=bins_remain_cap.shape)\n\n    # Softmax with temperature to bias low waste\n    temperature = 0.3\n    raw_scores = base_priority + noise\n    exp_scores = np.exp(raw_scores / temperature)\n    exp_scores[~can_fit] = 0.0\n    softmax_scores = exp_scores / np.sum(exp_scores)\n\n    # Random exploration component\n    random_scores = rng.random(bins_remain_cap.shape)\n\n    final_scores = (1.0 - dynamic_eps) * softmax_scores + dynamic_eps * random_scores\n    final_scores[~can_fit] = 0.0\n\n    return final_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute deterministic priority scores for an online bin\u2011packing decision.\n\n    The heuristic prefers bins that will be left with the smallest remaining\n    capacity after the item is placed. Bins that become (almost) perfectly full\n    receive a huge bonus to encourage exact fits. Infeasible bins are assigned\n    a very low (negative\u2011infinite) priority, effectively removing them from\n    consideration.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacities of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        An array of the same shape as ``bins_remain_cap`` containing priority\n        scores. Higher scores indicate a more preferred bin.\n    \"\"\"\n    # Ensure a NumPy float array (handles list inputs, etc.).\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Remaining capacity after hypothetically placing the item.\n    leftover = caps - item\n\n    # Feasibility mask: True where the item fits.\n    feasible = leftover >= 0\n\n    # Initialise all priorities to a very low value (heavy penalty for infeasibility).\n    priorities = np.full_like(caps, -np.inf, dtype=float)\n\n    # Base priority: the smaller the leftover, the larger the priority.\n    # Using the negative leftover converts a minimisation objective into a\n    # maximisation one.\n    priorities[feasible] = -leftover[feasible]\n\n    # Reward bins that become (almost) perfectly full.\n    epsilon = 1e-6                # tolerance for an \u201cexact\u201d fit\n    exact_fit_bonus = 1e9         # large positive boost\n    exact_fit = feasible & (leftover <= epsilon)\n    priorities[exact_fit] = exact_fit_bonus\n\n    return priorities\n\n[Reflection]\nPrefer deterministic scoring: minimize leftover, huge exact\u2011fit bonus, heavy penalty for infeasibility, avoid random noise.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}