{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global constants (tuned offline)\nCAP = 1.0            # Bin capacity (assumed 1.0 for normalized terms)\nK_BASE = 10.0        # Base steepness for the variance\u2011adapted sigmoid\nVAR_MAX = 0.25       # Max variance for a uniform [0,1] distribution\nEPSILON = 0.01       # Exploration probability for \u03b5\u2011greedy\nHUGE_BONUS = 1e6     # Exact\u2011fit bonus\n\n    \"\"\"\n    Priority scores for online bin\u2011packing with variance\u2011adapted sigmoids,\n    product scoring, exact\u2011fit bonus, and \u03b5\u2011greedy exploration.\n    Feasible bins receive a finite score; infeasible bins get -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher = more desirable).  Infeasible bins receive\n        ``-np.inf`` so they are never selected.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    feasible = caps >= item\n    n_bins = caps.shape[0]\n\n    # Return -inf for all bins if none can accommodate the item\n    if not np.any(feasible):\n        return np.full(n_bins, -np.inf, dtype=float)\n\n    # Remaining capacity after placing the item\n    leftover = caps - item\n\n    # Basic terms (all lie in [0,1] because CAP == 1.0)\n    norm_leftover = np.where(feasible, leftover / CAP, 0.0)\n    fit_ratio    = np.where(feasible, item / CAP, 0.0)\n    usage_after  = np.where(feasible, 1.0 - leftover / CAP, 0.0)\n\n    def sigmoid_term(term_arr: np.ndarray) -> np.ndarray:\n        \"\"\"Variance\u2011adapted sigmoid centered at 0.5.\"\"\"\n        # Compute variance only over feasible bins\n        if np.any(feasible):\n            var = np.var(term_arr[feasible])\n        else:\n            var = 0.0\n        var_norm = min(var / VAR_MAX, 1.0)\n        k = K_BASE * (1.0 - var_norm)  # lower variance \u2192 steeper sigmoid\n        return 1.0 / (1.0 + np.exp(-k * (term_arr - 0.5)))\n\n    # Sigmoid transforms for each term\n    sig_leftover = sigmoid_term(norm_leftover)\n    sig_fit      = sigmoid_term(fit_ratio)\n    sig_usage    = sigmoid_term(usage_after)\n\n    # Product of weighted sigmoid scores (weights are exponents; tuned offline)\n    weighted_score = (sig_leftover ** 1.0) * \\\n                     (sig_fit     ** 1.0) * \\\n                     (sig_usage   ** 1.0)\n\n    # Add a huge bonus for exact\u2011fit placements\n    exact_fit_mask = feasible & np.isclose(leftover, 0.0, atol=1e-9)\n    weighted_score[exact_fit_mask] += HUGE_BONUS\n\n    # \u03b5\u2011greedy exploration: mix with uniform random scores\n    rng = np.random.default_rng()\n    random_score = rng.random(n_bins)\n    final_score = (1.0 - EPSILON) * weighted_score + EPSILON * random_score\n\n    # Ensure infeasible bins are never chosen\n    final_score[~feasible] = -np.inf\n\n    return final_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                bins_remain_cap,\n                *,\n                capacity: float | None = None,\n                epsilon: float = 0.05,\n                noise_scale: float = 1e-4,\n                alpha_fit: float = 12.0,\n                target_fit: float = 0.80,\n                alpha_waste: float = 12.0,\n                waste_target: float = 0.07,\n                alpha_used: float = 10.0,\n                used_target: float = 0.40,\n                weight_fit: float = 1.0,\n                weight_waste: float = 1.0,\n                weight_used: float = 1.0) -> np.ndarray:\n    \"\"\"\n    Compute a priority score for each open bin in online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item (0 < item \u2264 bin capacity).\n    bins_remain_cap : array_like\n        1\u2011D array of remaining capacities of the currently open bins.\n    capacity : float, optional\n        Explicit bin capacity.  If None, it is estimated from the\n        maximum remaining capacity observed among open bins.\n    epsilon : float, optional\n        Probability of selecting a random feasible bin instead of the\n        deterministic ranking.\n    noise_scale : float, optional\n        Standard deviation of a small uniform noise added to the scores\n        to break ties.\n    alpha_fit, target_fit : float, optional\n        Sigmoid parameters for the *fit ratio* component.\n    alpha_waste, waste_target : float, optional\n        Sigmoid parameters for the *waste* component.\n    alpha_used, used_target : float, optional\n        Sigmoid parameters for the *used\u2011fraction* component.\n    weight_fit, weight_waste, weight_used : float, optional\n        Exponential weights applied to the three components when\n        combining them into the final score.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores; higher is better.  Bins that cannot accommodate\n        the item receive ``-np.inf``.\n    \"\"\"\n    # Ensure numpy array\n    bins = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    if bins.size == 0:\n        return np.array([], dtype=np.float64)\n\n    # Feasible bins: capacity must be >= item and non\u2011negative\n    feasible = (bins >= item) & (bins >= 0.0)\n    if not np.any(feasible):\n        # No bin can fit the item\n        return np.full_like(bins, -np.inf, dtype=np.float64)\n\n    # Estimate the bin capacity if not provided\n    if capacity is None:\n        capacity = float(np.max(bins))\n        if capacity <= 0.0:\n            capacity = 1.0  # fallback to avoid division by zero\n\n    # 1) Fit\u2011ratio component\n    fit_ratio = np.zeros_like(bins)\n    np.divide(item, bins, out=fit_ratio, where=feasible)\n    fit_score = 1.0 / (1.0 + np.exp(-alpha_fit * (fit_ratio - target_fit)))\n\n    # 2) Waste component\n    waste = bins - item\n    waste_norm = np.clip(waste / capacity, 0.0, 1.0)\n    waste_score = 1.0 / (1.0 + np.exp(alpha_waste * (waste_norm - waste_target)))\n\n    # 3) Used\u2011fraction component\n    used_fraction = (capacity - bins) / capacity\n    used_score = 1.0 / (1.0 + np.exp(-alpha_used * (used_fraction - used_target)))\n\n    # Combine with weighted product\n    combined_score = (fit_score ** weight_fit) * \\\n                     (waste_score ** weight_waste) * \\\n                     (used_score ** weight_used)\n\n    # Add exploration noise\n    rng = np.random.default_rng()\n    if noise_scale > 0.0:\n        noise = rng.random(bins.shape) * noise_scale\n        combined_score += noise\n\n    # \u03b5\u2011greedy exploration\n    if epsilon > 0.0 and rng.random() < epsilon:\n        random_score = rng.random(bins.shape)\n        random_score[~feasible] = -np.inf\n        return random_score\n\n    # Mask infeasible bins\n    combined_score[~feasible] = -np.inf\n    return combined_score\n\n[Reflection]\nAdapt sigmoid steepness to data variance, tune component targets, add small noise for tie\u2011breaking, and use \u03b5\u2011greedy.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}