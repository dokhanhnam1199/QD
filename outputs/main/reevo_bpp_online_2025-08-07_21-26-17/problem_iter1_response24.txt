```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function using the Exact Fit First strategy.

    The strategy first looks for a bin that can accommodate the item with zero
    leftover capacity (exact fit).  If such a bin exists it will receive the
    highest priority.  If no exact fit exists, the bin with the smallest
    remaining leftover after placement is preferred.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array containing the remaining capacity of each bin.

    Returns:
        An array of the same shape as bins_remain_cap containing the
        priority scores for each bin.  Larger values correspond to higher
        priority.  Bins that cannot accommodate the item are assigned a very
        low (negative infinite) score.
    """
    # Compute space that would remain if the item were placed into each bin
    # Bins that can't hold the item get a score of -∞ so they are never selected.
    remaining_after = bins_remain_cap - item
    fits = remaining_after >= 0

    # The priority is higher for smaller remaining capacity:
    #  - 0  -> priority 0 (exact fit)
    #  > 0 -> priority negative (but less negative is better)
    priority_scores = np.where(
        fits,
        -remaining_after,   # exact fit gives 0, looser fit gives negative values
        -np.inf             # cannot fit -> discard
    )

    return priority_scores
```
