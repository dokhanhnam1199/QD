{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                bins_remain_cap,\n                *,\n                capacity: float | None = None,\n                epsilon: float = 0.05,\n                noise_scale: float = 1e-4,\n                alpha_fit: float = 12.0,\n                target_fit: float = 0.80,\n                alpha_waste: float = 12.0,\n                waste_target: float = 0.07,\n                alpha_used: float = 10.0,\n                used_target: float = 0.40,\n                weight_fit: float = 1.0,\n                weight_waste: float = 1.0,\n                weight_used: float = 1.0) -> np.ndarray:\n    \"\"\"\n    Compute a priority score for each open bin in online bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item (0 < item \u2264 bin capacity).\n    bins_remain_cap : array_like\n        1\u2011D array of remaining capacities of the currently open bins.\n    capacity : float, optional\n        Explicit bin capacity.  If None, it is estimated from the\n        maximum remaining capacity observed among open bins.\n    epsilon : float, optional\n        Probability of selecting a random feasible bin instead of the\n        deterministic ranking.\n    noise_scale : float, optional\n        Standard deviation of a small uniform noise added to the scores\n        to break ties.\n    alpha_fit, target_fit : float, optional\n        Sigmoid parameters for the *fit ratio* component.\n    alpha_waste, waste_target : float, optional\n        Sigmoid parameters for the *waste* component.\n    alpha_used, used_target : float, optional\n        Sigmoid parameters for the *used\u2011fraction* component.\n    weight_fit, weight_waste, weight_used : float, optional\n        Exponential weights applied to the three components when\n        combining them into the final score.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores; higher is better.  Bins that cannot accommodate\n        the item receive ``-np.inf``.\n    \"\"\"\n    # Ensure numpy array\n    bins = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    if bins.size == 0:\n        return np.array([], dtype=np.float64)\n\n    # Feasible bins: capacity must be >= item and non\u2011negative\n    feasible = (bins >= item) & (bins >= 0.0)\n    if not np.any(feasible):\n        # No bin can fit the item\n        return np.full_like(bins, -np.inf, dtype=np.float64)\n\n    # Estimate the bin capacity if not provided\n    if capacity is None:\n        capacity = float(np.max(bins))\n        if capacity <= 0.0:\n            capacity = 1.0  # fallback to avoid division by zero\n\n    # 1) Fit\u2011ratio component\n    fit_ratio = np.zeros_like(bins)\n    np.divide(item, bins, out=fit_ratio, where=feasible)\n    fit_score = 1.0 / (1.0 + np.exp(-alpha_fit * (fit_ratio - target_fit)))\n\n    # 2) Waste component\n    waste = bins - item\n    waste_norm = np.clip(waste / capacity, 0.0, 1.0)\n    waste_score = 1.0 / (1.0 + np.exp(alpha_waste * (waste_norm - waste_target)))\n\n    # 3) Used\u2011fraction component\n    used_fraction = (capacity - bins) / capacity\n    used_score = 1.0 / (1.0 + np.exp(-alpha_used * (used_fraction - used_target)))\n\n    # Combine with weighted product\n    combined_score = (fit_score ** weight_fit) * \\\n                     (waste_score ** weight_waste) * \\\n                     (used_score ** weight_used)\n\n    # Add exploration noise\n    rng = np.random.default_rng()\n    if noise_scale > 0.0:\n        noise = rng.random(bins.shape) * noise_scale\n        combined_score += noise\n\n    # \u03b5\u2011greedy exploration\n    if epsilon > 0.0 and rng.random() < epsilon:\n        random_score = rng.random(bins.shape)\n        random_score[~feasible] = -np.inf\n        return random_score\n\n    # Mask infeasible bins\n    combined_score[~feasible] = -np.inf\n    return combined_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                bins_remain_cap: np.ndarray,\n                *,\n                epsilon: float = 0.05,\n                noise_scale: float = 1e-4,\n                alpha_fit: float = 12.0,\n                target_fit: float = 0.80,\n                alpha_waste: float = 12.0,\n                waste_target: float = 0.07,\n                alpha_used: float = 10.0,\n                used_target: float = 0.40,\n                temperature: float | None = None) -> np.ndarray:\n    \"\"\"\n    Priority function for online bin packing that combines multiple\n    sigmoid\u2011based criteria, optional noise, \u03b5\u2011greedy exploration and an\n    optional temperature\u2011scaled softmax.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities in the currently open bins.\n    epsilon : float, default 0.05\n        Probability of selecting a completely random feasible bin\n        (\u03b5\u2011greedy exploration).\n    noise_scale : float, default 1e-4\n        Scale of the uniform noise added to the raw scores. The noise\n        magnitude is attenuated by (1\u2011fit_ratio) so that bins that\n        almost perfectly fit the item receive less random perturbation.\n    alpha_fit, target_fit : float, default 12.0, 0.80\n        Parameters of the sigmoid used to score the fit\u2011ratio\n        (item / remaining_capacity).\n    alpha_waste, waste_target : float, default 12.0, 0.07\n        Parameters of the sigmoid used to score the waste\n        (remaining_capacity - item).\n    alpha_used, used_target : float, default 10.0, 0.40\n        Parameters of the sigmoid used to score the used\u2011fraction\n        ((max_capacity - remaining_capacity) / max_capacity).\n    temperature : float or None, default None\n        If provided, the final scores are passed through a\n        temperature\u2011scaled softmax so that they sum to one.\n        If ``None`` the raw scores are returned.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (higher is better).  Feasible\n        bins receive a value in [0,1] (or a probability when\n        ``temperature`` is set).  Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Input validation\n    if bins_remain_cap.ndim != 1:\n        raise ValueError(\"bins_remain_cap must be a 1\u2011D array\")\n    if item <= 0:\n        raise ValueError(\"item size must be positive\")\n    if not 0 <= epsilon <= 1:\n        raise ValueError(\"epsilon must be between 0 and 1\")\n    if noise_scale < 0:\n        raise ValueError(\"noise_scale must be non\u2011negative\")\n    if temperature is not None and temperature <= 0:\n        raise ValueError(\"temperature must be positive if provided\")\n\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n\n    # Feasible bins mask\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        # No bin can accommodate the item\n        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n\n    # Estimate of the maximum capacity among current bins\n    max_capacity = bins_remain_cap.max()\n\n    # Compute individual components\n    # 1. Fit ratio\n    fit_ratio = np.empty_like(bins_remain_cap)\n    np.divide(item, bins_remain_cap, out=fit_ratio, where=feasible)\n    fit_ratio = np.clip(fit_ratio, 0.0, 1.0)\n    fit_score = 1.0 / (1.0 + np.exp(-alpha_fit * (fit_ratio - target_fit)))\n    fit_score[~feasible] = 0.0\n\n    # 2. Waste component\n    waste = bins_remain_cap - item\n    waste_norm = np.clip(waste / max_capacity, 0.0, 1.0)\n    waste_score = 1.0 / (1.0 + np.exp(alpha_waste * (waste_norm - waste_target)))\n    waste_score[~feasible] = 0.0\n\n    # 3. Used\u2011fraction component\n    used_fraction = (max_capacity - bins_remain_cap) / max_capacity\n    used_fraction = np.clip(used_fraction, 0.0, 1.0)\n    used_score = 1.0 / (1.0 + np.exp(-alpha_used * (used_fraction - used_target)))\n    used_score[~feasible] = 0.0\n\n    # Combined raw priority\n    priorities = fit_score * waste_score * used_score\n\n    # Add random noise to break ties and add exploration\n    rng = np.random.default_rng()\n    if noise_scale > 0.0:\n        noise = rng.uniform(-noise_scale, noise_scale, size=priorities.shape)\n        # Dampen noise for bins that already have a good fit\n        noise *= (1.0 - fit_ratio)\n        priorities += noise\n\n    # \u03b5\u2011greedy: with probability epsilon, choose a random feasible bin\n    if rng.random() < epsilon:\n        random_scores = rng.random(size=priorities.shape)\n        random_scores[~feasible] = -np.inf\n        priorities = random_scores\n\n    # Set infeasible bins to -inf\n    priorities[~feasible] = -np.inf\n\n    # Optional temperature\u2011scaled softmax\n    if temperature is not None:\n        feasible_scores = priorities[feasible]\n        if feasible_scores.size > 0:\n            max_score = feasible_scores.max()\n            exp_scores = np.exp((feasible_scores - max_score) / temperature)\n            prob_scores = exp_scores / exp_scores.sum()\n            priorities[feasible] = prob_scores\n\n    return priorities\n\n[Reflection]\nPrefer vectorized ops, mask infeasible bins early, clip ratios, use bounded sigmoid scores, add scaled noise, optional temperature softmax.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}