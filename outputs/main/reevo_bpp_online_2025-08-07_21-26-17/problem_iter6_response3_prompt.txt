{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for each bin in an online Bin Packing Problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; higher scores indicate more desirable bins.\n    \"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    leftover = bins_remain_cap - item\n    feasible = leftover >= 0\n\n    # If no bin can accommodate the item, return zeros (caller may open a new bin)\n    if not np.any(feasible):\n        return np.zeros_like(bins_remain_cap)\n\n    # Normalized leftover: fraction of bin remaining after placing the item\n    normalized_leftover = np.where(feasible, leftover / (bins_remain_cap + 1e-12), np.nan)\n\n    # Sigmoid transform with variance\u2011adapted steepness\n    var = np.var(normalized_leftover[feasible]) if np.any(feasible) else 0.0\n    base_steepness = 10.0\n    steepness = base_steepness / (1.0 + var)\n    mu = 0.3  # pivot for the sigmoid\n    sigmoid_score = np.where(\n        feasible,\n        1.0 / (1.0 + np.exp(steepness * (normalized_leftover - mu))),\n        0.0,\n    )\n\n    # Fit score: tighter fits get higher value\n    fit_score = np.where(feasible, 1.0 - normalized_leftover, 0.0)\n\n    # Usage score: fraction of the bin's remaining capacity that will be used\n    usage_score = np.where(\n        feasible, item / (bins_remain_cap + item + 1e-12), 0.0\n    )\n\n    # Combine scores\n    alpha_fit = 0.5\n    alpha_sig = 0.3\n    alpha_use = 0.2\n    raw_score = alpha_fit * fit_score + alpha_sig * sigmoid_score + alpha_use * usage_score\n\n    # Exact\u2011fit bonus\n    exact_fit_bonus = 1e6\n    raw_score = np.where(\n        (feasible) & np.isclose(leftover, 0.0, atol=1e-9),\n        raw_score + exact_fit_bonus,\n        raw_score,\n    )\n\n    # Forecast next item (assume same size as current)\n    next_item_estimate = item\n    forecast_leftover = leftover - next_item_estimate\n    forecast_feasible = forecast_leftover >= 0\n    alpha_forecast = 0.2\n    forecast_score = np.where(\n        forecast_feasible,\n        1.0 - (forecast_leftover / (bins_remain_cap + 1e-12)),\n        0.0,\n    )\n    big_penalty = 1e5\n    raw_score = np.where(\n        feasible,\n        np.where(\n            forecast_feasible,\n            raw_score - alpha_forecast * forecast_score,\n            raw_score - big_penalty,\n        ),\n        raw_score,\n    )\n\n    # Convert raw scores to probabilities via softmax (low temperature)\n    raw_score = np.where(feasible, raw_score, -np.inf)\n    max_raw = np.max(raw_score)\n    # Temperature T\n    T = 0.1\n    exp_shift = np.exp((raw_score - max_raw) / T)\n    sum_exp = np.sum(exp_shift)\n    probs = np.where(sum_exp > 0, exp_shift / sum_exp, np.zeros_like(exp_shift))\n\n    # Tiny deterministic tie\u2011breaker\n    tie_breaker = np.arange(len(bins_remain_cap), dtype=float) * 1e-9\n    probs += tie_breaker\n\n    # \u03b5\u2011greedy component\n    epsilon = 0.15\n    rng = np.random.default_rng()\n    random_component = rng.random(len(bins_remain_cap))\n    # Ensure infeasible bins are not selected via randomness\n    random_component = np.where(feasible, random_component, 0.0)\n\n    final_priority = (1.0 - epsilon) * probs + epsilon * random_component\n\n    return final_priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global epsilon controlling the exploration vs. exploitation balance.\n_EPSILON = 0.15  # Typical values: 0.0 (pure greedy) to 1.0 (pure random).\n\n    \"\"\"\n    Compute a priority score for each bin using an epsilon\u2011greedy strategy.\n\n    The function prefers bins that fit the item tightly (exploitation) while\n    preserving a chance of exploring sub\u2011optimal bins (exploration) by blending\n    a random component weighted by epsilon.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacity of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; higher scores indicate more desirable bins.\n    \"\"\"\n    # Ensure input is a NumPy array of floats.\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    can_fit = bins_remain_cap >= item\n\n    # --- Exploitation component ------------------------------------------------\n    # Preference for tighter fits: smaller leftover space => larger priority.\n    # Inverse of leftover space is used; a tiny epsilon avoids division by zero.\n    leftover = bins_remain_cap - item\n    base_priority = np.where(\n        can_fit,\n        1.0 / (leftover + 1e-12),\n        0.0\n    )\n\n    # --- Exploration component -------------------------------------------------\n    # Random scores to enable exploration of less obvious bins.\n    rng = np.random.default_rng()\n    random_priority = rng.random(bins_remain_cap.shape)\n\n    # --- Blend the two components -----------------------------------------------\n    # (1 - epsilon) weight for exploitation, epsilon weight for exploration.\n    blended_priority = (1.0 - _EPSILON) * base_priority + _EPSILON * random_priority\n\n    # Bins that cannot fit the item should be assigned zero priority to never be selected.\n    priorities = np.where(can_fit, blended_priority, 0.0)\n\n    return priorities\n\n[Reflection]\nSimplify priority: inverse leftover, epsilon\u2011greedy randomness, drop softmax, avoid forecast, prune infeasible bins, test linear combos.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}