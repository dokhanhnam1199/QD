```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    First‑Fit priority for the online Bin Packing Problem.

    The function assigns a higher score to bins with smaller indices that can
    accommodate the incoming item, mimicking the classic First‑Fit rule:
    the first (i.e., lowest‑index) feasible bin is preferred. Infeasible bins
    receive a score of -inf so they are never selected.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array of remaining capacities of the current bins.

    Returns:
        A 1‑D array of priority scores – the bin with the largest score will be
        chosen for the item.
    """
    # Number of existing bins
    n_bins = bins_remain_cap.shape[0]

    # Initialise all priorities as -inf (unfeasible)
    priorities = np.full(n_bins, -np.inf, dtype=float)

    # Mask of bins that can actually hold the item
    feasible = bins_remain_cap >= item

    # Preference strictly follows the bin index: smaller index → higher priority.
    # Using -index gives 0 for the first bin, -1 for the second, etc.
    # This ordering guarantees First‑Fit behaviour.
    indices = np.arange(n_bins)
    priorities[feasible] = -indices[feasible]

    # Optional tiny tie‑breaker based on leftover space (does not affect the
    # strict First‑Fit order but prefers tighter fits when indices are equal).
    # slack = bins_remain_cap[feasible] - item
    # priorities[feasible] -= 1e-6 * slack

    return priorities
```
