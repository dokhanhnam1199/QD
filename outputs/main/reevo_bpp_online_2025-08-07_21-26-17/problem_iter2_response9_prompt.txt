{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Random Fit priority for online Bin Packing.\n\n    Each bin that can accommodate ``item`` receives a random score drawn\n    from a uniform distribution on [0, 1). Bins that cannot fit the item are\n    assigned ``-np.inf`` so they will never be selected as the highest priority.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of all current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Array of same shape as ``bins_remain_cap`` with a priority score for\n        each bin. The bin with the largest value will be chosen.\n    \"\"\"\n    # Identify bins that can host the item.\n    viable = bins_remain_cap >= item\n\n    # Initialize all priorities to -inf (i.e., infeasible bins).\n    priorities = np.full_like(bins_remain_cap, fill_value=-np.inf, dtype=float)\n\n    # Assign a random priority to each feasible bin.\n    # Using np.random.random ensures a fresh random draw each call.\n    priorities[viable] = np.random.random(size=viable.sum())\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Softmax\u2011Based priority for online bin packing.\n    \n    If the item fits into a bin, we compute the remaining free space after placing\n    the item and use a negative sign to prefer bins with small leftover.\n    The final priority is the exponential of these scores (softmax style);\n    bins that cannot accommodate the item receive a score of zero.\n    \n    Parameters\n    ----------\n    item : float\n        Size of the item to be packed.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the current free capacity in each bin.\n    \n    Returns\n    -------\n    np.ndarray\n        Same shape as ``bins_remain_cap`` with a priority value for each bin.\n        The highest priority bin will be chosen.\n    \"\"\"\n    # Bins that can accept the item\n    can_fit = bins_remain_cap >= item\n    \n    # Remaining free space if the item were placed\n    leftover = bins_remain_cap - item\n    \n    # Create scores: use -leftover for bins that can fit, -inf otherwise\n    scores = np.where(can_fit, -leftover, -np.inf)\n    \n    # Shift scores for numerical stability and apply exp\n    finite = np.isfinite(scores)\n    if finite.any():\n        max_score = np.max(scores[finite])\n        shifted = np.where(finite, scores - max_score, scores)\n        priorities = np.where(finite, np.exp(shifted), 0.0)\n    else:\n        # No bin can fit: give zero priority to all bins\n        priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    return priorities\n\n[Reflection]\nScore bins by negative leftover, apply softmax, avoid randomness, consider future items, balance load across bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}