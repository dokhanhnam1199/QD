{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.1,\n    noise_scale: float = 1e-6,\n) -> np.ndarray:\n    \"\"\"\n    Epsilon\u2011greedy priority function for the online Bin Packing Problem.\n\n    The function prefers the *Best\u2011Fit* bin (the feasible bin that will have the\n    smallest remaining capacity after the item is placed). With probability\n    ``epsilon`` it explores by assigning a random score to each feasible bin.\n    A tiny random ``noise`` term is added in the exploitation case to break ties.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining free capacity of each currently open bin.\n    epsilon : float, optional\n        Exploration probability (default 0.1). ``epsilon = 0`` disables exploration,\n        ``epsilon = 1`` selects a completely random feasible bin.\n    noise_scale : float, optional\n        Scale of the tie\u2011breaking noise added in exploitation mode (default 1e-6).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the same shape as ``bins_remain_cap`` with a priority score for\n        each bin. Higher scores indicate higher preference. Bins that cannot hold\n        the item receive ``-np.inf`` (so they will never be selected unless all\n        bins are infeasible).\n    \"\"\"\n    # Identify bins that can actually accommodate the item.\n    feasible = bins_remain_cap >= item\n\n    # ----------------- Exploitation (Best\u2011Fit) -----------------\n    # Compute leftover capacity if the item were placed in each feasible bin.\n    leftover = bins_remain_cap - item\n    # Best\u2011Fit prefers the smallest leftover (i.e. largest negative leftover).\n    best_fit_score = np.where(feasible, -leftover, -np.inf)\n\n    # ------------------- Exploration -------------------------\n    # Assign a uniform random score to each feasible bin.\n    random_score = np.where(feasible, np.random.rand(bins_remain_cap.shape[0]), -np.inf)\n\n    # Decide whether to explore or exploit.\n    if np.random.rand() < epsilon:\n        # Exploration: use random scores.\n        priorities = random_score\n    else:\n        # Exploitation: use best\u2011fit scores, adding tiny noise to break ties.\n        noise = np.random.rand(bins_remain_cap.shape[0]) * noise_scale\n        priorities = best_fit_score + noise\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function using the Exact Fit First strategy.\n\n    The strategy first looks for a bin that can accommodate the item with zero\n    leftover capacity (exact fit).  If such a bin exists it will receive the\n    highest priority.  If no exact fit exists, the bin with the smallest\n    remaining leftover after placement is preferred.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array containing the remaining capacity of each bin.\n\n    Returns:\n        An array of the same shape as bins_remain_cap containing the\n        priority scores for each bin.  Larger values correspond to higher\n        priority.  Bins that cannot accommodate the item are assigned a very\n        low (negative infinite) score.\n    \"\"\"\n    # Compute space that would remain if the item were placed into each bin\n    # Bins that can't hold the item get a score of -\u221e so they are never selected.\n    remaining_after = bins_remain_cap - item\n    fits = remaining_after >= 0\n\n    # The priority is higher for smaller remaining capacity:\n    #  - 0  -> priority 0 (exact fit)\n    #  > 0 -> priority negative (but less negative is better)\n    priority_scores = np.where(\n        fits,\n        -remaining_after,   # exact fit gives 0, looser fit gives negative values\n        -np.inf             # cannot fit -> discard\n    )\n\n    return priority_scores\n\n[Reflection]\nUse exact\u2011fit first, then best\u2011fit, dynamic epsilon, noise, penalize reuse.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}