{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nScore feasible bins via weighted sum of normalized leftover, fit ratio, and usage; apply a variance\u2011adapted sigmoid to each term, multiply scores, add a huge exact\u2011fit bonus, and assign \u2013\u221e to infeasibles. Use \u03b5\u2011greedy (\u03b5\u22480.01) with deterministic tie\u2011break, vectorize, pre\u2011compute feasibility masks, and tune alphas offline.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Minimum and maximum exploration probabilities.\n_EPSILON_MIN = 0.05\n_EPSILON_MAX = 0.25\n\n    \"\"\"\n    Adaptive priority for the online Bin Packing Problem.\n\n    A tight\u2011fit score (inverse leftover space) is blended with a random\n    exploration term.  The blending weight (epsilon) adapts to the variance\n    of the leftover space among bins that can accommodate the item:\n    low variance \u21d2 higher epsilon (more exploration), high variance \u21d2 lower\n    epsilon (more exploitation).\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher = more desirable).  Infeasible bins receive\n        ``-np.inf`` so they are never selected.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    feasible = caps >= item\n    if not np.any(feasible):\n        return np.full_like(caps, -np.inf, dtype=float)\n\n    # Compute leftover capacity if the item were placed.\n    leftover = caps - item\n\n    # Base priority: inverse leftover (tight fits get larger scores).\n    eps = 1e-12  # avoids division by zero.\n    base = np.where(feasible, 1.0 / (leftover + eps), 0.0)\n\n    # --- Adaptive epsilon ----------------------------------------------------\n    # Variance of the leftover among feasible bins.\n    lo = leftover[feasible]\n    var = np.var(lo)\n\n    # Upper bound for variance of a bounded interval [0, L] is L^2 / 4.\n    L = np.max(lo)\n    if L > 0:\n        var_max = (L * L) / 4.0\n        var_norm = np.clip(var / var_max, 0.0, 1.0)\n    else:\n        var_norm = 0.0\n\n    # More variance \u2192 smaller epsilon (more exploitation).\n    epsilon = _EPSILON_MIN + (_EPSILON_MAX - _EPSILON_MIN) * (1.0 - var_norm)\n\n    # --- Exploration component -----------------------------------------------\n    rng = np.random.default_rng()\n    random_score = rng.random(caps.shape)\n\n    # Blend exploitation (tight\u2011fit) and exploration (random).\n    blended = (1.0 - epsilon) * base + epsilon * random_score\n\n    # Infeasible bins get -inf to guarantee they are never chosen.\n    priorities = np.where(feasible, blended, -np.inf)\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}