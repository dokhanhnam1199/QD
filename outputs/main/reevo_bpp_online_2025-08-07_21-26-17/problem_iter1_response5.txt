```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    *,
    power: float = 1.0,
    epsilon: float = 1e-12,
    normalize: bool = False,
) -> np.ndarray:
    """Inverse‑Distance (Proximity Fit) priority for online bin packing.

    For each bin we compute the slack (remaining capacity after placing the
    item).  Bins that cannot accommodate the item receive a priority of 0.
    For feasible bins the priority is the inverse of the slack raised to ``power``,
    i.e. ``1 / (slack + epsilon)**power``.  This yields the highest score for a
    perfect fit (slack≈0) and rapidly decreases as the bin becomes more under‑filled.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array with the remaining capacity of each bin.
        power: Exponent controlling the steepness of the decay.  ``power=1`` gives a
            simple inverse distance; larger values make the function more
            aggressive in preferring tight fits.
        epsilon: Small constant to avoid division by zero when slack ≈ 0.
        normalize: If True, the priorities are scaled to sum to 1 across all
            feasible bins (useful when turning priorities into a probability
            distribution).

    Returns:
        An array of the same shape as ``bins_remain_cap`` containing the priority
        score for each bin.
    """
    # Compute slack (how much space would be left after inserting the item)
    slack = bins_remain_cap - item

    # Identify bins that can actually host the item
    feasible = slack >= 0

    # Initialise priority vector
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Inverse distance priority for feasible bins
    # Adding epsilon prevents division‑by‑zero and yields a very large priority for a perfect fit.
    priorities[feasible] = 1.0 / np.power(slack[feasible] + epsilon, power)

    # Optional normalization to turn raw scores into a probability distribution
    if normalize:
        total = priorities.sum()
        if total > 0:
            priorities = priorities / total

    return priorities
```
