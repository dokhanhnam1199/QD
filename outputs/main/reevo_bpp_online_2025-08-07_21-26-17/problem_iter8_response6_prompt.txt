{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global constants (tuned offline)\nCAP = 1.0            # Bin capacity (assumed 1.0 for normalized terms)\nK_BASE = 10.0        # Base steepness for the variance\u2011adapted sigmoid\nVAR_MAX = 0.25       # Max variance for a uniform [0,1] distribution\nEPSILON = 0.01       # Exploration probability for \u03b5\u2011greedy\nHUGE_BONUS = 1e6     # Exact\u2011fit bonus\n\n    \"\"\"\n    Priority scores for online bin\u2011packing with variance\u2011adapted sigmoids,\n    product scoring, exact\u2011fit bonus, and \u03b5\u2011greedy exploration.\n    Feasible bins receive a finite score; infeasible bins get -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher = more desirable).  Infeasible bins receive\n        ``-np.inf`` so they are never selected.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    feasible = caps >= item\n    n_bins = caps.shape[0]\n\n    # Return -inf for all bins if none can accommodate the item\n    if not np.any(feasible):\n        return np.full(n_bins, -np.inf, dtype=float)\n\n    # Remaining capacity after placing the item\n    leftover = caps - item\n\n    # Basic terms (all lie in [0,1] because CAP == 1.0)\n    norm_leftover = np.where(feasible, leftover / CAP, 0.0)\n    fit_ratio    = np.where(feasible, item / CAP, 0.0)\n    usage_after  = np.where(feasible, 1.0 - leftover / CAP, 0.0)\n\n    def sigmoid_term(term_arr: np.ndarray) -> np.ndarray:\n        \"\"\"Variance\u2011adapted sigmoid centered at 0.5.\"\"\"\n        # Compute variance only over feasible bins\n        if np.any(feasible):\n            var = np.var(term_arr[feasible])\n        else:\n            var = 0.0\n        var_norm = min(var / VAR_MAX, 1.0)\n        k = K_BASE * (1.0 - var_norm)  # lower variance \u2192 steeper sigmoid\n        return 1.0 / (1.0 + np.exp(-k * (term_arr - 0.5)))\n\n    # Sigmoid transforms for each term\n    sig_leftover = sigmoid_term(norm_leftover)\n    sig_fit      = sigmoid_term(fit_ratio)\n    sig_usage    = sigmoid_term(usage_after)\n\n    # Product of weighted sigmoid scores (weights are exponents; tuned offline)\n    weighted_score = (sig_leftover ** 1.0) * \\\n                     (sig_fit     ** 1.0) * \\\n                     (sig_usage   ** 1.0)\n\n    # Add a huge bonus for exact\u2011fit placements\n    exact_fit_mask = feasible & np.isclose(leftover, 0.0, atol=1e-9)\n    weighted_score[exact_fit_mask] += HUGE_BONUS\n\n    # \u03b5\u2011greedy exploration: mix with uniform random scores\n    rng = np.random.default_rng()\n    random_score = rng.random(n_bins)\n    final_score = (1.0 - EPSILON) * weighted_score + EPSILON * random_score\n\n    # Ensure infeasible bins are never chosen\n    final_score[~feasible] = -np.inf\n\n    return final_score\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Minimum and maximum exploration probabilities.\n_EPSILON_MIN = 0.05\n_EPSILON_MAX = 0.25\n\n    \"\"\"\n    Adaptive priority for the online Bin Packing Problem.\n\n    A tight\u2011fit score (inverse leftover space) is blended with a random\n    exploration term.  The blending weight (epsilon) adapts to the variance\n    of the leftover space among bins that can accommodate the item:\n    low variance \u21d2 higher epsilon (more exploration), high variance \u21d2 lower\n    epsilon (more exploitation).\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher = more desirable).  Infeasible bins receive\n        ``-np.inf`` so they are never selected.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item.\n    feasible = caps >= item\n    if not np.any(feasible):\n        return np.full_like(caps, -np.inf, dtype=float)\n\n    # Compute leftover capacity if the item were placed.\n    leftover = caps - item\n\n    # Base priority: inverse leftover (tight fits get larger scores).\n    eps = 1e-12  # avoids division by zero.\n    base = np.where(feasible, 1.0 / (leftover + eps), 0.0)\n\n    # --- Adaptive epsilon ----------------------------------------------------\n    # Variance of the leftover among feasible bins.\n    lo = leftover[feasible]\n    var = np.var(lo)\n\n    # Upper bound for variance of a bounded interval [0, L] is L^2 / 4.\n    L = np.max(lo)\n    if L > 0:\n        var_max = (L * L) / 4.0\n        var_norm = np.clip(var / var_max, 0.0, 1.0)\n    else:\n        var_norm = 0.0\n\n    # More variance \u2192 smaller epsilon (more exploitation).\n    epsilon = _EPSILON_MIN + (_EPSILON_MAX - _EPSILON_MIN) * (1.0 - var_norm)\n\n    # --- Exploration component -----------------------------------------------\n    rng = np.random.default_rng()\n    random_score = rng.random(caps.shape)\n\n    # Blend exploitation (tight\u2011fit) and exploration (random).\n    blended = (1.0 - epsilon) * base + epsilon * random_score\n\n    # Infeasible bins get -inf to guarantee they are never chosen.\n    priorities = np.where(feasible, blended, -np.inf)\n    return priorities\n\n[Reflection]\nUse adaptive epsilon based on leftover variance, prefer inverse\u2011leftover score, keep exact\u2011fit bonus, avoid complex sigmoids.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}