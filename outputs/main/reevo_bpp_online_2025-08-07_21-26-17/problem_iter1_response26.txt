```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Return a priority for each bin based on a Sigmoid Fit Score.

    The score is high for bins where the item will leave very little residual
    capacity, i.e., where the item tightly fits.  Infeasible bins
    (item > remaining capacity) receive -np.inf so they are never chosen.

    Args:
        item: Size of the item to pack.
        bins_remain_cap: 1‑D array of remaining capacities of each bin.

    Returns:
        Array of the same shape as bins_remain_cap with a floating priority
        for each bin.
    """
    item = float(item)

    # Compute leftover capacity after placing the item
    leftover = bins_remain_cap - item
    # Which bins can accept the item?
    feasible = leftover >= 0

    # Initialize priorities to -∞ for infeasible bins
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if np.any(feasible):
        # Normalised leftover fraction: 0 -> tight fit, 1 -> empty bin
        norm_leftover = leftover[feasible] / bins_remain_cap[feasible]

        # Sigmoid Fit Score: Sigmoid( a - b * (norm_leftover) )
        # Parameters a, b tune the steepness and offset.
        a, b = 5.0, 10.0
        logits = a - b * norm_leftover
        # Logistic function
        priorities[feasible] = 1.0 / (1.0 + np.exp(-logits))

    return priorities
```
