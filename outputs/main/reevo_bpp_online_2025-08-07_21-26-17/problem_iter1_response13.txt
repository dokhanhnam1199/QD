```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for each bin according to the **Almost Full Fit**
    heuristic.

    The idea of Almost Full Fit is to place the item into the bin that will be
    left with the *smallest* remaining capacity after the insertion – i.e., the
    bin that becomes as full as possible without overflowing. Bins that cannot
    accommodate the item receive a very low priority. Additionally, bins that
    would be *exactly* filled (within a tiny epsilon) get a huge bonus to
    encourage perfect fits and avoid floating‑point round‑off issues.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacities of each currently open bin.

    Returns
    -------
    np.ndarray
        An array of the same shape as ``bins_remain_cap`` containing the
        priority score for each bin. Higher scores indicate a more preferred
        bin for placing the item.
    """
    # Convert to a NumPy array of floats (in case a list is passed)
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Compute the leftover capacity if the item were placed in each bin
    leftover = bins_remain_cap - item

    # Feasibility mask: True where the item fits
    feasible = leftover >= 0

    # Very low priority for infeasible bins
    NEG_INF = -1e12
    priorities = np.full_like(bins_remain_cap, NEG_INF, dtype=float)

    # Base priority: the smaller the leftover, the larger the priority.
    # We use the negative leftover to turn minimisation (of slack) into
    # maximisation (of priority).
    priorities[feasible] = -leftover[feasible]

    # Bonus for bins that become (almost) perfectly full.
    # This helps push the algorithm toward exact fits and reduces the
    # sensitivity to tiny floating‑point errors.
    epsilon = 1e-6          # tolerance for “exact” fit
    exact_fit_bonus = 1e9  # large positive boost
    exact_fit = feasible & (leftover <= epsilon)
    priorities[exact_fit] = exact_fit_bonus

    return priorities
```
