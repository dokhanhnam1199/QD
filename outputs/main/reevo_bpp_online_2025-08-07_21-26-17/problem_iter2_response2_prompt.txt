{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.1,\n    noise_scale: float = 1e-6,\n) -> np.ndarray:\n    \"\"\"\n    Epsilon\u2011greedy priority function for the online Bin Packing Problem.\n\n    The function prefers the *Best\u2011Fit* bin (the feasible bin that will have the\n    smallest remaining capacity after the item is placed). With probability\n    ``epsilon`` it explores by assigning a random score to each feasible bin.\n    A tiny random ``noise`` term is added in the exploitation case to break ties.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining free capacity of each currently open bin.\n    epsilon : float, optional\n        Exploration probability (default 0.1). ``epsilon = 0`` disables exploration,\n        ``epsilon = 1`` selects a completely random feasible bin.\n    noise_scale : float, optional\n        Scale of the tie\u2011breaking noise added in exploitation mode (default 1e-6).\n\n    Returns\n    -------\n    np.ndarray\n        Array of the same shape as ``bins_remain_cap`` with a priority score for\n        each bin. Higher scores indicate higher preference. Bins that cannot hold\n        the item receive ``-np.inf`` (so they will never be selected unless all\n        bins are infeasible).\n    \"\"\"\n    # Identify bins that can actually accommodate the item.\n    feasible = bins_remain_cap >= item\n\n    # ----------------- Exploitation (Best\u2011Fit) -----------------\n    # Compute leftover capacity if the item were placed in each feasible bin.\n    leftover = bins_remain_cap - item\n    # Best\u2011Fit prefers the smallest leftover (i.e. largest negative leftover).\n    best_fit_score = np.where(feasible, -leftover, -np.inf)\n\n    # ------------------- Exploration -------------------------\n    # Assign a uniform random score to each feasible bin.\n    random_score = np.where(feasible, np.random.rand(bins_remain_cap.shape[0]), -np.inf)\n\n    # Decide whether to explore or exploit.\n    if np.random.rand() < epsilon:\n        # Exploration: use random scores.\n        priorities = random_score\n    else:\n        # Exploitation: use best\u2011fit scores, adding tiny noise to break ties.\n        noise = np.random.rand(bins_remain_cap.shape[0]) * noise_scale\n        priorities = best_fit_score + noise\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Sigmoid Fit Score priority for online Bin Packing.\n\n    For each currently open bin we compute a priority that rewards:\n      * a tight fit (item occupies a large fraction of the free space), and\n      * a small amount of waste left after the item is placed.\n\n    The two criteria are transformed by logistic (sigmoid) functions and\n    combined multiplicatively.  Bins that cannot accommodate the item receive\n    ``-np.inf`` so they will never be chosen.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item (0 < item \u2264 bin capacity).\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (higher is better) with the same shape as\n        ``bins_remain_cap``.  Infeasible bins are assigned ``-np.inf``.\n    \"\"\"\n    # Ensure we are working with floats.\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Edge case: no bins are currently open.\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n\n    # Initialise all priorities to the worst possible value.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n\n    # Feasibility mask: bins with enough space for the item.\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return priorities  # nothing fits; all remain -inf.\n\n    # ----------------------------------------------------------------------\n    # 1) Fit\u2011ratio component \u2013 how much of the free space the item would use.\n    #    ratio = item / remaining_capacity \u2208 (0, 1].\n    # ----------------------------------------------------------------------\n    fit_ratio = np.empty_like(bins_remain_cap, dtype=np.float64)\n    np.divide(item, bins_remain_cap, out=fit_ratio, where=feasible)\n    fit_ratio[~feasible] = 0.0  # value irrelevant for infeasible bins.\n\n    # Sigmoid parameters for the fit\u2011ratio.\n    alpha_fit = 15.0          # steepness of the transition.\n    target_fit = 0.85         # ratio where score = 0.5 (\u224885\u202f% fill is neutral).\n\n    fit_score = 1.0 / (1.0 + np.exp(-alpha_fit * (fit_ratio - target_fit)))\n\n    # ----------------------------------------------------------------------\n    # 2) Waste component \u2013 encourage small leftover space after placement.\n    # ----------------------------------------------------------------------\n    # Estimate the true bin capacity.  If an empty bin exists,\n    # the maximum remaining capacity equals the true capacity.\n    eps = 1e-12\n    est_capacity = float(np.max(bins_remain_cap)) if bins_remain_cap.size else 1.0\n    est_capacity = max(est_capacity, eps)\n\n    waste = bins_remain_cap - item                     # may be negative for infeasibles.\n    waste_norm = np.clip(waste / est_capacity, 0.0, 1.0)  # normalised waste \u2208 [0,1].\n\n    # Sigmoid parameters for the waste.\n    alpha_waste = 12.0\n    waste_target = 0.05       # waste \u2264 5\u202f% of capacity yields score >\u202f0.5.\n\n    waste_score = 1.0 / (1.0 + np.exp(alpha_waste * (waste_norm - waste_target)))\n\n    # ----------------------------------------------------------------------\n    # 3) Combine the two signals.\n    # ----------------------------------------------------------------------\n    # Multiplicative combination heavily penalises a bin that fails either\n    # criterion while rewarding bins that are good on both.\n    combined_score = fit_score * waste_score\n\n    # Assign scores only to feasible bins.\n    priorities[feasible] = combined_score[feasible]\n\n    return priorities\n\n[Reflection]\nCombine multiple sigmoid\u2011based criteria, multiply them, tune parameters, and inject exploration noise.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}