```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., 0).
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item

    # Assign a high priority to bins that can accommodate the item.
    # Prioritize bins with smaller remaining capacity among the feasible bins.
    # This is inspired by First-Fit-Decreasing, aiming to fill bins more completely.
    if np.any(feasible_bins):
        priorities[feasible_bins] = (bins_remain_cap[feasible_bins].max() - bins_remain_cap[feasible_bins]) + 1e-6 #adding small constant so that a bin that perfectly accommodates the item receives slightly higher priority.

    #For bins that cannot accommodate the item, we give them very low priority
    priorities[~feasible_bins] = -np.inf
    
    return priorities
```
