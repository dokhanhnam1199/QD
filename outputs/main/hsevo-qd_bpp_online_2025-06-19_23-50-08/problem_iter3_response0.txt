```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fill rate, waste, and future fit probability."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    fit = item <= bins_remain_cap
    waste = bins_remain_cap - item

    priorities[~fit] = -np.inf  # Impossible to fit

    if np.any(fit):
        # Fill ratio - encourages packing items tightly
        priorities[fit] = (item / bins_remain_cap[fit])

        # Waste penalty - discourages large waste
        priorities[fit] -= np.exp(waste[fit] * 3) # Less aggressive than v1

        # "Future fit" heuristic: Reward bins where the remaining space after packing
        # is close to the median size of *remaining* items. This anticipates
        # future packing opportunities.

        #Estimate "next item" size as the median free space (simple proxy)
        remaining_after_fit = bins_remain_cap[fit] - item

        #Find target remainder
        target_remainder = np.median(bins_remain_cap) if bins_remain_cap.size > 0 else item #use current item if list is empty
        priorities[fit] += np.exp(-np.abs(remaining_after_fit - target_remainder) * 2)

        # Small bonus to bins with lower remaining capacity to try to fill them.
        priorities[fit] += (1/(bins_remain_cap[fit]+0.0001))*0.1 # To avoid division by zero, and keep it small
    return priorities
```
