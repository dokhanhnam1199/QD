{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins considering fill rate, waste, and future fit.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap) # Assuming bins are of same capacity.\n\n    fit = item <= bins_remain_cap\n    waste = bins_remain_cap - item\n\n    priorities[~fit] = -np.inf  # Impossible to fit\n\n    if np.any(fit):\n        # Fill ratio + waste penalty, adjusted penalty strength for finer control.\n        priorities[fit] = (item / bins_remain_cap[fit]) + np.exp(-waste[fit] * 5)\n\n        # Heuristic 1: Prioritize bins with remaining capacity closest to common item sizes to reduce fragmentation\n        # Consider a range of common item sizes (e.g., 1/4, 1/3, 1/2 of bin capacity)\n        common_sizes = np.array([bin_capacity/4, bin_capacity/3, bin_capacity/2])\n        remaining_after_fit = bins_remain_cap[fit] - item\n        size_diffs = np.abs(remaining_after_fit[:, np.newaxis] - common_sizes)\n        min_size_diffs = np.min(size_diffs, axis=1) #Closest match\n        priorities[fit] += np.exp(-min_size_diffs * 3)\n\n        # Heuristic 2: Slightly penalize bins that become nearly full after packing to leave room for small adjustments.\n        nearly_full = (waste[fit] / bin_capacity) < 0.1\n        priorities[fit][nearly_full] -= 0.2  # Slightly demote\n\n        #Heuristic 3: Bonus for bins that have a remaining capacity that can fit at least a certain percentage (e.g., 20%) of the current item. Prevents creating too small waste.\n        can_fit_part = (bins_remain_cap[fit] - item) >= (0.2 * item)\n        priorities[fit][can_fit_part] += 0.1\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}