```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fill rate, waste, and a penalty for bins that become nearly full."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    fit = item <= bins_remain_cap
    waste = bins_remain_cap - item

    priorities[~fit] = -np.inf

    if np.any(fit):
        priorities[fit] = (item / bins_remain_cap[fit]) + np.exp(-waste[fit] * 5)

        # Penalize bins that become nearly full
        nearly_full = (waste[fit] / bin_capacity) < 0.1
        priorities[fit][nearly_full] -= 0.2

    return priorities
```
