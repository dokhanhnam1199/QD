```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers several factors:
    1. Remaining capacity of the bin: Bins with remaining capacity close to the item size get higher priority.
    2. Avoidance of small remaining capacity: Bins that would have very small remaining capacity after adding the item get a lower priority.  This discourages fragmentation.
    3. Preference for bins that can accommodate the item: Bins that cannot accommodate the item get a very low priority (negative).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf  # Very low priority if item doesn't fit
        else:
            remaining_after_fit = cap - item

            # Priority based on how well the item fits (ratio of item size to remaining capacity).
            # Bins with remaining capacity close to item size are preferred.  The exponential amplifies the preference.
            fit_score = np.exp(-np.abs(item - cap)/item)

            #Penalty for fragmentation (small remaining capacity)
            fragmentation_penalty = 0.0
            if remaining_after_fit > 0:
              fragmentation_penalty = np.exp(-5*remaining_after_fit/item) # exponential decay of penalty
              #fragmentation_penalty = remaining_after_fit/item
            priorities[i] = fit_score - fragmentation_penalty  # Combine fit score and fragmentation penalty

    return priorities
```
