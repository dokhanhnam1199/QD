{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins considering fill rate, waste, and infeasibility.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    fit = item <= bins_remain_cap\n    waste = bins_remain_cap - item\n\n    priorities[~fit] = -np.inf  # Impossible to fit\n\n    # Fill ratio + waste penalty, adjusted penalty strength for finer control.\n    priorities[fit] = (item / bins_remain_cap[fit]) + np.exp(-waste[waste >= 0] * 5)\n\n    # Refinement: slight bonus for bins that will have remaining capacity close to the average item size.\n    avg_item_size = np.mean(item)  # Average item for online setting\n    remaining_after_fit = bins_remain_cap[fit] - item\n    priorities[fit] += np.exp(-np.abs(remaining_after_fit - avg_item_size) * 2) # Add bonus\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins considering fill rate, waste, and future fit.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap) # Assuming bins are of same capacity.\n\n    fit = item <= bins_remain_cap\n    waste = bins_remain_cap - item\n\n    priorities[~fit] = -np.inf  # Impossible to fit\n\n    if np.any(fit):\n        # Fill ratio + waste penalty, adjusted penalty strength for finer control.\n        priorities[fit] = (item / bins_remain_cap[fit]) + np.exp(-waste[fit] * 5)\n\n        # Heuristic 1: Prioritize bins with remaining capacity closest to common item sizes to reduce fragmentation\n        # Consider a range of common item sizes (e.g., 1/4, 1/3, 1/2 of bin capacity)\n        common_sizes = np.array([bin_capacity/4, bin_capacity/3, bin_capacity/2])\n        remaining_after_fit = bins_remain_cap[fit] - item\n        size_diffs = np.abs(remaining_after_fit[:, np.newaxis] - common_sizes)\n        min_size_diffs = np.min(size_diffs, axis=1) #Closest match\n        priorities[fit] += np.exp(-min_size_diffs * 3)\n\n        # Heuristic 2: Slightly penalize bins that become nearly full after packing to leave room for small adjustments.\n        nearly_full = (waste[fit] / bin_capacity) < 0.1\n        priorities[fit][nearly_full] -= 0.2  # Slightly demote\n\n        #Heuristic 3: Bonus for bins that have a remaining capacity that can fit at least a certain percentage (e.g., 20%) of the current item. Prevents creating too small waste.\n        can_fit_part = (bins_remain_cap[fit] - item) >= (0.2 * item)\n        priorities[fit][can_fit_part] += 0.1\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the first uses a fill ratio, a waste penalty, and a bonus for remaining capacity close to the average item size, while the last only uses the inverse log of the fill ratio. (2nd) vs (19th) shows the same pattern. Comparing (1st) vs (2nd), we see they are identical. Comparing (13rd) vs (18th), (13rd) prioritizes based on fit, fill ratio, and waste, strongly penalizing infeasible placements. (18th) just uses the negative log of the fill ratio. Comparing (second worst) vs (worst), they are identical. Overall: The best heuristics consider multiple factors like fill rate, waste, and remaining capacity, while simpler heuristics only use fill rate. The best ones also include ways to prevent making small waste.\n- \nHere's a refined view of self-reflection for designing better heuristics, steering clear of ineffective pitfalls:\n\n*   **Keywords:** Multi-objective, penalty, ablation, infeasibility, reward shaping, performance factors.\n\n*   **Advice:** Begin with a comprehensive multi-objective function capturing key performance drivers. Prioritize penalizing detrimental behaviors (e.g., infeasible solutions) with carefully crafted negative rewards.\n\n*   **Avoid:** Premature feature reduction. Focus on a broad initial feature set before ablation.\n\n*   **Explanation:** Systematically penalizing poor choices provides stronger guidance signal than solely rewarding positive ones. Ablation reveals feature importance after initial design.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}