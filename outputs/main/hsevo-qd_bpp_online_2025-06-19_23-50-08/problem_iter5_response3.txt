```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_strength: float = 10,
                  remaining_capacity_bonus_strength: float = 0.5) -> np.ndarray:
    """Prioritizes bins by fill rate, waste, and remaining capacity compared to item size."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit = item <= bins_remain_cap
    waste = bins_remain_cap - item

    priorities[~fit] = -np.inf  # Impossible to fit

    priorities[fit] = (item / bins_remain_cap[fit]) + np.exp(-waste[waste >= 0] * waste_penalty_strength)

    avg_item_size = np.mean(item)
    remaining_after_fit = bins_remain_cap[fit] - item
    priorities[fit] += np.exp(-np.abs(remaining_after_fit - avg_item_size) * remaining_capacity_bonus_strength)

    # Add penalty for small waste

    small_waste_threshold = avg_item_size * 0.1  # Define "small" waste dynamically
    small_waste = (waste > 0) & (waste <= small_waste_threshold)
    priorities[fit][small_waste[fit]] -= 0.1 #Penalize

    return priorities
```
