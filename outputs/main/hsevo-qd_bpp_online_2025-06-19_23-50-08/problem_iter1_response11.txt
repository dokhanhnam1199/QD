```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin is feasible only if its remaining capacity is greater than or equal to the item size.
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        #If no bin is feasible, let's make all priorites 0.
        return priorities

    # Calculate the wasted space if the item is placed in each bin.
    wasted_space = bins_remain_cap - item

    #Only look at feasible bins
    wasted_space = wasted_space[feasible_bins]
    
    # Normalize wasted space: smaller waste is better
    normalized_waste = 1 / (wasted_space + 1e-9) # Add a small number to avoid division by zero
    
    # Prioritize bins with smaller wasted space: Higher the normalized waste the higher is the priority
    priorities[feasible_bins] = normalized_waste
    
    #Give highest priority to bins that have an almost perfect fit, but not perfect fit, and above a certain threshhold.
    almost_perfect_fit = (bins_remain_cap > item) & (bins_remain_cap < 1.1*item) & (bins_remain_cap <= 0.9)
    priorities[almost_perfect_fit] = 100 #arbitrary large number

    #Reduce priority for almost full bin.
    almost_full = (bins_remain_cap >= 0.95)
    priorities[almost_full] = 0.1

    return priorities
```
