```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function combines several heuristics:

    1.  Feasibility: Only bins with enough remaining capacity are considered.
    2.  Waste Minimization: Prioritizes bins where the item fills a significant portion of the remaining capacity but avoids near-full bins.
    3.  Bin Usage Balance: Slightly favors bins that are already somewhat occupied to consolidate items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Only consider bins with sufficient capacity
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No feasible bins, all priorities remain zero.

    # Calculate ratios of item size to remaining capacity
    ratios = item / bins_remain_cap

    # Waste minimization: High priority for bins that accommodate the item well, avoiding almost-full bins
    priorities[feasible_bins] = ratios[feasible_bins]  # Start with the fill ratio

    # Add a bonus for bins that aren't empty to consolidate items.
    non_empty_bins = bins_remain_cap < 1.0  # Assuming bin capacity is normalized to 1.

    priorities[feasible_bins & non_empty_bins] += 0.1 #small bonus to prioritiy

    # Penalize bins that become almost full after packing
    almost_full_bins = (bins_remain_cap - item) < 0.05 #threshold of almost full
    priorities[feasible_bins & almost_full_bins] -= 0.2 #small negative number

    return priorities
```
