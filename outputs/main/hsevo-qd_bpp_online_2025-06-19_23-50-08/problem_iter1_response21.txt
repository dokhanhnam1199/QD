```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several factors to determine bin priority:
    1. Space Utilization: Prioritizes bins where the item fills a significant portion of the remaining capacity.
    2. Avoidance of Small Fragments: Discourages leaving very small unused spaces.
    3. Encouraging Near-Perfect Fit: Gives a high bonus for a near-perfect fit.
    4. Penalty for Overflow: Assigns a very low priority to bins where the item doesn't fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item > remaining_capacity:
            priorities[i] = -np.inf  # Very low priority (or even invalid)
            continue

        # Space Utilization: Favor bins that would be significantly filled
        utilization = item / remaining_capacity
        priorities[i] += utilization

        # Avoidance of Small Fragments: Penalize bins leaving small spaces
        remaining_after_fit = remaining_capacity - item
        if 0 < remaining_after_fit < 0.1:  # Adjust threshold as needed
            priorities[i] -= 0.5 # small penalty.

        # Encouraging Near-Perfect Fit: Huge Bonus for an Almost Perfect Fit. If the empty space is nearly 0 after adding item to bin, return a very large priority value
        if 0 <= remaining_after_fit <= 0.01:
            priorities[i] += 10 # Add a HUGE bonus.

        # Moderate Bonus for fitting
        priorities[i] += 1
    return priorities
```
