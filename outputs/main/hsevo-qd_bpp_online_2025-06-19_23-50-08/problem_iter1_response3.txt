```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very full bins that fit the item should be prioritized to use space efficiently
    fit_mask = bins_remain_cap >= item
    
    # Avoid bins where the item would fill the bin too much or too little
    efficiency = item / bins_remain_cap
    efficient_mask = (efficiency >= 0.5) & (efficiency <= 1.0)
    
    priorities[fit_mask & efficient_mask] = 10 * (1 - np.abs(efficiency[fit_mask & efficient_mask] - 0.75)) # give preference to 75% utilization

    # Also prioritize the nearly full ones a little. This has lower priority than ideal utilization
    nearly_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < item)
    priorities[nearly_full_mask] = 5 * (item - bins_remain_cap[nearly_full_mask])/item

    # Penalize bins which cannot fit the current item
    priorities[bins_remain_cap < item] = -1.0

    return priorities
```
