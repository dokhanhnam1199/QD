```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins where the item fits well, leaving minimal wasted space.
    # However, strongly penalize bins where the item *doesn't* fit.

    fit = item <= bins_remain_cap
    waste = bins_remain_cap - item
    
    priorities[~fit] = -np.inf  # Impossible to fit, very low priority

    # Emphasize filling up more capacity (higher fill rate is better), and punish little wasted space to incentivize near-perfect fills, avoid smaller fragments.

    priorities[fit] = (item / bins_remain_cap[fit]) + np.exp(-waste[waste >= 0] * 10) # Adjusted exponent

    return priorities
```
