```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Prefer bins where the item fits.
    fits = bins_remain_cap >= item
    priorities[fits] += 1.0

    # Heuristic 2: Closer to full is better, but not too close (avoid wasting space)
    remaining_after_fit = bins_remain_cap - item
    waste_ratio = remaining_after_fit / bins_remain_cap.max()  # Normalize waste
    
    # Give a bonus if waste_ratio is low (but not zero or negative indicating a bad fit). Apply only where the item fits
    priorities[fits] += np.exp(-5 * waste_ratio[fits]) #Exponential decay based on normalized waste ratio

    #Heuristic 3: Add a small penalty for bins that are already almost full
    almost_full = (bins_remain_cap / bins_remain_cap.max()) < 0.2 #Normalize the remaining capacity and say if it is less than 20% of the largest capacity in the bins
    priorities[almost_full] -= 0.5 #Small penalty for bins close to being full

    #Heuristic 4: slight preference for the fullest bins (to consolidate utilization)
    priorities += bins_remain_cap / bins_remain_cap.max() * 0.1

    return priorities
```
