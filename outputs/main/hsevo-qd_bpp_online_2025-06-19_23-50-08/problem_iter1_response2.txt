```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the waste if the item is placed in each bin.
    waste = bins_remain_cap - item

    # Give a large negative priority to bins that can't fit the item.
    priorities = np.where(waste < 0, -np.inf, 0)

    # For bins that can fit the item, prioritize those with smaller waste,
    # but not too small to avoid creating near-full bins too early.
    # This formulation uses an exponential decay of priority with increasing waste.
    # Scale waste to make decay faster/slower, adjusted by item size.

    #Handle the case where waste is near zero.
    small_waste_threshold = 0.1 * item  # Adjust as needed

    # A slightly increased bonus near zero waste
    close_fit_bonus = np.exp(-waste**2 / (2 * (small_waste_threshold/2)**2)) if (waste >= 0).any() else np.zeros(len(bins_remain_cap))

    # Base priority depending on amount of space
    base_priority = np.exp(-waste / (2 * item))

    # Add together
    priorities = np.where(waste >= 0, base_priority + close_fit_bonus, priorities)

    return priorities
```
