```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins where the item fits.  Major priority boost
    fit_indices = bins_remain_cap >= item
    priorities[fit_indices] += 100  # Significant boost for fitting

    # Heuristic 2: Among fitting bins, prefer those with the least remaining capacity AFTER adding the item
    remaining_after_fit = bins_remain_cap[fit_indices] - item
    priorities[fit_indices] += 10 / (remaining_after_fit + 0.001)  # Avoid division by zero; Higher priority to smaller remaining
    # Heuristic 3: For bins where the item *doesn't* fit, assign negative priorities based on wasted space if we were to skip. (Minimizes future wasted space)
    non_fit_indices = bins_remain_cap < item
    priorities[non_fit_indices] -= (item - bins_remain_cap[non_fit_indices]) / (np.sum(bins_remain_cap)+ 0.001)  # Slightly penalize for not fitting; Normalized so the effect isn't excessive

    # Heuristic 4: Normalize to be in range [0, 1]. Shifts the lowest score to zero then divides by the range

    min_priority = np.min(priorities)
    priorities = priorities - min_priority
    max_priority = np.max(priorities)
    if max_priority > 0:  # Avoid division by zero if all priorities are equal (and originally all negative)
       priorities = priorities / max_priority


    return priorities
```
