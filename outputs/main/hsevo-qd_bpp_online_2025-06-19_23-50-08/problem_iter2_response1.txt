```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill rate and wasted space, penalizing infeasibility."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit = item <= bins_remain_cap
    waste = bins_remain_cap - item

    priorities[~fit] = -np.inf

    # Combination of fill rate and waste penalty, using a different waste scaling.
    priorities[fit] = (item / bins_remain_cap[fit]) + np.exp(-waste[waste >= 0] * 5)  #Adjusted exponent

    #Adjusted exponent for wasting control
    return priorities
```
