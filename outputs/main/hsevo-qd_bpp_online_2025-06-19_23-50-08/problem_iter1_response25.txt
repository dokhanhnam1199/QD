```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heavens, we must consider both the fit and the waste!
    # First, let us favor bins that can actually hold the item.
    can_fit = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap)

    # For bins that can hold the item, higher remaining capacity yields lower waste.
    # The larger the gap is, the more "perfect" is the fit and less bins we waste.
    fit_score = (bins_remain_cap - item)
    fit_score[~can_fit] = -np.inf #Very low number when cannot fit
    priorities[can_fit] = fit_score[can_fit]

    # Consider normalized waste or remaining capacity for fine-tuning
    normalized_waste = (bins_remain_cap - item) / bins_remain_cap
    normalized_waste[~can_fit] = -np.inf

    # Let's also introduce a bonus for near-perfect fits
    perfect_fit_bonus = np.exp(-10 * np.abs(normalized_waste - 0.05))  # Peak bonus around 5% waste
    perfect_fit_bonus[~can_fit] = 0 # No bonus if cannot fit

    priorities[can_fit] += perfect_fit_bonus[can_fit]

    # The smaller the empty capacity, the higher is the fill, hence better priority.
    priorities[can_fit] += 1/ (bins_remain_cap[can_fit] + 1e-9)


    return priorities
```
