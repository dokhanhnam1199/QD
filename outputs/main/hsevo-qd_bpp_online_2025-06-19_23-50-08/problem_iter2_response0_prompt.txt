{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Prioritize bins where the item fits well, leaving minimal wasted space.\n    # However, strongly penalize bins where the item *doesn't* fit.\n\n    fit = item <= bins_remain_cap\n    waste = bins_remain_cap - item\n    \n    priorities[~fit] = -np.inf  # Impossible to fit, very low priority\n\n    # Emphasize filling up more capacity (higher fill rate is better), and punish little wasted space to incentivize near-perfect fills, avoid smaller fragments.\n\n    priorities[fit] = (item / bins_remain_cap[fit]) + np.exp(-waste[waste >= 0] * 10) # Adjusted exponent\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic prioritizes bins based on both fill rate and wasted space, penalizing bins that can't fit the item and incentivizing near-perfect fills. The worst heuristic only considers the ratio of item size to remaining capacity using logarithms and doesn't explicitly penalize bins that can't fit the item. Comparing (11th) vs (20th), both use log ratios. Comparing (1st) vs (11th), the best uses a fill ratio `item / bins_remain_cap` and penalizes waste `np.exp(-waste[waste >= 0] * 10)`, while the 11th uses the negative log of the fill ratio. All heuristics from 1st to 10th are exactly the same.\n- \nOkay, let's refine \"Current self-reflection\" for designing better bin packing heuristics, avoiding ineffective practices:\n\n*   **Keywords:** Fill rate, waste minimization, infeasibility penalty, negative rewards, scoring assignments, heuristic adaptation.\n\n*   **Advice:** Focus on immediate consequences of placement decisions *and* their impact on future placement opportunities. Prioritize minimizing future waste by optimizing the \"shape\" of remaining space in bins.\n\n*   **Avoid:** Blindly scoring potential assignments based solely on immediate fill; overlooking the cascading effect on later placements and overall waste.\n\n*   **Explanation:** Effective heuristics need to be forward-looking, recognizing that seemingly good placements now can limit future options and increase overall waste or infeasibility.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}