{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on fill ratio, waste, and remaining capacity.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit = item <= bins_remain_cap\n    waste = bins_remain_cap - item\n\n    priorities[~fit] = -np.inf  # Infeasible bin\n\n    # Fill ratio + waste penalty\n    priorities[fit] = (item / bins_remain_cap[fit]) + np.exp(-waste[fit] * 0.5)\n\n    # Bonus for remaining capacity near item size\n    avg_item_size = np.mean(item)\n    remaining_after_fit = bins_remain_cap[fit] - item\n    priorities[fit] += np.exp(-np.abs(remaining_after_fit - avg_item_size) * 0.2)\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nHere's a refined view of self-reflection for designing better heuristics, steering clear of ineffective pitfalls:\n\n*   **Keywords:** Multi-objective, penalty, ablation, infeasibility, reward shaping, performance factors.\n\n*   **Advice:** Begin with a comprehensive multi-objective function capturing key performance drivers. Prioritize penalizing detrimental behaviors (e.g., infeasible solutions) with carefully crafted negative rewards.\n\n*   **Avoid:** Premature feature reduction. Focus on a broad initial feature set before ablation.\n\n*   **Explanation:** Systematically penalizing poor choices provides stronger guidance signal than solely rewarding positive ones. Ablation reveals feature importance after initial design.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}