```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill ratio, waste, remaining capacity, and bin utilization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit = item <= bins_remain_cap
    waste = bins_remain_cap - item

    priorities[~fit] = -np.inf  # Infeasible bin penalty

    # Fill ratio reward
    fill_ratio = item / bins_remain_cap[fit]
    priorities[fit] += fill_ratio

    # Waste penalty (exponential, penalizing small waste more)
    priorities[fit] -= np.exp(-waste[fit]) * 0.7

    # Reward for filling bins more completely (bin utilization)
    bin_utilization = 1 - (bins_remain_cap[fit] - item) / np.max(bins_remain_cap)
    priorities[fit] += bin_utilization * 0.5

    # Reward for bins with capacity close to item size
    capacity_diff = np.abs(bins_remain_cap[fit] - item)
    priorities[fit] += np.exp(-capacity_diff * 0.3) * 0.3  # Reduce weight

    # Add a small bonus for almost full bins to encourage their completion
    almost_full = (bins_remain_cap[fit] < (item * 1.2)) & (bins_remain_cap[fit] >= item)
    priorities[fit][almost_full] += 0.2


    return priorities
```
