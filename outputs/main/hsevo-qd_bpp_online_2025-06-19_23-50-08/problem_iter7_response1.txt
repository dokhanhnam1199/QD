import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_penalty_strength: float = 4.797216527835367,
                fragmentation_penalty_strength: float = 3.380362187990585, nearly_full_threshold: float = 0.1729983090004831,
                nearly_full_penalty: float = 0.24986286593005122, can_fit_part_threshold: float = 0.16083553415514557,
                can_fit_part_bonus: float = 0.11868472890302954) -> np.ndarray:
    """Prioritizes bins considering fill rate, waste, and future fit."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) # Assuming bins are of same capacity.

    fit = item <= bins_remain_cap
    waste = bins_remain_cap - item

    priorities[~fit] = -np.inf  # Impossible to fit

    if np.any(fit):
        # Fill ratio + waste penalty, adjusted penalty strength for finer control.
        priorities[fit] = (item / bins_remain_cap[fit]) + np.exp(-waste[fit] * waste_penalty_strength)

        # Heuristic 1: Prioritize bins with remaining capacity closest to common item sizes to reduce fragmentation
        # Consider a range of common item sizes (e.g., 1/4, 1/3, 1/2 of bin capacity)
        common_sizes = np.array([bin_capacity/4, bin_capacity/3, bin_capacity/2])
        remaining_after_fit = bins_remain_cap[fit] - item
        size_diffs = np.abs(remaining_after_fit[:, np.newaxis] - common_sizes)
        min_size_diffs = np.min(size_diffs, axis=1) #Closest match
        priorities[fit] += np.exp(-min_size_diffs * fragmentation_penalty_strength)

        # Heuristic 2: Slightly penalize bins that become nearly full after packing to leave room for small adjustments.
        nearly_full = (waste[fit] / bin_capacity) < nearly_full_threshold
        priorities[fit][nearly_full] -= nearly_full_penalty  # Slightly demote

        #Heuristic 3: Bonus for bins that have a remaining capacity that can fit at least a certain percentage (e.g., 20%) of the current item. Prevents creating too small waste.
        can_fit_part = (bins_remain_cap[fit] - item) >= (can_fit_part_threshold * item)
        priorities[fit][can_fit_part] += can_fit_part_bonus

    return priorities
