```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins: fill rate, waste, common sizes, and prevents near-full bins."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) # Assuming bins are of same capacity.

    fit = item <= bins_remain_cap
    waste = bins_remain_cap - item

    priorities[~fit] = -np.inf  # Impossible to fit

    if np.any(fit):
        # Fill ratio + waste penalty.
        priorities[fit] = (item / bins_remain_cap[fit]) + np.exp(-waste[fit] * 5)

        # Prioritize bins with remaining capacity closest to common item sizes.
        common_sizes = np.array([bin_capacity/4, bin_capacity/3, bin_capacity/2])
        remaining_after_fit = bins_remain_cap[fit] - item
        size_diffs = np.abs(remaining_after_fit[:, np.newaxis] - common_sizes)
        min_size_diffs = np.min(size_diffs, axis=1) #Closest match
        priorities[fit] += np.exp(-min_size_diffs * 3)

        # Penalize bins that become nearly full.
        nearly_full = (waste[fit] / bin_capacity) < 0.1
        priorities[fit][nearly_full] -= 0.2  # Slightly demote

        #Bonus for bins that can fit at least a certain percentage (e.g., 20%) of the current item
        can_fit_part = (bins_remain_cap[fit] - item) >= (0.2 * item)
        priorities[fit][can_fit_part] += 0.1

    return priorities
```
