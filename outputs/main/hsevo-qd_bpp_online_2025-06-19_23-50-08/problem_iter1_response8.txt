```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item with minimal waste,
    but also incorporates a factor to avoid bins being filled too quickly
    and leaving very small items unable to be packed later.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Iterate through bins and calculate priorities
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate wasted space if item is placed in bin
            waste = cap - item

            # Priority is inversely proportional to waste (smaller waste is better)
            # and also incorporates a term related to how full the bin is (encouraging
            # filling partially empty bins without completely topping off, for future packing.

            # Using a scaled value of remaining capacity, such that filling the last small spaces is
            # not highly rewarded. This creates a balance: don't waste space, but don't totally fill up
            # a bin such that you are always creating tiny space that's practically useless.

            # Use max(0, ...) in case cap is very close to item size but numerically slightly smaller, 
            # which might cause negative or undefined calculations such as log(-).
            
            scaled_cap = np.sqrt(cap)
            priorities[i] = (1.0 / (waste + 1e-9)) + (scaled_cap / np.sum(bins_remain_cap) +1e-9)

        else:
            # Item doesn't fit, so priority is 0
            priorities[i] = -np.inf

    return priorities
```
