```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by the 'quantum' idea of considering all possibilities
    and favoring states closer to 'full'.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give large negative priority to bins that cannot fit the item
    cannot_fit = item > bins_remain_cap
    priorities[cannot_fit] = -np.inf  # Avoid these bins at all costs

    # Prioritize bins based on a combination of factors:
    # 1. Remaining capacity *after* potentially adding the item (smaller is better)
    # 2. Percentage fullness *after* adding item (higher is better)
    # 3. Avoid bins which will become nearly empty by applying a small constant factor

    can_fit = item <= bins_remain_cap

    remaining_after = bins_remain_cap[can_fit] - item
    fullness_after = (1 - remaining_after/ np.max(bins_remain_cap)) # Use the max remaining capacity as a proxy for bin size since it is fixed

    priorities[can_fit] = fullness_after * 10 - remaining_after

    almost_empty = remaining_after < 0.1 * np.max(bins_remain_cap)
    priorities[can_fit][almost_empty] -= 2 # Slightly penalized

    return priorities
```
