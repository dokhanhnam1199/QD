```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Identify bins that can accommodate the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # No bin can fit, prioritize bins with the largest remaining capacity
        # even if it's not enough.
        priorities = bins_remain_cap.copy()
        return priorities

    # Calculate the waste if the item is placed in each valid bin.
    waste = bins_remain_cap[valid_bins] - item

    # Prioritize bins with smaller waste first.
    # Adding a small constant to avoid zero-division
    priorities[valid_bins] = 1.0 / (waste + 0.00001)

    # Further refine priority by considering how full the bin will be.
    fill_ratios = (item) / (bins_remain_cap[valid_bins])
    priorities[valid_bins] += fill_ratios

    # Add a bonus to bins that will be exactly full after placing the item
    exactly_full = waste < 0.00001 # account for floating point issues
    if np.any(valid_bins & exactly_full):
        priorities[valid_bins & exactly_full] += 10  # Substantially boost the exactly full

    return priorities
```
