```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employs a combination of factors:
    1. Remaining capacity after placing the item (higher is better) - ensures we don't fill bins too much
    2. Closeness to perfect fill (absolute difference to zero remaining capacity after placement) - promotes efficient packing

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    remaining_after = bins_remain_cap - item
    # Give very low priority to bins that can't fit the item. A large negative number will always be the lowest.
    remaining_after[remaining_after < 0] = -np.inf

    # Remaining Capacity: Larger remaining capacity is generally better, but not always.
    capacity_priority = remaining_after

    # Closeness to perfect fill: Reward bins that get close to being full
    perfect_fill_distance = np.abs(remaining_after)
    fill_priority = -perfect_fill_distance # Closer to zero is better, so negate.
    # Combine the priorities (you can adjust the weights here as needed)
    priorities = capacity_priority + fill_priority

    return priorities
```
