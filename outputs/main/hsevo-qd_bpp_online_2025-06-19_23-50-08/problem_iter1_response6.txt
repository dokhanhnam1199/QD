```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small negative value to discourage invalid bins.
    priorities = -np.inf * np.ones_like(bins_remain_cap)

    # Identify bins where the item fits.
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bin can fit, try the almost full bin
        closest_capacity = np.min(np.abs(bins_remain_cap-item))
        closest_bins = np.abs(bins_remain_cap-item) == closest_capacity
        priorities[closest_bins] = -10 #extremely small
        return priorities


    # Calculate the waste if the item is placed in each valid bin.
    waste = bins_remain_cap - item

    # Give a higher priority to bins with smaller waste (First Fit Decreasing like).
    # Use an exponential function to strongly penalize larger waste.
    priorities[valid_bins] = np.exp(-5 * waste[valid_bins] / np.max(bins_remain_cap)) # Scale waste for better performance

    # If the item almost fills the bin (high occupancy), give it an extra boost.
    almost_full = (item / bins_remain_cap) > 0.95
    priorities[almost_full] += 2.0  # Small additive bonus for almost full

    # Introduce a small random factor to break ties and explore different solutions.
    priorities += 0.01 * np.random.rand(len(bins_remain_cap))
    return priorities
```
