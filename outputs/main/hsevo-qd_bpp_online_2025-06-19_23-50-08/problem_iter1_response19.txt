```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin is only eligible if it can fit the item
    eligible_bins = bins_remain_cap >= item
    
    if not np.any(eligible_bins):
        return priorities # No bin can fit the item, return all zeros

    # Calculate waste if item is placed in bin
    waste = bins_remain_cap - item

    # Prioritize bins with least waste *within* the eligible bins.
    # First, set priorities to a very small number for ineligible bins
    priorities[~eligible_bins] = -np.inf

    # Scale eligible bins by remaining capacity for a smoother gradient
    priorities[eligible_bins] = (bins_remain_cap[eligible_bins] / np.max(bins_remain_cap[eligible_bins]))  - (waste[eligible_bins] / np.max(bins_remain_cap[eligible_bins]))
    
    # Add a bonus if the item perfectly fits
    perfect_fit = (waste == 0) & eligible_bins
    priorities[perfect_fit] += 1.0  # Significantly boost perfect fit priority

    return priorities
```
