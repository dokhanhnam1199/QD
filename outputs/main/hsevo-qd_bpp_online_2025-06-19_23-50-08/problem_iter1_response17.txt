```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin must have enough capacity to be considered
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # No eligible bins, put very low priority to all so we can choose randomly later
        return priorities

    # First Fit Decreasing Intuition: Try to fill bins as much as possible.
    # Reward bins where the item fits closely.  Avoid fragmentation, ya know?

    remaining_after_fit = bins_remain_cap[eligible_bins] - item
    priorities[eligible_bins] = np.exp(-remaining_after_fit) # Exponential decay of waste
    # Bonus: Strongly penalize bins where remaining capacity after putting item is tiny (e.g., less than 0.1)
    tiny_waste = remaining_after_fit < 0.1
    priorities[eligible_bins][tiny_waste] *= 0.1 # Reduce priority, risk of becoming useless
    # Another Bonus: Slightly favor the fullest bin available to concentrate space usage.
    max_cap = np.max(bins_remain_cap[eligible_bins])

    priorities[eligible_bins] += 0.001 * (bins_remain_cap[eligible_bins] / max_cap)
    return priorities
```
