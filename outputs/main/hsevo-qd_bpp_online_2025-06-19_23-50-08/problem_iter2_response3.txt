```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fill rate and wasted space, with infeasibility penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit = item <= bins_remain_cap
    waste = bins_remain_cap - item

    priorities[~fit] = -np.inf # very low priority
    
    # Combine fill ratio with waste minimization.
    priorities[fit] = (item / bins_remain_cap[fit]) + np.exp(-waste[waste >= 0] * 5) # Adjust waste exponent

    # Further boost bins that are nearly full after adding the item.
    near_full = (waste >= 0) & (waste <= 0.1)
    priorities[near_full] += 2  # Substantially prioritize almost full bins

    return priorities
```
