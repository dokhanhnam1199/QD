{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced heuristics for TSP, combining inverse distance,\n    node degree penalty, and sparsity. Normalizes and sharpens\n    heuristic scores to represent edge promisingness more effectively.\n    \"\"\"\n    # Avoid division by zero\n    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)\n\n    # 1. Inverse distance\n    heuristic_matrix = 1 / distance_matrix\n\n    # 2. Node degree penalty\n    num_nodes = distance_matrix.shape[0]\n    degree_penalty = np.zeros_like(distance_matrix)\n    node_strengths = np.sum(heuristic_matrix, axis=0)\n\n    for i in range(num_nodes):\n        for j in range(num_nodes):\n            if i != j:\n                degree_penalty[i, j] = 1 / (node_strengths[i] + node_strengths[j])\n\n    # Combine inverse distance and node degree penalty\n    heuristic_matrix = heuristic_matrix * degree_penalty\n\n    # 3. Sparsification and Edge Sharpening\n    # Calculate the mean heuristic value for each node\n    node_mean_heuristic = np.mean(heuristic_matrix, axis=1, keepdims=True)\n\n    # Sharpen edges by emphasizing those significantly above the node's mean\n    sharpening_factor = 2.0  # Adjust for desired sharpness\n    sharpened_heuristic = np.where(heuristic_matrix > sharpening_factor * node_mean_heuristic,\n                                  heuristic_matrix,\n                                  0.0)  # Sparsify by setting others to zero\n\n    # 4. Normalization across rows and columns\n    row_sum = np.sum(sharpened_heuristic, axis=1, keepdims=True)\n    col_sum = np.sum(sharpened_heuristic, axis=0, keepdims=True)\n\n    # Avoid division by zero\n    row_sum = np.where(row_sum == 0, 1e-9, row_sum)\n    col_sum = np.where(col_sum == 0, 1e-9, col_sum)\n\n    row_normalized = sharpened_heuristic / row_sum\n    col_normalized = sharpened_heuristic / col_sum\n\n    # Combine row and column normalized values\n    final_heuristic_matrix = row_normalized * col_normalized\n\n    #Zero out diagonals (no self-loops)\n    np.fill_diagonal(final_heuristic_matrix, 0)\n    final_heuristic_matrix = np.nan_to_num(final_heuristic_matrix, nan=0.0, posinf=0.0, neginf=0.0)\n\n    return final_heuristic_matrix\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}