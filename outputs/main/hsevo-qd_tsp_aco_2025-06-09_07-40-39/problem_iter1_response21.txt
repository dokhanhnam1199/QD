```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A heuristic function for the Traveling Salesman Problem (TSP) based on stochastic
    solution sampling inspired by physical analogies and general optimization strategies.
    Leverages a combination of distance-based attraction, pheromone-like reinforcement,
    and probabilistic exploration to guide the search towards promising edges.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]
                                       represents the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing the
                     heuristic values for each edge.  Higher values indicate more
                     promising edges to include in the TSP solution.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Inverse distance as a base attraction.  Shorter distances are more attractive.
    attraction = 1.0 / (distance_matrix + np.eye(n))  # Add identity to avoid division by zero

    # 2. Pheromone-like reinforcement. Initially uniform, but can be updated during search.
    pheromone = np.ones((n, n))

    # 3. Introduce a stochastic element (temperature-like parameter). Higher temperature
    #    increases exploration (randomness). The best temperature will be determined
    #    during training of the overall algorithm that USES this heuristic.
    temperature = 1.0  # Adjustable parameter for controlling exploration

    # 4. Combine attraction and pheromone, then apply a stochastic function
    heuristic_matrix = (attraction ** 2 * pheromone)**(1/temperature)

    # 5. Encourage connections to relatively isolated cities
    city_degrees = np.sum(attraction, axis=0)
    isolation_penalty = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            isolation_penalty[i,j] = (1/(city_degrees[i]+city_degrees[j]))

    # 6. Update heurisitic matrix
    heuristic_matrix = heuristic_matrix * (isolation_penalty**0.5)

    # Ensure no division by zero issues by setting diagonal to zero.
    np.fill_diagonal(heuristic_matrix, 0)
    return heuristic_matrix
```
