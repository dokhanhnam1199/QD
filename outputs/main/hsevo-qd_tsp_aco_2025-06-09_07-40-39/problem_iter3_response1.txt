```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A more advanced heuristic combining inverse distance, node degree,
    and triangle inequality considerations for TSP, with sparsification.
    """
    num_nodes = distance_matrix.shape[0]

    # Avoid division by zero
    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)

    # 1. Inverse distance
    heuristic_matrix = 1 / distance_matrix

    # 2. Node degree penalty
    node_strengths = np.sum(heuristic_matrix, axis=0)
    degree_penalty = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                degree_penalty[i, j] = 1 / (node_strengths[i] + node_strengths[j])

    heuristic_matrix = heuristic_matrix * degree_penalty

    # 3. Triangle inequality heuristic: Penalize edges that bypass potential shortcuts.
    triangle_penalty = np.ones_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                for k in range(num_nodes):
                    if k != i and k != j:
                        triangle_penalty[i, j] = min(triangle_penalty[i, j], (distance_matrix[i, j] + 1e-9) / (distance_matrix[i, k] + distance_matrix[k, j] + 1e-9))

    heuristic_matrix = heuristic_matrix * triangle_penalty

    # 4. Edge Normalization - Using a combination of row and column normalization
    row_mean = np.mean(heuristic_matrix, axis=1, keepdims=True)
    row_std = np.std(heuristic_matrix, axis=1, keepdims=True)

    col_mean = np.mean(heuristic_matrix, axis=0, keepdims=True)
    col_std = np.std(heuristic_matrix, axis=0, keepdims=True)

    row_std = np.where(row_std == 0, 1e-6, row_std)
    col_std = np.where(col_std == 0, 1e-6, col_std)

    row_normalized = np.exp((heuristic_matrix - row_mean) / row_std)
    col_normalized = np.exp((heuristic_matrix - col_mean) / col_std)

    heuristic_matrix = row_normalized * col_normalized
    # 5. Sparsification: Zero out less promising edges
    threshold = np.mean(heuristic_matrix) * 0.1  # Dynamic threshold based on mean
    heuristic_matrix = np.where(heuristic_matrix < threshold, 0, heuristic_matrix)
    
    # Zero out diagonals (no self-loops)
    np.fill_diagonal(heuristic_matrix, 0)
    heuristic_matrix = np.nan_to_num(heuristic_matrix, nan=0.0, posinf=0.0, neginf=0.0)


    return heuristic_matrix
```
