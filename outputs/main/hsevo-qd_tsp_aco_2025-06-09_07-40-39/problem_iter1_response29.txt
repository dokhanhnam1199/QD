```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A more sophisticated heuristic for the Traveling Salesman Problem (TSP).
    Combines inverse distance with a measure of node centrality (degree).

    Args:
        distance_matrix: A numpy ndarray representing the distance matrix.
                         distance_matrix[i, j] is the distance between node i and node j.
                         Assume it is symmetric.

    Returns:
        A numpy ndarray of the same shape as distance_matrix, representing
        the prior probability (or heuristic score) of including each edge
        in a solution. Higher values indicate a more promising edge.
    """

    n = distance_matrix.shape[0]

    # 1. Inverse Distance: Basic heuristic - shorter distances are preferred.
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # 2. Node Degree Centrality:
    #    Nodes with higher "degree" (sum of inverse distances to other nodes) are considered more central.
    #    Edges connected to more central nodes are considered more important.
    node_degree = np.sum(inverse_distance, axis=1)

    # Normalize node degrees
    node_degree_normalized = (node_degree - np.min(node_degree)) / (np.max(node_degree) - np.min(node_degree) + 1e-9)

    # Create an edge importance matrix based on node degree centrality
    edge_degree_importance = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            edge_degree_importance[i, j] = node_degree_normalized[i] + node_degree_normalized[j]

    # 3. Combine Inverse Distance and Node Degree Centrality:
    #    Multiply the inverse distance by the edge degree importance to give higher
    #    priority to shorter edges connecting to more central nodes.
    heuristic_matrix = inverse_distance * edge_degree_importance

    return heuristic_matrix
```
