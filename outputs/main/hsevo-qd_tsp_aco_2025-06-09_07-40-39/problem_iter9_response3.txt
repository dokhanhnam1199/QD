```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, degree penalty, and edge importance based on triangle inequality.
    Sparsifies edges using adaptive thresholding.
    """
    zero_replacement_value = 1e-9
    std_replacement_value = 1e-6
    nan_replacement_value = 0.0
    sharpening_factor = 1.1
    triangle_factor = 0.75 #tuneable
    degree_factor = 0.5 #tuneable

    # Avoid division by zero
    distance_matrix = np.where(distance_matrix == 0, zero_replacement_value, distance_matrix)

    # 1. Inverse distance
    heuristic_matrix = 1 / distance_matrix

    # 2. Node degree penalty
    num_nodes = distance_matrix.shape[0]
    degree_penalty = np.zeros_like(distance_matrix)
    node_strengths = np.sum(heuristic_matrix, axis=0)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                degree_penalty[i, j] = 1 / (node_strengths[i] + node_strengths[j])

    # Combine inverse distance and node degree penalty
    heuristic_matrix = heuristic_matrix * (degree_penalty**degree_factor)

    # 3. Triangle inequality heuristic: reward edges that form "good" triangles
    triangle_heuristic = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                min_sum = np.inf
                for k in range(num_nodes):
                    if k != i and k != j:
                        sum_dist = distance_matrix[i, k] + distance_matrix[k, j]
                        min_sum = min(min_sum, sum_dist)
                triangle_heuristic[i, j] = distance_matrix[i, j] / min_sum # Lower is better - normalized

    heuristic_matrix = heuristic_matrix * (1 / (triangle_heuristic**triangle_factor))

    # 4. Adaptive Sparsification based on local mean
    node_mean_heuristic = np.mean(heuristic_matrix, axis=1, keepdims=True)
    sharpened_heuristic = np.where(heuristic_matrix > sharpening_factor * node_mean_heuristic,
                                  heuristic_matrix,
                                  0.0)  # Sparsify by setting others to zero

    # 5. Normalize - Row and Column Normalization
    row_mean = np.mean(sharpened_heuristic, axis=1, keepdims=True)
    row_std = np.std(sharpened_heuristic, axis=1, keepdims=True)

    col_mean = np.mean(sharpened_heuristic, axis=0, keepdims=True)
    col_std = np.std(sharpened_heuristic, axis=0, keepdims=True)

    row_std = np.where(row_std == 0, std_replacement_value, row_std)
    col_std = np.where(col_std == 0, std_replacement_value, col_std)

    row_normalized = np.exp((sharpened_heuristic - row_mean) / row_std)
    col_normalized = np.exp((sharpened_heuristic - col_mean) / col_std)

    final_heuristic_matrix = row_normalized * col_normalized

    #Zero out diagonals (no self-loops)
    np.fill_diagonal(final_heuristic_matrix, 0)

    final_heuristic_matrix = np.nan_to_num(final_heuristic_matrix, nan=nan_replacement_value, posinf=nan_replacement_value, neginf=nan_replacement_value)

    return final_heuristic_matrix
```
