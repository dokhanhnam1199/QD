```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Combines inverse distance, node degree penalty, adaptive normalization,
    and sparsification based on distance percentile.
    """

    zero_replacement_value = np.inf
    std_replacement_value = 1e-6
    nan_replacement_value = 0.0
    sparsity_threshold_percentile = 75 # Edges with distances above this percentile are penalized.

    # Avoid division by zero
    distance_matrix = np.where(distance_matrix == 0, zero_replacement_value, distance_matrix)

    # 1. Inverse distance
    heuristic_matrix = 1 / distance_matrix

    # 2. Node degree penalty
    num_nodes = distance_matrix.shape[0]
    degree_penalty = np.zeros_like(distance_matrix)
    node_strengths = np.sum(heuristic_matrix, axis=0)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                degree_penalty[i, j] = 1 / (node_strengths[i] + node_strengths[j])

    # Combine inverse distance and node degree penalty
    heuristic_matrix = heuristic_matrix * degree_penalty

    # 3. Adaptive Normalization using mean and variance
    row_mean = np.mean(heuristic_matrix, axis=1, keepdims=True)
    row_std = np.std(heuristic_matrix, axis=1, keepdims=True)

    col_mean = np.mean(heuristic_matrix, axis=0, keepdims=True)
    col_std = np.std(heuristic_matrix, axis=0, keepdims=True)

    row_std = np.where(row_std == 0, std_replacement_value, row_std)
    col_std = np.where(col_std == 0, std_replacement_value, col_std)

    row_normalized = np.exp((heuristic_matrix - row_mean) / row_std)
    col_normalized = np.exp((heuristic_matrix - col_mean) / col_std)

    final_heuristic_matrix = row_normalized * col_normalized

    # 4. Sparsification based on distance percentile
    distance_threshold = np.percentile(distance_matrix[distance_matrix != np.inf], sparsity_threshold_percentile) #exclude inf values
    sparsity_mask = distance_matrix > distance_threshold
    final_heuristic_matrix[sparsity_mask] = final_heuristic_matrix[sparsity_mask] * 0.1  # Penalize less promising edges instead of zeroing out

    #Zero out diagonals (no self-loops)
    np.fill_diagonal(final_heuristic_matrix, 0)

    final_heuristic_matrix = np.nan_to_num(final_heuristic_matrix, nan=nan_replacement_value, posinf=nan_replacement_value, neginf=nan_replacement_value)

    return final_heuristic_matrix
```
