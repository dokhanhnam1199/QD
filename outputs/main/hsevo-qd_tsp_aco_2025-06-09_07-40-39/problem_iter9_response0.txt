```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, degree penalty, clustering coefficient, and adaptive sparsification.
    """
    zero_replacement_value = 1e-9
    std_replacement_value = 1e-6
    nan_replacement_value = 0.0
    sharpening_factor = 1.1
    clustering_influence = 0.1
    degree_influence = 0.2

    # Avoid division by zero
    distance_matrix = np.where(distance_matrix == 0, zero_replacement_value, distance_matrix)

    # 1. Inverse distance
    heuristic_matrix = 1 / distance_matrix

    # 2. Node degree penalty
    num_nodes = distance_matrix.shape[0]
    degree_penalty = np.zeros_like(distance_matrix)
    node_strengths = np.sum(heuristic_matrix, axis=0)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                degree_penalty[i, j] = 1 / (1 + node_strengths[i] + node_strengths[j]) #Add 1 to prevent very large values

    # Combine inverse distance and node degree penalty
    heuristic_matrix = heuristic_matrix * (degree_penalty**degree_influence)

    # 3. Clustering coefficient approximation (using shared neighbors)
    clustering_matrix = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                neighbors_i = np.where(heuristic_matrix[i, :] > 0)[0]
                neighbors_j = np.where(heuristic_matrix[j, :] > 0)[0]
                common_neighbors = np.intersect1d(neighbors_i, neighbors_j).size
                clustering_matrix[i, j] = common_neighbors / (min(neighbors_i.size, neighbors_j.size)+ 1e-9) #Avoid division by zero

    heuristic_matrix = heuristic_matrix * (1 + clustering_influence * clustering_matrix)

    # 4. Adaptive Sparsification based on mean and std
    heuristic_mean = np.mean(heuristic_matrix)
    heuristic_std = np.std(heuristic_matrix)

    threshold = heuristic_mean + sharpening_factor * heuristic_std
    sharpened_heuristic = np.where(heuristic_matrix > threshold, heuristic_matrix, 0.0)

    # 5. Variance Normalization (row-wise and column-wise) - handle zero std better
    row_mean = np.mean(sharpened_heuristic, axis=1, keepdims=True)
    row_std = np.std(sharpened_heuristic, axis=1, keepdims=True)
    col_mean = np.mean(sharpened_heuristic, axis=0, keepdims=True)
    col_std = np.std(sharpened_heuristic, axis=0, keepdims=True)
    row_std = np.where(row_std == 0, std_replacement_value, row_std)
    col_std = np.where(col_std == 0, std_replacement_value, col_std)

    row_normalized = np.exp((sharpened_heuristic - row_mean) / row_std)
    col_normalized = np.exp((sharpened_heuristic - col_mean) / col_std)
    final_heuristic_matrix = row_normalized * col_normalized

    #Zero out diagonals (no self-loops)
    np.fill_diagonal(final_heuristic_matrix, 0)

    final_heuristic_matrix = np.nan_to_num(final_heuristic_matrix, nan=nan_replacement_value, posinf=nan_replacement_value, neginf=nan_replacement_value)

    return final_heuristic_matrix
```
