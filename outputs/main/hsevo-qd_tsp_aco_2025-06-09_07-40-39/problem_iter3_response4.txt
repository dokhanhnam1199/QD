```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node degree, and triangle inequality considerations for TSP.
    Sparsifies the matrix by setting unpromising elements to zero.
    """
    num_nodes = distance_matrix.shape[0]

    # Avoid division by zero
    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)

    # 1. Inverse distance
    heuristic_matrix = 1 / distance_matrix

    # 2. Node degree penalty
    node_strengths = np.sum(heuristic_matrix, axis=0)
    degree_penalty = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                degree_penalty[i, j] = 1 / (node_strengths[i] + node_strengths[j])

    # Combine inverse distance and node degree penalty
    heuristic_matrix = heuristic_matrix * degree_penalty

    # 3. Triangle inequality heuristic
    triangle_inequality = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                min_detour = np.inf
                for k in range(num_nodes):
                    if k != i and k != j:
                        detour = distance_matrix[i, k] + distance_matrix[k, j]
                        min_detour = min(min_detour, detour)
                triangle_inequality[i, j] = distance_matrix[i, j] / min_detour  # Lower is better

    heuristic_matrix = heuristic_matrix * (1 / triangle_inequality)  # Combine with triangle inequality

    # 4. Sparsification (Zero out unpromising edges)
    threshold = np.mean(heuristic_matrix) * 0.2 # Dynamic threshold based on mean
    heuristic_matrix = np.where(heuristic_matrix < threshold, 0, heuristic_matrix) # Zero if below threshold


    # 5. Row-wise and Column-wise Normalization with exponential scaling
    row_sums = np.sum(heuristic_matrix, axis=1, keepdims=True)
    col_sums = np.sum(heuristic_matrix, axis=0, keepdims=True)

    row_sums = np.where(row_sums == 0, 1e-9, row_sums) # Avoid division by zero
    col_sums = np.where(col_sums == 0, 1e-9, col_sums)

    row_normalized = heuristic_matrix / row_sums
    col_normalized = heuristic_matrix / col_sums

    heuristic_matrix = np.sqrt(row_normalized * col_normalized) # Geometric mean for stability


    #Zero out diagonals (no self-loops)
    np.fill_diagonal(heuristic_matrix, 0)
    heuristic_matrix = np.nan_to_num(heuristic_matrix, nan=0.0, posinf=0.0, neginf=0.0)


    return heuristic_matrix
```
