```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Hawking-inspired TSP Heuristics: Gravitational Analogy with Entropic Perturbation.

    This heuristic leverages a gravitational analogy: cities are treated as celestial
    bodies, and edge desirability is inversely proportional to distance (gravity).
    To escape local minima (deterministic orbits), we introduce an "entropic perturbation"
    based on simulated Hawking radiation, diversifying the search.

    Specifically, short edges are more desirable.
    For each node, the desirability of the closest edges is increased.
    Edges are further stochastically perturbed according to temperature parameter
    proportional to (1 - edge desirability).

    Args:
        distance_matrix (np.ndarray): The distance matrix between cities.

    Returns:
        np.ndarray: Heuristic desirability matrix (same shape as distance_matrix).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Gravitational component: Inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Avoid division by zero

    # Local enhancement: Gravitational focusing on nearest neighbors.
    for i in range(n):
        # Find the closest neighbours
        distances = distance_matrix[i, :]
        closest_indices = np.argsort(distances)[1:min(4, n)]  # Exclude self

        for j in closest_indices:
            heuristic_matrix[i, j] *= 1.5 # Enhance desirability

    # Entropic Perturbation (Hawking Radiation): introduce diversity
    temperature = 0.1
    for i in range(n):
        for j in range(n):
            if i != j:
                # Fluctuation likelihood inversely proportional to heuristic
                perturbation = np.random.normal(0, temperature * (1 - heuristic_matrix[i, j]))
                heuristic_matrix[i, j] += perturbation


    # Ensure positive values, though relative values matter the most
    heuristic_matrix = np.abs(heuristic_matrix)
    return heuristic_matrix
```
