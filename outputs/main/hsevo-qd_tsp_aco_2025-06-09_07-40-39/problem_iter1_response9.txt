```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristic for the Traveling Salesman Problem.  Combines inverse distance
    with a measure of the "average distance" from each node to others, aiming to
    favor edges connecting nodes with high connectivity (low average distance).

    Args:
        distance_matrix (np.ndarray):  A 2D numpy array representing the distance
                                       matrix between cities. distance_matrix[i, j]
                                       is the distance between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing heuristic values for each edge. Higher values
                    indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    avg_distances = np.mean(distance_matrix, axis=1, keepdims=True) #Average distance from each node to the rest.
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = (1 / distance_matrix[i, j]) * (avg_distances[i] * avg_distances[j])
            else:
                heuristic_matrix[i, j] = 0 # Do not include cycles

    return heuristic_matrix
```
