```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Generates heuristics for the Traveling Salesman Problem based on the distance matrix.

    This version combines several strategies:
    1. Inverse distance: Shorter distances are generally more desirable.
    2. Nearest neighbor consideration: Edges connecting to nodes with few nearby neighbors are penalized.
    3. Global distance context: Edges are also evaluated based on their distance relative to the average distance in the matrix.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as the distance matrix,
                      representing the heuristic values for each edge. Higher values indicate
                      a more promising edge.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance heuristic
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero
    heuristics = inverse_distance

    # 2. Nearest neighbor heuristic
    nearest_neighbors = np.zeros(n)
    for i in range(n):
        distances = distance_matrix[i, :]
        nearest_neighbor_distance = np.partition(distances, 2)[2]  # Distance to the 3rd nearest neighbor.
        nearest_neighbors[i] = nearest_neighbor_distance

    for i in range(n):
        for j in range(n):
            if i != j:
                # Penalize edges connecting to nodes far from each other (nearest neighbors wise)
                heuristics[i, j] /= (nearest_neighbors[i] + nearest_neighbors[j]) / 2

    # 3. Global distance context heuristic
    average_distance = np.mean(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Edges significantly shorter than the average are further incentivized
                heuristics[i, j] *= np.exp(-distance_matrix[i, j] / average_distance)

    # Normalize the heuristics
    max_heuristic = np.max(heuristics[np.isfinite(heuristics)])
    heuristics[~np.isfinite(heuristics)] = 0  # Handle infinities, setting them to zero
    heuristics = heuristics / (max_heuristic + 1e-9) #prevent div by 0
    return heuristics
```
