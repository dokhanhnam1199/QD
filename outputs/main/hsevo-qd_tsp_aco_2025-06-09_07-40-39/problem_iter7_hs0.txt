import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, sharpening_factor: float = 4.82789516429475, zero_replacement: float = 7.384034862647407e-07) -> np.ndarray:
    """
    Enhanced heuristics for TSP, combining inverse distance,
    node degree penalty, and sparsity. Normalizes and sharpens
    heuristic scores to represent edge promisingness more effectively.
    """
    # Avoid division by zero
    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)

    # 1. Inverse distance
    heuristic_matrix = 1 / distance_matrix

    # 2. Node degree penalty
    num_nodes = distance_matrix.shape[0]
    degree_penalty = np.zeros_like(distance_matrix)
    node_strengths = np.sum(heuristic_matrix, axis=0)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                degree_penalty[i, j] = 1 / (node_strengths[i] + node_strengths[j])

    # Combine inverse distance and node degree penalty
    heuristic_matrix = heuristic_matrix * degree_penalty

    # 3. Sparsification and Edge Sharpening
    # Calculate the mean heuristic value for each node
    node_mean_heuristic = np.mean(heuristic_matrix, axis=1, keepdims=True)

    # Sharpen edges by emphasizing those significantly above the node's mean
    sharpened_heuristic = np.where(heuristic_matrix > sharpening_factor * node_mean_heuristic,
                                  heuristic_matrix,
                                  0.0)  # Sparsify by setting others to zero

    # 4. Normalization across rows and columns
    row_sum = np.sum(sharpened_heuristic, axis=1, keepdims=True)
    col_sum = np.sum(sharpened_heuristic, axis=0, keepdims=True)

    # Avoid division by zero
    row_sum = np.where(row_sum == 0, zero_replacement, row_sum)
    col_sum = np.where(col_sum == 0, zero_replacement, col_sum)

    row_normalized = sharpened_heuristic / row_sum
    col_normalized = sharpened_heuristic / col_sum

    # Combine row and column normalized values
    final_heuristic_matrix = row_normalized * col_normalized

    #Zero out diagonals (no self-loops)
    np.fill_diagonal(final_heuristic_matrix, 0)
    final_heuristic_matrix = np.nan_to_num(final_heuristic_matrix, nan=0.0, posinf=0.0, neginf=0.0)

    return final_heuristic_matrix
