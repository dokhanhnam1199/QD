```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Einstein's heuristic for the Traveling Salesman Problem.

    This heuristic combines inverse distance with a "gravitational"
    attraction based on proximity to the centroid of all cities.  Edges
    connecting cities closer to the centroid are considered more
    promising, as they contribute more centrally to a tour's connectedness.
    A touch of randomness ensures diversity in sampled solutions.

    Args:
        distance_matrix (np.ndarray): A square matrix where
            distance_matrix[i, j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix,
            where each element represents the heuristic "promise" of
            including the corresponding edge in a solution.
    """
    n = distance_matrix.shape[0]

    # Calculate the centroid of the cities (assuming coordinates are implicitly 0 to n-1).
    centroid = np.array([np.mean(range(n)), np.mean(range(n))]) #approximation for actual geographic coordinates

    # Create coordinate array
    coordinates = np.array([[i] for i in range(n)])

    # Euclidean Distance of Each city from the center
    city_distances_from_centroid = np.linalg.norm(coordinates - centroid, axis=1) # Euclidean distance from centroid to each node

    # Attractiveness is inversely proportional to distance from centroid
    attractiveness = 1 / (city_distances_from_centroid + 1e-9)  # Adding a small number to avoid division by zero

    # Edge attractiveness combines city attractiveness
    edge_attractiveness = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:  # Avoid self-loops.  Distance matrix will handle inf, anyway.
                edge_attractiveness[i, j] = attractiveness[i] + attractiveness[j] # Combine edge attractiveness, the closer two edges are to the center, the higher probability of good edges

    # Overall heuristic: Combine inverse distance, edge attractiveness, and randomness
    heuristic_matrix = (1 / (distance_matrix + 1e-9)) + edge_attractiveness + 0.01 * np.random.rand(n, n)
    return heuristic_matrix
```
