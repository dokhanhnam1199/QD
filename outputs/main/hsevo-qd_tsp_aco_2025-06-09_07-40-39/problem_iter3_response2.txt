```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristics combining inverse distance, node degree, and triangle inequality considerations for TSP.
    Sparsifies the matrix by setting unpromising elements to zero.
    """
    # Avoid division by zero
    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)

    # 1. Inverse distance
    heuristic_matrix = 1 / distance_matrix

    # 2. Node degree penalty
    num_nodes = distance_matrix.shape[0]
    degree_penalty = np.zeros_like(distance_matrix)
    node_strengths = np.sum(heuristic_matrix, axis=0)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                degree_penalty[i, j] = 1 / (node_strengths[i] + node_strengths[j])

    # Combine inverse distance and node degree penalty
    heuristic_matrix = heuristic_matrix * degree_penalty

    # 3. Triangle Inequality Consideration (Edge promisingness based on neighbors)
    triangle_inequality_bonus = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                #Find a node k that minimizes the path i-k-j
                min_detour = np.inf
                for k in range(num_nodes):
                    if k != i and k != j:
                        detour = distance_matrix[i,k] + distance_matrix[k,j]
                        min_detour = min(min_detour, detour)
                triangle_inequality_bonus[i,j] = 1 / (min_detour + 1e-9) #avoid division by zero

    heuristic_matrix = heuristic_matrix + triangle_inequality_bonus

    # 4. Normalization using variance across each edges
    row_mean = np.mean(heuristic_matrix, axis=1, keepdims=True)
    row_std = np.std(heuristic_matrix, axis=1, keepdims=True)

    col_mean = np.mean(heuristic_matrix, axis=0, keepdims=True)
    col_std = np.std(heuristic_matrix, axis=0, keepdims=True)

    row_std = np.where(row_std == 0, 1e-6, row_std)
    col_std = np.where(col_std == 0, 1e-6, col_std)

    row_normalized = np.exp((heuristic_matrix - row_mean) / row_std)
    col_normalized = np.exp((heuristic_matrix - col_mean) / col_std)

    final_heuristic_matrix = row_normalized * col_normalized

    #Zero out diagonals (no self-loops)
    np.fill_diagonal(final_heuristic_matrix, 0)

    # 5. Sparsification: Zero out less promising edges
    threshold = np.mean(final_heuristic_matrix) * 0.2  # Dynamic threshold based on mean
    final_heuristic_matrix = np.where(final_heuristic_matrix < threshold, 0, final_heuristic_matrix)

    final_heuristic_matrix = np.nan_to_num(final_heuristic_matrix, nan=0.0, posinf=0.0, neginf=0.0)

    return final_heuristic_matrix
```
