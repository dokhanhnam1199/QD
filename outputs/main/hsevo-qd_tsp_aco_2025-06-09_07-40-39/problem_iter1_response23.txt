```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Marie Curie's Heuristic for TSP based on distance and connectivity.

    This heuristic combines the inverse distance with a connectivity factor
    estimated from the normalized sum of inverse distances to other nodes.
    The intuition is that shorter edges are better, but also edges connecting
    to nodes with high overall connectivity should be preferred. This is a
    more sophisticated approach than simply using the inverse distance.

    Args:
        distance_matrix (np.ndarray): A numpy array representing the distance
                                      matrix between cities.  distance_matrix[i, j]
                                      gives the distance from city i to city j.

    Returns:
        np.ndarray: A numpy array of the same shape as distance_matrix,
                      representing the heuristic values for each edge.
                      Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Add a small constant to avoid division by zero or infinite heuristic values
    epsilon = 1e-6

    # Calculate the inverse of the distance matrix
    inverse_distance = 1.0 / (distance_matrix + epsilon)

    # Calculate a connectivity factor for each node
    node_connectivity = np.sum(inverse_distance, axis=1) / n  # Normalize by the number of nodes

    # Combine inverse distance with the connectivity factor
    for i in range(n):
        for j in range(n):
            heuristic_matrix[i, j] = inverse_distance[i, j] * (node_connectivity[i] + node_connectivity[j]) / 2

    return heuristic_matrix
```
