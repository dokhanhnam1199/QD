```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node degree, shortest path considerations, and adaptive sparsification.
    """
    zero_replacement_value = 1e-9
    nan_replacement_value = 0.0
    std_replacement_value = 1e-6
    distance_scaling = 0.8
    degree_exponent = 1.1

    # Avoid division by zero
    distance_matrix = np.where(distance_matrix == 0, zero_replacement_value, distance_matrix)

    # 1. Inverse distance with scaling
    heuristic_matrix = (1 / distance_matrix) ** distance_scaling

    # 2. Node Degree Penalty
    num_nodes = distance_matrix.shape[0]
    node_strengths = np.sum(heuristic_matrix, axis=0)
    degree_penalty = np.zeros_like(distance_matrix)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                degree_penalty[i, j] = 1 / (node_strengths[i] * node_strengths[j])**degree_exponent

    heuristic_matrix = heuristic_matrix * degree_penalty

    # 3. Shortest Path Consideration (crude approximation to avoid all-pairs shortest path)
    # Penalize edges that bypass nearby nodes.  This encourages more direct routes.
    shortest_path_penalty = np.ones_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Check if there's a significantly shorter path through a neighbor.  Only consider top 5 nearest neighbors
                neighbors = np.argsort(distance_matrix[i,:])[:6] # includes i itself
                for k in neighbors:
                    if k != i and k !=j:
                        if distance_matrix[i,k] + distance_matrix[k,j] < 0.9 * distance_matrix[i,j]:
                            shortest_path_penalty[i,j] = 0.5 # reduced penalty if shorter alternative paths exist
                            break

    heuristic_matrix = heuristic_matrix * shortest_path_penalty

    # 4. Adaptive Sparsification based on edge importance and local mean
    edge_importance = heuristic_matrix.copy() # can add other edge features here
    row_mean = np.mean(edge_importance, axis=1, keepdims=True)
    adaptive_threshold = 0.75 * row_mean # dynamically adjust based on local averages

    heuristic_matrix = np.where(heuristic_matrix > adaptive_threshold, heuristic_matrix, 0.0)

    # 5. Variance Normalization - Robust against outlier edges
    row_mean = np.mean(heuristic_matrix, axis=1, keepdims=True)
    row_std = np.std(heuristic_matrix, axis=1, keepdims=True)
    col_mean = np.mean(heuristic_matrix, axis=0, keepdims=True)
    col_std = np.std(heuristic_matrix, axis=0, keepdims=True)

    row_std = np.where(row_std == 0, std_replacement_value, row_std)
    col_std = np.where(col_std == 0, std_replacement_value, col_std)

    row_normalized = np.exp((heuristic_matrix - row_mean) / row_std)
    col_normalized = np.exp((heuristic_matrix - col_mean) / col_std)

    final_heuristic_matrix = row_normalized * col_normalized

    # Zero out diagonals (no self-loops)
    np.fill_diagonal(final_heuristic_matrix, 0)
    final_heuristic_matrix = np.nan_to_num(final_heuristic_matrix, nan=nan_replacement_value, posinf=nan_replacement_value, neginf=nan_replacement_value)
    return final_heuristic_matrix
```
