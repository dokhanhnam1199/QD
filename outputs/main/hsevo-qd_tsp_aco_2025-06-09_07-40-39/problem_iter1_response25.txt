```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Implements a heuristic for the Traveling Salesman Problem (TSP) based on:
    1. Inverse distance: Closer cities are more likely to be connected.
    2. Node Degree Preference: Penalizes high-degree nodes (prevents local optima saturation).
    3. Variance based normalization to create reasonable probability.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
                                         between cities. distance_matrix[i][j] is the
                                         distance between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                      representing the heuristic scores for each edge.  Higher
                      scores indicate a more promising edge.
    """

    # Avoid division by zero
    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)

    # 1. Inverse distance (more or less what we did before)
    heuristic_matrix = 1 / distance_matrix

    # 2. Node degree penalty - encourages exploration and avoids quickly settling
    #    on a suboptimal solution. This penalizes edges connected to nodes that
    #    already have many connections in the current (incomplete) tour.
    num_nodes = distance_matrix.shape[0]
    degree_penalty = np.zeros_like(distance_matrix)

    #Calculate sum of values associated to node. 
    node_strengths = np.sum(heuristic_matrix, axis=0)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Penalize connections to nodes with high "strength" from all connections
                degree_penalty[i, j] = 1 / (node_strengths[i] + node_strengths[j])


    # Combine inverse distance and node degree penalty
    heuristic_matrix = heuristic_matrix * degree_penalty

    # 3. Normalization using variance across each edges
    # Standardize each row and column to values between 0 and 1.
    # To do this, take exponential. Scale exp by deviation from the mean.
    row_mean = np.mean(heuristic_matrix, axis=1, keepdims=True)
    row_std = np.std(heuristic_matrix, axis=1, keepdims=True)

    col_mean = np.mean(heuristic_matrix, axis=0, keepdims=True)
    col_std = np.std(heuristic_matrix, axis=0, keepdims=True)

    # Avoid division by zero standard deviation
    row_std = np.where(row_std == 0, 1e-6, row_std)
    col_std = np.where(col_std == 0, 1e-6, col_std)
    
    row_normalized = np.exp((heuristic_matrix - row_mean) / row_std)
    col_normalized = np.exp((heuristic_matrix - col_mean) / col_std)
    
    #Scale by product of standard deviations to normalize.
    final_heuristic_matrix = row_normalized * col_normalized

    #Zero out diagonals (no self-loops)
    np.fill_diagonal(final_heuristic_matrix, 0)

    #Make sure to set any nan or inf values to a reasonable number.
    final_heuristic_matrix = np.nan_to_num(final_heuristic_matrix, nan=0.0, posinf=0.0, neginf=0.0)


    return final_heuristic_matrix
```
