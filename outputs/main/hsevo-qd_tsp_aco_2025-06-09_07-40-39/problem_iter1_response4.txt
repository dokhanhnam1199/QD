```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Tesla's Heuristic for Traveling Salesman Problem.

    This heuristic combines multiple insights:
    1.  **Inverse Distance:** Edges with shorter distances are more promising.
    2.  **Node Degree Preference:**  Nodes with fewer close neighbors might need a stronger pull.  This is incorporated using the inverse sum of distances to other nodes.  Nodes highly connected to others can be given lower weights.
    3.  **Strategic Diversification:** A touch of randomness, like the unpredictable nature of alternating current, encourages exploration beyond the most obvious choices. A small noise component is added, ensuring not to overshadow fundamental properties.

    Args:
        distance_matrix (np.ndarray): A square matrix representing distances between nodes.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix,
                      representing prior indicators for each edge's inclusion in a solution.
    """
    n = distance_matrix.shape[0]

    # 1. Inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node degree preference (inverse sum of distances)
    node_strengths = 1 / (np.sum(distance_matrix, axis=0) + 1e-9)
    for i in range(n):
        for j in range(n):
            heuristic_matrix[i, j] *= (node_strengths[i] * node_strengths[j])

    # 3. Strategic Diversification: add some noise to encourage exploration
    noise = np.random.rand(n, n) * 0.1
    heuristic_matrix += noise
    
    return heuristic_matrix
```
