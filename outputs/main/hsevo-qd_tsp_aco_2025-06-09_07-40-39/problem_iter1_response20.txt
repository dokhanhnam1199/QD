```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on a combination of factors:
    - Inverse distance:  Shorter edges are generally more desirable.
    - Node degree equalization: Edges connected to nodes with fewer connections are favored.
    - Clustering tendency: Encourage edges within clusters (using a basic density estimation).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Node degree equalization (simplified)
    degree = np.sum(inverse_distance, axis=0) #Sum the "attractiveness" (inverse distance) for each node, approximates a degree. High value = many 'good' edges
    degree_matrix = np.outer(1 / (degree + 1e-9), 1 / (degree+ 1e-9)) #Smaller degree --> larger 1/degree

    # Clustering tendency (basic density estimation)
    # Consider neighborhood density based on distances to neighbors.
    #Nodes close to one another (high density), edges within it preferred.
    density = np.zeros(n)
    for i in range(n):
        # Simple density: inverse sum of distances to other nodes.
        density[i] = np.sum(1 / (distance_matrix[i, :] + 1e-9)) / (n - 1) #Average inverse distance
    density_matrix = np.outer(density, density) #High density pairs favored.

    heuristics = inverse_distance * (degree_matrix**0.5) * (density_matrix**0.5)  # Combine the heuristics

    return heuristics
```
