```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance and node degree.

    This version prioritizes shorter edges and edges connected to nodes with
    relatively high average distance to other nodes (to encourage connecting
    isolated nodes earlier). It also adds some random noise for exploration.
    """
    n = distance_matrix.shape[0]

    # Calculate average distance from each node to all others
    avg_distances = np.mean(distance_matrix, axis=1, keepdims=True)

    # Heuristic: shorter distance is better, connect isolated nodes earlier.
    heuristic_matrix = (1 / (distance_matrix + 1e-9)) * (avg_distances + avg_distances.T)

    # Set diagonal elements to 0 to avoid self-loops
    np.fill_diagonal(heuristic_matrix, 0)

    # Add some noise for exploration
    noise = np.random.rand(n, n) * 0.1
    heuristic_matrix += noise

    return heuristic_matrix
```
