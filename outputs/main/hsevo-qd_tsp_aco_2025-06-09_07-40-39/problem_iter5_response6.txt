```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, degree penalty, and adaptive normalization for TSP.
    Sparsifies matrix to focus search.
    """
    # Avoid division by zero
    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)

    # 1. Inverse distance
    heuristic_matrix = 1 / distance_matrix

    # 2. Node degree penalty
    num_nodes = distance_matrix.shape[0]
    degree_penalty = np.zeros_like(distance_matrix)
    node_strengths = np.sum(heuristic_matrix, axis=0)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                degree_penalty[i, j] = 1 / (node_strengths[i] + node_strengths[j])

    # Combine inverse distance and node degree penalty
    heuristic_matrix = heuristic_matrix * degree_penalty

    # 3. Adaptive Normalization and Sparsification
    node_mean_strengths = np.mean(heuristic_matrix, axis=0)  # Calculate mean strength for each node

    # Edge Sharpening & Sparsification based on node mean
    sparsification_threshold = np.mean(node_mean_strengths) * 0.5  # Dynamic threshold

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j and (node_mean_strengths[i] < sparsification_threshold or node_mean_strengths[j] < sparsification_threshold):
                heuristic_matrix[i, j] = 0  # Sparsify edges connected to weak nodes
            else:
                 heuristic_matrix[i, j] = heuristic_matrix[i, j] * (node_mean_strengths[i] + node_mean_strengths[j]) # Sharpen edges based on node strength

    # Normalization using row and column sums
    row_sums = np.sum(heuristic_matrix, axis=1, keepdims=True)
    col_sums = np.sum(heuristic_matrix, axis=0, keepdims=True)

    row_sums = np.where(row_sums == 0, 1e-6, row_sums)
    col_sums = np.where(col_sums == 0, 1e-6, col_sums)

    row_normalized = heuristic_matrix / row_sums
    col_normalized = heuristic_matrix / col_sums

    final_heuristic_matrix = row_normalized * col_normalized

    #Zero out diagonals (no self-loops)
    np.fill_diagonal(final_heuristic_matrix, 0)

    final_heuristic_matrix = np.nan_to_num(final_heuristic_matrix, nan=0.0, posinf=0.0, neginf=0.0)


    return final_heuristic_matrix
```
