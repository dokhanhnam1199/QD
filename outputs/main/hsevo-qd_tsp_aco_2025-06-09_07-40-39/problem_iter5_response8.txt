```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node degree penalty, and adaptive edge sharpening for TSP.
    """
    # Avoid division by zero
    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)

    # 1. Inverse distance
    heuristic_matrix = 1 / distance_matrix

    # 2. Node degree penalty
    num_nodes = distance_matrix.shape[0]
    degree_penalty = np.zeros_like(distance_matrix)
    node_strengths = np.sum(heuristic_matrix, axis=0)

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                degree_penalty[i, j] = 1 / (node_strengths[i] + node_strengths[j])

    # Combine inverse distance and node degree penalty
    heuristic_matrix = heuristic_matrix * degree_penalty

    # 3. Adaptive Sparsification and Edge Sharpening based on row mean and std
    row_mean = np.mean(heuristic_matrix, axis=1, keepdims=True)
    row_std = np.std(heuristic_matrix, axis=1, keepdims=True)
    row_std = np.where(row_std == 0, 1e-6, row_std)  # Avoid division by zero

    sharpening_factor = 1.5 #Adjusted sharpness
    sharpened_heuristic = np.where(heuristic_matrix > (row_mean + sharpening_factor * row_std),
                                  heuristic_matrix,
                                  0.0)  # Sparsify

    # 4. Normalization - Scale by inverse of row mean to penalize saturated nodes.
    row_sum = np.sum(sharpened_heuristic, axis=1, keepdims=True)
    row_sum = np.where(row_sum == 0, 1e-9, row_sum)  # Avoid division by zero

    normalized_heuristic = sharpened_heuristic / row_sum # Normalize.

    #Zero out diagonals (no self-loops)
    np.fill_diagonal(normalized_heuristic, 0)
    final_heuristic_matrix = np.nan_to_num(normalized_heuristic, nan=0.0, posinf=0.0, neginf=0.0)

    return final_heuristic_matrix
```
